typedef unsigned char   undefined;

typedef unsigned char    bool;
typedef unsigned char    byte;
typedef unsigned int    dword;
typedef long long    longlong;
typedef unsigned long long    qword;
typedef unsigned char    uchar;
typedef unsigned int    uint;
typedef unsigned long    ulong;
typedef unsigned long long    ulonglong;
typedef unsigned char    undefined1;
typedef unsigned short    undefined2;
typedef unsigned int    undefined3;
typedef unsigned int    undefined4;
typedef unsigned long long    undefined5;
typedef unsigned long long    undefined6;
typedef unsigned long long    undefined7;
typedef unsigned long long    undefined8;
typedef unsigned short    ushort;
typedef unsigned short    word;
#define unkbyte9   unsigned long long
#define unkbyte10   unsigned long long
#define unkbyte11   unsigned long long
#define unkbyte12   unsigned long long
#define unkbyte13   unsigned long long
#define unkbyte14   unsigned long long
#define unkbyte15   unsigned long long
#define unkbyte16   unsigned long long

#define unkuint9   unsigned long long
#define unkuint10   unsigned long long
#define unkuint11   unsigned long long
#define unkuint12   unsigned long long
#define unkuint13   unsigned long long
#define unkuint14   unsigned long long
#define unkuint15   unsigned long long
#define unkuint16   unsigned long long

#define unkint9   long long
#define unkint10   long long
#define unkint11   long long
#define unkint12   long long
#define unkint13   long long
#define unkint14   long long
#define unkint15   long long
#define unkint16   long long

#define unkfloat1   float
#define unkfloat2   float
#define unkfloat3   float
#define unkfloat5   double
#define unkfloat6   double
#define unkfloat7   double
#define unkfloat9   long double
#define unkfloat11   long double
#define unkfloat12   long double
#define unkfloat13   long double
#define unkfloat14   long double
#define unkfloat15   long double
#define unkfloat16   long double

#define BADSPACEBASE   void
#define code   void

typedef struct stat stat, *Pstat;

typedef ulonglong __u_quad_t;

typedef __u_quad_t __dev_t;

typedef ulong __ino_t;

typedef uint __mode_t;

typedef uint __nlink_t;

typedef uint __uid_t;

typedef uint __gid_t;

typedef long __off_t;

typedef long __blksize_t;

typedef long __blkcnt_t;

typedef struct timespec timespec, *Ptimespec;

typedef long __time_t;

struct timespec {
    __time_t tv_sec;
    long tv_nsec;
};

struct stat {
    __dev_t st_dev;
    ushort __pad1;
    __ino_t st_ino;
    __mode_t st_mode;
    __nlink_t st_nlink;
    __uid_t st_uid;
    __gid_t st_gid;
    __dev_t st_rdev;
    ushort __pad2;
    __off_t st_size;
    __blksize_t st_blksize;
    __blkcnt_t st_blocks;
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
    ulong __unused4;
    ulong __unused5;
};

typedef undefined complex long double[32];

typedef qword complex float;

typedef undefined complex double[16];

typedef bool _Bool;

typedef struct trpc_env_tag trpc_env_tag, *Ptrpc_env_tag;

typedef char int8_t;

typedef short __int16_t;

typedef __int16_t int16_t;

struct trpc_env_tag {
    int8_t power_dbm_max_rf;
    int8_t power_dbm_min_rf;
    int8_t power_dbm_lim_reg;
    undefined field_0x3;
    int16_t channel_freq;
    int8_t temperature;
    int8_t temperature_compensate;
};

typedef struct cfg80211_bss_select_adjust cfg80211_bss_select_adjust, *Pcfg80211_bss_select_adjust;

typedef enum nl80211_band {
    NL80211_BAND_2GHZ=0,
    NL80211_BAND_5GHZ=1,
    NL80211_BAND_60GHZ=2,
    NUM_NL80211_BANDS=3
} nl80211_band;

typedef int8_t s8;

struct cfg80211_bss_select_adjust {
    enum nl80211_band band;
    s8 delta;
};

typedef enum ieee80211_channel_flags {
    IEEE80211_CHAN_DISABLED=1,
    IEEE80211_CHAN_INDOOR_ONLY=512,
    IEEE80211_CHAN_IR_CONCURRENT=1024,
    IEEE80211_CHAN_NO_10MHZ=4096,
    IEEE80211_CHAN_NO_160MHZ=256,
    IEEE80211_CHAN_NO_20MHZ=2048,
    IEEE80211_CHAN_NO_80MHZ=-128,
    IEEE80211_CHAN_NO_HT40MINUS=32,
    IEEE80211_CHAN_NO_HT40PLUS=16,
    IEEE80211_CHAN_NO_IR=2,
    IEEE80211_CHAN_NO_OFDM=64,
    IEEE80211_CHAN_RADAR=8
} ieee80211_channel_flags;

typedef struct ieee80211_channel ieee80211_channel, *Pieee80211_channel;

typedef ushort uint16_t;

typedef uint16_t u16;

typedef ulong uint32_t;

typedef uint32_t u32.conflict10;

typedef uint32_t u32.conflict11;

typedef enum nl80211_dfs_state {
    NL80211_DFS_AVAILABLE=2,
    NL80211_DFS_UNAVAILABLE=1,
    NL80211_DFS_USABLE=0
} nl80211_dfs_state;

struct ieee80211_channel {
    enum nl80211_band band;
    undefined field_0x1;
    u16 center_freq;
    u16 hw_value;
    undefined field_0x6;
    undefined field_0x7;
    u32.conflict10 flags;
    int max_antenna_gain;
    int max_power;
    int max_reg_power;
    _Bool beacon_found;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
    u32.conflict11 orig_flags;
    int orig_mag;
    int orig_mpwr;
    enum nl80211_dfs_state dfs_state;
    undefined field_0x29;
    undefined field_0x2a;
    undefined field_0x2b;
    ulong dfs_state_entered;
    uint dfs_cac_ms;
};

typedef struct ieee80211_dot_d ieee80211_dot_d, *Pieee80211_dot_d;

struct ieee80211_dot_d {
    char * code;
    int channel_num;
    struct ieee80211_channel * channels;
};

typedef struct cfg80211_connect_params cfg80211_connect_params, *Pcfg80211_connect_params;

typedef uchar u8;

typedef uint size_t;

typedef enum nl80211_auth_type {
    NL80211_AUTHTYPE_AUTOMATIC=8,
    NL80211_AUTHTYPE_FILS_PK=7,
    NL80211_AUTHTYPE_FILS_SK=5,
    NL80211_AUTHTYPE_FILS_SK_PFS=6,
    NL80211_AUTHTYPE_FT=2,
    NL80211_AUTHTYPE_MAX=7,
    NL80211_AUTHTYPE_NETWORK_EAP=3,
    NL80211_AUTHTYPE_OPEN_SYSTEM=0,
    NL80211_AUTHTYPE_SAE=4,
    NL80211_AUTHTYPE_SHARED_KEY=1,
    __NL80211_AUTHTYPE_NUM=8
} nl80211_auth_type;

typedef enum nl80211_mfp {
    NL80211_MFP_NO=0,
    NL80211_MFP_REQUIRED=1
} nl80211_mfp;

typedef struct cfg80211_crypto_settings cfg80211_crypto_settings, *Pcfg80211_crypto_settings;

typedef uint32_t u32.conflict19;

typedef struct ieee80211_ht_cap ieee80211_ht_cap, *Pieee80211_ht_cap;

typedef struct cfg80211_bss_selection cfg80211_bss_selection, *Pcfg80211_bss_selection;

typedef uint32_t u32.conflict13;

typedef uint32_t u32.conflict14;

typedef uint32_t u32.conflict15;

typedef uint32_t u32.conflict16;

typedef uint16_t __be16;

typedef struct key_params key_params, *Pkey_params;

typedef uint16_t __le16;

typedef struct ieee80211_mcs_info ieee80211_mcs_info, *Pieee80211_mcs_info;

typedef uint32_t __le32;

typedef enum nl80211_bss_select_attr {
    NL80211_BSS_SELECT_ATTR_BAND_PREF=2,
    NL80211_BSS_SELECT_ATTR_MAX=3,
    NL80211_BSS_SELECT_ATTR_RSSI=1,
    NL80211_BSS_SELECT_ATTR_RSSI_ADJUST=3,
    __NL80211_BSS_SELECT_ATTR_AFTER_LAST=4,
    __NL80211_BSS_SELECT_ATTR_INVALID=0
} nl80211_bss_select_attr;

typedef union anon_union_for_param anon_union_for_param, *Panon_union_for_param;

typedef uint32_t u32.conflict12;

union anon_union_for_param {
    enum nl80211_band band_pref;
    struct cfg80211_bss_select_adjust adjust;
};

struct cfg80211_bss_selection {
    enum nl80211_bss_select_attr behaviour;
    union anon_union_for_param param;
};

struct cfg80211_crypto_settings {
    u32.conflict13 wpa_versions;
    u32.conflict14 cipher_group;
    int n_ciphers_pairwise;
    u32.conflict15 ciphers_pairwise[5];
    int n_akm_suites;
    u32.conflict16 akm_suites[2];
    _Bool control_port;
    undefined field_0x2d;
    __be16 control_port_ethertype;
    _Bool control_port_no_encrypt;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct key_params * wep_keys;
    int wep_tx_key;
};

struct ieee80211_mcs_info {
    u8 rx_mask[10];
    __le16 rx_highest;
    u8 tx_params;
    u8 reserved[3];
};

struct ieee80211_ht_cap {
    __le16 cap_info;
    u8 ampdu_params_info;
    undefined field_0x3;
    struct ieee80211_mcs_info mcs;
    __le16 extended_ht_cap_info;
    undefined field_0x16;
    undefined field_0x17;
    __le32 tx_BF_cap_info;
    u8 antenna_selection_info;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
};

struct cfg80211_connect_params {
    struct ieee80211_channel channel;
    struct ieee80211_channel * channel_hint;
    u8 * bssid;
    u8 * bssid_hint;
    u8 * ssid;
    size_t ssid_len;
    enum nl80211_auth_type auth_type;
    undefined field_0x49;
    undefined field_0x4a;
    undefined field_0x4b;
    u8 * ie;
    size_t ie_len;
    _Bool privacy;
    enum nl80211_mfp mfp;
    undefined field_0x56;
    undefined field_0x57;
    struct cfg80211_crypto_settings crypto;
    u8 * key;
    u8 * pmk;
    u8 key_len;
    u8 pmk_len;
    u8 key_idx;
    undefined field_0x9f;
    u32.conflict19 flags;
    int bg_scan_period;
    struct ieee80211_ht_cap ht_capa;
    struct ieee80211_ht_cap ht_capa_mask;
    _Bool pbss;
    struct cfg80211_bss_selection bss_select;
    u8 * prev_bssid;
};

struct key_params {
    u8 * key;
    u8 * seq;
    int key_len;
    int seq_len;
    u32.conflict12 cipher;
};

typedef struct ieee80211_sta_ht_cap ieee80211_sta_ht_cap, *Pieee80211_sta_ht_cap;

struct ieee80211_sta_ht_cap {
    u16 cap;
    _Bool ht_supported;
    u8 ampdu_factor;
    u8 ampdu_density;
    undefined field_0x5;
    struct ieee80211_mcs_info mcs;
};

typedef enum wiphy_flags {
    WIPHY_FLAG_4ADDR_AP=32,
    WIPHY_FLAG_4ADDR_STATION=64,
    WIPHY_FLAG_AP_PROBE_RESP_OFFLOAD=524288,
    WIPHY_FLAG_AP_UAPSD=16384,
    WIPHY_FLAG_CONTROL_PORT_PROTOCOL=-128,
    WIPHY_FLAG_HAS_CHANNEL_SWITCH=8388608,
    WIPHY_FLAG_HAS_REMAIN_ON_CHANNEL=2097152,
    WIPHY_FLAG_HAS_STATIC_WEP=16777216,
    WIPHY_FLAG_HAVE_AP_SME=131072,
    WIPHY_FLAG_IBSS_RSN=256,
    WIPHY_FLAG_MESH_AUTH=1024,
    WIPHY_FLAG_NETNS_OK=8,
    WIPHY_FLAG_OFFCHAN_TX=1048576,
    WIPHY_FLAG_PS_ON_BY_DEFAULT=16,
    WIPHY_FLAG_REPORTS_OBSS=262144,
    WIPHY_FLAG_SUPPORTS_5_10_MHZ=4194304,
    WIPHY_FLAG_SUPPORTS_FW_ROAM=8192,
    WIPHY_FLAG_SUPPORTS_SCHED_SCAN=2048,
    WIPHY_FLAG_SUPPORTS_TDLS=-32768,
    WIPHY_FLAG_TDLS_EXTERNAL_SETUP=65536
} wiphy_flags;

typedef union anon_union.conflict185 anon_union.conflict185, *Panon_union.conflict185;

union anon_union.conflict185 {
    enum nl80211_band band_pref;
    struct cfg80211_bss_select_adjust adjust;
};

typedef union anon_union.conflict182 anon_union.conflict182, *Panon_union.conflict182;

union anon_union.conflict182 {
    enum nl80211_band band_pref;
    struct cfg80211_bss_select_adjust adjust;
};

typedef struct ke_evt_tag ke_evt_tag, *Pke_evt_tag;

struct ke_evt_tag {
    void (* func)(int);
    int param;
};

typedef union MQTT_Connect_Header_Flags MQTT_Connect_Header_Flags, *PMQTT_Connect_Header_Flags;

typedef uchar uint8_t;

typedef struct anon_struct.conflict403 anon_struct.conflict403, *Panon_struct.conflict403;

struct anon_struct.conflict403 {
    uint cleansession:1;
    uint will:1;
    uint willQoS:2;
    uint willRetain:1;
    uint password:1;
    uint username:1;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
};

union MQTT_Connect_Header_Flags {
    uint8_t all;
    struct anon_struct.conflict403 bits;
};

typedef union MQTT_Connack_Header_Flags MQTT_Connack_Header_Flags, *PMQTT_Connack_Header_Flags;

typedef struct anon_struct.conflict404 anon_struct.conflict404, *Panon_struct.conflict404;

struct anon_struct.conflict404 {
    uint sessionpresent:1;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
};

union MQTT_Connack_Header_Flags {
    uint8_t all;
    struct anon_struct.conflict404 bits;
};

typedef struct cipher_key_buf cipher_key_buf, *Pcipher_key_buf;

typedef struct cipher_key_buf cipher_key_buf_t;

typedef struct cipher_key_t cipher_key_t, *Pcipher_key_t;

typedef union ckd ckd, *Pckd;

typedef struct eapolHskData_t eapolHskData_t, *PeapolHskData_t;

typedef uchar UINT8;

typedef struct KeyData_t KeyData_t, *PKeyData_t;

typedef ulong UINT32;

typedef ushort UINT16;

struct KeyData_t {
    UINT8 Key[16];
    UINT8 RxMICKey[8];
    UINT8 TxMICKey[8];
    UINT32 TxIV32;
    UINT16 TxIV16;
    UINT16 KeyIndex;
};

struct eapolHskData_t {
    UINT8 ANonce[32];
    struct KeyData_t pwsKeyData;
};

union ckd {
    struct eapolHskData_t hskData;
};

struct cipher_key_t {
    union ckd ckd;
};

struct cipher_key_buf {
    struct cipher_key_t cipher_key;
};

typedef void * __gnuc_va_list;

typedef __gnuc_va_list va_list;

typedef struct _TLSDataParams.conflict8 _TLSDataParams.conflict8, *P_TLSDataParams.conflict8;

typedef struct _TLSDataParams.conflict8 TLSDataParams.conflict6;

typedef struct mbedtls_entropy_context mbedtls_entropy_context, *Pmbedtls_entropy_context;

typedef struct mbedtls_ctr_drbg_context mbedtls_ctr_drbg_context, *Pmbedtls_ctr_drbg_context;

typedef struct mbedtls_ssl_context.conflict12 mbedtls_ssl_context.conflict12, *Pmbedtls_ssl_context.conflict12;

typedef struct mbedtls_ssl_config.conflict15 mbedtls_ssl_config.conflict15, *Pmbedtls_ssl_config.conflict15;

typedef struct mbedtls_ssl_session mbedtls_ssl_session, *Pmbedtls_ssl_session;

typedef struct mbedtls_ssl_context mbedtls_ssl_context, *Pmbedtls_ssl_context;

typedef struct mbedtls_x509_crt mbedtls_x509_crt, *Pmbedtls_x509_crt;

typedef struct mbedtls_pk_context mbedtls_pk_context, *Pmbedtls_pk_context;

typedef struct mbedtls_net_context mbedtls_net_context, *Pmbedtls_net_context;

typedef struct mbedtls_sha256_context mbedtls_sha256_context, *Pmbedtls_sha256_context;

typedef struct mbedtls_entropy_source_state mbedtls_entropy_source_state, *Pmbedtls_entropy_source_state;

typedef struct mbedtls_aes_context mbedtls_aes_context, *Pmbedtls_aes_context;

typedef struct mbedtls_ssl_config mbedtls_ssl_config, *Pmbedtls_ssl_config;

typedef struct mbedtls_ssl_handshake_params mbedtls_ssl_handshake_params, *Pmbedtls_ssl_handshake_params;

typedef struct mbedtls_ssl_transform mbedtls_ssl_transform, *Pmbedtls_ssl_transform;

typedef struct mbedtls_asn1_buf mbedtls_asn1_buf, *Pmbedtls_asn1_buf;

typedef struct mbedtls_asn1_buf mbedtls_x509_buf;

typedef struct mbedtls_asn1_named_data mbedtls_asn1_named_data, *Pmbedtls_asn1_named_data;

typedef struct mbedtls_asn1_named_data mbedtls_x509_name;

typedef struct mbedtls_x509_time mbedtls_x509_time, *Pmbedtls_x509_time;

typedef struct mbedtls_asn1_sequence mbedtls_asn1_sequence, *Pmbedtls_asn1_sequence;

typedef struct mbedtls_asn1_sequence mbedtls_x509_sequence;

typedef enum mbedtls_md_type_t {
    MBEDTLS_MD_MD2=1,
    MBEDTLS_MD_MD4=2,
    MBEDTLS_MD_MD5=3,
    MBEDTLS_MD_NONE=0,
    MBEDTLS_MD_RIPEMD160=9,
    MBEDTLS_MD_SHA1=4,
    MBEDTLS_MD_SHA224=5,
    MBEDTLS_MD_SHA256=6,
    MBEDTLS_MD_SHA384=7,
    MBEDTLS_MD_SHA512=8
} mbedtls_md_type_t;

typedef enum mbedtls_pk_type_t {
    MBEDTLS_PK_ECDSA=4,
    MBEDTLS_PK_ECKEY=2,
    MBEDTLS_PK_ECKEY_DH=3,
    MBEDTLS_PK_NONE=0,
    MBEDTLS_PK_RSA=1,
    MBEDTLS_PK_RSASSA_PSS=6,
    MBEDTLS_PK_RSA_ALT=5
} mbedtls_pk_type_t;

typedef struct mbedtls_x509_crt_profile mbedtls_x509_crt_profile, *Pmbedtls_x509_crt_profile;

typedef struct mbedtls_ssl_key_cert mbedtls_ssl_key_cert, *Pmbedtls_ssl_key_cert;

typedef struct mbedtls_x509_crl mbedtls_x509_crl, *Pmbedtls_x509_crl;

typedef enum mbedtls_ecp_group_id {
    MBEDTLS_ECP_DP_BP256R1=6,
    MBEDTLS_ECP_DP_BP384R1=7,
    MBEDTLS_ECP_DP_BP512R1=8,
    MBEDTLS_ECP_DP_CURVE25519=9,
    MBEDTLS_ECP_DP_NONE=0,
    MBEDTLS_ECP_DP_SECP192K1=10,
    MBEDTLS_ECP_DP_SECP192R1=1,
    MBEDTLS_ECP_DP_SECP224K1=11,
    MBEDTLS_ECP_DP_SECP224R1=2,
    MBEDTLS_ECP_DP_SECP256K1=12,
    MBEDTLS_ECP_DP_SECP256R1=3,
    MBEDTLS_ECP_DP_SECP384R1=4,
    MBEDTLS_ECP_DP_SECP521R1=5
} mbedtls_ecp_group_id;

typedef struct mbedtls_pk_info_t mbedtls_pk_info_t, *Pmbedtls_pk_info_t;

typedef struct mbedtls_pk_debug_item mbedtls_pk_debug_item, *Pmbedtls_pk_debug_item;

typedef struct mbedtls_ssl_flight_item mbedtls_ssl_flight_item, *Pmbedtls_ssl_flight_item;

typedef struct mbedtls_ssl_ciphersuite_t mbedtls_ssl_ciphersuite_t, *Pmbedtls_ssl_ciphersuite_t;

typedef struct mbedtls_md_context_t mbedtls_md_context_t, *Pmbedtls_md_context_t;

typedef struct mbedtls_cipher_context_t mbedtls_cipher_context_t, *Pmbedtls_cipher_context_t;

typedef struct mbedtls_x509_crl_entry mbedtls_x509_crl_entry, *Pmbedtls_x509_crl_entry;

typedef enum mbedtls_pk_debug_type {
    MBEDTLS_PK_DEBUG_ECP=2,
    MBEDTLS_PK_DEBUG_MPI=1,
    MBEDTLS_PK_DEBUG_NONE=0
} mbedtls_pk_debug_type;

typedef enum mbedtls_cipher_type_t {
    MBEDTLS_CIPHER_AES_128_CBC=5,
    MBEDTLS_CIPHER_AES_128_CCM=43,
    MBEDTLS_CIPHER_AES_128_CFB128=8,
    MBEDTLS_CIPHER_AES_128_CTR=11,
    MBEDTLS_CIPHER_AES_128_ECB=2,
    MBEDTLS_CIPHER_AES_128_GCM=14,
    MBEDTLS_CIPHER_AES_192_CBC=6,
    MBEDTLS_CIPHER_AES_192_CCM=44,
    MBEDTLS_CIPHER_AES_192_CFB128=9,
    MBEDTLS_CIPHER_AES_192_CTR=12,
    MBEDTLS_CIPHER_AES_192_ECB=3,
    MBEDTLS_CIPHER_AES_192_GCM=15,
    MBEDTLS_CIPHER_AES_256_CBC=7,
    MBEDTLS_CIPHER_AES_256_CCM=45,
    MBEDTLS_CIPHER_AES_256_CFB128=10,
    MBEDTLS_CIPHER_AES_256_CTR=13,
    MBEDTLS_CIPHER_AES_256_ECB=4,
    MBEDTLS_CIPHER_AES_256_GCM=16,
    MBEDTLS_CIPHER_ARC4_128=42,
    MBEDTLS_CIPHER_BLOWFISH_CBC=39,
    MBEDTLS_CIPHER_BLOWFISH_CFB64=40,
    MBEDTLS_CIPHER_BLOWFISH_CTR=41,
    MBEDTLS_CIPHER_BLOWFISH_ECB=38,
    MBEDTLS_CIPHER_CAMELLIA_128_CBC=20,
    MBEDTLS_CIPHER_CAMELLIA_128_CCM=46,
    MBEDTLS_CIPHER_CAMELLIA_128_CFB128=23,
    MBEDTLS_CIPHER_CAMELLIA_128_CTR=26,
    MBEDTLS_CIPHER_CAMELLIA_128_ECB=17,
    MBEDTLS_CIPHER_CAMELLIA_128_GCM=29,
    MBEDTLS_CIPHER_CAMELLIA_192_CBC=21,
    MBEDTLS_CIPHER_CAMELLIA_192_CCM=47,
    MBEDTLS_CIPHER_CAMELLIA_192_CFB128=24,
    MBEDTLS_CIPHER_CAMELLIA_192_CTR=27,
    MBEDTLS_CIPHER_CAMELLIA_192_ECB=18,
    MBEDTLS_CIPHER_CAMELLIA_192_GCM=30,
    MBEDTLS_CIPHER_CAMELLIA_256_CBC=22,
    MBEDTLS_CIPHER_CAMELLIA_256_CCM=48,
    MBEDTLS_CIPHER_CAMELLIA_256_CFB128=25,
    MBEDTLS_CIPHER_CAMELLIA_256_CTR=28,
    MBEDTLS_CIPHER_CAMELLIA_256_ECB=19,
    MBEDTLS_CIPHER_CAMELLIA_256_GCM=31,
    MBEDTLS_CIPHER_DES_CBC=33,
    MBEDTLS_CIPHER_DES_ECB=32,
    MBEDTLS_CIPHER_DES_EDE3_CBC=37,
    MBEDTLS_CIPHER_DES_EDE3_ECB=36,
    MBEDTLS_CIPHER_DES_EDE_CBC=35,
    MBEDTLS_CIPHER_DES_EDE_ECB=34,
    MBEDTLS_CIPHER_NONE=0,
    MBEDTLS_CIPHER_NULL=1
} mbedtls_cipher_type_t;

typedef enum mbedtls_key_exchange_type_t {
    MBEDTLS_KEY_EXCHANGE_DHE_PSK=6,
    MBEDTLS_KEY_EXCHANGE_DHE_RSA=2,
    MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA=4,
    MBEDTLS_KEY_EXCHANGE_ECDHE_PSK=8,
    MBEDTLS_KEY_EXCHANGE_ECDHE_RSA=3,
    MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA=10,
    MBEDTLS_KEY_EXCHANGE_ECDH_RSA=9,
    MBEDTLS_KEY_EXCHANGE_ECJPAKE=11,
    MBEDTLS_KEY_EXCHANGE_NONE=0,
    MBEDTLS_KEY_EXCHANGE_PSK=5,
    MBEDTLS_KEY_EXCHANGE_RSA=1,
    MBEDTLS_KEY_EXCHANGE_RSA_PSK=7
} mbedtls_key_exchange_type_t;

typedef struct mbedtls_md_info_t mbedtls_md_info_t, *Pmbedtls_md_info_t;

typedef struct mbedtls_cipher_info_t mbedtls_cipher_info_t, *Pmbedtls_cipher_info_t;

typedef enum mbedtls_operation_t {
    MBEDTLS_DECRYPT=0,
    MBEDTLS_ENCRYPT=1,
    MBEDTLS_OPERATION_NONE=-1
} mbedtls_operation_t;

typedef enum mbedtls_cipher_mode_t {
    MBEDTLS_MODE_CBC=2,
    MBEDTLS_MODE_CCM=8,
    MBEDTLS_MODE_CFB=3,
    MBEDTLS_MODE_CTR=5,
    MBEDTLS_MODE_ECB=1,
    MBEDTLS_MODE_GCM=6,
    MBEDTLS_MODE_NONE=0,
    MBEDTLS_MODE_OFB=4,
    MBEDTLS_MODE_STREAM=7
} mbedtls_cipher_mode_t;

typedef struct mbedtls_cipher_base_t mbedtls_cipher_base_t, *Pmbedtls_cipher_base_t;

typedef enum mbedtls_cipher_id_t {
    MBEDTLS_CIPHER_ID_3DES=4,
    MBEDTLS_CIPHER_ID_AES=2,
    MBEDTLS_CIPHER_ID_ARC4=7,
    MBEDTLS_CIPHER_ID_BLOWFISH=6,
    MBEDTLS_CIPHER_ID_CAMELLIA=5,
    MBEDTLS_CIPHER_ID_DES=3,
    MBEDTLS_CIPHER_ID_NONE=0,
    MBEDTLS_CIPHER_ID_NULL=1
} mbedtls_cipher_id_t;

struct mbedtls_asn1_buf {
    int tag;
    size_t len;
    uchar * p;
};

struct mbedtls_asn1_named_data {
    struct mbedtls_asn1_buf oid;
    struct mbedtls_asn1_buf val;
    struct mbedtls_asn1_named_data * next;
    uchar next_merged;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
};

struct mbedtls_aes_context {
    int nr;
    uint32_t * rk;
    uint32_t buf[68];
};

struct mbedtls_ssl_session {
    int ciphersuite;
    int compression;
    size_t id_len;
    uchar id[32];
    uchar master[48];
    struct mbedtls_x509_crt * peer_cert;
    uint32_t verify_result;
    uchar * ticket;
    size_t ticket_len;
    uint32_t ticket_lifetime;
    uchar mfl_code;
    undefined field_0x71;
    undefined field_0x72;
    undefined field_0x73;
};

struct mbedtls_x509_time {
    int year;
    int mon;
    int day;
    int hour;
    int min;
    int sec;
};

struct mbedtls_x509_crl_entry {
    mbedtls_x509_buf raw;
    mbedtls_x509_buf serial;
    struct mbedtls_x509_time revocation_date;
    mbedtls_x509_buf entry_ext;
    struct mbedtls_x509_crl_entry * next;
};

struct mbedtls_x509_crl {
    mbedtls_x509_buf raw;
    mbedtls_x509_buf tbs;
    int version;
    mbedtls_x509_buf sig_oid;
    mbedtls_x509_buf issuer_raw;
    mbedtls_x509_name issuer;
    struct mbedtls_x509_time this_update;
    struct mbedtls_x509_time next_update;
    struct mbedtls_x509_crl_entry entry;
    mbedtls_x509_buf crl_ext;
    mbedtls_x509_buf sig_oid2;
    mbedtls_x509_buf sig;
    enum mbedtls_md_type_t sig_md;
    enum mbedtls_pk_type_t sig_pk;
    undefined field_0xea;
    undefined field_0xeb;
    void * sig_opts;
    struct mbedtls_x509_crl * next;
};

struct mbedtls_ctr_drbg_context {
    uchar counter[16];
    int reseed_counter;
    int prediction_resistance;
    size_t entropy_len;
    int reseed_interval;
    struct mbedtls_aes_context aes_ctx;
    int (* f_entropy)(void *, uchar *, size_t);
    void * p_entropy;
};

struct mbedtls_ssl_context {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_md_info_t {
    enum mbedtls_md_type_t type;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    char * name;
    int size;
    int block_size;
    void (* starts_func)(void *);
    void (* update_func)(void *, uchar *, size_t);
    void (* finish_func)(void *, uchar *);
    void (* digest_func)(uchar *, size_t, uchar *);
    void * (* ctx_alloc_func)(void);
    void (* ctx_free_func)(void *);
    void (* clone_func)(void *, void *);
    void (* process_func)(void *, uchar *);
};

struct mbedtls_ssl_config {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_cipher_context_t {
    struct mbedtls_cipher_info_t * cipher_info;
    int key_bitlen;
    enum mbedtls_operation_t operation;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    void (* add_padding)(uchar *, size_t, size_t);
    int (* get_padding)(uchar *, size_t, size_t *);
    uchar unprocessed_data[16];
    size_t unprocessed_len;
    uchar iv[16];
    size_t iv_size;
    void * cipher_ctx;
};

struct mbedtls_md_context_t {
    struct mbedtls_md_info_t * md_info;
    void * md_ctx;
    void * hmac_ctx;
};

struct mbedtls_ssl_transform {
    struct mbedtls_ssl_ciphersuite_t * ciphersuite_info;
    uint keylen;
    size_t minlen;
    size_t ivlen;
    size_t fixed_ivlen;
    size_t maclen;
    uchar iv_enc[16];
    uchar iv_dec[16];
    struct mbedtls_md_context_t md_ctx_enc;
    struct mbedtls_md_context_t md_ctx_dec;
    struct mbedtls_cipher_context_t cipher_ctx_enc;
    struct mbedtls_cipher_context_t cipher_ctx_dec;
};

struct mbedtls_sha256_context {
    uint32_t total[2];
    uint32_t state[8];
    uchar buffer[64];
    int is224;
    size_t size;
    void * ali_ctx;
};

struct mbedtls_entropy_source_state {
    int (* f_source)(void *, uchar *, size_t, size_t *);
    void * p_source;
    size_t size;
    size_t threshold;
    int strong;
};

struct mbedtls_entropy_context {
    struct mbedtls_sha256_context accumulator;
    int source_count;
    struct mbedtls_entropy_source_state source[20];
};

struct mbedtls_pk_context {
    struct mbedtls_pk_info_t * pk_info;
    void * pk_ctx;
};

struct mbedtls_ssl_config.conflict15 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict12 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_net_context {
    int fd;
};

struct mbedtls_asn1_sequence {
    struct mbedtls_asn1_buf buf;
    struct mbedtls_asn1_sequence * next;
};

struct mbedtls_x509_crt {
    mbedtls_x509_buf raw;
    mbedtls_x509_buf tbs;
    int version;
    mbedtls_x509_buf serial;
    mbedtls_x509_buf sig_oid;
    mbedtls_x509_buf issuer_raw;
    mbedtls_x509_buf subject_raw;
    mbedtls_x509_name issuer;
    mbedtls_x509_name subject;
    struct mbedtls_x509_time valid_from;
    struct mbedtls_x509_time valid_to;
    struct mbedtls_pk_context pk;
    mbedtls_x509_buf issuer_id;
    mbedtls_x509_buf subject_id;
    mbedtls_x509_buf v3_ext;
    mbedtls_x509_sequence subject_alt_names;
    int ext_types;
    int ca_istrue;
    int max_pathlen;
    uint key_usage;
    mbedtls_x509_sequence ext_key_usage;
    uchar ns_cert_type;
    undefined field_0x119;
    undefined field_0x11a;
    undefined field_0x11b;
    mbedtls_x509_buf sig;
    enum mbedtls_md_type_t sig_md;
    enum mbedtls_pk_type_t sig_pk;
    undefined field_0x12a;
    undefined field_0x12b;
    void * sig_opts;
    struct mbedtls_x509_crt * next;
};

struct _TLSDataParams.conflict8 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict12 ssl;
    struct mbedtls_ssl_config.conflict15 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

struct mbedtls_cipher_base_t {
    enum mbedtls_cipher_id_t cipher;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    int (* ecb_func)(void *, enum mbedtls_operation_t, uchar *, uchar *);
    int (* cbc_func)(void *, enum mbedtls_operation_t, size_t, uchar *, uchar *, uchar *);
    int (* cfb_func)(void *, enum mbedtls_operation_t, size_t, size_t *, uchar *, uchar *, uchar *);
    int (* ctr_func)(void *, size_t, size_t *, uchar *, uchar *, uchar *, uchar *);
    int (* setkey_enc_func)(void *, uchar *, uint);
    int (* setkey_dec_func)(void *, uchar *, uint);
    void * (* ctx_alloc_func)(void);
    void (* ctx_free_func)(void *);
};

struct mbedtls_ssl_ciphersuite_t {
    int id;
    char * name;
    enum mbedtls_cipher_type_t cipher;
    enum mbedtls_md_type_t mac;
    enum mbedtls_key_exchange_type_t key_exchange;
    undefined field_0xb;
    int min_major_ver;
    int min_minor_ver;
    int max_major_ver;
    int max_minor_ver;
    uchar flags;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
};

struct mbedtls_cipher_info_t {
    enum mbedtls_cipher_type_t type;
    enum mbedtls_cipher_mode_t mode;
    undefined field_0x2;
    undefined field_0x3;
    uint key_bitlen;
    char * name;
    uint iv_size;
    int flags;
    uint block_size;
    struct mbedtls_cipher_base_t * base;
};

struct mbedtls_pk_debug_item {
    enum mbedtls_pk_debug_type type;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    char * name;
    void * value;
};

struct mbedtls_ssl_flight_item {
    uchar * p;
    size_t len;
    uchar type;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    struct mbedtls_ssl_flight_item * next;
};

struct mbedtls_ssl_key_cert {
    struct mbedtls_x509_crt * cert;
    struct mbedtls_pk_context * key;
    struct mbedtls_ssl_key_cert * next;
};

struct mbedtls_pk_info_t {
    enum mbedtls_pk_type_t type;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    char * name;
    size_t (* get_bitlen)(void *);
    int (* can_do)(enum mbedtls_pk_type_t);
    int (* verify_func)(void *, enum mbedtls_md_type_t, uchar *, size_t, uchar *, size_t);
    int (* sign_func)(void *, enum mbedtls_md_type_t, uchar *, size_t, uchar *, size_t *, int (* )(void *, uchar *, size_t), void *);
    int (* decrypt_func)(void *, uchar *, size_t, uchar *, size_t *, size_t, int (* )(void *, uchar *, size_t), void *);
    int (* encrypt_func)(void *, uchar *, size_t, uchar *, size_t *, size_t, int (* )(void *, uchar *, size_t), void *);
    int (* check_pair_func)(void *, void *);
    void * (* ctx_alloc_func)(void);
    void (* ctx_free_func)(void *);
    void (* debug_func)(void *, struct mbedtls_pk_debug_item *);
};

struct mbedtls_x509_crt_profile {
    uint32_t allowed_mds;
    uint32_t allowed_pks;
    uint32_t allowed_curves;
    uint32_t rsa_min_bitlen;
};

struct mbedtls_ssl_handshake_params {
    int sig_alg;
    int verify_sig_alg;
    struct mbedtls_ssl_key_cert * key_cert;
    int sni_authmode;
    struct mbedtls_ssl_key_cert * sni_key_cert;
    struct mbedtls_x509_crt * sni_ca_chain;
    struct mbedtls_x509_crl * sni_ca_crl;
    uint out_msg_seq;
    uint in_msg_seq;
    uchar * verify_cookie;
    uchar verify_cookie_len;
    undefined field_0x29;
    undefined field_0x2a;
    undefined field_0x2b;
    uchar * hs_msg;
    uint32_t retransmit_timeout;
    uchar retransmit_state;
    undefined field_0x35;
    undefined field_0x36;
    undefined field_0x37;
    struct mbedtls_ssl_flight_item * flight;
    struct mbedtls_ssl_flight_item * cur_msg;
    uint in_flight_start_seq;
    struct mbedtls_ssl_transform * alt_transform_out;
    uchar alt_out_ctr[8];
    struct mbedtls_sha256_context fin_sha256;
    void (* update_checksum)(struct mbedtls_ssl_context *, uchar *, size_t);
    void (* calc_verify)(struct mbedtls_ssl_context *, uchar *);
    void (* calc_finished)(struct mbedtls_ssl_context *, uchar *, int);
    int (* tls_prf)(uchar *, size_t, char *, uchar *, size_t, uchar *, size_t);
    size_t pmslen;
    uchar randbytes[64];
    uchar premaster[48];
    int resume;
    int max_major_ver;
    int max_minor_ver;
    int cli_exts;
    int new_session_ticket;
};

typedef struct _TLSDataParams.conflict7 _TLSDataParams.conflict7, *P_TLSDataParams.conflict7;

typedef struct _TLSDataParams.conflict7 TLSDataParams.conflict5;

typedef struct mbedtls_ssl_context.conflict11 mbedtls_ssl_context.conflict11, *Pmbedtls_ssl_context.conflict11;

typedef struct mbedtls_ssl_config.conflict14 mbedtls_ssl_config.conflict14, *Pmbedtls_ssl_config.conflict14;

struct mbedtls_ssl_config.conflict14 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict11 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict7 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict11 ssl;
    struct mbedtls_ssl_config.conflict14 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict10 _TLSDataParams.conflict10, *P_TLSDataParams.conflict10;

typedef struct _TLSDataParams.conflict10 TLSDataParams.conflict8;

typedef struct mbedtls_ssl_context.conflict14 mbedtls_ssl_context.conflict14, *Pmbedtls_ssl_context.conflict14;

typedef struct mbedtls_ssl_config.conflict17 mbedtls_ssl_config.conflict17, *Pmbedtls_ssl_config.conflict17;

struct mbedtls_ssl_config.conflict17 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict14 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict10 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict14 ssl;
    struct mbedtls_ssl_config.conflict17 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict9 _TLSDataParams.conflict9, *P_TLSDataParams.conflict9;

typedef struct _TLSDataParams.conflict9 TLSDataParams.conflict7;

typedef struct mbedtls_ssl_context.conflict13 mbedtls_ssl_context.conflict13, *Pmbedtls_ssl_context.conflict13;

typedef struct mbedtls_ssl_config.conflict16 mbedtls_ssl_config.conflict16, *Pmbedtls_ssl_config.conflict16;

struct mbedtls_ssl_config.conflict16 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict13 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict9 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict13 ssl;
    struct mbedtls_ssl_config.conflict16 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict12 _TLSDataParams.conflict12, *P_TLSDataParams.conflict12;

typedef struct _TLSDataParams.conflict12 TLSDataParams.conflict9;

typedef struct mbedtls_ssl_context.conflict18 mbedtls_ssl_context.conflict18, *Pmbedtls_ssl_context.conflict18;

typedef struct mbedtls_ssl_config.conflict22 mbedtls_ssl_config.conflict22, *Pmbedtls_ssl_config.conflict22;

struct mbedtls_ssl_config.conflict22 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict18 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict12 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict18 ssl;
    struct mbedtls_ssl_config.conflict22 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict19 _TLSDataParams.conflict19, *P_TLSDataParams.conflict19;

typedef struct mbedtls_ssl_context.conflict27 mbedtls_ssl_context.conflict27, *Pmbedtls_ssl_context.conflict27;

typedef struct mbedtls_ssl_config.conflict32 mbedtls_ssl_config.conflict32, *Pmbedtls_ssl_config.conflict32;

struct mbedtls_ssl_context.conflict27 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_ssl_config.conflict32 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct _TLSDataParams.conflict19 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict27 ssl;
    struct mbedtls_ssl_config.conflict32 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict15 _TLSDataParams.conflict15, *P_TLSDataParams.conflict15;

typedef struct mbedtls_ssl_context.conflict21 mbedtls_ssl_context.conflict21, *Pmbedtls_ssl_context.conflict21;

typedef struct mbedtls_ssl_config.conflict25 mbedtls_ssl_config.conflict25, *Pmbedtls_ssl_config.conflict25;

struct mbedtls_ssl_context.conflict21 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_ssl_config.conflict25 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct _TLSDataParams.conflict15 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict21 ssl;
    struct mbedtls_ssl_config.conflict25 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict16 _TLSDataParams.conflict16, *P_TLSDataParams.conflict16;

typedef struct mbedtls_ssl_context.conflict22 mbedtls_ssl_context.conflict22, *Pmbedtls_ssl_context.conflict22;

typedef struct mbedtls_ssl_config.conflict26 mbedtls_ssl_config.conflict26, *Pmbedtls_ssl_config.conflict26;

struct mbedtls_ssl_context.conflict22 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_ssl_config.conflict26 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct _TLSDataParams.conflict16 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict22 ssl;
    struct mbedtls_ssl_config.conflict26 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict17 _TLSDataParams.conflict17, *P_TLSDataParams.conflict17;

typedef struct mbedtls_ssl_context.conflict25 mbedtls_ssl_context.conflict25, *Pmbedtls_ssl_context.conflict25;

typedef struct mbedtls_ssl_config.conflict30 mbedtls_ssl_config.conflict30, *Pmbedtls_ssl_config.conflict30;

struct mbedtls_ssl_context.conflict25 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_ssl_config.conflict30 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct _TLSDataParams.conflict17 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict25 ssl;
    struct mbedtls_ssl_config.conflict30 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict18 _TLSDataParams.conflict18, *P_TLSDataParams.conflict18;

typedef struct mbedtls_ssl_context.conflict26 mbedtls_ssl_context.conflict26, *Pmbedtls_ssl_context.conflict26;

typedef struct mbedtls_ssl_config.conflict31 mbedtls_ssl_config.conflict31, *Pmbedtls_ssl_config.conflict31;

struct mbedtls_ssl_context.conflict26 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_ssl_config.conflict31 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct _TLSDataParams.conflict18 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict26 ssl;
    struct mbedtls_ssl_config.conflict31 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict11 _TLSDataParams.conflict11, *P_TLSDataParams.conflict11;

typedef struct mbedtls_ssl_context.conflict17 mbedtls_ssl_context.conflict17, *Pmbedtls_ssl_context.conflict17;

typedef struct mbedtls_ssl_config.conflict21 mbedtls_ssl_config.conflict21, *Pmbedtls_ssl_config.conflict21;

struct mbedtls_ssl_config.conflict21 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict17 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict11 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict17 ssl;
    struct mbedtls_ssl_config.conflict21 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict13 _TLSDataParams.conflict13, *P_TLSDataParams.conflict13;

typedef struct mbedtls_ssl_context.conflict19 mbedtls_ssl_context.conflict19, *Pmbedtls_ssl_context.conflict19;

typedef struct mbedtls_ssl_config.conflict23 mbedtls_ssl_config.conflict23, *Pmbedtls_ssl_config.conflict23;

struct mbedtls_ssl_config.conflict23 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict19 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict13 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict19 ssl;
    struct mbedtls_ssl_config.conflict23 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict14 _TLSDataParams.conflict14, *P_TLSDataParams.conflict14;

typedef struct mbedtls_ssl_context.conflict20 mbedtls_ssl_context.conflict20, *Pmbedtls_ssl_context.conflict20;

typedef struct mbedtls_ssl_config.conflict24 mbedtls_ssl_config.conflict24, *Pmbedtls_ssl_config.conflict24;

struct mbedtls_ssl_context.conflict20 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_ssl_config.conflict24 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct _TLSDataParams.conflict14 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict20 ssl;
    struct mbedtls_ssl_config.conflict24 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict1 _TLSDataParams.conflict1, *P_TLSDataParams.conflict1;

typedef struct mbedtls_ssl_context.conflict3 mbedtls_ssl_context.conflict3, *Pmbedtls_ssl_context.conflict3;

typedef struct mbedtls_ssl_config.conflict5 mbedtls_ssl_config.conflict5, *Pmbedtls_ssl_config.conflict5;

struct mbedtls_ssl_config.conflict5 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict3 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict1 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict3 ssl;
    struct mbedtls_ssl_config.conflict5 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict3 _TLSDataParams.conflict3, *P_TLSDataParams.conflict3;

typedef struct mbedtls_ssl_context.conflict5 mbedtls_ssl_context.conflict5, *Pmbedtls_ssl_context.conflict5;

typedef struct mbedtls_ssl_config.conflict7 mbedtls_ssl_config.conflict7, *Pmbedtls_ssl_config.conflict7;

struct mbedtls_ssl_config.conflict7 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict5 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict3 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict5 ssl;
    struct mbedtls_ssl_config.conflict7 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict2 _TLSDataParams.conflict2, *P_TLSDataParams.conflict2;

typedef struct mbedtls_ssl_context.conflict4 mbedtls_ssl_context.conflict4, *Pmbedtls_ssl_context.conflict4;

typedef struct mbedtls_ssl_config.conflict6 mbedtls_ssl_config.conflict6, *Pmbedtls_ssl_config.conflict6;

struct mbedtls_ssl_config.conflict6 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict4 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict2 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict4 ssl;
    struct mbedtls_ssl_config.conflict6 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict26 _TLSDataParams.conflict26, *P_TLSDataParams.conflict26;

typedef struct mbedtls_ssl_context.conflict36 mbedtls_ssl_context.conflict36, *Pmbedtls_ssl_context.conflict36;

typedef struct mbedtls_ssl_config.conflict42 mbedtls_ssl_config.conflict42, *Pmbedtls_ssl_config.conflict42;

struct mbedtls_ssl_config.conflict42 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict36 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict26 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict36 ssl;
    struct mbedtls_ssl_config.conflict42 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict27 _TLSDataParams.conflict27, *P_TLSDataParams.conflict27;

typedef struct mbedtls_ssl_context.conflict37 mbedtls_ssl_context.conflict37, *Pmbedtls_ssl_context.conflict37;

typedef struct mbedtls_ssl_config.conflict43 mbedtls_ssl_config.conflict43, *Pmbedtls_ssl_config.conflict43;

struct mbedtls_ssl_config.conflict43 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict37 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict27 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict37 ssl;
    struct mbedtls_ssl_config.conflict43 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict28 _TLSDataParams.conflict28, *P_TLSDataParams.conflict28;

typedef struct mbedtls_ssl_context.conflict38 mbedtls_ssl_context.conflict38, *Pmbedtls_ssl_context.conflict38;

typedef struct mbedtls_ssl_config.conflict44 mbedtls_ssl_config.conflict44, *Pmbedtls_ssl_config.conflict44;

struct mbedtls_ssl_config.conflict44 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict38 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict28 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict38 ssl;
    struct mbedtls_ssl_config.conflict44 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict29 _TLSDataParams.conflict29, *P_TLSDataParams.conflict29;

typedef struct mbedtls_ssl_context.conflict41 mbedtls_ssl_context.conflict41, *Pmbedtls_ssl_context.conflict41;

typedef struct mbedtls_ssl_config.conflict48 mbedtls_ssl_config.conflict48, *Pmbedtls_ssl_config.conflict48;

struct mbedtls_ssl_context.conflict41 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_ssl_config.conflict48 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct _TLSDataParams.conflict29 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict41 ssl;
    struct mbedtls_ssl_config.conflict48 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict22 _TLSDataParams.conflict22, *P_TLSDataParams.conflict22;

typedef struct mbedtls_ssl_context.conflict30 mbedtls_ssl_context.conflict30, *Pmbedtls_ssl_context.conflict30;

typedef struct mbedtls_ssl_config.conflict35 mbedtls_ssl_config.conflict35, *Pmbedtls_ssl_config.conflict35;

struct mbedtls_ssl_context.conflict30 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_ssl_config.conflict35 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct _TLSDataParams.conflict22 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict30 ssl;
    struct mbedtls_ssl_config.conflict35 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict23 _TLSDataParams.conflict23, *P_TLSDataParams.conflict23;

typedef struct mbedtls_ssl_context.conflict33 mbedtls_ssl_context.conflict33, *Pmbedtls_ssl_context.conflict33;

typedef struct mbedtls_ssl_config.conflict39 mbedtls_ssl_config.conflict39, *Pmbedtls_ssl_config.conflict39;

struct mbedtls_ssl_context.conflict33 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_ssl_config.conflict39 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct _TLSDataParams.conflict23 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict33 ssl;
    struct mbedtls_ssl_config.conflict39 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict24 _TLSDataParams.conflict24, *P_TLSDataParams.conflict24;

typedef struct mbedtls_ssl_context.conflict34 mbedtls_ssl_context.conflict34, *Pmbedtls_ssl_context.conflict34;

typedef struct mbedtls_ssl_config.conflict40 mbedtls_ssl_config.conflict40, *Pmbedtls_ssl_config.conflict40;

struct mbedtls_ssl_config.conflict40 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict34 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict24 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict34 ssl;
    struct mbedtls_ssl_config.conflict40 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict25 _TLSDataParams.conflict25, *P_TLSDataParams.conflict25;

typedef struct mbedtls_ssl_context.conflict35 mbedtls_ssl_context.conflict35, *Pmbedtls_ssl_context.conflict35;

typedef struct mbedtls_ssl_config.conflict41 mbedtls_ssl_config.conflict41, *Pmbedtls_ssl_config.conflict41;

struct mbedtls_ssl_config.conflict41 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict35 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict25 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict35 ssl;
    struct mbedtls_ssl_config.conflict41 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict20 _TLSDataParams.conflict20, *P_TLSDataParams.conflict20;

typedef struct mbedtls_ssl_context.conflict28 mbedtls_ssl_context.conflict28, *Pmbedtls_ssl_context.conflict28;

typedef struct mbedtls_ssl_config.conflict33 mbedtls_ssl_config.conflict33, *Pmbedtls_ssl_config.conflict33;

struct mbedtls_ssl_config.conflict33 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict28 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict20 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict28 ssl;
    struct mbedtls_ssl_config.conflict33 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict _TLSDataParams.conflict, *P_TLSDataParams.conflict;

typedef struct mbedtls_ssl_context.conflict2 mbedtls_ssl_context.conflict2, *Pmbedtls_ssl_context.conflict2;

typedef struct mbedtls_ssl_config.conflict4 mbedtls_ssl_config.conflict4, *Pmbedtls_ssl_config.conflict4;

struct mbedtls_ssl_config.conflict4 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict2 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict2 ssl;
    struct mbedtls_ssl_config.conflict4 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict21 _TLSDataParams.conflict21, *P_TLSDataParams.conflict21;

typedef struct mbedtls_ssl_context.conflict29 mbedtls_ssl_context.conflict29, *Pmbedtls_ssl_context.conflict29;

typedef struct mbedtls_ssl_config.conflict34 mbedtls_ssl_config.conflict34, *Pmbedtls_ssl_config.conflict34;

struct mbedtls_ssl_config.conflict34 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict29 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict21 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict29 ssl;
    struct mbedtls_ssl_config.conflict34 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict5 _TLSDataParams.conflict5, *P_TLSDataParams.conflict5;

typedef struct mbedtls_ssl_context.conflict9 mbedtls_ssl_context.conflict9, *Pmbedtls_ssl_context.conflict9;

typedef struct mbedtls_ssl_config.conflict12 mbedtls_ssl_config.conflict12, *Pmbedtls_ssl_config.conflict12;

struct mbedtls_ssl_context.conflict9 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_ssl_config.conflict12 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct _TLSDataParams.conflict5 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict9 ssl;
    struct mbedtls_ssl_config.conflict12 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict37 _TLSDataParams.conflict37, *P_TLSDataParams.conflict37;

typedef struct mbedtls_ssl_context.conflict51 mbedtls_ssl_context.conflict51, *Pmbedtls_ssl_context.conflict51;

typedef struct mbedtls_ssl_config.conflict59 mbedtls_ssl_config.conflict59, *Pmbedtls_ssl_config.conflict59;

struct mbedtls_ssl_config.conflict59 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict51 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict37 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict51 ssl;
    struct mbedtls_ssl_config.conflict59 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict4 _TLSDataParams.conflict4, *P_TLSDataParams.conflict4;

typedef struct mbedtls_ssl_context.conflict6 mbedtls_ssl_context.conflict6, *Pmbedtls_ssl_context.conflict6;

typedef struct mbedtls_ssl_config.conflict8 mbedtls_ssl_config.conflict8, *Pmbedtls_ssl_config.conflict8;

struct mbedtls_ssl_config.conflict8 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict6 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict4 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict6 ssl;
    struct mbedtls_ssl_config.conflict8 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict38 _TLSDataParams.conflict38, *P_TLSDataParams.conflict38;

typedef struct mbedtls_ssl_context.conflict52 mbedtls_ssl_context.conflict52, *Pmbedtls_ssl_context.conflict52;

typedef struct mbedtls_ssl_config.conflict60 mbedtls_ssl_config.conflict60, *Pmbedtls_ssl_config.conflict60;

struct mbedtls_ssl_config.conflict60 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict52 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict38 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict52 ssl;
    struct mbedtls_ssl_config.conflict60 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict39 _TLSDataParams.conflict39, *P_TLSDataParams.conflict39;

typedef struct mbedtls_ssl_context.conflict53 mbedtls_ssl_context.conflict53, *Pmbedtls_ssl_context.conflict53;

typedef struct mbedtls_ssl_config.conflict61 mbedtls_ssl_config.conflict61, *Pmbedtls_ssl_config.conflict61;

struct mbedtls_ssl_config.conflict61 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict53 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict39 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict53 ssl;
    struct mbedtls_ssl_config.conflict61 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict6 _TLSDataParams.conflict6, *P_TLSDataParams.conflict6;

typedef struct mbedtls_ssl_context.conflict10 mbedtls_ssl_context.conflict10, *Pmbedtls_ssl_context.conflict10;

typedef struct mbedtls_ssl_config.conflict13 mbedtls_ssl_config.conflict13, *Pmbedtls_ssl_config.conflict13;

struct mbedtls_ssl_config.conflict13 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict10 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict6 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict10 ssl;
    struct mbedtls_ssl_config.conflict13 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict33 _TLSDataParams.conflict33, *P_TLSDataParams.conflict33;

typedef struct mbedtls_ssl_context.conflict45 mbedtls_ssl_context.conflict45, *Pmbedtls_ssl_context.conflict45;

typedef struct mbedtls_ssl_config.conflict52 mbedtls_ssl_config.conflict52, *Pmbedtls_ssl_config.conflict52;

struct mbedtls_ssl_context.conflict45 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_ssl_config.conflict52 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct _TLSDataParams.conflict33 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict45 ssl;
    struct mbedtls_ssl_config.conflict52 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict34 _TLSDataParams.conflict34, *P_TLSDataParams.conflict34;

typedef struct mbedtls_ssl_context.conflict46 mbedtls_ssl_context.conflict46, *Pmbedtls_ssl_context.conflict46;

typedef struct mbedtls_ssl_config.conflict53 mbedtls_ssl_config.conflict53, *Pmbedtls_ssl_config.conflict53;

struct mbedtls_ssl_context.conflict46 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_ssl_config.conflict53 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct _TLSDataParams.conflict34 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict46 ssl;
    struct mbedtls_ssl_config.conflict53 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict35 _TLSDataParams.conflict35, *P_TLSDataParams.conflict35;

typedef struct mbedtls_ssl_context.conflict49 mbedtls_ssl_context.conflict49, *Pmbedtls_ssl_context.conflict49;

typedef struct mbedtls_ssl_config.conflict57 mbedtls_ssl_config.conflict57, *Pmbedtls_ssl_config.conflict57;

struct mbedtls_ssl_context.conflict49 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_ssl_config.conflict57 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct _TLSDataParams.conflict35 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict49 ssl;
    struct mbedtls_ssl_config.conflict57 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict36 _TLSDataParams.conflict36, *P_TLSDataParams.conflict36;

typedef struct mbedtls_ssl_context.conflict50 mbedtls_ssl_context.conflict50, *Pmbedtls_ssl_context.conflict50;

typedef struct mbedtls_ssl_config.conflict58 mbedtls_ssl_config.conflict58, *Pmbedtls_ssl_config.conflict58;

struct mbedtls_ssl_config.conflict58 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict50 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict36 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict50 ssl;
    struct mbedtls_ssl_config.conflict58 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict30 _TLSDataParams.conflict30, *P_TLSDataParams.conflict30;

typedef struct mbedtls_ssl_context.conflict42 mbedtls_ssl_context.conflict42, *Pmbedtls_ssl_context.conflict42;

typedef struct mbedtls_ssl_config.conflict49 mbedtls_ssl_config.conflict49, *Pmbedtls_ssl_config.conflict49;

struct mbedtls_ssl_context.conflict42 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_ssl_config.conflict49 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct _TLSDataParams.conflict30 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict42 ssl;
    struct mbedtls_ssl_config.conflict49 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict31 _TLSDataParams.conflict31, *P_TLSDataParams.conflict31;

typedef struct mbedtls_ssl_context.conflict43 mbedtls_ssl_context.conflict43, *Pmbedtls_ssl_context.conflict43;

typedef struct mbedtls_ssl_config.conflict50 mbedtls_ssl_config.conflict50, *Pmbedtls_ssl_config.conflict50;

struct mbedtls_ssl_context.conflict43 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_ssl_config.conflict50 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct _TLSDataParams.conflict31 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict43 ssl;
    struct mbedtls_ssl_config.conflict50 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict TLSDataParams;

typedef struct _TLSDataParams.conflict32 _TLSDataParams.conflict32, *P_TLSDataParams.conflict32;

typedef struct mbedtls_ssl_context.conflict44 mbedtls_ssl_context.conflict44, *Pmbedtls_ssl_context.conflict44;

typedef struct mbedtls_ssl_config.conflict51 mbedtls_ssl_config.conflict51, *Pmbedtls_ssl_config.conflict51;

struct mbedtls_ssl_context.conflict44 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct mbedtls_ssl_config.conflict51 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct _TLSDataParams.conflict32 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict44 ssl;
    struct mbedtls_ssl_config.conflict51 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict40 _TLSDataParams.conflict40, *P_TLSDataParams.conflict40;

typedef struct mbedtls_ssl_context.conflict54 mbedtls_ssl_context.conflict54, *Pmbedtls_ssl_context.conflict54;

typedef struct mbedtls_ssl_config.conflict62 mbedtls_ssl_config.conflict62, *Pmbedtls_ssl_config.conflict62;

struct mbedtls_ssl_config.conflict62 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict54 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams.conflict40 {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict54 ssl;
    struct mbedtls_ssl_config.conflict62 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef struct _TLSDataParams.conflict13 TLSDataParams.conflict10;

typedef struct _TLSDataParams.conflict14 TLSDataParams.conflict11;

typedef struct _TLSDataParams.conflict15 TLSDataParams.conflict12;

typedef struct _TLSDataParams.conflict16 TLSDataParams.conflict13;

typedef struct _TLSDataParams.conflict18 TLSDataParams.conflict14;

typedef struct _TLSDataParams.conflict19 TLSDataParams.conflict15;

typedef struct _TLSDataParams.conflict20 TLSDataParams.conflict16;

typedef struct _TLSDataParams.conflict21 TLSDataParams.conflict17;

typedef struct _TLSDataParams.conflict22 TLSDataParams.conflict18;

typedef struct _TLSDataParams.conflict24 TLSDataParams.conflict19;

typedef struct _TLSDataParams.conflict1 TLSDataParams.conflict;

typedef struct _TLSDataParams.conflict37 TLSDataParams.conflict30;

typedef struct _TLSDataParams.conflict38 TLSDataParams.conflict31;

typedef struct _TLSDataParams.conflict39 TLSDataParams.conflict32;

typedef struct _TLSDataParams.conflict40 TLSDataParams.conflict33;

typedef struct _TLSDataParams.conflict25 TLSDataParams.conflict20;

typedef struct _TLSDataParams.conflict26 TLSDataParams.conflict21;

typedef struct _TLSDataParams.conflict27 TLSDataParams.conflict22;

typedef struct _TLSDataParams.conflict28 TLSDataParams.conflict23;

typedef struct _TLSDataParams.conflict30 TLSDataParams.conflict24;

typedef struct _TLSDataParams.conflict31 TLSDataParams.conflict25;

typedef struct _TLSDataParams.conflict32 TLSDataParams.conflict26;

typedef struct _TLSDataParams.conflict33 TLSDataParams.conflict27;

typedef struct _TLSDataParams.conflict34 TLSDataParams.conflict28;

typedef struct _TLSDataParams.conflict3 TLSDataParams.conflict2;

typedef struct _TLSDataParams.conflict36 TLSDataParams.conflict29;

typedef struct _TLSDataParams.conflict2 TLSDataParams.conflict1;

typedef struct _TLSDataParams.conflict6 TLSDataParams.conflict4;

typedef struct _TLSDataParams.conflict4 TLSDataParams.conflict3;

typedef struct _TLSDataParams _TLSDataParams, *P_TLSDataParams;

typedef struct mbedtls_ssl_context.conflict1 mbedtls_ssl_context.conflict1, *Pmbedtls_ssl_context.conflict1;

typedef struct mbedtls_ssl_config.conflict3 mbedtls_ssl_config.conflict3, *Pmbedtls_ssl_config.conflict3;

struct mbedtls_ssl_config.conflict3 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

struct mbedtls_ssl_context.conflict1 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

struct _TLSDataParams {
    struct mbedtls_entropy_context entropy;
    struct mbedtls_ctr_drbg_context ctr_drbg;
    struct mbedtls_ssl_context.conflict1 ssl;
    struct mbedtls_ssl_config.conflict3 conf;
    uint32_t flags;
    struct mbedtls_x509_crt cacert;
    struct mbedtls_x509_crt clicert;
    struct mbedtls_pk_context pkey;
    struct mbedtls_net_context server_fd;
};

typedef enum anon_enum_16 {
    HAL_AC0_TIMER_BIT=1,
    HAL_AC1_TIMER_BIT=2,
    HAL_AC2_TIMER_BIT=4,
    HAL_AC3_TIMER_BIT=8,
    HAL_BCN_TIMER_BIT=16,
    HAL_IDLE_TIMER_BIT=32,
    HAL_KE_TIMER_BIT=256,
    HAL_MM_TIMER_BIT=-128,
    HAL_RX_TIMER_BIT=64,
    ME_CHAN_CONFIG_CFM=5123,
    ME_CHAN_CONFIG_REQ=5122,
    ME_CONFIG_CFM=5121,
    ME_CONFIG_REQ=5120,
    ME_MAX=5137,
    ME_RC_SET_RATE_REQ=5136,
    ME_RC_STATS_CFM=5135,
    ME_RC_STATS_REQ=5134,
    ME_SET_ACTIVE_CFM=5138,
    ME_SET_ACTIVE_REQ=5137,
    ME_SET_CONTROL_PORT_CFM=5125,
    ME_SET_CONTROL_PORT_REQ=5124,
    ME_SET_PS_DISABLE_CFM=5140,
    ME_SET_PS_DISABLE_REQ=5139,
    ME_STA_ADD_CFM=5128,
    ME_STA_ADD_REQ=5127,
    ME_STA_DEL_CFM=5130,
    ME_STA_DEL_REQ=5129,
    ME_TKIP_MIC_FAILURE_IND=5126,
    ME_TRAFFIC_IND_CFM=5133,
    ME_TRAFFIC_IND_REQ=5132,
    ME_TX_CREDITS_UPDATE_IND=5131,
    PBUF_POOL=386,
    PBUF_RAM=640,
    PBUF_REF=65,
    PBUF_ROM=1,
    ROM_API_INDEX_AON_Get_Xtal_CapCode=8,
    ROM_API_INDEX_AON_LowPower_Enter_PDS0=18,
    ROM_API_INDEX_AON_LowPower_Exit_PDS0=19,
    ROM_API_INDEX_AON_Power_Off_BG=11,
    ROM_API_INDEX_AON_Power_Off_LDO11_SOC=13,
    ROM_API_INDEX_AON_Power_Off_LDO15_RF=15,
    ROM_API_INDEX_AON_Power_Off_MBG=5,
    ROM_API_INDEX_AON_Power_Off_SFReg=17,
    ROM_API_INDEX_AON_Power_Off_XTAL=9,
    ROM_API_INDEX_AON_Power_On_BG=10,
    ROM_API_INDEX_AON_Power_On_LDO11_SOC=12,
    ROM_API_INDEX_AON_Power_On_LDO15_RF=14,
    ROM_API_INDEX_AON_Power_On_MBG=4,
    ROM_API_INDEX_AON_Power_On_SFReg=16,
    ROM_API_INDEX_AON_Power_On_XTAL=6,
    ROM_API_INDEX_AON_Set_Xtal_CapCode=7,
    ROM_API_INDEX_ASM_Delay_Us=20,
    ROM_API_INDEX_BFLB_Soft_CRC32=-81,
    ROM_API_INDEX_BL602_Delay_MS=22,
    ROM_API_INDEX_BL602_Delay_US=21,
    ROM_API_INDEX_BL602_MemCmp=28,
    ROM_API_INDEX_BL602_MemCpy=23,
    ROM_API_INDEX_BL602_MemCpy4=24,
    ROM_API_INDEX_BL602_MemCpy_Fast=25,
    ROM_API_INDEX_BL602_MemSet=26,
    ROM_API_INDEX_BL602_MemSet4=27,
    ROM_API_INDEX_EF_Ctrl_AutoLoad_Done=33,
    ROM_API_INDEX_EF_Ctrl_Busy=32,
    ROM_API_INDEX_EF_Ctrl_Clear=37,
    ROM_API_INDEX_EF_Ctrl_Get_Trim_Parity=34,
    ROM_API_INDEX_EF_Ctrl_Load_Efuse_R0=31,
    ROM_API_INDEX_EF_Ctrl_Program_Efuse_0=30,
    ROM_API_INDEX_EF_Ctrl_Read_RC32K_Trim=36,
    ROM_API_INDEX_EF_Ctrl_Read_RC32M_Trim=35,
    ROM_API_INDEX_EF_Ctrl_Sw_AHB_Clk_0=29,
    ROM_API_INDEX_FUNC_EMPTY_END=511,
    ROM_API_INDEX_FUNC_EMPTY_START=-80,
    ROM_API_INDEX_GLB_Deswap_Flash_Pin=52,
    ROM_API_INDEX_GLB_GPIO_Get_Fun=58,
    ROM_API_INDEX_GLB_GPIO_Init=54,
    ROM_API_INDEX_GLB_GPIO_OUTPUT_Disable=56,
    ROM_API_INDEX_GLB_GPIO_OUTPUT_Enable=55,
    ROM_API_INDEX_GLB_GPIO_Set_HZ=57,
    ROM_API_INDEX_GLB_Get_BCLK_Div=40,
    ROM_API_INDEX_GLB_Get_HCLK_Div=41,
    ROM_API_INDEX_GLB_Get_Root_CLK_Sel=38,
    ROM_API_INDEX_GLB_SW_CPU_Reset=48,
    ROM_API_INDEX_GLB_SW_POR_Reset=49,
    ROM_API_INDEX_GLB_SW_System_Reset=47,
    ROM_API_INDEX_GLB_Select_External_Flash=51,
    ROM_API_INDEX_GLB_Select_Internal_Flash=50,
    ROM_API_INDEX_GLB_Set_PKA_CLK_Sel=46,
    ROM_API_INDEX_GLB_Set_SF_CLK=45,
    ROM_API_INDEX_GLB_Set_System_CLK=43,
    ROM_API_INDEX_GLB_Set_System_CLK_Div=39,
    ROM_API_INDEX_GLB_Swap_Flash_Pin=53,
    ROM_API_INDEX_HBN_32K_Sel=66,
    ROM_API_INDEX_HBN_Enable=61,
    ROM_API_INDEX_HBN_GPIO7_Dbg_Pull_Cfg=75,
    ROM_API_INDEX_HBN_Hw_Pu_Pd_Cfg=73,
    ROM_API_INDEX_HBN_Mode_Enter=59,
    ROM_API_INDEX_HBN_Pin_WakeUp_Mask=74,
    ROM_API_INDEX_HBN_Power_Down_Flash=60,
    ROM_API_INDEX_HBN_Power_Off_RC32K=71,
    ROM_API_INDEX_HBN_Power_Off_Xtal_32K=69,
    ROM_API_INDEX_HBN_Power_On_RC32K=70,
    ROM_API_INDEX_HBN_Power_On_Xtal_32K=68,
    ROM_API_INDEX_HBN_Reset=62,
    ROM_API_INDEX_HBN_Set_Embedded_Flash_Pullup=76,
    ROM_API_INDEX_HBN_Set_Ldo11_Aon_Vout=63,
    ROM_API_INDEX_HBN_Set_Ldo11_Rt_Vout=64,
    ROM_API_INDEX_HBN_Set_Ldo11_Soc_Vout=65,
    ROM_API_INDEX_HBN_Set_ROOT_CLK_Sel=67,
    ROM_API_INDEX_HBN_Trim_RC32K=72,
    ROM_API_INDEX_L1C_IROM_2T_Access_Set=79,
    ROM_API_INDEX_L1C_Set_Way_Disable=78,
    ROM_API_INDEX_L1C_Set_Wrap=77,
    ROM_API_INDEX_PDS_Default_Level_Config=84,
    ROM_API_INDEX_PDS_Disable_PLL_All_Clks=90,
    ROM_API_INDEX_PDS_Disable_PLL_Clk=92,
    ROM_API_INDEX_PDS_Enable=81,
    ROM_API_INDEX_PDS_Enable_PLL_All_Clks=89,
    ROM_API_INDEX_PDS_Enable_PLL_Clk=91,
    ROM_API_INDEX_PDS_Force_Config=82,
    ROM_API_INDEX_PDS_Power_Off_PLL=93,
    ROM_API_INDEX_PDS_Power_On_PLL=88,
    ROM_API_INDEX_PDS_RAM_Config=83,
    ROM_API_INDEX_PDS_Reset=80,
    ROM_API_INDEX_PDS_Select_RC32M_As_PLL_Ref=86,
    ROM_API_INDEX_PDS_Select_XTAL_As_PLL_Ref=87,
    ROM_API_INDEX_PDS_Trim_RC32M=85,
    ROM_API_INDEX_RSVD_0=1,
    ROM_API_INDEX_RSVD_1=2,
    ROM_API_INDEX_RSVD_LAST=3,
    ROM_API_INDEX_SEC_Eng_Turn_Off_Sec_Ring=95,
    ROM_API_INDEX_SEC_Eng_Turn_On_Sec_Ring=94,
    ROM_API_INDEX_SF_Cfg_Deinit_Ext_Flash_Gpio=-123,
    ROM_API_INDEX_SF_Cfg_Flash_Identify=-119,
    ROM_API_INDEX_SF_Cfg_Get_Flash_Cfg_Need_Lock=-121,
    ROM_API_INDEX_SF_Cfg_Init_Ext_Flash_Gpio=-125,
    ROM_API_INDEX_SF_Cfg_Init_Flash_Gpio=-120,
    ROM_API_INDEX_SF_Cfg_Init_Internal_Flash_Gpio=-124,
    ROM_API_INDEX_SF_Cfg_Restore_GPIO17_Fun=-122,
    ROM_API_INDEX_SF_Ctrl_AES_Disable=-106,
    ROM_API_INDEX_SF_Ctrl_AES_Enable=-107,
    ROM_API_INDEX_SF_Ctrl_AES_Enable_BE=-114,
    ROM_API_INDEX_SF_Ctrl_AES_Enable_LE=-113,
    ROM_API_INDEX_SF_Ctrl_AES_Set_IV=-109,
    ROM_API_INDEX_SF_Ctrl_AES_Set_IV_BE=-108,
    ROM_API_INDEX_SF_Ctrl_AES_Set_Key=-111,
    ROM_API_INDEX_SF_Ctrl_AES_Set_Key_BE=-110,
    ROM_API_INDEX_SF_Ctrl_AES_Set_Region=-112,
    ROM_API_INDEX_SF_Ctrl_Disable=-115,
    ROM_API_INDEX_SF_Ctrl_Enable=-118,
    ROM_API_INDEX_SF_Ctrl_GetBusyState=-99,
    ROM_API_INDEX_SF_Ctrl_Get_Clock_Delay=-97,
    ROM_API_INDEX_SF_Ctrl_Get_Flash_Image_Offset=-104,
    ROM_API_INDEX_SF_Ctrl_Icache2_Set=-100,
    ROM_API_INDEX_SF_Ctrl_Icache_Set=-101,
    ROM_API_INDEX_SF_Ctrl_Is_AES_Enable=-98,
    ROM_API_INDEX_SF_Ctrl_Select_Clock=-103,
    ROM_API_INDEX_SF_Ctrl_Select_Pad=-117,
    ROM_API_INDEX_SF_Ctrl_SendCmd=-102,
    ROM_API_INDEX_SF_Ctrl_Set_Clock_Delay=-96,
    ROM_API_INDEX_SF_Ctrl_Set_Flash_Image_Offset=-105,
    ROM_API_INDEX_SF_Ctrl_Set_Owner=-116,
    ROM_API_INDEX_SFlash_Blk32_Erase=106,
    ROM_API_INDEX_SFlash_Blk64_Erase=107,
    ROM_API_INDEX_SFlash_Busy=100,
    ROM_API_INDEX_SFlash_Cache_Enable_Set=121,
    ROM_API_INDEX_SFlash_Cache_Flush=122,
    ROM_API_INDEX_SFlash_Cache_Hit_Count_Get=124,
    ROM_API_INDEX_SFlash_Cache_Miss_Count_Get=125,
    ROM_API_INDEX_SFlash_Cache_Read_Disable=126,
    ROM_API_INDEX_SFlash_Cache_Read_Enable=123,
    ROM_API_INDEX_SFlash_Chip_Erase=104,
    ROM_API_INDEX_SFlash_DisableBurstWrap=116,
    ROM_API_INDEX_SFlash_Erase=108,
    ROM_API_INDEX_SFlash_GetDeviceId=112,
    ROM_API_INDEX_SFlash_GetJedecId=111,
    ROM_API_INDEX_SFlash_GetUniqueId=110,
    ROM_API_INDEX_SFlash_IDbus_Read_Enable=120,
    ROM_API_INDEX_SFlash_Init=96,
    ROM_API_INDEX_SFlash_Powerdown=113,
    ROM_API_INDEX_SFlash_Program=109,
    ROM_API_INDEX_SFlash_Qspi_Enable=102,
    ROM_API_INDEX_SFlash_Read=127,
    ROM_API_INDEX_SFlash_Read_Reg=98,
    ROM_API_INDEX_SFlash_Read_Reg_With_Cmd=-128,
    ROM_API_INDEX_SFlash_Releae_Powerdown=114,
    ROM_API_INDEX_SFlash_Reset_Continue_Read=118,
    ROM_API_INDEX_SFlash_Restore_From_Powerdown=-126,
    ROM_API_INDEX_SFlash_Sector_Erase=105,
    ROM_API_INDEX_SFlash_SetBurstWrap=115,
    ROM_API_INDEX_SFlash_SetSPIMode=97,
    ROM_API_INDEX_SFlash_Set_IDbus_Cfg=119,
    ROM_API_INDEX_SFlash_Software_Reset=117,
    ROM_API_INDEX_SFlash_Volatile_Reg_Write_Enable=103,
    ROM_API_INDEX_SFlash_Write_Enable=101,
    ROM_API_INDEX_SFlash_Write_Reg=99,
    ROM_API_INDEX_SFlash_Write_Reg_With_Cmd=-127,
    ROM_API_INDEX_System_Core_Clock_Update_From_RC32M=44,
    ROM_API_INDEX_Update_SystemCoreClockWith_XTAL=42,
    ROM_API_INDEX_VERSION=0,
    ROM_API_INDEX_XIP_SFlash_Erase_Need_Lock=-93,
    ROM_API_INDEX_XIP_SFlash_Erase_With_Lock=-84,
    ROM_API_INDEX_XIP_SFlash_GetDeviceId_Need_Lock=-89,
    ROM_API_INDEX_XIP_SFlash_GetJedecId_Need_Lock=-90,
    ROM_API_INDEX_XIP_SFlash_GetUniqueId_Need_Lock=-88,
    ROM_API_INDEX_XIP_SFlash_Opt_Enter=-83,
    ROM_API_INDEX_XIP_SFlash_Opt_Exit=-82,
    ROM_API_INDEX_XIP_SFlash_Read_Need_Lock=-91,
    ROM_API_INDEX_XIP_SFlash_Read_Via_Cache_Need_Lock=-87,
    ROM_API_INDEX_XIP_SFlash_Read_With_Lock=-86,
    ROM_API_INDEX_XIP_SFlash_State_Restore=-94,
    ROM_API_INDEX_XIP_SFlash_State_Save=-95,
    ROM_API_INDEX_XIP_SFlash_Write_Need_Lock=-92,
    ROM_API_INDEX_XIP_SFlash_Write_With_Lock=-85,
    SCANU_JOIN_CFM=4099,
    SCANU_JOIN_REQ=4098,
    SCANU_MAX=4103,
    SCANU_RAW_SEND_CFM=4102,
    SCANU_RAW_SEND_REQ=4101,
    SCANU_RESULT_IND=4100,
    SCANU_START_CFM=4097,
    SCANU_START_REQ=4096
} anon_enum_16;

typedef struct stats_mem stats_mem, *Pstats_mem;

typedef uint16_t u16_t;

typedef u16_t mem_size_t;

struct stats_mem {
    u16_t err;
    mem_size_t avail;
    mem_size_t used;
    mem_size_t max;
    u16_t illegal;
};

typedef struct stats_proto stats_proto, *Pstats_proto;

struct stats_proto {
    u16_t xmit;
    u16_t recv;
    u16_t fw;
    u16_t drop;
    u16_t chkerr;
    u16_t lenerr;
    u16_t memerr;
    u16_t rterr;
    u16_t proterr;
    u16_t opterr;
    u16_t err;
    u16_t cachehit;
};

typedef struct stats_ stats_, *Pstats_;

typedef struct stats_igmp stats_igmp, *Pstats_igmp;

typedef struct stats_sys stats_sys, *Pstats_sys;

typedef struct stats_syselem stats_syselem, *Pstats_syselem;

struct stats_syselem {
    u16_t used;
    u16_t max;
    u16_t err;
};

struct stats_sys {
    struct stats_syselem sem;
    struct stats_syselem mutex;
    struct stats_syselem mbox;
};

struct stats_igmp {
    u16_t xmit;
    u16_t recv;
    u16_t drop;
    u16_t chkerr;
    u16_t lenerr;
    u16_t memerr;
    u16_t proterr;
    u16_t rx_v1;
    u16_t rx_group;
    u16_t rx_general;
    u16_t rx_report;
    u16_t tx_join;
    u16_t tx_leave;
    u16_t tx_report;
};

struct stats_ {
    struct stats_proto link;
    struct stats_proto etharp;
    struct stats_proto ip;
    struct stats_proto icmp;
    struct stats_igmp igmp;
    struct stats_proto udp;
    struct stats_proto tcp;
    struct stats_mem mem;
    undefined field_0xb6;
    undefined field_0xb7;
    struct stats_mem * memp[15];
    struct stats_sys sys;
    undefined field_0x106;
    undefined field_0x107;
};

typedef uchar uint8;

typedef short SINT16;

typedef enum Status_e {
    FAIL=1,
    FW_SUCCESS=0
} Status_e;

typedef long SINT32;

typedef enum wlan_security_type {
    WLAN_SECURITY_EAP_TLS=6,
    WLAN_SECURITY_NONE=0,
    WLAN_SECURITY_WEP_OPEN=1,
    WLAN_SECURITY_WEP_SHARED=2,
    WLAN_SECURITY_WILDCARD=7,
    WLAN_SECURITY_WPA=3,
    WLAN_SECURITY_WPA2=4,
    WLAN_SECURITY_WPA_WPA2_MIXED=5
} wlan_security_type;

typedef char CHAR;

typedef ushort uint16;

typedef char SINT8;

typedef void mdev_t;

typedef ulong uint32;

typedef ulonglong UINT64;

typedef int BOOLEAN;

typedef struct hw_vect.conflict1 hw_vect.conflict1, *Phw_vect.conflict1;

typedef uint32_t u32.conflict197;

typedef uint32_t u32.conflict198;

typedef uint32_t u32.conflict199;

typedef uint32_t u32.conflict200;

typedef uint32_t u32.conflict201;

typedef uint32_t u32.conflict202;

typedef uint32_t u32.conflict203;

typedef uint32_t u32.conflict204;

typedef uint32_t u32.conflict205;

typedef uint32_t u32.conflict206;

typedef uint32_t u32.conflict207;

typedef uint32_t u32.conflict208;

typedef uint32_t u32.conflict209;

typedef uint32_t u32.conflict210;

typedef uint32_t u32.conflict211;

typedef uint32_t u32.conflict212;

typedef uint32_t u32.conflict213;

typedef uint32_t u32.conflict214;

typedef uint32_t u32.conflict215;

typedef uint32_t u32.conflict216;

typedef uint32_t u32.conflict217;

typedef uint32_t u32.conflict218;

typedef uint32_t u32.conflict219;

typedef uint32_t u32.conflict220;

typedef uint32_t u32.conflict221;

typedef uint32_t u32.conflict222;

typedef uint32_t u32.conflict223;

typedef long int32_t;

typedef int32_t s32;

typedef uint32_t u32.conflict224;

typedef uint32_t u32.conflict225;

typedef uint32_t u32.conflict226;

typedef uint32_t u32.conflict227;

typedef uint32_t u32.conflict228;

typedef uint32_t u32.conflict229;

typedef uint32_t u32.conflict230;

typedef uint32_t u32.conflict231;

typedef uint32_t u32.conflict232;

typedef uint32_t u32.conflict233;

typedef uint32_t u32.conflict234;

typedef uint32_t u32.conflict235;

typedef uint32_t u32.conflict236;

typedef uint32_t u32.conflict237;

typedef uint32_t u32.conflict238;

typedef uint32_t u32.conflict239;

typedef uint32_t u32.conflict240;

typedef uint32_t u32.conflict241;

typedef uint32_t u32.conflict242;

typedef uint32_t u32.conflict243;

typedef uint32_t u32.conflict244;

typedef uint32_t u32.conflict245;

typedef uint32_t u32.conflict246;

typedef uint32_t u32.conflict247;

typedef uint32_t u32.conflict248;

struct hw_vect.conflict1 {
    u32.conflict197 len:16;
    u32.conflict198 reserved:8;
    u32.conflict199 mpdu_cnt:6;
    u32.conflict200 ampdu_cnt:2;
    __le32 tsf_lo;
    __le32 tsf_hi;
    u32.conflict201 leg_length:12;
    u32.conflict202 leg_rate:4;
    u32.conflict203 ht_length:16;
    u32.conflict204 _ht_length:4;
    u32.conflict205 short_gi:1;
    u32.conflict206 stbc:2;
    u32.conflict207 smoothing:1;
    u32.conflict208 mcs:7;
    u32.conflict209 pre_type:1;
    u32.conflict210 format_mod:3;
    u32.conflict211 ch_bw:2;
    u32.conflict212 n_sts:3;
    u32.conflict213 lsig_valid:1;
    u32.conflict214 sounding:1;
    u32.conflict215 num_extn_ss:2;
    u32.conflict216 aggregation:1;
    u32.conflict217 fec_coding:1;
    u32.conflict218 dyn_bw:1;
    u32.conflict219 doze_not_allowed:1;
    u32.conflict220 antenna_set:8;
    u32.conflict221 partial_aid:9;
    u32.conflict222 group_id:6;
    u32.conflict223 reserved_1c:1;
    s32 rssi1:8;
    s32 rssi2:8;
    s32 rssi3:8;
    s32 rssi4:8;
    u32.conflict224 reserved_1d:8;
    u32.conflict225 rcpi:8;
    u32.conflict226 evm1:8;
    u32.conflict227 evm2:8;
    u32.conflict228 evm3:8;
    u32.conflict229 evm4:8;
    u32.conflict230 reserved2b_1:8;
    u32.conflict231 reserved2b_2:8;
    u32.conflict232 reserved2b_3:8;
    u32.conflict233 rx_vect2_valid:1;
    u32.conflict234 resp_frame:1;
    u32.conflict235 decr_status:3;
    u32.conflict236 rx_fifo_oflow:1;
    u32.conflict237 undef_err:1;
    u32.conflict238 phy_err:1;
    u32.conflict239 fcs_err:1;
    u32.conflict240 addr_mismatch:1;
    u32.conflict241 ga_frame:1;
    u32.conflict242 current_ac:2;
    u32.conflict243 frm_successful_rx:1;
    u32.conflict244 desc_done_rx:1;
    u32.conflict245 key_sram_index:10;
    u32.conflict246 key_sram_v:1;
    u32.conflict247 type:2;
    u32.conflict248 subtype:4;
};

typedef struct hw_rxhdr.conflict hw_rxhdr.conflict, *Phw_rxhdr.conflict;

typedef uint32_t u32.conflict249;

typedef uint32_t u32.conflict250;

typedef uint32_t u32.conflict251;

typedef uint32_t u32.conflict252;

typedef uint32_t u32.conflict253;

typedef uint32_t u32.conflict254;

typedef uint32_t u32.conflict255;

typedef uint32_t u32.conflict256;

typedef uint32_t u32.conflict257;

typedef uint32_t u32.conflict258;

typedef uint32_t u32.conflict259;

typedef uint32_t u32.conflict260;

typedef uint32_t u32.conflict261;

typedef uint32_t u32.conflict262;

typedef uint32_t u32.conflict263;

typedef uint32_t u32.conflict264;

typedef uint32_t u32.conflict265;

typedef uint32_t u32.conflict266;

struct hw_rxhdr.conflict {
    struct hw_vect.conflict1 hwvect;
    u32.conflict249 phy_band:8;
    u32.conflict250 phy_channel_type:8;
    u32.conflict251 phy_prim20_freq:16;
    u32.conflict252 phy_center1_freq:16;
    u32.conflict253 phy_center2_freq:16;
    u32.conflict254 flags_is_amsdu:1;
    u32.conflict255 flags_is_80211_mpdu:1;
    u32.conflict256 flags_is_4addr:1;
    u32.conflict257 flags_new_peer:1;
    u32.conflict258 flags_user_prio:3;
    u32.conflict259 flags_rsvd0:1;
    u32.conflict260 flags_vif_idx:8;
    u32.conflict261 flags_sta_idx:8;
    u32.conflict262 flags_dst_idx:8;
    u32.conflict263 pattern;
    u32.conflict264 payl_offset;
    u32.conflict265 reserved_pad[2];
    u32.conflict266 wild[8];
};

typedef struct sm_reason_code sm_reason_code, *Psm_reason_code;

struct sm_reason_code {
    uint16_t reason_code;
    undefined field_0x2;
    undefined field_0x3;
    char * action;
};

typedef struct hw_vect.conflict hw_vect.conflict, *Phw_vect.conflict;

typedef uint32_t u32.conflict107;

typedef uint32_t u32.conflict108;

typedef uint32_t u32.conflict109;

typedef uint32_t u32.conflict110;

typedef uint32_t u32.conflict111;

typedef uint32_t u32.conflict112;

typedef uint32_t u32.conflict113;

typedef uint32_t u32.conflict114;

typedef uint32_t u32.conflict115;

typedef uint32_t u32.conflict116;

typedef uint32_t u32.conflict117;

typedef uint32_t u32.conflict118;

typedef uint32_t u32.conflict119;

typedef uint32_t u32.conflict120;

typedef uint32_t u32.conflict121;

typedef uint32_t u32.conflict122;

typedef uint32_t u32.conflict123;

typedef uint32_t u32.conflict124;

typedef uint32_t u32.conflict125;

typedef uint32_t u32.conflict126;

typedef uint32_t u32.conflict127;

typedef uint32_t u32.conflict128;

typedef uint32_t u32.conflict129;

typedef uint32_t u32.conflict130;

typedef uint32_t u32.conflict131;

typedef uint32_t u32.conflict132;

typedef uint32_t u32.conflict133;

typedef uint32_t u32.conflict134;

typedef uint32_t u32.conflict135;

typedef uint32_t u32.conflict136;

typedef uint32_t u32.conflict137;

typedef uint32_t u32.conflict138;

typedef uint32_t u32.conflict139;

typedef uint32_t u32.conflict140;

typedef uint32_t u32.conflict141;

typedef uint32_t u32.conflict142;

typedef uint32_t u32.conflict143;

typedef uint32_t u32.conflict144;

typedef uint32_t u32.conflict145;

typedef uint32_t u32.conflict146;

typedef uint32_t u32.conflict147;

typedef uint32_t u32.conflict148;

typedef uint32_t u32.conflict149;

typedef uint32_t u32.conflict150;

typedef uint32_t u32.conflict151;

typedef uint32_t u32.conflict152;

typedef uint32_t u32.conflict153;

typedef uint32_t u32.conflict154;

typedef uint32_t u32.conflict155;

typedef uint32_t u32.conflict156;

typedef uint32_t u32.conflict157;

typedef uint32_t u32.conflict158;

struct hw_vect.conflict {
    u32.conflict107 len:16;
    u32.conflict108 reserved:8;
    u32.conflict109 mpdu_cnt:6;
    u32.conflict110 ampdu_cnt:2;
    __le32 tsf_lo;
    __le32 tsf_hi;
    u32.conflict111 leg_length:12;
    u32.conflict112 leg_rate:4;
    u32.conflict113 ht_length:16;
    u32.conflict114 _ht_length:4;
    u32.conflict115 short_gi:1;
    u32.conflict116 stbc:2;
    u32.conflict117 smoothing:1;
    u32.conflict118 mcs:7;
    u32.conflict119 pre_type:1;
    u32.conflict120 format_mod:3;
    u32.conflict121 ch_bw:2;
    u32.conflict122 n_sts:3;
    u32.conflict123 lsig_valid:1;
    u32.conflict124 sounding:1;
    u32.conflict125 num_extn_ss:2;
    u32.conflict126 aggregation:1;
    u32.conflict127 fec_coding:1;
    u32.conflict128 dyn_bw:1;
    u32.conflict129 doze_not_allowed:1;
    u32.conflict130 antenna_set:8;
    u32.conflict131 partial_aid:9;
    u32.conflict132 group_id:6;
    u32.conflict133 reserved_1c:1;
    s32 rssi1:8;
    s32 rssi2:8;
    s32 rssi3:8;
    s32 rssi4:8;
    u32.conflict134 reserved_1d:8;
    u32.conflict135 rcpi:8;
    u32.conflict136 evm1:8;
    u32.conflict137 evm2:8;
    u32.conflict138 evm3:8;
    u32.conflict139 evm4:8;
    u32.conflict140 reserved2b_1:8;
    u32.conflict141 reserved2b_2:8;
    u32.conflict142 reserved2b_3:8;
    u32.conflict143 rx_vect2_valid:1;
    u32.conflict144 resp_frame:1;
    u32.conflict145 decr_status:3;
    u32.conflict146 rx_fifo_oflow:1;
    u32.conflict147 undef_err:1;
    u32.conflict148 phy_err:1;
    u32.conflict149 fcs_err:1;
    u32.conflict150 addr_mismatch:1;
    u32.conflict151 ga_frame:1;
    u32.conflict152 current_ac:2;
    u32.conflict153 frm_successful_rx:1;
    u32.conflict154 desc_done_rx:1;
    u32.conflict155 key_sram_index:10;
    u32.conflict156 key_sram_v:1;
    u32.conflict157 type:2;
    u32.conflict158 subtype:4;
};

typedef struct hw_vect hw_vect, *Phw_vect;

typedef uint32_t u32.conflict55;

typedef uint32_t u32.conflict56;

typedef uint32_t u32.conflict57;

typedef uint32_t u32.conflict58;

typedef uint32_t u32.conflict59;

typedef uint32_t u32.conflict60;

typedef uint32_t u32.conflict61;

typedef uint32_t u32.conflict62;

typedef uint32_t u32.conflict63;

typedef uint32_t u32.conflict64;

typedef uint32_t u32.conflict65;

typedef uint32_t u32.conflict66;

typedef uint32_t u32.conflict67;

typedef uint32_t u32.conflict68;

typedef uint32_t u32.conflict69;

typedef uint32_t u32.conflict70;

typedef uint32_t u32.conflict71;

typedef uint32_t u32.conflict72;

typedef uint32_t u32.conflict73;

typedef uint32_t u32.conflict74;

typedef uint32_t u32.conflict75;

typedef uint32_t u32.conflict76;

typedef uint32_t u32.conflict77;

typedef uint32_t u32.conflict78;

typedef uint32_t u32.conflict79;

typedef uint32_t u32.conflict80;

typedef uint32_t u32.conflict81;

typedef uint32_t u32.conflict82;

typedef uint32_t u32.conflict83;

typedef uint32_t u32.conflict84;

typedef uint32_t u32.conflict85;

typedef uint32_t u32.conflict86;

typedef uint32_t u32.conflict87;

typedef uint32_t u32.conflict88;

typedef uint32_t u32.conflict89;

typedef uint32_t u32.conflict90;

typedef uint32_t u32.conflict91;

typedef uint32_t u32.conflict92;

typedef uint32_t u32.conflict93;

typedef uint32_t u32.conflict94;

typedef uint32_t u32.conflict95;

typedef uint32_t u32.conflict96;

typedef uint32_t u32.conflict97;

typedef uint32_t u32.conflict98;

typedef uint32_t u32.conflict99;

typedef uint32_t u32.conflict100;

typedef uint32_t u32.conflict101;

typedef uint32_t u32.conflict102;

typedef uint32_t u32.conflict103;

typedef uint32_t u32.conflict104;

typedef uint32_t u32.conflict105;

typedef uint32_t u32.conflict106;

struct hw_vect {
    u32.conflict55 len:16;
    u32.conflict56 reserved:8;
    u32.conflict57 mpdu_cnt:6;
    u32.conflict58 ampdu_cnt:2;
    __le32 tsf_lo;
    __le32 tsf_hi;
    u32.conflict59 leg_length:12;
    u32.conflict60 leg_rate:4;
    u32.conflict61 ht_length:16;
    u32.conflict62 _ht_length:4;
    u32.conflict63 short_gi:1;
    u32.conflict64 stbc:2;
    u32.conflict65 smoothing:1;
    u32.conflict66 mcs:7;
    u32.conflict67 pre_type:1;
    u32.conflict68 format_mod:3;
    u32.conflict69 ch_bw:2;
    u32.conflict70 n_sts:3;
    u32.conflict71 lsig_valid:1;
    u32.conflict72 sounding:1;
    u32.conflict73 num_extn_ss:2;
    u32.conflict74 aggregation:1;
    u32.conflict75 fec_coding:1;
    u32.conflict76 dyn_bw:1;
    u32.conflict77 doze_not_allowed:1;
    u32.conflict78 antenna_set:8;
    u32.conflict79 partial_aid:9;
    u32.conflict80 group_id:6;
    u32.conflict81 reserved_1c:1;
    s32 rssi1:8;
    s32 rssi2:8;
    s32 rssi3:8;
    s32 rssi4:8;
    u32.conflict82 reserved_1d:8;
    u32.conflict83 rcpi:8;
    u32.conflict84 evm1:8;
    u32.conflict85 evm2:8;
    u32.conflict86 evm3:8;
    u32.conflict87 evm4:8;
    u32.conflict88 reserved2b_1:8;
    u32.conflict89 reserved2b_2:8;
    u32.conflict90 reserved2b_3:8;
    u32.conflict91 rx_vect2_valid:1;
    u32.conflict92 resp_frame:1;
    u32.conflict93 decr_status:3;
    u32.conflict94 rx_fifo_oflow:1;
    u32.conflict95 undef_err:1;
    u32.conflict96 phy_err:1;
    u32.conflict97 fcs_err:1;
    u32.conflict98 addr_mismatch:1;
    u32.conflict99 ga_frame:1;
    u32.conflict100 current_ac:2;
    u32.conflict101 frm_successful_rx:1;
    u32.conflict102 desc_done_rx:1;
    u32.conflict103 key_sram_index:10;
    u32.conflict104 key_sram_v:1;
    u32.conflict105 type:2;
    u32.conflict106 subtype:4;
};

typedef struct hw_rxhdr hw_rxhdr, *Phw_rxhdr;

typedef uint32_t u32.conflict159;

typedef uint32_t u32.conflict160;

typedef uint32_t u32.conflict161;

typedef uint32_t u32.conflict162;

typedef uint32_t u32.conflict163;

typedef uint32_t u32.conflict164;

typedef uint32_t u32.conflict165;

typedef uint32_t u32.conflict166;

typedef uint32_t u32.conflict167;

typedef uint32_t u32.conflict168;

typedef uint32_t u32.conflict169;

typedef uint32_t u32.conflict170;

typedef uint32_t u32.conflict171;

typedef uint32_t u32.conflict172;

typedef uint32_t u32.conflict173;

typedef uint32_t u32.conflict174;

typedef uint32_t u32.conflict175;

typedef uint32_t u32.conflict176;

struct hw_rxhdr {
    struct hw_vect.conflict hwvect;
    u32.conflict159 phy_band:8;
    u32.conflict160 phy_channel_type:8;
    u32.conflict161 phy_prim20_freq:16;
    u32.conflict162 phy_center1_freq:16;
    u32.conflict163 phy_center2_freq:16;
    u32.conflict164 flags_is_amsdu:1;
    u32.conflict165 flags_is_80211_mpdu:1;
    u32.conflict166 flags_is_4addr:1;
    u32.conflict167 flags_new_peer:1;
    u32.conflict168 flags_user_prio:3;
    u32.conflict169 flags_rsvd0:1;
    u32.conflict170 flags_vif_idx:8;
    u32.conflict171 flags_sta_idx:8;
    u32.conflict172 flags_dst_idx:8;
    u32.conflict173 pattern;
    u32.conflict174 payl_offset;
    u32.conflict175 reserved_pad[2];
    u32.conflict176 wild[8];
};

typedef struct sha256_state sha256_state, *Psha256_state;

struct sha256_state {
    UINT64 length;
    UINT32 state[8];
    UINT32 curlen;
    UINT8 buf[64];
    undefined field_0x6c;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef enum nl80211_iftype {
    NL80211_IFTYPE_ADHOC=1,
    NL80211_IFTYPE_AP=3,
    NL80211_IFTYPE_AP_VLAN=4,
    NL80211_IFTYPE_MAX=12,
    NL80211_IFTYPE_MESH_POINT=7,
    NL80211_IFTYPE_MONITOR=6,
    NL80211_IFTYPE_NAN=12,
    NL80211_IFTYPE_OCB=11,
    NL80211_IFTYPE_P2P_CLIENT=8,
    NL80211_IFTYPE_P2P_DEVICE=10,
    NL80211_IFTYPE_P2P_GO=9,
    NL80211_IFTYPE_STATION=2,
    NL80211_IFTYPE_UNSPECIFIED=0,
    NL80211_IFTYPE_WDS=5,
    NUM_NL80211_IFTYPES=13
} nl80211_iftype;

typedef enum td_status_bit {
    TD_STATUS_RX=1,
    TD_STATUS_RX_PS=3,
    TD_STATUS_TX=0,
    TD_STATUS_TX_PS=2
} td_status_bit;

typedef struct td_env_tag td_env_tag, *Ptd_env_tag;

typedef struct mm_timer_tag mm_timer_tag, *Pmm_timer_tag;

typedef struct co_list_hdr co_list_hdr, *Pco_list_hdr;

struct co_list_hdr {
    struct co_list_hdr * next;
};

struct mm_timer_tag {
    struct co_list_hdr list_hdr;
    void (* cb)(void *);
    void * env;
    uint32_t time;
};

struct td_env_tag {
    struct mm_timer_tag td_timer;
    uint32_t pck_cnt_tx;
    uint32_t pck_cnt_rx;
    uint32_t pck_cnt_tx_ps;
    uint32_t pck_cnt_rx_ps;
    uint8_t vif_index;
    uint8_t status;
    _Bool is_on;
    _Bool has_active_chan;
};

typedef enum ranks {
    rank_char=-2,
    rank_int=0,
    rank_long=1,
    rank_longlong=2,
    rank_short=-1
} ranks;

typedef enum flag {
    FL_HASH=32,
    FL_MINUS=2,
    FL_PLUS=4,
    FL_SIGNED=64,
    FL_SPACE=16,
    FL_TICK=8,
    FL_UPPER=-128,
    FL_ZERO=1
} flag;

typedef enum anon_enum_8 {
    st_flags=1,
    st_modifiers=4,
    st_normal=0,
    st_prec=3,
    st_width=2
} anon_enum_8;

typedef struct tmrTimerControl tmrTimerControl, *PtmrTimerControl;

typedef struct tmrTimerControl * TimerHandle_t;

typedef struct xLIST_ITEM xLIST_ITEM, *PxLIST_ITEM;

typedef struct xLIST_ITEM ListItem_t;

typedef uint32_t TickType_t;

typedef uint32_t UBaseType_t;

typedef struct xLIST xLIST, *PxLIST;

typedef struct xMINI_LIST_ITEM xMINI_LIST_ITEM, *PxMINI_LIST_ITEM;

typedef struct xMINI_LIST_ITEM MiniListItem_t;

struct xMINI_LIST_ITEM {
    TickType_t xItemValue;
    struct xLIST_ITEM * pxNext;
    struct xLIST_ITEM * pxPrevious;
};

struct xLIST_ITEM {
    TickType_t xItemValue;
    struct xLIST_ITEM * pxNext;
    struct xLIST_ITEM * pxPrevious;
    void * pvOwner;
    struct xLIST * pvContainer;
};

struct tmrTimerControl {
    char * pcTimerName;
    ListItem_t xTimerListItem;
    TickType_t xTimerPeriodInTicks;
    void * pvTimerID;
    void (* pxCallbackFunction)(TimerHandle_t);
    UBaseType_t uxTimerNumber;
    uint8_t ucStatus;
    undefined field_0x29;
    undefined field_0x2a;
    undefined field_0x2b;
};

struct xLIST {
    UBaseType_t uxNumberOfItems;
    ListItem_t * pxIndex;
    MiniListItem_t xListEnd;
};

typedef struct scanu_env_tag scanu_env_tag, *Pscanu_env_tag;

typedef struct scanu_start_req scanu_start_req, *Pscanu_start_req;

typedef struct hal_dma_desc_tag hal_dma_desc_tag, *Phal_dma_desc_tag;

typedef struct mac_scan_result mac_scan_result, *Pmac_scan_result;

typedef uint16_t ke_task_id_t;

typedef struct mac_addr mac_addr, *Pmac_addr;

typedef struct mac_ssid mac_ssid, *Pmac_ssid;

typedef struct scan_chan_tag scan_chan_tag, *Pscan_chan_tag;

typedef struct dma_desc dma_desc, *Pdma_desc;

struct hal_dma_desc_tag {
    struct co_list_hdr hdr;
    struct dma_desc * dma_desc;
    void (* cb)(void *, int);
    void * env;
};

struct dma_desc {
    uint32_t src;
    uint32_t dest;
    uint16_t length;
    uint16_t ctrl;
    uint32_t next;
};

struct mac_addr {
    uint16_t array[3];
};

struct mac_ssid {
    uint8_t length;
    uint8_t array[32];
    uint8_t array_tail[1];
};

struct scan_chan_tag {
    uint16_t freq;
    uint8_t band;
    uint8_t flags;
    int8_t tx_power;
    undefined field_0x5;
};

struct scanu_start_req {
    struct scan_chan_tag chan[42];
    struct mac_ssid ssid[2];
    struct mac_addr bssid;
    undefined field_0x146;
    undefined field_0x147;
    uint32_t add_ies;
    uint16_t add_ie_len;
    uint8_t vif_idx;
    uint8_t chan_cnt;
    uint8_t ssid_cnt;
    _Bool no_cck;
    undefined field_0x152;
    undefined field_0x153;
};

struct mac_scan_result {
    struct mac_addr bssid;
    struct mac_ssid ssid;
    uint16_t bsstype;
    undefined field_0x2a;
    undefined field_0x2b;
    struct scan_chan_tag * chan;
    uint16_t beacon_period;
    uint16_t cap_info;
    _Bool valid_flag;
    int8_t rssi;
    int8_t ppm_rel;
    int8_t ppm_abs;
};

struct scanu_env_tag {
    struct scanu_start_req * param;
    struct hal_dma_desc_tag dma_desc;
    uint16_t result_cnt;
    undefined field_0x16;
    undefined field_0x17;
    struct mac_scan_result scan_result[6];
    ke_task_id_t src_id;
    _Bool joining;
    uint8_t band;
    struct mac_addr bssid;
    struct mac_ssid ssid;
};

typedef struct scanu_add_ie_tag scanu_add_ie_tag, *Pscanu_add_ie_tag;

struct scanu_add_ie_tag {
    struct dma_desc dma_desc;
    uint32_t buf[50];
};

typedef enum HBN_PIR_HPF_Type {
    HBN_PIR_HPF_METHOD0=0,
    HBN_PIR_HPF_METHOD1=1,
    HBN_PIR_HPF_METHOD2=2
} HBN_PIR_HPF_Type;

typedef enum HBN_OUT0_INT_Type {
    HBN_OUT0_INT_GPIO7=0,
    HBN_OUT0_INT_GPIO8=1,
    HBN_OUT0_INT_RTC=2
} HBN_OUT0_INT_Type;

typedef enum HBN_XCLK_CLK_Type {
    HBN_XCLK_CLK_RC32M=0,
    HBN_XCLK_CLK_XTAL=1
} HBN_XCLK_CLK_Type;

typedef enum HBN_BOR_THRES_Type {
    HBN_BOR_THRES_2P0V=0,
    HBN_BOR_THRES_2P4V=1
} HBN_BOR_THRES_Type;

typedef struct HBN_APP_CFG_Type HBN_APP_CFG_Type, *PHBN_APP_CFG_Type;

typedef enum HBN_GPIO_INT_Trigger_Type {
    HBN_GPIO_INT_TRIGGER_ASYNC_FALLING_EDGE=4,
    HBN_GPIO_INT_TRIGGER_ASYNC_HIGH_LEVEL=7,
    HBN_GPIO_INT_TRIGGER_ASYNC_LOW_LEVEL=6,
    HBN_GPIO_INT_TRIGGER_ASYNC_RISING_EDGE=5,
    HBN_GPIO_INT_TRIGGER_SYNC_FALLING_EDGE=0,
    HBN_GPIO_INT_TRIGGER_SYNC_HIGH_LEVEL=3,
    HBN_GPIO_INT_TRIGGER_SYNC_LOW_LEVEL=2,
    HBN_GPIO_INT_TRIGGER_SYNC_RISING_EDGE=1
} HBN_GPIO_INT_Trigger_Type;

typedef struct SPI_Flash_Cfg_Type SPI_Flash_Cfg_Type, *PSPI_Flash_Cfg_Type;

typedef enum HBN_LEVEL_Type {
    HBN_LEVEL_0=0,
    HBN_LEVEL_1=1,
    HBN_LEVEL_2=2,
    HBN_LEVEL_3=3
} HBN_LEVEL_Type;

typedef enum HBN_LDO_LEVEL_Type {
    HBN_LDO_LEVEL_0P60V=0,
    HBN_LDO_LEVEL_0P65V=1,
    HBN_LDO_LEVEL_0P70V=2,
    HBN_LDO_LEVEL_0P75V=3,
    HBN_LDO_LEVEL_0P80V=4,
    HBN_LDO_LEVEL_0P85V=5,
    HBN_LDO_LEVEL_0P90V=6,
    HBN_LDO_LEVEL_0P95V=7,
    HBN_LDO_LEVEL_1P00V=8,
    HBN_LDO_LEVEL_1P05V=9,
    HBN_LDO_LEVEL_1P10V=10,
    HBN_LDO_LEVEL_1P15V=11,
    HBN_LDO_LEVEL_1P20V=12,
    HBN_LDO_LEVEL_1P25V=13,
    HBN_LDO_LEVEL_1P30V=14,
    HBN_LDO_LEVEL_1P35V=15
} HBN_LDO_LEVEL_Type;

struct HBN_APP_CFG_Type {
    uint8_t useXtal32k;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    uint32_t sleepTime;
    uint8_t gpioWakeupSrc;
    enum HBN_GPIO_INT_Trigger_Type gpioTrigType;
    undefined field_0xa;
    undefined field_0xb;
    struct SPI_Flash_Cfg_Type * flashCfg;
    enum HBN_LEVEL_Type hbnLevel;
    enum HBN_LDO_LEVEL_Type ldoLevel;
    undefined field_0x12;
    undefined field_0x13;
};

struct SPI_Flash_Cfg_Type {
    uint8_t ioMode;
    uint8_t cReadSupport;
    uint8_t clkDelay;
    uint8_t clkInvert;
    uint8_t resetEnCmd;
    uint8_t resetCmd;
    uint8_t resetCreadCmd;
    uint8_t resetCreadCmdSize;
    uint8_t jedecIdCmd;
    uint8_t jedecIdCmdDmyClk;
    uint8_t qpiJedecIdCmd;
    uint8_t qpiJedecIdCmdDmyClk;
    uint8_t sectorSize;
    uint8_t mid;
    uint16_t pageSize;
    uint8_t chipEraseCmd;
    uint8_t sectorEraseCmd;
    uint8_t blk32EraseCmd;
    uint8_t blk64EraseCmd;
    uint8_t writeEnableCmd;
    uint8_t pageProgramCmd;
    uint8_t qpageProgramCmd;
    uint8_t qppAddrMode;
    uint8_t fastReadCmd;
    uint8_t frDmyClk;
    uint8_t qpiFastReadCmd;
    uint8_t qpiFrDmyClk;
    uint8_t fastReadDoCmd;
    uint8_t frDoDmyClk;
    uint8_t fastReadDioCmd;
    uint8_t frDioDmyClk;
    uint8_t fastReadQoCmd;
    uint8_t frQoDmyClk;
    uint8_t fastReadQioCmd;
    uint8_t frQioDmyClk;
    uint8_t qpiFastReadQioCmd;
    uint8_t qpiFrQioDmyClk;
    uint8_t qpiPageProgramCmd;
    uint8_t writeVregEnableCmd;
    uint8_t wrEnableIndex;
    uint8_t qeIndex;
    uint8_t busyIndex;
    uint8_t wrEnableBit;
    uint8_t qeBit;
    uint8_t busyBit;
    uint8_t wrEnableWriteRegLen;
    uint8_t wrEnableReadRegLen;
    uint8_t qeWriteRegLen;
    uint8_t qeReadRegLen;
    uint8_t releasePowerDown;
    uint8_t busyReadRegLen;
    uint8_t readRegCmd[4];
    uint8_t writeRegCmd[4];
    uint8_t enterQpi;
    uint8_t exitQpi;
    uint8_t cReadMode;
    uint8_t cRExit;
    uint8_t burstWrapCmd;
    uint8_t burstWrapCmdDmyClk;
    uint8_t burstWrapDataMode;
    uint8_t burstWrapData;
    uint8_t deBurstWrapCmd;
    uint8_t deBurstWrapCmdDmyClk;
    uint8_t deBurstWrapDataMode;
    uint8_t deBurstWrapData;
    uint16_t timeEsector;
    uint16_t timeE32k;
    uint16_t timeE64k;
    uint16_t timePagePgm;
    uint16_t timeCe;
    uint8_t pdDelay;
    uint8_t qeData;
};

typedef struct HBN_BOR_CFG_Type HBN_BOR_CFG_Type, *PHBN_BOR_CFG_Type;

struct HBN_BOR_CFG_Type {
    uint8_t enableBor;
    uint8_t enableBorInt;
    uint8_t borThreshold;
    uint8_t enablePorInBor;
};

typedef enum HBN_PIR_LPF_Type {
    HBN_PIR_LPF_DIV1=0,
    HBN_PIR_LPF_DIV2=1
} HBN_PIR_LPF_Type;

typedef struct HBN_PIR_INT_CFG_Type HBN_PIR_INT_CFG_Type, *PHBN_PIR_INT_CFG_Type;

typedef enum BL_Fun_Type {
    DISABLE=0,
    ENABLE=1
} BL_Fun_Type;

struct HBN_PIR_INT_CFG_Type {
    enum BL_Fun_Type lowIntEn;
    enum BL_Fun_Type highIntEn;
};

typedef enum HBN_32K_CLK_Type {
    HBN_32K_DIG=3,
    HBN_32K_RC=0,
    HBN_32K_XTAL=1
} HBN_32K_CLK_Type;

typedef enum HBN_ROOT_CLK_Type {
    HBN_ROOT_CLK_PLL=2,
    HBN_ROOT_CLK_RC32M=0,
    HBN_ROOT_CLK_XTAL=1
} HBN_ROOT_CLK_Type;

typedef enum HBN_UART_CLK_Type {
    HBN_UART_CLK_160M=1,
    HBN_UART_CLK_FCLK=0
} HBN_UART_CLK_Type;

typedef enum HBN_INT_Type {
    HBN_INT_ACOMP0=20,
    HBN_INT_ACOMP1=22,
    HBN_INT_BOR=18,
    HBN_INT_GPIO7=0,
    HBN_INT_GPIO8=1,
    HBN_INT_PIR=17,
    HBN_INT_RTC=16
} HBN_INT_Type;

typedef enum HBN_OUT1_INT_Type {
    HBN_OUT1_INT_ACOMP0=2,
    HBN_OUT1_INT_ACOMP1=3,
    HBN_OUT1_INT_BOR=1,
    HBN_OUT1_INT_PIR=0
} HBN_OUT1_INT_Type;

typedef enum HBN_BOR_MODE_Type {
    HBN_BOR_MODE_POR_INDEPENDENT=0,
    HBN_BOR_MODE_POR_RELEVANT=1
} HBN_BOR_MODE_Type;

typedef enum HBN_RTC_INT_Delay_Type {
    HBN_RTC_INT_DELAY_0T=1,
    HBN_RTC_INT_DELAY_32T=0
} HBN_RTC_INT_Delay_Type;

typedef struct tmrTimerQueueMessage tmrTimerQueueMessage, *PtmrTimerQueueMessage;

typedef struct tmrTimerQueueMessage DaemonTaskMessage_t;

typedef int32_t BaseType_t;

typedef union anon_union_for_u anon_union_for_u, *Panon_union_for_u;

typedef struct tmrTimerParameters tmrTimerParameters, *PtmrTimerParameters;

typedef struct tmrTimerParameters TimerParameter_t;

typedef struct tmrCallbackParameters tmrCallbackParameters, *PtmrCallbackParameters;

typedef struct tmrCallbackParameters CallbackParameters_t;

typedef struct tmrTimerControl xTIMER;

typedef xTIMER Timer_t;

struct tmrTimerParameters {
    TickType_t xMessageValue;
    Timer_t * pxTimer;
};

struct tmrCallbackParameters {
    void (* pxCallbackFunction)(void *, uint32_t);
    void * pvParameter1;
    uint32_t ulParameter2;
};

union anon_union_for_u {
    TimerParameter_t xTimerParameters;
    CallbackParameters_t xCallbackParameters;
};

struct tmrTimerQueueMessage {
    BaseType_t xMessageID;
    union anon_union_for_u u;
};

typedef enum flag.conflict {
    FL_INV=2,
    FL_MINUS=8,
    FL_SPLAT=1,
    FL_WIDTH=4
} flag.conflict;

typedef enum bail {
    bail_eof=1,
    bail_err=2,
    bail_none=0
} bail;

typedef enum ranks.conflict {
    rank_char=-2,
    rank_int=0,
    rank_long=1,
    rank_longlong=2,
    rank_ptr=2147483647,
    rank_short=-1
} ranks.conflict;


// WARNING! conflicting data type names: /DWARF/vsscanf.c/vsscanf/anon_enum_8 - /DWARF/debug.c/vsnprintf/anon_enum_8

typedef struct txdesc_host.conflict60 txdesc_host.conflict60, *Ptxdesc_host.conflict60;

typedef uint32_t u32_l;

typedef struct hostdesc.conflict75 hostdesc.conflict75, *Phostdesc.conflict75;

typedef uint16_t u16_l;

typedef struct mac_addr.conflict166 mac_addr.conflict166, *Pmac_addr.conflict166;

typedef struct mac_addr.conflict167 mac_addr.conflict167, *Pmac_addr.conflict167;

typedef uint8_t u8_l;

struct mac_addr.conflict166 {
    u8_l array[6];
};

struct mac_addr.conflict167 {
    u8_l array[6];
};

struct hostdesc.conflict75 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict166 eth_dest_addr;
    struct mac_addr.conflict167 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict60 {
    u32_l ready;
    struct hostdesc.conflict75 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict5 txdesc_host.conflict5, *Ptxdesc_host.conflict5;

typedef struct hostdesc.conflict6 hostdesc.conflict6, *Phostdesc.conflict6;

typedef struct mac_addr.conflict13 mac_addr.conflict13, *Pmac_addr.conflict13;

typedef struct mac_addr.conflict14 mac_addr.conflict14, *Pmac_addr.conflict14;

struct mac_addr.conflict14 {
    u8_l array[6];
};

struct mac_addr.conflict13 {
    u8_l array[6];
};

struct hostdesc.conflict6 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict13 eth_dest_addr;
    struct mac_addr.conflict14 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict5 {
    u32_l ready;
    struct hostdesc.conflict6 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct ipc_shared_env_tag.conflict31 ipc_shared_env_tag.conflict31, *Pipc_shared_env_tag.conflict31;

typedef struct ipc_a2e_msg ipc_a2e_msg, *Pipc_a2e_msg;

typedef struct txdesc_host.conflict61 txdesc_host.conflict61, *Ptxdesc_host.conflict61;

typedef struct hostdesc.conflict76 hostdesc.conflict76, *Phostdesc.conflict76;

typedef struct mac_addr.conflict168 mac_addr.conflict168, *Pmac_addr.conflict168;

typedef struct mac_addr.conflict169 mac_addr.conflict169, *Pmac_addr.conflict169;

struct mac_addr.conflict168 {
    u8_l array[6];
};

struct mac_addr.conflict169 {
    u8_l array[6];
};

struct hostdesc.conflict76 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict168 eth_dest_addr;
    struct mac_addr.conflict169 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict61 {
    u32_l ready;
    struct hostdesc.conflict76 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

struct ipc_a2e_msg {
    uint32_t dummy_word;
    uint32_t msg[127];
};

struct ipc_shared_env_tag.conflict31 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict61 txdesc0[4];
};

typedef struct txdesc_host.conflict59 txdesc_host.conflict59, *Ptxdesc_host.conflict59;

typedef struct hostdesc.conflict74 hostdesc.conflict74, *Phostdesc.conflict74;

typedef struct mac_addr.conflict164 mac_addr.conflict164, *Pmac_addr.conflict164;

typedef struct mac_addr.conflict165 mac_addr.conflict165, *Pmac_addr.conflict165;

struct mac_addr.conflict165 {
    u8_l array[6];
};

struct mac_addr.conflict164 {
    u8_l array[6];
};

struct hostdesc.conflict74 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict164 eth_dest_addr;
    struct mac_addr.conflict165 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict59 {
    u32_l ready;
    struct hostdesc.conflict74 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct ipc_shared_env_tag.conflict8 ipc_shared_env_tag.conflict8, *Pipc_shared_env_tag.conflict8;

typedef struct txdesc_host.conflict8 txdesc_host.conflict8, *Ptxdesc_host.conflict8;

typedef struct hostdesc.conflict10 hostdesc.conflict10, *Phostdesc.conflict10;

typedef struct mac_addr.conflict22 mac_addr.conflict22, *Pmac_addr.conflict22;

typedef struct mac_addr.conflict23 mac_addr.conflict23, *Pmac_addr.conflict23;

struct mac_addr.conflict22 {
    u8_l array[6];
};

struct mac_addr.conflict23 {
    u8_l array[6];
};

struct hostdesc.conflict10 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict22 eth_dest_addr;
    struct mac_addr.conflict23 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict8 {
    u32_l ready;
    struct hostdesc.conflict10 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

struct ipc_shared_env_tag.conflict8 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict8 txdesc0[4];
};

typedef struct txdesc_host.conflict6 txdesc_host.conflict6, *Ptxdesc_host.conflict6;

typedef struct hostdesc.conflict7 hostdesc.conflict7, *Phostdesc.conflict7;

typedef struct mac_addr.conflict15 mac_addr.conflict15, *Pmac_addr.conflict15;

typedef struct mac_addr.conflict16 mac_addr.conflict16, *Pmac_addr.conflict16;

struct mac_addr.conflict16 {
    u8_l array[6];
};

struct mac_addr.conflict15 {
    u8_l array[6];
};

struct hostdesc.conflict7 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict15 eth_dest_addr;
    struct mac_addr.conflict16 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict6 {
    u32_l ready;
    struct hostdesc.conflict7 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict9 txdesc_host.conflict9, *Ptxdesc_host.conflict9;

typedef struct hostdesc.conflict11 hostdesc.conflict11, *Phostdesc.conflict11;

typedef struct mac_addr.conflict24 mac_addr.conflict24, *Pmac_addr.conflict24;

typedef struct mac_addr.conflict25 mac_addr.conflict25, *Pmac_addr.conflict25;

struct mac_addr.conflict24 {
    u8_l array[6];
};

struct mac_addr.conflict25 {
    u8_l array[6];
};

struct hostdesc.conflict11 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict24 eth_dest_addr;
    struct mac_addr.conflict25 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict9 {
    u32_l ready;
    struct hostdesc.conflict11 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict7 txdesc_host.conflict7, *Ptxdesc_host.conflict7;

typedef struct hostdesc.conflict8 hostdesc.conflict8, *Phostdesc.conflict8;

typedef struct mac_addr.conflict17 mac_addr.conflict17, *Pmac_addr.conflict17;

typedef struct mac_addr.conflict18 mac_addr.conflict18, *Pmac_addr.conflict18;

struct mac_addr.conflict18 {
    u8_l array[6];
};

struct mac_addr.conflict17 {
    u8_l array[6];
};

struct hostdesc.conflict8 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict17 eth_dest_addr;
    struct mac_addr.conflict18 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict7 {
    u32_l ready;
    struct hostdesc.conflict8 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict4 txdesc_host.conflict4, *Ptxdesc_host.conflict4;

typedef struct hostdesc.conflict5 hostdesc.conflict5, *Phostdesc.conflict5;

typedef struct mac_addr.conflict11 mac_addr.conflict11, *Pmac_addr.conflict11;

typedef struct mac_addr.conflict12 mac_addr.conflict12, *Pmac_addr.conflict12;

struct mac_addr.conflict11 {
    u8_l array[6];
};

struct mac_addr.conflict12 {
    u8_l array[6];
};

struct hostdesc.conflict5 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict11 eth_dest_addr;
    struct mac_addr.conflict12 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict4 {
    u32_l ready;
    struct hostdesc.conflict5 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict2 txdesc_host.conflict2, *Ptxdesc_host.conflict2;

typedef struct hostdesc.conflict3 hostdesc.conflict3, *Phostdesc.conflict3;

typedef struct mac_addr.conflict7 mac_addr.conflict7, *Pmac_addr.conflict7;

typedef struct mac_addr.conflict8 mac_addr.conflict8, *Pmac_addr.conflict8;

struct mac_addr.conflict7 {
    u8_l array[6];
};

struct mac_addr.conflict8 {
    u8_l array[6];
};

struct hostdesc.conflict3 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict7 eth_dest_addr;
    struct mac_addr.conflict8 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict2 {
    u32_l ready;
    struct hostdesc.conflict3 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict14 txdesc_host.conflict14, *Ptxdesc_host.conflict14;

typedef struct hostdesc.conflict16 hostdesc.conflict16, *Phostdesc.conflict16;

typedef struct mac_addr.conflict34 mac_addr.conflict34, *Pmac_addr.conflict34;

typedef struct mac_addr.conflict35 mac_addr.conflict35, *Pmac_addr.conflict35;

struct mac_addr.conflict35 {
    u8_l array[6];
};

struct mac_addr.conflict34 {
    u8_l array[6];
};

struct hostdesc.conflict16 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict34 eth_dest_addr;
    struct mac_addr.conflict35 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict14 {
    u32_l ready;
    struct hostdesc.conflict16 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict3 txdesc_host.conflict3, *Ptxdesc_host.conflict3;

typedef struct hostdesc.conflict4 hostdesc.conflict4, *Phostdesc.conflict4;

typedef struct mac_addr.conflict9 mac_addr.conflict9, *Pmac_addr.conflict9;

typedef struct mac_addr.conflict10 mac_addr.conflict10, *Pmac_addr.conflict10;

struct mac_addr.conflict10 {
    u8_l array[6];
};

struct mac_addr.conflict9 {
    u8_l array[6];
};

struct hostdesc.conflict4 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict9 eth_dest_addr;
    struct mac_addr.conflict10 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict3 {
    u32_l ready;
    struct hostdesc.conflict4 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict1 txdesc_host.conflict1, *Ptxdesc_host.conflict1;

typedef struct hostdesc.conflict2 hostdesc.conflict2, *Phostdesc.conflict2;

typedef struct mac_addr.conflict5 mac_addr.conflict5, *Pmac_addr.conflict5;

typedef struct mac_addr.conflict6 mac_addr.conflict6, *Pmac_addr.conflict6;

struct mac_addr.conflict5 {
    u8_l array[6];
};

struct mac_addr.conflict6 {
    u8_l array[6];
};

struct hostdesc.conflict2 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict5 eth_dest_addr;
    struct mac_addr.conflict6 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict1 {
    u32_l ready;
    struct hostdesc.conflict2 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct ipc_shared_env_tag.conflict7 ipc_shared_env_tag.conflict7, *Pipc_shared_env_tag.conflict7;

struct ipc_shared_env_tag.conflict7 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict8 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict9 ipc_shared_env_tag.conflict9, *Pipc_shared_env_tag.conflict9;

typedef struct txdesc_host.conflict17 txdesc_host.conflict17, *Ptxdesc_host.conflict17;

typedef struct hostdesc.conflict20 hostdesc.conflict20, *Phostdesc.conflict20;

typedef struct mac_addr.conflict45 mac_addr.conflict45, *Pmac_addr.conflict45;

typedef struct mac_addr.conflict46 mac_addr.conflict46, *Pmac_addr.conflict46;

struct mac_addr.conflict45 {
    u8_l array[6];
};

struct mac_addr.conflict46 {
    u8_l array[6];
};

struct hostdesc.conflict20 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict45 eth_dest_addr;
    struct mac_addr.conflict46 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict17 {
    u32_l ready;
    struct hostdesc.conflict20 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

struct ipc_shared_env_tag.conflict9 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict17 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict30 ipc_shared_env_tag.conflict30, *Pipc_shared_env_tag.conflict30;

struct ipc_shared_env_tag.conflict30 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict60 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict1 ipc_shared_env_tag.conflict1, *Pipc_shared_env_tag.conflict1;

struct ipc_shared_env_tag.conflict1 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict5 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict2 ipc_shared_env_tag.conflict2, *Pipc_shared_env_tag.conflict2;

struct ipc_shared_env_tag.conflict2 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict6 txdesc0[4];
};

typedef struct txdesc_host.conflict25 txdesc_host.conflict25, *Ptxdesc_host.conflict25;

typedef struct hostdesc.conflict29 hostdesc.conflict29, *Phostdesc.conflict29;

typedef struct mac_addr.conflict67 mac_addr.conflict67, *Pmac_addr.conflict67;

typedef struct mac_addr.conflict68 mac_addr.conflict68, *Pmac_addr.conflict68;

struct mac_addr.conflict67 {
    u8_l array[6];
};

struct mac_addr.conflict68 {
    u8_l array[6];
};

struct hostdesc.conflict29 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict67 eth_dest_addr;
    struct mac_addr.conflict68 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict25 {
    u32_l ready;
    struct hostdesc.conflict29 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct ipc_shared_env_tag.conflict3 ipc_shared_env_tag.conflict3, *Pipc_shared_env_tag.conflict3;

struct ipc_shared_env_tag.conflict3 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict7 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict4 ipc_shared_env_tag.conflict4, *Pipc_shared_env_tag.conflict4;

typedef struct txdesc_host.conflict10 txdesc_host.conflict10, *Ptxdesc_host.conflict10;

typedef struct hostdesc.conflict12 hostdesc.conflict12, *Phostdesc.conflict12;

typedef struct mac_addr.conflict26 mac_addr.conflict26, *Pmac_addr.conflict26;

typedef struct mac_addr.conflict27 mac_addr.conflict27, *Pmac_addr.conflict27;

struct mac_addr.conflict26 {
    u8_l array[6];
};

struct mac_addr.conflict27 {
    u8_l array[6];
};

struct hostdesc.conflict12 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict26 eth_dest_addr;
    struct mac_addr.conflict27 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict10 {
    u32_l ready;
    struct hostdesc.conflict12 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

struct ipc_shared_env_tag.conflict4 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict10 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict5 ipc_shared_env_tag.conflict5, *Pipc_shared_env_tag.conflict5;

typedef struct txdesc_host.conflict13 txdesc_host.conflict13, *Ptxdesc_host.conflict13;

typedef struct hostdesc.conflict15 hostdesc.conflict15, *Phostdesc.conflict15;

typedef struct mac_addr.conflict32 mac_addr.conflict32, *Pmac_addr.conflict32;

typedef struct mac_addr.conflict33 mac_addr.conflict33, *Pmac_addr.conflict33;

struct mac_addr.conflict32 {
    u8_l array[6];
};

struct mac_addr.conflict33 {
    u8_l array[6];
};

struct hostdesc.conflict15 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict32 eth_dest_addr;
    struct mac_addr.conflict33 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict13 {
    u32_l ready;
    struct hostdesc.conflict15 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

struct ipc_shared_env_tag.conflict5 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict13 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict6 ipc_shared_env_tag.conflict6, *Pipc_shared_env_tag.conflict6;

struct ipc_shared_env_tag.conflict6 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict14 txdesc0[4];
};

typedef struct txdesc_host.conflict38 txdesc_host.conflict38, *Ptxdesc_host.conflict38;

typedef struct hostdesc.conflict48 hostdesc.conflict48, *Phostdesc.conflict48;

typedef struct mac_addr.conflict109 mac_addr.conflict109, *Pmac_addr.conflict109;

typedef struct mac_addr.conflict110 mac_addr.conflict110, *Pmac_addr.conflict110;

struct mac_addr.conflict110 {
    u8_l array[6];
};

struct mac_addr.conflict109 {
    u8_l array[6];
};

struct hostdesc.conflict48 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict109 eth_dest_addr;
    struct mac_addr.conflict110 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict38 {
    u32_l ready;
    struct hostdesc.conflict48 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict72 hostdesc.conflict72, *Phostdesc.conflict72;

typedef struct mac_addr.conflict160 mac_addr.conflict160, *Pmac_addr.conflict160;

typedef struct mac_addr.conflict161 mac_addr.conflict161, *Pmac_addr.conflict161;

struct mac_addr.conflict161 {
    u8_l array[6];
};

struct mac_addr.conflict160 {
    u8_l array[6];
};

struct hostdesc.conflict72 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict160 eth_dest_addr;
    struct mac_addr.conflict161 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct hostdesc.conflict73 hostdesc.conflict73, *Phostdesc.conflict73;

typedef struct mac_addr.conflict162 mac_addr.conflict162, *Pmac_addr.conflict162;

typedef struct mac_addr.conflict163 mac_addr.conflict163, *Pmac_addr.conflict163;

struct mac_addr.conflict163 {
    u8_l array[6];
};

struct mac_addr.conflict162 {
    u8_l array[6];
};

struct hostdesc.conflict73 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict162 eth_dest_addr;
    struct mac_addr.conflict163 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct hostdesc.conflict70 hostdesc.conflict70, *Phostdesc.conflict70;

typedef struct mac_addr.conflict156 mac_addr.conflict156, *Pmac_addr.conflict156;

typedef struct mac_addr.conflict157 mac_addr.conflict157, *Pmac_addr.conflict157;

struct mac_addr.conflict156 {
    u8_l array[6];
};

struct mac_addr.conflict157 {
    u8_l array[6];
};

struct hostdesc.conflict70 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict156 eth_dest_addr;
    struct mac_addr.conflict157 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct hostdesc.conflict71 hostdesc.conflict71, *Phostdesc.conflict71;

typedef struct mac_addr.conflict158 mac_addr.conflict158, *Pmac_addr.conflict158;

typedef struct mac_addr.conflict159 mac_addr.conflict159, *Pmac_addr.conflict159;

struct mac_addr.conflict159 {
    u8_l array[6];
};

struct mac_addr.conflict158 {
    u8_l array[6];
};

struct hostdesc.conflict71 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict158 eth_dest_addr;
    struct mac_addr.conflict159 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct ipc_shared_env_tag.conflict21 ipc_shared_env_tag.conflict21, *Pipc_shared_env_tag.conflict21;

typedef struct txdesc_host.conflict41 txdesc_host.conflict41, *Ptxdesc_host.conflict41;

typedef struct hostdesc.conflict51 hostdesc.conflict51, *Phostdesc.conflict51;

typedef struct mac_addr.conflict115 mac_addr.conflict115, *Pmac_addr.conflict115;

typedef struct mac_addr.conflict116 mac_addr.conflict116, *Pmac_addr.conflict116;

struct mac_addr.conflict115 {
    u8_l array[6];
};

struct mac_addr.conflict116 {
    u8_l array[6];
};

struct hostdesc.conflict51 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict115 eth_dest_addr;
    struct mac_addr.conflict116 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict41 {
    u32_l ready;
    struct hostdesc.conflict51 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

struct ipc_shared_env_tag.conflict21 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict41 txdesc0[4];
};

typedef struct txdesc_host.conflict50 txdesc_host.conflict50, *Ptxdesc_host.conflict50;

typedef struct hostdesc.conflict64 hostdesc.conflict64, *Phostdesc.conflict64;

typedef struct mac_addr.conflict143 mac_addr.conflict143, *Pmac_addr.conflict143;

typedef struct mac_addr.conflict144 mac_addr.conflict144, *Pmac_addr.conflict144;

struct mac_addr.conflict143 {
    u8_l array[6];
};

struct mac_addr.conflict144 {
    u8_l array[6];
};

struct hostdesc.conflict64 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict143 eth_dest_addr;
    struct mac_addr.conflict144 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict50 {
    u32_l ready;
    struct hostdesc.conflict64 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict27 txdesc_host.conflict27, *Ptxdesc_host.conflict27;

typedef struct hostdesc.conflict31 hostdesc.conflict31, *Phostdesc.conflict31;

typedef struct mac_addr.conflict71 mac_addr.conflict71, *Pmac_addr.conflict71;

typedef struct mac_addr.conflict72 mac_addr.conflict72, *Pmac_addr.conflict72;

struct mac_addr.conflict72 {
    u8_l array[6];
};

struct mac_addr.conflict71 {
    u8_l array[6];
};

struct hostdesc.conflict31 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict71 eth_dest_addr;
    struct mac_addr.conflict72 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict27 {
    u32_l ready;
    struct hostdesc.conflict31 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct ipc_shared_env_tag.conflict10 ipc_shared_env_tag.conflict10, *Pipc_shared_env_tag.conflict10;

typedef struct txdesc_host.conflict20 txdesc_host.conflict20, *Ptxdesc_host.conflict20;

typedef struct hostdesc.conflict23 hostdesc.conflict23, *Phostdesc.conflict23;

typedef struct mac_addr.conflict51 mac_addr.conflict51, *Pmac_addr.conflict51;

typedef struct mac_addr.conflict52 mac_addr.conflict52, *Pmac_addr.conflict52;

struct mac_addr.conflict52 {
    u8_l array[6];
};

struct mac_addr.conflict51 {
    u8_l array[6];
};

struct hostdesc.conflict23 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict51 eth_dest_addr;
    struct mac_addr.conflict52 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict20 {
    u32_l ready;
    struct hostdesc.conflict23 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

struct ipc_shared_env_tag.conflict10 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict20 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict ipc_shared_env_tag.conflict, *Pipc_shared_env_tag.conflict;

struct ipc_shared_env_tag.conflict {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict2 txdesc0[4];
};

typedef struct txdesc_host.conflict26 txdesc_host.conflict26, *Ptxdesc_host.conflict26;

typedef struct hostdesc.conflict30 hostdesc.conflict30, *Phostdesc.conflict30;

typedef struct mac_addr.conflict69 mac_addr.conflict69, *Pmac_addr.conflict69;

typedef struct mac_addr.conflict70 mac_addr.conflict70, *Pmac_addr.conflict70;

struct mac_addr.conflict70 {
    u8_l array[6];
};

struct mac_addr.conflict69 {
    u8_l array[6];
};

struct hostdesc.conflict30 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict69 eth_dest_addr;
    struct mac_addr.conflict70 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict26 {
    u32_l ready;
    struct hostdesc.conflict30 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict9 hostdesc.conflict9, *Phostdesc.conflict9;

typedef struct mac_addr.conflict20 mac_addr.conflict20, *Pmac_addr.conflict20;

typedef struct mac_addr.conflict21 mac_addr.conflict21, *Pmac_addr.conflict21;

struct mac_addr.conflict21 {
    u8_l array[6];
};

struct mac_addr.conflict20 {
    u8_l array[6];
};

struct hostdesc.conflict9 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict20 eth_dest_addr;
    struct mac_addr.conflict21 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct hostdesc.conflict1 hostdesc.conflict1, *Phostdesc.conflict1;

typedef struct mac_addr.conflict3 mac_addr.conflict3, *Pmac_addr.conflict3;

typedef struct mac_addr.conflict4 mac_addr.conflict4, *Pmac_addr.conflict4;

struct mac_addr.conflict4 {
    u8_l array[6];
};

struct mac_addr.conflict3 {
    u8_l array[6];
};

struct hostdesc.conflict1 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict3 eth_dest_addr;
    struct mac_addr.conflict4 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct hostdesc.conflict38 hostdesc.conflict38, *Phostdesc.conflict38;

typedef struct mac_addr.conflict88 mac_addr.conflict88, *Pmac_addr.conflict88;

typedef struct mac_addr.conflict89 mac_addr.conflict89, *Pmac_addr.conflict89;

struct mac_addr.conflict88 {
    u8_l array[6];
};

struct mac_addr.conflict89 {
    u8_l array[6];
};

struct hostdesc.conflict38 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict88 eth_dest_addr;
    struct mac_addr.conflict89 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict40 txdesc_host.conflict40, *Ptxdesc_host.conflict40;

typedef struct hostdesc.conflict50 hostdesc.conflict50, *Phostdesc.conflict50;

typedef struct mac_addr.conflict113 mac_addr.conflict113, *Pmac_addr.conflict113;

typedef struct mac_addr.conflict114 mac_addr.conflict114, *Pmac_addr.conflict114;

struct mac_addr.conflict113 {
    u8_l array[6];
};

struct mac_addr.conflict114 {
    u8_l array[6];
};

struct hostdesc.conflict50 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict113 eth_dest_addr;
    struct mac_addr.conflict114 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict40 {
    u32_l ready;
    struct hostdesc.conflict50 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict39 hostdesc.conflict39, *Phostdesc.conflict39;

typedef struct mac_addr.conflict90 mac_addr.conflict90, *Pmac_addr.conflict90;

typedef struct mac_addr.conflict91 mac_addr.conflict91, *Pmac_addr.conflict91;

struct mac_addr.conflict91 {
    u8_l array[6];
};

struct mac_addr.conflict90 {
    u8_l array[6];
};

struct hostdesc.conflict39 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict90 eth_dest_addr;
    struct mac_addr.conflict91 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct hostdesc.conflict36 hostdesc.conflict36, *Phostdesc.conflict36;

typedef struct mac_addr.conflict84 mac_addr.conflict84, *Pmac_addr.conflict84;

typedef struct mac_addr.conflict85 mac_addr.conflict85, *Pmac_addr.conflict85;

struct mac_addr.conflict84 {
    u8_l array[6];
};

struct mac_addr.conflict85 {
    u8_l array[6];
};

struct hostdesc.conflict36 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict84 eth_dest_addr;
    struct mac_addr.conflict85 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict42 txdesc_host.conflict42, *Ptxdesc_host.conflict42;

typedef struct hostdesc.conflict52 hostdesc.conflict52, *Phostdesc.conflict52;

typedef struct mac_addr.conflict117 mac_addr.conflict117, *Pmac_addr.conflict117;

typedef struct mac_addr.conflict118 mac_addr.conflict118, *Pmac_addr.conflict118;

struct mac_addr.conflict117 {
    u8_l array[6];
};

struct mac_addr.conflict118 {
    u8_l array[6];
};

struct hostdesc.conflict52 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict117 eth_dest_addr;
    struct mac_addr.conflict118 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict42 {
    u32_l ready;
    struct hostdesc.conflict52 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict37 hostdesc.conflict37, *Phostdesc.conflict37;

typedef struct mac_addr.conflict86 mac_addr.conflict86, *Pmac_addr.conflict86;

typedef struct mac_addr.conflict87 mac_addr.conflict87, *Pmac_addr.conflict87;

struct mac_addr.conflict86 {
    u8_l array[6];
};

struct mac_addr.conflict87 {
    u8_l array[6];
};

struct hostdesc.conflict37 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict86 eth_dest_addr;
    struct mac_addr.conflict87 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict43 txdesc_host.conflict43, *Ptxdesc_host.conflict43;

typedef struct hostdesc.conflict56 hostdesc.conflict56, *Phostdesc.conflict56;

typedef struct mac_addr.conflict126 mac_addr.conflict126, *Pmac_addr.conflict126;

typedef struct mac_addr.conflict127 mac_addr.conflict127, *Pmac_addr.conflict127;

struct mac_addr.conflict126 {
    u8_l array[6];
};

struct mac_addr.conflict127 {
    u8_l array[6];
};

struct hostdesc.conflict56 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict126 eth_dest_addr;
    struct mac_addr.conflict127 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict43 {
    u32_l ready;
    struct hostdesc.conflict56 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict34 hostdesc.conflict34, *Phostdesc.conflict34;

typedef struct mac_addr.conflict80 mac_addr.conflict80, *Pmac_addr.conflict80;

typedef struct mac_addr.conflict81 mac_addr.conflict81, *Pmac_addr.conflict81;

struct mac_addr.conflict80 {
    u8_l array[6];
};

struct mac_addr.conflict81 {
    u8_l array[6];
};

struct hostdesc.conflict34 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict80 eth_dest_addr;
    struct mac_addr.conflict81 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict44 txdesc_host.conflict44, *Ptxdesc_host.conflict44;

typedef struct hostdesc.conflict57 hostdesc.conflict57, *Phostdesc.conflict57;

typedef struct mac_addr.conflict128 mac_addr.conflict128, *Pmac_addr.conflict128;

typedef struct mac_addr.conflict129 mac_addr.conflict129, *Pmac_addr.conflict129;

struct mac_addr.conflict128 {
    u8_l array[6];
};

struct mac_addr.conflict129 {
    u8_l array[6];
};

struct hostdesc.conflict57 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict128 eth_dest_addr;
    struct mac_addr.conflict129 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict44 {
    u32_l ready;
    struct hostdesc.conflict57 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict35 hostdesc.conflict35, *Phostdesc.conflict35;

typedef struct mac_addr.conflict82 mac_addr.conflict82, *Pmac_addr.conflict82;

typedef struct mac_addr.conflict83 mac_addr.conflict83, *Pmac_addr.conflict83;

struct mac_addr.conflict82 {
    u8_l array[6];
};

struct mac_addr.conflict83 {
    u8_l array[6];
};

struct hostdesc.conflict35 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict82 eth_dest_addr;
    struct mac_addr.conflict83 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict45 txdesc_host.conflict45, *Ptxdesc_host.conflict45;

typedef struct hostdesc.conflict58 hostdesc.conflict58, *Phostdesc.conflict58;

typedef struct mac_addr.conflict130 mac_addr.conflict130, *Pmac_addr.conflict130;

typedef struct mac_addr.conflict131 mac_addr.conflict131, *Pmac_addr.conflict131;

struct mac_addr.conflict130 {
    u8_l array[6];
};

struct mac_addr.conflict131 {
    u8_l array[6];
};

struct hostdesc.conflict58 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict130 eth_dest_addr;
    struct mac_addr.conflict131 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict45 {
    u32_l ready;
    struct hostdesc.conflict58 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict32 hostdesc.conflict32, *Phostdesc.conflict32;

typedef struct mac_addr.conflict73 mac_addr.conflict73, *Pmac_addr.conflict73;

typedef struct mac_addr.conflict74 mac_addr.conflict74, *Pmac_addr.conflict74;

struct mac_addr.conflict74 {
    u8_l array[6];
};

struct mac_addr.conflict73 {
    u8_l array[6];
};

struct hostdesc.conflict32 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict73 eth_dest_addr;
    struct mac_addr.conflict74 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct hostdesc.conflict33 hostdesc.conflict33, *Phostdesc.conflict33;

typedef struct mac_addr.conflict78 mac_addr.conflict78, *Pmac_addr.conflict78;

typedef struct mac_addr.conflict79 mac_addr.conflict79, *Pmac_addr.conflict79;

struct mac_addr.conflict79 {
    u8_l array[6];
};

struct mac_addr.conflict78 {
    u8_l array[6];
};

struct hostdesc.conflict33 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict78 eth_dest_addr;
    struct mac_addr.conflict79 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict46 txdesc_host.conflict46, *Ptxdesc_host.conflict46;

typedef struct hostdesc.conflict59 hostdesc.conflict59, *Phostdesc.conflict59;

typedef struct mac_addr.conflict132 mac_addr.conflict132, *Pmac_addr.conflict132;

typedef struct mac_addr.conflict133 mac_addr.conflict133, *Pmac_addr.conflict133;

struct mac_addr.conflict133 {
    u8_l array[6];
};

struct mac_addr.conflict132 {
    u8_l array[6];
};

struct hostdesc.conflict59 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict132 eth_dest_addr;
    struct mac_addr.conflict133 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict46 {
    u32_l ready;
    struct hostdesc.conflict59 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict47 txdesc_host.conflict47, *Ptxdesc_host.conflict47;

typedef struct hostdesc.conflict60 hostdesc.conflict60, *Phostdesc.conflict60;

typedef struct mac_addr.conflict134 mac_addr.conflict134, *Pmac_addr.conflict134;

typedef struct mac_addr.conflict135 mac_addr.conflict135, *Pmac_addr.conflict135;

struct mac_addr.conflict135 {
    u8_l array[6];
};

struct mac_addr.conflict134 {
    u8_l array[6];
};

struct hostdesc.conflict60 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict134 eth_dest_addr;
    struct mac_addr.conflict135 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict47 {
    u32_l ready;
    struct hostdesc.conflict60 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict28 txdesc_host.conflict28, *Ptxdesc_host.conflict28;

struct txdesc_host.conflict28 {
    u32_l ready;
    struct hostdesc.conflict32 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict48 txdesc_host.conflict48, *Ptxdesc_host.conflict48;

typedef struct hostdesc.conflict62 hostdesc.conflict62, *Phostdesc.conflict62;

typedef struct mac_addr.conflict139 mac_addr.conflict139, *Pmac_addr.conflict139;

typedef struct mac_addr.conflict140 mac_addr.conflict140, *Pmac_addr.conflict140;

struct mac_addr.conflict139 {
    u8_l array[6];
};

struct mac_addr.conflict140 {
    u8_l array[6];
};

struct hostdesc.conflict62 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict139 eth_dest_addr;
    struct mac_addr.conflict140 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict48 {
    u32_l ready;
    struct hostdesc.conflict62 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict49 txdesc_host.conflict49, *Ptxdesc_host.conflict49;

typedef struct hostdesc.conflict63 hostdesc.conflict63, *Phostdesc.conflict63;

typedef struct mac_addr.conflict141 mac_addr.conflict141, *Pmac_addr.conflict141;

typedef struct mac_addr.conflict142 mac_addr.conflict142, *Pmac_addr.conflict142;

struct mac_addr.conflict141 {
    u8_l array[6];
};

struct mac_addr.conflict142 {
    u8_l array[6];
};

struct hostdesc.conflict63 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict141 eth_dest_addr;
    struct mac_addr.conflict142 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict49 {
    u32_l ready;
    struct hostdesc.conflict63 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict49 hostdesc.conflict49, *Phostdesc.conflict49;

typedef struct mac_addr.conflict111 mac_addr.conflict111, *Pmac_addr.conflict111;

typedef struct mac_addr.conflict112 mac_addr.conflict112, *Pmac_addr.conflict112;

struct mac_addr.conflict111 {
    u8_l array[6];
};

struct mac_addr.conflict112 {
    u8_l array[6];
};

struct hostdesc.conflict49 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict111 eth_dest_addr;
    struct mac_addr.conflict112 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict30 txdesc_host.conflict30, *Ptxdesc_host.conflict30;

struct txdesc_host.conflict30 {
    u32_l ready;
    struct hostdesc.conflict36 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict31 txdesc_host.conflict31, *Ptxdesc_host.conflict31;

struct txdesc_host.conflict31 {
    u32_l ready;
    struct hostdesc.conflict37 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict47 hostdesc.conflict47, *Phostdesc.conflict47;

typedef struct mac_addr.conflict107 mac_addr.conflict107, *Pmac_addr.conflict107;

typedef struct mac_addr.conflict108 mac_addr.conflict108, *Pmac_addr.conflict108;

struct mac_addr.conflict108 {
    u8_l array[6];
};

struct mac_addr.conflict107 {
    u8_l array[6];
};

struct hostdesc.conflict47 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict107 eth_dest_addr;
    struct mac_addr.conflict108 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict32 txdesc_host.conflict32, *Ptxdesc_host.conflict32;

struct txdesc_host.conflict32 {
    u32_l ready;
    struct hostdesc.conflict38 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict33 txdesc_host.conflict33, *Ptxdesc_host.conflict33;

struct txdesc_host.conflict33 {
    u32_l ready;
    struct hostdesc.conflict39 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict45 hostdesc.conflict45, *Phostdesc.conflict45;

typedef struct mac_addr.conflict103 mac_addr.conflict103, *Pmac_addr.conflict103;

typedef struct mac_addr.conflict104 mac_addr.conflict104, *Pmac_addr.conflict104;

struct mac_addr.conflict104 {
    u8_l array[6];
};

struct mac_addr.conflict103 {
    u8_l array[6];
};

struct hostdesc.conflict45 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict103 eth_dest_addr;
    struct mac_addr.conflict104 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict34 txdesc_host.conflict34, *Ptxdesc_host.conflict34;

typedef struct hostdesc.conflict40 hostdesc.conflict40, *Phostdesc.conflict40;

typedef struct mac_addr.conflict92 mac_addr.conflict92, *Pmac_addr.conflict92;

typedef struct mac_addr.conflict93 mac_addr.conflict93, *Pmac_addr.conflict93;

struct mac_addr.conflict92 {
    u8_l array[6];
};

struct mac_addr.conflict93 {
    u8_l array[6];
};

struct hostdesc.conflict40 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict92 eth_dest_addr;
    struct mac_addr.conflict93 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict34 {
    u32_l ready;
    struct hostdesc.conflict40 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict46 hostdesc.conflict46, *Phostdesc.conflict46;

typedef struct mac_addr.conflict105 mac_addr.conflict105, *Pmac_addr.conflict105;

typedef struct mac_addr.conflict106 mac_addr.conflict106, *Pmac_addr.conflict106;

struct mac_addr.conflict105 {
    u8_l array[6];
};

struct mac_addr.conflict106 {
    u8_l array[6];
};

struct hostdesc.conflict46 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict105 eth_dest_addr;
    struct mac_addr.conflict106 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct hostdesc.conflict43 hostdesc.conflict43, *Phostdesc.conflict43;

typedef struct mac_addr.conflict98 mac_addr.conflict98, *Pmac_addr.conflict98;

typedef struct mac_addr.conflict99 mac_addr.conflict99, *Pmac_addr.conflict99;

struct mac_addr.conflict98 {
    u8_l array[6];
};

struct mac_addr.conflict99 {
    u8_l array[6];
};

struct hostdesc.conflict43 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict98 eth_dest_addr;
    struct mac_addr.conflict99 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct hostdesc.conflict44 hostdesc.conflict44, *Phostdesc.conflict44;

typedef struct mac_addr.conflict100 mac_addr.conflict100, *Pmac_addr.conflict100;

typedef struct mac_addr.conflict101 mac_addr.conflict101, *Pmac_addr.conflict101;

struct mac_addr.conflict101 {
    u8_l array[6];
};

struct mac_addr.conflict100 {
    u8_l array[6];
};

struct hostdesc.conflict44 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict100 eth_dest_addr;
    struct mac_addr.conflict101 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct hostdesc.conflict41 hostdesc.conflict41, *Phostdesc.conflict41;

typedef struct mac_addr.conflict94 mac_addr.conflict94, *Pmac_addr.conflict94;

typedef struct mac_addr.conflict95 mac_addr.conflict95, *Pmac_addr.conflict95;

struct mac_addr.conflict94 {
    u8_l array[6];
};

struct mac_addr.conflict95 {
    u8_l array[6];
};

struct hostdesc.conflict41 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict94 eth_dest_addr;
    struct mac_addr.conflict95 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct hostdesc.conflict42 hostdesc.conflict42, *Phostdesc.conflict42;

typedef struct mac_addr.conflict96 mac_addr.conflict96, *Pmac_addr.conflict96;

typedef struct mac_addr.conflict97 mac_addr.conflict97, *Pmac_addr.conflict97;

struct mac_addr.conflict96 {
    u8_l array[6];
};

struct mac_addr.conflict97 {
    u8_l array[6];
};

struct hostdesc.conflict42 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict96 eth_dest_addr;
    struct mac_addr.conflict97 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict35 txdesc_host.conflict35, *Ptxdesc_host.conflict35;

struct txdesc_host.conflict35 {
    u32_l ready;
    struct hostdesc.conflict41 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict36 txdesc_host.conflict36, *Ptxdesc_host.conflict36;

struct txdesc_host.conflict36 {
    u32_l ready;
    struct hostdesc.conflict46 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict37 txdesc_host.conflict37, *Ptxdesc_host.conflict37;

struct txdesc_host.conflict37 {
    u32_l ready;
    struct hostdesc.conflict47 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict39 txdesc_host.conflict39, *Ptxdesc_host.conflict39;

struct txdesc_host.conflict39 {
    u32_l ready;
    struct hostdesc.conflict49 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct ipc_shared_env_tag.conflict19 ipc_shared_env_tag.conflict19, *Pipc_shared_env_tag.conflict19;

struct ipc_shared_env_tag.conflict19 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict35 txdesc0[4];
};

typedef struct hostdesc.conflict54 hostdesc.conflict54, *Phostdesc.conflict54;

typedef struct mac_addr.conflict121 mac_addr.conflict121, *Pmac_addr.conflict121;

typedef struct mac_addr.conflict122 mac_addr.conflict122, *Pmac_addr.conflict122;

struct mac_addr.conflict122 {
    u8_l array[6];
};

struct mac_addr.conflict121 {
    u8_l array[6];
};

struct hostdesc.conflict54 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict121 eth_dest_addr;
    struct mac_addr.conflict122 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct hostdesc.conflict55 hostdesc.conflict55, *Phostdesc.conflict55;

typedef struct mac_addr.conflict124 mac_addr.conflict124, *Pmac_addr.conflict124;

typedef struct mac_addr.conflict125 mac_addr.conflict125, *Pmac_addr.conflict125;

struct mac_addr.conflict125 {
    u8_l array[6];
};

struct mac_addr.conflict124 {
    u8_l array[6];
};

struct hostdesc.conflict55 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict124 eth_dest_addr;
    struct mac_addr.conflict125 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict51 txdesc_host.conflict51, *Ptxdesc_host.conflict51;

typedef struct hostdesc.conflict65 hostdesc.conflict65, *Phostdesc.conflict65;

typedef struct mac_addr.conflict145 mac_addr.conflict145, *Pmac_addr.conflict145;

typedef struct mac_addr.conflict146 mac_addr.conflict146, *Pmac_addr.conflict146;

struct mac_addr.conflict146 {
    u8_l array[6];
};

struct mac_addr.conflict145 {
    u8_l array[6];
};

struct hostdesc.conflict65 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict145 eth_dest_addr;
    struct mac_addr.conflict146 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict51 {
    u32_l ready;
    struct hostdesc.conflict65 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict53 hostdesc.conflict53, *Phostdesc.conflict53;

typedef struct mac_addr.conflict119 mac_addr.conflict119, *Pmac_addr.conflict119;

typedef struct mac_addr.conflict120 mac_addr.conflict120, *Pmac_addr.conflict120;

struct mac_addr.conflict120 {
    u8_l array[6];
};

struct mac_addr.conflict119 {
    u8_l array[6];
};

struct hostdesc.conflict53 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict119 eth_dest_addr;
    struct mac_addr.conflict120 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict52 txdesc_host.conflict52, *Ptxdesc_host.conflict52;

typedef struct hostdesc.conflict66 hostdesc.conflict66, *Phostdesc.conflict66;

typedef struct mac_addr.conflict147 mac_addr.conflict147, *Pmac_addr.conflict147;

typedef struct mac_addr.conflict148 mac_addr.conflict148, *Pmac_addr.conflict148;

struct mac_addr.conflict147 {
    u8_l array[6];
};

struct mac_addr.conflict148 {
    u8_l array[6];
};

struct hostdesc.conflict66 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict147 eth_dest_addr;
    struct mac_addr.conflict148 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict52 {
    u32_l ready;
    struct hostdesc.conflict66 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict53 txdesc_host.conflict53, *Ptxdesc_host.conflict53;

typedef struct hostdesc.conflict67 hostdesc.conflict67, *Phostdesc.conflict67;

typedef struct mac_addr.conflict149 mac_addr.conflict149, *Pmac_addr.conflict149;

typedef struct mac_addr.conflict150 mac_addr.conflict150, *Pmac_addr.conflict150;

struct mac_addr.conflict150 {
    u8_l array[6];
};

struct mac_addr.conflict149 {
    u8_l array[6];
};

struct hostdesc.conflict67 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict149 eth_dest_addr;
    struct mac_addr.conflict150 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict53 {
    u32_l ready;
    struct hostdesc.conflict67 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict69 hostdesc.conflict69, *Phostdesc.conflict69;

typedef struct mac_addr.conflict154 mac_addr.conflict154, *Pmac_addr.conflict154;

typedef struct mac_addr.conflict155 mac_addr.conflict155, *Pmac_addr.conflict155;

struct mac_addr.conflict154 {
    u8_l array[6];
};

struct mac_addr.conflict155 {
    u8_l array[6];
};

struct hostdesc.conflict69 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict154 eth_dest_addr;
    struct mac_addr.conflict155 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict54 txdesc_host.conflict54, *Ptxdesc_host.conflict54;

typedef struct hostdesc.conflict68 hostdesc.conflict68, *Phostdesc.conflict68;

typedef struct mac_addr.conflict151 mac_addr.conflict151, *Pmac_addr.conflict151;

typedef struct mac_addr.conflict152 mac_addr.conflict152, *Pmac_addr.conflict152;

struct mac_addr.conflict151 {
    u8_l array[6];
};

struct mac_addr.conflict152 {
    u8_l array[6];
};

struct hostdesc.conflict68 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict151 eth_dest_addr;
    struct mac_addr.conflict152 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict54 {
    u32_l ready;
    struct hostdesc.conflict68 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict55 txdesc_host.conflict55, *Ptxdesc_host.conflict55;

struct txdesc_host.conflict55 {
    u32_l ready;
    struct hostdesc.conflict70 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict56 txdesc_host.conflict56, *Ptxdesc_host.conflict56;

struct txdesc_host.conflict56 {
    u32_l ready;
    struct hostdesc.conflict71 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict61 hostdesc.conflict61, *Phostdesc.conflict61;

typedef struct mac_addr.conflict137 mac_addr.conflict137, *Pmac_addr.conflict137;

typedef struct mac_addr.conflict138 mac_addr.conflict138, *Pmac_addr.conflict138;

struct mac_addr.conflict137 {
    u8_l array[6];
};

struct mac_addr.conflict138 {
    u8_l array[6];
};

struct hostdesc.conflict61 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict137 eth_dest_addr;
    struct mac_addr.conflict138 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict57 txdesc_host.conflict57, *Ptxdesc_host.conflict57;

struct txdesc_host.conflict57 {
    u32_l ready;
    struct hostdesc.conflict72 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict58 txdesc_host.conflict58, *Ptxdesc_host.conflict58;

struct txdesc_host.conflict58 {
    u32_l ready;
    struct hostdesc.conflict73 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict18 hostdesc.conflict18, *Phostdesc.conflict18;

typedef struct mac_addr.conflict41 mac_addr.conflict41, *Pmac_addr.conflict41;

typedef struct mac_addr.conflict42 mac_addr.conflict42, *Pmac_addr.conflict42;

struct mac_addr.conflict42 {
    u8_l array[6];
};

struct mac_addr.conflict41 {
    u8_l array[6];
};

struct hostdesc.conflict18 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict41 eth_dest_addr;
    struct mac_addr.conflict42 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct hostdesc.conflict19 hostdesc.conflict19, *Phostdesc.conflict19;

typedef struct mac_addr.conflict43 mac_addr.conflict43, *Pmac_addr.conflict43;

typedef struct mac_addr.conflict44 mac_addr.conflict44, *Pmac_addr.conflict44;

struct mac_addr.conflict44 {
    u8_l array[6];
};

struct mac_addr.conflict43 {
    u8_l array[6];
};

struct hostdesc.conflict19 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict43 eth_dest_addr;
    struct mac_addr.conflict44 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct hostdesc.conflict17 hostdesc.conflict17, *Phostdesc.conflict17;

typedef struct mac_addr.conflict39 mac_addr.conflict39, *Pmac_addr.conflict39;

typedef struct mac_addr.conflict40 mac_addr.conflict40, *Pmac_addr.conflict40;

struct mac_addr.conflict39 {
    u8_l array[6];
};

struct mac_addr.conflict40 {
    u8_l array[6];
};

struct hostdesc.conflict17 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict39 eth_dest_addr;
    struct mac_addr.conflict40 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct hostdesc.conflict14 hostdesc.conflict14, *Phostdesc.conflict14;

typedef struct mac_addr.conflict30 mac_addr.conflict30, *Pmac_addr.conflict30;

typedef struct mac_addr.conflict31 mac_addr.conflict31, *Pmac_addr.conflict31;

struct mac_addr.conflict30 {
    u8_l array[6];
};

struct mac_addr.conflict31 {
    u8_l array[6];
};

struct hostdesc.conflict14 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict30 eth_dest_addr;
    struct mac_addr.conflict31 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct ipc_shared_env_tag.conflict22 ipc_shared_env_tag.conflict22, *Pipc_shared_env_tag.conflict22;

struct ipc_shared_env_tag.conflict22 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict42 txdesc0[4];
};

typedef struct txdesc_host.conflict21 txdesc_host.conflict21, *Ptxdesc_host.conflict21;

typedef struct hostdesc.conflict24 hostdesc.conflict24, *Phostdesc.conflict24;

typedef struct mac_addr.conflict53 mac_addr.conflict53, *Pmac_addr.conflict53;

typedef struct mac_addr.conflict54 mac_addr.conflict54, *Pmac_addr.conflict54;

struct mac_addr.conflict54 {
    u8_l array[6];
};

struct mac_addr.conflict53 {
    u8_l array[6];
};

struct hostdesc.conflict24 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict53 eth_dest_addr;
    struct mac_addr.conflict54 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict21 {
    u32_l ready;
    struct hostdesc.conflict24 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict22 txdesc_host.conflict22, *Ptxdesc_host.conflict22;

typedef struct hostdesc.conflict26 hostdesc.conflict26, *Phostdesc.conflict26;

typedef struct mac_addr.conflict61 mac_addr.conflict61, *Pmac_addr.conflict61;

typedef struct mac_addr.conflict62 mac_addr.conflict62, *Pmac_addr.conflict62;

struct mac_addr.conflict61 {
    u8_l array[6];
};

struct mac_addr.conflict62 {
    u8_l array[6];
};

struct hostdesc.conflict26 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict61 eth_dest_addr;
    struct mac_addr.conflict62 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict22 {
    u32_l ready;
    struct hostdesc.conflict26 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct ipc_shared_env_tag.conflict20 ipc_shared_env_tag.conflict20, *Pipc_shared_env_tag.conflict20;

struct ipc_shared_env_tag.conflict20 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict38 txdesc0[4];
};

typedef struct hostdesc.conflict13 hostdesc.conflict13, *Phostdesc.conflict13;

typedef struct mac_addr.conflict28 mac_addr.conflict28, *Pmac_addr.conflict28;

typedef struct mac_addr.conflict29 mac_addr.conflict29, *Pmac_addr.conflict29;

struct mac_addr.conflict28 {
    u8_l array[6];
};

struct mac_addr.conflict29 {
    u8_l array[6];
};

struct hostdesc.conflict13 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict28 eth_dest_addr;
    struct mac_addr.conflict29 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict23 txdesc_host.conflict23, *Ptxdesc_host.conflict23;

typedef struct hostdesc.conflict27 hostdesc.conflict27, *Phostdesc.conflict27;

typedef struct mac_addr.conflict63 mac_addr.conflict63, *Pmac_addr.conflict63;

typedef struct mac_addr.conflict64 mac_addr.conflict64, *Pmac_addr.conflict64;

struct mac_addr.conflict63 {
    u8_l array[6];
};

struct mac_addr.conflict64 {
    u8_l array[6];
};

struct hostdesc.conflict27 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict63 eth_dest_addr;
    struct mac_addr.conflict64 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict23 {
    u32_l ready;
    struct hostdesc.conflict27 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct ipc_e2a_msg ipc_e2a_msg, *Pipc_e2a_msg;

struct ipc_e2a_msg {
    u16_l id;
    u16_l dummy_dest_id;
    u16_l dummy_src_id;
    u16_l param_len;
    u32_l param[245];
    u32_l pattern;
};

typedef struct txdesc_host.conflict24 txdesc_host.conflict24, *Ptxdesc_host.conflict24;

typedef struct hostdesc.conflict28 hostdesc.conflict28, *Phostdesc.conflict28;

typedef struct mac_addr.conflict65 mac_addr.conflict65, *Pmac_addr.conflict65;

typedef struct mac_addr.conflict66 mac_addr.conflict66, *Pmac_addr.conflict66;

struct mac_addr.conflict65 {
    u8_l array[6];
};

struct mac_addr.conflict66 {
    u8_l array[6];
};

struct hostdesc.conflict28 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict65 eth_dest_addr;
    struct mac_addr.conflict66 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host.conflict24 {
    u32_l ready;
    struct hostdesc.conflict28 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct ipc_shared_env_tag.conflict26 ipc_shared_env_tag.conflict26, *Pipc_shared_env_tag.conflict26;

struct ipc_shared_env_tag.conflict26 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict54 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict25 ipc_shared_env_tag.conflict25, *Pipc_shared_env_tag.conflict25;

struct ipc_shared_env_tag.conflict25 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict53 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict24 ipc_shared_env_tag.conflict24, *Pipc_shared_env_tag.conflict24;

struct ipc_shared_env_tag.conflict24 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict50 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict23 ipc_shared_env_tag.conflict23, *Pipc_shared_env_tag.conflict23;

struct ipc_shared_env_tag.conflict23 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict45 txdesc0[4];
};

typedef struct txdesc_host.conflict29 txdesc_host.conflict29, *Ptxdesc_host.conflict29;

struct txdesc_host.conflict29 {
    u32_l ready;
    struct hostdesc.conflict35 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct ipc_shared_env_tag.conflict29 ipc_shared_env_tag.conflict29, *Pipc_shared_env_tag.conflict29;

struct ipc_shared_env_tag.conflict29 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict57 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict28 ipc_shared_env_tag.conflict28, *Pipc_shared_env_tag.conflict28;

struct ipc_shared_env_tag.conflict28 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict8 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict27 ipc_shared_env_tag.conflict27, *Pipc_shared_env_tag.conflict27;

struct ipc_shared_env_tag.conflict27 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict8 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict11 ipc_shared_env_tag.conflict11, *Pipc_shared_env_tag.conflict11;

struct ipc_shared_env_tag.conflict11 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict21 txdesc0[4];
};

typedef struct hostdesc.conflict25 hostdesc.conflict25, *Phostdesc.conflict25;

typedef struct mac_addr.conflict59 mac_addr.conflict59, *Pmac_addr.conflict59;

typedef struct mac_addr.conflict60 mac_addr.conflict60, *Pmac_addr.conflict60;

struct mac_addr.conflict59 {
    u8_l array[6];
};

struct mac_addr.conflict60 {
    u8_l array[6];
};

struct hostdesc.conflict25 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict59 eth_dest_addr;
    struct mac_addr.conflict60 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict11 txdesc_host.conflict11, *Ptxdesc_host.conflict11;

struct txdesc_host.conflict11 {
    u32_l ready;
    struct hostdesc.conflict13 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict12 txdesc_host.conflict12, *Ptxdesc_host.conflict12;

struct txdesc_host.conflict12 {
    u32_l ready;
    struct hostdesc.conflict14 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict21 hostdesc.conflict21, *Phostdesc.conflict21;

typedef struct mac_addr.conflict47 mac_addr.conflict47, *Pmac_addr.conflict47;

typedef struct mac_addr.conflict48 mac_addr.conflict48, *Pmac_addr.conflict48;

struct mac_addr.conflict47 {
    u8_l array[6];
};

struct mac_addr.conflict48 {
    u8_l array[6];
};

struct hostdesc.conflict21 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict47 eth_dest_addr;
    struct mac_addr.conflict48 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct hostdesc.conflict22 hostdesc.conflict22, *Phostdesc.conflict22;

typedef struct mac_addr.conflict49 mac_addr.conflict49, *Pmac_addr.conflict49;

typedef struct mac_addr.conflict50 mac_addr.conflict50, *Pmac_addr.conflict50;

struct mac_addr.conflict50 {
    u8_l array[6];
};

struct mac_addr.conflict49 {
    u8_l array[6];
};

struct hostdesc.conflict22 {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict49 eth_dest_addr;
    struct mac_addr.conflict50 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict18 txdesc_host.conflict18, *Ptxdesc_host.conflict18;

struct txdesc_host.conflict18 {
    u32_l ready;
    struct hostdesc.conflict21 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct ipc_shared_env_tag.conflict15 ipc_shared_env_tag.conflict15, *Pipc_shared_env_tag.conflict15;

struct ipc_shared_env_tag.conflict15 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict27 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict14 ipc_shared_env_tag.conflict14, *Pipc_shared_env_tag.conflict14;

struct ipc_shared_env_tag.conflict14 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict24 txdesc0[4];
};

typedef struct txdesc_host.conflict15 txdesc_host.conflict15, *Ptxdesc_host.conflict15;

struct txdesc_host.conflict15 {
    u32_l ready;
    struct hostdesc.conflict18 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct ipc_shared_env_tag.conflict13 ipc_shared_env_tag.conflict13, *Pipc_shared_env_tag.conflict13;

struct ipc_shared_env_tag.conflict13 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict8 txdesc0[4];
};

typedef struct txdesc_host.conflict16 txdesc_host.conflict16, *Ptxdesc_host.conflict16;

struct txdesc_host.conflict16 {
    u32_l ready;
    struct hostdesc.conflict19 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct ipc_shared_env_tag.conflict12 ipc_shared_env_tag.conflict12, *Pipc_shared_env_tag.conflict12;

struct ipc_shared_env_tag.conflict12 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict8 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict18 ipc_shared_env_tag.conflict18, *Pipc_shared_env_tag.conflict18;

struct ipc_shared_env_tag.conflict18 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict34 txdesc0[4];
};

typedef struct txdesc_host.conflict19 txdesc_host.conflict19, *Ptxdesc_host.conflict19;

struct txdesc_host.conflict19 {
    u32_l ready;
    struct hostdesc.conflict22 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct ipc_shared_env_tag.conflict17 ipc_shared_env_tag.conflict17, *Pipc_shared_env_tag.conflict17;

struct ipc_shared_env_tag.conflict17 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict31 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict16 ipc_shared_env_tag.conflict16, *Pipc_shared_env_tag.conflict16;

struct ipc_shared_env_tag.conflict16 {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host.conflict28 txdesc0[4];
};

typedef struct txdesc_host.conflict txdesc_host.conflict, *Ptxdesc_host.conflict;

struct txdesc_host.conflict {
    u32_l ready;
    struct hostdesc.conflict1 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct ipc_shared_env_tag ipc_shared_env_tag, *Pipc_shared_env_tag;

typedef struct txdesc_host txdesc_host, *Ptxdesc_host;

typedef struct hostdesc hostdesc, *Phostdesc;

struct hostdesc {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr eth_dest_addr;
    struct mac_addr eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host {
    uint32_t ready;
    struct hostdesc host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

struct ipc_shared_env_tag {
    struct ipc_a2e_msg msg_a2e_buf;
    uint32_t pattern_addr;
    struct txdesc_host txdesc0[4];
};

typedef struct hostdesc.conflict hostdesc.conflict, *Phostdesc.conflict;

typedef struct mac_addr.conflict1 mac_addr.conflict1, *Pmac_addr.conflict1;

typedef struct mac_addr.conflict2 mac_addr.conflict2, *Pmac_addr.conflict2;

struct mac_addr.conflict2 {
    u8_l array[6];
};

struct mac_addr.conflict1 {
    u8_l array[6];
};

struct hostdesc.conflict {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr.conflict1 eth_dest_addr;
    struct mac_addr.conflict2 eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

typedef struct anon_struct.conflict414 anon_struct.conflict414, *Panon_struct.conflict414;

struct anon_struct.conflict414 {
    uint frac0:32;
    uint frac1:20;
    uint exp:11;
    uint sign:1;
};

typedef union _FP_UNION_D _FP_UNION_D, *P_FP_UNION_D;

typedef double DFtype;

union _FP_UNION_D {
    DFtype flt;
    struct anon_struct.conflict414 bits;
};

typedef struct tcal_tag tcal_tag, *Ptcal_tag;

struct tcal_tag {
    int16_t prev_temperature;
    undefined field_0x2;
    undefined field_0x3;
    uint32_t last_action_time[4];
    uint32_t last_action_temperature[4];
    int32_t last_action_out[4];
    _Bool enabled;
    undefined field_0x35;
    undefined field_0x36;
    undefined field_0x37;
};

typedef union _reg_t _reg_t, *P_reg_t;

union _reg_t {
    uint8_t byte[4];
    uint32_t word;
};

typedef struct _romfs_file_buf _romfs_file_buf, *P_romfs_file_buf;

struct _romfs_file_buf {
    char * buf;
    uint32_t bufsize;
};

typedef struct _romfs_file_buf romfs_filebuf_t;

typedef struct BL_ENDECRYPT_t BL_ENDECRYPT_t, *PBL_ENDECRYPT_t;

struct BL_ENDECRYPT_t {
    UINT8 enDeAction;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    UINT8 * pData;
};

typedef struct sta_info_tag sta_info_tag, *Psta_info_tag;

typedef enum sta_ps_traffic {
    PS_TRAFFIC=3,
    PS_TRAFFIC_HOST=1,
    PS_TRAFFIC_INT=2,
    UAPSD_TRAFFIC=12,
    UAPSD_TRAFFIC_HOST=4,
    UAPSD_TRAFFIC_INT=8
} sta_ps_traffic;

typedef int sta_ps_sp_t;

typedef struct sta_mgmt_sec_info sta_mgmt_sec_info, *Psta_mgmt_sec_info;

typedef struct mac_sta_info mac_sta_info, *Pmac_sta_info;

typedef struct sta_pol_tbl_cntl sta_pol_tbl_cntl, *Psta_pol_tbl_cntl;

typedef struct sta_mgmt_ba_info sta_mgmt_ba_info, *Psta_mgmt_ba_info;

typedef struct co_list co_list, *Pco_list;

typedef struct key_info_tag key_info_tag, *Pkey_info_tag;

typedef struct mac_rateset mac_rateset, *Pmac_rateset;

typedef struct mac_htcapability mac_htcapability, *Pmac_htcapability;

typedef struct mac_vhtcapability mac_vhtcapability, *Pmac_vhtcapability;

typedef struct txl_buffer_control txl_buffer_control, *Ptxl_buffer_control;

typedef struct rc_sta_stats rc_sta_stats, *Prc_sta_stats;

typedef ulonglong __uint64_t;

typedef __uint64_t uint64_t;


// WARNING! conflicting data type names: /DWARF/mac.h/key_info_tag/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u

typedef union anon_union_for_field_0 anon_union_for_field_0, *Panon_union_for_field_0;

typedef struct rc_rate_stats rc_rate_stats, *Prc_rate_stats;

typedef struct step step, *Pstep;

typedef union anon_union_for_rate_map anon_union_for_rate_map, *Panon_union_for_rate_map;

typedef struct tx_policy_tbl tx_policy_tbl, *Ptx_policy_tbl;

typedef struct tx_compressed_policy_tbl tx_compressed_policy_tbl, *Ptx_compressed_policy_tbl;

struct sta_mgmt_ba_info {
    uint32_t last_tx_time;
    uint32_t last_ba_add_time;
    uint8_t bam_idx_rx;
    uint8_t bam_idx_tx;
    int8_t credit_oft;
    undefined field_0xb;
};

union anon_union_for_rate_map {
    uint8_t ht[4];
};

struct step {
    uint32_t tp;
    uint16_t idx;
    undefined field_0x6;
    undefined field_0x7;
};

struct rc_rate_stats {
    uint16_t attempts;
    uint16_t success;
    uint16_t probability;
    uint16_t rate_config;
    uint8_t sample_skipped;
    _Bool old_prob_available;
    uint8_t n_retry;
    _Bool rate_allowed;
};

struct rc_sta_stats {
    uint32_t last_rc_time;
    struct rc_rate_stats rate_stats[10];
    struct step retry[4];
    struct step max_tp_2_trial;
    uint16_t ampdu_len;
    uint16_t ampdu_packets;
    uint32_t avg_ampdu_len;
    uint8_t sample_wait;
    uint8_t sample_slow;
    uint8_t trial_status;
    uint8_t info;
    uint8_t sw_retry_step;
    uint8_t format_mod;
    union anon_union_for_rate_map rate_map;
    uint16_t rate_map_l;
    uint8_t mcs_max;
    uint8_t r_idx_min;
    uint8_t r_idx_max;
    uint8_t bw_max;
    uint8_t no_ss;
    uint8_t short_gi;
    uint8_t p_type;
    undefined field_0xbf;
    uint16_t no_samples;
    uint16_t max_amsdu_len;
    uint16_t curr_amsdu_len;
    uint16_t fixed_rate_cfg;
};

struct sta_pol_tbl_cntl {
    struct txl_buffer_control * buf_ctrl;
    struct rc_sta_stats * sta_stats;
    uint32_t prot_cfg;
    uint16_t ppdu_tx_cfg;
    uint8_t upd_field;
    undefined field_0xf;
};

struct mac_rateset {
    uint8_t length;
    uint8_t array[12];
};

struct key_info_tag {
    uint64_t rx_pn[9];
    uint64_t tx_pn;
    union anon_union_for_u u;
    uint8_t cipher;
    uint8_t key_idx;
    uint8_t hw_key_idx;
    _Bool valid;
    undefined field_0x64;
    undefined field_0x65;
    undefined field_0x66;
    undefined field_0x67;
};

struct sta_mgmt_sec_info {
    struct key_info_tag key_info;
    struct key_info_tag * pairwise_key;
    struct key_info_tag * * cur_key;
};

struct co_list {
    struct co_list_hdr * first;
    struct co_list_hdr * last;
};

struct mac_vhtcapability {
    uint32_t vht_capa_info;
    uint16_t rx_mcs_map;
    uint16_t rx_highest;
    uint16_t tx_mcs_map;
    uint16_t tx_highest;
};

struct mac_htcapability {
    uint16_t ht_capa_info;
    uint8_t a_mpdu_param;
    uint8_t mcs_rate[16];
    undefined field_0x13;
    uint16_t ht_extended_capa;
    undefined field_0x16;
    undefined field_0x17;
    uint32_t tx_beamforming_capa;
    uint8_t asel_capa;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
};

struct mac_sta_info {
    struct mac_rateset rate_set;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    struct mac_htcapability ht_cap;
    struct mac_vhtcapability vht_cap;
    uint32_t capa_flags;
    uint8_t phy_bw_max;
    uint8_t bw_cur;
    uint8_t uapsd_queues;
    uint8_t max_sp_len;
    uint8_t stbc_nss;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
};

struct sta_info_tag {
    struct co_list_hdr list_hdr;
    uint32_t bcn_int;
    uint32_t ampdu_size_max_vht;
    uint16_t ampdu_size_max_ht;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t paid_gid;
    uint8_t ampdu_spacing_min;
    undefined field_0x15;
    uint16_t drift;
    uint16_t aid;
    uint8_t inst_nbr;
    uint8_t staid;
    uint8_t ps_state;
    _Bool valid;
    struct mac_addr mac_addr;
    int8_t rssi;
    undefined field_0x25;
    undefined field_0x26;
    undefined field_0x27;
    uint32_t tsflo;
    uint32_t tsfhi;
    uint8_t data_rate;
    uint8_t ctrl_port_state;
    enum sta_ps_traffic traffic_avail;
    undefined field_0x33;
    sta_ps_sp_t ps_service_period;
    uint16_t ctrl_port_ethertype;
    undefined field_0x3a;
    undefined field_0x3b;
    undefined field_0x3c;
    undefined field_0x3d;
    undefined field_0x3e;
    undefined field_0x3f;
    struct sta_mgmt_sec_info sta_sec_info;
    struct mac_sta_info info;
    uint16_t seq_nbr[9];
    undefined field_0x10a;
    undefined field_0x10b;
    struct sta_pol_tbl_cntl pol_tbl;
    struct sta_mgmt_ba_info ba_info[9];
    uint16_t rx_nqos_last_seqcntl;
    uint16_t rx_qos_last_seqcntl[9];
    struct co_list tx_desc_post;
    void * suppData;
    uint32_t time_last_seen;
    undefined field_0x1ac;
    undefined field_0x1ad;
    undefined field_0x1ae;
    undefined field_0x1af;
};

struct tx_policy_tbl {
    uint32_t upatterntx;
    uint32_t phycntrlinfo1;
    uint32_t phycntrlinfo2;
    uint32_t maccntrlinfo1;
    uint32_t maccntrlinfo2;
    uint32_t ratecntrlinfo[4];
    uint32_t powercntrlinfo[4];
};

struct tx_compressed_policy_tbl {
    uint32_t upatterntx;
    uint32_t sec_user_control;
};

union anon_union_for_field_0 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

struct txl_buffer_control {
    union anon_union_for_field_0 field_0;
    uint32_t mac_control_info;
    uint32_t phy_control_info;
};

typedef struct sta_info_env_tag sta_info_env_tag, *Psta_info_env_tag;

struct sta_info_env_tag {
    struct co_list free_sta_list;
};

typedef enum sta_mgmt_pol_upd {
    STA_MGMT_POL_UPD_BW=3,
    STA_MGMT_POL_UPD_MAX=5,
    STA_MGMT_POL_UPD_PPDU_TX=2,
    STA_MGMT_POL_UPD_PROT=1,
    STA_MGMT_POL_UPD_RATE=0,
    STA_MGMT_POL_UPD_TX_POWER=4
} sta_mgmt_pol_upd;

typedef enum sta_ps_sp {
    ANY_SERVICE_PERIOD_INT=3,
    BCN_SERVICE_PERIOD=8,
    NO_SERVICE_PERIOD=0,
    PS_SERVICE_PERIOD=1,
    UAPSD_SERVICE_PERIOD=6,
    UAPSD_SERVICE_PERIOD_HOST=4,
    UAPSD_SERVICE_PERIOD_INT=2
} sta_ps_sp;

typedef struct machw_mib_tag machw_mib_tag, *Pmachw_mib_tag;

struct machw_mib_tag {
    uint32_t dot11_wep_excluded_count;
    uint32_t dot11_fcs_error_count;
    uint32_t nx_rx_phy_error_count;
    uint32_t nx_rd_fifo_overflow_count;
    uint32_t nx_tx_underun_count;
    uint32_t reserved_1[7];
    uint32_t nx_qos_utransmitted_mpdu_count[8];
    uint32_t nx_qos_gtransmitted_mpdu_count[8];
    uint32_t dot11_qos_failed_count[8];
    uint32_t dot11_qos_retry_count[8];
    uint32_t dot11_qos_rts_success_count[8];
    uint32_t dot11_qos_rts_failure_count[8];
    uint32_t nx_qos_ack_failure_count[8];
    uint32_t nx_qos_ureceived_mpdu_count[8];
    uint32_t nx_qos_greceived_mpdu_count[8];
    uint32_t nx_qos_ureceived_other_mpdu[8];
    uint32_t dot11_qos_retries_received_count[8];
    uint32_t nx_utransmitted_amsdu_count[8];
    uint32_t nx_gtransmitted_amsdu_count[8];
    uint32_t dot11_failed_amsdu_count[8];
    uint32_t dot11_retry_amsdu_count[8];
    uint32_t dot11_transmitted_octets_in_amsdu[8];
    uint32_t dot11_amsdu_ack_failure_count[8];
    uint32_t nx_ureceived_amsdu_count[8];
    uint32_t nx_greceived_amsdu_count[8];
    uint32_t nx_ureceived_other_amsdu[8];
    uint32_t dot11_received_octets_in_amsdu_count[8];
    uint32_t reserved_2[24];
    uint32_t dot11_transmitted_ampdu_count;
    uint32_t dot11_transmitted_mpdus_in_ampdu_count;
    uint32_t dot11_transmitted_octets_in_ampdu_count;
    uint32_t wnlu_ampdu_received_count;
    uint32_t nx_gampdu_received_count;
    uint32_t nx_other_ampdu_received_count;
    uint32_t dot11_mpdu_in_received_ampdu_count;
    uint32_t dot11_received_octets_in_ampdu_count;
    uint32_t dot11_ampdu_delimiter_crc_error_count;
    uint32_t dot11_implicit_bar_failure_count;
    uint32_t dot11_explicit_bar_failure_count;
    uint32_t reserved_3[5];
    uint32_t dot11_20mhz_frame_transmitted_count;
    uint32_t dot11_40mhz_frame_transmitted_count;
    uint32_t dot11_20mhz_frame_received_count;
    uint32_t dot11_40mhz_frame_received_count;
    uint32_t nx_failed_40mhz_txop;
    uint32_t nx_successful_txops;
    uint32_t reserved_4[4];
    uint32_t dot11_dualcts_success_count;
    uint32_t dot11_stbc_cts_success_count;
    uint32_t dot11_stbc_cts_failure_count;
    uint32_t dot11_non_stbc_cts_success_count;
    uint32_t dot11_non_stbc_cts_failure_count;
};

typedef struct scan_probe_req_ie_tag scan_probe_req_ie_tag, *Pscan_probe_req_ie_tag;

typedef struct tx_pbd tx_pbd, *Ptx_pbd;

struct tx_pbd {
    uint32_t upatterntx;
    uint32_t next;
    uint32_t datastartptr;
    uint32_t dataendptr;
    uint32_t bufctrlinfo;
};

struct scan_probe_req_ie_tag {
    struct dma_desc dma_desc;
    struct tx_pbd pbd;
    uint32_t buf[50];
};

typedef struct scan_env_tag scan_env_tag, *Pscan_env_tag;

typedef struct scan_start_req scan_start_req, *Pscan_start_req;

struct scan_start_req {
    struct scan_chan_tag chan[42];
    struct mac_ssid ssid[2];
    struct mac_addr bssid;
    undefined field_0x146;
    undefined field_0x147;
    uint32_t add_ies;
    uint16_t add_ie_len;
    uint8_t vif_idx;
    uint8_t chan_cnt;
    uint8_t ssid_cnt;
    _Bool no_cck;
    undefined field_0x152;
    undefined field_0x153;
};

struct scan_env_tag {
    struct hal_dma_desc_tag dma_desc;
    struct scan_start_req * param;
    uint32_t ds_ie;
    ke_task_id_t req_id;
    uint8_t chan_idx;
    _Bool abort;
};

typedef struct SEC_Eng_SHA_Link_Config_Type SEC_Eng_SHA_Link_Config_Type, *PSEC_Eng_SHA_Link_Config_Type;

struct SEC_Eng_SHA_Link_Config_Type {
    uint32_t shaMode:3;
    uint32_t shaHashSel:1;
    uint32_t shaIntClr:1;
    uint32_t shaIntSet:1;
    uint32_t shaMsgLen:16;
    uint32_t shaSrcAddr;
    uint32_t result[8];
};

typedef struct SEC_Eng_SHA256_Ctx SEC_Eng_SHA256_Ctx, *PSEC_Eng_SHA256_Ctx;

struct SEC_Eng_SHA256_Ctx {
    uint32_t total[2];
    uint32_t * shaBuf;
    uint32_t * shaPadding;
    uint8_t shaFeed;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
};

typedef struct SEC_Eng_AES_Link_Config_Type.conflict SEC_Eng_AES_Link_Config_Type.conflict, *PSEC_Eng_AES_Link_Config_Type.conflict;

struct SEC_Eng_AES_Link_Config_Type.conflict {
    uint32_t aesMode:2;
    uint32_t aesDecEn:1;
    uint32_t aesDecKeySel:1;
    uint32_t aesHwKeyEn:1;
    uint32_t aesIntClr:1;
    uint32_t aesIntSet:1;
    uint32_t aesBlockMode:2;
    uint32_t aesIVSel:1;
    uint32_t aesMsgLen:16;
    uint32_t aesSrcAddr;
    uint32_t aesDstAddr;
    uint32_t aesIV0;
    uint32_t aesIV1;
    uint32_t aesIV2;
    uint32_t aesIV3;
    uint32_t aesKey0;
    uint32_t aesKey1;
    uint32_t aesKey2;
    uint32_t aesKey3;
    uint32_t aesKey4;
    uint32_t aesKey5;
    uint32_t aesKey6;
    uint32_t aesKey7;
};

typedef struct SEC_Eng_AES_Link_Config_Type.conflict1 SEC_Eng_AES_Link_Config_Type.conflict1, *PSEC_Eng_AES_Link_Config_Type.conflict1;

struct SEC_Eng_AES_Link_Config_Type.conflict1 {
    uint32_t aesMode:2;
    uint32_t aesDecEn:1;
    uint32_t aesDecKeySel:1;
    uint32_t aesHwKeyEn:1;
    uint32_t aesIntClr:1;
    uint32_t aesIntSet:1;
    uint32_t aesBlockMode:2;
    uint32_t aesIVSel:1;
    uint32_t aesMsgLen:16;
    uint32_t aesSrcAddr;
    uint32_t aesDstAddr;
    uint32_t aesIV0;
    uint32_t aesIV1;
    uint32_t aesIV2;
    uint32_t aesIV3;
    uint32_t aesKey0;
    uint32_t aesKey1;
    uint32_t aesKey2;
    uint32_t aesKey3;
    uint32_t aesKey4;
    uint32_t aesKey5;
    uint32_t aesKey6;
    uint32_t aesKey7;
};

typedef struct SEC_Eng_AES_Ctx SEC_Eng_AES_Ctx, *PSEC_Eng_AES_Ctx;

typedef enum SEC_ENG_AES_Type {
    SEC_ENG_AES_CBC=2,
    SEC_ENG_AES_CTR=1,
    SEC_ENG_AES_ECB=0
} SEC_ENG_AES_Type;

struct SEC_Eng_AES_Ctx {
    uint8_t aesFeed;
    enum SEC_ENG_AES_Type mode;
};

typedef enum SEC_ENG_AES_EnDec_Type {
    SEC_ENG_AES_DECRYPTION=1,
    SEC_ENG_AES_ENCRYPTION=0
} SEC_ENG_AES_EnDec_Type;

typedef struct SEC_Eng_SHA_Link_Config_Type.conflict2 SEC_Eng_SHA_Link_Config_Type.conflict2, *PSEC_Eng_SHA_Link_Config_Type.conflict2;

struct SEC_Eng_SHA_Link_Config_Type.conflict2 {
    uint32_t shaMode:3;
    uint32_t shaHashSel:1;
    uint32_t shaIntClr:1;
    uint32_t shaIntSet:1;
    uint32_t shaMsgLen:16;
    uint32_t shaSrcAddr;
    uint32_t result[8];
};

typedef struct SEC_Eng_SHA_Link_Config_Type.conflict1 SEC_Eng_SHA_Link_Config_Type.conflict1, *PSEC_Eng_SHA_Link_Config_Type.conflict1;

struct SEC_Eng_SHA_Link_Config_Type.conflict1 {
    uint32_t shaMode:3;
    uint32_t shaHashSel:1;
    uint32_t shaIntClr:1;
    uint32_t shaIntSet:1;
    uint32_t shaMsgLen:16;
    uint32_t shaSrcAddr;
    uint32_t result[8];
};

typedef enum SEC_ENG_PKA_REG_SIZE_Type {
    SEC_ENG_PKA_REG_SIZE_128=6,
    SEC_ENG_PKA_REG_SIZE_16=2,
    SEC_ENG_PKA_REG_SIZE_192=7,
    SEC_ENG_PKA_REG_SIZE_256=8,
    SEC_ENG_PKA_REG_SIZE_32=3,
    SEC_ENG_PKA_REG_SIZE_384=9,
    SEC_ENG_PKA_REG_SIZE_512=10,
    SEC_ENG_PKA_REG_SIZE_64=4,
    SEC_ENG_PKA_REG_SIZE_8=1,
    SEC_ENG_PKA_REG_SIZE_96=5
} SEC_ENG_PKA_REG_SIZE_Type;

typedef enum SEC_ENG_AES_ID_Type {
    SEC_ENG_AES_ID0=0
} SEC_ENG_AES_ID_Type;

typedef struct SEC_Eng_SHA256_Link_Ctx SEC_Eng_SHA256_Link_Ctx, *PSEC_Eng_SHA256_Link_Ctx;

struct SEC_Eng_SHA256_Link_Ctx {
    uint32_t total[2];
    uint32_t * shaBuf;
    uint32_t * shaPadding;
    uint32_t linkAddr;
};

typedef enum SEC_ENG_AES_Key_Type {
    SEC_ENG_AES_DOUBLE_KEY_128BITS=3,
    SEC_ENG_AES_KEY_128BITS=0,
    SEC_ENG_AES_KEY_192BITS=2,
    SEC_ENG_AES_KEY_256BITS=1
} SEC_ENG_AES_Key_Type;

typedef struct SEC_Eng_SHA_Link_Config_Type.conflict SEC_Eng_SHA_Link_Config_Type.conflict, *PSEC_Eng_SHA_Link_Config_Type.conflict;

struct SEC_Eng_SHA_Link_Config_Type.conflict {
    uint32_t shaMode:3;
    uint32_t shaHashSel:1;
    uint32_t shaIntClr:1;
    uint32_t shaIntSet:1;
    uint32_t shaMsgLen:16;
    uint32_t shaSrcAddr;
    uint32_t result[8];
};

typedef enum SEC_ENG_SHA_Type {
    SEC_ENG_SHA1=2,
    SEC_ENG_SHA1_RSVD=3,
    SEC_ENG_SHA224=1,
    SEC_ENG_SHA256=0
} SEC_ENG_SHA_Type;

typedef enum SEC_ENG_PKA_OP_Type {
    SEC_ENG_PKA_OP_CFLIRI_BUFFER=54,
    SEC_ENG_PKA_OP_CFLIR_BUFFER=56,
    SEC_ENG_PKA_OP_CLIR=53,
    SEC_ENG_PKA_OP_CTLIRI_PLD=55,
    SEC_ENG_PKA_OP_CTLIR_PLD=57,
    SEC_ENG_PKA_OP_LADD=24,
    SEC_ENG_PKA_OP_LCMP=25,
    SEC_ENG_PKA_OP_LDIV=20,
    SEC_ENG_PKA_OP_LDIV2N=18,
    SEC_ENG_PKA_OP_LMUL=22,
    SEC_ENG_PKA_OP_LMUL2N=19,
    SEC_ENG_PKA_OP_LSQR=21,
    SEC_ENG_PKA_OP_LSUB=23,
    SEC_ENG_PKA_OP_MADD=40,
    SEC_ENG_PKA_OP_MDIV2=33,
    SEC_ENG_PKA_OP_MEXP=35,
    SEC_ENG_PKA_OP_MINV=34,
    SEC_ENG_PKA_OP_MMUL=37,
    SEC_ENG_PKA_OP_MOD2N=17,
    SEC_ENG_PKA_OP_MOVDAT=50,
    SEC_ENG_PKA_OP_MREM=38,
    SEC_ENG_PKA_OP_MSQR=36,
    SEC_ENG_PKA_OP_MSUB=39,
    SEC_ENG_PKA_OP_NLIR=51,
    SEC_ENG_PKA_OP_PPSEL=0,
    SEC_ENG_PKA_OP_RESIZE=49,
    SEC_ENG_PKA_OP_SLIR=52
} SEC_ENG_PKA_OP_Type;

typedef enum SEC_ENG_AES_Key_Src_Type {
    SEC_ENG_AES_KEY_HW=1,
    SEC_ENG_AES_KEY_SW=0
} SEC_ENG_AES_Key_Src_Type;

typedef enum SEC_ENG_SHA_ID_Type {
    SEC_ENG_SHA_ID0=0
} SEC_ENG_SHA_ID_Type;

typedef enum SEC_ENG_AES_Counter_Type {
    SEC_ENG_AES_COUNTER_BYTE_1=1,
    SEC_ENG_AES_COUNTER_BYTE_2=2,
    SEC_ENG_AES_COUNTER_BYTE_3=3,
    SEC_ENG_AES_COUNTER_BYTE_4=0
} SEC_ENG_AES_Counter_Type;

typedef struct SEC_Eng_AES_Link_Config_Type SEC_Eng_AES_Link_Config_Type, *PSEC_Eng_AES_Link_Config_Type;

struct SEC_Eng_AES_Link_Config_Type {
    uint32_t aesMode:2;
    uint32_t aesDecEn:1;
    uint32_t aesDecKeySel:1;
    uint32_t aesHwKeyEn:1;
    uint32_t aesIntClr:1;
    uint32_t aesIntSet:1;
    uint32_t aesBlockMode:2;
    uint32_t aesIVSel:1;
    uint32_t aesMsgLen:16;
    uint32_t aesSrcAddr;
    uint32_t aesDstAddr;
    uint32_t aesIV0;
    uint32_t aesIV1;
    uint32_t aesIV2;
    uint32_t aesIV3;
    uint32_t aesKey0;
    uint32_t aesKey1;
    uint32_t aesKey2;
    uint32_t aesKey3;
    uint32_t aesKey4;
    uint32_t aesKey5;
    uint32_t aesKey6;
    uint32_t aesKey7;
};

typedef enum SEC_ENG_INT_Type {
    SEC_ENG_INT_AES=1,
    SEC_ENG_INT_ALL=6,
    SEC_ENG_INT_CDET=4,
    SEC_ENG_INT_GMAC=5,
    SEC_ENG_INT_PKA=3,
    SEC_ENG_INT_SHA=2,
    SEC_ENG_INT_TRNG=0
} SEC_ENG_INT_Type;

typedef struct ip4_addr ip4_addr, *Pip4_addr;

typedef struct ip4_addr ip4_addr_t;

typedef ip4_addr_t ip_addr_t;

typedef uint32_t u32_t;

struct ip4_addr {
    u32_t addr;
};

typedef enum lwip_ip_addr_type {
    IPADDR_TYPE_ANY=46,
    IPADDR_TYPE_V4=0,
    IPADDR_TYPE_V6=6
} lwip_ip_addr_type;

typedef struct pka0_bit_shift_op_cfg pka0_bit_shift_op_cfg, *Ppka0_bit_shift_op_cfg;

typedef union anon_union_for_value anon_union_for_value, *Panon_union_for_value;

typedef struct anon_struct.conflict411 anon_struct.conflict411, *Panon_struct.conflict411;

struct anon_struct.conflict411 {
    uint32_t bit_shift:15;
    uint32_t reserved_24_31:17;
};

union anon_union_for_value {
    struct anon_struct.conflict411 BF;
    uint32_t WORD;
};

struct pka0_bit_shift_op_cfg {
    union anon_union_for_value value;
};

typedef struct pka0_common_op_first_cfg pka0_common_op_first_cfg, *Ppka0_common_op_first_cfg;


// WARNING! conflicting data type names: /DWARF/bl602_sec_eng.c/pka0_common_op_first_cfg/anon_union_for_value - /DWARF/bl602_sec_eng.c/pka0_bit_shift_op_cfg/anon_union_for_value

struct pka0_common_op_first_cfg {
    union anon_union_for_value value;
};

typedef struct pka0_pld_cfg pka0_pld_cfg, *Ppka0_pld_cfg;


// WARNING! conflicting data type names: /DWARF/bl602_sec_eng.c/pka0_pld_cfg/anon_union_for_value - /DWARF/bl602_sec_eng.c/pka0_bit_shift_op_cfg/anon_union_for_value

struct pka0_pld_cfg {
    union anon_union_for_value value;
};

typedef struct pka0_common_op_snd_cfg_S1_only pka0_common_op_snd_cfg_S1_only, *Ppka0_common_op_snd_cfg_S1_only;


// WARNING! conflicting data type names: /DWARF/bl602_sec_eng.c/pka0_common_op_snd_cfg_S1_only/anon_union_for_value - /DWARF/bl602_sec_eng.c/pka0_bit_shift_op_cfg/anon_union_for_value

struct pka0_common_op_snd_cfg_S1_only {
    union anon_union_for_value value;
};

typedef struct anon_struct.conflict408 anon_struct.conflict408, *Panon_struct.conflict408;

struct anon_struct.conflict408 {
    uint32_t reserved_0_11:12;
    uint32_t s1_reg_idx:8;
    uint32_t s1_reg_type:4;
    uint32_t reserved_24_31:8;
};

typedef struct anon_struct.conflict409 anon_struct.conflict409, *Panon_struct.conflict409;

struct anon_struct.conflict409 {
    uint32_t s2_reg_idx:8;
    uint32_t s2_reg_type:4;
    uint32_t reserved_12_31:20;
};

typedef struct anon_struct.conflict405 anon_struct.conflict405, *Panon_struct.conflict405;

struct anon_struct.conflict405 {
    uint32_t size:12;
    uint32_t d_reg_index:8;
    uint32_t d_reg_type:4;
    uint32_t op:7;
    uint32_t last_op:1;
};

typedef struct anon_struct.conflict406 anon_struct.conflict406, *Panon_struct.conflict406;

struct anon_struct.conflict406 {
    uint32_t rsvd:12;
    uint32_t d_reg_index:8;
    uint32_t d_reg_type:4;
    uint32_t op:7;
    uint32_t last_op:1;
};

typedef struct anon_struct.conflict407 anon_struct.conflict407, *Panon_struct.conflict407;

struct anon_struct.conflict407 {
    uint32_t s0_reg_idx:8;
    uint32_t s0_reg_type:4;
    uint32_t d_reg_idx:8;
    uint32_t d_reg_type:4;
    uint32_t op:7;
    uint32_t last_op:1;
};

typedef struct anon_struct.conflict410 anon_struct.conflict410, *Panon_struct.conflict410;

struct anon_struct.conflict410 {
    uint32_t s2_reg_idx:8;
    uint32_t s2_reg_type:4;
    uint32_t s1_reg_idx:8;
    uint32_t s1_reg_type:4;
    uint32_t reserved_24_31:8;
};

typedef struct pka0_pldi_cfg pka0_pldi_cfg, *Ppka0_pldi_cfg;


// WARNING! conflicting data type names: /DWARF/bl602_sec_eng.c/pka0_pldi_cfg/anon_union_for_value - /DWARF/bl602_sec_eng.c/pka0_bit_shift_op_cfg/anon_union_for_value

struct pka0_pldi_cfg {
    union anon_union_for_value value;
};

typedef struct pka0_common_op_snd_cfg_S2_only pka0_common_op_snd_cfg_S2_only, *Ppka0_common_op_snd_cfg_S2_only;


// WARNING! conflicting data type names: /DWARF/bl602_sec_eng.c/pka0_common_op_snd_cfg_S2_only/anon_union_for_value - /DWARF/bl602_sec_eng.c/pka0_bit_shift_op_cfg/anon_union_for_value

struct pka0_common_op_snd_cfg_S2_only {
    union anon_union_for_value value;
};

typedef struct pka0_common_op_snd_cfg_S1_S2 pka0_common_op_snd_cfg_S1_S2, *Ppka0_common_op_snd_cfg_S1_S2;


// WARNING! conflicting data type names: /DWARF/bl602_sec_eng.c/pka0_common_op_snd_cfg_S1_S2/anon_union_for_value - /DWARF/bl602_sec_eng.c/pka0_bit_shift_op_cfg/anon_union_for_value

struct pka0_common_op_snd_cfg_S1_S2 {
    union anon_union_for_value value;
};

typedef struct _ef_env _ef_env, *P_ef_env;

typedef struct _ef_env ef_env;

struct _ef_env {
    char * key;
    void * value;
    size_t value_len;
};

typedef enum env_status {
    ENV_DELETED=4,
    ENV_ERR_HDR=5,
    ENV_PRE_DELETE=3,
    ENV_PRE_WRITE=1,
    ENV_STATUS_NUM=6,
    ENV_UNUSED=0,
    ENV_WRITE=2
} env_status;

typedef enum env_status env_status_t;

typedef enum EfErrCode {
    EF_ENV_ARG_ERR=8,
    EF_ENV_FULL=6,
    EF_ENV_INIT_FAILED=7,
    EF_ENV_NAME_ERR=4,
    EF_ENV_NAME_EXIST=5,
    EF_ERASE_ERR=1,
    EF_NO_ERR=0,
    EF_READ_ERR=2,
    EF_WRITE_ERR=3
} EfErrCode;

typedef struct anon_struct.conflict368 anon_struct.conflict368, *Panon_struct.conflict368;

struct anon_struct.conflict368 {
    uint32_t start;
    uint32_t value;
};

typedef struct env_node_obj env_node_obj, *Penv_node_obj;

typedef struct anon_struct_for_addr anon_struct_for_addr, *Panon_struct_for_addr;

struct anon_struct_for_addr {
    uint32_t start;
    uint32_t value;
};

struct env_node_obj {
    env_status_t status;
    _Bool crc_is_ok;
    uint8_t name_len;
    undefined field_0x3;
    uint32_t magic;
    uint32_t len;
    uint32_t value_len;
    char name[64];
    struct anon_struct_for_addr addr;
};

typedef struct env_node_obj * env_node_obj_t;

typedef struct dbg_mem_write_req dbg_mem_write_req, *Pdbg_mem_write_req;

struct dbg_mem_write_req {
    uint32_t memaddr;
    uint32_t memdata;
};

typedef struct dbg_set_sev_filter_req dbg_set_sev_filter_req, *Pdbg_set_sev_filter_req;

struct dbg_set_sev_filter_req {
    uint32_t sev_filter;
};

typedef struct dbg_mem_read_req dbg_mem_read_req, *Pdbg_mem_read_req;

struct dbg_mem_read_req {
    uint32_t memaddr;
};

typedef struct dbg_mem_write_cfm dbg_mem_write_cfm, *Pdbg_mem_write_cfm;

struct dbg_mem_write_cfm {
    uint32_t memaddr;
    uint32_t memdata;
};

typedef struct dbg_get_sys_stat_cfm dbg_get_sys_stat_cfm, *Pdbg_get_sys_stat_cfm;

struct dbg_get_sys_stat_cfm {
    uint32_t cpu_sleep_time;
    uint32_t doze_time;
    uint32_t stats_time;
};

typedef struct dbg_mem_read_cfm dbg_mem_read_cfm, *Pdbg_mem_read_cfm;

struct dbg_mem_read_cfm {
    uint32_t memaddr;
    uint32_t memdata;
};

typedef struct dbg_set_mod_filter_req dbg_set_mod_filter_req, *Pdbg_set_mod_filter_req;

struct dbg_set_mod_filter_req {
    uint32_t mod_filter;
};

typedef enum dbg_msg_tag {
    DBG_ERROR_IND=1032,
    DBG_GET_SYS_STAT_CFM=1034,
    DBG_GET_SYS_STAT_REQ=1033,
    DBG_MAX=1035,
    DBG_MEM_READ_CFM=1025,
    DBG_MEM_READ_REQ=1024,
    DBG_MEM_WRITE_CFM=1027,
    DBG_MEM_WRITE_REQ=1026,
    DBG_SET_MOD_FILTER_CFM=1029,
    DBG_SET_MOD_FILTER_REQ=1028,
    DBG_SET_SEV_FILTER_CFM=1031,
    DBG_SET_SEV_FILTER_REQ=1030,
    DBG_SYS_STAT_TIMER=1035
} dbg_msg_tag;

typedef struct mbedtls_pk_rsassa_pss_options mbedtls_pk_rsassa_pss_options, *Pmbedtls_pk_rsassa_pss_options;

struct mbedtls_pk_rsassa_pss_options {
    enum mbedtls_md_type_t mgf1_hash_id;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    int expected_salt_len;
};

typedef uint32_t u32.conflict18;

typedef uint32_t u32.conflict17;

typedef uint32_t u32.conflict23;

typedef uint32_t u32.conflict6;

typedef uint32_t u32.conflict22;

typedef uint32_t u32.conflict26;

typedef uint32_t u32.conflict270;

typedef uint32_t u32.conflict21;

typedef uint32_t u32.conflict20;

typedef uint32_t u32.conflict25;

typedef uint32_t u32.conflict;

typedef uint32_t u32.conflict24;

typedef uint32_t u32.conflict177;

typedef uint32_t u32.conflict54;

typedef uint32_t u32.conflict268;

typedef uint32_t u32.conflict269;

typedef uint32_t u32.conflict36;

typedef uint32_t u32.conflict35;

typedef uint64_t __le64;

typedef uint32_t u32.conflict267;

typedef uint32_t u32.conflict41;

typedef uint32_t u32.conflict46;

typedef uint32_t u32.conflict7;

typedef uint32_t u32.conflict5;

typedef uint32_t u32.conflict53;

typedef uint32_t u32.conflict52;

typedef uint32_t u32.conflict51;

typedef uint32_t u32.conflict3;

typedef uint32_t u32.conflict2;

typedef uint32_t u32.conflict191;

typedef uint32_t u32.conflict186;

typedef _Bool bool_l;

typedef int8_t s8_l;

typedef uint32_t u32.conflict196;

typedef struct work work, *Pwork;

struct work {
    void (* fn)(void *);
    void * arg;
    int dly;
};

typedef struct targ targ, *Ptarg;

typedef struct AosStaticTask_t AosStaticTask_t, *PAosStaticTask_t;

typedef struct xSTATIC_TCB xSTATIC_TCB, *PxSTATIC_TCB;

typedef struct xSTATIC_TCB StaticTask_t;

typedef struct xSTATIC_LIST_ITEM xSTATIC_LIST_ITEM, *PxSTATIC_LIST_ITEM;

typedef struct xSTATIC_LIST_ITEM StaticListItem_t;

struct xSTATIC_LIST_ITEM {
    TickType_t xDummy2;
    void * pvDummy3[4];
};

struct xSTATIC_TCB {
    void * pxDummy1;
    StaticListItem_t xDummy3[2];
    UBaseType_t uxDummy5;
    void * pxDummy6;
    uint8_t ucDummy7[16];
    UBaseType_t uxDummy9;
    UBaseType_t uxDummy10[2];
    UBaseType_t uxDummy12[2];
    uint32_t ulDummy18;
    uint8_t ucDummy19;
    uint8_t uxDummy20;
    undefined field_0x5e;
    undefined field_0x5f;
};

struct targ {
    struct AosStaticTask_t * task;
    void (* fn)(void *);
    void * arg;
};

struct AosStaticTask_t {
    StaticTask_t fTask;
    uint32_t key_bitmap;
    void * keys[4];
    void * stack;
    char name[32];
    uint32_t magic;
};

typedef struct mbedtls_gcm_context mbedtls_gcm_context, *Pmbedtls_gcm_context;

struct mbedtls_gcm_context {
    struct mbedtls_cipher_context_t cipher_ctx;
    uint64_t HL[16];
    uint64_t HH[16];
    uint64_t len;
    uint64_t add_len;
    uchar base_ectr[16];
    uchar y[16];
    uchar buf[16];
    int mode;
    undefined field_0x184;
    undefined field_0x185;
    undefined field_0x186;
    undefined field_0x187;
};

typedef int _ssize_t;

typedef _ssize_t ssize_t;

typedef __blkcnt_t blkcnt_t;


// WARNING! conflicting data type names: /DWARF/_types.h/__mode_t - /types.h/__mode_t

typedef __mode_t mode_t;

typedef ushort __uint16_t;

typedef __uint16_t in_port_t;


// WARNING! conflicting data type names: /DWARF/_types.h/__ino_t - /types.h/__ino_t

typedef __ino_t ino_t;


// WARNING! conflicting data type names: /DWARF/_types.h/__uid_t - /types.h/__uid_t

typedef __uid_t uid_t;


// WARNING! conflicting data type names: /DWARF/_types.h/__off_t - /types.h/__off_t

typedef __off_t off_t;


// WARNING! conflicting data type names: /DWARF/_types.h/__nlink_t - /types.h/__nlink_t

typedef __nlink_t nlink_t;


// WARNING! conflicting data type names: /DWARF/_types.h/__gid_t - /types.h/__gid_t

typedef __gid_t gid_t;

typedef ulong __uint32_t;

typedef __uint32_t in_addr_t;


// WARNING! conflicting data type names: /DWARF/_types.h/__dev_t - /types.h/__dev_t

typedef __dev_t dev_t;

typedef __blksize_t blksize_t;

typedef struct netbuf netbuf, *Pnetbuf;

typedef struct pbuf pbuf, *Ppbuf;

typedef uint8_t u8_t;

struct netbuf {
    struct pbuf * p;
    struct pbuf * ptr;
    ip_addr_t addr;
    u16_t port;
    u8_t flags;
    undefined field_0xf;
    u16_t toport_chksum;
    undefined field_0x12;
    undefined field_0x13;
};

struct pbuf {
    struct pbuf * next;
    void * payload;
    u16_t tot_len;
    u16_t len;
    u8_t type_internal;
    u8_t flags;
    u8_t ref;
    u8_t if_idx;
};

typedef struct txl_list txl_list, *Ptxl_list;

typedef struct tx_hd tx_hd, *Ptx_hd;

typedef union anon_union_for_field_3 anon_union_for_field_3, *Panon_union_for_field_3;

typedef union anon_union_for_field_4 anon_union_for_field_4, *Panon_union_for_field_4;

typedef union anon_union_for_field_5 anon_union_for_field_5, *Panon_union_for_field_5;

union anon_union_for_field_3 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

union anon_union_for_field_4 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

union anon_union_for_field_5 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

struct tx_hd {
    uint32_t upatterntx;
    uint32_t nextfrmexseq_ptr;
    uint32_t nextmpdudesc_ptr;
    union anon_union_for_field_3 field_3;
    union anon_union_for_field_4 field_4;
    union anon_union_for_field_5 field_5;
    uint32_t frmlen;
    uint32_t frmlifetime;
    uint32_t phyctrlinfo;
    uint32_t policyentryaddr;
    uint32_t optlen[3];
    uint32_t macctrlinfo1;
    uint32_t macctrlinfo2;
    uint32_t statinfo;
    uint32_t mediumtimeused;
};

struct txl_list {
    struct tx_hd * last_frame_exch;
    struct co_list transmitting;
    uint16_t bridgedmacnt;
    uint8_t chk_state;
    undefined field_0xf;
};

typedef struct txl_cntrl_env_tag txl_cntrl_env_tag, *Ptxl_cntrl_env_tag;

struct txl_cntrl_env_tag {
    struct txl_list txlist[5];
    uint32_t pck_cnt;
    uint16_t seqnbr;
    _Bool reset;
    undefined field_0x57;
};

typedef struct ipc_emb_env_tag ipc_emb_env_tag, *Pipc_emb_env_tag;

struct ipc_emb_env_tag {
    struct co_list rx_queue;
    struct co_list cfm_queue;
    uint8_t ipc_rxdesc_idx;
    uint8_t ipc_rxbuf_idx;
    uint8_t ipc_radar_buf_idx;
    uint8_t ipc_msge2a_buf_idx;
    uint8_t ipc_dbg_buf_idx;
    uint8_t ipc_msgacke2a_cnt;
    undefined field_0x16;
    undefined field_0x17;
    uint32_t txdesc_idx;
    struct txdesc_host * txdesc;
};

typedef struct romapi_freertos_map romapi_freertos_map, *Promapi_freertos_map;

struct romapi_freertos_map {
    void * vApplicationIdleHook;
    void * interrupt_entry_ptr;
    void * vApplicationGetIdleTaskMemory;
    void * vApplicationStackOverflowHook;
    void * vApplicationGetTimerTaskMemory;
    void * rtos_sprintf;
    void * vApplicationMallocFailedHook;
    void * rtos_memcpy_ptr;
    void * vAssertCalled;
    void * rtos_strlen_ptr;
    void * rtos_memset_ptr;
    void * rtos_clz;
    void * exception_entry_ptr;
    void * rtos_strcpy_ptr;
    void * xISRStackTop;
};

typedef union byte_array byte_array, *Pbyte_array;

typedef uint uintptr_t;

union byte_array {
    uint8_t bytes[8];
    uintptr_t intx;
    uint64_t int64;
};

typedef struct mac_hdr_qos mac_hdr_qos, *Pmac_hdr_qos;

struct mac_hdr_qos {
    uint16_t fctl;
    uint16_t durid;
    struct mac_addr addr1;
    struct mac_addr addr2;
    struct mac_addr addr3;
    uint16_t seq;
    uint16_t qos;
};

typedef struct eth_hdr eth_hdr, *Peth_hdr;

struct eth_hdr {
    struct mac_addr da;
    struct mac_addr sa;
    uint16_t len;
};

typedef struct mac_hdr_long_qos mac_hdr_long_qos, *Pmac_hdr_long_qos;

struct mac_hdr_long_qos {
    uint16_t fctl;
    uint16_t durid;
    struct mac_addr addr1;
    struct mac_addr addr2;
    struct mac_addr addr3;
    uint16_t seq;
    struct mac_addr addr4;
    uint16_t qos;
};

typedef struct mac_hdr mac_hdr, *Pmac_hdr;

struct mac_hdr {
    uint16_t fctl;
    uint16_t durid;
    struct mac_addr addr1;
    struct mac_addr addr2;
    struct mac_addr addr3;
    uint16_t seq;
};

typedef struct bcn_frame bcn_frame, *Pbcn_frame;

struct bcn_frame {
    struct mac_hdr h;
    uint64_t tsf;
    uint16_t bcnint;
    uint16_t capa;
    uint8_t[0] variable;
};

typedef struct mac_hdr_long mac_hdr_long, *Pmac_hdr_long;

struct mac_hdr_long {
    uint16_t fctl;
    uint16_t durid;
    struct mac_addr addr1;
    struct mac_addr addr2;
    struct mac_addr addr3;
    uint16_t seq;
    struct mac_addr addr4;
};

typedef struct preq_frame preq_frame, *Ppreq_frame;

struct preq_frame {
    struct mac_hdr h;
    uint8_t[0] payload;
};

typedef struct mac_hdr_ctrl mac_hdr_ctrl, *Pmac_hdr_ctrl;

struct mac_hdr_ctrl {
    uint16_t fctl;
    uint16_t durid;
    struct mac_addr addr1;
    struct mac_addr addr2;
};

typedef enum BL_IRQ_EXCEPTION_TYPE_T {
    BL_IRQ_EXCEPTION_TYPE_ACCESS_ILLEGAL=2,
    BL_IRQ_EXCEPTION_TYPE_ILLEGAL_INSTRUCTION=3,
    BL_IRQ_EXCEPTION_TYPE_LOAD_MISALIGN=0,
    BL_IRQ_EXCEPTION_TYPE_STORE_MISALIGN=1
} BL_IRQ_EXCEPTION_TYPE_T;

typedef struct dma_env_tag dma_env_tag, *Pdma_env_tag;

struct dma_env_tag {
    struct dma_desc * last_dma[4];
};

typedef struct sm_disconnect_req sm_disconnect_req, *Psm_disconnect_req;

struct sm_disconnect_req {
    uint16_t reason_code;
    uint8_t vif_idx;
    undefined field_0x3;
};

typedef struct sm_disconnect_ind sm_disconnect_ind, *Psm_disconnect_ind;

struct sm_disconnect_ind {
    uint16_t reason_code;
    uint8_t vif_idx;
    _Bool ft_over_ds;
};

typedef struct sm_connect_req sm_connect_req, *Psm_connect_req;

struct sm_connect_req {
    struct mac_ssid ssid;
    struct mac_addr bssid;
    struct scan_chan_tag chan;
    undefined field_0x2e;
    undefined field_0x2f;
    uint32_t flags;
    uint16_t ctrl_port_ethertype;
    uint16_t ie_len;
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t auth_type;
    uint8_t uapsd_queues;
    uint8_t vif_idx;
    undefined field_0x3e;
    undefined field_0x3f;
    uint32_t ie_buf[64];
    _Bool is_supplicant_enabled;
    uint8_t phrase[64];
    uint8_t phrase_pmk[64];
    undefined field_0x1c1;
    undefined field_0x1c2;
    undefined field_0x1c3;
};

typedef struct sm_connect_cfm sm_connect_cfm, *Psm_connect_cfm;

struct sm_connect_cfm {
    uint8_t status;
};

typedef enum sm_state_tag {
    SM_ACTIVATING=7,
    SM_ASSOCIATING=6,
    SM_AUTHENTICATING=5,
    SM_BSS_PARAM_SETTING=4,
    SM_DISCONNECTING=8,
    SM_IDLE=0,
    SM_JOINING=2,
    SM_SCANNING=1,
    SM_STATE_MAX=9,
    SM_STA_ADDING=3
} sm_state_tag;

typedef struct sm_connect_ind sm_connect_ind, *Psm_connect_ind;

struct sm_connect_ind {
    uint16_t status_code;
    struct mac_addr bssid;
    _Bool roamed;
    uint8_t vif_idx;
    uint8_t ap_idx;
    uint8_t ch_idx;
    _Bool qos;
    uint8_t acm;
    uint16_t assoc_req_ie_len;
    uint16_t assoc_rsp_ie_len;
    undefined field_0x12;
    undefined field_0x13;
    uint32_t assoc_ie_buf[200];
    uint16_t aid;
    uint8_t band;
    undefined field_0x337;
    uint16_t center_freq;
    uint8_t width;
    undefined field_0x33b;
    uint32_t center_freq1;
    uint32_t center_freq2;
    uint32_t ac_param[4];
};

typedef enum sm_msg_tag {
    SM_CONNECT_CFM=6145,
    SM_CONNECT_IND=6146,
    SM_CONNECT_REQ=6144,
    SM_DISCONNECT_CFM=6148,
    SM_DISCONNECT_IND=6149,
    SM_DISCONNECT_REQ=6147,
    SM_MAX=6151,
    SM_RSP_TIMEOUT_IND=6150
} sm_msg_tag;

typedef enum msgTypes {
    CONNACK=2,
    CONNECT=1,
    DISCONNECT=14,
    PINGREQ=12,
    PINGRESP=13,
    PUBACK=4,
    PUBCOMP=7,
    PUBLISH=3,
    PUBREC=5,
    PUBREL=6,
    SUBACK=9,
    SUBSCRIBE=8,
    UNKNOWN=-1,
    UNSUBACK=11,
    UNSUBSCRIBE=10
} msgTypes;

typedef union MQTTHeader MQTTHeader, *PMQTTHeader;

union MQTTHeader {
    uchar byte;
};

typedef enum msgTypes MessageTypes;

typedef struct mm_csa_counter_ind mm_csa_counter_ind, *Pmm_csa_counter_ind;

struct mm_csa_counter_ind {
    uint8_t vif_index;
    uint8_t csa_count;
};

typedef struct mm_force_idle_req mm_force_idle_req, *Pmm_force_idle_req;

struct mm_force_idle_req {
    void (* cb)(void);
};

typedef struct mm_set_bssid_req mm_set_bssid_req, *Pmm_set_bssid_req;

struct mm_set_bssid_req {
    struct mac_addr bssid;
    uint8_t inst_nbr;
};

typedef struct mm_monitor_channel_cfm mm_monitor_channel_cfm, *Pmm_monitor_channel_cfm;

struct mm_monitor_channel_cfm {
    uint32_t status;
    uint32_t freq;
    uint32_t data[8];
};

typedef struct mm_rssi_status_ind mm_rssi_status_ind, *Pmm_rssi_status_ind;

struct mm_rssi_status_ind {
    uint8_t vif_index;
    _Bool rssi_status;
    int8_t rssi;
};

typedef struct mm_sta_del_req mm_sta_del_req, *Pmm_sta_del_req;

struct mm_sta_del_req {
    uint8_t sta_idx;
};

typedef struct mm_set_channel_req mm_set_channel_req, *Pmm_set_channel_req;

struct mm_set_channel_req {
    uint8_t band;
    uint8_t type;
    uint16_t prim20_freq;
    uint16_t center1_freq;
    uint16_t center2_freq;
    uint8_t index;
    int8_t tx_power;
};

typedef struct mm_sta_add_req mm_sta_add_req, *Pmm_sta_add_req;

struct mm_sta_add_req {
    uint32_t ampdu_size_max_vht;
    uint32_t paid_gid;
    uint16_t ampdu_size_max_ht;
    struct mac_addr mac_addr;
    uint8_t ampdu_spacing_min;
    uint8_t inst_nbr;
    _Bool tdls_sta;
    int8_t rssi;
    uint32_t tsflo;
    uint32_t tsfhi;
    uint8_t data_rate;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
};

typedef struct mm_set_power_cfm mm_set_power_cfm, *Pmm_set_power_cfm;

struct mm_set_power_cfm {
    uint8_t radio_idx;
    int8_t power;
};

typedef struct mm_set_mode_req mm_set_mode_req, *Pmm_set_mode_req;

struct mm_set_mode_req {
    uint8_t abgnmode;
};

typedef struct mm_chan_ctxt_update_req mm_chan_ctxt_update_req, *Pmm_chan_ctxt_update_req;

struct mm_chan_ctxt_update_req {
    uint8_t chan_index;
    uint8_t band;
    uint8_t type;
    undefined field_0x3;
    uint16_t prim20_freq;
    uint16_t center1_freq;
    uint16_t center2_freq;
    int8_t tx_power;
    undefined field_0xb;
};

typedef struct mm_monitor_req mm_monitor_req, *Pmm_monitor_req;

struct mm_monitor_req {
    uint32_t enable;
};

typedef struct mm_cfg_rssi_req mm_cfg_rssi_req, *Pmm_cfg_rssi_req;

struct mm_cfg_rssi_req {
    uint8_t vif_index;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
};

typedef struct mm_set_beacon_int_req mm_set_beacon_int_req, *Pmm_set_beacon_int_req;

struct mm_set_beacon_int_req {
    uint16_t beacon_int;
    uint8_t inst_nbr;
    undefined field_0x3;
};

typedef struct mm_traffic_req_ind mm_traffic_req_ind, *Pmm_traffic_req_ind;

struct mm_traffic_req_ind {
    uint8_t sta_idx;
    uint8_t pkt_cnt;
    _Bool uapsd;
};

typedef struct mm_set_power_req mm_set_power_req, *Pmm_set_power_req;

struct mm_set_power_req {
    uint8_t inst_nbr;
    int8_t power;
};

typedef struct mm_set_dtim_req mm_set_dtim_req, *Pmm_set_dtim_req;

struct mm_set_dtim_req {
    uint8_t dtim_period;
};

typedef struct mm_bcn_change_req mm_bcn_change_req, *Pmm_bcn_change_req;

struct mm_bcn_change_req {
    uint32_t bcn_ptr;
    uint16_t bcn_len;
    uint16_t tim_oft;
    uint8_t tim_len;
    uint8_t inst_nbr;
    uint8_t csa_oft[2];
    uint8_t[0] bcn_buf;
};

typedef struct mm_key_del_req mm_key_del_req, *Pmm_key_del_req;

struct mm_key_del_req {
    uint8_t hw_key_idx;
};

typedef struct mm_set_edca_req mm_set_edca_req, *Pmm_set_edca_req;

struct mm_set_edca_req {
    uint32_t ac_param;
    _Bool uapsd;
    uint8_t hw_queue;
    uint8_t inst_nbr;
    undefined field_0x7;
};

typedef struct mm_set_filter_req mm_set_filter_req, *Pmm_set_filter_req;

struct mm_set_filter_req {
    uint32_t filter;
};

typedef struct mm_set_channel_cfm mm_set_channel_cfm, *Pmm_set_channel_cfm;

struct mm_set_channel_cfm {
    uint8_t radio_idx;
    int8_t power;
};

typedef struct mm_add_if_req mm_add_if_req, *Pmm_add_if_req;

struct mm_add_if_req {
    uint8_t type;
    struct mac_addr addr;
    _Bool p2p;
};

typedef struct mm_ba_add_req mm_ba_add_req, *Pmm_ba_add_req;

struct mm_ba_add_req {
    uint8_t type;
    uint8_t sta_idx;
    uint8_t tid;
    uint8_t bufsz;
    uint16_t ssn;
};

typedef struct mm_monitor_cfm mm_monitor_cfm, *Pmm_monitor_cfm;

struct mm_monitor_cfm {
    uint32_t status;
    uint32_t enable;
    uint32_t data[8];
};

typedef struct mm_csa_finish_ind mm_csa_finish_ind, *Pmm_csa_finish_ind;

struct mm_csa_finish_ind {
    uint8_t vif_index;
    uint8_t status;
    uint8_t chan_idx;
};

typedef struct mm_chan_ctxt_add_req mm_chan_ctxt_add_req, *Pmm_chan_ctxt_add_req;

struct mm_chan_ctxt_add_req {
    uint8_t band;
    uint8_t type;
    uint16_t prim20_freq;
    uint16_t center1_freq;
    uint16_t center2_freq;
    int8_t tx_power;
    undefined field_0x9;
};

typedef struct mm_set_idle_req mm_set_idle_req, *Pmm_set_idle_req;

struct mm_set_idle_req {
    uint8_t hw_idle;
};

typedef struct mm_sta_add_cfm mm_sta_add_cfm, *Pmm_sta_add_cfm;

struct mm_sta_add_cfm {
    uint8_t status;
    uint8_t sta_idx;
    uint8_t hw_sta_idx;
};

typedef struct mm_set_ps_mode_req mm_set_ps_mode_req, *Pmm_set_ps_mode_req;

struct mm_set_ps_mode_req {
    uint8_t new_state;
};

typedef struct mm_ba_add_cfm mm_ba_add_cfm, *Pmm_ba_add_cfm;

struct mm_ba_add_cfm {
    uint8_t sta_idx;
    uint8_t tid;
    uint8_t status;
};

typedef struct mm_key_add_cfm mm_key_add_cfm, *Pmm_key_add_cfm;

struct mm_key_add_cfm {
    uint8_t status;
    uint8_t hw_key_idx;
};

typedef struct mm_ps_change_ind mm_ps_change_ind, *Pmm_ps_change_ind;

struct mm_ps_change_ind {
    uint8_t sta_idx;
    uint8_t ps_state;
};

typedef struct mm_remain_on_channel_req mm_remain_on_channel_req, *Pmm_remain_on_channel_req;

struct mm_remain_on_channel_req {
    uint8_t op_code;
    uint8_t vif_index;
    uint8_t band;
    uint8_t type;
    uint16_t prim20_freq;
    uint16_t center1_freq;
    uint16_t center2_freq;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t duration_ms;
    int8_t tx_power;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
};

typedef struct mm_remain_on_channel_cfm mm_remain_on_channel_cfm, *Pmm_remain_on_channel_cfm;

struct mm_remain_on_channel_cfm {
    uint8_t op_code;
    uint8_t status;
    uint8_t chan_ctxt_index;
};

typedef struct mm_tim_update_req mm_tim_update_req, *Pmm_tim_update_req;

struct mm_tim_update_req {
    uint16_t aid;
    uint8_t tx_avail;
    uint8_t inst_nbr;
};

typedef enum mm_msg_tag {
    MM_ADD_IF_CFM=7,
    MM_ADD_IF_REQ=6,
    MM_BA_ADD_CFM=41,
    MM_BA_ADD_REQ=40,
    MM_BA_DEL_CFM=43,
    MM_BA_DEL_REQ=42,
    MM_BCN_CHANGE_CFM=64,
    MM_BCN_CHANGE_REQ=63,
    MM_BFMER_ENABLE_REQ=80,
    MM_CFG_RSSI_REQ=86,
    MM_CHANNEL_PRE_SWITCH_IND=69,
    MM_CHANNEL_SURVEY_IND=79,
    MM_CHANNEL_SWITCH_IND=68,
    MM_CHAN_CTXT_ADD_CFM=52,
    MM_CHAN_CTXT_ADD_REQ=51,
    MM_CHAN_CTXT_DEL_CFM=54,
    MM_CHAN_CTXT_DEL_REQ=53,
    MM_CHAN_CTXT_LINK_CFM=56,
    MM_CHAN_CTXT_LINK_REQ=55,
    MM_CHAN_CTXT_SCHED_CFM=62,
    MM_CHAN_CTXT_SCHED_REQ=61,
    MM_CHAN_CTXT_UNLINK_CFM=58,
    MM_CHAN_CTXT_UNLINK_REQ=57,
    MM_CHAN_CTXT_UPDATE_CFM=60,
    MM_CHAN_CTXT_UPDATE_REQ=59,
    MM_CONNECTION_LOSS_IND=67,
    MM_CSA_COUNTER_IND=78,
    MM_CSA_FINISH_IND=88,
    MM_CSA_TRAFFIC_IND=89,
    MM_DENOISE_REQ=48,
    MM_FORCE_IDLE_REQ=96,
    MM_KEY_ADD_CFM=37,
    MM_KEY_ADD_REQ=36,
    MM_KEY_DEL_CFM=39,
    MM_KEY_DEL_REQ=38,
    MM_MAX=99,
    MM_MONITOR_CFM=93,
    MM_MONITOR_CHANNEL_CFM=95,
    MM_MONITOR_CHANNEL_REQ=94,
    MM_MONITOR_REQ=92,
    MM_MU_GROUP_UPDATE_CFM=91,
    MM_MU_GROUP_UPDATE_REQ=90,
    MM_P2P_NOA_UPD_IND=85,
    MM_P2P_VIF_PS_CHANGE_IND=77,
    MM_PRIMARY_TBTT_IND=44,
    MM_PS_CHANGE_IND=73,
    MM_REMAIN_ON_CHANNEL_CFM=71,
    MM_REMAIN_ON_CHANNEL_EXP_IND=72,
    MM_REMAIN_ON_CHANNEL_REQ=70,
    MM_REMOVE_IF_CFM=9,
    MM_REMOVE_IF_REQ=8,
    MM_RESET_CFM=1,
    MM_RESET_REQ=0,
    MM_RSSI_STATUS_IND=87,
    MM_SCAN_CHANNEL_END_IND=98,
    MM_SCAN_CHANNEL_START_IND=97,
    MM_SECONDARY_TBTT_IND=45,
    MM_SET_BASIC_RATES_CFM=23,
    MM_SET_BASIC_RATES_REQ=22,
    MM_SET_BEACON_INT_CFM=21,
    MM_SET_BEACON_INT_REQ=20,
    MM_SET_BSSID_CFM=25,
    MM_SET_BSSID_REQ=24,
    MM_SET_CHANNEL_CFM=17,
    MM_SET_CHANNEL_REQ=16,
    MM_SET_DTIM_CFM=19,
    MM_SET_DTIM_REQ=18,
    MM_SET_EDCA_CFM=27,
    MM_SET_EDCA_REQ=26,
    MM_SET_FILTER_CFM=15,
    MM_SET_FILTER_REQ=14,
    MM_SET_IDLE_CFM=35,
    MM_SET_IDLE_REQ=34,
    MM_SET_MODE_CFM=29,
    MM_SET_MODE_REQ=28,
    MM_SET_P2P_NOA_CFM=83,
    MM_SET_P2P_NOA_REQ=81,
    MM_SET_P2P_OPPPS_CFM=84,
    MM_SET_P2P_OPPPS_REQ=82,
    MM_SET_POWER_CFM=47,
    MM_SET_POWER_REQ=46,
    MM_SET_PS_MODE_CFM=50,
    MM_SET_PS_MODE_REQ=49,
    MM_SET_PS_OPTIONS_CFM=76,
    MM_SET_PS_OPTIONS_REQ=75,
    MM_SET_SLOTTIME_CFM=33,
    MM_SET_SLOTTIME_REQ=32,
    MM_SET_VIF_STATE_CFM=31,
    MM_SET_VIF_STATE_REQ=30,
    MM_START_CFM=3,
    MM_START_REQ=2,
    MM_STA_ADD_CFM=11,
    MM_STA_ADD_REQ=10,
    MM_STA_DEL_CFM=13,
    MM_STA_DEL_REQ=12,
    MM_TIM_UPDATE_CFM=66,
    MM_TIM_UPDATE_REQ=65,
    MM_TRAFFIC_REQ_IND=74,
    MM_VERSION_CFM=5,
    MM_VERSION_REQ=4
} mm_msg_tag;

typedef struct mm_monitor_channel_req mm_monitor_channel_req, *Pmm_monitor_channel_req;

struct mm_monitor_channel_req {
    uint32_t freq;
    uint32_t use_40Mhz;
    uint32_t higher_band;
};

typedef struct mm_key_add_req mm_key_add_req, *Pmm_key_add_req;

typedef struct mac_sec_key mac_sec_key, *Pmac_sec_key;

struct mac_sec_key {
    uint8_t length;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    uint32_t array[8];
};

struct mm_key_add_req {
    uint8_t key_idx;
    uint8_t sta_idx;
    undefined field_0x2;
    undefined field_0x3;
    struct mac_sec_key key;
    uint8_t cipher_suite;
    uint8_t inst_nbr;
    uint8_t spp;
    _Bool pairwise;
};

typedef struct mm_set_vif_state_req mm_set_vif_state_req, *Pmm_set_vif_state_req;

struct mm_set_vif_state_req {
    uint16_t aid;
    _Bool active;
    uint8_t inst_nbr;
};

typedef struct mm_start_req mm_start_req, *Pmm_start_req;

typedef struct phy_cfg_tag phy_cfg_tag, *Pphy_cfg_tag;

struct phy_cfg_tag {
    uint32_t parameters;
    undefined field_0x4;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    undefined field_0x8;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    undefined field_0xc;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    undefined field_0x10;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
    undefined field_0x14;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
    undefined field_0x18;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
    undefined field_0x1c;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
    undefined field_0x20;
    undefined field_0x21;
    undefined field_0x22;
    undefined field_0x23;
    undefined field_0x24;
    undefined field_0x25;
    undefined field_0x26;
    undefined field_0x27;
    undefined field_0x28;
    undefined field_0x29;
    undefined field_0x2a;
    undefined field_0x2b;
    undefined field_0x2c;
    undefined field_0x2d;
    undefined field_0x2e;
    undefined field_0x2f;
    undefined field_0x30;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    undefined field_0x34;
    undefined field_0x35;
    undefined field_0x36;
    undefined field_0x37;
    undefined field_0x38;
    undefined field_0x39;
    undefined field_0x3a;
    undefined field_0x3b;
    undefined field_0x3c;
    undefined field_0x3d;
    undefined field_0x3e;
    undefined field_0x3f;
};

struct mm_start_req {
    struct phy_cfg_tag phy_cfg;
    uint32_t uapsd_timeout;
    uint16_t lp_clk_accuracy;
    undefined field_0x46;
    undefined field_0x47;
};

typedef enum mm_remain_on_channel_op {
    MM_ROC_OP_CANCEL=1,
    MM_ROC_OP_MAX=2,
    MM_ROC_OP_START=0
} mm_remain_on_channel_op;

typedef struct mm_remove_if_req mm_remove_if_req, *Pmm_remove_if_req;

struct mm_remove_if_req {
    uint8_t inst_nbr;
};

typedef struct mm_version_cfm mm_version_cfm, *Pmm_version_cfm;

struct mm_version_cfm {
    uint32_t version_lmac;
    uint32_t version_machw_1;
    uint32_t version_machw_2;
    uint32_t version_phy_1;
    uint32_t version_phy_2;
    uint32_t features;
};

typedef struct mm_add_if_cfm mm_add_if_cfm, *Pmm_add_if_cfm;

struct mm_add_if_cfm {
    uint8_t status;
    uint8_t inst_nbr;
};

typedef struct mm_set_ps_options_req mm_set_ps_options_req, *Pmm_set_ps_options_req;

struct mm_set_ps_options_req {
    uint8_t vif_index;
    undefined field_0x1;
    uint16_t listen_interval;
    _Bool dont_listen_bc_mc;
    undefined field_0x5;
};

typedef struct mm_connection_loss_ind mm_connection_loss_ind, *Pmm_connection_loss_ind;

struct mm_connection_loss_ind {
    uint8_t inst_nbr;
};

typedef struct mm_csa_traffic_ind mm_csa_traffic_ind, *Pmm_csa_traffic_ind;

struct mm_csa_traffic_ind {
    uint8_t vif_index;
    _Bool enable;
};

typedef struct mm_set_basic_rates_req mm_set_basic_rates_req, *Pmm_set_basic_rates_req;

struct mm_set_basic_rates_req {
    uint32_t rates;
    uint8_t inst_nbr;
    uint8_t band;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct mm_set_slottime_req mm_set_slottime_req, *Pmm_set_slottime_req;

struct mm_set_slottime_req {
    uint8_t slottime;
};

typedef enum mm_state_tag {
    MM_ACTIVE=1,
    MM_GOING_TO_IDLE=2,
    MM_HOST_BYPASSED=3,
    MM_IDLE=0,
    MM_STATE_MAX=4
} mm_state_tag;

typedef struct xLIST List_t;

typedef struct list_head list_head, *Plist_head;

struct list_head {
    struct list_head * next;
    struct list_head * prev;
};

typedef struct dlist_s dlist_s, *Pdlist_s;

typedef struct dlist_s dlist_t;

struct dlist_s {
    struct dlist_s * prev;
    struct dlist_s * next;
};

typedef struct hal_dma_env_tag hal_dma_env_tag, *Phal_dma_env_tag;

struct hal_dma_env_tag {
    struct co_list prog[2];
    struct co_list free_gp_dma_descs;
    uint16_t lli_cnt[2];
};

typedef struct dns_hdr dns_hdr, *Pdns_hdr;

struct dns_hdr {
    u16_t id;
    u8_t flags1;
    u8_t flags2;
    u16_t numquestions;
    u16_t numanswers;
    u16_t numauthrr;
    u16_t numextrarr;
};

typedef enum lwip_ieee_eth_type {
    ETHTYPE_ARP=2054,
    ETHTYPE_ETHERCAT=-30556,
    ETHTYPE_IP=2048,
    ETHTYPE_IPV6=-31011,
    ETHTYPE_JUMBO=-30608,
    ETHTYPE_LLDP=-30516,
    ETHTYPE_MRP=-30493,
    ETHTYPE_PPPOE=-30620,
    ETHTYPE_PPPOEDISC=-30621,
    ETHTYPE_PROFINET=-30574,
    ETHTYPE_PTP=-30473,
    ETHTYPE_QINQ=-28416,
    ETHTYPE_RARP=-32715,
    ETHTYPE_SERCOS=-30515,
    ETHTYPE_VLAN=-32512,
    ETHTYPE_WOL=2114
} lwip_ieee_eth_type;

typedef struct dns_table_entry.conflict dns_table_entry.conflict, *Pdns_table_entry.conflict;

struct dns_table_entry.conflict {
    u32_t ttl;
    ip_addr_t ipaddr;
    u16_t txid;
    u8_t state;
    u8_t server_idx;
    u8_t tmr;
    u8_t retries;
    u8_t seqno;
    char name[256];
    undefined field_0x10f;
};

typedef struct dns_req_entry dns_req_entry, *Pdns_req_entry;

struct dns_req_entry {
    void (* found)(char *, ip_addr_t *, void *);
    void * arg;
};

typedef struct dns_table_entry.conflict1 dns_table_entry.conflict1, *Pdns_table_entry.conflict1;

struct dns_table_entry.conflict1 {
    u32_t ttl;
    ip_addr_t ipaddr;
    u16_t txid;
    u8_t state;
    u8_t server_idx;
    u8_t tmr;
    u8_t retries;
    u8_t seqno;
    char name[256];
    undefined field_0x10f;
};

typedef struct dns_query dns_query, *Pdns_query;

struct dns_query {
    u16_t type;
    u16_t cls;
};

typedef struct dns_answer dns_answer, *Pdns_answer;

struct dns_answer {
    u16_t type;
    u16_t cls;
    u32_t ttl;
    u16_t len;
    undefined field_0xa;
    undefined field_0xb;
};

typedef struct memp memp, *Pmemp;

struct memp {
    struct memp * next;
};

typedef struct memp_desc memp_desc, *Pmemp_desc;

struct memp_desc {
    struct stats_mem * stats;
    u16_t size;
    u16_t num;
    u8_t * base;
    struct memp * * tab;
};

typedef struct __sFILE __sFILE, *P__sFILE;

typedef struct _reent _reent, *P_reent;

typedef long _fpos_t;

typedef struct __sFILE __FILE;

typedef struct __sbuf __sbuf, *P__sbuf;

typedef struct __locale_t __locale_t, *P__locale_t;

typedef struct _Bigint _Bigint, *P_Bigint;

typedef union anon_union_for__new anon_union_for__new, *Panon_union_for__new;

typedef struct _atexit _atexit, *P_atexit;

typedef struct _glue _glue, *P_glue;

typedef long _off_t;

typedef int _LOCK_RECURSIVE_T;

typedef _LOCK_RECURSIVE_T _flock_t;

typedef struct _mbstate_t _mbstate_t, *P_mbstate_t;

typedef ulong __ULong;

typedef struct anon_struct anon_struct, *Panon_struct;

typedef struct anon_struct.conflict anon_struct.conflict, *Panon_struct.conflict;

typedef struct _on_exit_args _on_exit_args, *P_on_exit_args;

typedef union anon_union_for___value anon_union_for___value, *Panon_union_for___value;

typedef struct __tm __tm, *P__tm;

typedef struct _rand48 _rand48, *P_rand48;

typedef uint wint_t;

struct __tm {
    int __tm_sec;
    int __tm_min;
    int __tm_hour;
    int __tm_mday;
    int __tm_mon;
    int __tm_year;
    int __tm_wday;
    int __tm_yday;
    int __tm_isdst;
};

union anon_union_for___value {
    wint_t __wch;
    uchar __wchb[4];
};

struct _mbstate_t {
    int __count;
    union anon_union_for___value __value;
};

struct _rand48 {
    ushort _seed[3];
    ushort _mult[3];
    ushort _add;
};

struct anon_struct {
    uint _unused_rand;
    char * _strtok_last;
    char _asctime_buf[26];
    undefined field_0x22;
    undefined field_0x23;
    struct __tm _localtime_buf;
    int _gamma_signgam;
    undefined field_0x4c;
    undefined field_0x4d;
    undefined field_0x4e;
    undefined field_0x4f;
    ulonglong _rand_next;
    struct _rand48 _r48;
    undefined field_0x66;
    undefined field_0x67;
    struct _mbstate_t _mblen_state;
    struct _mbstate_t _mbtowc_state;
    struct _mbstate_t _wctomb_state;
    char _l64a_buf[8];
    char _signal_buf[24];
    int _getdate_err;
    struct _mbstate_t _mbrlen_state;
    struct _mbstate_t _mbrtowc_state;
    struct _mbstate_t _mbsrtowcs_state;
    struct _mbstate_t _wcrtomb_state;
    struct _mbstate_t _wcsrtombs_state;
    int _h_errno;
};

struct anon_struct.conflict {
    uchar * _nextf[30];
    uint _nmalloc[30];
};

union anon_union_for__new {
    struct anon_struct _reent;
    struct anon_struct.conflict _unused;
};

struct _glue {
    struct _glue * _next;
    int _niobs;
    __FILE * _iobs;
};

struct _on_exit_args {
    void * _fnargs[32];
    void * _dso_handle[32];
    __ULong _fntypes;
    __ULong _is_cxa;
};

struct _atexit {
    struct _atexit * _next;
    int _ind;
    void (* _fns[32])(void);
    struct _on_exit_args _on_exit_args;
};

struct __sbuf {
    uchar * _base;
    int _size;
};

struct __sFILE {
    uchar * _p;
    int _r;
    int _w;
    short _flags;
    short _file;
    struct __sbuf _bf;
    int _lbfsize;
    void * _cookie;
    _ssize_t (* _read)(struct _reent *, void *, char *, int);
    _ssize_t (* _write)(struct _reent *, void *, char *, int);
    _fpos_t (* _seek)(struct _reent *, void *, _fpos_t, int);
    int (* _close)(struct _reent *, void *);
    struct __sbuf _ub;
    uchar * _up;
    int _ur;
    uchar _ubuf[3];
    uchar _nbuf[1];
    struct __sbuf _lb;
    int _blksize;
    _off_t _offset;
    struct _reent * _data;
    _flock_t _lock;
    struct _mbstate_t _mbstate;
    int _flags2;
};

struct _reent {
    int _errno;
    __FILE * _stdin;
    __FILE * _stdout;
    __FILE * _stderr;
    int _inc;
    char _emergency[25];
    undefined field_0x2d;
    undefined field_0x2e;
    undefined field_0x2f;
    int _unspecified_locale_info;
    struct __locale_t * _locale;
    int __sdidinit;
    void (* __cleanup)(struct _reent *);
    struct _Bigint * _result;
    int _result_k;
    struct _Bigint * _p5s;
    struct _Bigint * * _freelist;
    int _cvtlen;
    char * _cvtbuf;
    union anon_union_for__new _new;
    struct _atexit * _atexit;
    struct _atexit _atexit0;
    void (** _sig_func)(int);
    struct _glue __sglue;
    __FILE __sf[3];
    undefined field_0x424;
    undefined field_0x425;
    undefined field_0x426;
    undefined field_0x427;
};

struct __locale_t {
};

struct _Bigint {
    struct _Bigint * _next;
    int _k;
    int _maxwds;
    int _sign;
    int _wds;
    __ULong _x[1];
};

typedef union anon_union.conflict anon_union.conflict, *Panon_union.conflict;

union anon_union.conflict {
    struct anon_struct _reent;
    struct anon_struct.conflict _unused;
};

typedef struct _atexit.conflict _atexit.conflict, *P_atexit.conflict;

struct _atexit.conflict {
    struct _atexit * _next;
    int _ind;
    void (* _fns[32])(void);
    struct _on_exit_args _on_exit_args;
};

typedef struct _reent.conflict _reent.conflict, *P_reent.conflict;

struct _reent.conflict {
    int _errno;
    __FILE * _stdin;
    __FILE * _stdout;
    __FILE * _stderr;
    int _inc;
    char _emergency[25];
    undefined field_0x2d;
    undefined field_0x2e;
    undefined field_0x2f;
    int _unspecified_locale_info;
    struct __locale_t * _locale;
    int __sdidinit;
    void (* __cleanup)(struct _reent *);
    struct _Bigint * _result;
    int _result_k;
    struct _Bigint * _p5s;
    struct _Bigint * * _freelist;
    int _cvtlen;
    char * _cvtbuf;
    union anon_union_for__new _new;
    struct _atexit * _atexit;
    struct _atexit.conflict _atexit0;
    void (** _sig_func)(int);
    struct _glue __sglue;
    __FILE __sf[3];
    undefined field_0x424;
    undefined field_0x425;
    undefined field_0x426;
    undefined field_0x427;
};

typedef enum hal_uart_flow_control_t {
    FLOW_CONTROL_CTS=1,
    FLOW_CONTROL_CTS_RTS=3,
    FLOW_CONTROL_DISABLED=0,
    FLOW_CONTROL_RTS=2
} hal_uart_flow_control_t;

typedef enum hal_uart_mode_t {
    MODE_RX=1,
    MODE_TX=0,
    MODE_TX_RX=2
} hal_uart_mode_t;

typedef enum hal_uart_stop_bits_t {
    STOP_BITS_1=0,
    STOP_BITS_2=1
} hal_uart_stop_bits_t;

typedef struct uart_dev_t uart_dev_t, *Puart_dev_t;

typedef struct uart_config_t uart_config_t, *Puart_config_t;

typedef enum hal_uart_data_width_t {
    DATA_WIDTH_5BIT=0,
    DATA_WIDTH_6BIT=1,
    DATA_WIDTH_7BIT=2,
    DATA_WIDTH_8BIT=3,
    DATA_WIDTH_9BIT=4
} hal_uart_data_width_t;

typedef enum hal_uart_parity_t {
    EVEN_PARITY=2,
    NO_PARITY=0,
    ODD_PARITY=1
} hal_uart_parity_t;

struct uart_config_t {
    uint32_t baud_rate;
    enum hal_uart_data_width_t data_width;
    enum hal_uart_parity_t parity;
    enum hal_uart_stop_bits_t stop_bits;
    enum hal_uart_flow_control_t flow_control;
    enum hal_uart_mode_t mode;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
};

struct uart_dev_t {
    uint8_t port;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    struct uart_config_t config;
    void * rx_ringbuf_handle;
    void * tx_ringbuf_handle;
    uint32_t rx_buf_size;
    uint32_t tx_buf_size;
    void * mutex;
    void * poll_cb;
    void * fd;
    void * poll_data;
    void * taskhdl;
    uint8_t read_block_flag;
    undefined field_0x35;
    undefined field_0x36;
    undefined field_0x37;
    void * priv;
};

typedef enum hal_uart_int_t {
    UART_RX_INT=1,
    UART_TX_INT=0
} hal_uart_int_t;

typedef struct etharp_hdr etharp_hdr, *Petharp_hdr;

typedef struct eth_addr eth_addr, *Peth_addr;

typedef struct ip4_addr_wordaligned ip4_addr_wordaligned, *Pip4_addr_wordaligned;

struct eth_addr {
    u8_t addr[6];
};

struct ip4_addr_wordaligned {
    u16_t addrw[2];
};

struct etharp_hdr {
    u16_t hwtype;
    u16_t proto;
    u8_t hwlen;
    u8_t protolen;
    u16_t opcode;
    struct eth_addr shwaddr;
    struct ip4_addr_wordaligned sipaddr;
    struct eth_addr dhwaddr;
    struct ip4_addr_wordaligned dipaddr;
};

typedef enum etharp_opcode {
    ARP_REPLY=2,
    ARP_REQUEST=1
} etharp_opcode;

typedef struct bl_dma_item bl_dma_item, *Pbl_dma_item;

typedef struct utils_list_hdr utils_list_hdr, *Putils_list_hdr;

struct utils_list_hdr {
    struct utils_list_hdr * next;
};

struct bl_dma_item {
    struct utils_list_hdr item;
    void (* cb)(void *);
    void * arg;
    uint32_t src;
    uint32_t dst;
    uint32_t next;
    uint32_t ctrl;
};

typedef struct dma_ctx dma_ctx, *Pdma_ctx;

typedef struct utils_dlist_s utils_dlist_s, *Putils_dlist_s;

typedef struct utils_dlist_s utils_dlist_t;

struct utils_dlist_s {
    struct utils_dlist_s * prev;
    struct utils_dlist_s * next;
};

struct dma_ctx {
    utils_dlist_t * pstqueue;
};

typedef struct dma_node dma_node, *Pdma_node;

struct dma_node {
    utils_dlist_t dlist_item;
    int channel;
    void * tc_handler;
    void * interr_handler;
    void * ctx;
};

typedef struct aos_dir_t aos_dir_t, *Paos_dir_t;

struct aos_dir_t {
    int dd_vfs_fd;
    int dd_rsv;
};

typedef struct aos_dirent_t aos_dirent_t, *Paos_dirent_t;

struct aos_dirent_t { // Missing member d_name : char[1] at offset 0x5 [Unsupported interior flex array: char[1]]
    int d_ino;
    uint8_t d_type;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct statfs statfs, *Pstatfs;

struct statfs {
    long f_type;
    long f_bsize;
    long f_blocks;
    long f_bfree;
    long f_bavail;
    long f_files;
    long f_ffree;
    long f_fsid;
    long f_namelen;
};

typedef struct etharp_entry etharp_entry, *Petharp_entry;

typedef struct netif netif, *Pnetif;

typedef int8_t s8_t;

typedef s8_t err_t;

typedef enum netif_mac_filter_action {
    NETIF_ADD_MAC_FILTER=1,
    NETIF_DEL_MAC_FILTER=0
} netif_mac_filter_action;

struct etharp_entry {
    struct pbuf * q;
    ip4_addr_t ipaddr;
    struct netif * netif;
    struct eth_addr ethaddr;
    u16_t ctime;
    u8_t state;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct netif {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef enum etharp_state {
    ETHARP_STATE_EMPTY=0,
    ETHARP_STATE_PENDING=1,
    ETHARP_STATE_STABLE=2,
    ETHARP_STATE_STABLE_REREQUESTING_1=3,
    ETHARP_STATE_STABLE_REREQUESTING_2=4
} etharp_state;

typedef ushort UHWtype;

typedef struct bl_custom_pbuf bl_custom_pbuf, *Pbl_custom_pbuf;

typedef struct bl_custom_pbuf bl_custom_pbuf_t;

typedef struct pbuf_custom pbuf_custom, *Ppbuf_custom;

struct pbuf_custom {
    struct pbuf pbuf;
    void (* custom_free_function)(struct pbuf *);
};

struct bl_custom_pbuf {
    struct pbuf_custom p;
    void * swdesc;
};

typedef struct la_mem_format la_mem_format, *Pla_mem_format;

struct la_mem_format {
    uint32_t word[4];
};

typedef struct QueueDefinition QueueDefinition, *PQueueDefinition;

typedef struct QueueDefinition * QueueHandle_t;


// WARNING! conflicting data type names: /DWARF/queue.c/QueueDefinition/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u

struct QueueDefinition {
    int8_t * pcHead;
    int8_t * pcWriteTo;
    union anon_union_for_u u;
    List_t xTasksWaitingToSend;
    List_t xTasksWaitingToReceive;
    UBaseType_t uxMessagesWaiting;
    UBaseType_t uxLength;
    UBaseType_t uxItemSize;
    int8_t cRxLock;
    int8_t cTxLock;
    uint8_t ucStaticallyAllocated;
    undefined field_0x47;
    UBaseType_t uxQueueNumber;
    uint8_t ucQueueType;
    undefined field_0x4d;
    undefined field_0x4e;
    undefined field_0x4f;
};

typedef struct mbedtls_asn1_bitstring mbedtls_asn1_bitstring, *Pmbedtls_asn1_bitstring;

typedef struct mbedtls_asn1_bitstring mbedtls_x509_bitstring;

struct mbedtls_asn1_bitstring {
    size_t len;
    uchar unused_bits;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uchar * p;
};

typedef enum bl_dev_flag {
    RWNX_DEV_RESTARTING=0,
    RWNX_DEV_STACK_RESTARTING=1,
    RWNX_DEV_STARTED=2
} bl_dev_flag;

typedef uchar UQItype;

typedef int shift_count_type;

typedef struct DWstruct DWstruct, *PDWstruct;

typedef int SItype;

struct DWstruct {
    SItype low;
    SItype high;
};

typedef union DWunion DWunion, *PDWunion;

typedef longlong DItype;

union DWunion {
    struct DWstruct s;
    DItype ll;
};

typedef ulonglong UDItype;

typedef uint USItype;

typedef float SFtype;

typedef struct QueueDefinition xQUEUE;

typedef struct QUEUE_REGISTRY_ITEM QUEUE_REGISTRY_ITEM, *PQUEUE_REGISTRY_ITEM;

typedef struct QUEUE_REGISTRY_ITEM xQueueRegistryItem;

typedef xQueueRegistryItem QueueRegistryItem_t;

struct QUEUE_REGISTRY_ITEM {
    char * pcQueueName;
    QueueHandle_t xHandle;
};

typedef struct QueuePointers QueuePointers, *PQueuePointers;

typedef struct QueuePointers QueuePointers_t;

struct QueuePointers {
    int8_t * pcTail;
    int8_t * pcReadFrom;
};

typedef struct SemaphoreData SemaphoreData, *PSemaphoreData;

typedef struct SemaphoreData SemaphoreData_t;

typedef struct tskTaskControlBlock tskTaskControlBlock, *PtskTaskControlBlock;

typedef struct tskTaskControlBlock * TaskHandle_t;

typedef uint32_t StackType_t;

struct SemaphoreData {
    TaskHandle_t xMutexHolder;
    UBaseType_t uxRecursiveCallCount;
};

struct tskTaskControlBlock {
    StackType_t * pxTopOfStack;
    ListItem_t xStateListItem;
    ListItem_t xEventListItem;
    UBaseType_t uxPriority;
    StackType_t * pxStack;
    char pcTaskName[16];
    UBaseType_t uxCriticalNesting;
    UBaseType_t uxTCBNumber;
    UBaseType_t uxTaskNumber;
    UBaseType_t uxBasePriority;
    UBaseType_t uxMutexesHeld;
    uint32_t ulNotifiedValue;
    uint8_t ucNotifyState;
    uint8_t ucStaticallyAllocated;
    undefined field_0x5e;
    undefined field_0x5f;
};

typedef xQUEUE Queue_t;

typedef struct _httpc_state.conflict _httpc_state.conflict, *P_httpc_state.conflict;

typedef struct altcp_pcb altcp_pcb, *Paltcp_pcb;

typedef struct altcp_functions altcp_functions, *Paltcp_functions;

typedef err_t (* altcp_connected_fn)(void *, struct altcp_pcb *, err_t);

typedef err_t (* altcp_accept_fn)(void *, struct altcp_pcb *, err_t);

typedef struct _httpc_connection.conflict1 _httpc_connection.conflict1, *P_httpc_connection.conflict1;

typedef enum ehttpc_result {
    HTTPC_RESULT_ERR_CLOSED=4,
    HTTPC_RESULT_ERR_CONNECT=2,
    HTTPC_RESULT_ERR_CONTENT_LEN=9,
    HTTPC_RESULT_ERR_HOSTNAME=3,
    HTTPC_RESULT_ERR_MEM=7,
    HTTPC_RESULT_ERR_SVR_RESP=6,
    HTTPC_RESULT_ERR_TIMEOUT=5,
    HTTPC_RESULT_ERR_UNKNOWN=1,
    HTTPC_RESULT_LOCAL_ABORT=8,
    HTTPC_RESULT_OK=0
} ehttpc_result;

typedef enum ehttpc_result httpc_result_t;

typedef struct _httpc_state _httpc_state, *P_httpc_state;

typedef struct _httpc_state httpc_state_t;

typedef struct _httpc_connection.conflict1 httpc_connection_t.conflict1;

typedef enum ehttpc_parse_state {
    HTTPC_PARSE_RX_DATA=2,
    HTTPC_PARSE_WAIT_FIRST_LINE=0,
    HTTPC_PARSE_WAIT_HEADERS=1
} ehttpc_parse_state;

typedef enum ehttpc_parse_state httpc_parse_state_t;

typedef void (* altcp_set_poll_fn)(struct altcp_pcb *, u8_t);

typedef void (* altcp_abort_fn)(struct altcp_pcb *);

typedef err_t (* altcp_close_fn)(struct altcp_pcb *);

typedef err_t (* altcp_output_fn)(struct altcp_pcb *);

typedef u16_t (* altcp_mss_fn)(struct altcp_pcb *);

typedef u16_t (* altcp_sndbuf_fn)(struct altcp_pcb *);

typedef u16_t (* altcp_sndqueuelen_fn)(struct altcp_pcb *);

typedef void (* altcp_nagle_disable_fn)(struct altcp_pcb *);

typedef void (* altcp_nagle_enable_fn)(struct altcp_pcb *);

typedef void (* altcp_setprio_fn)(struct altcp_pcb *, u8_t);

typedef void (* altcp_dealloc_fn)(struct altcp_pcb *);

typedef struct altcp_allocator_s altcp_allocator_s, *Paltcp_allocator_s;

typedef struct altcp_allocator_s altcp_allocator_t;

typedef struct _httpc_connection.conflict _httpc_connection.conflict, *P_httpc_connection.conflict;

typedef struct _httpc_connection.conflict httpc_connection_t.conflict;

struct _httpc_connection.conflict {
    ip_addr_t proxy_addr;
    u16_t proxy_port;
    u8_t use_proxy;
    u8_t req_type;
    u8_t * data;
    u8_t content_type;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    altcp_allocator_t * altcp_allocator;
    void (* result_fn)(void *, httpc_result_t, u32_t, u32_t, err_t);
    err_t (* headers_done_fn)(httpc_state_t *, void *, struct pbuf *, u16_t, u32_t);
};

struct altcp_functions {
    altcp_set_poll_fn set_poll;
    void (* recved)(struct altcp_pcb *, u16_t);
    err_t (* bind)(struct altcp_pcb *, ip_addr_t *, u16_t);
    err_t (* connect)(struct altcp_pcb *, ip_addr_t *, u16_t, altcp_connected_fn);
    altcp_pcb * (* listen)(struct altcp_pcb *, u8_t, err_t *);
    altcp_abort_fn abort;
    altcp_close_fn close;
    err_t (* shutdown)(struct altcp_pcb *, int, int);
    err_t (* write)(struct altcp_pcb *, void *, u16_t, u8_t);
    altcp_output_fn output;
    altcp_mss_fn mss;
    altcp_sndbuf_fn sndbuf;
    altcp_sndqueuelen_fn sndqueuelen;
    altcp_nagle_disable_fn nagle_disable;
    altcp_nagle_enable_fn nagle_enable;
    int (* nagle_disabled)(struct altcp_pcb *);
    altcp_setprio_fn setprio;
    altcp_dealloc_fn dealloc;
    err_t (* addrinfo)(struct altcp_pcb *, int, ip_addr_t *, u16_t *);
    ip_addr_t * (* getip)(struct altcp_pcb *, int);
    u16_t (* getport)(struct altcp_pcb *, int);
};

struct _httpc_state.conflict {
    struct altcp_pcb * pcb;
    ip_addr_t remote_addr;
    u16_t remote_port;
    undefined field_0xa;
    undefined field_0xb;
    int timeout_ticks;
    struct pbuf * request;
    struct pbuf * rx_hdrs;
    u16_t rx_http_version;
    u16_t rx_status;
    err_t (* recv_fn)(void *, struct altcp_pcb *, struct pbuf *, err_t);
    httpc_connection_t.conflict1 * conn_settings;
    void * callback_arg;
    u32_t rx_content_len;
    u32_t hdr_content_len;
    httpc_parse_state_t parse_state;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

struct altcp_pcb {
    struct altcp_functions * fns;
    struct altcp_pcb * inner_conn;
    void * arg;
    void * state;
    altcp_accept_fn accept;
    altcp_connected_fn connected;
    err_t (* recv)(void *, struct altcp_pcb *, struct pbuf *, err_t);
    err_t (* sent)(void *, struct altcp_pcb *, u16_t);
    err_t (* poll)(void *, struct altcp_pcb *);
    void (* err)(void *, err_t);
    u8_t pollinterval;
    undefined field_0x29;
    undefined field_0x2a;
    undefined field_0x2b;
};

struct _httpc_connection.conflict1 {
    ip_addr_t proxy_addr;
    u16_t proxy_port;
    u8_t use_proxy;
    u8_t req_type;
    u8_t * data;
    u8_t content_type;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    altcp_allocator_t * altcp_allocator;
    void (* result_fn)(void *, httpc_result_t, u32_t, u32_t, err_t);
    err_t (* headers_done_fn)(httpc_state_t *, void *, struct pbuf *, u16_t, u32_t);
};

struct altcp_allocator_s {
    altcp_pcb * (* alloc)(void *, u8_t);
    void * arg;
};

struct _httpc_state {
    struct altcp_pcb * pcb;
    ip_addr_t remote_addr;
    u16_t remote_port;
    undefined field_0xa;
    undefined field_0xb;
    int timeout_ticks;
    struct pbuf * request;
    struct pbuf * rx_hdrs;
    u16_t rx_http_version;
    u16_t rx_status;
    err_t (* recv_fn)(void *, struct altcp_pcb *, struct pbuf *, err_t);
    httpc_connection_t.conflict * conn_settings;
    void * callback_arg;
    u32_t rx_content_len;
    u32_t hdr_content_len;
    httpc_parse_state_t parse_state;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef enum BL_AHB_Slave1_Type {
    BL_AHB_SLAVE1_CCI=8,
    BL_AHB_SLAVE1_CKS=23,
    BL_AHB_SLAVE1_DBG=3,
    BL_AHB_SLAVE1_DMA=12,
    BL_AHB_SLAVE1_EFUSE=7,
    BL_AHB_SLAVE1_GLB=0,
    BL_AHB_SLAVE1_GPIP=2,
    BL_AHB_SLAVE1_I2C=19,
    BL_AHB_SLAVE1_IRR=22,
    BL_AHB_SLAVE1_L1C=9,
    BL_AHB_SLAVE1_MAX=24,
    BL_AHB_SLAVE1_PDSHBN=14,
    BL_AHB_SLAVE1_PWM=20,
    BL_AHB_SLAVE1_RF=1,
    BL_AHB_SLAVE1_SDU=13,
    BL_AHB_SLAVE1_SEC=4,
    BL_AHB_SLAVE1_SFC=11,
    BL_AHB_SLAVE1_SPI=18,
    BL_AHB_SLAVE1_TMR=21,
    BL_AHB_SLAVE1_TZ1=5,
    BL_AHB_SLAVE1_TZ2=6,
    BL_AHB_SLAVE1_UART0=16,
    BL_AHB_SLAVE1_UART1=17,
    BL_AHB_SLAVE1_WRAM=15
} BL_AHB_Slave1_Type;

typedef struct _httpc_connection.conflict2 _httpc_connection.conflict2, *P_httpc_connection.conflict2;

struct _httpc_connection.conflict2 {
    ip_addr_t proxy_addr;
    u16_t proxy_port;
    u8_t use_proxy;
    u8_t req_type;
    u8_t * data;
    u8_t content_type;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    altcp_allocator_t * altcp_allocator;
    void (* result_fn)(void *, httpc_result_t, u32_t, u32_t, err_t);
    err_t (* headers_done_fn)(httpc_state_t *, void *, struct pbuf *, u16_t, u32_t);
};

typedef struct _httpc_connection.conflict3 _httpc_connection.conflict3, *P_httpc_connection.conflict3;

struct _httpc_connection.conflict3 {
    ip_addr_t proxy_addr;
    u16_t proxy_port;
    u8_t use_proxy;
    u8_t req_type;
    u8_t * data;
    u8_t content_type;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    altcp_allocator_t * altcp_allocator;
    void (* result_fn)(void *, httpc_result_t, u32_t, u32_t, err_t);
    err_t (* headers_done_fn)(httpc_state_t *, void *, struct pbuf *, u16_t, u32_t);
};

typedef struct _httpc_connection.conflict4 _httpc_connection.conflict4, *P_httpc_connection.conflict4;

struct _httpc_connection.conflict4 {
    ip_addr_t proxy_addr;
    u16_t proxy_port;
    u8_t use_proxy;
    u8_t req_type;
    u8_t * data;
    u8_t content_type;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    altcp_allocator_t * altcp_allocator;
    void (* result_fn)(void *, httpc_result_t, u32_t, u32_t, err_t);
    err_t (* headers_done_fn)(httpc_state_t *, void *, struct pbuf *, u16_t, u32_t);
};

typedef struct _httpc_connection.conflict5 _httpc_connection.conflict5, *P_httpc_connection.conflict5;

struct _httpc_connection.conflict5 {
    ip_addr_t proxy_addr;
    u16_t proxy_port;
    u8_t use_proxy;
    u8_t req_type;
    u8_t * data;
    u8_t content_type;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    altcp_allocator_t * altcp_allocator;
    void (* result_fn)(void *, httpc_result_t, u32_t, u32_t, err_t);
    err_t (* headers_done_fn)(httpc_state_t *, void *, struct pbuf *, u16_t, u32_t);
};

typedef struct _httpc_connection.conflict5 httpc_connection_t.conflict4;

typedef struct _httpc_connection _httpc_connection, *P_httpc_connection;

typedef struct _httpc_connection httpc_connection_t;

struct _httpc_connection {
    ip_addr_t proxy_addr;
    u16_t proxy_port;
    u8_t use_proxy;
    u8_t req_type;
    u8_t * data;
    u8_t content_type;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    altcp_allocator_t * altcp_allocator;
    void (* result_fn)(void *, httpc_result_t, u32_t, u32_t, err_t);
    err_t (* headers_done_fn)(httpc_state_t *, void *, struct pbuf *, u16_t, u32_t);
};

typedef struct _httpc_connection.conflict4 httpc_connection_t.conflict3;

typedef struct _httpc_connection.conflict3 httpc_connection_t.conflict2;

typedef struct anon_struct.conflict383 anon_struct.conflict383, *Panon_struct.conflict383;

struct anon_struct.conflict383 {
    u8_t proto;
};

typedef struct api_msg api_msg, *Papi_msg;

typedef struct netconn netconn, *Pnetconn;

typedef enum netconn_evt {
    NETCONN_EVT_ERROR=4,
    NETCONN_EVT_RCVMINUS=1,
    NETCONN_EVT_RCVPLUS=0,
    NETCONN_EVT_SENDMINUS=3,
    NETCONN_EVT_SENDPLUS=2
} netconn_evt;

typedef union anon_union_for_msg anon_union_for_msg, *Panon_union_for_msg;

typedef enum netconn_type {
    NETCONN_INVALID=0,
    NETCONN_RAW=64,
    NETCONN_TCP=16,
    NETCONN_UDP=32,
    NETCONN_UDPLITE=33,
    NETCONN_UDPNOCHKSUM=34
} netconn_type;

typedef enum netconn_state {
    NETCONN_CLOSE=4,
    NETCONN_CONNECT=3,
    NETCONN_LISTEN=2,
    NETCONN_NONE=0,
    NETCONN_WRITE=1
} netconn_state;

typedef union anon_union_for_pcb anon_union_for_pcb, *Panon_union_for_pcb;

typedef QueueHandle_t SemaphoreHandle_t;

typedef SemaphoreHandle_t sys_sem_t;

typedef QueueHandle_t sys_mbox_t;

typedef int32_t s32_t;

typedef struct anon_struct.conflict384 anon_struct.conflict384, *Panon_struct.conflict384;

typedef struct anon_struct.conflict385 anon_struct.conflict385, *Panon_struct.conflict385;

typedef struct anon_struct.conflict386 anon_struct.conflict386, *Panon_struct.conflict386;

typedef struct anon_struct.conflict387 anon_struct.conflict387, *Panon_struct.conflict387;

typedef struct anon_struct.conflict388 anon_struct.conflict388, *Panon_struct.conflict388;

typedef struct anon_struct.conflict389 anon_struct.conflict389, *Panon_struct.conflict389;

typedef struct ip_pcb ip_pcb, *Pip_pcb;

typedef struct tcp_pcb tcp_pcb, *Ptcp_pcb;

typedef struct udp_pcb udp_pcb, *Pudp_pcb;

typedef struct raw_pcb raw_pcb, *Praw_pcb;

typedef struct netvector netvector, *Pnetvector;

typedef enum netconn_igmp {
    NETCONN_JOIN=0,
    NETCONN_LEAVE=1
} netconn_igmp;

typedef enum tcp_state {
    CLOSED=0,
    CLOSE_WAIT=7,
    CLOSING=8,
    ESTABLISHED=4,
    FIN_WAIT_1=5,
    FIN_WAIT_2=6,
    LAST_ACK=9,
    LISTEN=1,
    SYN_RCVD=3,
    SYN_SENT=2,
    TIME_WAIT=10
} tcp_state;

typedef u16_t tcpflags_t;

typedef u16_t tcpwnd_size_t;

typedef int16_t s16_t;

typedef struct tcp_seg tcp_seg, *Ptcp_seg;

typedef struct tcp_pcb_listen tcp_pcb_listen, *Ptcp_pcb_listen;

typedef err_t (* tcp_connected_fn)(void *, struct tcp_pcb *, err_t);

typedef struct tcp_hdr tcp_hdr, *Ptcp_hdr;

typedef err_t (* tcp_accept_fn)(void *, struct tcp_pcb *, err_t);

struct tcp_hdr {
    u16_t src;
    u16_t dest;
    u32_t seqno;
    u32_t ackno;
    u16_t _hdrlen_rsvd_flags;
    u16_t wnd;
    u16_t chksum;
    u16_t urgp;
};

struct netvector {
    void * ptr;
    size_t len;
};

union anon_union_for_pcb {
    struct ip_pcb * ip;
    struct tcp_pcb * tcp;
    struct udp_pcb * udp;
    struct raw_pcb * raw;
};

struct netconn {
    enum netconn_type type;
    enum netconn_state state;
    undefined field_0x2;
    undefined field_0x3;
    union anon_union_for_pcb pcb;
    err_t pending_err;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    sys_sem_t op_completed;
    sys_mbox_t recvmbox;
    sys_mbox_t acceptmbox;
    int socket;
    s32_t send_timeout;
    u32_t recv_timeout;
    u8_t flags;
    undefined field_0x25;
    undefined field_0x26;
    undefined field_0x27;
    struct api_msg * current_msg;
    void (* callback)(struct netconn *, enum netconn_evt, u16_t);
};

struct anon_struct.conflict388 {
    u8_t shut;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    u32_t time_started;
};

struct anon_struct.conflict386 {
    struct netvector * vector;
    u16_t vector_cnt;
    undefined field_0x6;
    undefined field_0x7;
    size_t vector_off;
    size_t len;
    size_t offset;
    u8_t apiflags;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
    u32_t time_started;
};

struct anon_struct.conflict389 {
    ip_addr_t * multiaddr;
    ip_addr_t * netif_addr;
    u8_t if_idx;
    enum netconn_igmp join_or_leave;
    undefined field_0xa;
    undefined field_0xb;
};

struct anon_struct.conflict384 {
    ip_addr_t * ipaddr;
    u16_t port;
    u8_t if_idx;
    undefined field_0x7;
};

struct anon_struct.conflict387 {
    size_t len;
};

struct anon_struct.conflict385 {
    ip_addr_t * ipaddr;
    u16_t * port;
    u8_t local;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
};

union anon_union_for_msg {
    struct netbuf * b;
    struct anon_struct.conflict383 n;
    struct anon_struct.conflict384 bc;
    struct anon_struct.conflict385 ad;
    struct anon_struct.conflict386 w;
    struct anon_struct.conflict387 r;
    struct anon_struct.conflict388 sd;
    struct anon_struct.conflict389 jl;
};

struct api_msg {
    struct netconn * conn;
    err_t err;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    union anon_union_for_msg msg;
};

struct tcp_pcb_listen {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb_listen * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    tcp_accept_fn accept;
};

struct udp_pcb {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct udp_pcb * next;
    u8_t flags;
    undefined field_0x11;
    u16_t local_port;
    u16_t remote_port;
    undefined field_0x16;
    undefined field_0x17;
    ip4_addr_t mcast_ip4;
    u8_t mcast_ifindex;
    u8_t mcast_ttl;
    undefined field_0x1e;
    undefined field_0x1f;
    void (* recv)(void *, struct udp_pcb *, struct pbuf *, ip_addr_t *, u16_t);
    void * recv_arg;
};

struct tcp_pcb {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

struct tcp_seg {
    struct tcp_seg * next;
    struct pbuf * p;
    u16_t len;
    u16_t chksum;
    u8_t chksum_swapped;
    u8_t flags;
    undefined field_0xe;
    undefined field_0xf;
    struct tcp_hdr * tcphdr;
};

struct ip_pcb {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
};

struct raw_pcb {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct raw_pcb * next;
    u8_t protocol;
    u8_t flags;
    u8_t mcast_ifindex;
    u8_t mcast_ttl;
    u8_t (* recv)(void *, struct raw_pcb *, struct pbuf *, ip_addr_t *);
    void * recv_arg;
};

typedef struct netifapi_msg netifapi_msg, *Pnetifapi_msg;

typedef struct tcpip_api_call_data tcpip_api_call_data, *Ptcpip_api_call_data;


// WARNING! conflicting data type names: /DWARF/api_msg.h/netifapi_msg/anon_union_for_msg - /DWARF/api_msg.h/api_msg/anon_union_for_msg

struct tcpip_api_call_data {
    err_t err;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    sys_sem_t sem;
};

struct netifapi_msg {
    struct tcpip_api_call_data call;
    struct netif * netif;
    union anon_union_for_msg msg;
};

typedef struct anon_struct.conflict392 anon_struct.conflict392, *Panon_struct.conflict392;

struct anon_struct.conflict392 {
    ip_addr_t * ipaddr;
    u16_t * port;
    u8_t local;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
};

typedef struct anon_struct.conflict393 anon_struct.conflict393, *Panon_struct.conflict393;

struct anon_struct.conflict393 {
    struct netvector * vector;
    u16_t vector_cnt;
    undefined field_0x6;
    undefined field_0x7;
    size_t vector_off;
    size_t len;
    size_t offset;
    u8_t apiflags;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
    u32_t time_started;
};

typedef struct anon_struct.conflict394 anon_struct.conflict394, *Panon_struct.conflict394;

struct anon_struct.conflict394 {
    u8_t shut;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    u32_t time_started;
};

typedef struct anon_struct.conflict395 anon_struct.conflict395, *Panon_struct.conflict395;

struct anon_struct.conflict395 {
    ip_addr_t * multiaddr;
    ip_addr_t * netif_addr;
    u8_t if_idx;
    enum netconn_igmp join_or_leave;
    undefined field_0xa;
    undefined field_0xb;
};

typedef struct anon_struct.conflict390 anon_struct.conflict390, *Panon_struct.conflict390;

struct anon_struct.conflict390 {
    u8_t proto;
};

typedef struct anon_struct.conflict391 anon_struct.conflict391, *Panon_struct.conflict391;

struct anon_struct.conflict391 {
    ip_addr_t * ipaddr;
    u16_t port;
    u8_t if_idx;
    undefined field_0x7;
};

typedef struct anon_struct.conflict396 anon_struct.conflict396, *Panon_struct.conflict396;

struct anon_struct.conflict396 {
    u8_t proto;
};

typedef struct anon_struct.conflict397 anon_struct.conflict397, *Panon_struct.conflict397;

struct anon_struct.conflict397 {
    ip_addr_t * ipaddr;
    u16_t port;
    u8_t if_idx;
    undefined field_0x7;
};

typedef struct anon_struct.conflict398 anon_struct.conflict398, *Panon_struct.conflict398;

struct anon_struct.conflict398 {
    ip_addr_t * ipaddr;
    u16_t * port;
    u8_t local;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
};

typedef struct anon_struct.conflict399 anon_struct.conflict399, *Panon_struct.conflict399;

struct anon_struct.conflict399 {
    struct netvector * vector;
    u16_t vector_cnt;
    undefined field_0x6;
    undefined field_0x7;
    size_t vector_off;
    size_t len;
    size_t offset;
    u8_t apiflags;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
    u32_t time_started;
};

typedef struct dns_api_msg dns_api_msg, *Pdns_api_msg;

struct dns_api_msg {
    char * name;
    ip_addr_t * addr;
    sys_sem_t * sem;
    err_t * err;
};

typedef struct anon_struct.conflict400 anon_struct.conflict400, *Panon_struct.conflict400;

struct anon_struct.conflict400 {
    u8_t shut;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    u32_t time_started;
};

typedef void (* netifapi_void_fn)(struct netif *);

typedef struct anon_struct.conflict401 anon_struct.conflict401, *Panon_struct.conflict401;

struct anon_struct.conflict401 {
    ip_addr_t * multiaddr;
    ip_addr_t * netif_addr;
    u8_t if_idx;
    enum netconn_igmp join_or_leave;
    undefined field_0xa;
    undefined field_0xb;
};

typedef err_t (* netifapi_errt_fn)(struct netif *);

typedef struct anon_struct.conflict378 anon_struct.conflict378, *Panon_struct.conflict378;

struct anon_struct.conflict378 {
    char * name;
    u8_t index;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct anon_struct.conflict375 anon_struct.conflict375, *Panon_struct.conflict375;

typedef err_t (* netif_init_fn)(struct netif *);

struct anon_struct.conflict375 {
    ip4_addr_t * ipaddr;
    ip4_addr_t * netmask;
    ip4_addr_t * gw;
    void * state;
    netif_init_fn init;
    err_t (* input)(struct pbuf *, struct netif *);
};

typedef struct anon_struct.conflict376 anon_struct.conflict376, *Panon_struct.conflict376;

struct anon_struct.conflict376 {
    netifapi_void_fn voidfunc;
    netifapi_errt_fn errtfunc;
};

typedef struct anon_struct.conflict377 anon_struct.conflict377, *Panon_struct.conflict377;

struct anon_struct.conflict377 {
    char * name;
    u8_t index;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct jsonStruct jsonStruct, *PjsonStruct;

typedef struct jsonStruct jsonStruct_t;

typedef enum JsonPrimitiveType {
    SHADOW_JSON_BOOL=8,
    SHADOW_JSON_DOUBLE=7,
    SHADOW_JSON_FLOAT=6,
    SHADOW_JSON_INT16=1,
    SHADOW_JSON_INT32=0,
    SHADOW_JSON_INT8=2,
    SHADOW_JSON_OBJECT=10,
    SHADOW_JSON_STRING=9,
    SHADOW_JSON_UINT16=4,
    SHADOW_JSON_UINT32=3,
    SHADOW_JSON_UINT8=5
} JsonPrimitiveType;

struct jsonStruct {
    char * pKey;
    void * pData;
    size_t dataLength;
    enum JsonPrimitiveType type;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    void (* cb)(char *, uint32_t, jsonStruct_t *);
};

typedef struct _rom_dir_t _rom_dir_t, *P_rom_dir_t;

struct _rom_dir_t {
    struct aos_dir_t dir;
    char * dir_start_addr;
    char * dir_end_addr;
    char * dir_cur_addr;
    struct aos_dirent_t cur_dirent;
};

typedef struct _rom_dir_t romfs_dir_t;

typedef struct romfh romfh, *Promfh;

struct romfh {
    int32_t nextfh;
    int32_t spec;
    int32_t size;
    int32_t checksum;
};

typedef struct StreamBufferDef_t StreamBufferDef_t, *PStreamBufferDef_t;

typedef struct StreamBufferDef_t * StreamBufferHandle_t;

struct StreamBufferDef_t {
    size_t xTail;
    size_t xHead;
    size_t xLength;
    size_t xTriggerLevelBytes;
    TaskHandle_t xTaskWaitingToReceive;
    TaskHandle_t xTaskWaitingToSend;
    uint8_t * pucBuffer;
    uint8_t ucFlags;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
    UBaseType_t uxStreamBufferNumber;
};

typedef long __suseconds_t;

typedef __suseconds_t suseconds_t;

typedef struct timeval timeval, *Ptimeval;

typedef longlong __int_least64_t;

typedef __int_least64_t time_t;

struct timeval {
    time_t tv_sec;
    suseconds_t tv_usec;
    undefined field_0xc;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
};

typedef struct apInfo_t apInfo_t, *PapInfo_t;

typedef struct BssConfig_t BssConfig_t, *PBssConfig_t;

typedef struct BssData_t BssData_t, *PBssData_t;

typedef struct apRsnConfig_t apRsnConfig_t, *PapRsnConfig_t;

typedef struct CommonMlmeData_t CommonMlmeData_t, *PCommonMlmeData_t;

typedef struct Cipher_t Cipher_t, *PCipher_t;

typedef struct Operation_t Operation_t, *POperation_t;

typedef UINT8 IEEEtypes_SsId_t[32];

typedef UINT8 IEEEtypes_Len_t;

typedef UINT8 IEEEtypes_DtimPeriod_t;

typedef UINT16 IEEEtypes_BcnInterval_t;

typedef UINT8 IEEEtypes_Addr_t;

typedef IEEEtypes_Addr_t IEEEtypes_MacAddr_t[6];

struct Cipher_t {
    UINT8 wep40:1;
    UINT8 wep104:1;
    UINT8 tkip:1;
    UINT8 ccmp:1;
    UINT8 rsvd:4;
};

struct Operation_t {
    UINT16 keyExchange:1;
    UINT16 authenticate:1;
    UINT16 reserved:14;
};

struct apRsnConfig_t {
    struct Cipher_t mcstCipher;
    UINT8 mcstCipherCount;
    struct Cipher_t wpaUcstCipher;
    UINT8 wpaUcstCipherCount;
    struct Cipher_t wpa2UcstCipher;
    UINT8 wpa2UcstCipherCount;
    UINT16 AuthKey;
    UINT16 AuthKeyCount;
    struct Operation_t Akmp;
    UINT32 GrpReKeyTime;
    UINT8 PSKPassPhrase[64];
    UINT8 PSKPassPhraseLen;
    UINT8 PSKValue[32];
    UINT8 MaxPwsHskRetries;
    UINT8 MaxGrpHskRetries;
    undefined field_0x73;
    UINT32 PwsHskTimeOut;
    UINT32 GrpHskTimeOut;
};

struct CommonMlmeData_t {
    IEEEtypes_SsId_t SsId;
    IEEEtypes_Len_t SsIdLen;
    IEEEtypes_DtimPeriod_t DtimPeriod;
    IEEEtypes_BcnInterval_t BcnPeriod;
    IEEEtypes_MacAddr_t BssId;
    UINT16 RtsThresh;
    UINT16 FragThresh;
    UINT8 ShortRetryLim;
    UINT8 LongRetryLim;
    UINT8 MbssBcnIntFac;
    UINT8 MbssCurBcnIntCnt;
    UINT16 Reserved;
};

struct BssConfig_t {
    UINT32 StaAgeOutTime;
    UINT32 PsStaAgeOutTime;
    struct apRsnConfig_t RsnConfig;
    struct CommonMlmeData_t comData;
};

struct BssData_t {
    BOOLEAN updatePassPhrase;
    struct mm_timer_tag apMicTimer;
    struct KeyData_t grpKeyData;
    UINT8 GNonce[32];
    UINT32 grpRekeyBcnCntConfigured;
    UINT32 grpRekeyBcnCntRemaining;
};

struct apInfo_t {
    struct BssConfig_t bssConfig;
    struct BssData_t bssData;
    UINT8 ApStop_Req_Pending;
    undefined field_0x11d;
    undefined field_0x11e;
    undefined field_0x11f;
};

typedef struct _txQingInfo_t _txQingInfo_t, *P_txQingInfo_t;

typedef enum IEEEtypes_PwrMgmtMode_e {
    PWR_MODE_ACTIVE=0,
    PWR_MODE_PWR_SAVE=1
} IEEEtypes_PwrMgmtMode_e;

struct _txQingInfo_t {
    enum IEEEtypes_PwrMgmtMode_e mode;
};

typedef struct staData_t staData_t, *PstaData_t;

typedef struct _txQingInfo_t txQingInfo_t;

typedef struct apKeyMgmtInfoSta_t apKeyMgmtInfoSta_t, *PapKeyMgmtInfoSta_t;

typedef struct apKeyMgmtInfoStaRom_t apKeyMgmtInfoStaRom_t, *PapKeyMgmtInfoStaRom_t;

typedef struct SecurityMode_t SecurityMode_t, *PSecurityMode_t;

typedef enum keyMgmtState_e {
    GRPMSG1_PENDING=5,
    GRP_REKEY_MSG1_PENDING=7,
    HSK_DUMMY_STATE=9,
    HSK_END=10,
    HSK_NOT_STARTED=0,
    MSG1_PENDING=1,
    MSG3_PENDING=3,
    WAITING_4_GRPMSG2=6,
    WAITING_4_GRP_REKEY_MSG2=8,
    WAITING_4_MSG2=2,
    WAITING_4_MSG4=4
} keyMgmtState_e;

struct SecurityMode_t {
    UINT16 noRsn:1;
    UINT16 wepStatic:1;
    UINT16 wepDynamic:1;
    UINT16 wpa:1;
    UINT16 wpaNone:1;
    UINT16 wpa2:1;
    UINT16 cckm:1;
    UINT16 wapi:1;
    UINT16 wpa3:1;
    UINT16 rsvd:7;
};

struct apKeyMgmtInfoStaRom_t {
    UINT16 staRsnCap;
    struct SecurityMode_t staSecType;
    struct Cipher_t staUcstCipher;
    UINT8 staAkmType;
    enum keyMgmtState_e keyMgmtState;
    undefined field_0x7;
};

struct apKeyMgmtInfoSta_t {
    struct apKeyMgmtInfoStaRom_t rom;
    UINT8 numHskTries;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    UINT32 counterLo;
    UINT32 counterHi;
    struct mm_timer_tag HskTimer;
    UINT8 EAPOL_MIC_Key[16];
    UINT8 EAPOL_Encr_Key[16];
    UINT8 EAPOLProtoVersion;
    UINT8 rsvd[3];
};

struct staData_t {
    txQingInfo_t pwrSaveInfo;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    struct apKeyMgmtInfoSta_t keyMgmtInfo;
};

typedef struct StreamBufferDef_t StreamBuffer_t;

typedef struct chan_env_tag chan_env_tag, *Pchan_env_tag;

typedef struct chan_ctxt_tag chan_ctxt_tag, *Pchan_ctxt_tag;

struct chan_env_tag {
    struct co_list list_free_ctxt;
    struct co_list list_sched_ctxt;
    struct co_list list_tbtt;
    struct co_list list_tbtt_delay;
    struct chan_ctxt_tag * current_channel;
    struct chan_ctxt_tag * chan_switch;
    struct mm_timer_tag tmr_tbtt_switch;
    struct mm_timer_tag tmr_cde;
    struct mm_timer_tag tmr_ctxt_op;
    struct mm_timer_tag tmr_conn_less;
    uint32_t cde_dur_us;
    uint32_t cde_time;
    uint8_t status;
    uint8_t cfm_cnt;
    uint8_t nb_sched_ctxt;
    uint8_t pm;
};

struct chan_ctxt_tag {
    struct co_list_hdr list_hdr;
    struct mm_chan_ctxt_add_req channel;
    ke_task_id_t taskid;
    uint16_t nb_slots;
    uint16_t nb_rem_slots;
    uint16_t nb_res_slots;
    uint8_t status;
    uint8_t idx;
    uint8_t nb_linked_vif;
    uint8_t vif_index;
    undefined field_0x1a;
    undefined field_0x1b;
};

typedef struct chan_tbtt_tag chan_tbtt_tag, *Pchan_tbtt_tag;

struct chan_tbtt_tag {
    struct co_list_hdr list_hdr;
    uint32_t time;
    uint8_t vif_index;
    uint8_t priority;
    uint8_t status;
    undefined field_0xb;
};

typedef enum chan_tbtt_status {
    CHAN_TBTT_NOT_PROG=0,
    CHAN_TBTT_PRESENCE=2,
    CHAN_TBTT_PROG=1,
    CHAN_TBTT_STATUS_MAX=3
} chan_tbtt_status;

typedef enum chan_env_status_bit {
    CHAN_ENV_BCN_DETECT_BIT=6,
    CHAN_ENV_BIT_MAX=7,
    CHAN_ENV_DELAY_PROG_BIT=4,
    CHAN_ENV_ROC_BIT=2,
    CHAN_ENV_ROC_WAIT_BIT=0,
    CHAN_ENV_SCAN_BIT=3,
    CHAN_ENV_SCAN_WAIT_BIT=1,
    CHAN_ENV_TIMEOUT_BIT=5
} chan_env_status_bit;

typedef enum chan_ctxt_status {
    CHAN_CTXT_STATUS_MAX=7,
    CHAN_GOTO_IDLE=2,
    CHAN_NOT_PROG=1,
    CHAN_NOT_SCHEDULED=0,
    CHAN_PRESENT=5,
    CHAN_SENDING_NOA=6,
    CHAN_WAITING_END=4,
    CHAN_WAIT_NOA_CFM=3
} chan_ctxt_status;

typedef struct txl_cfm_env_tag txl_cfm_env_tag, *Ptxl_cfm_env_tag;

struct txl_cfm_env_tag {
    struct co_list cfmlist[5];
};

typedef enum rxu_msg_tag {
    RXU_MGT_IND=11264,
    RXU_NULL_DATA=11265
} rxu_msg_tag;

typedef struct rxu_mgt_ind rxu_mgt_ind, *Prxu_mgt_ind;

struct rxu_mgt_ind {
    uint16_t length;
    uint16_t framectrl;
    uint16_t center_freq;
    uint8_t band;
    uint8_t sta_idx;
    uint8_t inst_nbr;
    uint8_t sa[6];
    undefined field_0xf;
    uint32_t tsflo;
    uint32_t tsfhi;
    int8_t rssi;
    int8_t ppm_abs;
    int8_t ppm_rel;
    uint8_t data_rate;
    uint32_t[0] payload;
};

typedef struct ota_header ota_header, *Pota_header;


// WARNING! conflicting data type names: /DWARF/bl_sys_ota_cli.c/ota_header/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u

struct ota_header {
    union anon_union_for_u u;
};

typedef struct ota_header ota_header_t;

typedef struct anon_struct.conflict367 anon_struct.conflict367, *Panon_struct.conflict367;

struct anon_struct.conflict367 {
    uint8_t header[16];
    uint8_t type[4];
    uint32_t len;
    uint8_t pad0[8];
    uint8_t ver_hardware[16];
    uint8_t ver_software[16];
    uint8_t sha256[32];
};

typedef struct anon_struct.conflict366 anon_struct.conflict366, *Panon_struct.conflict366;

struct anon_struct.conflict366 {
    uint8_t header[16];
    uint8_t type[4];
    uint32_t len;
    uint8_t pad0[8];
    uint8_t ver_hardware[16];
    uint8_t ver_software[16];
    uint8_t sha256[32];
};

typedef struct wifi_pkt wifi_pkt, *Pwifi_pkt;

struct wifi_pkt {
    uint32_t pkt[4];
    void * pbuf[4];
    uint16_t len[4];
};

typedef struct llc_snap llc_snap, *Pllc_snap;

struct llc_snap {
    uint16_t dsap_ssap;
    uint16_t control_oui0;
    uint16_t oui1_2;
    uint16_t proto_id;
};

typedef struct llc_snap_short llc_snap_short, *Pllc_snap_short;

struct llc_snap_short {
    uint16_t dsap_ssap;
    uint16_t control_oui0;
    uint16_t oui1_2;
};

typedef void * aos_loop_t;

typedef struct yloop_sock_t yloop_sock_t, *Pyloop_sock_t;

struct yloop_sock_t {
    int sock;
    void * private_data;
    void (* cb)(int, void *);
};

typedef struct input_event_t input_event_t, *Pinput_event_t;

struct input_event_t {
    uint32_t time;
    uint16_t type;
    uint16_t code;
    ulong value;
    ulong extra;
};

typedef struct yloop_ctx_t yloop_ctx_t, *Pyloop_ctx_t;

typedef struct pollfd pollfd, *Ppollfd;

struct pollfd {
    int fd;
    short events;
    short revents;
};

struct yloop_ctx_t {
    dlist_t timeouts;
    struct pollfd * pollfds;
    struct yloop_sock_t * readers;
    int eventfd;
    uint16_t max_sock;
    uint8_t reader_count;
    _Bool pending_terminate;
    _Bool terminate;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
};

typedef struct wifi_mgmr_ap_item wifi_mgmr_ap_item, *Pwifi_mgmr_ap_item;

typedef struct wifi_mgmr_ap_item wifi_mgmr_ap_item_t;

struct wifi_mgmr_ap_item {
    char ssid[32];
    char ssid_tail[1];
    undefined field_0x21;
    undefined field_0x22;
    undefined field_0x23;
    uint32_t ssid_len;
    uint8_t bssid[6];
    uint8_t channel;
    uint8_t auth;
    int8_t rssi;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef enum WIFI_STATE_ENUM_LIST {
    WIFI_STATE_CONNECTED_IP_GETTING=3,
    WIFI_STATE_CONNECTED_IP_GOT=4,
    WIFI_STATE_CONNECTING=2,
    WIFI_STATE_DISCONNECT=5,
    WIFI_STATE_IDLE=1,
    WIFI_STATE_IFDOWN=6,
    WIFI_STATE_NO_AP_FOUND=9,
    WIFI_STATE_PSK_ERROR=8,
    WIFI_STATE_SNIFFER=7,
    WIFI_STATE_UNKNOWN=0,
    WIFI_STATE_WITH_AP_CONNECTED_IP_GETTING=19,
    WIFI_STATE_WITH_AP_CONNECTED_IP_GOT=20,
    WIFI_STATE_WITH_AP_CONNECTING=18,
    WIFI_STATE_WITH_AP_DISCONNECT=21,
    WIFI_STATE_WITH_AP_IDLE=17
} WIFI_STATE_ENUM_LIST;

typedef struct wifi_conf wifi_conf, *Pwifi_conf;

typedef struct wifi_conf wifi_conf_t;

struct wifi_conf {
    char country_code[3];
    undefined field_0x3;
    int channel_nums;
};

typedef struct wifi_sta_basic_info wifi_sta_basic_info, *Pwifi_sta_basic_info;

struct wifi_sta_basic_info {
    uint8_t sta_idx;
    uint8_t is_used;
    uint8_t sta_mac[6];
    uint32_t tsfhi;
    uint32_t tsflo;
    int rssi;
    uint8_t data_rate;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct wifi_mgmr_sta_connect_ind_stat_info wifi_mgmr_sta_connect_ind_stat_info, *Pwifi_mgmr_sta_connect_ind_stat_info;

typedef struct wifi_mgmr_sta_connect_ind_stat_info wifi_mgmr_sta_connect_ind_stat_info_t;

struct wifi_mgmr_sta_connect_ind_stat_info {
    uint16_t status_code;
    uint8_t type_ind;
    char ssid[32];
    char psk[65];
    char pmk[64];
    uint8_t bssid[6];
    uint16_t chan_freq;
    uint8_t chan_band;
    undefined field_0xad;
};

typedef void * wifi_interface_t;

typedef enum WIFI_SCAN_DONE_EVENT_TYPE {
    WIFI_SCAN_DONE_EVENT_BUSY=1,
    WIFI_SCAN_DONE_EVENT_OK=0
} WIFI_SCAN_DONE_EVENT_TYPE;

typedef struct rx_cntrl_pm_mon rx_cntrl_pm_mon, *Prx_cntrl_pm_mon;

struct rx_cntrl_pm_mon {
    struct mac_addr addr;
    uint8_t pm_state;
    _Bool mon;
};

typedef struct rx_cntrl_ipcdesc rx_cntrl_ipcdesc, *Prx_cntrl_ipcdesc;

struct rx_cntrl_ipcdesc {
    uint32_t host_id;
};

typedef struct rxu_cntrl_env_tag rxu_cntrl_env_tag, *Prxu_cntrl_env_tag;

typedef struct rx_cntrl_rx_status rx_cntrl_rx_status, *Prx_cntrl_rx_status;

typedef struct rx_cntrl_dupli rx_cntrl_dupli, *Prx_cntrl_dupli;

struct rx_cntrl_dupli {
    struct mac_addr last_src_addr;
    uint16_t last_seq_cntl;
};

struct rx_cntrl_rx_status {
    uint16_t frame_cntl;
    uint16_t seq_cntl;
    uint16_t sn;
    uint8_t fn;
    uint8_t tid;
    uint8_t machdr_len;
    uint8_t sta_idx;
    uint8_t vif_idx;
    uint8_t dst_idx;
    undefined field_0xc;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint64_t pn;
    uint32_t statinfo;
    uint32_t host_buf_addr;
    struct key_info_tag * key;
    struct mac_addr da;
    struct mac_addr sa;
    uint8_t frame_info;
    _Bool eth_len_present;
    uint8_t payl_offset;
    undefined field_0x33;
    undefined field_0x34;
    undefined field_0x35;
    undefined field_0x36;
    undefined field_0x37;
};

struct rxu_cntrl_env_tag {
    struct rx_cntrl_rx_status rx_status;
    struct co_list rxdesc_pending;
    struct co_list rxdesc_ready;
    struct rx_cntrl_ipcdesc rx_ipcdesc_stat;
    struct co_list rxu_defrag_free;
    struct co_list rxu_defrag_used;
    struct rx_cntrl_dupli rxu_dupli;
    struct mac_addr * mac_addr_ptr;
    struct rx_cntrl_pm_mon pm_mon;
    uint32_t ttr;
    undefined field_0x74;
    undefined field_0x75;
    undefined field_0x76;
    undefined field_0x77;
};

typedef enum rx_status_bits {
    RX_STAT_ALLOC=2,
    RX_STAT_COPY=32,
    RX_STAT_DELETE=4,
    RX_STAT_ETH_LEN_UPDATE=16,
    RX_STAT_FORWARD=1,
    RX_STAT_LEN_UPDATE=8
} rx_status_bits;

typedef struct rxu_mic_calc rxu_mic_calc, *Prxu_mic_calc;

typedef struct mic_calc mic_calc, *Pmic_calc;

struct mic_calc {
    uint32_t mic_key_least;
    uint32_t mic_key_most;
    uint32_t last_m_i;
    uint8_t last_m_i_len;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
};

struct rxu_mic_calc {
    struct mic_calc mic_calc;
    uint32_t last_bytes[2];
};

typedef enum rxu_cntrl_frame_info_pos {
    RXU_CNTRL_MIC_CHECK_NEEDED=1,
    RXU_CNTRL_NEW_MESH_PEER=4,
    RXU_CNTRL_PN_CHECK_NEEDED=2
} rxu_cntrl_frame_info_pos;

typedef struct A_BLOCK_LINK A_BLOCK_LINK, *PA_BLOCK_LINK;

struct A_BLOCK_LINK {
    struct A_BLOCK_LINK * pxNextFreeBlock;
    size_t xBlockSize;
};

typedef struct A_BLOCK_LINK BlockLink_t;

typedef struct yloop_timeout_s yloop_timeout_s, *Pyloop_timeout_s;

typedef struct yloop_timeout_s yloop_timeout_t;

struct yloop_timeout_s {
    dlist_t next;
    longlong timeout_ms;
    void * private_data;
    void (* cb)(void *);
    int ms;
    undefined field_0x1c;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
};

typedef void (* altcp_err_fn.conflict)(void *, err_t);

typedef struct altcp_pcb.conflict altcp_pcb.conflict, *Paltcp_pcb.conflict;

struct altcp_pcb.conflict {
    struct altcp_functions * fns;
    struct altcp_pcb * inner_conn;
    void * arg;
    void * state;
    altcp_accept_fn accept;
    altcp_connected_fn connected;
    err_t (* recv)(void *, struct altcp_pcb *, struct pbuf *, err_t);
    err_t (* sent)(void *, struct altcp_pcb *, u16_t);
    err_t (* poll)(void *, struct altcp_pcb *);
    void (* err)(void *, err_t);
    u8_t pollinterval;
    undefined field_0x29;
    undefined field_0x2a;
    undefined field_0x2b;
};

typedef struct altcp_pcb.conflict1 altcp_pcb.conflict1, *Paltcp_pcb.conflict1;

struct altcp_pcb.conflict1 {
    struct altcp_functions * fns;
    struct altcp_pcb * inner_conn;
    void * arg;
    void * state;
    altcp_accept_fn accept;
    altcp_connected_fn connected;
    err_t (* recv)(void *, struct altcp_pcb *, struct pbuf *, err_t);
    err_t (* sent)(void *, struct altcp_pcb *, u16_t);
    err_t (* poll)(void *, struct altcp_pcb *);
    void (* err)(void *, err_t);
    u8_t pollinterval;
    undefined field_0x29;
    undefined field_0x2a;
    undefined field_0x2b;
};

typedef struct altcp_pcb.conflict2 altcp_pcb.conflict2, *Paltcp_pcb.conflict2;

struct altcp_pcb.conflict2 {
    struct altcp_functions * fns;
    struct altcp_pcb * inner_conn;
    void * arg;
    void * state;
    altcp_accept_fn accept;
    altcp_connected_fn connected;
    err_t (* recv)(void *, struct altcp_pcb *, struct pbuf *, err_t);
    err_t (* sent)(void *, struct altcp_pcb *, u16_t);
    err_t (* poll)(void *, struct altcp_pcb *);
    altcp_err_fn.conflict err;
    u8_t pollinterval;
    undefined field_0x29;
    undefined field_0x2a;
    undefined field_0x2b;
};

typedef enum bam_state_tag {
    BAM_ACTIVE=1,
    BAM_CHECK_ADMISSION=3,
    BAM_IDLE=0,
    BAM_RESET=4,
    BAM_STATE_MAX=5,
    BAM_WAIT_RSP=2
} bam_state_tag;

typedef struct co_read16_struct co_read16_struct, *Pco_read16_struct;

struct co_read16_struct {
    uint16_t val;
};

typedef struct co_read32_struct co_read32_struct, *Pco_read32_struct;

struct co_read32_struct {
    uint32_t val;
};

typedef struct mbedtls_ctr_drbg_context.conflict mbedtls_ctr_drbg_context.conflict, *Pmbedtls_ctr_drbg_context.conflict;

struct mbedtls_ctr_drbg_context.conflict {
    uchar counter[16];
    int reseed_counter;
    int prediction_resistance;
    size_t entropy_len;
    int reseed_interval;
    struct mbedtls_aes_context aes_ctx;
    int (* f_entropy)(void *, uchar *, size_t);
    void * p_entropy;
};

typedef struct tskTaskControlBlock tskTCB;

typedef tskTCB TCB_t;

typedef int sys_prot_t;

typedef struct ipc_host_cb_tag ipc_host_cb_tag, *Pipc_host_cb_tag;

struct ipc_host_cb_tag {
    int (* send_data_cfm)(void *, void *);
    uint8_t (* recv_data_ind)(void *, void *);
    uint8_t (* recv_radar_ind)(void *, void *);
    uint8_t (* recv_msg_ind)(void *, void *);
    uint8_t (* recv_msgack_ind)(void *, void *);
    uint8_t (* recv_dbg_ind)(void *, void *);
    void (* prim_tbtt_ind)(void *);
    void (* sec_tbtt_ind)(void *);
};

typedef struct ipc_hostbuf ipc_hostbuf, *Pipc_hostbuf;

struct ipc_hostbuf {
    void * hostid;
    uint32_t dma_addr;
};

typedef struct ipc_host_env_tag ipc_host_env_tag, *Pipc_host_env_tag;

struct ipc_host_env_tag {
    struct ipc_host_cb_tag cb;
    struct ipc_shared_env_tag.conflict30 * shared;
    struct ipc_hostbuf ipc_host_rxdesc_array[2];
    uint8_t ipc_host_rxdesc_idx;
    uint8_t rxdesc_nb;
    uint8_t ipc_host_rxbuf_idx;
    undefined field_0x37;
    uint32_t rx_bufnb;
    uint32_t rx_bufsz;
    uint32_t txdesc_free_idx;
    uint32_t txdesc_used_idx;
    void * tx_host_id0[4];
    void * * tx_host_id;
    struct txdesc_host * txdesc;
    struct ipc_hostbuf ipc_host_msgbuf_array[8];
    uint8_t ipc_host_msge2a_idx;
    undefined field_0xa1;
    undefined field_0xa2;
    undefined field_0xa3;
    uint32_t ipc_e2amsg_bufnb;
    uint32_t ipc_e2amsg_bufsz;
    uint8_t msga2e_cnt;
    undefined field_0xad;
    undefined field_0xae;
    undefined field_0xaf;
    void * msga2e_hostid;
    struct ipc_hostbuf ipc_host_dbgbuf_array[4];
    uint8_t ipc_host_dbg_idx;
    undefined field_0xd5;
    undefined field_0xd6;
    undefined field_0xd7;
    uint32_t ipc_dbg_bufnb;
    uint32_t ipc_dbg_bufsz;
    void * pthis;
};

typedef struct rfc_status_tag.conflict rfc_status_tag.conflict, *Prfc_status_tag.conflict;

struct rfc_status_tag.conflict {
    uint32_t pkdet_out_raw:1;
    uint32_t dig_xtal_clk_dbg:1;
    uint32_t clk_ble_16m_dbg:1;
    uint32_t clk_rc_dbg0:1;
    uint32_t clk_adcpow_dbg:1;
    uint32_t clk_fetx_dbg:1;
    uint32_t clk_ferx_dbg:1;
    uint32_t clkpll_postdiv_outclk_dbg:1;
    uint32_t clk_soc_480m_dbg:1;
    uint32_t clk_soc_240m_dbg:1;
    uint32_t clk_soc_192m_dbg:1;
    uint32_t clk_soc_160m_dbg:1;
    uint32_t clk_soc_120m_dbg:1;
    uint32_t clk_soc_96m_dbg:1;
    uint32_t clk_soc_80m_dbg:1;
    uint32_t clk_soc_48m_dbg:1;
    uint32_t clk_soc_32m_dbg:1;
    uint32_t pad_pkdet_out:1;
    uint32_t pad_agc_ctrl:10;
    uint32_t rf_pkdet_rst_hw:1;
    uint32_t rf_cbw_wifi:2;
    uint32_t lo_unlocked:1;
    uint32_t fsm_pu_txbuf:1;
    uint32_t fsm_pu_rxbuf:1;
    uint32_t fsm_pu_tosdac:1;
    uint32_t fsm_pu_dac:1;
    uint32_t fsm_trsw_en:1;
    uint32_t fsm_pu_adc:1;
    uint32_t fsm_pu_pkdet:1;
    uint32_t fsm_pu_rbb:1;
    uint32_t fsm_pu_rmx:1;
    uint32_t fsm_pu_rmxgm:1;
    uint32_t fsm_pu_lna:1;
    uint32_t clk_rc_dbg2:1;
    uint32_t rf_lna_ind_hw:4;
    uint32_t rf_rbb_ind_hw:4;
    uint32_t rf_tx_pow_lvl_hw:4;
    uint32_t rf_rc_lo_rdy:1;
    uint32_t rf_fsm_state:3;
    uint32_t rf_rc_state:3;
    uint32_t clk_rc_dbg:1;
};

typedef struct rfc_status_tag rfc_status_tag, *Prfc_status_tag;

struct rfc_status_tag {
    uint32_t pkdet_out_raw:1;
    uint32_t dig_xtal_clk_dbg:1;
    uint32_t clk_ble_16m_dbg:1;
    uint32_t clk_rc_dbg0:1;
    uint32_t clk_adcpow_dbg:1;
    uint32_t clk_fetx_dbg:1;
    uint32_t clk_ferx_dbg:1;
    uint32_t clkpll_postdiv_outclk_dbg:1;
    uint32_t clk_soc_480m_dbg:1;
    uint32_t clk_soc_240m_dbg:1;
    uint32_t clk_soc_192m_dbg:1;
    uint32_t clk_soc_160m_dbg:1;
    uint32_t clk_soc_120m_dbg:1;
    uint32_t clk_soc_96m_dbg:1;
    uint32_t clk_soc_80m_dbg:1;
    uint32_t clk_soc_48m_dbg:1;
    uint32_t clk_soc_32m_dbg:1;
    uint32_t pad_pkdet_out:1;
    uint32_t pad_agc_ctrl:10;
    uint32_t rf_pkdet_rst_hw:1;
    uint32_t rf_cbw_wifi:2;
    uint32_t lo_unlocked:1;
    uint32_t fsm_pu_txbuf:1;
    uint32_t fsm_pu_rxbuf:1;
    uint32_t fsm_pu_tosdac:1;
    uint32_t fsm_pu_dac:1;
    uint32_t fsm_trsw_en:1;
    uint32_t fsm_pu_adc:1;
    uint32_t fsm_pu_pkdet:1;
    uint32_t fsm_pu_rbb:1;
    uint32_t fsm_pu_rmx:1;
    uint32_t fsm_pu_rmxgm:1;
    uint32_t fsm_pu_lna:1;
    uint32_t clk_rc_dbg2:1;
    uint32_t rf_lna_ind_hw:4;
    uint32_t rf_rbb_ind_hw:4;
    uint32_t rf_tx_pow_lvl_hw:4;
    uint32_t rf_rc_lo_rdy:1;
    uint32_t rf_fsm_state:3;
    uint32_t rf_rc_state:3;
    uint32_t clk_rc_dbg:1;
};

typedef struct sm_connect_req.conflict sm_connect_req.conflict, *Psm_connect_req.conflict;

typedef struct mac_addr.conflict57 mac_addr.conflict57, *Pmac_addr.conflict57;

struct mac_addr.conflict57 {
    u8_l array[6];
};

struct sm_connect_req.conflict {
    struct mac_ssid ssid;
    struct mac_addr.conflict57 bssid;
    struct scan_chan_tag chan;
    undefined field_0x2e;
    undefined field_0x2f;
    u32_l flags;
    u16_l ctrl_port_ethertype;
    u16_l ie_len;
    u16_l listen_interval;
    bool_l dont_wait_bcmc;
    u8_l auth_type;
    u8_l uapsd_queues;
    u8_l vif_idx;
    undefined field_0x3e;
    undefined field_0x3f;
    u32_l ie_buf[64];
    _Bool is_supplicant_enabled;
    uint8_t phrase[64];
    uint8_t phrase_pmk[64];
    undefined field_0x1c1;
    undefined field_0x1c2;
    undefined field_0x1c3;
};

typedef struct mm_set_denoise_req mm_set_denoise_req, *Pmm_set_denoise_req;

struct mm_set_denoise_req {
    u8_l denoise_mode;
};

typedef struct scanu_result_ind scanu_result_ind, *Pscanu_result_ind;

struct scanu_result_ind {
    uint16_t length;
    uint16_t framectrl;
    uint16_t center_freq;
    uint8_t band;
    uint8_t sta_idx;
    uint8_t inst_nbr;
    uint8_t sa[6];
    undefined field_0xf;
    uint32_t tsflo;
    uint32_t tsfhi;
    int8_t rssi;
    int8_t ppm_abs;
    int8_t ppm_rel;
    uint8_t data_rate;
    uint32_t[0] payload;
};

typedef struct lmac_msg lmac_msg, *Plmac_msg;

typedef u16 lmac_msg_id_t;

typedef u16 lmac_task_id_t;

typedef uint32_t u32.conflict1;

struct lmac_msg {
    lmac_msg_id_t id;
    lmac_task_id_t dest_id;
    lmac_task_id_t src_id;
    u16 param_len;
    u32.conflict1[0] param;
};

typedef struct Cipher_t.conflict1 Cipher_t.conflict1, *PCipher_t.conflict1;

struct Cipher_t.conflict1 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct anon_struct.conflict224 anon_struct.conflict224, *Panon_struct.conflict224;

struct anon_struct.conflict224 {
    uint32_t task;
    uint32_t element;
    uint32_t length;
    uint32_t[0] buf;
};

typedef struct anon_struct.conflict225 anon_struct.conflict225, *Panon_struct.conflict225;

struct anon_struct.conflict225 {
    uint32_t task;
    uint32_t element;
    uint32_t length;
    uint32_t[0] buf;
};

typedef struct anon_struct.conflict239 anon_struct.conflict239, *Panon_struct.conflict239;

struct anon_struct.conflict239 {
    uint32_t task;
    uint32_t element;
    uint32_t type;
    uint32_t length;
    uint32_t[0] buf;
};

typedef struct mm_channel_switch_ind mm_channel_switch_ind, *Pmm_channel_switch_ind;

struct mm_channel_switch_ind {
    u8_l chan_index;
    bool_l roc;
    u8_l vif_index;
    bool_l roc_tdls;
};

typedef struct Cipher_t.conflict Cipher_t.conflict, *PCipher_t.conflict;

struct Cipher_t.conflict {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef enum tdls_msg_tag {
    TDLS_CANCEL_CHAN_SWITCH_CFM=3077,
    TDLS_CANCEL_CHAN_SWITCH_REQ=3076,
    TDLS_CHAN_SWITCH_BASE_IND=3075,
    TDLS_CHAN_SWITCH_CFM=3073,
    TDLS_CHAN_SWITCH_IND=3074,
    TDLS_CHAN_SWITCH_REQ=3072,
    TDLS_MAX=3081,
    TDLS_PEER_PS_IND=3078,
    TDLS_PEER_TRAFFIC_IND_CFM=3080,
    TDLS_PEER_TRAFFIC_IND_REQ=3079
} tdls_msg_tag;

typedef struct anon_struct.conflict235 anon_struct.conflict235, *Panon_struct.conflict235;

struct anon_struct.conflict235 {
    uint32_t task;
    uint32_t element;
};

typedef struct anon_struct.conflict236 anon_struct.conflict236, *Panon_struct.conflict236;

struct anon_struct.conflict236 {
    uint32_t task;
    uint32_t element;
    uint32_t type;
    uint32_t length;
    uint32_t[0] buf;
};

typedef struct anon_struct.conflict237 anon_struct.conflict237, *Panon_struct.conflict237;

struct anon_struct.conflict237 {
    uint32_t task;
    uint32_t element;
};

typedef struct anon_struct.conflict238 anon_struct.conflict238, *Panon_struct.conflict238;

struct anon_struct.conflict238 {
    uint32_t task;
    uint32_t element;
};

typedef struct anon_struct.conflict359 anon_struct.conflict359, *Panon_struct.conflict359;

struct anon_struct.conflict359 {
    uint32_t task;
    uint32_t element;
    uint32_t length;
    uint32_t[0] buf;
};

typedef struct anon_struct.conflict352 anon_struct.conflict352, *Panon_struct.conflict352;

struct anon_struct.conflict352 {
    uint32_t task;
    uint32_t element;
    uint32_t length;
    uint32_t[0] buf;
};

typedef struct anon_struct.conflict233 anon_struct.conflict233, *Panon_struct.conflict233;

struct anon_struct.conflict233 {
    uint32_t task;
    uint32_t element;
    uint32_t length;
    uint32_t[0] buf;
};

typedef struct anon_struct.conflict234 anon_struct.conflict234, *Panon_struct.conflict234;

struct anon_struct.conflict234 {
    uint32_t task;
    uint32_t element;
};

typedef struct anon_struct.conflict311 anon_struct.conflict311, *Panon_struct.conflict311;

struct anon_struct.conflict311 {
    uint32_t task;
    uint32_t element;
    uint32_t length;
    uint32_t[0] buf;
};

typedef struct anon_struct.conflict316 anon_struct.conflict316, *Panon_struct.conflict316;

struct anon_struct.conflict316 {
    uint32_t task;
    uint32_t element;
    uint32_t length;
    uint32_t[0] buf;
};

typedef enum mm_msg_tag.conflict {
    MM_ADD_IF_CFM=7,
    MM_ADD_IF_REQ=6,
    MM_BA_ADD_CFM=41,
    MM_BA_ADD_REQ=40,
    MM_BA_DEL_CFM=43,
    MM_BA_DEL_REQ=42,
    MM_BCN_CHANGE_CFM=64,
    MM_BCN_CHANGE_REQ=63,
    MM_BFMER_ENABLE_REQ=80,
    MM_CFG_RSSI_REQ=86,
    MM_CHANNEL_PRE_SWITCH_IND=69,
    MM_CHANNEL_SURVEY_IND=79,
    MM_CHANNEL_SWITCH_IND=68,
    MM_CHAN_CTXT_ADD_CFM=52,
    MM_CHAN_CTXT_ADD_REQ=51,
    MM_CHAN_CTXT_DEL_CFM=54,
    MM_CHAN_CTXT_DEL_REQ=53,
    MM_CHAN_CTXT_LINK_CFM=56,
    MM_CHAN_CTXT_LINK_REQ=55,
    MM_CHAN_CTXT_SCHED_CFM=62,
    MM_CHAN_CTXT_SCHED_REQ=61,
    MM_CHAN_CTXT_UNLINK_CFM=58,
    MM_CHAN_CTXT_UNLINK_REQ=57,
    MM_CHAN_CTXT_UPDATE_CFM=60,
    MM_CHAN_CTXT_UPDATE_REQ=59,
    MM_CONNECTION_LOSS_IND=67,
    MM_CSA_COUNTER_IND=78,
    MM_CSA_FINISH_IND=88,
    MM_CSA_TRAFFIC_IND=89,
    MM_DENOISE_REQ=48,
    MM_KEY_ADD_CFM=37,
    MM_KEY_ADD_REQ=36,
    MM_KEY_DEL_CFM=39,
    MM_KEY_DEL_REQ=38,
    MM_MAX=96,
    MM_MONITOR_CFM=93,
    MM_MONITOR_CHANNEL_CFM=95,
    MM_MONITOR_CHANNEL_REQ=94,
    MM_MONITOR_REQ=92,
    MM_MU_GROUP_UPDATE_CFM=91,
    MM_MU_GROUP_UPDATE_REQ=90,
    MM_P2P_NOA_UPD_IND=85,
    MM_P2P_VIF_PS_CHANGE_IND=77,
    MM_PRIMARY_TBTT_IND=44,
    MM_PS_CHANGE_IND=73,
    MM_REMAIN_ON_CHANNEL_CFM=71,
    MM_REMAIN_ON_CHANNEL_EXP_IND=72,
    MM_REMAIN_ON_CHANNEL_REQ=70,
    MM_REMOVE_IF_CFM=9,
    MM_REMOVE_IF_REQ=8,
    MM_RESET_CFM=1,
    MM_RESET_REQ=0,
    MM_RSSI_STATUS_IND=87,
    MM_SECONDARY_TBTT_IND=45,
    MM_SET_BASIC_RATES_CFM=23,
    MM_SET_BASIC_RATES_REQ=22,
    MM_SET_BEACON_INT_CFM=21,
    MM_SET_BEACON_INT_REQ=20,
    MM_SET_BSSID_CFM=25,
    MM_SET_BSSID_REQ=24,
    MM_SET_CHANNEL_CFM=17,
    MM_SET_CHANNEL_REQ=16,
    MM_SET_DTIM_CFM=19,
    MM_SET_DTIM_REQ=18,
    MM_SET_EDCA_CFM=27,
    MM_SET_EDCA_REQ=26,
    MM_SET_FILTER_CFM=15,
    MM_SET_FILTER_REQ=14,
    MM_SET_IDLE_CFM=35,
    MM_SET_IDLE_REQ=34,
    MM_SET_MODE_CFM=29,
    MM_SET_MODE_REQ=28,
    MM_SET_P2P_NOA_CFM=83,
    MM_SET_P2P_NOA_REQ=81,
    MM_SET_P2P_OPPPS_CFM=84,
    MM_SET_P2P_OPPPS_REQ=82,
    MM_SET_POWER_CFM=47,
    MM_SET_POWER_REQ=46,
    MM_SET_PS_MODE_CFM=50,
    MM_SET_PS_MODE_REQ=49,
    MM_SET_PS_OPTIONS_CFM=76,
    MM_SET_PS_OPTIONS_REQ=75,
    MM_SET_SLOTTIME_CFM=33,
    MM_SET_SLOTTIME_REQ=32,
    MM_SET_VIF_STATE_CFM=31,
    MM_SET_VIF_STATE_REQ=30,
    MM_START_CFM=3,
    MM_START_REQ=2,
    MM_STA_ADD_CFM=11,
    MM_STA_ADD_REQ=10,
    MM_STA_DEL_CFM=13,
    MM_STA_DEL_REQ=12,
    MM_TIM_UPDATE_CFM=66,
    MM_TIM_UPDATE_REQ=65,
    MM_TRAFFIC_REQ_IND=74,
    MM_VERSION_CFM=5,
    MM_VERSION_REQ=4
} mm_msg_tag.conflict;

typedef struct anon_struct.conflict362 anon_struct.conflict362, *Panon_struct.conflict362;

struct anon_struct.conflict362 {
    uint32_t task;
    uint32_t element;
    uint32_t length;
    uint32_t[0] buf;
};

typedef struct sm_connect_ind.conflict sm_connect_ind.conflict, *Psm_connect_ind.conflict;

typedef struct mac_addr.conflict75 mac_addr.conflict75, *Pmac_addr.conflict75;

struct mac_addr.conflict75 {
    u8_l array[6];
};

struct sm_connect_ind.conflict {
    u16_l status_code;
    struct mac_addr.conflict75 bssid;
    bool_l roamed;
    u8_l vif_idx;
    u8_l ap_idx;
    u8_l ch_idx;
    bool_l qos;
    u8_l acm;
    u16_l assoc_req_ie_len;
    u16_l assoc_rsp_ie_len;
    undefined field_0x12;
    undefined field_0x13;
    u32_l assoc_ie_buf[200];
    u16_l aid;
    u8_l band;
    undefined field_0x337;
    u16_l center_freq;
    u8_l width;
    undefined field_0x33b;
    u32_l center_freq1;
    u32_l center_freq2;
    u32_l ac_param[4];
};

typedef struct mm_add_if_req.conflict mm_add_if_req.conflict, *Pmm_add_if_req.conflict;

typedef struct mac_addr.conflict55 mac_addr.conflict55, *Pmac_addr.conflict55;

struct mac_addr.conflict55 {
    u8_l array[6];
};

struct mm_add_if_req.conflict {
    u8_l type;
    struct mac_addr.conflict55 addr;
    bool_l p2p;
};

typedef struct anon_struct.conflict244 anon_struct.conflict244, *Panon_struct.conflict244;

struct anon_struct.conflict244 {
    uint32_t task;
    uint32_t element;
    uint32_t length;
    uint32_t[0] buf;
};

typedef enum mesh_msg_tag {
    MESH_MAX=9232,
    MESH_PATH_CREATE_CFM=9225,
    MESH_PATH_CREATE_REQ=9224,
    MESH_PATH_UPDATE_CFM=9227,
    MESH_PATH_UPDATE_IND=9230,
    MESH_PATH_UPDATE_REQ=9226,
    MESH_PEER_INFO_REQ=9222,
    MESH_PEER_INFO_RSP=9223,
    MESH_PEER_UPDATE_IND=9229,
    MESH_PEER_UPDATE_NTF=9229,
    MESH_PROXY_ADD_REQ=9228,
    MESH_PROXY_UPDATE_IND=9231,
    MESH_START_CFM=9217,
    MESH_START_REQ=9216,
    MESH_STOP_CFM=9219,
    MESH_STOP_REQ=9218,
    MESH_UPDATE_CFM=9221,
    MESH_UPDATE_REQ=9220
} mesh_msg_tag;

typedef struct apm_sta_add_ind.conflict apm_sta_add_ind.conflict, *Papm_sta_add_ind.conflict;

typedef struct mac_addr.conflict76 mac_addr.conflict76, *Pmac_addr.conflict76;

struct mac_addr.conflict76 {
    u8_l array[6];
};

struct apm_sta_add_ind.conflict {
    uint32_t flags;
    struct mac_addr.conflict76 sta_addr;
    uint8_t vif_idx;
    uint8_t sta_idx;
    int8_t rssi;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t tsflo;
    uint32_t tsfhi;
    uint8_t data_rate;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
};

typedef struct scanu_start_req.conflict scanu_start_req.conflict, *Pscanu_start_req.conflict;

typedef struct mac_addr.conflict56 mac_addr.conflict56, *Pmac_addr.conflict56;

struct mac_addr.conflict56 {
    u8_l array[6];
};

struct scanu_start_req.conflict {
    struct scan_chan_tag chan[42];
    struct mac_ssid ssid[2];
    struct mac_addr.conflict56 bssid;
    undefined field_0x146;
    undefined field_0x147;
    u32_l add_ies;
    u16_l add_ie_len;
    u8_l vif_idx;
    u8_l chan_cnt;
    u8_l ssid_cnt;
    _Bool no_cck;
    undefined field_0x152;
    undefined field_0x153;
};

typedef struct adc_ctx.conflict adc_ctx.conflict, *Padc_ctx.conflict;

struct adc_ctx.conflict {
    int mode;
    uint32_t * channel_data;
    void * adc_lli;
    int lli_flag;
    uint32_t chan_init_table;
    uint32_t data_size;
    void (* cb)(int, uint32_t *, uint32_t);
};

typedef struct adc_ctx adc_ctx, *Padc_ctx;

struct adc_ctx {
    int mode;
    uint32_t * channel_data;
    void * adc_lli;
    int lli_flag;
    uint32_t chan_init_table;
    uint32_t data_size;
    void (* cb)(int, uint32_t *, uint32_t);
};

typedef struct adc_ctx.conflict1 adc_ctx.conflict1, *Padc_ctx.conflict1;

typedef struct adc_ctx.conflict1 adc_ctx_t.conflict;

struct adc_ctx.conflict1 {
    int mode;
    uint32_t * channel_data;
    void * adc_lli;
    int lli_flag;
    uint32_t chan_init_table;
    uint32_t data_size;
    void (* cb)(int, uint32_t *, uint32_t);
};

typedef struct adc_ctx.conflict adc_ctx_t;


// WARNING! conflicting data type names: /DWARF/cli.c/handle_input/anon_struct - /DWARF/reent.h/anon_struct

typedef struct cli_command cli_command, *Pcli_command;

struct cli_command {
    char * name;
    char * help;
    void (* function)(char *, int, int, char * *);
};

typedef struct cli_st cli_st, *Pcli_st;

struct cli_st {
    int initialized;
    int echo_disabled;
    struct cli_command * static_cmds;
    struct cli_command * dynamic_cmds[8];
    uint num_static_cmds;
    uint num_commands;
    uint bp;
    char inbuf[256];
    char * outbuf;
    int his_idx;
    int his_cur;
    char history[256];
};

typedef struct pmkElement_t pmkElement_t, *PpmkElement_t;

typedef union anon_union_for_key anon_union_for_key, *Panon_union_for_key;

union anon_union_for_key {
    IEEEtypes_MacAddr_t Bssid;
    char Ssid[32];
};

struct pmkElement_t {
    union anon_union_for_key key;
    UINT8 PMK[32];
    UINT8 length;
    UINT8 psk_length;
    SINT8 replacementRank;
};

typedef union anon_union.conflict12 anon_union.conflict12, *Panon_union.conflict12;

union anon_union.conflict12 {
    IEEEtypes_MacAddr_t Bssid;
    char Ssid[32];
};

typedef struct net_device net_device, *Pnet_device;

typedef struct bl_hw bl_hw, *Pbl_hw;

typedef struct bl_cmd_mgr bl_cmd_mgr, *Pbl_cmd_mgr;

typedef struct bl_cmd bl_cmd, *Pbl_cmd;

typedef struct bl_stats bl_stats, *Pbl_stats;

typedef struct bl_vif bl_vif, *Pbl_vif;

typedef struct bl_sta bl_sta, *Pbl_sta;

typedef struct bl_mod_params bl_mod_params, *Pbl_mod_params;

typedef enum RWNX_INTERFACE_STATUS {
    RWNX_INTERFACE_STATUS_DOWN=0,
    RWNX_INTERFACE_STATUS_UP=1
} RWNX_INTERFACE_STATUS;

typedef enum bl_cmd_mgr_state {
    RWNX_CMD_MGR_STATE_CRASHED=2,
    RWNX_CMD_MGR_STATE_DEINIT=0,
    RWNX_CMD_MGR_STATE_INITED=1
} bl_cmd_mgr_state;

typedef uint32_t u32.conflict8;

typedef uint32_t u32.conflict9;

typedef SemaphoreHandle_t os_mutex_t;

typedef struct xSTATIC_EVENT_GROUP xSTATIC_EVENT_GROUP, *PxSTATIC_EVENT_GROUP;

typedef struct xSTATIC_EVENT_GROUP StaticEventGroup_t;

typedef StaticEventGroup_t os_event_t;

typedef uint32_t u32.conflict4;

typedef struct net_device_stats net_device_stats, *Pnet_device_stats;

typedef union anon_union_for_field_13 anon_union_for_field_13, *Panon_union_for_field_13;

typedef struct mac_addr.conflict36 mac_addr.conflict36, *Pmac_addr.conflict36;

typedef struct xSTATIC_LIST xSTATIC_LIST, *PxSTATIC_LIST;

typedef struct xSTATIC_LIST StaticList_t;

typedef struct anon_struct.conflict226 anon_struct.conflict226, *Panon_struct.conflict226;

typedef struct anon_struct.conflict227 anon_struct.conflict227, *Panon_struct.conflict227;

typedef struct anon_struct.conflict228 anon_struct.conflict228, *Panon_struct.conflict228;

typedef struct xSTATIC_MINI_LIST_ITEM xSTATIC_MINI_LIST_ITEM, *PxSTATIC_MINI_LIST_ITEM;

typedef struct xSTATIC_MINI_LIST_ITEM StaticMiniListItem_t;

typedef struct bl_bcn bl_bcn, *Pbl_bcn;

struct bl_bcn {
    u8 * head;
    u8 * tail;
    u8 * ies;
    size_t head_len;
    size_t tail_len;
    size_t ies_len;
    size_t tim_len;
    size_t len;
    u8 dtim;
    undefined field_0x21;
    undefined field_0x22;
    undefined field_0x23;
};

struct bl_mod_params {
    _Bool ht_on;
    _Bool vht_on;
    undefined field_0x2;
    undefined field_0x3;
    int mcs_map;
    _Bool ldpc_on;
    _Bool vht_stbc;
    undefined field_0xa;
    undefined field_0xb;
    int phy_cfg;
    int uapsd_timeout;
    _Bool ap_uapsd_on;
    _Bool sgi;
    _Bool sgi80;
    _Bool use_2040;
    _Bool use_80;
    _Bool custregd;
    undefined field_0x1a;
    undefined field_0x1b;
    int nss;
    _Bool bfmee;
    _Bool bfmer;
    _Bool mesh;
    _Bool murx;
    _Bool mutx;
    _Bool mutx_on;
    undefined field_0x26;
    undefined field_0x27;
    uint roc_dur_max;
    int listen_itv;
    _Bool listen_bcmc;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    int lp_clk_ppm;
    _Bool ps_on;
    undefined field_0x39;
    undefined field_0x3a;
    undefined field_0x3b;
    int tx_lft;
    int amsdu_maxnb;
    int uapsd_queues;
    _Bool tdls;
    undefined field_0x49;
    undefined field_0x4a;
    undefined field_0x4b;
};

struct anon_struct.conflict228 {
    struct bl_vif * master;
    struct bl_sta * sta_4a;
};

struct anon_struct.conflict226 {
    struct bl_sta * ap;
    struct bl_sta * tdls_sta;
};

struct anon_struct.conflict227 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

union anon_union_for_field_13 {
    struct anon_struct.conflict226 sta;
    struct anon_struct.conflict227 ap;
    struct anon_struct.conflict228 ap_vlan;
};

struct net_device_stats {
    ulong rx_packets;
    ulong tx_packets;
    ulong rx_bytes;
    ulong tx_bytes;
    ulong rx_errors;
    ulong tx_errors;
    ulong rx_dropped;
    ulong tx_dropped;
    ulong multicast;
    ulong collisions;
    ulong rx_length_errors;
    ulong rx_over_errors;
    ulong rx_crc_errors;
    ulong rx_frame_errors;
    ulong rx_fifo_errors;
    ulong rx_missed_errors;
    ulong tx_aborted_errors;
    ulong tx_carrier_errors;
    ulong tx_fifo_errors;
    ulong tx_heartbeat_errors;
    ulong tx_window_errors;
    ulong rx_compressed;
    ulong tx_compressed;
};

struct bl_vif {
    struct list_head list;
    struct netif * dev;
    struct bl_hw * bl_hw;
    struct net_device_stats net_stats;
    u8 drv_vif_index;
    u8 vif_index;
    u8 ch_index;
    _Bool up;
    _Bool use_4addr;
    _Bool is_resending;
    _Bool user_mpm;
    _Bool roc_tdls;
    u8 tdls_status;
    undefined field_0x75;
    undefined field_0x76;
    undefined field_0x77;
    union anon_union_for_field_13 field_13;
};

struct net_device {
    struct bl_hw * bl_hw;
};

struct bl_stats {
    int cfm_balance;
    ulong last_rx;
    ulong last_tx;
    int ampdus_tx[64];
    int ampdus_rx[64];
    int ampdus_rx_map[4];
    int ampdus_rx_miss;
    int amsdus_rx[64];
};

struct xSTATIC_MINI_LIST_ITEM {
    TickType_t xDummy2;
    void * pvDummy3[2];
};

struct xSTATIC_LIST {
    UBaseType_t uxDummy2;
    void * pvDummy3;
    StaticMiniListItem_t xDummy4;
};

struct xSTATIC_EVENT_GROUP {
    TickType_t xDummy1;
    StaticList_t xDummy2;
    UBaseType_t uxDummy3;
    uint8_t ucDummy4;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
};

struct bl_cmd {
    struct list_head list;
    lmac_msg_id_t id;
    lmac_msg_id_t reqid;
    struct lmac_msg * a2e_msg;
    char * e2a_msg;
    u32.conflict3 tkn;
    u16 flags;
    undefined field_0x1a;
    undefined field_0x1b;
    os_event_t complete;
    u32.conflict4 result;
};

struct bl_cmd_mgr {
    enum bl_cmd_mgr_state state;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    u32.conflict7 next_tkn;
    u32.conflict8 queue_sz;
    u32.conflict9 max_queue_sz;
    struct list_head cmds;
    os_mutex_t lock;
    int (* queue)(struct bl_cmd_mgr *, struct bl_cmd *);
    int (* llind)(struct bl_cmd_mgr *, struct bl_cmd *);
    int (* msgind)(struct bl_cmd_mgr *, struct ipc_e2a_msg *, int (* )(struct bl_hw *, struct bl_cmd *, struct ipc_e2a_msg *));
    void (* print)(struct bl_cmd_mgr *);
    void (* drain)(struct bl_cmd_mgr *);
};

struct mac_addr.conflict36 {
    u8_l array[6];
};

struct bl_sta {
    struct mac_addr.conflict36 sta_addr;
    u16 aid;
    u8 is_used;
    u8 sta_idx;
    u8 vif_idx;
    u8 vlan_idx;
    int8_t rssi;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t tsflo;
    uint32_t tsfhi;
    uint8_t data_rate;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
};

struct bl_hw {
    int is_up;
    struct bl_cmd_mgr cmd_mgr;
    struct ipc_host_env_tag * ipc_env;
    struct bl_stats stats;
    struct list_head vifs;
    struct bl_vif vif_table[12];
    struct bl_sta sta_table[12];
    ulong drv_flags;
    struct mm_version_cfm version_cfm;
    struct bl_mod_params * mod_params;
    enum wiphy_flags flags;
    struct ieee80211_sta_ht_cap ht_cap;
    u8 vif_started;
    undefined field_0xe1b;
    int vif_index_sta;
    int vif_index_ap;
    int sta_idx;
    int ap_bcmc_idx;
    struct phy_cfg_tag phy_config;
    enum RWNX_INTERFACE_STATUS status;
    undefined field_0xe6d;
    undefined field_0xe6e;
    undefined field_0xe6f;
};

typedef struct bl_wifi_ap_info bl_wifi_ap_info, *Pbl_wifi_ap_info;

struct bl_wifi_ap_info {
    uint8_t ssid[33];
    uint8_t psk[65];
    uint8_t chan;
};

typedef struct bl_wifi_ap_info bl_wifi_ap_info_t;

typedef enum ChanBand_e {
    Band_2_4_GHz=0,
    Band_4_GHz=2,
    Band_5_GHz=1
} ChanBand_e;

typedef enum IEEEtypes_ElementId_e {
    ELEM_ID_2040_BSS_COEXISTENCE=72,
    ELEM_ID_2040_BSS_INTOL_CHRPT=73,
    ELEM_ID_AID=-59,
    ELEM_ID_ANTENNA_INFO=64,
    ELEM_ID_AP_CHANNEL_REPORT=51,
    ELEM_ID_BSS_ACCESS_DELAY=63,
    ELEM_ID_BSS_AC_ACCESS_DELAY=68,
    ELEM_ID_BSS_AVAIL_ADM_CAP=67,
    ELEM_ID_BSS_LOAD=11,
    ELEM_ID_BSS_MAX_IDLE_PERIOD=90,
    ELEM_ID_CF_PARAM_SET=4,
    ELEM_ID_CHALLENGE_TEXT=16,
    ELEM_ID_CHANNEL_SWITCH_ANN=37,
    ELEM_ID_CHANNEL_USAGE=97,
    ELEM_ID_COLLOC_INTF_REPORT=96,
    ELEM_ID_COUNTRY=7,
    ELEM_ID_DIAG_REPORT=81,
    ELEM_ID_DIAG_REQUEST=80,
    ELEM_ID_DMS_REQUEST=99,
    ELEM_ID_DMS_RESPONSE=100,
    ELEM_ID_DSE_REGISTERED_LOC=58,
    ELEM_ID_DS_PARAM_SET=3,
    ELEM_ID_EDCA_PARAM_SET=12,
    ELEM_ID_ERP_INFO=42,
    ELEM_ID_EVENT_REPORT=79,
    ELEM_ID_EVENT_REQUEST=78,
    ELEM_ID_EXTENSION=-1,
    ELEM_ID_EXT_ASSOC_DELAY_INFO=1,
    ELEM_ID_EXT_CAPABILITIES=127,
    ELEM_ID_EXT_CHAN_SWITCH_ANN=60,
    ELEM_ID_EXT_ESTIMATED_SERVICE_PARAMS=11,
    ELEM_ID_EXT_EXTENDED_REQUEST=10,
    ELEM_ID_EXT_FILS_HLP_CONTAINER=5,
    ELEM_ID_EXT_FILS_IP_ADDR_ASSIGN=6,
    ELEM_ID_EXT_FILS_KEY_CONFIRM=3,
    ELEM_ID_EXT_FILS_NONCE=13,
    ELEM_ID_EXT_FILS_PUBLIC_KEY=12,
    ELEM_ID_EXT_FILS_REQ_PARAMS=2,
    ELEM_ID_EXT_FILS_SESSION=4,
    ELEM_ID_EXT_FILS_WRAPPED_DATA=8,
    ELEM_ID_EXT_FTM_SYNC_INFO=9,
    ELEM_ID_EXT_FUTURE_CHANNEL_GUIDANCE=14,
    ELEM_ID_EXT_HE_CAPABILITIES=35,
    ELEM_ID_EXT_HE_OPERATION=36,
    ELEM_ID_EXT_KEY_DELIVERY=7,
    ELEM_ID_EXT_OWE_DH_PARAM=32,
    ELEM_ID_EXT_PASSWORD_IDENTIFIER=33,
    ELEM_ID_EXT_SUPPORTED_RATES=50,
    ELEM_ID_FAST_BSS_TRANS=55,
    ELEM_ID_FH_PARAM_SET=2,
    ELEM_ID_FMS_DESCRIPTOR=86,
    ELEM_ID_FMS_REQUEST=87,
    ELEM_ID_FMS_RESPONSE=88,
    ELEM_ID_HOP_PARAM=8,
    ELEM_ID_HOP_TABLE=9,
    ELEM_ID_HT_CAPABILITY=45,
    ELEM_ID_HT_INFORMATION=61,
    ELEM_ID_IBSS_DFS=41,
    ELEM_ID_IBSS_PARAM_SET=6,
    ELEM_ID_LINK_ID=101,
    ELEM_ID_LOCATION_PARAM=82,
    ELEM_ID_MANAGEMENT_MIC=76,
    ELEM_ID_MBSSID_INDEX=85,
    ELEM_ID_MEASUREMENT_REQ=38,
    ELEM_ID_MEASUREMENT_RPT=39,
    ELEM_ID_MEAS_PILOT_TX_INFO=66,
    ELEM_ID_MOBILITY_DOMAIN=54,
    ELEM_ID_MULTI_BSSID=71,
    ELEM_ID_NEIGHBOR_REPORT=52,
    ELEM_ID_NONTRANS_BSSID_CAP=83,
    ELEM_ID_OBSS_SCAN_PARAM=74,
    ELEM_ID_POWER_CAPABILITY=33,
    ELEM_ID_POWER_CONSTRAINT=32,
    ELEM_ID_PTI_CONTROL=105,
    ELEM_ID_PU_BUFFER_STATUS=106,
    ELEM_ID_QOS_CAPABILITY=46,
    ELEM_ID_QOS_TRAFFIC_CAP=89,
    ELEM_ID_QUIET=40,
    ELEM_ID_RCPI=53,
    ELEM_ID_REQUEST=10,
    ELEM_ID_RIC_DATA=57,
    ELEM_ID_RIC_DESCRIPTOR=75,
    ELEM_ID_RRM_ENABLED_CAP=70,
    ELEM_ID_RSN=48,
    ELEM_ID_RSNI=65,
    ELEM_ID_SCHEDULE=15,
    ELEM_ID_SECONDARY_CHAN_OFFSET=62,
    ELEM_ID_SSID=0,
    ELEM_ID_SSID_LIST=84,
    ELEM_ID_SUPPORTED_CHANNELS=36,
    ELEM_ID_SUPPORTED_RATES=1,
    ELEM_ID_SUPPORTED_REGCLASS=59,
    ELEM_ID_TCLAS=14,
    ELEM_ID_TCLAS_PROCESS=44,
    ELEM_ID_TDLS_CS_TIMING=104,
    ELEM_ID_TFS_REQUEST=91,
    ELEM_ID_TFS_RESPONSE=92,
    ELEM_ID_TIM=5,
    ELEM_ID_TIMEOUT_INTERVAL=56,
    ELEM_ID_TIME_ZONE=98,
    ELEM_ID_TIM_BCAST_REQUEST=94,
    ELEM_ID_TIM_BCAST_RESPONSE=95,
    ELEM_ID_TPC_REPORT=35,
    ELEM_ID_TPC_REQUEST=34,
    ELEM_ID_TSPEC=13,
    ELEM_ID_TS_DELAY=43,
    ELEM_ID_VENDOR_SPECIFIC=-35,
    ELEM_ID_VHT_CAPABILITIES=-65,
    ELEM_ID_VHT_OPERATION=-64,
    ELEM_ID_VHT_OP_MODE_NOTIFICATION=-57,
    ELEM_ID_WAKEUP_SCHEDULE=102,
    ELEM_ID_WAPI=68,
    ELEM_ID_WIDE_BAND_CHAN_SW=-63,
    ELEM_ID_WNM_SLEEP_MODE=93,
    SUBELEM_ID_GTK=2,
    SUBELEM_ID_IGTK=4,
    SUBELEM_ID_PMK_R0_KEY_HOLDER_ID=3,
    SUBELEM_ID_PMK_R1_KEY_HOLDER_ID=1,
    SUBELEM_ID_REPORTED_FRAME_BODY=1,
    SUBELEM_ID_REPORTING_DETAIL=2
} IEEEtypes_ElementId_e;

typedef enum Chan2Offset_e {
    SECONDARY_CHAN_ABOVE=1,
    SECONDARY_CHAN_BELOW=3,
    SECONDARY_CHAN_NONE=0
} Chan2Offset_e;

typedef enum IEEEtypes_8021x_CodeType_e {
    IEEE_8021X_CODE_TYPE_FAILURE=4,
    IEEE_8021X_CODE_TYPE_REQUEST=1,
    IEEE_8021X_CODE_TYPE_RESPONSE=2,
    IEEE_8021X_CODE_TYPE_SUCCESS=3
} IEEEtypes_8021x_CodeType_e;

typedef struct IEEEtypes_WPAElement_t IEEEtypes_WPAElement_t, *PIEEEtypes_WPAElement_t;

struct IEEEtypes_WPAElement_t {
    enum IEEEtypes_ElementId_e ElementId;
    IEEEtypes_Len_t Len;
    UINT8 OuiType[4];
    UINT16 Ver;
    UINT8 GrpKeyCipher[4];
    UINT16 PwsKeyCnt;
    UINT8 PwsKeyCipherList[4];
    UINT16 AuthKeyCnt;
    UINT8 AuthKeyList[4];
};

typedef enum IEEEtypes_KDEDataType_e {
    KDE_DATA_TYPE_ERROR=8,
    KDE_DATA_TYPE_GTK=1,
    KDE_DATA_TYPE_IGTK=9,
    KDE_DATA_TYPE_LIFETIME=7,
    KDE_DATA_TYPE_MACADDR=3,
    KDE_DATA_TYPE_NONCE=6,
    KDE_DATA_TYPE_PMKID=4,
    KDE_DATA_TYPE_RESERVED=0,
    KDE_DATA_TYPE_RESERVED2=2,
    KDE_DATA_TYPE_SMK=5
} IEEEtypes_KDEDataType_e;

typedef struct IEEEtypes_RSNCapability_t IEEEtypes_RSNCapability_t, *PIEEEtypes_RSNCapability_t;

struct IEEEtypes_RSNCapability_t {
    UINT8 PreAuth:1;
    UINT8 NoPairwise:1;
    UINT8 PtksaReplayCtr:2;
    UINT8 GtksaReplayCtr:2;
    UINT8 MFPR:1;
    UINT8 MFPC:1;
    UINT8 Reserved_8:1;
    UINT8 PeerkeyEnabled:1;
    UINT8 SppAmsduCap:1;
    UINT8 SppAmsduReq:1;
    UINT8 PBAC:1;
    UINT8 Reserved_13_15:3;
};

typedef struct BandConfig_t BandConfig_t, *PBandConfig_t;

typedef enum ChanWidth_e {
    ChanWidth_10_MHz=1,
    ChanWidth_20_MHz=0,
    ChanWidth_40_MHz=2,
    ChanWidth_80_MHz=3
} ChanWidth_e;

typedef enum ScanMode_e {
    ACS_MODE=1,
    MANUAL_MODE=0
} ScanMode_e;

struct BandConfig_t {
    enum ChanBand_e chanBand:2;
    enum ChanWidth_e chanWidth:2;
    enum Chan2Offset_e chan2Offset:2;
    enum ScanMode_e scanMode:2;
};

typedef struct ether_hdr_t ether_hdr_t, *Pether_hdr_t;

struct ether_hdr_t {
    IEEEtypes_MacAddr_t da;
    IEEEtypes_MacAddr_t sa;
    UINT16 type;
};

typedef struct IEEEtypes_SsIdElement_t IEEEtypes_SsIdElement_t, *PIEEEtypes_SsIdElement_t;

struct IEEEtypes_SsIdElement_t {
    enum IEEEtypes_ElementId_e ElementId;
    IEEEtypes_Len_t Len;
    IEEEtypes_SsId_t SsId;
};

typedef enum IEEEtypes_8021x_PacketType_e {
    IEEE_8021X_PACKET_TYPE_ASF_ALERT=4,
    IEEE_8021X_PACKET_TYPE_EAPOL_KEY=3,
    IEEE_8021X_PACKET_TYPE_EAPOL_LOGOFF=2,
    IEEE_8021X_PACKET_TYPE_EAPOL_START=1,
    IEEE_8021X_PACKET_TYPE_EAP_PACKET=0
} IEEEtypes_8021x_PacketType_e;

typedef struct IEEEtypes_InfoElementHdr_t IEEEtypes_InfoElementHdr_t, *PIEEEtypes_InfoElementHdr_t;

struct IEEEtypes_InfoElementHdr_t {
    enum IEEEtypes_ElementId_e ElementId;
    IEEEtypes_Len_t Len;
};

typedef struct IEEEtypes_RSNElement_t IEEEtypes_RSNElement_t, *PIEEEtypes_RSNElement_t;

struct IEEEtypes_RSNElement_t {
    enum IEEEtypes_ElementId_e ElementId;
    IEEEtypes_Len_t Len;
    UINT16 Ver;
    UINT8 GrpKeyCipher[4];
    UINT16 PwsKeyCnt;
    UINT8 PwsKeyCipherList[4];
    UINT16 AuthKeyCnt;
    UINT8 AuthKeyList[4];
    struct IEEEtypes_RSNCapability_t RsnCap;
    UINT16 PMKIDCnt;
    UINT8 PMKIDList[16];
    UINT8 GrpMgmtCipher[4];
};

typedef struct ChanBandInfo_t ChanBandInfo_t, *PChanBandInfo_t;

struct ChanBandInfo_t {
    struct BandConfig_t bandConfig;
    UINT8 chanNum;
};

typedef struct dns_ans_hdr dns_ans_hdr, *Pdns_ans_hdr;

struct dns_ans_hdr {
    uint16_t id;
    uint16_t flag;
    uint16_t numquestions;
    uint16_t numanswers;
    uint16_t numauthrr;
    uint16_t numextrarr;
};

typedef struct dns_server_ctx dns_server_ctx, *Pdns_server_ctx;

struct dns_server_ctx {
    uint8_t name[256];
    uint16_t txid;
    uint16_t nquestions;
    uint16_t nanswers;
    undefined field_0x106;
    undefined field_0x107;
    struct udp_pcb * upcb1;
    ip_addr_t * addr1;
    u16_t port1;
    undefined field_0x112;
    undefined field_0x113;
};

typedef struct dns_table_entry dns_table_entry, *Pdns_table_entry;

struct dns_table_entry {
    uint16_t txid;
    uint16_t flags;
    uint16_t numque;
    uint16_t ansrrs;
    uint16_t autrrs;
    uint16_t addrrs;
    uint16_t type;
    uint16_t class;
    uint16_t poiname;
    uint16_t anstype;
    uint16_t anstypee;
    uint16_t datalen;
    uint32_t anstime;
    uint32_t adress;
};

typedef struct dns_ans_ans dns_ans_ans, *Pdns_ans_ans;

struct dns_ans_ans {
    uint16_t typ;
    uint16_t cls;
    uint16_t point;
    uint16_t antyp;
    uint16_t antypp;
    uint16_t len;
    uint32_t time;
    uint32_t addr;
};

typedef struct _bl_wifi_env _bl_wifi_env, *P_bl_wifi_env;

struct _bl_wifi_env {
    uint8_t sta_mac_addr_board[6];
    uint8_t sta_mac_addr_usr[6];
    uint8_t ap_mac_addr_board[6];
    uint8_t ap_mac_addr_usr[6];
    uint8_t country_code;
    bl_wifi_ap_info_t ap_info;
    uint8_t ap_info_en;
    bl_wifi_ap_info_t sta_info;
    uint8_t sta_info_en;
};

typedef struct _bl_wifi_env bl_wifi_env_t;

typedef struct tsen_reload_data tsen_reload_data, *Ptsen_reload_data;

typedef struct tsen_reload_data tsen_reload_data_t;

typedef struct xSTATIC_TIMER xSTATIC_TIMER, *PxSTATIC_TIMER;

typedef struct xSTATIC_TIMER StaticTimer_t;

typedef StaticTimer_t os_timer_t;

struct xSTATIC_TIMER {
    void * pvDummy1;
    StaticListItem_t xDummy2;
    TickType_t xDummy3;
    void * pvDummy5;
    void (* pvDummy6)(void *);
    UBaseType_t uxDummy7;
    uint8_t ucDummy8;
    undefined field_0x29;
    undefined field_0x2a;
    undefined field_0x2b;
};

struct tsen_reload_data {
    char name[32];
    os_timer_t timer;
};

typedef struct connectedIPNoData connectedIPNoData, *PconnectedIPNoData;

typedef struct connectedIPNoData connectedIPNoData_t;

struct connectedIPNoData {
    char name[32];
    os_timer_t timer;
};

typedef struct disconnectData disconnectData, *PdisconnectData;

typedef struct wifi_mgmr_profile_msg wifi_mgmr_profile_msg, *Pwifi_mgmr_profile_msg;

typedef struct wifi_mgmr_profile_msg wifi_mgmr_profile_msg_t;

struct wifi_mgmr_profile_msg {
    char ssid[32];
    char ssid_tail[1];
    uint32_t ssid_len;
    char psk[64];
    char psk_tail[1];
    char pmk[64];
    char pmk_tail[1];
    uint32_t psk_len;
    uint32_t pmk_len;
    uint8_t mac[6];
    uint8_t band;
    uint16_t freq;
    uint8_t dhcp_use;
};

struct disconnectData {
    char name[32];
    os_timer_t timer;
    uint8_t timer_started;
    wifi_mgmr_profile_msg_t profile_msg;
    undefined field_0x106;
    undefined field_0x107;
};

typedef struct disconnectData disconnectData_t;

typedef struct bam_env_tag bam_env_tag, *Pbam_env_tag;

typedef struct bam_baw bam_baw, *Pbam_baw;

struct bam_baw {
    uint (* idx_compute)(struct bam_baw *, uint);
    uint16_t fsn;
    uint8_t states[64];
    uint8_t fsn_idx;
    uint8_t buf_size;
    uint8_t mask;
    undefined field_0x49;
    undefined field_0x4a;
    undefined field_0x4b;
};

struct bam_env_tag {
    uint32_t pkt_cnt;
    uint32_t last_activity_time;
    uint16_t ssn;
    uint16_t ba_timeout;
    uint8_t sta_idx;
    uint8_t dev_type;
    uint8_t ba_policy;
    uint8_t buffer_size;
    uint8_t tid;
    uint8_t dialog_token;
    uint8_t amsdu;
    uint8_t delba_count;
    struct bam_baw baw;
};

typedef uintptr_t mem_ptr_t;

typedef uint64_t u64_t;

typedef struct me_rc_stats_cfm me_rc_stats_cfm, *Pme_rc_stats_cfm;

struct me_rc_stats_cfm {
    uint8_t sta_idx;
    undefined field_0x1;
    uint16_t no_samples;
    uint16_t ampdu_len;
    uint16_t ampdu_packets;
    uint32_t avg_ampdu_len;
    uint8_t sw_retry_step;
    uint8_t sample_wait;
    undefined field_0xe;
    undefined field_0xf;
    struct step retry[4];
    struct rc_rate_stats rate_stats[10];
    uint32_t tp[10];
};

typedef struct me_set_control_port_req me_set_control_port_req, *Pme_set_control_port_req;

struct me_set_control_port_req {
    uint8_t sta_idx;
    _Bool control_port_open;
};

typedef struct me_set_active_req me_set_active_req, *Pme_set_active_req;

struct me_set_active_req {
    _Bool active;
    uint8_t vif_idx;
};

typedef struct me_sta_add_cfm me_sta_add_cfm, *Pme_sta_add_cfm;

struct me_sta_add_cfm {
    uint8_t sta_idx;
    uint8_t status;
    uint8_t pm_state;
};

typedef struct me_rc_stats_req me_rc_stats_req, *Pme_rc_stats_req;

struct me_rc_stats_req {
    uint8_t sta_idx;
};

typedef struct me_chan_config_req me_chan_config_req, *Pme_chan_config_req;

struct me_chan_config_req {
    struct scan_chan_tag chan2G4[14];
    struct scan_chan_tag chan5G[28];
    uint8_t chan2G4_cnt;
    uint8_t chan5G_cnt;
};

typedef struct me_traffic_ind_req me_traffic_ind_req, *Pme_traffic_ind_req;

struct me_traffic_ind_req {
    uint8_t sta_idx;
    uint8_t tx_avail;
    _Bool uapsd;
};

typedef struct me_sta_add_req me_sta_add_req, *Pme_sta_add_req;

struct me_sta_add_req {
    struct mac_addr mac_addr;
    struct mac_rateset rate_set;
    undefined field_0x13;
    struct mac_htcapability ht_cap;
    struct mac_vhtcapability vht_cap;
    uint32_t flags;
    uint16_t aid;
    uint8_t uapsd_queues;
    uint8_t max_sp_len;
    uint8_t opmode;
    uint8_t vif_idx;
    _Bool tdls_sta;
    undefined field_0x4b;
    uint32_t tsflo;
    uint32_t tsfhi;
    int8_t rssi;
    uint8_t data_rate;
    undefined field_0x56;
    undefined field_0x57;
};

typedef struct me_sta_del_req me_sta_del_req, *Pme_sta_del_req;

struct me_sta_del_req {
    uint8_t sta_idx;
    _Bool tdls_sta;
};

typedef struct me_set_ps_disable_req me_set_ps_disable_req, *Pme_set_ps_disable_req;

struct me_set_ps_disable_req {
    _Bool ps_disable;
    uint8_t vif_idx;
};

typedef struct me_tkip_mic_failure_ind me_tkip_mic_failure_ind, *Pme_tkip_mic_failure_ind;

struct me_tkip_mic_failure_ind {
    struct mac_addr addr;
    undefined field_0x6;
    undefined field_0x7;
    uint64_t tsc;
    _Bool ga;
    uint8_t keyid;
    uint8_t vif_idx;
    undefined field_0x13;
    undefined field_0x14;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct me_rc_set_rate_req me_rc_set_rate_req, *Pme_rc_set_rate_req;

struct me_rc_set_rate_req {
    uint8_t sta_idx;
    undefined field_0x1;
    uint16_t fixed_rate_cfg;
};

typedef struct me_config_req me_config_req, *Pme_config_req;

struct me_config_req {
    struct mac_htcapability ht_cap;
    struct mac_vhtcapability vht_cap;
    uint16_t tx_lft;
    _Bool ht_supp;
    _Bool vht_supp;
    _Bool ps_on;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct wifi_mgmr wifi_mgmr, *Pwifi_mgmr;

typedef struct wifi_mgmr wifi_mgmr_t;

typedef struct wlan_netif.conflict25 wlan_netif.conflict25, *Pwlan_netif.conflict25;

typedef struct wlan_netif.conflict26 wlan_netif.conflict26, *Pwlan_netif.conflict26;

typedef enum WIFI_MGMR_CONNECTION_STATUS {
    WIFI_MGMR_CONNECTION_STATUS_CONNECTED_IP_NO=3,
    WIFI_MGMR_CONNECTION_STATUS_CONNECTED_IP_YES=2,
    WIFI_MGMR_CONNECTION_STATUS_CONNECTING=1,
    WIFI_MGMR_CONNECTION_STATUS_DISCONNECTED=4,
    WIFI_MGMR_CONNECTION_STATUS_IDLE=0
} WIFI_MGMR_CONNECTION_STATUS;

typedef enum WIFI_MGMR_CONNECTION_STATUS WIFI_MGMR_CONNECTION_STATUS_T;

typedef struct wifi_mgmr_profile wifi_mgmr_profile, *Pwifi_mgmr_profile;

typedef struct wifi_mgmr_profile wifi_mgmr_profile_t;

typedef struct wifi_mgmr_scan_item wifi_mgmr_scan_item, *Pwifi_mgmr_scan_item;

typedef struct wifi_mgmr_scan_item wifi_mgmr_scan_item_t;

typedef struct xSTATIC_STREAM_BUFFER xSTATIC_STREAM_BUFFER, *PxSTATIC_STREAM_BUFFER;

typedef struct xSTATIC_STREAM_BUFFER StaticStreamBuffer_t;

typedef StaticStreamBuffer_t StaticMessageBuffer_t;

typedef StaticMessageBuffer_t os_messagequeue_t;

typedef struct stateMachine stateMachine, *PstateMachine;

typedef struct wifi_mgmr_connect_ind_stat_info wifi_mgmr_connect_ind_stat_info, *Pwifi_mgmr_connect_ind_stat_info;

typedef struct wifi_mgmr_connect_ind_stat_info wifi_mgmr_connect_ind_stat_info_t;

typedef struct anon_struct_for_ipv4 anon_struct_for_ipv4, *Panon_struct_for_ipv4;

typedef struct netif.conflict34 netif.conflict34, *Pnetif.conflict34;


// WARNING! conflicting data type names: /DWARF/wifi_mgmr.h/wlan_netif/anon_union_for_field_5 - /DWARF/hal_desc.h/tx_hd/anon_union_for_field_5

typedef struct netif.conflict35 netif.conflict35, *Pnetif.conflict35;

typedef struct state state, *Pstate;

typedef struct event event, *Pevent;

typedef struct transition transition, *Ptransition;

struct wifi_mgmr_connect_ind_stat_info {
    uint16_t status_code;
    uint8_t type_ind;
    char ssid[32];
    char psk[65];
    uint8_t bssid[6];
    uint16_t chan_freq;
    uint8_t chan_band;
    undefined field_0x6d;
};

struct wifi_mgmr_profile {
    char ssid[33];
    uint8_t no_autoconnect;
    undefined field_0x22;
    undefined field_0x23;
    uint32_t ssid_len;
    char psk[65];
    undefined field_0x69;
    undefined field_0x6a;
    undefined field_0x6b;
    uint32_t psk_len;
    char pmk[65];
    undefined field_0xb1;
    undefined field_0xb2;
    undefined field_0xb3;
    uint32_t pmk_len;
    uint8_t mac[6];
    uint8_t dhcp_use;
    uint8_t priority;
    uint8_t isActive;
    uint8_t isUsed;
    undefined field_0xc2;
    undefined field_0xc3;
};

struct netif.conflict35 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct netif.conflict34 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct anon_struct_for_ipv4 {
    uint32_t ip;
    uint32_t mask;
    uint32_t gw;
    uint32_t dns1;
    uint32_t dns2;
};

struct state {
    struct state * parentState;
    struct state * entryState;
    struct transition * transitions;
    size_t numTransitions;
    void * data;
    void (* entryAction)(void *, struct event *);
    void (* exitAction)(void *, struct event *);
};

struct event {
    int type;
    void * data;
};

struct xSTATIC_STREAM_BUFFER {
    size_t uxDummy1[4];
    void * pvDummy2[3];
    uint8_t ucDummy3;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
    UBaseType_t uxDummy4;
};

struct stateMachine {
    struct state * currentState;
    struct state * previousState;
    struct state * errorState;
};

struct wlan_netif.conflict25 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict34 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

struct wifi_mgmr_scan_item {
    char ssid[32];
    char ssid_tail[1];
    undefined field_0x21;
    undefined field_0x22;
    undefined field_0x23;
    uint32_t ssid_len;
    uint8_t bssid[6];
    uint8_t channel;
    int8_t rssi;
    int8_t ppm_abs;
    int8_t ppm_rel;
    uint8_t auth;
    uint8_t cipher;
    uint8_t is_used;
    undefined field_0x35;
    undefined field_0x36;
    undefined field_0x37;
    uint32_t timestamp_lastseen;
};

struct wlan_netif.conflict26 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict35 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

struct wifi_mgmr {
    uint8_t ready;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    int channel;
    int inf_ap_enabled;
    struct wlan_netif.conflict25 wlan_sta;
    struct wlan_netif.conflict26 wlan_ap;
    WIFI_MGMR_CONNECTION_STATUS_T status;
    undefined field_0xed;
    undefined field_0xee;
    undefined field_0xef;
    wifi_mgmr_profile_t profiles[2];
    int profile_active_index;
    wifi_mgmr_scan_item_t scan_items[50];
    os_messagequeue_t mq;
    uint8_t mq_pool[2240];
    struct stateMachine m;
    os_timer_t timer;
    wifi_mgmr_connect_ind_stat_info_t wifi_mgmr_stat_info;
    char country_code[3];
    uint8_t disable_autoreconnect;
    undefined field_0x17c2;
    undefined field_0x17c3;
    int channel_nums;
    uint32_t pending_task;
    uint32_t features;
    int scan_item_timeout;
};

struct transition {
    int eventType;
    void * condition;
    _Bool (* guard)(void *, struct event *);
    void (* action)(void *, struct event *, void *);
    struct state * nextState;
};

typedef struct wifi_mgmr_cfg_element_msg wifi_mgmr_cfg_element_msg, *Pwifi_mgmr_cfg_element_msg;

struct wifi_mgmr_cfg_element_msg {
    uint32_t ops;
    uint32_t task;
    uint32_t element;
    uint32_t type;
    uint32_t length;
    uint32_t[0] buf;
};

typedef struct anon_struct.conflict348 anon_struct.conflict348, *Panon_struct.conflict348;

struct anon_struct.conflict348 {
    uint32_t ip;
    uint32_t mask;
    uint32_t gw;
    uint32_t dns1;
    uint32_t dns2;
};

typedef struct wlan_netif.conflict27 wlan_netif.conflict27, *Pwlan_netif.conflict27;

typedef struct netif.conflict36 netif.conflict36, *Pnetif.conflict36;

struct netif.conflict36 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict27 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict36 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif wlan_netif, *Pwlan_netif;

struct wlan_netif {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct anon_struct.conflict349 anon_struct.conflict349, *Panon_struct.conflict349;

struct anon_struct.conflict349 {
    int8_t rssi;
};

typedef struct wifi_mgmr_sta_basic_info wifi_mgmr_sta_basic_info, *Pwifi_mgmr_sta_basic_info;

typedef struct wifi_mgmr_sta_basic_info wifi_mgmr_sta_basic_info_t;

struct wifi_mgmr_sta_basic_info {
    uint8_t sta_idx;
    uint8_t is_used;
    uint8_t sta_mac[6];
    uint32_t tsfhi;
    uint32_t tsflo;
    int rssi;
    uint8_t data_rate;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct anon_struct.conflict350 anon_struct.conflict350, *Panon_struct.conflict350;

struct anon_struct.conflict350 {
    uint32_t ip;
    uint32_t mask;
    uint32_t gw;
    uint32_t dns1;
    uint32_t dns2;
};

typedef struct anon_struct.conflict351 anon_struct.conflict351, *Panon_struct.conflict351;

struct anon_struct.conflict351 {
    int8_t rssi;
};

typedef struct anon_struct.conflict356 anon_struct.conflict356, *Panon_struct.conflict356;

struct anon_struct.conflict356 {
    int8_t rssi;
};

typedef struct anon_struct.conflict357 anon_struct.conflict357, *Panon_struct.conflict357;

struct anon_struct.conflict357 {
    uint32_t ip;
    uint32_t mask;
    uint32_t gw;
    uint32_t dns1;
    uint32_t dns2;
};

typedef struct anon_struct.conflict358 anon_struct.conflict358, *Panon_struct.conflict358;

struct anon_struct.conflict358 {
    int8_t rssi;
};

typedef struct wifi_mgmr_ipgot_msg wifi_mgmr_ipgot_msg, *Pwifi_mgmr_ipgot_msg;

struct wifi_mgmr_ipgot_msg {
    uint32_t ip;
    uint32_t mask;
    uint32_t gw;
    uint32_t dns1;
    uint32_t dns2;
};

typedef struct anon_struct.conflict353 anon_struct.conflict353, *Panon_struct.conflict353;

struct anon_struct.conflict353 {
    uint32_t ip;
    uint32_t mask;
    uint32_t gw;
    uint32_t dns1;
    uint32_t dns2;
};

typedef struct anon_struct.conflict354 anon_struct.conflict354, *Panon_struct.conflict354;

struct anon_struct.conflict354 {
    int8_t rssi;
};

typedef struct anon_struct.conflict355 anon_struct.conflict355, *Panon_struct.conflict355;

struct anon_struct.conflict355 {
    uint32_t ip;
    uint32_t mask;
    uint32_t gw;
    uint32_t dns1;
    uint32_t dns2;
};

typedef struct wifi_mgmr_msg wifi_mgmr_msg, *Pwifi_mgmr_msg;

typedef struct wifi_mgmr_msg wifi_mgmr_msg_t;

typedef enum WIFI_MGMR_EVENT {
    WIFI_MGMR_EVENT_APP_AP_START=8,
    WIFI_MGMR_EVENT_APP_AP_STOP=9,
    WIFI_MGMR_EVENT_APP_CONF_MAX_STA=10,
    WIFI_MGMR_EVENT_APP_CONNECT=1,
    WIFI_MGMR_EVENT_APP_CONNECTED=3,
    WIFI_MGMR_EVENT_APP_DENOISE=12,
    WIFI_MGMR_EVENT_APP_DISCONNECT=5,
    WIFI_MGMR_EVENT_APP_IDLE=0,
    WIFI_MGMR_EVENT_APP_IP_GOT=4,
    WIFI_MGMR_EVENT_APP_PHY_UP=7,
    WIFI_MGMR_EVENT_APP_RC_CONFIG=11,
    WIFI_MGMR_EVENT_APP_RECONNECT=6,
    WIFI_MGMR_EVENT_APP_RELOAD_TSEN=13,
    WIFI_MGMR_EVENT_APP_SNIFFER=2,
    WIFI_MGMR_EVENT_FW_CFG_REQ=22,
    WIFI_MGMR_EVENT_FW_CHANNEL_SET=17,
    WIFI_MGMR_EVENT_FW_DATA_RAW_SEND=21,
    WIFI_MGMR_EVENT_FW_DISCONNECT=15,
    WIFI_MGMR_EVENT_FW_IND_CONNECTED=20,
    WIFI_MGMR_EVENT_FW_IND_DISCONNECT=19,
    WIFI_MGMR_EVENT_FW_POWERSAVING=16,
    WIFI_MGMR_EVENT_FW_SCAN=18,
    WIFI_MGMR_EVENT_GLB_AP_IND_STA_DEL=27,
    WIFI_MGMR_EVENT_GLB_AP_IND_STA_NEW=26,
    WIFI_MGMR_EVENT_GLB_DISABLE_AUTORECONNECT=28,
    WIFI_MGMR_EVENT_GLB_ENABLE_AUTORECONNECT=29,
    WIFI_MGMR_EVENT_GLB_IP_UPDATE=30,
    WIFI_MGMR_EVENT_GLB_SCAN_IND_BEACON=24,
    WIFI_MGMR_EVENT_GLB_SCAN_IND_PROBE_RESP=25,
    WIFI_MGMR_EVENT_MAXAPP_MINIFW=14,
    WIFI_MGMR_EVENT_MAXFW_MINI_GLOBAL=23
} WIFI_MGMR_EVENT;

typedef enum WIFI_MGMR_EVENT WIFI_MGMR_EVENT_T;

struct wifi_mgmr_msg {
    WIFI_MGMR_EVENT_T ev;
    void * data1;
    void * data2;
    uint32_t len;
    uint8_t[0] data;
};

typedef struct anon_struct.conflict364 anon_struct.conflict364, *Panon_struct.conflict364;

struct anon_struct.conflict364 {
    uint32_t ip;
    uint32_t mask;
    uint32_t gw;
    uint32_t dns1;
    uint32_t dns2;
};

typedef struct anon_struct.conflict365 anon_struct.conflict365, *Panon_struct.conflict365;

struct anon_struct.conflict365 {
    int8_t rssi;
};

typedef struct wifi_mgmr_cfg_element_msg wifi_mgmr_cfg_element_msg_t;

typedef struct wifi_mgmr_ipgot_msg wifi_mgmr_ipgot_msg_t;

typedef enum EVENT_TYPE {
    EVENT_TYPE_APP=1,
    EVENT_TYPE_FW=0,
    EVENT_TYPE_GLB=2
} EVENT_TYPE;

typedef struct wlan_netif.conflict12 wlan_netif.conflict12, *Pwlan_netif.conflict12;

typedef struct netif.conflict19 netif.conflict19, *Pnetif.conflict19;

struct netif.conflict19 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict12 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict19 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict13 wlan_netif.conflict13, *Pwlan_netif.conflict13;

typedef struct netif.conflict20 netif.conflict20, *Pnetif.conflict20;

struct netif.conflict20 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict13 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict20 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict15 wlan_netif.conflict15, *Pwlan_netif.conflict15;

typedef struct netif.conflict22 netif.conflict22, *Pnetif.conflict22;

struct netif.conflict22 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict15 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict22 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict10 wlan_netif.conflict10, *Pwlan_netif.conflict10;

typedef struct netif.conflict16 netif.conflict16, *Pnetif.conflict16;

struct netif.conflict16 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict10 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict16 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict17 wlan_netif.conflict17, *Pwlan_netif.conflict17;

typedef struct netif.conflict25 netif.conflict25, *Pnetif.conflict25;

struct netif.conflict25 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict17 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict25 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict18 wlan_netif.conflict18, *Pwlan_netif.conflict18;

typedef struct netif.conflict26 netif.conflict26, *Pnetif.conflict26;

struct netif.conflict26 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict18 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict26 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict wlan_netif.conflict, *Pwlan_netif.conflict;

typedef struct netif.conflict5 netif.conflict5, *Pnetif.conflict5;

struct netif.conflict5 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict5 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict1 wlan_netif.conflict1, *Pwlan_netif.conflict1;

typedef struct netif.conflict6 netif.conflict6, *Pnetif.conflict6;

struct netif.conflict6 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict1 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict6 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict23 wlan_netif.conflict23, *Pwlan_netif.conflict23;

typedef struct netif.conflict32 netif.conflict32, *Pnetif.conflict32;

struct netif.conflict32 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict23 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict32 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict20 wlan_netif.conflict20, *Pwlan_netif.conflict20;

typedef struct netif.conflict28 netif.conflict28, *Pnetif.conflict28;

struct netif.conflict28 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict20 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict28 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict22 wlan_netif.conflict22, *Pwlan_netif.conflict22;

typedef struct netif.conflict31 netif.conflict31, *Pnetif.conflict31;

struct netif.conflict31 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict22 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict31 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict8 wlan_netif.conflict8, *Pwlan_netif.conflict8;

typedef struct netif.conflict14 netif.conflict14, *Pnetif.conflict14;

struct netif.conflict14 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict8 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict14 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict6 wlan_netif.conflict6, *Pwlan_netif.conflict6;

typedef struct netif.conflict12 netif.conflict12, *Pnetif.conflict12;

struct netif.conflict12 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict6 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict12 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict5 wlan_netif.conflict5, *Pwlan_netif.conflict5;

typedef struct netif.conflict11 netif.conflict11, *Pnetif.conflict11;

struct netif.conflict11 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict5 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict11 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wifi_mgmr_ap_msg wifi_mgmr_ap_msg, *Pwifi_mgmr_ap_msg;

struct wifi_mgmr_ap_msg {
    int32_t channel;
    char ssid[32];
    char ssid_tail[1];
    uint8_t hidden_ssid;
    uint32_t ssid_len;
    char psk[64];
    char psk_tail[1];
    uint32_t psk_len;
};

typedef struct wlan_netif.conflict3 wlan_netif.conflict3, *Pwlan_netif.conflict3;

typedef struct netif.conflict8 netif.conflict8, *Pnetif.conflict8;

struct netif.conflict8 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict3 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict8 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wifi_mgmr_ap_msg wifi_mgmr_ap_msg_t;

typedef struct mm_bcn_env_tag mm_bcn_env_tag, *Pmm_bcn_env_tag;

struct mm_bcn_env_tag {
    struct mm_bcn_change_req * param;
    int tx_cfm;
    _Bool tx_pending;
    _Bool update_ongoing;
    _Bool update_pending;
    undefined field_0xb;
    struct hal_dma_desc_tag dma;
    struct co_list tim_list;
};

typedef struct led_trigger_item led_trigger_item, *Pled_trigger_item;

typedef struct loop_timer loop_timer, *Ploop_timer;

typedef struct loop_ctx loop_ctx, *Ploop_ctx;

typedef struct utils_list utils_list, *Putils_list;

typedef struct loop_evt_handler_statistic loop_evt_handler_statistic, *Ploop_evt_handler_statistic;

typedef struct loop_evt_handler loop_evt_handler, *Ploop_evt_handler;

typedef struct loop_msg loop_msg, *Ploop_msg;


// WARNING! conflicting data type names: /DWARF/bloop.h/loop_msg/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u

struct loop_timer {
    utils_dlist_t dlist_item;
    uint8_t flags;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    uint time_added;
    uint time_target;
    int idx_task;
    uint32_t evt_type_map;
    void (* cb)(struct loop_ctx *, struct loop_timer *, void *);
    void * arg;
};

struct led_trigger_item {
    utils_dlist_t dlist_item;
    struct loop_timer timer;
    int type;
    int pin;
    int active;
    int current_val;
};

struct utils_list {
    struct utils_list_hdr * first;
    struct utils_list_hdr * last;
};

struct loop_evt_handler {
    char * name;
    int (* evt)(struct loop_ctx *, struct loop_evt_handler *, uint32_t *, uint32_t *);
    int (* handle)(struct loop_ctx *, struct loop_evt_handler *, struct loop_msg *);
};

struct loop_evt_handler_statistic {
    uint time_max;
    uint time_consumed;
    uint time_accumulated;
    uint count_triggered;
};

struct loop_ctx {
    TaskHandle_t looper;
    uint32_t bitmap_evt_async;
    uint32_t bitmap_evt_sync;
    uint32_t bitmap_msg;
    uint32_t evt_type_map_async[32];
    uint32_t evt_type_map_sync[32];
    struct utils_list list[32];
    struct loop_evt_handler_statistic statistic[32];
    struct loop_evt_handler * handlers[32];
    utils_dlist_t timer_dlist;
    utils_dlist_t timer_dued;
};

struct loop_msg {
    struct utils_list_hdr item;
    union anon_union_for_u u;
    void * arg1;
    void * arg2;
    uint time_added;
    uint time_consumed;
};

typedef struct led_trigger_ctx led_trigger_ctx, *Pled_trigger_ctx;

struct led_trigger_ctx {
    utils_dlist_t trigger_queue;
    utils_dlist_t waiting_queue;
};

typedef struct loop_evt_handler_holder loop_evt_handler_holder, *Ploop_evt_handler_holder;

struct loop_evt_handler_holder {
    struct loop_evt_handler handler;
    struct led_trigger_ctx * ctx;
};

typedef union anon_union anon_union, *Panon_union;

union anon_union {
    wint_t __wch;
    uchar __wchb[4];
};

typedef uint u32;

typedef struct rijndael_ctx rijndael_ctx, *Prijndael_ctx;

struct rijndael_ctx {
    int decrypt;
    int Nr;
    u32 key[60];
};

typedef struct rf_para_flash_tag rf_para_flash_tag, *Prf_para_flash_tag;

struct rf_para_flash_tag {
    uint32_t magic;
    uint8_t capcode_valid;
    uint8_t capcode;
    uint8_t poweroffset_valid;
    int8_t poweroffset[3];
    uint8_t mac_valid;
    uint8_t mac[6];
    uint8_t rsvd[3];
    uint32_t crc32;
};

typedef struct rf_para_flash_tag rf_para_flash_t;

typedef struct rf_calib2_tag.conflict9 rf_calib2_tag.conflict9, *Prf_calib2_tag.conflict9;

struct rf_calib2_tag.conflict9 {
    uint16_t fcal:8;
    uint16_t acal:5;
};

typedef struct rf_calib4_tag.conflict1 rf_calib4_tag.conflict1, *Prf_calib4_tag.conflict1;

struct rf_calib4_tag.conflict1 {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib2_tag rf_calib2_tag, *Prf_calib2_tag;

struct rf_calib2_tag {
    uint16_t fcal:8;
    uint16_t acal:5;
};

typedef struct rf_calib3_tag.conflict12 rf_calib3_tag.conflict12, *Prf_calib3_tag.conflict12;

struct rf_calib3_tag.conflict12 {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib4_tag.conflict rf_calib4_tag.conflict, *Prf_calib4_tag.conflict;

struct rf_calib4_tag.conflict {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib3_tag.conflict11 rf_calib3_tag.conflict11, *Prf_calib3_tag.conflict11;

struct rf_calib3_tag.conflict11 {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib3_tag.conflict10 rf_calib3_tag.conflict10, *Prf_calib3_tag.conflict10;

struct rf_calib3_tag.conflict10 {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib4_tag.conflict11 rf_calib4_tag.conflict11, *Prf_calib4_tag.conflict11;

struct rf_calib4_tag.conflict11 {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib2_tag.conflict12 rf_calib2_tag.conflict12, *Prf_calib2_tag.conflict12;

struct rf_calib2_tag.conflict12 {
    uint16_t fcal:8;
    uint16_t acal:5;
};

typedef struct rf_calib2_tag.conflict11 rf_calib2_tag.conflict11, *Prf_calib2_tag.conflict11;

struct rf_calib2_tag.conflict11 {
    uint16_t fcal:8;
    uint16_t acal:5;
};

typedef struct rf_calib2_tag.conflict10 rf_calib2_tag.conflict10, *Prf_calib2_tag.conflict10;

struct rf_calib2_tag.conflict10 {
    uint16_t fcal:8;
    uint16_t acal:5;
};

typedef struct rf_calib4_tag.conflict2 rf_calib4_tag.conflict2, *Prf_calib4_tag.conflict2;

struct rf_calib4_tag.conflict2 {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib4_tag.conflict4 rf_calib4_tag.conflict4, *Prf_calib4_tag.conflict4;

struct rf_calib4_tag.conflict4 {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib4_tag.conflict3 rf_calib4_tag.conflict3, *Prf_calib4_tag.conflict3;

struct rf_calib4_tag.conflict3 {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib4_tag.conflict6 rf_calib4_tag.conflict6, *Prf_calib4_tag.conflict6;

struct rf_calib4_tag.conflict6 {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib4_tag.conflict5 rf_calib4_tag.conflict5, *Prf_calib4_tag.conflict5;

struct rf_calib4_tag.conflict5 {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib4_tag.conflict8 rf_calib4_tag.conflict8, *Prf_calib4_tag.conflict8;

struct rf_calib4_tag.conflict8 {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib4_tag.conflict7 rf_calib4_tag.conflict7, *Prf_calib4_tag.conflict7;

struct rf_calib4_tag.conflict7 {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib4_tag.conflict9 rf_calib4_tag.conflict9, *Prf_calib4_tag.conflict9;

struct rf_calib4_tag.conflict9 {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib3_tag.conflict4 rf_calib3_tag.conflict4, *Prf_calib3_tag.conflict4;

struct rf_calib3_tag.conflict4 {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib3_tag.conflict5 rf_calib3_tag.conflict5, *Prf_calib3_tag.conflict5;

struct rf_calib3_tag.conflict5 {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib3_tag.conflict2 rf_calib3_tag.conflict2, *Prf_calib3_tag.conflict2;

struct rf_calib3_tag.conflict2 {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib3_tag.conflict3 rf_calib3_tag.conflict3, *Prf_calib3_tag.conflict3;

struct rf_calib3_tag.conflict3 {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib3_tag.conflict1 rf_calib3_tag.conflict1, *Prf_calib3_tag.conflict1;

struct rf_calib3_tag.conflict1 {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib3_tag.conflict8 rf_calib3_tag.conflict8, *Prf_calib3_tag.conflict8;

struct rf_calib3_tag.conflict8 {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib3_tag.conflict9 rf_calib3_tag.conflict9, *Prf_calib3_tag.conflict9;

struct rf_calib3_tag.conflict9 {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib3_tag.conflict6 rf_calib3_tag.conflict6, *Prf_calib3_tag.conflict6;

struct rf_calib3_tag.conflict6 {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib3_tag.conflict7 rf_calib3_tag.conflict7, *Prf_calib3_tag.conflict7;

struct rf_calib3_tag.conflict7 {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib2_tag.conflict2 rf_calib2_tag.conflict2, *Prf_calib2_tag.conflict2;

struct rf_calib2_tag.conflict2 {
    uint16_t fcal:8;
    uint16_t acal:5;
};

typedef struct rf_calib3_tag rf_calib3_tag, *Prf_calib3_tag;

struct rf_calib3_tag {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct anon_struct.conflict59 anon_struct.conflict59, *Panon_struct.conflict59;

typedef struct rf_calib1_tag.conflict1 rf_calib1_tag.conflict1, *Prf_calib1_tag.conflict1;

typedef struct rf_calib2_tag.conflict1 rf_calib2_tag.conflict1, *Prf_calib2_tag.conflict1;

struct rf_calib2_tag.conflict1 {
    uint16_t fcal:8;
    uint16_t acal:5;
};

struct rf_calib1_tag.conflict1 {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

struct anon_struct.conflict59 {
    uint32_t inited;
    struct rf_calib1_tag.conflict1 cal;
    struct rf_calib2_tag.conflict1 lo[21];
    undefined field_0x46;
    undefined field_0x47;
    struct rf_calib3_tag.conflict1 rxcal[4];
    struct rf_calib4_tag.conflict1 txcal[8];
};

typedef struct rf_calib3_tag.conflict rf_calib3_tag.conflict, *Prf_calib3_tag.conflict;

struct rf_calib3_tag.conflict {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib4_tag.conflict12 rf_calib4_tag.conflict12, *Prf_calib4_tag.conflict12;

struct rf_calib4_tag.conflict12 {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib2_tag.conflict5 rf_calib2_tag.conflict5, *Prf_calib2_tag.conflict5;

struct rf_calib2_tag.conflict5 {
    uint16_t fcal:8;
    uint16_t acal:5;
};

typedef struct rf_calib4_tag rf_calib4_tag, *Prf_calib4_tag;

struct rf_calib4_tag {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib1_tag.conflict9 rf_calib1_tag.conflict9, *Prf_calib1_tag.conflict9;

struct rf_calib1_tag.conflict9 {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct rf_calib1_tag.conflict8 rf_calib1_tag.conflict8, *Prf_calib1_tag.conflict8;

struct rf_calib1_tag.conflict8 {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct rf_calib1_tag.conflict7 rf_calib1_tag.conflict7, *Prf_calib1_tag.conflict7;

struct rf_calib1_tag.conflict7 {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct rf_calib1_tag.conflict6 rf_calib1_tag.conflict6, *Prf_calib1_tag.conflict6;

struct rf_calib1_tag.conflict6 {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct rf_calib1_tag.conflict5 rf_calib1_tag.conflict5, *Prf_calib1_tag.conflict5;

struct rf_calib1_tag.conflict5 {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct rf_calib1_tag.conflict4 rf_calib1_tag.conflict4, *Prf_calib1_tag.conflict4;

struct rf_calib1_tag.conflict4 {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct rf_calib1_tag.conflict3 rf_calib1_tag.conflict3, *Prf_calib1_tag.conflict3;

struct rf_calib1_tag.conflict3 {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct rf_calib1_tag.conflict2 rf_calib1_tag.conflict2, *Prf_calib1_tag.conflict2;

struct rf_calib1_tag.conflict2 {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct rf_calib1_tag.conflict rf_calib1_tag.conflict, *Prf_calib1_tag.conflict;

struct rf_calib1_tag.conflict {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct rf_calib_data_tag rf_calib_data_tag, *Prf_calib_data_tag;

typedef struct rf_calib2_tag.conflict4 rf_calib2_tag.conflict4, *Prf_calib2_tag.conflict4;

struct rf_calib2_tag.conflict4 {
    uint16_t fcal:8;
    uint16_t acal:5;
};

struct rf_calib_data_tag {
    uint32_t inited;
    struct rf_calib1_tag.conflict3 cal;
    struct rf_calib2_tag.conflict4 lo[21];
    undefined field_0x46;
    undefined field_0x47;
    struct rf_calib3_tag.conflict4 rxcal[4];
    struct rf_calib4_tag.conflict4 txcal[8];
};

typedef struct anon_struct.conflict60 anon_struct.conflict60, *Panon_struct.conflict60;

struct anon_struct.conflict60 {
    uint32_t inited;
    struct rf_calib1_tag.conflict2 cal;
    struct rf_calib2_tag.conflict2 lo[21];
    undefined field_0x46;
    undefined field_0x47;
    struct rf_calib3_tag.conflict2 rxcal[4];
    struct rf_calib4_tag.conflict2 txcal[8];
};

typedef struct rf_calib2_tag.conflict7 rf_calib2_tag.conflict7, *Prf_calib2_tag.conflict7;

struct rf_calib2_tag.conflict7 {
    uint16_t fcal:8;
    uint16_t acal:5;
};

typedef struct rf_calib2_tag.conflict8 rf_calib2_tag.conflict8, *Prf_calib2_tag.conflict8;

struct rf_calib2_tag.conflict8 {
    uint16_t fcal:8;
    uint16_t acal:5;
};

typedef struct rf_calib2_tag.conflict6 rf_calib2_tag.conflict6, *Prf_calib2_tag.conflict6;

struct rf_calib2_tag.conflict6 {
    uint16_t fcal:8;
    uint16_t acal:5;
};

typedef struct rf_calib2_tag.conflict3 rf_calib2_tag.conflict3, *Prf_calib2_tag.conflict3;

struct rf_calib2_tag.conflict3 {
    uint16_t fcal:8;
    uint16_t acal:5;
};

typedef struct rf_calib4_tag.conflict10 rf_calib4_tag.conflict10, *Prf_calib4_tag.conflict10;

struct rf_calib4_tag.conflict10 {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib1_tag.conflict10 rf_calib1_tag.conflict10, *Prf_calib1_tag.conflict10;

struct rf_calib1_tag.conflict10 {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct rf_calib_data_tag.conflict2 rf_calib_data_tag.conflict2, *Prf_calib_data_tag.conflict2;

struct rf_calib_data_tag.conflict2 {
    uint32_t inited;
    struct rf_calib1_tag.conflict10 cal;
    struct rf_calib2_tag.conflict12 lo[21];
    undefined field_0x46;
    undefined field_0x47;
    struct rf_calib3_tag.conflict12 rxcal[4];
    struct rf_calib4_tag.conflict12 txcal[8];
};

typedef struct anon_struct.conflict145 anon_struct.conflict145, *Panon_struct.conflict145;

struct anon_struct.conflict145 {
    uint32_t inited;
    struct rf_calib1_tag.conflict7 cal;
    struct rf_calib2_tag.conflict8 lo[21];
    undefined field_0x46;
    undefined field_0x47;
    struct rf_calib3_tag.conflict8 rxcal[4];
    struct rf_calib4_tag.conflict8 txcal[8];
};

typedef struct anon_struct.conflict146 anon_struct.conflict146, *Panon_struct.conflict146;

struct anon_struct.conflict146 {
    uint32_t inited;
    struct rf_calib1_tag.conflict8 cal;
    struct rf_calib2_tag.conflict9 lo[21];
    undefined field_0x46;
    undefined field_0x47;
    struct rf_calib3_tag.conflict9 rxcal[4];
    struct rf_calib4_tag.conflict9 txcal[8];
};

typedef struct rf_calib_data_tag.conflict1 rf_calib_data_tag.conflict1, *Prf_calib_data_tag.conflict1;

struct rf_calib_data_tag.conflict1 {
    uint32_t inited;
    struct rf_calib1_tag.conflict9 cal;
    struct rf_calib2_tag.conflict11 lo[21];
    undefined field_0x46;
    undefined field_0x47;
    struct rf_calib3_tag.conflict11 rxcal[4];
    struct rf_calib4_tag.conflict11 txcal[8];
};

typedef struct rf_calib1_tag rf_calib1_tag, *Prf_calib1_tag;

struct rf_calib1_tag {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct rf_calib2_tag.conflict rf_calib2_tag.conflict, *Prf_calib2_tag.conflict;

struct rf_calib2_tag.conflict {
    uint16_t fcal:8;
    uint16_t acal:5;
};

typedef struct rf_calib_data_tag.conflict rf_calib_data_tag.conflict, *Prf_calib_data_tag.conflict;

struct rf_calib_data_tag.conflict {
    uint32_t inited;
    struct rf_calib1_tag.conflict4 cal;
    struct rf_calib2_tag.conflict5 lo[21];
    undefined field_0x46;
    undefined field_0x47;
    struct rf_calib3_tag.conflict5 rxcal[4];
    struct rf_calib4_tag.conflict5 txcal[8];
};

typedef struct jsmntok_t jsmntok_t, *Pjsmntok_t;

typedef enum jsmntype_t {
    JSMN_ARRAY=2,
    JSMN_OBJECT=1,
    JSMN_PRIMITIVE=4,
    JSMN_STRING=3,
    JSMN_UNDEFINED=0
} jsmntype_t;

struct jsmntok_t {
    enum jsmntype_t type;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    int start;
    int end;
    int size;
};

typedef struct jsmn_parser jsmn_parser, *Pjsmn_parser;

struct jsmn_parser {
    uint pos;
    uint toknext;
    int toksuper;
};

typedef enum jsmnerr {
    JSMN_ERROR_INVAL=-2,
    JSMN_ERROR_NOMEM=-1,
    JSMN_ERROR_PART=-3
} jsmnerr;

typedef void * MessageBufferHandle_t;

typedef enum hostapd_state_tag {
    HOSTAPD_STATE_IDLE=0,
    HOSTAPD_STATE_MAX=1
} hostapd_state_tag;

typedef struct ip4_addr_packed ip4_addr_packed, *Pip4_addr_packed;

struct ip4_addr_packed {
    u32_t addr;
};

typedef struct ip_hdr ip_hdr, *Pip_hdr;

typedef struct ip4_addr_packed ip4_addr_p_t;

struct ip_hdr {
    u8_t _v_hl;
    u8_t _tos;
    u16_t _len;
    u16_t _id;
    u16_t _offset;
    u8_t _ttl;
    u8_t _proto;
    u16_t _chksum;
    ip4_addr_p_t src;
    ip4_addr_p_t dest;
};

typedef void (* tcpip_init_done_fn)(void *);

typedef void (* tcpip_callback_fn)(void *);

typedef struct cfg_element_entry cfg_element_entry, *Pcfg_element_entry;

typedef enum CFG_ELEMENT_TYPE_OPS {
    CFG_ELEMENT_TYPE_OPS_DUMP_DEBUG=3,
    CFG_ELEMENT_TYPE_OPS_GET=1,
    CFG_ELEMENT_TYPE_OPS_RESET=2,
    CFG_ELEMENT_TYPE_OPS_SET=0,
    CFG_ELEMENT_TYPE_OPS_UNKNOWN=4
} CFG_ELEMENT_TYPE_OPS;

struct cfg_element_entry {
    uint32_t task;
    uint16_t element;
    uint16_t type;
    char * name;
    void * val;
    int (* set)(struct cfg_element_entry *, void *, void *);
    int (* get)(struct cfg_element_entry *, void *, void *);
    int (* notify)(struct cfg_element_entry *, void *, void *, enum CFG_ELEMENT_TYPE_OPS);
};

typedef struct bl_txhdr.conflict3 bl_txhdr.conflict3, *Pbl_txhdr.conflict3;

typedef union bl_hw_txstatus.conflict5 bl_hw_txstatus.conflict5, *Pbl_hw_txstatus.conflict5;

typedef struct anon_struct.conflict347 anon_struct.conflict347, *Panon_struct.conflict347;

typedef uint32_t u32.conflict192;

typedef uint32_t u32.conflict193;

typedef uint32_t u32.conflict194;

typedef uint32_t u32.conflict195;

struct anon_struct.conflict347 {
    u32.conflict192 tx_done:1;
    u32.conflict193 retry_required:1;
    u32.conflict194 sw_retry_required:1;
    u32.conflict195 reserved:29;
};

union bl_hw_txstatus.conflict5 {
    struct anon_struct.conflict347 field_0;
    u32.conflict196 value;
};

struct bl_txhdr.conflict3 {
    struct utils_list_hdr item;
    union bl_hw_txstatus.conflict5 status;
    uint32_t * p;
    struct hostdesc.conflict54 host;
};

typedef struct bl_txhdr.conflict1 bl_txhdr.conflict1, *Pbl_txhdr.conflict1;

typedef union bl_hw_txstatus.conflict2 bl_hw_txstatus.conflict2, *Pbl_hw_txstatus.conflict2;

typedef struct anon_struct.conflict315 anon_struct.conflict315, *Panon_struct.conflict315;

typedef uint32_t u32.conflict47;

typedef uint32_t u32.conflict48;

typedef uint32_t u32.conflict49;

typedef uint32_t u32.conflict50;

struct anon_struct.conflict315 {
    u32.conflict47 tx_done:1;
    u32.conflict48 retry_required:1;
    u32.conflict49 sw_retry_required:1;
    u32.conflict50 reserved:29;
};

union bl_hw_txstatus.conflict2 {
    struct anon_struct.conflict315 field_0;
    u32.conflict51 value;
};

struct bl_txhdr.conflict1 {
    struct utils_list_hdr item;
    union bl_hw_txstatus.conflict2 status;
    uint32_t * p;
    struct hostdesc.conflict44 host;
};

typedef struct bl_txhdr.conflict bl_txhdr.conflict, *Pbl_txhdr.conflict;

typedef union bl_hw_txstatus.conflict1 bl_hw_txstatus.conflict1, *Pbl_hw_txstatus.conflict1;

typedef struct anon_struct.conflict314 anon_struct.conflict314, *Panon_struct.conflict314;

typedef uint32_t u32.conflict42;

typedef uint32_t u32.conflict43;

typedef uint32_t u32.conflict44;

typedef uint32_t u32.conflict45;

struct anon_struct.conflict314 {
    u32.conflict42 tx_done:1;
    u32.conflict43 retry_required:1;
    u32.conflict44 sw_retry_required:1;
    u32.conflict45 reserved:29;
};

union bl_hw_txstatus.conflict1 {
    struct anon_struct.conflict314 field_0;
    u32.conflict46 value;
};

struct bl_txhdr.conflict {
    struct utils_list_hdr item;
    union bl_hw_txstatus.conflict1 status;
    uint32_t * p;
    struct hostdesc.conflict43 host;
};

typedef struct bl_txhdr.conflict2 bl_txhdr.conflict2, *Pbl_txhdr.conflict2;

typedef union bl_hw_txstatus.conflict4 bl_hw_txstatus.conflict4, *Pbl_hw_txstatus.conflict4;

typedef struct anon_struct.conflict346 anon_struct.conflict346, *Panon_struct.conflict346;

typedef uint32_t u32.conflict187;

typedef uint32_t u32.conflict188;

typedef uint32_t u32.conflict189;

typedef uint32_t u32.conflict190;

struct anon_struct.conflict346 {
    u32.conflict187 tx_done:1;
    u32.conflict188 retry_required:1;
    u32.conflict189 sw_retry_required:1;
    u32.conflict190 reserved:29;
};

union bl_hw_txstatus.conflict4 {
    struct anon_struct.conflict346 field_0;
    u32.conflict191 value;
};

struct bl_txhdr.conflict2 {
    struct utils_list_hdr item;
    union bl_hw_txstatus.conflict4 status;
    uint32_t * p;
    struct hostdesc.conflict53 host;
};

typedef struct bl_txhdr bl_txhdr, *Pbl_txhdr;

typedef union bl_hw_txstatus.conflict bl_hw_txstatus.conflict, *Pbl_hw_txstatus.conflict;

typedef struct anon_struct.conflict313 anon_struct.conflict313, *Panon_struct.conflict313;

typedef uint32_t u32.conflict37;

typedef uint32_t u32.conflict38;

typedef uint32_t u32.conflict39;

typedef uint32_t u32.conflict40;

struct anon_struct.conflict313 {
    u32.conflict37 tx_done:1;
    u32.conflict38 retry_required:1;
    u32.conflict39 sw_retry_required:1;
    u32.conflict40 reserved:29;
};

union bl_hw_txstatus.conflict {
    struct anon_struct.conflict313 field_0;
    u32.conflict41 value;
};

struct bl_txhdr {
    struct utils_list_hdr item;
    union bl_hw_txstatus.conflict status;
    uint32_t * p;
    struct hostdesc.conflict42 host;
};

typedef struct lwip_socket_multicast_pair lwip_socket_multicast_pair, *Plwip_socket_multicast_pair;

typedef struct lwip_sock lwip_sock, *Plwip_sock;

typedef union lwip_sock_lastdata lwip_sock_lastdata, *Plwip_sock_lastdata;

union lwip_sock_lastdata {
    struct netbuf * netbuf;
    struct pbuf * pbuf;
};

struct lwip_sock {
    struct netconn * conn;
    union lwip_sock_lastdata lastdata;
    s16_t rcvevent;
    u16_t sendevent;
    u16_t errevent;
    u8_t select_waiting;
    undefined field_0xf;
};

struct lwip_socket_multicast_pair {
    struct lwip_sock * sock;
    ip4_addr_t if_addr;
    ip4_addr_t multi_addr;
};

typedef enum lwip_pollscan_opts {
    LWIP_POLLSCAN_CLEAR=1,
    LWIP_POLLSCAN_DEC_WAIT=4,
    LWIP_POLLSCAN_INC_WAIT=2
} lwip_pollscan_opts;

typedef union sockaddr_aligned sockaddr_aligned, *Psockaddr_aligned;

typedef struct sockaddr sockaddr, *Psockaddr;

typedef struct sockaddr_in sockaddr_in, *Psockaddr_in;

typedef u8_t sa_family_t;

typedef struct in_addr in_addr, *Pin_addr;

struct in_addr {
    in_addr_t s_addr;
};

struct sockaddr {
    u8_t sa_len;
    sa_family_t sa_family;
    char sa_data[14];
};

struct sockaddr_in {
    u8_t sin_len;
    sa_family_t sin_family;
    in_port_t sin_port;
    struct in_addr sin_addr;
    char sin_zero[8];
};

union sockaddr_aligned {
    struct sockaddr sa;
    struct sockaddr_in sin;
};

typedef struct scanu_raw_send_cfm scanu_raw_send_cfm, *Pscanu_raw_send_cfm;

struct scanu_raw_send_cfm {
    uint32_t status;
};

typedef struct scanu_raw_send_req scanu_raw_send_req, *Pscanu_raw_send_req;

struct scanu_raw_send_req {
    void * pkt;
    uint32_t len;
};

typedef struct scanu_start_cfm scanu_start_cfm, *Pscanu_start_cfm;

struct scanu_start_cfm {
    uint8_t status;
};

typedef struct Bl_SHA1_CTX Bl_SHA1_CTX, *PBl_SHA1_CTX;

struct Bl_SHA1_CTX {
    UINT32 Intermediate_Hash[5];
    UINT32 Length_Low;
    UINT32 Length_High;
    UINT32 Scratch[16];
    UINT8 Message_Block[64];
    SINT16 Message_Block_Index;
    UINT8 Computed;
    UINT8 Corrupted;
};

typedef struct mbedtls_sha1_context mbedtls_sha1_context, *Pmbedtls_sha1_context;

struct mbedtls_sha1_context {
    uint32_t total[2];
    uint32_t state[5];
    uchar buffer[64];
};

typedef struct wifi_cipher_t.conflict26 wifi_cipher_t.conflict26, *Pwifi_cipher_t.conflict26;

struct wifi_cipher_t.conflict26 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict24 wifi_cipher_t.conflict24, *Pwifi_cipher_t.conflict24;

struct wifi_cipher_t.conflict24 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict25 wifi_cipher_t.conflict25, *Pwifi_cipher_t.conflict25;

struct wifi_cipher_t.conflict25 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict22 wifi_cipher_t.conflict22, *Pwifi_cipher_t.conflict22;

struct wifi_cipher_t.conflict22 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict20 wifi_cipher_t.conflict20, *Pwifi_cipher_t.conflict20;

struct wifi_cipher_t.conflict20 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict21 wifi_cipher_t.conflict21, *Pwifi_cipher_t.conflict21;

struct wifi_cipher_t.conflict21 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct tcpip_callback_msg tcpip_callback_msg, *Ptcpip_callback_msg;

struct tcpip_callback_msg {
};

typedef struct wifi_cipher_t.conflict15 wifi_cipher_t.conflict15, *Pwifi_cipher_t.conflict15;

struct wifi_cipher_t.conflict15 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict16 wifi_cipher_t.conflict16, *Pwifi_cipher_t.conflict16;

struct wifi_cipher_t.conflict16 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict14 wifi_cipher_t.conflict14, *Pwifi_cipher_t.conflict14;

struct wifi_cipher_t.conflict14 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict11 wifi_cipher_t.conflict11, *Pwifi_cipher_t.conflict11;

struct wifi_cipher_t.conflict11 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict12 wifi_cipher_t.conflict12, *Pwifi_cipher_t.conflict12;

struct wifi_cipher_t.conflict12 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict10 wifi_cipher_t.conflict10, *Pwifi_cipher_t.conflict10;

struct wifi_cipher_t.conflict10 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict2 wifi_cipher_t.conflict2, *Pwifi_cipher_t.conflict2;

struct wifi_cipher_t.conflict2 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict3 wifi_cipher_t.conflict3, *Pwifi_cipher_t.conflict3;

struct wifi_cipher_t.conflict3 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict4 wifi_cipher_t.conflict4, *Pwifi_cipher_t.conflict4;

struct wifi_cipher_t.conflict4 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict6 wifi_cipher_t.conflict6, *Pwifi_cipher_t.conflict6;

struct wifi_cipher_t.conflict6 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict7 wifi_cipher_t.conflict7, *Pwifi_cipher_t.conflict7;

struct wifi_cipher_t.conflict7 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict8 wifi_cipher_t.conflict8, *Pwifi_cipher_t.conflict8;

struct wifi_cipher_t.conflict8 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef uint32_t u32.conflict29;

typedef uint32_t u32.conflict28;

typedef uint32_t u32.conflict27;

typedef struct netif.conflict17 netif.conflict17, *Pnetif.conflict17;

struct netif.conflict17 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict13 netif.conflict13, *Pnetif.conflict13;

struct netif.conflict13 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict15 netif.conflict15, *Pnetif.conflict15;

struct netif.conflict15 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef uint32_t u32.conflict32;

typedef uint32_t u32.conflict31;

typedef uint32_t u32.conflict30;

typedef uint32_t u32.conflict34;

typedef uint32_t u32.conflict33;

typedef struct netif.conflict33 netif.conflict33, *Pnetif.conflict33;

struct netif.conflict33 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict29 netif.conflict29, *Pnetif.conflict29;

struct netif.conflict29 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict27 netif.conflict27, *Pnetif.conflict27;

struct netif.conflict27 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict21 netif.conflict21, *Pnetif.conflict21;

struct netif.conflict21 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict23 netif.conflict23, *Pnetif.conflict23;

struct netif.conflict23 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct wlan_netif.conflict2 wlan_netif.conflict2, *Pwlan_netif.conflict2;

typedef struct netif.conflict7 netif.conflict7, *Pnetif.conflict7;

struct netif.conflict7 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict2 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict7 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict9 wlan_netif.conflict9, *Pwlan_netif.conflict9;

struct wlan_netif.conflict9 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict15 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict7 wlan_netif.conflict7, *Pwlan_netif.conflict7;

struct wlan_netif.conflict7 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict13 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict4 wlan_netif.conflict4, *Pwlan_netif.conflict4;

typedef struct netif.conflict9 netif.conflict9, *Pnetif.conflict9;

struct netif.conflict9 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct wlan_netif.conflict4 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict9 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct cm_ConnectionInfo cm_ConnectionInfo, *Pcm_ConnectionInfo;

typedef struct supplicantData supplicantData, *PsupplicantData;

typedef union anon_union_for_specDat anon_union_for_specDat, *Panon_union_for_specDat;

typedef struct customMIB_RSNStats_t customMIB_RSNStats_t, *PcustomMIB_RSNStats_t;

typedef struct RSNConfig_t RSNConfig_t, *PRSNConfig_t;

typedef struct keyMgmtInfoSta_t keyMgmtInfoSta_t, *PkeyMgmtInfoSta_t;

typedef struct SecurityParams_t SecurityParams_t, *PSecurityParams_t;

typedef struct apSpecificData_t apSpecificData_t, *PapSpecificData_t;

typedef struct AkmSuite_t AkmSuite_t, *PAkmSuite_t;

typedef struct MIC_Error_t MIC_Error_t, *PMIC_Error_t;

typedef struct BufferDesc BufferDesc, *PBufferDesc;

typedef struct BufferDesc BufferDesc_t;

typedef enum AkmType_e {
    AKM_1X=1,
    AKM_CCKM=99,
    AKM_FT_1X=3,
    AKM_FT_PSK=4,
    AKM_NONE=0,
    AKM_PSK=2,
    AKM_RSN_MAX=6,
    AKM_SHA256_1X=5,
    AKM_SHA256_PSK=6,
    AKM_SUITE_MAX=5,
    AKM_TDLS=7,
    AKM_WPA_MAX=2
} AkmType_e;

typedef enum AkmType_e AkmTypePacked_e;

typedef enum MIC_Fail_State_e {
    FIRST_MIC_FAIL_IN_60_SEC=1,
    NO_MIC_FAILURE=0,
    SECOND_MIC_FAIL_IN_60_SEC=2
} MIC_Fail_State_e;

typedef union anon_union_for_intf anon_union_for_intf, *Panon_union_for_intf;

struct MIC_Error_t {
    enum MIC_Fail_State_e status;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    BOOLEAN MICCounterMeasureEnabled;
    UINT32 disableStaAsso;
};

struct SecurityParams_t {
    struct SecurityMode_t wpaType;
    struct Cipher_t mcstCipher;
    struct Cipher_t ucstCipher;
};

struct customMIB_RSNStats_t {
    UINT8 TKIPICVErrors;
    UINT8 TKIPLocalMICFailures;
    UINT8 TKIPCounterMeasuresInvoked;
};

struct AkmSuite_t {
    UINT8 akmOui[3];
    AkmTypePacked_e akmType;
};

struct apSpecificData_t {
    struct apInfo_t * apInfo;
    BufferDesc_t * apInfoBuffDesc;
    struct ChanBandInfo_t chanBandInfo;
    undefined field_0xa;
    undefined field_0xb;
    struct staData_t staData;
};

union anon_union_for_specDat {
    struct apSpecificData_t apData;
};

struct keyMgmtInfoSta_t {
    UINT8 ANonce[32];
    UINT8 SNonce[32];
    UINT8 EAPOL_MIC_Key[16];
    UINT8 EAPOL_Encr_Key[16];
    UINT32 apCounterLo;
    UINT32 apCounterHi;
    UINT32 apCounterZeroDone;
    UINT32 staCounterLo;
    UINT32 staCounterHi;
    BOOLEAN RSNDataTrafficEnabled;
    BOOLEAN RSNSecured;
    BOOLEAN pwkHandshakeComplete;
    struct cipher_key_t * pRxDecryptKey;
    struct KeyData_t PWKey;
    struct KeyData_t GRKey;
    struct KeyData_t newPWKey;
    struct MIC_Error_t sta_MIC_Error;
    struct mm_timer_tag rsnTimer;
    struct cm_ConnectionInfo * connPtr;
    struct KeyData_t IGtk;
};

struct RSNConfig_t {
    UINT8 RSNEnabled:1;
    UINT8 pmkidValid:1;
    UINT8 rsnCapValid:1;
    UINT8 grpMgmtCipherValid:1;
    UINT8 rsvd:4;
    struct SecurityMode_t wpaType;
    struct Cipher_t mcstCipher;
    struct Cipher_t ucstCipher;
    struct AkmSuite_t AKM;
    UINT8 PMKID[16];
    struct IEEEtypes_RSNCapability_t rsnCap;
    struct Cipher_t grpMgmtCipher;
};

struct supplicantData {
    BOOLEAN inUse;
    struct IEEEtypes_SsIdElement_t hashSsId;
    IEEEtypes_MacAddr_t localBssid;
    IEEEtypes_MacAddr_t localStaAddr;
    struct customMIB_RSNStats_t customMIB_RSNStats;
    struct RSNConfig_t customMIB_RSNConfig;
    undefined field_0x51;
    undefined field_0x52;
    undefined field_0x53;
    struct keyMgmtInfoSta_t keyMgmtInfoSta;
    struct SecurityParams_t currParams;
};

struct cm_ConnectionInfo {
    UINT8 conType;
    UINT8 staId;
    UINT8 instNbr;
    UINT8 gtkHwKeyId;
    UINT8 ptkHwKeyId;
    UINT8 mfpHwKeyId;
    undefined field_0x6;
    undefined field_0x7;
    struct supplicantData * suppData;
    struct CommonMlmeData_t comData;
    IEEEtypes_MacAddr_t peerMacAddr;
    IEEEtypes_MacAddr_t localMacAddr;
    union anon_union_for_specDat specDat;
    cipher_key_buf_t TxRxCipherKeyBuf;
};

union anon_union_for_intf {
    uint32 Interface;
};

struct BufferDesc {
    union anon_union_for_intf intf;
    uint16 DataLen;
    undefined field_0x6;
    undefined field_0x7;
    void * Buffer;
};

typedef struct txl_buffer_tag txl_buffer_tag, *Ptxl_buffer_tag;

typedef struct txdesc txdesc, *Ptxdesc;

typedef struct umacdesc umacdesc, *Pumacdesc;

typedef struct lmacdesc lmacdesc, *Plmacdesc;

typedef struct tx_hw_desc tx_hw_desc, *Ptx_hw_desc;

typedef struct tx_cfm_tag tx_cfm_tag, *Ptx_cfm_tag;

typedef struct tx_agg_desc tx_agg_desc, *Ptx_agg_desc;

struct txl_buffer_tag {
    uint32_t length;
    uint32_t lenheader;
    uint32_t lenpad;
    uint32_t flags;
    struct txl_buffer_tag * next;
    struct txdesc * txdesc;
    struct dma_desc dma_desc[1];
    struct dma_desc dma_desc_pat;
    struct tx_pbd tbd;
    struct tx_pbd tbd_body[8];
    uint8_t user_idx;
    undefined field_0xed;
    undefined field_0xee;
    undefined field_0xef;
    struct txl_buffer_control buffer_control;
    struct tx_pbd tkip_mic_icv_pbd;
    uint8_t tkip_mic_icv[12];
    uint32_t[0] payload;
};

struct umacdesc {
    struct txl_buffer_control * buf_control;
    uint32_t buff_offset;
    uint16_t payl_len;
    uint8_t head_len;
    uint8_t hdr_len_802_2;
    uint8_t tail_len;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
};

struct lmacdesc {
    struct tx_agg_desc * agg_desc;
    struct txl_buffer_tag * buffer;
    struct tx_hw_desc * hw_desc;
};

struct tx_cfm_tag {
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    int8_t credits;
    uint8_t ampdu_size;
    uint8_t pad[2];
    uint32_t status;
};

struct tx_hw_desc {
    struct tx_cfm_tag * cfm_ptr;
    struct tx_hd thd;
};

struct txdesc {
    struct co_list_hdr list_hdr;
    struct hostdesc host;
    struct umacdesc umac;
    struct lmacdesc lmac;
    struct tx_hw_desc hw_desc;
    struct tx_cfm_tag hw_cfm;
    uint32_t buf[128];
};

struct tx_agg_desc {
    uint8_t reserved;
};

typedef struct mblock_free mblock_free, *Pmblock_free;

struct mblock_free {
    struct mblock_free * next;
    uint32_t size;
};

typedef struct inode_t inode_t, *Pinode_t;

typedef union inode_ops_t inode_ops_t, *Pinode_ops_t;

typedef struct file_ops file_ops, *Pfile_ops;

typedef struct file_t file_t, *Pfile_t;

typedef struct file_ops file_ops_t;

typedef struct fs_ops fs_ops, *Pfs_ops;


// WARNING! conflicting data type names: /DWARF/stat.h/stat - /stat.h/stat

typedef struct fs_ops fs_ops_t;

struct file_ops {
    int (* open)(struct inode_t *, struct file_t *);
    int (* close)(struct file_t *);
    ssize_t (* read)(struct file_t *, void *, size_t);
    ssize_t (* write)(struct file_t *, void *, size_t);
    int (* ioctl)(struct file_t *, int, ulong);
    int (* poll)(struct file_t *, _Bool, void (* )(struct pollfd *, void *), struct pollfd *, void *);
    int (* sync)(struct file_t *);
};

union inode_ops_t {
    file_ops_t * i_ops;
    fs_ops_t * i_fops;
};

struct inode_t {
    union inode_ops_t ops;
    void * i_arg;
    char * i_name;
    int i_flags;
    uint8_t type;
    uint8_t refs;
    undefined field_0x12;
    undefined field_0x13;
};

struct fs_ops {
    int (* open)(struct file_t *, char *, int);
    int (* close)(struct file_t *);
    ssize_t (* read)(struct file_t *, char *, size_t);
    ssize_t (* write)(struct file_t *, char *, size_t);
    off_t (* lseek)(struct file_t *, off_t, int);
    int (* sync)(struct file_t *);
    int (* stat)(struct file_t *, char *, struct stat *);
    int (* unlink)(struct file_t *, char *);
    int (* rename)(struct file_t *, char *, char *);
    aos_dir_t * (* opendir)(struct file_t *, char *);
    aos_dirent_t * (* readdir)(struct file_t *, struct aos_dir_t *);
    int (* closedir)(struct file_t *, struct aos_dir_t *);
    int (* mkdir)(struct file_t *, char *);
    int (* rmdir)(struct file_t *, char *);
    void (* rewinddir)(struct file_t *, struct aos_dir_t *);
    long (* telldir)(struct file_t *, struct aos_dir_t *);
    void (* seekdir)(struct file_t *, struct aos_dir_t *, long);
    int (* ioctl)(struct file_t *, int, ulong);
    int (* statfs)(struct file_t *, char *, struct statfs *);
    int (* access)(struct file_t *, char *, int);
};

struct file_t {
    struct inode_t * node;
    void * f_arg;
    size_t offset;
};

typedef struct lwip_cyclic_timer.conflict3 lwip_cyclic_timer.conflict3, *Plwip_cyclic_timer.conflict3;

struct lwip_cyclic_timer.conflict3 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef uint32_t u32.conflict180;

typedef uint32_t u32.conflict181;

typedef uint32_t u32.conflict182;

typedef uint32_t u32.conflict178;

typedef uint32_t u32.conflict179;

typedef uint32_t u32.conflict183;

typedef uint32_t u32.conflict184;

typedef uint32_t u32.conflict185;

typedef struct anon_struct.conflict287 anon_struct.conflict287, *Panon_struct.conflict287;

struct anon_struct.conflict287 {
    u8 category;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    undefined field_0x4;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    undefined field_0x8;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    undefined field_0xc;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    undefined field_0x10;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
    undefined field_0x14;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
    undefined field_0x18;
    undefined field_0x19;
};

typedef struct anon_struct.conflict292 anon_struct.conflict292, *Panon_struct.conflict292;

struct anon_struct.conflict292 {
    __le16 capab_info;
    __le16 status_code;
    __le16 aid;
    u8[0] variable;
};

typedef struct anon_struct.conflict297 anon_struct.conflict297, *Panon_struct.conflict297;

struct anon_struct.conflict297 {
    u8 category;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    undefined field_0x4;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    undefined field_0x8;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    undefined field_0xc;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    undefined field_0x10;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
    undefined field_0x14;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
    undefined field_0x18;
    undefined field_0x19;
};

typedef struct anon_struct.conflict298 anon_struct.conflict298, *Panon_struct.conflict298;

struct anon_struct.conflict298 {
    __le16 auth_alg;
    __le16 auth_transaction;
    __le16 status_code;
    u8[0] variable;
};

typedef struct anon_struct.conflict299 anon_struct.conflict299, *Panon_struct.conflict299;

struct anon_struct.conflict299 {
    __le16 reason_code;
};

typedef struct _Client _Client, *P_Client;

typedef struct _Client AWS_IoT_Client;

typedef struct Timer Timer, *PTimer;

typedef struct _ClientStatus _ClientStatus, *P_ClientStatus;

typedef struct _ClientStatus ClientStatus;

typedef struct _ClientData _ClientData, *P_ClientData;

typedef struct _ClientData ClientData;

typedef struct Network.conflict1 Network.conflict1, *PNetwork.conflict1;

typedef enum IoT_Error_t {
    FAILURE=-1,
    INVALID_TOPIC_TYPE_ERROR=-52,
    JSON_PARSE_ERROR=-42,
    LIMIT_EXCEEDED_ERROR=-51,
    MAX_SIZE_ERROR=-50,
    MQTT_CLIENT_NOT_IDLE_ERROR=-30,
    MQTT_CONNACK_BAD_USERDATA_ERROR=-40,
    MQTT_CONNACK_CONNECTION_ACCEPTED=1,
    MQTT_CONNACK_IDENTIFIER_REJECTED_ERROR=-38,
    MQTT_CONNACK_NOT_AUTHORIZED_ERROR=-41,
    MQTT_CONNACK_SERVER_UNAVAILABLE_ERROR=-39,
    MQTT_CONNACK_UNACCEPTABLE_PROTOCOL_VERSION_ERROR=-37,
    MQTT_CONNACK_UNKNOWN_ERROR=-36,
    MQTT_CONNECTION_ERROR=-26,
    MQTT_CONNECT_TIMEOUT_ERROR=-27,
    MQTT_DECODE_REMAINING_LENGTH_ERROR=-35,
    MQTT_MAX_SUBSCRIPTIONS_REACHED_ERROR=-34,
    MQTT_NOTHING_TO_READ=2,
    MQTT_REQUEST_TIMEOUT_ERROR=-28,
    MQTT_RX_BUFFER_TOO_SHORT_ERROR=-32,
    MQTT_RX_MESSAGE_PACKET_TYPE_INVALID_ERROR=-31,
    MQTT_TX_BUFFER_TOO_SHORT_ERROR=-33,
    MQTT_UNEXPECTED_CLIENT_STATE_ERROR=-29,
    MUTEX_DESTROY_ERROR=-49,
    MUTEX_INIT_ERROR=-46,
    MUTEX_LOCK_ERROR=-47,
    MUTEX_UNLOCK_ERROR=-48,
    NETWORK_ALREADY_CONNECTED_ERROR=-15,
    NETWORK_ATTEMPTING_RECONNECT=4,
    NETWORK_DISCONNECTED_ERROR=-13,
    NETWORK_ERR_NET_CONNECT_FAILED=-24,
    NETWORK_ERR_NET_SOCKET_FAILED=-22,
    NETWORK_ERR_NET_UNKNOWN_HOST=-23,
    NETWORK_MANUALLY_DISCONNECTED=5,
    NETWORK_MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED=-16,
    NETWORK_PHYSICAL_LAYER_CONNECTED=6,
    NETWORK_PHYSICAL_LAYER_DISCONNECTED=-18,
    NETWORK_PK_PRIVATE_KEY_PARSE_ERROR=-21,
    NETWORK_RECONNECTED=3,
    NETWORK_RECONNECT_TIMED_OUT_ERROR=-14,
    NETWORK_SSL_CERT_ERROR=-9,
    NETWORK_SSL_CONNECT_TIMEOUT_ERROR=-6,
    NETWORK_SSL_INIT_ERROR=-8,
    NETWORK_SSL_NOTHING_TO_READ=-25,
    NETWORK_SSL_READ_ERROR=-12,
    NETWORK_SSL_READ_TIMEOUT_ERROR=-11,
    NETWORK_SSL_UNKNOWN_ERROR=-17,
    NETWORK_SSL_WRITE_ERROR=-7,
    NETWORK_SSL_WRITE_TIMEOUT_ERROR=-10,
    NETWORK_X509_DEVICE_CRT_PARSE_ERROR=-20,
    NETWORK_X509_ROOT_CRT_PARSE_ERROR=-19,
    NULL_VALUE_ERROR=-2,
    SHADOW_JSON_BUFFER_TRUNCATED=-44,
    SHADOW_JSON_ERROR=-45,
    SHADOW_WAIT_FOR_PUBLISH=-43,
    SSL_CONNECTION_ERROR=-4,
    SUCCESS=0,
    TCP_CONNECTION_ERROR=-3,
    TCP_SETUP_ERROR=-5
} IoT_Error_t;

typedef struct Network Network, *PNetwork;

typedef struct TLSConnectParams TLSConnectParams, *PTLSConnectParams;

typedef enum _ClientState {
    CLIENT_STATE_CONNECTED_IDLE=3,
    CLIENT_STATE_CONNECTED_PUBLISH_IN_PROGRESS=5,
    CLIENT_STATE_CONNECTED_RESUBSCRIBE_IN_PROGRESS=8,
    CLIENT_STATE_CONNECTED_SUBSCRIBE_IN_PROGRESS=6,
    CLIENT_STATE_CONNECTED_UNSUBSCRIBE_IN_PROGRESS=7,
    CLIENT_STATE_CONNECTED_WAIT_FOR_CB_RETURN=9,
    CLIENT_STATE_CONNECTED_YIELD_IN_PROGRESS=4,
    CLIENT_STATE_CONNECTING=2,
    CLIENT_STATE_DISCONNECTED_ERROR=11,
    CLIENT_STATE_DISCONNECTED_MANUALLY=12,
    CLIENT_STATE_DISCONNECTING=10,
    CLIENT_STATE_INITIALIZED=1,
    CLIENT_STATE_INVALID=0,
    CLIENT_STATE_PENDING_RECONNECT=13
} _ClientState;

typedef enum _ClientState ClientState;

typedef struct _IoT_Mutex_t _IoT_Mutex_t, *P_IoT_Mutex_t;

typedef struct _IoT_Mutex_t IoT_Mutex_t;

typedef struct IoT_Client_Connect_Params IoT_Client_Connect_Params, *PIoT_Client_Connect_Params;

typedef struct _MessageHandlers.conflict47 _MessageHandlers.conflict47, *P_MessageHandlers.conflict47;

typedef struct IoT_Publish_Message_Params IoT_Publish_Message_Params, *PIoT_Publish_Message_Params;

typedef struct _MessageHandlers.conflict47 MessageHandlers.conflict40;

typedef enum MQTT_Ver_t {
    MQTT_3_1_1=4
} MQTT_Ver_t;

typedef struct IoT_MQTT_Will_Options IoT_MQTT_Will_Options, *PIoT_MQTT_Will_Options;

typedef enum QoS {
    QOS0=0,
    QOS1=1
} QoS;

struct TLSConnectParams {
    char * pRootCALocation;
    char * pDeviceCertLocation;
    char * pDevicePrivateKeyLocation;
    char * pDestinationURL;
    uint16_t DestinationPort;
    undefined field_0x12;
    undefined field_0x13;
    uint32_t timeout_ms;
    _Bool ServerVerificationFlag;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
};

struct Network.conflict1 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict2 tlsDataParams;
};

struct _MessageHandlers.conflict47 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

struct _IoT_Mutex_t {
    SemaphoreHandle_t mutex;
};

struct IoT_MQTT_Will_Options {
    char struct_id[4];
    char * pTopicName;
    uint16_t topicNameLen;
    undefined field_0xa;
    undefined field_0xb;
    char * pMessage;
    uint16_t msgLen;
    _Bool isRetained;
    enum QoS qos;
};

struct IoT_Client_Connect_Params {
    char struct_id[4];
    enum MQTT_Ver_t MQTTVersion;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    char * pClientID;
    uint16_t clientIDLen;
    uint16_t keepAliveIntervalInSec;
    _Bool isCleanSession;
    _Bool isWillMsgPresent;
    undefined field_0x12;
    undefined field_0x13;
    struct IoT_MQTT_Will_Options will;
    char * pUsername;
    uint16_t usernameLen;
    undefined field_0x2e;
    undefined field_0x2f;
    char * pPassword;
    uint16_t passwordLen;
    undefined field_0x36;
    undefined field_0x37;
};

struct _ClientData {
    uint16_t nextPacketId;
    undefined field_0x2;
    undefined field_0x3;
    uint32_t packetTimeoutMs;
    uint32_t commandTimeoutMs;
    uint16_t keepAliveInterval;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t currentReconnectWaitInterval;
    uint32_t counterNetworkDisconnected;
    size_t writeBufSize;
    size_t readBufSize;
    size_t readBufIndex;
    uchar writeBuf[512];
    uchar readBuf[512];
    _Bool isBlockOnThreadLockEnabled;
    undefined field_0x425;
    undefined field_0x426;
    undefined field_0x427;
    IoT_Mutex_t state_change_mutex;
    IoT_Mutex_t tls_read_mutex;
    IoT_Mutex_t tls_write_mutex;
    struct IoT_Client_Connect_Params options;
    MessageHandlers.conflict40 messageHandlers[5];
    void (* disconnectHandler)(AWS_IoT_Client *, void *);
    void * disconnectHandlerData;
};

struct IoT_Publish_Message_Params {
    enum QoS qos;
    uint8_t isRetained;
    uint8_t isDup;
    undefined field_0x3;
    uint16_t id;
    undefined field_0x6;
    undefined field_0x7;
    void * payload;
    size_t payloadLen;
};

struct Network {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict tlsDataParams;
};

struct _ClientStatus {
    ClientState clientState;
    _Bool isPingOutstanding;
    _Bool isAutoReconnectEnabled;
};

struct Timer {
    uint32_t start_ticks;
    uint32_t timeout_ticks;
    uint32_t last_polled_ticks;
};

struct _Client {
    struct Timer pingTimer;
    struct Timer reconnectDelayTimer;
    ClientStatus clientStatus;
    undefined field_0x1b;
    ClientData clientData;
    struct Network.conflict1 networkStack;
};

typedef struct anon_struct.conflict342 anon_struct.conflict342, *Panon_struct.conflict342;

struct anon_struct.conflict342 {
    u8 category;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    undefined field_0x4;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    undefined field_0x8;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    undefined field_0xc;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    undefined field_0x10;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
    undefined field_0x14;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
    undefined field_0x18;
    undefined field_0x19;
};

typedef struct ke_state_handler ke_state_handler, *Pke_state_handler;

typedef struct ke_msg_handler ke_msg_handler, *Pke_msg_handler;

typedef uint16_t ke_msg_id_t;

struct ke_state_handler {
    struct ke_msg_handler * msg_table;
    uint16_t msg_cnt;
    undefined field_0x6;
    undefined field_0x7;
};

struct ke_msg_handler {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct wlan_netif.conflict14 wlan_netif.conflict14, *Pwlan_netif.conflict14;

struct wlan_netif.conflict14 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict21 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict11 wlan_netif.conflict11, *Pwlan_netif.conflict11;

struct wlan_netif.conflict11 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict17 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct anon_struct.conflict301 anon_struct.conflict301, *Panon_struct.conflict301;

struct anon_struct.conflict301 {
    __le16 capab_info;
    __le16 status_code;
    __le16 aid;
    u8[0] variable;
};

typedef struct anon_struct.conflict302 anon_struct.conflict302, *Panon_struct.conflict302;

struct anon_struct.conflict302 {
    __le16 capab_info;
    __le16 status_code;
    __le16 aid;
    u8[0] variable;
};

typedef struct anon_struct.conflict303 anon_struct.conflict303, *Panon_struct.conflict303;

struct anon_struct.conflict303 {
    __le16 capab_info;
    __le16 listen_interval;
    u8 current_ap[6];
    u8[0] variable;
};

typedef struct anon_struct.conflict304 anon_struct.conflict304, *Panon_struct.conflict304;

struct anon_struct.conflict304 {
    __le16 reason_code;
};

typedef struct wlan_netif.conflict16 wlan_netif.conflict16, *Pwlan_netif.conflict16;

struct wlan_netif.conflict16 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict23 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct anon_struct.conflict300 anon_struct.conflict300, *Panon_struct.conflict300;

struct anon_struct.conflict300 {
    __le16 capab_info;
    __le16 listen_interval;
    u8[0] variable;
};

typedef struct wlan_netif.conflict19 wlan_netif.conflict19, *Pwlan_netif.conflict19;

struct wlan_netif.conflict19 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict27 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct anon_struct.conflict305 anon_struct.conflict305, *Panon_struct.conflict305;

struct anon_struct.conflict305 {
    __le64 timestamp;
    __le16 beacon_int;
    __le16 capab_info;
    u8[0] variable;
};

typedef struct anon_struct.conflict306 anon_struct.conflict306, *Panon_struct.conflict306;

struct anon_struct.conflict306 {
    __le64 timestamp;
    __le16 beacon_int;
    __le16 capab_info;
    u8[0] variable;
};

typedef struct anon_struct.conflict307 anon_struct.conflict307, *Panon_struct.conflict307;

struct anon_struct.conflict307 {
    u8 category;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    undefined field_0x4;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    undefined field_0x8;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    undefined field_0xc;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    undefined field_0x10;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
    undefined field_0x14;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
    undefined field_0x18;
    undefined field_0x19;
};

typedef struct wlan_netif.conflict24 wlan_netif.conflict24, *Pwlan_netif.conflict24;

struct wlan_netif.conflict24 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict33 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct wlan_netif.conflict21 wlan_netif.conflict21, *Pwlan_netif.conflict21;

struct wlan_netif.conflict21 {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif.conflict29 netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef struct anon_struct.conflict16 anon_struct.conflict16, *Panon_struct.conflict16;

struct anon_struct.conflict16 {
    uint8_t mac[6];
    uint8_t used;
};

typedef union anon_union_for_u.conflict2 anon_union_for_u.conflict2, *Panon_union_for_u.conflict2;

union anon_union_for_u.conflict2 {
    struct anon_struct.conflict342 wme_action;
    struct anon_struct.conflict342 chan_switch;
    struct anon_struct.conflict342 ext_chan_switch;
    struct anon_struct.conflict342 measurement;
    struct anon_struct.conflict342 addba_req;
    struct anon_struct.conflict342 addba_resp;
    struct anon_struct.conflict342 delba;
    struct anon_struct.conflict342 self_prot;
    struct anon_struct.conflict342 mesh_action;
    struct anon_struct.conflict342 sa_query;
    struct anon_struct.conflict342 ht_smps;
    struct anon_struct.conflict342 ht_notify_cw;
    struct anon_struct.conflict342 tdls_discover_resp;
    struct anon_struct.conflict342 vht_opmode_notif;
    struct anon_struct.conflict342 vht_group_notif;
    struct anon_struct.conflict342 tpc_report;
    struct anon_struct.conflict342 ftm;
};

typedef union anon_union_for_u.conflict1 anon_union_for_u.conflict1, *Panon_union_for_u.conflict1;

union anon_union_for_u.conflict1 {
    struct anon_struct.conflict307 wme_action;
    struct anon_struct.conflict307 chan_switch;
    struct anon_struct.conflict307 ext_chan_switch;
    struct anon_struct.conflict307 measurement;
    struct anon_struct.conflict307 addba_req;
    struct anon_struct.conflict307 addba_resp;
    struct anon_struct.conflict307 delba;
    struct anon_struct.conflict307 self_prot;
    struct anon_struct.conflict307 mesh_action;
    struct anon_struct.conflict307 sa_query;
    struct anon_struct.conflict307 ht_smps;
    struct anon_struct.conflict307 ht_notify_cw;
    struct anon_struct.conflict307 tdls_discover_resp;
    struct anon_struct.conflict307 vht_opmode_notif;
    struct anon_struct.conflict307 vht_group_notif;
    struct anon_struct.conflict307 tpc_report;
    struct anon_struct.conflict307 ftm;
};

typedef union anon_union_for_u.conflict anon_union_for_u.conflict, *Panon_union_for_u.conflict;

union anon_union_for_u.conflict {
    struct anon_struct.conflict297 wme_action;
    struct anon_struct.conflict297 chan_switch;
    struct anon_struct.conflict297 ext_chan_switch;
    struct anon_struct.conflict297 measurement;
    struct anon_struct.conflict297 addba_req;
    struct anon_struct.conflict297 addba_resp;
    struct anon_struct.conflict297 delba;
    struct anon_struct.conflict297 self_prot;
    struct anon_struct.conflict297 mesh_action;
    struct anon_struct.conflict297 sa_query;
    struct anon_struct.conflict297 ht_smps;
    struct anon_struct.conflict297 ht_notify_cw;
    struct anon_struct.conflict297 tdls_discover_resp;
    struct anon_struct.conflict297 vht_opmode_notif;
    struct anon_struct.conflict297 vht_group_notif;
    struct anon_struct.conflict297 tpc_report;
    struct anon_struct.conflict297 ftm;
};


// WARNING! conflicting data type names: /DWARF/_UNCATEGORIZED_/anon_struct/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u


// WARNING! conflicting data type names: /DWARF/_UNCATEGORIZED_/ieee80211_mgmt/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u

typedef struct ip_mreq ip_mreq, *Pip_mreq;

struct ip_mreq {
    struct in_addr imr_multiaddr;
    struct in_addr imr_interface;
};

typedef struct ifreq ifreq, *Pifreq;

struct ifreq {
    char ifr_name[6];
};

typedef struct sockaddr_storage sockaddr_storage, *Psockaddr_storage;

struct sockaddr_storage {
    u8_t s2_len;
    sa_family_t ss_family;
    char s2_data1[2];
    u32_t s2_data2[3];
};

typedef u32_t socklen_t;

typedef struct iovec iovec, *Piovec;

struct iovec {
    void * iov_base;
    size_t iov_len;
};

typedef struct msghdr msghdr, *Pmsghdr;

struct msghdr {
    void * msg_name;
    socklen_t msg_namelen;
    struct iovec * msg_iov;
    int msg_iovlen;
    void * msg_control;
    socklen_t msg_controllen;
    int msg_flags;
};

typedef uint nfds_t;

typedef TimerHandle_t timer_cb_arg_t;

typedef struct mm_env_tag mm_env_tag, *Pmm_env_tag;

struct mm_env_tag {
    uint32_t rx_filter_umac;
    uint32_t rx_filter_lmac_enable;
    uint16_t ampdu_max_dur[5];
    uint8_t prev_mm_state;
    uint8_t prev_hw_state;
    uint32_t basic_rates[2];
    uint32_t uapsd_timeout;
    uint16_t lp_clk_accuracy;
    uint8_t host_idle;
    _Bool keep_alive_status_enabled;
    uint32_t keep_alive_packet_counter;
    uint32_t keep_alive_time_last_received;
};

typedef enum mm_features {
    MM_FEAT_AMPDU_BIT=9,
    MM_FEAT_AMSDU_BIT=10,
    MM_FEAT_AUTOBCN_BIT=1,
    MM_FEAT_BCN_BIT=0,
    MM_FEAT_BFMEE_BIT=17,
    MM_FEAT_BFMER_BIT=18,
    MM_FEAT_CHNL_CTXT_BIT=11,
    MM_FEAT_CMON_BIT=3,
    MM_FEAT_DPSM_BIT=8,
    MM_FEAT_HWSCAN_BIT=2,
    MM_FEAT_MESH_BIT=23,
    MM_FEAT_MFP_BIT=20,
    MM_FEAT_MROLE_BIT=4,
    MM_FEAT_MU_MIMO_RX_BIT=21,
    MM_FEAT_MU_MIMO_TX_BIT=22,
    MM_FEAT_P2P_BIT=13,
    MM_FEAT_P2P_GO_BIT=14,
    MM_FEAT_PS_BIT=6,
    MM_FEAT_RADAR_BIT=5,
    MM_FEAT_REORD_BIT=12,
    MM_FEAT_TDLS_BIT=24,
    MM_FEAT_UAPSD_BIT=7,
    MM_FEAT_UMAC_BIT=15,
    MM_FEAT_VHT_BIT=16,
    MM_FEAT_WAPI_BIT=19
} mm_features;

typedef TickType_t EventBits_t;

typedef struct EventGroupDef_t EventGroupDef_t, *PEventGroupDef_t;

typedef struct EventGroupDef_t * EventGroupHandle_t;

struct EventGroupDef_t {
    EventBits_t uxEventBits;
    List_t xTasksWaitingForBits;
    UBaseType_t uxEventGroupNumber;
    uint8_t ucStaticallyAllocated;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
};

typedef struct gethostbyname_r_helper gethostbyname_r_helper, *Pgethostbyname_r_helper;

struct gethostbyname_r_helper {
    ip_addr_t * addr_list[2];
    ip_addr_t addr;
    char * aliases;
};

typedef ulonglong uintmax_t;

typedef longlong intmax_t;

typedef struct addrinfo addrinfo, *Paddrinfo;

struct addrinfo {
    int ai_flags;
    int ai_family;
    int ai_socktype;
    int ai_protocol;
    socklen_t ai_addrlen;
    struct sockaddr * ai_addr;
    char * ai_canonname;
    struct addrinfo * ai_next;
};

typedef struct hostent hostent, *Phostent;

struct hostent {
    char * h_name;
    char * * h_aliases;
    int h_addrtype;
    int h_length;
    char * * h_addr_list;
};

typedef struct EventGroupDef_t EventGroup_t;

typedef struct Ring_Buffer_Type Ring_Buffer_Type, *PRing_Buffer_Type;

struct Ring_Buffer_Type {
    uint8_t * pointer;
    uint8_t readMirror;
    undefined field_0x5;
    uint16_t readIndex;
    uint8_t writeMirror;
    undefined field_0x9;
    uint16_t writeIndex;
    uint16_t size;
    undefined field_0xe;
    undefined field_0xf;
    void (* lock)(void);
    void (* unlock)(void);
};

typedef union anon_union.conflict60 anon_union.conflict60, *Panon_union.conflict60;

union anon_union.conflict60 {
    uint8_t ht[4];
};

typedef union anon_union.conflict131 anon_union.conflict131, *Panon_union.conflict131;

union anon_union.conflict131 {
    uint8_t ht[4];
};

typedef union anon_union.conflict53 anon_union.conflict53, *Panon_union.conflict53;

union anon_union.conflict53 {
    uint8_t ht[4];
};

typedef union anon_union.conflict178 anon_union.conflict178, *Panon_union.conflict178;

union anon_union.conflict178 {
    uint8_t ht[4];
};

typedef union anon_union.conflict170 anon_union.conflict170, *Panon_union.conflict170;

union anon_union.conflict170 {
    uint8_t ht[4];
};

typedef union anon_union.conflict8 anon_union.conflict8, *Panon_union.conflict8;

union anon_union.conflict8 {
    uint8_t ht[4];
};

typedef union anon_union.conflict164 anon_union.conflict164, *Panon_union.conflict164;

union anon_union.conflict164 {
    uint8_t ht[4];
};

typedef union anon_union.conflict22 anon_union.conflict22, *Panon_union.conflict22;

union anon_union.conflict22 {
    uint8_t ht[4];
};

typedef union anon_union.conflict67 anon_union.conflict67, *Panon_union.conflict67;

union anon_union.conflict67 {
    uint8_t ht[4];
};

typedef union anon_union.conflict124 anon_union.conflict124, *Panon_union.conflict124;

union anon_union.conflict124 {
    uint8_t ht[4];
};

typedef union anon_union.conflict82 anon_union.conflict82, *Panon_union.conflict82;

union anon_union.conflict82 {
    uint8_t ht[4];
};

typedef union anon_union.conflict73 anon_union.conflict73, *Panon_union.conflict73;

union anon_union.conflict73 {
    uint8_t ht[4];
};

typedef union anon_union.conflict150 anon_union.conflict150, *Panon_union.conflict150;

union anon_union.conflict150 {
    uint8_t ht[4];
};

typedef union anon_union.conflict32 anon_union.conflict32, *Panon_union.conflict32;

union anon_union.conflict32 {
    uint8_t ht[4];
};

typedef union anon_union.conflict157 anon_union.conflict157, *Panon_union.conflict157;

union anon_union.conflict157 {
    uint8_t ht[4];
};

typedef union anon_union.conflict39 anon_union.conflict39, *Panon_union.conflict39;

union anon_union.conflict39 {
    uint8_t ht[4];
};

typedef union anon_union.conflict89 anon_union.conflict89, *Panon_union.conflict89;

union anon_union.conflict89 {
    uint8_t ht[4];
};

typedef union anon_union.conflict46 anon_union.conflict46, *Panon_union.conflict46;

union anon_union.conflict46 {
    uint8_t ht[4];
};

typedef union anon_union.conflict143 anon_union.conflict143, *Panon_union.conflict143;

union anon_union.conflict143 {
    uint8_t ht[4];
};

typedef struct udp_hdr udp_hdr, *Pudp_hdr;

struct udp_hdr {
    u16_t src;
    u16_t dest;
    u16_t len;
    u16_t chksum;
};

typedef union anon_union.conflict14 anon_union.conflict14, *Panon_union.conflict14;

union anon_union.conflict14 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict15 anon_union.conflict15, *Panon_union.conflict15;

union anon_union.conflict15 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef struct anon_struct.conflict345 anon_struct.conflict345, *Panon_struct.conflict345;

struct anon_struct.conflict345 {
    u32.conflict182 tx_done:1;
    u32.conflict183 retry_required:1;
    u32.conflict184 sw_retry_required:1;
    u32.conflict185 reserved:29;
};

typedef union anon_union.conflict16 anon_union.conflict16, *Panon_union.conflict16;

union anon_union.conflict16 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict18 anon_union.conflict18, *Panon_union.conflict18;

union anon_union.conflict18 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict19 anon_union.conflict19, *Panon_union.conflict19;

union anon_union.conflict19 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef struct anon_struct.conflict344 anon_struct.conflict344, *Panon_struct.conflict344;

struct anon_struct.conflict344 {
    u32.conflict178 tx_done:1;
    u32.conflict179 retry_required:1;
    u32.conflict180 sw_retry_required:1;
    u32.conflict181 reserved:29;
};

typedef union anon_union.conflict4 anon_union.conflict4, *Panon_union.conflict4;

union anon_union.conflict4 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict5 anon_union.conflict5, *Panon_union.conflict5;

union anon_union.conflict5 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict6 anon_union.conflict6, *Panon_union.conflict6;

union anon_union.conflict6 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict20 anon_union.conflict20, *Panon_union.conflict20;

union anon_union.conflict20 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict24 anon_union.conflict24, *Panon_union.conflict24;

union anon_union.conflict24 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict25 anon_union.conflict25, *Panon_union.conflict25;

union anon_union.conflict25 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict26 anon_union.conflict26, *Panon_union.conflict26;

union anon_union.conflict26 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict28 anon_union.conflict28, *Panon_union.conflict28;

union anon_union.conflict28 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef struct rx_dmadesc rx_dmadesc, *Prx_dmadesc;

typedef struct rx_hd rx_hd, *Prx_hd;

typedef struct phy_channel_info phy_channel_info, *Pphy_channel_info;

typedef struct rx_swdesc rx_swdesc, *Prx_swdesc;

typedef struct rx_payloaddesc rx_payloaddesc, *Prx_payloaddesc;

typedef struct rx_pbd rx_pbd, *Prx_pbd;

struct rx_hd {
    uint32_t upatternrx;
    uint32_t next;
    uint32_t first_pbd_ptr;
    struct rx_swdesc * swdesc;
    uint32_t datastartptr;
    uint32_t dataendptr;
    uint32_t headerctrlinfo;
    uint16_t frmlen;
    uint16_t ampdu_stat_info;
    uint32_t tsflo;
    uint32_t tsfhi;
    uint32_t recvec1a;
    uint32_t recvec1b;
    uint32_t recvec1c;
    uint32_t recvec1d;
    uint32_t recvec2a;
    uint32_t recvec2b;
    uint32_t statinfo;
};

struct phy_channel_info {
    uint32_t info1;
    uint32_t info2;
};

struct rx_dmadesc {
    struct rx_hd hd;
    struct phy_channel_info phy_info;
    uint32_t flags;
    uint32_t pattern;
    uint32_t payl_offset;
    uint32_t reserved_pad[2];
    uint32_t use_in_tcpip;
};

struct rx_swdesc {
    struct co_list_hdr list_hdr;
    struct rx_dmadesc * dma_hdrdesc;
    struct rx_payloaddesc * pd;
    struct rx_pbd * last_pbd;
    struct rx_pbd * spare_pbd;
    uint32_t host_id;
    uint32_t frame_len;
    uint8_t status;
    uint8_t pbd_count;
    uint8_t use_in_tcpip;
    undefined field_0x1f;
};

struct rx_pbd {
    uint32_t upattern;
    uint32_t next;
    uint32_t datastartptr;
    uint32_t dataendptr;
    uint16_t bufstatinfo;
    uint16_t reserved;
};

struct rx_payloaddesc {
    struct rx_pbd pbd;
    uint32_t pd_status;
    uint32_t * buffer_rx;
    void * pbuf_holder[6];
};

typedef union anon_union.conflict29 anon_union.conflict29, *Panon_union.conflict29;

union anon_union.conflict29 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict30 anon_union.conflict30, *Panon_union.conflict30;

union anon_union.conflict30 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict35 anon_union.conflict35, *Panon_union.conflict35;

union anon_union.conflict35 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict36 anon_union.conflict36, *Panon_union.conflict36;

union anon_union.conflict36 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict37 anon_union.conflict37, *Panon_union.conflict37;

union anon_union.conflict37 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict50 anon_union.conflict50, *Panon_union.conflict50;

union anon_union.conflict50 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict42 anon_union.conflict42, *Panon_union.conflict42;

union anon_union.conflict42 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict43 anon_union.conflict43, *Panon_union.conflict43;

union anon_union.conflict43 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict44 anon_union.conflict44, *Panon_union.conflict44;

union anon_union.conflict44 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict49 anon_union.conflict49, *Panon_union.conflict49;

union anon_union.conflict49 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union bl_hw_txstatus bl_hw_txstatus, *Pbl_hw_txstatus;

typedef struct anon_struct.conflict310 anon_struct.conflict310, *Panon_struct.conflict310;

struct anon_struct.conflict310 {
    u32.conflict31 tx_done:1;
    u32.conflict32 retry_required:1;
    u32.conflict33 sw_retry_required:1;
    u32.conflict34 reserved:29;
};

union bl_hw_txstatus {
    struct anon_struct.conflict310 field_0;
    u32.conflict35 value;
};

typedef union anon_union.conflict51 anon_union.conflict51, *Panon_union.conflict51;

union anon_union.conflict51 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict174 anon_union.conflict174, *Panon_union.conflict174;

union anon_union.conflict174 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict175 anon_union.conflict175, *Panon_union.conflict175;

union anon_union.conflict175 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict56 anon_union.conflict56, *Panon_union.conflict56;

union anon_union.conflict56 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict57 anon_union.conflict57, *Panon_union.conflict57;

union anon_union.conflict57 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict176 anon_union.conflict176, *Panon_union.conflict176;

union anon_union.conflict176 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict58 anon_union.conflict58, *Panon_union.conflict58;

union anon_union.conflict58 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef struct anon_struct.conflict309 anon_struct.conflict309, *Panon_struct.conflict309;

struct anon_struct.conflict309 {
    u32.conflict27 tx_done:1;
    u32.conflict28 retry_required:1;
    u32.conflict29 sw_retry_required:1;
    u32.conflict30 reserved:29;
};

typedef union anon_union.conflict169 anon_union.conflict169, *Panon_union.conflict169;

union anon_union.conflict169 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict70 anon_union.conflict70, *Panon_union.conflict70;

union anon_union.conflict70 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict71 anon_union.conflict71, *Panon_union.conflict71;

union anon_union.conflict71 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict72 anon_union.conflict72, *Panon_union.conflict72;

union anon_union.conflict72 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict63 anon_union.conflict63, *Panon_union.conflict63;

union anon_union.conflict63 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict64 anon_union.conflict64, *Panon_union.conflict64;

union anon_union.conflict64 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict161 anon_union.conflict161, *Panon_union.conflict161;

union anon_union.conflict161 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict65 anon_union.conflict65, *Panon_union.conflict65;

union anon_union.conflict65 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict162 anon_union.conflict162, *Panon_union.conflict162;

union anon_union.conflict162 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict167 anon_union.conflict167, *Panon_union.conflict167;

union anon_union.conflict167 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict168 anon_union.conflict168, *Panon_union.conflict168;

union anon_union.conflict168 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict160 anon_union.conflict160, *Panon_union.conflict160;

union anon_union.conflict160 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict80 anon_union.conflict80, *Panon_union.conflict80;

union anon_union.conflict80 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict153 anon_union.conflict153, *Panon_union.conflict153;

union anon_union.conflict153 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict78 anon_union.conflict78, *Panon_union.conflict78;

union anon_union.conflict78 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict79 anon_union.conflict79, *Panon_union.conflict79;

union anon_union.conflict79 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict154 anon_union.conflict154, *Panon_union.conflict154;

union anon_union.conflict154 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict155 anon_union.conflict155, *Panon_union.conflict155;

union anon_union.conflict155 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict147 anon_union.conflict147, *Panon_union.conflict147;

union anon_union.conflict147 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict148 anon_union.conflict148, *Panon_union.conflict148;

union anon_union.conflict148 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict92 anon_union.conflict92, *Panon_union.conflict92;

union anon_union.conflict92 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict93 anon_union.conflict93, *Panon_union.conflict93;

union anon_union.conflict93 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict94 anon_union.conflict94, *Panon_union.conflict94;

union anon_union.conflict94 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict141 anon_union.conflict141, *Panon_union.conflict141;

union anon_union.conflict141 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict85 anon_union.conflict85, *Panon_union.conflict85;

union anon_union.conflict85 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict86 anon_union.conflict86, *Panon_union.conflict86;

union anon_union.conflict86 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict87 anon_union.conflict87, *Panon_union.conflict87;

union anon_union.conflict87 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict140 anon_union.conflict140, *Panon_union.conflict140;

union anon_union.conflict140 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict146 anon_union.conflict146, *Panon_union.conflict146;

union anon_union.conflict146 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict139 anon_union.conflict139, *Panon_union.conflict139;

union anon_union.conflict139 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict136 anon_union.conflict136, *Panon_union.conflict136;

union anon_union.conflict136 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union bl_hw_txstatus.conflict3 bl_hw_txstatus.conflict3, *Pbl_hw_txstatus.conflict3;

union bl_hw_txstatus.conflict3 {
    struct anon_struct.conflict345 field_0;
    u32.conflict186 value;
};

typedef union anon_union.conflict97 anon_union.conflict97, *Panon_union.conflict97;

union anon_union.conflict97 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict98 anon_union.conflict98, *Panon_union.conflict98;

union anon_union.conflict98 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict99 anon_union.conflict99, *Panon_union.conflict99;

union anon_union.conflict99 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict134 anon_union.conflict134, *Panon_union.conflict134;

union anon_union.conflict134 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict135 anon_union.conflict135, *Panon_union.conflict135;

union anon_union.conflict135 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict127 anon_union.conflict127, *Panon_union.conflict127;

union anon_union.conflict127 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict128 anon_union.conflict128, *Panon_union.conflict128;

union anon_union.conflict128 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict129 anon_union.conflict129, *Panon_union.conflict129;

union anon_union.conflict129 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict120 anon_union.conflict120, *Panon_union.conflict120;

union anon_union.conflict120 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict121 anon_union.conflict121, *Panon_union.conflict121;

union anon_union.conflict121 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict122 anon_union.conflict122, *Panon_union.conflict122;

union anon_union.conflict122 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict116 anon_union.conflict116, *Panon_union.conflict116;

union anon_union.conflict116 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict117 anon_union.conflict117, *Panon_union.conflict117;

union anon_union.conflict117 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict114 anon_union.conflict114, *Panon_union.conflict114;

union anon_union.conflict114 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict118 anon_union.conflict118, *Panon_union.conflict118;

union anon_union.conflict118 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict112 anon_union.conflict112, *Panon_union.conflict112;

union anon_union.conflict112 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict113 anon_union.conflict113, *Panon_union.conflict113;

union anon_union.conflict113 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict103 anon_union.conflict103, *Panon_union.conflict103;

union anon_union.conflict103 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict104 anon_union.conflict104, *Panon_union.conflict104;

union anon_union.conflict104 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict109 anon_union.conflict109, *Panon_union.conflict109;

union anon_union.conflict109 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

typedef union anon_union.conflict107 anon_union.conflict107, *Panon_union.conflict107;

union anon_union.conflict107 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef union anon_union.conflict108 anon_union.conflict108, *Panon_union.conflict108;

union anon_union.conflict108 {
    uint32_t datastartptr;
    uint32_t sec_user2_ptr;
};

typedef union anon_union.conflict102 anon_union.conflict102, *Panon_union.conflict102;

union anon_union.conflict102 {
    uint32_t first_pbd_ptr;
    uint32_t sec_user1_ptr;
};

typedef enum PtTable_ID_Type {
    PT_TABLE_ID_0=0,
    PT_TABLE_ID_1=1,
    PT_TABLE_ID_INVALID=2
} PtTable_ID_Type;

typedef struct PtTable_Entry_Config PtTable_Entry_Config, *PPtTable_Entry_Config;

struct PtTable_Entry_Config {
    uint8_t type;
    uint8_t device;
    uint8_t activeIndex;
    uint8_t name[9];
    uint32_t Address[2];
    uint32_t maxLen[2];
    uint32_t len;
    uint32_t age;
};

typedef struct PtTable_Stuff_Config PtTable_Stuff_Config, *PPtTable_Stuff_Config;

typedef struct PtTable_Config PtTable_Config, *PPtTable_Config;

struct PtTable_Config {
    uint32_t magicCode;
    uint16_t version;
    uint16_t entryCnt;
    uint32_t age;
    uint32_t crc32;
};

struct PtTable_Stuff_Config {
    struct PtTable_Config ptTable;
    struct PtTable_Entry_Config ptEntries[16];
    uint32_t crc32;
};

typedef enum PtTable_Error_Type {
    PT_ERROR_CRC32=4,
    PT_ERROR_ENTRY_NOT_FOUND=2,
    PT_ERROR_ENTRY_UPDATE_FAIL=3,
    PT_ERROR_FALSH_ERASE=8,
    PT_ERROR_FALSH_READ=6,
    PT_ERROR_FALSH_WRITE=7,
    PT_ERROR_PARAMETER=5,
    PT_ERROR_SUCCESS=0,
    PT_ERROR_TABLE_NOT_VALID=1
} PtTable_Error_Type;

typedef enum PtTable_Entry_Type {
    PT_ENTRY_FW_CPU0=0,
    PT_ENTRY_FW_CPU1=1,
    PT_ENTRY_MAX=16
} PtTable_Entry_Type;

typedef enum _blog_leve {
    BLOG_LEVEL_ALL=0,
    BLOG_LEVEL_ASSERT=5,
    BLOG_LEVEL_DEBUG=1,
    BLOG_LEVEL_ERROR=4,
    BLOG_LEVEL_INFO=2,
    BLOG_LEVEL_NEVER=6,
    BLOG_LEVEL_WARN=3
} _blog_leve;

typedef enum _blog_leve blog_level_t;

typedef struct _blog_info _blog_info, *P_blog_info;

typedef struct _blog_info blog_info_t;

struct _blog_info {
    blog_level_t * level;
    char * name;
};

typedef struct netconn.conflict netconn.conflict, *Pnetconn.conflict;

struct netconn.conflict {
    enum netconn_type type;
    enum netconn_state state;
    undefined field_0x2;
    undefined field_0x3;
    union anon_union_for_pcb pcb;
    err_t pending_err;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    sys_sem_t op_completed;
    sys_mbox_t recvmbox;
    sys_mbox_t acceptmbox;
    int socket;
    s32_t send_timeout;
    u32_t recv_timeout;
    u8_t flags;
    undefined field_0x25;
    undefined field_0x26;
    undefined field_0x27;
    struct api_msg * current_msg;
    void (* callback)(struct netconn *, enum netconn_evt, u16_t);
};

typedef struct netconn.conflict1 netconn.conflict1, *Pnetconn.conflict1;

struct netconn.conflict1 {
    enum netconn_type type;
    enum netconn_state state;
    undefined field_0x2;
    undefined field_0x3;
    union anon_union_for_pcb pcb;
    err_t pending_err;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    sys_sem_t op_completed;
    sys_mbox_t recvmbox;
    sys_mbox_t acceptmbox;
    int socket;
    s32_t send_timeout;
    u32_t recv_timeout;
    u8_t flags;
    undefined field_0x25;
    undefined field_0x26;
    undefined field_0x27;
    struct api_msg * current_msg;
    void (* callback)(struct netconn *, enum netconn_evt, u16_t);
};

typedef struct _bl_sha_SEC_Eng_SHA256_Ctx_t _bl_sha_SEC_Eng_SHA256_Ctx_t, *P_bl_sha_SEC_Eng_SHA256_Ctx_t;

struct _bl_sha_SEC_Eng_SHA256_Ctx_t {
    uint32_t total[2];
    uint32_t * shaBuf;
    uint32_t * shaPadding;
    uint8_t shaFeed;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
};

typedef enum bl_sha_type_t {
    BL_SHA1=2,
    BL_SHA224=1,
    BL_SHA256=0
} bl_sha_type_t;

typedef struct bl_sha_ctx bl_sha_ctx, *Pbl_sha_ctx;

struct bl_sha_ctx {
    struct _bl_sha_SEC_Eng_SHA256_Ctx_t sha_ctx;
    uint32_t tmp[16];
    uint32_t pad[16];
};

typedef struct bl_sha_ctx bl_sha_ctx_t;

typedef struct Efuse_Ana_RC32M_Trim_Type Efuse_Ana_RC32M_Trim_Type, *PEfuse_Ana_RC32M_Trim_Type;

struct Efuse_Ana_RC32M_Trim_Type {
    uint32_t trimRc32mCodeFrExt:8;
    uint32_t trimRc32mCodeFrExtParity:1;
    uint32_t trimRc32mExtCodeEn:1;
    uint32_t reserved:22;
};

typedef struct Efuse_Ana_RC32K_Trim_Type Efuse_Ana_RC32K_Trim_Type, *PEfuse_Ana_RC32K_Trim_Type;

struct Efuse_Ana_RC32K_Trim_Type {
    uint32_t trimRc32kCodeFrExt:10;
    uint32_t trimRc32kCodeFrExtParity:1;
    uint32_t trimRc32kExtCodeEn:1;
    uint32_t reserved:20;
};

typedef struct Efuse_Capcode_Info_Type Efuse_Capcode_Info_Type, *PEfuse_Capcode_Info_Type;

struct Efuse_Capcode_Info_Type {
    uint32_t capCode:6;
    uint32_t parity:1;
    uint32_t en:1;
    uint32_t rsvd:24;
};

typedef enum EF_Ctrl_Sign_Type {
    EF_CTRL_SIGN_ECC=2,
    EF_CTRL_SIGN_NONE=0,
    EF_CTRL_SIGN_RSA=1
} EF_Ctrl_Sign_Type;

typedef struct Efuse_Device_Info_Type Efuse_Device_Info_Type, *PEfuse_Device_Info_Type;

struct Efuse_Device_Info_Type {
    uint32_t rsvd:22;
    uint32_t customerID:2;
    uint32_t rsvd_info:3;
    uint32_t memoryInfo:2;
    uint32_t coreInfo:1;
    uint32_t mcuInfo:1;
    uint32_t pinInfo:1;
};

typedef struct Efuse_TSEN_Refcode_Corner_Type Efuse_TSEN_Refcode_Corner_Type, *PEfuse_TSEN_Refcode_Corner_Type;

struct Efuse_TSEN_Refcode_Corner_Type {
    uint32_t tsenRefcodeCorner:12;
    uint32_t tsenRefcodeCornerParity:1;
    uint32_t tsenRefcodeCornerEn:1;
    uint32_t tsenRefcodeCornerVersion:1;
    uint32_t reserved:17;
};

typedef enum EF_Ctrl_SF_AES_Type {
    EF_CTRL_SF_AES_128=1,
    EF_CTRL_SF_AES_192=2,
    EF_CTRL_SF_AES_256=3,
    EF_CTRL_SF_AES_NONE=0
} EF_Ctrl_SF_AES_Type;

typedef struct Efuse_ADC_Gain_Coeff_Type Efuse_ADC_Gain_Coeff_Type, *PEfuse_ADC_Gain_Coeff_Type;

struct Efuse_ADC_Gain_Coeff_Type {
    uint32_t adcGainCoeff:12;
    uint32_t adcGainCoeffParity:1;
    uint32_t adcGainCoeffEn:1;
    uint32_t reserved:18;
};

typedef struct EF_Ctrl_Sec_Param_Type EF_Ctrl_Sec_Param_Type, *PEF_Ctrl_Sec_Param_Type;

typedef enum EF_Ctrl_Dbg_Mode_Type {
    EF_CTRL_DBG_CLOSE=4,
    EF_CTRL_DBG_OPEN=0,
    EF_CTRL_DBG_PASSWORD=1
} EF_Ctrl_Dbg_Mode_Type;

struct EF_Ctrl_Sec_Param_Type {
    enum EF_Ctrl_Dbg_Mode_Type ef_dbg_mode;
    uint8_t ef_dbg_jtag_0_dis;
    uint8_t ef_sboot_en;
    uint8_t ef_no_hd_boot_en;
};

typedef struct anon_struct.conflict1 anon_struct.conflict1, *Panon_struct.conflict1;

struct anon_struct.conflict1 {
    uint8_t priority;
    uint8_t id_dst;
    uint8_t id_msg;
    uint8_t id_src;
};

typedef union anon_union.conflict2 anon_union.conflict2, *Panon_union.conflict2;

union anon_union.conflict2 {
    void * container;
    struct anon_struct.conflict1 header;
};

typedef struct anon_struct.conflict373 anon_struct.conflict373, *Panon_struct.conflict373;

struct anon_struct.conflict373 {
    uint8_t priority;
    uint8_t id_dst;
    uint8_t id_msg;
    uint8_t id_src;
};

typedef struct anon_struct.conflict412 anon_struct.conflict412, *Panon_struct.conflict412;

struct anon_struct.conflict412 {
    uint8_t priority;
    uint8_t id_dst;
    uint8_t id_msg;
    uint8_t id_src;
};

typedef struct anon_struct.conflict413 anon_struct.conflict413, *Panon_struct.conflict413;

struct anon_struct.conflict413 {
    uint8_t priority;
    uint8_t id_dst;
    uint8_t id_msg;
    uint8_t id_src;
};

typedef struct anon_struct.conflict374 anon_struct.conflict374, *Panon_struct.conflict374;

struct anon_struct.conflict374 {
    uint8_t priority;
    uint8_t id_dst;
    uint8_t id_msg;
    uint8_t id_src;
};

typedef struct xSTATIC_QUEUE xSTATIC_QUEUE, *PxSTATIC_QUEUE;


// WARNING! conflicting data type names: /DWARF/FreeRTOS.h/xSTATIC_QUEUE/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u

struct xSTATIC_QUEUE {
    void * pvDummy1[3];
    union anon_union_for_u u;
    StaticList_t xDummy3[2];
    UBaseType_t uxDummy4[3];
    uint8_t ucDummy5[2];
    uint8_t ucDummy6;
    undefined field_0x47;
    UBaseType_t uxDummy8;
    uint8_t ucDummy9;
    undefined field_0x4d;
    undefined field_0x4e;
    undefined field_0x4f;
};

typedef struct xSTATIC_QUEUE StaticQueue_t;

typedef StaticQueue_t StaticSemaphore_t;

typedef struct aos_hdl_t aos_hdl_t, *Paos_hdl_t;

typedef struct aos_hdl_t aos_timer_t;

struct aos_hdl_t {
    void * hdl;
};

typedef struct aos_hdl_t aos_queue_t;

typedef uint aos_task_key_t;

typedef struct aos_hdl_t aos_sem_t;

typedef struct aos_hdl_t aos_task_t;

typedef struct aos_hdl_t aos_mutex_t;

typedef struct aos_hdl_t aos_work_t;

typedef struct aos_workqueue_t aos_workqueue_t, *Paos_workqueue_t;

struct aos_workqueue_t {
    void * hdl;
    void * stk;
};

typedef uint16_t ke_state_t;

typedef struct ke_msg ke_msg, *Pke_msg;

struct ke_msg {
    struct co_list_hdr hdr;
    ke_msg_id_t id;
    ke_task_id_t dest_id;
    ke_task_id_t src_id;
    uint16_t param_len;
    uint32_t[0] param;
};

typedef enum ke_msg_status_tag {
    KE_MSG_CONSUMED=0,
    KE_MSG_NO_FREE=1,
    KE_MSG_SAVED=2
} ke_msg_status_tag;

typedef enum CFG_ELEMENT_TYPE {
    CFG_ELEMENT_TYPE_BOOLEAN=1,
    CFG_ELEMENT_TYPE_SINT16=4,
    CFG_ELEMENT_TYPE_SINT32=6,
    CFG_ELEMENT_TYPE_SINT8=2,
    CFG_ELEMENT_TYPE_STRING=8,
    CFG_ELEMENT_TYPE_UINT16=5,
    CFG_ELEMENT_TYPE_UINT32=7,
    CFG_ELEMENT_TYPE_UINT8=3,
    CFG_ELEMENT_TYPE_UNKNOWN=0
} CFG_ELEMENT_TYPE;

typedef struct mac_addr.conflict19 mac_addr.conflict19, *Pmac_addr.conflict19;

struct mac_addr.conflict19 {
    u8_l array[6];
};

typedef struct mac_addr.conflict102 mac_addr.conflict102, *Pmac_addr.conflict102;

struct mac_addr.conflict102 {
    u8_l array[6];
};

typedef struct mac_addr.conflict38 mac_addr.conflict38, *Pmac_addr.conflict38;

struct mac_addr.conflict38 {
    u8_l array[6];
};

typedef struct mac_addr.conflict37 mac_addr.conflict37, *Pmac_addr.conflict37;

struct mac_addr.conflict37 {
    u8_l array[6];
};

typedef struct mac_addr.conflict136 mac_addr.conflict136, *Pmac_addr.conflict136;

struct mac_addr.conflict136 {
    u8_l array[6];
};

typedef struct mac_addr.conflict mac_addr.conflict, *Pmac_addr.conflict;

struct mac_addr.conflict {
    u8_l array[6];
};

typedef struct mac_addr.conflict58 mac_addr.conflict58, *Pmac_addr.conflict58;

struct mac_addr.conflict58 {
    u8_l array[6];
};

typedef struct mac_addr.conflict123 mac_addr.conflict123, *Pmac_addr.conflict123;

struct mac_addr.conflict123 {
    u8_l array[6];
};

typedef struct mac_addr.conflict77 mac_addr.conflict77, *Pmac_addr.conflict77;

struct mac_addr.conflict77 {
    u8_l array[6];
};

typedef struct mac_addr.conflict153 mac_addr.conflict153, *Pmac_addr.conflict153;

struct mac_addr.conflict153 {
    u8_l array[6];
};

typedef enum ADC_Data_Width_Type {
    ADC_DATA_WIDTH_12=0,
    ADC_DATA_WIDTH_14_WITH_16_AVERAGE=1,
    ADC_DATA_WIDTH_16_WITH_128_AVERAGE=3,
    ADC_DATA_WIDTH_16_WITH_256_AVERAGE=4,
    ADC_DATA_WIDTH_16_WITH_64_AVERAGE=2
} ADC_Data_Width_Type;

typedef enum ADC_Chan_Type {
    ADC_CHAN0=0,
    ADC_CHAN1=1,
    ADC_CHAN10=10,
    ADC_CHAN11=11,
    ADC_CHAN2=2,
    ADC_CHAN3=3,
    ADC_CHAN4=4,
    ADC_CHAN5=5,
    ADC_CHAN6=6,
    ADC_CHAN7=7,
    ADC_CHAN8=8,
    ADC_CHAN9=9,
    ADC_CHAN_DAC_OUTA=12,
    ADC_CHAN_DAC_OUTB=13,
    ADC_CHAN_DCTEST=17,
    ADC_CHAN_GND=23,
    ADC_CHAN_SENP0=22,
    ADC_CHAN_SENP1=21,
    ADC_CHAN_SENP2=20,
    ADC_CHAN_SENP3=19,
    ADC_CHAN_TSEN_N=15,
    ADC_CHAN_TSEN_P=14,
    ADC_CHAN_VABT_HALF=18,
    ADC_CHAN_VREF=16
} ADC_Chan_Type;

typedef enum ADC_INT_Type {
    ADC_INT_ADC_READY=4,
    ADC_INT_ALL=5,
    ADC_INT_FIFO_OVERRUN=3,
    ADC_INT_FIFO_UNDERRUN=2,
    ADC_INT_NEG_SATURATION=1,
    ADC_INT_POS_SATURATION=0
} ADC_INT_Type;

typedef struct ADC_Result_Type ADC_Result_Type, *PADC_Result_Type;

struct ADC_Result_Type {
    int8_t posChan;
    int8_t negChan;
    uint16_t value;
    float volt;
};

typedef enum ADC_V18_SEL_Type {
    ADC_V18_SEL_1P62V=0,
    ADC_V18_SEL_1P72V=1,
    ADC_V18_SEL_1P82V=2,
    ADC_V18_SEL_1P92V=3
} ADC_V18_SEL_Type;

typedef enum ADC_PGA_GAIN_Type {
    ADC_PGA_GAIN_1=1,
    ADC_PGA_GAIN_16=5,
    ADC_PGA_GAIN_2=2,
    ADC_PGA_GAIN_32=6,
    ADC_PGA_GAIN_4=3,
    ADC_PGA_GAIN_8=4,
    ADC_PGA_GAIN_NONE=0
} ADC_PGA_GAIN_Type;

typedef struct ADC_CFG_Type ADC_CFG_Type, *PADC_CFG_Type;

typedef enum ADC_V11_SEL_Type {
    ADC_V11_SEL_1P0V=0,
    ADC_V11_SEL_1P18V=2,
    ADC_V11_SEL_1P1V=1,
    ADC_V11_SEL_1P26V=3
} ADC_V11_SEL_Type;

typedef enum ADC_CLK_Type {
    ADC_CLK_DIV_1=0,
    ADC_CLK_DIV_12=3,
    ADC_CLK_DIV_16=4,
    ADC_CLK_DIV_20=5,
    ADC_CLK_DIV_24=6,
    ADC_CLK_DIV_32=7,
    ADC_CLK_DIV_4=1,
    ADC_CLK_DIV_8=2
} ADC_CLK_Type;

typedef enum ADC_CHOP_MOD_Type {
    ADC_CHOP_MOD_ALL_OFF=0,
    ADC_CHOP_MOD_AZ_ON=1,
    ADC_CHOP_MOD_AZ_PGA_ON=2,
    ADC_CHOP_MOD_AZ_PGA_RPC_ON=3
} ADC_CHOP_MOD_Type;

typedef enum ADC_BIAS_SEL_Type {
    ADC_BIAS_SEL_AON_BANDGAP=1,
    ADC_BIAS_SEL_MAIN_BANDGAP=0
} ADC_BIAS_SEL_Type;

typedef enum ADC_PGA_VCM_Type {
    ADC_PGA_VCM_1P2V=1,
    ADC_PGA_VCM_1P4V=2,
    ADC_PGA_VCM_1P6V=3,
    ADC_PGA_VCM_1V=0
} ADC_PGA_VCM_Type;

typedef enum ADC_VREF_Type {
    ADC_VREF_2V=1,
    ADC_VREF_3P2V=0
} ADC_VREF_Type;

typedef enum ADC_SIG_INPUT_Type {
    ADC_INPUT_DIFF=1,
    ADC_INPUT_SINGLE_END=0
} ADC_SIG_INPUT_Type;

struct ADC_CFG_Type {
    enum ADC_V18_SEL_Type v18Sel;
    enum ADC_V11_SEL_Type v11Sel;
    enum ADC_CLK_Type clkDiv;
    enum ADC_PGA_GAIN_Type gain1;
    enum ADC_PGA_GAIN_Type gain2;
    enum ADC_CHOP_MOD_Type chopMode;
    enum ADC_BIAS_SEL_Type biasSel;
    enum ADC_PGA_VCM_Type vcm;
    enum ADC_VREF_Type vref;
    enum ADC_SIG_INPUT_Type inputMode;
    enum ADC_Data_Width_Type resWidth;
    enum BL_Fun_Type offsetCalibEn;
    int16_t offsetCalibVal;
};

typedef struct ADC_MIC_Type ADC_MIC_Type, *PADC_MIC_Type;

typedef enum ADC_MICBOOST_DB_Type {
    ADC_MICBOOST_DB_16DB=0,
    ADC_MICBOOST_DB_32DB=1
} ADC_MICBOOST_DB_Type;

typedef enum ADC_PGA2_GAIN_Type {
    ADC_PGA2_GAIN_0DB=0,
    ADC_PGA2_GAIN_12DB=3,
    ADC_PGA2_GAIN_6DB=1,
    ADC_PGA2_GAIN_N6DB=2
} ADC_PGA2_GAIN_Type;

typedef enum ADC_MIC_MODE_Type {
    ADC_MIC_MODE_DIFF=1,
    ADC_MIC_MODE_SINGLE=0
} ADC_MIC_MODE_Type;

struct ADC_MIC_Type {
    enum ADC_MICBOOST_DB_Type micboostDb;
    enum ADC_PGA2_GAIN_Type micPga2Gain;
    enum ADC_MIC_MODE_Type mic1Mode;
    enum ADC_MIC_MODE_Type mic2Mode;
    enum BL_Fun_Type dwaEn;
    enum BL_Fun_Type micboostBypassEn;
    enum BL_Fun_Type micPgaEn;
    enum BL_Fun_Type micBiasEn;
};

typedef struct ADC_Gain_Coeff_Type ADC_Gain_Coeff_Type, *PADC_Gain_Coeff_Type;

struct ADC_Gain_Coeff_Type {
    enum BL_Fun_Type adcGainCoeffEnable;
    undefined field_0x1;
    uint16_t adcgainCoeffVal;
    float coe;
};

typedef enum ADC_TSEN_MOD_Type {
    ADC_TSEN_MOD_EXTERNAL_DIODE=1,
    ADC_TSEN_MOD_INTERNAL_DIODE=0
} ADC_TSEN_MOD_Type;

typedef struct ADC_FIFO_Cfg_Type ADC_FIFO_Cfg_Type, *PADC_FIFO_Cfg_Type;

typedef enum ADC_FIFO_Threshold_Type {
    ADC_FIFO_THRESHOLD_1=0,
    ADC_FIFO_THRESHOLD_16=3,
    ADC_FIFO_THRESHOLD_4=1,
    ADC_FIFO_THRESHOLD_8=2
} ADC_FIFO_Threshold_Type;

struct ADC_FIFO_Cfg_Type {
    enum ADC_FIFO_Threshold_Type fifoThreshold;
    enum BL_Fun_Type dmaEn;
};

typedef struct anon_struct.conflict54 anon_struct.conflict54, *Panon_struct.conflict54;

struct anon_struct.conflict54 {
    uint32_t index;
    int32_t dvga;
};

typedef struct anon_struct.conflict53 anon_struct.conflict53, *Panon_struct.conflict53;

struct anon_struct.conflict53 {
    uint32_t index;
    int32_t dvga;
};

typedef struct anon_struct.conflict58 anon_struct.conflict58, *Panon_struct.conflict58;

struct anon_struct.conflict58 {
    uint32_t vbcore;
    uint32_t iet;
    uint32_t vbcore_11n;
    uint32_t iet_11n;
    uint32_t vbcore_11g;
    uint32_t iet_11g;
    uint32_t vbcore_11b;
    uint32_t iet_11b;
    uint32_t lo_fbdv_halfstep_en;
    uint32_t lo_fbdv_halfstep_en_tx;
    uint32_t lo_fbdv_halfstep_en_rx;
    uint32_t clkpll_reset_postdiv;
    uint32_t clkpll_dither_sel;
};

typedef struct anon_struct.conflict57 anon_struct.conflict57, *Panon_struct.conflict57;

struct anon_struct.conflict57 {
    uint32_t vbcore;
    uint32_t iet;
    uint32_t vbcore_11n;
    uint32_t iet_11n;
    uint32_t vbcore_11g;
    uint32_t iet_11g;
    uint32_t vbcore_11b;
    uint32_t iet_11b;
    uint32_t lo_fbdv_halfstep_en;
    uint32_t lo_fbdv_halfstep_en_tx;
    uint32_t lo_fbdv_halfstep_en_rx;
    uint32_t clkpll_reset_postdiv;
    uint32_t clkpll_dither_sel;
};

typedef struct anon_struct.conflict56 anon_struct.conflict56, *Panon_struct.conflict56;

struct anon_struct.conflict56 {
    uint32_t notch_en;
    int32_t spur_freq;
};

typedef struct anon_struct.conflict55 anon_struct.conflict55, *Panon_struct.conflict55;

struct anon_struct.conflict55 {
    uint32_t notch_en;
    int32_t spur_freq;
};

typedef struct anon_struct.conflict140 anon_struct.conflict140, *Panon_struct.conflict140;

struct anon_struct.conflict140 {
    uint32_t index;
    int32_t dvga;
};

typedef struct anon_struct.conflict141 anon_struct.conflict141, *Panon_struct.conflict141;

struct anon_struct.conflict141 {
    uint32_t notch_en;
    int32_t spur_freq;
};

typedef struct anon_struct.conflict142 anon_struct.conflict142, *Panon_struct.conflict142;

struct anon_struct.conflict142 {
    uint32_t notch_en;
    int32_t spur_freq;
};

typedef struct anon_struct.conflict143 anon_struct.conflict143, *Panon_struct.conflict143;

struct anon_struct.conflict143 {
    uint32_t vbcore;
    uint32_t iet;
    uint32_t vbcore_11n;
    uint32_t iet_11n;
    uint32_t vbcore_11g;
    uint32_t iet_11g;
    uint32_t vbcore_11b;
    uint32_t iet_11b;
    uint32_t lo_fbdv_halfstep_en;
    uint32_t lo_fbdv_halfstep_en_tx;
    uint32_t lo_fbdv_halfstep_en_rx;
    uint32_t clkpll_reset_postdiv;
    uint32_t clkpll_dither_sel;
};

typedef struct anon_struct.conflict144 anon_struct.conflict144, *Panon_struct.conflict144;

struct anon_struct.conflict144 {
    uint32_t vbcore;
    uint32_t iet;
    uint32_t vbcore_11n;
    uint32_t iet_11n;
    uint32_t vbcore_11g;
    uint32_t iet_11g;
    uint32_t vbcore_11b;
    uint32_t iet_11b;
    uint32_t lo_fbdv_halfstep_en;
    uint32_t lo_fbdv_halfstep_en_tx;
    uint32_t lo_fbdv_halfstep_en_rx;
    uint32_t clkpll_reset_postdiv;
    uint32_t clkpll_dither_sel;
};

typedef struct regs_to_opti regs_to_opti, *Pregs_to_opti;

struct regs_to_opti {
    uint32_t vbcore;
    uint32_t iet;
    uint32_t vbcore_11n;
    uint32_t iet_11n;
    uint32_t vbcore_11g;
    uint32_t iet_11g;
    uint32_t vbcore_11b;
    uint32_t iet_11b;
    uint32_t lo_fbdv_halfstep_en;
    uint32_t lo_fbdv_halfstep_en_tx;
    uint32_t lo_fbdv_halfstep_en_rx;
    uint32_t clkpll_reset_postdiv;
    uint32_t clkpll_dither_sel;
};

typedef struct notch_param notch_param, *Pnotch_param;

struct notch_param {
    uint32_t notch_en;
    int32_t spur_freq;
};

typedef struct tx_pwr_index tx_pwr_index, *Ptx_pwr_index;

struct tx_pwr_index {
    uint32_t index;
    int32_t dvga;
};

typedef struct anon_struct.conflict136 anon_struct.conflict136, *Panon_struct.conflict136;

struct anon_struct.conflict136 {
    uint32_t notch_en;
    int32_t spur_freq;
};

typedef struct anon_struct.conflict137 anon_struct.conflict137, *Panon_struct.conflict137;

struct anon_struct.conflict137 {
    uint32_t vbcore;
    uint32_t iet;
    uint32_t vbcore_11n;
    uint32_t iet_11n;
    uint32_t vbcore_11g;
    uint32_t iet_11g;
    uint32_t vbcore_11b;
    uint32_t iet_11b;
    uint32_t lo_fbdv_halfstep_en;
    uint32_t lo_fbdv_halfstep_en_tx;
    uint32_t lo_fbdv_halfstep_en_rx;
    uint32_t clkpll_reset_postdiv;
    uint32_t clkpll_dither_sel;
};

typedef struct anon_struct.conflict138 anon_struct.conflict138, *Panon_struct.conflict138;

struct anon_struct.conflict138 {
    uint32_t vbcore;
    uint32_t iet;
    uint32_t vbcore_11n;
    uint32_t iet_11n;
    uint32_t vbcore_11g;
    uint32_t iet_11g;
    uint32_t vbcore_11b;
    uint32_t iet_11b;
    uint32_t lo_fbdv_halfstep_en;
    uint32_t lo_fbdv_halfstep_en_tx;
    uint32_t lo_fbdv_halfstep_en_rx;
    uint32_t clkpll_reset_postdiv;
    uint32_t clkpll_dither_sel;
};

typedef struct anon_struct.conflict139 anon_struct.conflict139, *Panon_struct.conflict139;

struct anon_struct.conflict139 {
    uint32_t index;
    int32_t dvga;
};

typedef struct anon_struct.conflict133 anon_struct.conflict133, *Panon_struct.conflict133;

struct anon_struct.conflict133 {
    uint32_t index;
    int32_t dvga;
};

typedef struct anon_struct.conflict134 anon_struct.conflict134, *Panon_struct.conflict134;

struct anon_struct.conflict134 {
    uint32_t index;
    int32_t dvga;
};

typedef struct anon_struct.conflict135 anon_struct.conflict135, *Panon_struct.conflict135;

struct anon_struct.conflict135 {
    uint32_t notch_en;
    int32_t spur_freq;
};

typedef enum __fdlibm_version {
    __fdlibm_ieee=-1,
    __fdlibm_posix=0
} __fdlibm_version;

typedef struct HWStateMachineReg HWStateMachineReg, *PHWStateMachineReg;

struct HWStateMachineReg {
    uint32_t rxControl:6;
    uint32_t reserved_7_6:2;
    uint32_t txControl:9;
    uint32_t reserved_23_17:7;
    uint32_t macControl:8;
};

typedef struct dump_data_t dump_data_t, *Pdump_data_t;

struct dump_data_t {
    uint32_t time;
    char * func_name;
    uint32_t rc_state;
    uint32_t rf_state;
    uint32_t mac_debugRegHWSM1;
    uint32_t mac_debugRegHWSM2;
    uint16_t mac_debugPortCoex;
    uint16_t mac_debugPortBackoff;
    uint16_t mac_debugPortMacPhyIf;
    uint16_t mac_debugPortMacPhyIf2;
    uint16_t phy_debugPortMainFSM;
    uint16_t phy_debugPortTDTX;
    uint16_t phy_debugPortDSSSCCK1;
    uint16_t phy_debugPortDSSSCCKTx;
};

typedef struct mem mem, *Pmem;

struct mem {
    mem_size_t next;
    mem_size_t prev;
    u8_t used;
    undefined field_0x5;
};

typedef struct mbedtls_ecp_keypair mbedtls_ecp_keypair, *Pmbedtls_ecp_keypair;

typedef struct mbedtls_ecp_group mbedtls_ecp_group, *Pmbedtls_ecp_group;

typedef struct mbedtls_mpi mbedtls_mpi, *Pmbedtls_mpi;

typedef struct mbedtls_ecp_point mbedtls_ecp_point, *Pmbedtls_ecp_point;

typedef uint32_t mbedtls_mpi_uint;

struct mbedtls_mpi {
    int s;
    size_t n;
    mbedtls_mpi_uint * p;
};

struct mbedtls_ecp_point {
    struct mbedtls_mpi X;
    struct mbedtls_mpi Y;
    struct mbedtls_mpi Z;
};

struct mbedtls_ecp_group {
    enum mbedtls_ecp_group_id id;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    struct mbedtls_mpi P;
    struct mbedtls_mpi A;
    struct mbedtls_mpi B;
    struct mbedtls_ecp_point G;
    struct mbedtls_mpi N;
    size_t pbits;
    size_t nbits;
    uint h;
    int (* modp)(struct mbedtls_mpi *);
    int (* t_pre)(struct mbedtls_ecp_point *, void *);
    int (* t_post)(struct mbedtls_ecp_point *, void *);
    void * t_data;
    struct mbedtls_ecp_point * T;
    size_t T_size;
};

struct mbedtls_ecp_keypair {
    struct mbedtls_ecp_group grp;
    struct mbedtls_mpi d;
    struct mbedtls_ecp_point Q;
};

typedef struct mbedtls_ecp_curve_info mbedtls_ecp_curve_info, *Pmbedtls_ecp_curve_info;

struct mbedtls_ecp_curve_info {
    enum mbedtls_ecp_group_id grp_id;
    undefined field_0x1;
    uint16_t tls_id;
    uint16_t bit_size;
    undefined field_0x6;
    undefined field_0x7;
    char * name;
};

typedef enum lwip_iana_hwtype {
    LWIP_IANA_HWTYPE_ETHERNET=1
} lwip_iana_hwtype;

typedef enum lwip_iana_port_number {
    LWIP_IANA_PORT_DHCP_CLIENT=68,
    LWIP_IANA_PORT_DHCP_SERVER=67,
    LWIP_IANA_PORT_HTTP=80,
    LWIP_IANA_PORT_HTTPS=443,
    LWIP_IANA_PORT_MDNS=5353,
    LWIP_IANA_PORT_MQTT=1883,
    LWIP_IANA_PORT_NETBIOS=-119,
    LWIP_IANA_PORT_SECURE_MQTT=8883,
    LWIP_IANA_PORT_SMTP=25,
    LWIP_IANA_PORT_SMTPS=465,
    LWIP_IANA_PORT_SNMP=-95,
    LWIP_IANA_PORT_SNMP_TRAP=-94,
    LWIP_IANA_PORT_SNTP=123,
    LWIP_IANA_PORT_TFTP=69
} lwip_iana_port_number;

typedef enum ecp_curve_type {
    ECP_TYPE_MONTGOMERY=2,
    ECP_TYPE_NONE=0,
    ECP_TYPE_SHORT_WEIERSTRASS=1
} ecp_curve_type;

typedef enum stateM_handleEventRetVals {
    stateM_errArg=-2,
    stateM_errorStateReached=-1,
    stateM_finalStateReached=3,
    stateM_noStateChange=2,
    stateM_stateChanged=0,
    stateM_stateLoopSelf=1
} stateM_handleEventRetVals;

typedef enum netifapi_arp_entry {
    NETIFAPI_ARP_PERM=0
} netifapi_arp_entry;

typedef struct rxl_hwdesc_env_tag rxl_hwdesc_env_tag, *Prxl_hwdesc_env_tag;

struct rxl_hwdesc_env_tag {
    struct rx_pbd * last;
    struct rx_pbd * free;
};

typedef struct sntp_msg sntp_msg, *Psntp_msg;

struct sntp_msg {
    u8_t li_vn_mode;
    u8_t stratum;
    u8_t poll;
    u8_t precision;
    u32_t root_delay;
    u32_t root_dispersion;
    u32_t reference_identifier;
    u32_t reference_timestamp[2];
    u32_t originate_timestamp[2];
    u32_t receive_timestamp[2];
    u32_t transmit_timestamp[2];
};

typedef struct sntp_time sntp_time, *Psntp_time;

struct sntp_time {
    u32_t sec;
    u32_t frac;
};

typedef struct sntp_server sntp_server, *Psntp_server;

struct sntp_server {
    char * name;
    ip_addr_t addr;
    u8_t reachability;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
};

typedef struct sntp_timestamps sntp_timestamps, *Psntp_timestamps;

struct sntp_timestamps {
    struct sntp_time xmit;
};

typedef struct KDE_t KDE_t, *PKDE_t;

struct KDE_t {
    UINT8 type;
    UINT8 length;
    UINT8 OUI[3];
    UINT8 dataType;
    UINT8 data[1];
};

typedef struct Hdr_8021x_t Hdr_8021x_t, *PHdr_8021x_t;

struct Hdr_8021x_t {
    UINT8 protocol_ver;
    enum IEEEtypes_8021x_PacketType_e pckt_type;
    UINT16 pckt_body_len;
};

typedef struct EAPOL_KeyMsg_t EAPOL_KeyMsg_t, *PEAPOL_KeyMsg_t;

typedef struct key_info_t key_info_t, *Pkey_info_t;

struct key_info_t {
    UINT16 KeyMIC:1;
    UINT16 Secure:1;
    UINT16 Error:1;
    UINT16 Request:1;
    UINT16 EncryptedKeyData:1;
    UINT16 Reserved:3;
    UINT16 KeyDescriptorVersion:3;
    UINT16 KeyType:1;
    UINT16 KeyIndex:2;
    UINT16 Install:1;
    UINT16 KeyAck:1;
};

struct EAPOL_KeyMsg_t {
    struct Hdr_8021x_t hdr_8021x;
    UINT8 desc_type;
    struct key_info_t key_info;
    UINT16 key_length;
    UINT32 replay_cnt[2];
    UINT8 key_nonce[32];
    UINT8 EAPOL_key_IV[16];
    UINT8 key_RSC[8];
    UINT8 key_ID[8];
    UINT8 key_MIC[16];
    UINT16 key_material_len;
    UINT8 key_data[1];
};

typedef struct EAPOL_KeyMsg_Tx_t EAPOL_KeyMsg_Tx_t, *PEAPOL_KeyMsg_Tx_t;

struct EAPOL_KeyMsg_Tx_t {
    struct ether_hdr_t ethHdr;
    struct EAPOL_KeyMsg_t keyMsg;
};

typedef struct EAP_PacketMsg_t EAP_PacketMsg_t, *PEAP_PacketMsg_t;

struct EAP_PacketMsg_t {
    struct Hdr_8021x_t hdr_8021x;
    enum IEEEtypes_8021x_CodeType_e code;
    UINT8 identifier;
    UINT16 length;
    UINT8 data[1];
};

typedef struct GTK_KDE_t GTK_KDE_t, *PGTK_KDE_t;

struct GTK_KDE_t {
    UINT8 KeyID:2;
    UINT8 Tx:1;
    UINT8 rsvd:5;
    UINT8 rsvd1;
    UINT8 GTK[1];
};

typedef struct event_dev_t event_dev_t, *Pevent_dev_t;

struct event_dev_t {
    aos_mutex_t mutex;
    void (* poll_cb)(struct pollfd *, void *);
    struct pollfd * fd;
    void * poll_data;
    int counter;
    dlist_t bufs;
    int cache_count;
    dlist_t buf_cache;
};

typedef struct dev_event_t dev_event_t, *Pdev_event_t;

struct dev_event_t {
    dlist_t node;
    size_t len;
    char[0] buf;
};

typedef union anon_union.conflict188 anon_union.conflict188, *Panon_union.conflict188;

union anon_union.conflict188 {
    u32_t u32_addr[4];
    u8_t u8_addr[16];
};

typedef struct in6_addr in6_addr, *Pin6_addr;

typedef union anon_union_for_un anon_union_for_un, *Panon_union_for_un;

union anon_union_for_un {
    u32_t u32_addr[4];
    u8_t u8_addr[16];
};

struct in6_addr {
    union anon_union_for_un un;
};

typedef union anon_union.conflict1 anon_union.conflict1, *Panon_union.conflict1;

union anon_union.conflict1 {
    u32_t u32_addr[4];
    u8_t u8_addr[16];
};

typedef uint64_t fdt64_t;

typedef uint32_t fdt32_t;

typedef ulong fd_mask;

typedef struct _types_fd_set _types_fd_set, *P_types_fd_set;

struct _types_fd_set {
    fd_mask fds_bits[2];
};

typedef struct poll_arg poll_arg, *Ppoll_arg;

struct poll_arg {
    aos_sem_t sem;
};

typedef struct TkipPtk_t TkipPtk_t, *PTkipPtk_t;

struct TkipPtk_t {
    UINT8 kck[16];
    UINT8 kek[16];
    UINT8 tk[16];
    UINT8 rxMicKey[8];
    UINT8 txMicKey[8];
};

typedef struct getopt_env getopt_env, *Pgetopt_env;

typedef struct getopt_env getopt_env_t;

struct getopt_env {
    char * optarg;
    int optind;
    int opterr;
    int optopt;
    int __optpos;
};

typedef struct Network.conflict Network.conflict, *PNetwork.conflict;

struct Network.conflict {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict1 tlsDataParams;
};

typedef struct Network.conflict23 Network.conflict23, *PNetwork.conflict23;

struct Network.conflict23 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict30 tlsDataParams;
};

typedef struct Network.conflict22 Network.conflict22, *PNetwork.conflict22;

struct Network.conflict22 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict28 tlsDataParams;
};

typedef struct Network.conflict21 Network.conflict21, *PNetwork.conflict21;

struct Network.conflict21 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict27 tlsDataParams;
};

typedef struct Network.conflict20 Network.conflict20, *PNetwork.conflict20;

struct Network.conflict20 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict26 tlsDataParams;
};

typedef struct Network.conflict26 Network.conflict26, *PNetwork.conflict26;

struct Network.conflict26 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict33 tlsDataParams;
};

typedef struct Network.conflict25 Network.conflict25, *PNetwork.conflict25;

struct Network.conflict25 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict32 tlsDataParams;
};

typedef struct Network.conflict24 Network.conflict24, *PNetwork.conflict24;

struct Network.conflict24 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict31 tlsDataParams;
};

typedef struct Network.conflict19 Network.conflict19, *PNetwork.conflict19;

struct Network.conflict19 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict25 tlsDataParams;
};

typedef struct Network.conflict18 Network.conflict18, *PNetwork.conflict18;

struct Network.conflict18 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict23 tlsDataParams;
};

typedef struct Network.conflict17 Network.conflict17, *PNetwork.conflict17;

struct Network.conflict17 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict22 tlsDataParams;
};

typedef struct Network.conflict12 Network.conflict12, *PNetwork.conflict12;

struct Network.conflict12 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict16 tlsDataParams;
};

typedef struct Network.conflict11 Network.conflict11, *PNetwork.conflict11;

struct Network.conflict11 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict15 tlsDataParams;
};

typedef struct Network.conflict10 Network.conflict10, *PNetwork.conflict10;

struct Network.conflict10 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict13 tlsDataParams;
};

typedef struct Network.conflict16 Network.conflict16, *PNetwork.conflict16;

struct Network.conflict16 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict21 tlsDataParams;
};

typedef struct Network.conflict15 Network.conflict15, *PNetwork.conflict15;

struct Network.conflict15 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict20 tlsDataParams;
};

typedef struct Network.conflict14 Network.conflict14, *PNetwork.conflict14;

struct Network.conflict14 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict18 tlsDataParams;
};

typedef struct Network.conflict13 Network.conflict13, *PNetwork.conflict13;

struct Network.conflict13 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict17 tlsDataParams;
};

typedef struct Network.conflict9 Network.conflict9, *PNetwork.conflict9;

struct Network.conflict9 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict12 tlsDataParams;
};

typedef struct Network.conflict8 Network.conflict8, *PNetwork.conflict8;

struct Network.conflict8 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict11 tlsDataParams;
};

typedef struct Network.conflict7 Network.conflict7, *PNetwork.conflict7;

struct Network.conflict7 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict10 tlsDataParams;
};

typedef struct Network.conflict6 Network.conflict6, *PNetwork.conflict6;

struct Network.conflict6 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict8 tlsDataParams;
};

typedef struct Network.conflict5 Network.conflict5, *PNetwork.conflict5;

struct Network.conflict5 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict7 tlsDataParams;
};

typedef struct Network.conflict4 Network.conflict4, *PNetwork.conflict4;

struct Network.conflict4 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict6 tlsDataParams;
};

typedef struct Network.conflict3 Network.conflict3, *PNetwork.conflict3;

struct Network.conflict3 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict5 tlsDataParams;
};

typedef struct Network.conflict2 Network.conflict2, *PNetwork.conflict2;

struct Network.conflict2 {
    IoT_Error_t (* connect)(struct Network *, struct TLSConnectParams *);
    IoT_Error_t (* read)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* write)(struct Network *, uchar *, size_t, struct Timer *, size_t *);
    IoT_Error_t (* disconnect)(struct Network *);
    IoT_Error_t (* isConnected)(struct Network *);
    IoT_Error_t (* destroy)(struct Network *);
    struct TLSConnectParams tlsConnectParams;
    TLSDataParams.conflict3 tlsDataParams;
};

typedef struct anon_struct.conflict96 anon_struct.conflict96, *Panon_struct.conflict96;

struct anon_struct.conflict96 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct anon_struct.conflict95 anon_struct.conflict95, *Panon_struct.conflict95;

struct anon_struct.conflict95 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct anon_struct.conflict26 anon_struct.conflict26, *Panon_struct.conflict26;

struct anon_struct.conflict26 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct anon_struct.conflict15 anon_struct.conflict15, *Panon_struct.conflict15;

struct anon_struct.conflict15 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct anon_struct.conflict14 anon_struct.conflict14, *Panon_struct.conflict14;

struct anon_struct.conflict14 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct apm apm, *Papm;

typedef struct apm_start_req apm_start_req, *Papm_start_req;

struct apm {
    struct apm_start_req * param;
    struct co_list bss_config;
    uint8_t aging_sta_idx;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint8_t * bcn_buf;
    _Bool apm_emb_enabled;
    uint8_t hidden_ssid;
    uint8_t assoc_sta_count;
    uint8_t max_sta_supported;
    struct anon_struct.conflict15 aid_list[10];
    undefined field_0x5e;
    undefined field_0x5f;
};

struct apm_start_req { // Missing member bcn_buf : uint8_t[1] at offset 0xa7 [Unsupported interior flex array: uint8_t[1]]
    struct mac_rateset basic_rates;
    undefined field_0xd;
    struct scan_chan_tag chan;
    uint32_t center_freq1;
    uint32_t center_freq2;
    uint8_t ch_width;
    uint8_t hidden_ssid;
    undefined field_0x1e;
    undefined field_0x1f;
    uint32_t bcn_addr;
    uint16_t bcn_len;
    uint16_t tim_oft;
    uint16_t bcn_int;
    undefined field_0x2a;
    undefined field_0x2b;
    uint32_t flags;
    uint16_t ctrl_port_ethertype;
    uint8_t tim_len;
    uint8_t vif_idx;
    _Bool apm_emb_enabled;
    struct mac_rateset rate_set;
    uint8_t beacon_period;
    uint8_t qos_supported;
    struct mac_ssid ssid;
    uint8_t ap_sec_type;
    uint8_t phrase[64];
    undefined field_0xa7;
};

typedef struct anon_struct.conflict36 anon_struct.conflict36, *Panon_struct.conflict36;

struct anon_struct.conflict36 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct anon_struct.conflict70 anon_struct.conflict70, *Panon_struct.conflict70;

struct anon_struct.conflict70 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct anon_struct.conflict35 anon_struct.conflict35, *Panon_struct.conflict35;

struct anon_struct.conflict35 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct anon_struct.conflict212 anon_struct.conflict212, *Panon_struct.conflict212;

struct anon_struct.conflict212 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct anon_struct.conflict25 anon_struct.conflict25, *Panon_struct.conflict25;

struct anon_struct.conflict25 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct anon_struct.conflict69 anon_struct.conflict69, *Panon_struct.conflict69;

struct anon_struct.conflict69 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct anon_struct.conflict211 anon_struct.conflict211, *Panon_struct.conflict211;

struct anon_struct.conflict211 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct supplicantData supplicantData_t;

typedef struct wifi_secmode_t.conflict wifi_secmode_t.conflict, *Pwifi_secmode_t.conflict;

struct wifi_secmode_t.conflict {
    uint8_t noRsn:1;
    uint8_t wepStatic:1;
    uint8_t wepDynamic:1;
    uint8_t wpa:1;
    uint8_t wpaNone:1;
    uint8_t wpa2:1;
    uint8_t cckm:1;
    uint8_t wapi:1;
    uint8_t rsvd:8;
};

typedef struct wifi_event_data_ind_scan_done wifi_event_data_ind_scan_done, *Pwifi_event_data_ind_scan_done;

struct wifi_event_data_ind_scan_done {
    uint32_t nothing;
};

typedef struct wifi_event_sm_connect_ind wifi_event_sm_connect_ind, *Pwifi_event_sm_connect_ind;

struct wifi_event_sm_connect_ind {
    uint16_t status_code;
    uint8_t bssid[6];
    uint8_t vif_idx;
    uint8_t ap_idx;
    uint8_t ch_idx;
    undefined field_0xb;
    int qos;
    uint16_t aid;
    uint8_t band;
    undefined field_0x13;
    uint16_t center_freq;
    uint8_t width;
    undefined field_0x17;
    uint32_t center_freq1;
    uint32_t center_freq2;
};

typedef struct wifi_cipher_t.conflict23 wifi_cipher_t.conflict23, *Pwifi_cipher_t.conflict23;

struct wifi_cipher_t.conflict23 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_apm_sta_info wifi_apm_sta_info, *Pwifi_apm_sta_info;

struct wifi_apm_sta_info {
    uint8_t sta_idx;
    uint8_t is_used;
    uint8_t sta_mac[6];
    uint32_t tsfhi;
    uint32_t tsflo;
    int rssi;
    uint8_t data_rate;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct wifi_event_beacon_ind wifi_event_beacon_ind, *Pwifi_event_beacon_ind;

typedef struct wifi_cipher_t.conflict1 wifi_cipher_t.conflict1, *Pwifi_cipher_t.conflict1;

typedef struct wifi_secmode_t.conflict1 wifi_secmode_t.conflict1, *Pwifi_secmode_t.conflict1;

struct wifi_secmode_t.conflict1 {
    uint8_t noRsn:1;
    uint8_t wepStatic:1;
    uint8_t wepDynamic:1;
    uint8_t wpa:1;
    uint8_t wpaNone:1;
    uint8_t wpa2:1;
    uint8_t cckm:1;
    uint8_t wapi:1;
    uint8_t rsvd:8;
};

struct wifi_cipher_t.conflict1 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

struct wifi_event_beacon_ind {
    uint8_t bssid[6];
    uint8_t ssid[33];
    int8_t rssi;
    int8_t ppm_abs;
    int8_t ppm_rel;
    uint8_t channel;
    uint8_t auth;
    uint8_t cipher;
    struct wifi_cipher_t.conflict1 wpa_mcstCipher;
    struct wifi_cipher_t.conflict2 wpa_ucstCipher;
    struct wifi_cipher_t.conflict3 rsn_mcstCipher;
    struct wifi_cipher_t.conflict4 rsn_ucstCipher;
    struct wifi_secmode_t.conflict1 sec_mode;
    undefined field_0x33;
    int ssid_len;
};

typedef struct wifi_secmode_t wifi_secmode_t, *Pwifi_secmode_t;

struct wifi_secmode_t {
    uint8_t noRsn:1;
    uint8_t wepStatic:1;
    uint8_t wepDynamic:1;
    uint8_t wpa:1;
    uint8_t wpaNone:1;
    uint8_t wpa2:1;
    uint8_t cckm:1;
    uint8_t wapi:1;
    uint8_t rsvd:8;
};

typedef struct wifi_event_sm_disconnect_ind wifi_event_sm_disconnect_ind, *Pwifi_event_sm_disconnect_ind;

struct wifi_event_sm_disconnect_ind {
    uint16_t reason_code;
    uint8_t vif_idx;
    undefined field_0x3;
    int ft_over_ds;
};

typedef struct wifi_event_beacon_ind.conflict1 wifi_event_beacon_ind.conflict1, *Pwifi_event_beacon_ind.conflict1;

typedef struct wifi_cipher_t.conflict9 wifi_cipher_t.conflict9, *Pwifi_cipher_t.conflict9;

typedef struct wifi_secmode_t.conflict3 wifi_secmode_t.conflict3, *Pwifi_secmode_t.conflict3;

struct wifi_cipher_t.conflict9 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

struct wifi_secmode_t.conflict3 {
    uint8_t noRsn:1;
    uint8_t wepStatic:1;
    uint8_t wepDynamic:1;
    uint8_t wpa:1;
    uint8_t wpaNone:1;
    uint8_t wpa2:1;
    uint8_t cckm:1;
    uint8_t wapi:1;
    uint8_t rsvd:8;
};

struct wifi_event_beacon_ind.conflict1 {
    uint8_t bssid[6];
    uint8_t ssid[33];
    int8_t rssi;
    int8_t ppm_abs;
    int8_t ppm_rel;
    uint8_t channel;
    uint8_t auth;
    uint8_t cipher;
    struct wifi_cipher_t.conflict9 wpa_mcstCipher;
    struct wifi_cipher_t.conflict10 wpa_ucstCipher;
    struct wifi_cipher_t.conflict11 rsn_mcstCipher;
    struct wifi_cipher_t.conflict12 rsn_ucstCipher;
    struct wifi_secmode_t.conflict3 sec_mode;
    undefined field_0x33;
    int ssid_len;
};

typedef struct wifi_event_beacon_ind.conflict4 wifi_event_beacon_ind.conflict4, *Pwifi_event_beacon_ind.conflict4;

typedef struct wifi_secmode_t.conflict8 wifi_secmode_t.conflict8, *Pwifi_secmode_t.conflict8;

struct wifi_secmode_t.conflict8 {
    uint8_t noRsn:1;
    uint8_t wepStatic:1;
    uint8_t wepDynamic:1;
    uint8_t wpa:1;
    uint8_t wpaNone:1;
    uint8_t wpa2:1;
    uint8_t cckm:1;
    uint8_t wapi:1;
    uint8_t rsvd:8;
};

struct wifi_event_beacon_ind.conflict4 {
    uint8_t bssid[6];
    uint8_t ssid[33];
    int8_t rssi;
    int8_t ppm_abs;
    int8_t ppm_rel;
    uint8_t channel;
    uint8_t auth;
    uint8_t cipher;
    struct wifi_cipher_t.conflict23 wpa_mcstCipher;
    struct wifi_cipher_t.conflict24 wpa_ucstCipher;
    struct wifi_cipher_t.conflict25 rsn_mcstCipher;
    struct wifi_cipher_t.conflict26 rsn_ucstCipher;
    struct wifi_secmode_t.conflict8 sec_mode;
    undefined field_0x33;
    int ssid_len;
};

typedef struct wifi_event_beacon_ind.conflict3 wifi_event_beacon_ind.conflict3, *Pwifi_event_beacon_ind.conflict3;

typedef struct wifi_cipher_t.conflict19 wifi_cipher_t.conflict19, *Pwifi_cipher_t.conflict19;

typedef struct wifi_secmode_t.conflict7 wifi_secmode_t.conflict7, *Pwifi_secmode_t.conflict7;

struct wifi_cipher_t.conflict19 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

struct wifi_secmode_t.conflict7 {
    uint8_t noRsn:1;
    uint8_t wepStatic:1;
    uint8_t wepDynamic:1;
    uint8_t wpa:1;
    uint8_t wpaNone:1;
    uint8_t wpa2:1;
    uint8_t cckm:1;
    uint8_t wapi:1;
    uint8_t rsvd:8;
};

struct wifi_event_beacon_ind.conflict3 {
    uint8_t bssid[6];
    uint8_t ssid[33];
    int8_t rssi;
    int8_t ppm_abs;
    int8_t ppm_rel;
    uint8_t channel;
    uint8_t auth;
    uint8_t cipher;
    struct wifi_cipher_t.conflict19 wpa_mcstCipher;
    struct wifi_cipher_t.conflict20 wpa_ucstCipher;
    struct wifi_cipher_t.conflict21 rsn_mcstCipher;
    struct wifi_cipher_t.conflict22 rsn_ucstCipher;
    struct wifi_secmode_t.conflict7 sec_mode;
    undefined field_0x33;
    int ssid_len;
};

typedef struct wifi_event_beacon_ind.conflict2 wifi_event_beacon_ind.conflict2, *Pwifi_event_beacon_ind.conflict2;

typedef struct wifi_cipher_t.conflict13 wifi_cipher_t.conflict13, *Pwifi_cipher_t.conflict13;

typedef struct wifi_secmode_t.conflict4 wifi_secmode_t.conflict4, *Pwifi_secmode_t.conflict4;

struct wifi_cipher_t.conflict13 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

struct wifi_secmode_t.conflict4 {
    uint8_t noRsn:1;
    uint8_t wepStatic:1;
    uint8_t wepDynamic:1;
    uint8_t wpa:1;
    uint8_t wpaNone:1;
    uint8_t wpa2:1;
    uint8_t cckm:1;
    uint8_t wapi:1;
    uint8_t rsvd:8;
};

struct wifi_event_beacon_ind.conflict2 {
    uint8_t bssid[6];
    uint8_t ssid[33];
    int8_t rssi;
    int8_t ppm_abs;
    int8_t ppm_rel;
    uint8_t channel;
    uint8_t auth;
    uint8_t cipher;
    struct wifi_cipher_t.conflict13 wpa_mcstCipher;
    struct wifi_cipher_t.conflict14 wpa_ucstCipher;
    struct wifi_cipher_t.conflict15 rsn_mcstCipher;
    struct wifi_cipher_t.conflict16 rsn_ucstCipher;
    struct wifi_secmode_t.conflict4 sec_mode;
    undefined field_0x33;
    int ssid_len;
};

typedef struct wifi_secmode_t.conflict2 wifi_secmode_t.conflict2, *Pwifi_secmode_t.conflict2;

struct wifi_secmode_t.conflict2 {
    uint8_t noRsn:1;
    uint8_t wepStatic:1;
    uint8_t wepDynamic:1;
    uint8_t wpa:1;
    uint8_t wpaNone:1;
    uint8_t wpa2:1;
    uint8_t cckm:1;
    uint8_t wapi:1;
    uint8_t rsvd:8;
};

typedef struct wifi_secmode_t.conflict5 wifi_secmode_t.conflict5, *Pwifi_secmode_t.conflict5;

struct wifi_secmode_t.conflict5 {
    uint8_t noRsn:1;
    uint8_t wepStatic:1;
    uint8_t wepDynamic:1;
    uint8_t wpa:1;
    uint8_t wpaNone:1;
    uint8_t wpa2:1;
    uint8_t cckm:1;
    uint8_t wapi:1;
    uint8_t rsvd:8;
};

typedef struct wifi_secmode_t.conflict6 wifi_secmode_t.conflict6, *Pwifi_secmode_t.conflict6;

struct wifi_secmode_t.conflict6 {
    uint8_t noRsn:1;
    uint8_t wepStatic:1;
    uint8_t wepDynamic:1;
    uint8_t wpa:1;
    uint8_t wpaNone:1;
    uint8_t wpa2:1;
    uint8_t cckm:1;
    uint8_t wapi:1;
    uint8_t rsvd:8;
};

typedef struct wifi_cipher_t.conflict17 wifi_cipher_t.conflict17, *Pwifi_cipher_t.conflict17;

struct wifi_cipher_t.conflict17 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict18 wifi_cipher_t.conflict18, *Pwifi_cipher_t.conflict18;

struct wifi_cipher_t.conflict18 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_event_data_ind_channel_switch wifi_event_data_ind_channel_switch, *Pwifi_event_data_ind_channel_switch;

struct wifi_event_data_ind_channel_switch {
    int channel;
};

typedef struct wifi_cipher_t.conflict5 wifi_cipher_t.conflict5, *Pwifi_cipher_t.conflict5;

struct wifi_cipher_t.conflict5 {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_cipher_t.conflict wifi_cipher_t.conflict, *Pwifi_cipher_t.conflict;

struct wifi_cipher_t.conflict {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct wifi_event_beacon_ind.conflict wifi_event_beacon_ind.conflict, *Pwifi_event_beacon_ind.conflict;

struct wifi_event_beacon_ind.conflict {
    uint8_t bssid[6];
    uint8_t ssid[33];
    int8_t rssi;
    int8_t ppm_abs;
    int8_t ppm_rel;
    uint8_t channel;
    uint8_t auth;
    uint8_t cipher;
    struct wifi_cipher_t.conflict5 wpa_mcstCipher;
    struct wifi_cipher_t.conflict6 wpa_ucstCipher;
    struct wifi_cipher_t.conflict7 rsn_mcstCipher;
    struct wifi_cipher_t.conflict8 rsn_ucstCipher;
    struct wifi_secmode_t.conflict2 sec_mode;
    undefined field_0x33;
    int ssid_len;
};

typedef struct wifi_event wifi_event, *Pwifi_event;

struct wifi_event {
    uint32_t id;
    uint8_t[0] data;
};

typedef struct wifi_cipher_t wifi_cipher_t, *Pwifi_cipher_t;

struct wifi_cipher_t {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct phyif_utils_recvtable_t phyif_utils_recvtable_t, *Pphyif_utils_recvtable_t;

struct phyif_utils_recvtable_t {
    uint32_t recvtable1;
    uint32_t recvtable2;
    uint32_t recvtable3;
    uint32_t recvtable4;
    uint32_t recvtable5;
    uint32_t recvtable6;
};

typedef struct dhcp_msg dhcp_msg, *Pdhcp_msg;

struct dhcp_msg {
    u8_t op;
    u8_t htype;
    u8_t hlen;
    u8_t hops;
    u32_t xid;
    u16_t secs;
    u16_t flags;
    ip4_addr_p_t ciaddr;
    ip4_addr_p_t yiaddr;
    ip4_addr_p_t siaddr;
    ip4_addr_p_t giaddr;
    u8_t chaddr[16];
    u8_t sname[64];
    u8_t file[128];
    u32_t cookie;
    u8_t options[68];
};

typedef struct dhcp dhcp, *Pdhcp;

struct dhcp {
    u32_t xid;
    u8_t pcb_allocated;
    u8_t state;
    u8_t tries;
    u8_t subnet_mask_given;
    u16_t request_timeout;
    u16_t t1_timeout;
    u16_t t2_timeout;
    u16_t t1_renew_time;
    u16_t t2_rebind_time;
    u16_t lease_used;
    u16_t t0_timeout;
    undefined field_0x16;
    undefined field_0x17;
    ip_addr_t server_ip_addr;
    ip4_addr_t offered_ip_addr;
    ip4_addr_t offered_sn_mask;
    ip4_addr_t offered_gw_addr;
    u32_t offered_t0_lease;
    u32_t offered_t1_renew;
    u32_t offered_t2_rebind;
};

typedef enum dhcp_option_idx {
    DHCP_OPTION_IDX_DNS_SERVER=8,
    DHCP_OPTION_IDX_DNS_SERVER_LAST=9,
    DHCP_OPTION_IDX_LEASE_TIME=3,
    DHCP_OPTION_IDX_MAX=10,
    DHCP_OPTION_IDX_MSG_TYPE=1,
    DHCP_OPTION_IDX_OVERLOAD=0,
    DHCP_OPTION_IDX_ROUTER=7,
    DHCP_OPTION_IDX_SERVER_ID=2,
    DHCP_OPTION_IDX_SUBNET_MASK=6,
    DHCP_OPTION_IDX_T1=4,
    DHCP_OPTION_IDX_T2=5
} dhcp_option_idx;

typedef struct phyif_utils_recvtable_priv_t.conflict phyif_utils_recvtable_priv_t.conflict, *Pphyif_utils_recvtable_priv_t.conflict;

struct phyif_utils_recvtable_priv_t.conflict {
    uint32_t leg_length:12;
    uint32_t leg_rate:4;
    uint32_t ht_length:16;
    uint32_t _ht_length:4;
    uint32_t short_gi:1;
    uint32_t stbc:2;
    uint32_t smoothing:1;
    uint32_t mcs:7;
    uint32_t pre_type:1;
    uint32_t format_mod:3;
    uint32_t ch_bw:2;
    uint32_t n_sts:3;
    uint32_t lsig_valid:1;
    uint32_t sounding:1;
    uint32_t num_extn_ss:2;
    uint32_t aggregation:1;
    uint32_t fec_coding:1;
    uint32_t dyn_bw:1;
    uint32_t doze_not_allowed:1;
    uint32_t antenna_set:8;
    uint32_t partial_aid:9;
    uint32_t group_id:6;
    uint32_t reserved_1c:1;
    int32_t rssi1:8;
    int32_t rssi2:8;
    int32_t rssi3:8;
    int32_t rssi4:8;
    uint32_t reserved_1d:8;
    uint32_t rcpi:8;
    uint32_t evm1:8;
    uint32_t evm2:8;
    uint32_t evm3:8;
    uint32_t evm4:8;
    uint32_t reserved2b_1:8;
    uint32_t reserved2b_2:8;
    uint32_t reserved2b_3:8;
};

typedef struct phyif_utils_recvtable_priv_t.conflict1 phyif_utils_recvtable_priv_t.conflict1, *Pphyif_utils_recvtable_priv_t.conflict1;

struct phyif_utils_recvtable_priv_t.conflict1 {
    uint32_t leg_length:12;
    uint32_t leg_rate:4;
    uint32_t ht_length:16;
    uint32_t _ht_length:4;
    uint32_t short_gi:1;
    uint32_t stbc:2;
    uint32_t smoothing:1;
    uint32_t mcs:7;
    uint32_t pre_type:1;
    uint32_t format_mod:3;
    uint32_t ch_bw:2;
    uint32_t n_sts:3;
    uint32_t lsig_valid:1;
    uint32_t sounding:1;
    uint32_t num_extn_ss:2;
    uint32_t aggregation:1;
    uint32_t fec_coding:1;
    uint32_t dyn_bw:1;
    uint32_t doze_not_allowed:1;
    uint32_t antenna_set:8;
    uint32_t partial_aid:9;
    uint32_t group_id:6;
    uint32_t reserved_1c:1;
    int32_t rssi1:8;
    int32_t rssi2:8;
    int32_t rssi3:8;
    int32_t rssi4:8;
    uint32_t reserved_1d:8;
    uint32_t rcpi:8;
    uint32_t evm1:8;
    uint32_t evm2:8;
    uint32_t evm3:8;
    uint32_t evm4:8;
    uint32_t reserved2b_1:8;
    uint32_t reserved2b_2:8;
    uint32_t reserved2b_3:8;
};

typedef struct phyif_utils_recvtable_priv_t phyif_utils_recvtable_priv_t, *Pphyif_utils_recvtable_priv_t;

struct phyif_utils_recvtable_priv_t {
    uint32_t leg_length:12;
    uint32_t leg_rate:4;
    uint32_t ht_length:16;
    uint32_t _ht_length:4;
    uint32_t short_gi:1;
    uint32_t stbc:2;
    uint32_t smoothing:1;
    uint32_t mcs:7;
    uint32_t pre_type:1;
    uint32_t format_mod:3;
    uint32_t ch_bw:2;
    uint32_t n_sts:3;
    uint32_t lsig_valid:1;
    uint32_t sounding:1;
    uint32_t num_extn_ss:2;
    uint32_t aggregation:1;
    uint32_t fec_coding:1;
    uint32_t dyn_bw:1;
    uint32_t doze_not_allowed:1;
    uint32_t antenna_set:8;
    uint32_t partial_aid:9;
    uint32_t group_id:6;
    uint32_t reserved_1c:1;
    int32_t rssi1:8;
    int32_t rssi2:8;
    int32_t rssi3:8;
    int32_t rssi4:8;
    uint32_t reserved_1d:8;
    uint32_t rcpi:8;
    uint32_t evm1:8;
    uint32_t evm2:8;
    uint32_t evm3:8;
    uint32_t evm4:8;
    uint32_t reserved2b_1:8;
    uint32_t reserved2b_2:8;
    uint32_t reserved2b_3:8;
};

typedef struct xTIME_OUT xTIME_OUT, *PxTIME_OUT;

typedef struct xTIME_OUT TimeOut_t;

struct xTIME_OUT {
    BaseType_t xOverflowCount;
    TickType_t xTimeOnEntering;
};

typedef struct xMEMORY_REGION xMEMORY_REGION, *PxMEMORY_REGION;

struct xMEMORY_REGION {
    void * pvBaseAddress;
    uint32_t ulLengthInBytes;
    uint32_t ulParameters;
};

typedef struct xTASK_STATUS xTASK_STATUS, *PxTASK_STATUS;

typedef struct xTASK_STATUS TaskStatus_t;

typedef enum eTaskState {
    eBlocked=2,
    eDeleted=4,
    eInvalid=5,
    eReady=1,
    eRunning=0,
    eSuspended=3
} eTaskState;

struct xTASK_STATUS {
    TaskHandle_t xHandle;
    char * pcTaskName;
    UBaseType_t xTaskNumber;
    enum eTaskState eCurrentState;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    UBaseType_t uxCurrentPriority;
    UBaseType_t uxBasePriority;
    uint32_t ulRunTimeCounter;
    StackType_t * pxStackBase;
    uint16_t usStackHighWaterMark;
    undefined field_0x22;
    undefined field_0x23;
};

typedef enum eNotifyAction {
    eIncrement=2,
    eNoAction=0,
    eSetBits=1,
    eSetValueWithOverwrite=3,
    eSetValueWithoutOverwrite=4
} eNotifyAction;

typedef struct xMEMORY_REGION MemoryRegion_t;

typedef struct lwip_setgetsockopt_data lwip_setgetsockopt_data, *Plwip_setgetsockopt_data;

typedef union anon_union_for_optval anon_union_for_optval, *Panon_union_for_optval;

union anon_union_for_optval {
    void * p;
    void * pc;
};

struct lwip_setgetsockopt_data {
    int s;
    int level;
    int optname;
    union anon_union_for_optval optval;
    socklen_t optlen;
    int err;
    void * completed_sem;
};

typedef struct lwip_select_cb lwip_select_cb, *Plwip_select_cb;

struct lwip_select_cb {
    struct lwip_select_cb * next;
    struct lwip_select_cb * prev;
    struct _types_fd_set * readset;
    struct _types_fd_set * writeset;
    struct _types_fd_set * exceptset;
    struct pollfd * poll_fds;
    nfds_t poll_nfds;
    int sem_signalled;
    sys_sem_t sem;
};

typedef struct ip_globals ip_globals, *Pip_globals;

struct ip_globals {
    struct netif * current_netif;
    struct netif * current_input_netif;
    struct ip_hdr * current_ip4_header;
    u16_t current_ip_header_tot_len;
    undefined field_0xe;
    undefined field_0xf;
    ip_addr_t current_iphdr_src;
    ip_addr_t current_iphdr_dest;
};

typedef uint32_t evt_field_t;

typedef struct ke_env_tag ke_env_tag, *Pke_env_tag;

struct ke_env_tag {
    evt_field_t evt_field;
    struct co_list queue_sent;
    struct co_list queue_saved;
    struct co_list queue_timer;
    struct mblock_free * mblock_first;
};

typedef struct mbedtls_cipher_definition_t mbedtls_cipher_definition_t, *Pmbedtls_cipher_definition_t;

struct mbedtls_cipher_definition_t {
    enum mbedtls_cipher_type_t type;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    struct mbedtls_cipher_info_t * info;
};

typedef struct mblock_used mblock_used, *Pmblock_used;

struct mblock_used {
    uint32_t size;
};

typedef struct sha256_link_item.conflict sha256_link_item.conflict, *Psha256_link_item.conflict;

struct sha256_link_item.conflict {
    struct SEC_Eng_SHA256_Link_Ctx ctx;
    struct SEC_Eng_SHA_Link_Config_Type.conflict2 linkCfg;
    uint32_t tmp[16];
    uint32_t pad[16];
};

typedef struct sha256_link_item sha256_link_item, *Psha256_link_item;

struct sha256_link_item {
    struct SEC_Eng_SHA256_Link_Ctx ctx;
    struct SEC_Eng_SHA_Link_Config_Type.conflict1 linkCfg;
    uint32_t tmp[16];
    uint32_t pad[16];
};

typedef struct sha256_link_item.conflict sha256_link_item_t;

typedef struct pbuf_rom pbuf_rom, *Ppbuf_rom;

struct pbuf_rom {
    struct pbuf * next;
    void * payload;
};

typedef enum pbuf_layer {
    PBUF_IP=-94,
    PBUF_LINK=-114,
    PBUF_RAW=0,
    PBUF_RAW_TX=-128,
    PBUF_TRANSPORT=-74
} pbuf_layer;

typedef enum pbuf_type {
    PBUF_POOL=386,
    PBUF_RAM=640,
    PBUF_REF=65,
    PBUF_ROM=1
} pbuf_type;

typedef enum SF_Ctrl_Sahb_Type {
    SF_CTRL_FLASH_CLOCK=1,
    SF_CTRL_SAHB_CLOCK=0
} SF_Ctrl_Sahb_Type;

typedef enum SF_Ctrl_Dmy_Mode_Type {
    SF_CTRL_DUMMY_1_LINE=0,
    SF_CTRL_DUMMY_2_LINES=1,
    SF_CTRL_DUMMY_4_LINES=2
} SF_Ctrl_Dmy_Mode_Type;

typedef enum SF_Ctrl_Mode_Type {
    SF_CTRL_QPI_MODE=1,
    SF_CTRL_SPI_MODE=0
} SF_Ctrl_Mode_Type;

typedef enum SF_Ctrl_IO_Type {
    SF_CTRL_DIO_MODE=3,
    SF_CTRL_DO_MODE=1,
    SF_CTRL_NIO_MODE=0,
    SF_CTRL_QIO_MODE=4,
    SF_CTRL_QO_MODE=2
} SF_Ctrl_IO_Type;

typedef enum SF_Ctrl_Data_Mode_Type {
    SF_CTRL_DATA_1_LINE=0,
    SF_CTRL_DATA_2_LINES=1,
    SF_CTRL_DATA_4_LINES=2
} SF_Ctrl_Data_Mode_Type;

typedef struct SF_Ctrl_Cmd_Cfg_Type SF_Ctrl_Cmd_Cfg_Type, *PSF_Ctrl_Cmd_Cfg_Type;

typedef enum SF_Ctrl_Cmd_Mode_Type {
    SF_CTRL_CMD_1_LINE=0,
    SF_CTRL_CMD_4_LINES=1
} SF_Ctrl_Cmd_Mode_Type;

typedef enum SF_Ctrl_Addr_Mode_Type {
    SF_CTRL_ADDR_1_LINE=0,
    SF_CTRL_ADDR_2_LINES=1,
    SF_CTRL_ADDR_4_LINES=2
} SF_Ctrl_Addr_Mode_Type;

struct SF_Ctrl_Cmd_Cfg_Type {
    uint8_t rwFlag;
    enum SF_Ctrl_Cmd_Mode_Type cmdMode;
    enum SF_Ctrl_Addr_Mode_Type addrMode;
    uint8_t addrSize;
    uint8_t dummyClks;
    enum SF_Ctrl_Dmy_Mode_Type dummyMode;
    enum SF_Ctrl_Data_Mode_Type dataMode;
    uint8_t rsv[1];
    uint32_t nbData;
    uint32_t cmdBuf[2];
};

typedef struct SF_Ctrl_Cfg_Type SF_Ctrl_Cfg_Type, *PSF_Ctrl_Cfg_Type;

typedef enum SF_Ctrl_Owner_Type {
    SF_CTRL_OWNER_IAHB=1,
    SF_CTRL_OWNER_SAHB=0
} SF_Ctrl_Owner_Type;

typedef enum SF_Ctrl_Ahb2sif_Type {
    HIGH_SPEED_MODE_CLOCK=0,
    REMOVE_CLOCK_CONSTRAIN=1
} SF_Ctrl_Ahb2sif_Type;

struct SF_Ctrl_Cfg_Type {
    enum SF_Ctrl_Owner_Type owner;
    enum SF_Ctrl_Sahb_Type sahbClock;
    enum SF_Ctrl_Ahb2sif_Type ahb2sifMode;
    uint8_t clkDelay;
    uint8_t clkInvert;
    uint8_t rxClkInvert;
    uint8_t doDelay;
    uint8_t diDelay;
    uint8_t oeDelay;
};

typedef enum SF_Ctrl_Pad_Sel {
    SF_CTRL_EMBEDDED_SEL=0,
    SF_CTRL_EXTERNAL_0TO2_20TO22_SEL=2,
    SF_CTRL_EXTERNAL_17TO22_SEL=1
} SF_Ctrl_Pad_Sel;

typedef enum SF_Ctrl_AES_Key_Type {
    SF_CTRL_AES_128BITS=0,
    SF_CTRL_AES_128BITS_DOUBLE_KEY=3,
    SF_CTRL_AES_192BITS=2,
    SF_CTRL_AES_256BITS=1
} SF_Ctrl_AES_Key_Type;

typedef struct mac_bss_info mac_bss_info, *Pmac_bss_info;

typedef struct mac_edca_param_set mac_edca_param_set, *Pmac_edca_param_set;

typedef struct mobility_domain mobility_domain, *Pmobility_domain;

struct mac_edca_param_set {
    uint8_t qos_info;
    uint8_t acm;
    undefined field_0x2;
    undefined field_0x3;
    uint32_t ac_param[4];
};

struct mobility_domain {
    uint16_t mdid;
    uint8_t ft_capability_policy;
    undefined field_0x3;
};

struct mac_bss_info {
    struct mac_htcapability ht_cap;
    struct mac_addr bssid;
    struct mac_ssid ssid;
    uint16_t bsstype;
    undefined field_0x4a;
    undefined field_0x4b;
    struct scan_chan_tag * chan;
    uint16_t center_freq1;
    uint16_t center_freq2;
    uint16_t beacon_period;
    uint16_t cap_info;
    struct mac_rateset rate_set;
    undefined field_0x65;
    undefined field_0x66;
    undefined field_0x67;
    struct mac_edca_param_set edca_param;
    int8_t rssi;
    int8_t ppm_rel;
    int8_t ppm_abs;
    uint8_t high_11b_rate;
    uint16_t prot_status;
    uint8_t bw;
    uint8_t phy_bw;
    uint8_t power_constraint;
    undefined field_0x85;
    undefined field_0x86;
    undefined field_0x87;
    uint32_t valid_flags;
    struct mobility_domain mde;
    _Bool is_supplicant_enabled;
    struct SecurityMode_t wpa_wpa2_wep;
    struct Cipher_t wpa_mcstCipher;
    struct Cipher_t wpa_ucstCipher;
    struct Cipher_t rsn_mcstCipher;
    struct Cipher_t rsn_ucstCipher;
    _Bool is_pmf_required;
    _Bool is_wpa2_prefered;
    uint8_t rsn_wpa_ie[32];
    uint8_t rsn_wpa_ie_len;
    uint16_t beacon_interval;
    uint16_t aid_bitmap;
    uint16_t max_listen_interval;
    uint8_t sec_type;
    undefined field_0xc1;
    undefined field_0xc2;
    undefined field_0xc3;
};

typedef struct me_env_tag me_env_tag, *Pme_env_tag;

struct me_env_tag {
    uint32_t active_vifs;
    uint32_t ps_disable_vifs;
    ke_task_id_t requester_id;
    undefined field_0xa;
    undefined field_0xb;
    struct mac_htcapability ht_cap;
    uint16_t tx_lft;
    _Bool ht_supported;
    undefined field_0x2f;
    struct me_chan_config_req chan;
    uint8_t stbc_nss;
    uint8_t phy_bw_max;
    _Bool ps_on;
    undefined field_0x131;
    undefined field_0x132;
    undefined field_0x133;
};

typedef struct anon_struct.conflict338 anon_struct.conflict338, *Panon_struct.conflict338;

struct anon_struct.conflict338 {
    u8 action_code;
    u8 operating_mode;
};

typedef struct anon_struct.conflict339 anon_struct.conflict339, *Panon_struct.conflict339;

struct anon_struct.conflict339 {
    u8 action_code;
    u8 membership[8];
    u8 position[16];
};

typedef struct anon_struct.conflict340 anon_struct.conflict340, *Panon_struct.conflict340;

struct anon_struct.conflict340 {
    u8 action_code;
    u8 dialog_token;
    u8 tpc_elem_id;
    u8 tpc_elem_length;
};

typedef struct anon_struct.conflict341 anon_struct.conflict341, *Panon_struct.conflict341;

struct anon_struct.conflict341 {
    u8 action_code;
    u8 dialog_token;
    u8 follow_up;
    u8 tod[6];
    u8 toa[6];
    __le16 tod_error;
    __le16 toa_error;
    u8[0] variable;
};

typedef struct ieee80211_mgmt ieee80211_mgmt, *Pieee80211_mgmt;

struct ieee80211_mgmt {
    __le16 frame_control;
    __le16 duration;
    u8 da[6];
    u8 sa[6];
    u8 bssid[6];
    __le16 seq_ctrl;
    undefined field_0x18;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
    undefined field_0x1c;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
    undefined field_0x20;
    undefined field_0x21;
    undefined field_0x22;
    undefined field_0x23;
    undefined field_0x24;
    undefined field_0x25;
    undefined field_0x26;
    undefined field_0x27;
    undefined field_0x28;
    undefined field_0x29;
    undefined field_0x2a;
    undefined field_0x2b;
    undefined field_0x2c;
    undefined field_0x2d;
    undefined field_0x2e;
    undefined field_0x2f;
    undefined field_0x30;
    undefined field_0x31;
};

typedef struct anon_struct.conflict246 anon_struct.conflict246, *Panon_struct.conflict246;

struct anon_struct.conflict246 {
    __le16 reason_code;
};

typedef struct anon_struct.conflict247 anon_struct.conflict247, *Panon_struct.conflict247;

struct anon_struct.conflict247 {
    __le16 capab_info;
    __le16 listen_interval;
    u8[0] variable;
};

typedef struct anon_struct.conflict248 anon_struct.conflict248, *Panon_struct.conflict248;

struct anon_struct.conflict248 {
    __le16 capab_info;
    __le16 status_code;
    __le16 aid;
    u8[0] variable;
};

typedef struct anon_struct.conflict249 anon_struct.conflict249, *Panon_struct.conflict249;

struct anon_struct.conflict249 {
    __le16 capab_info;
    __le16 listen_interval;
    u8 current_ap[6];
    u8[0] variable;
};

typedef struct anon_struct.conflict245 anon_struct.conflict245, *Panon_struct.conflict245;

struct anon_struct.conflict245 {
    __le16 auth_alg;
    __le16 auth_transaction;
    __le16 status_code;
    u8[0] variable;
};

typedef struct anon_struct.conflict250 anon_struct.conflict250, *Panon_struct.conflict250;

struct anon_struct.conflict250 {
    __le16 reason_code;
};

typedef struct anon_struct.conflict251 anon_struct.conflict251, *Panon_struct.conflict251;

struct anon_struct.conflict251 {
    __le64 timestamp;
    __le16 beacon_int;
    __le16 capab_info;
    u8[0] variable;
};

typedef struct anon_struct.conflict252 anon_struct.conflict252, *Panon_struct.conflict252;

struct anon_struct.conflict252 {
    __le64 timestamp;
    __le16 beacon_int;
    __le16 capab_info;
    u8[0] variable;
};

typedef union anon_union.conflict189 anon_union.conflict189, *Panon_union.conflict189;

typedef struct anon_struct.conflict270 anon_struct.conflict270, *Panon_struct.conflict270;

typedef struct anon_struct.conflict271 anon_struct.conflict271, *Panon_struct.conflict271;

typedef struct anon_struct.conflict272 anon_struct.conflict272, *Panon_struct.conflict272;

typedef struct anon_struct.conflict273 anon_struct.conflict273, *Panon_struct.conflict273;

typedef struct anon_struct.conflict274 anon_struct.conflict274, *Panon_struct.conflict274;

typedef struct anon_struct.conflict275 anon_struct.conflict275, *Panon_struct.conflict275;

typedef struct anon_struct.conflict276 anon_struct.conflict276, *Panon_struct.conflict276;

typedef struct anon_struct.conflict277 anon_struct.conflict277, *Panon_struct.conflict277;

typedef struct anon_struct.conflict278 anon_struct.conflict278, *Panon_struct.conflict278;

typedef struct anon_struct.conflict279 anon_struct.conflict279, *Panon_struct.conflict279;

typedef struct anon_struct.conflict280 anon_struct.conflict280, *Panon_struct.conflict280;

typedef struct anon_struct.conflict281 anon_struct.conflict281, *Panon_struct.conflict281;

typedef struct anon_struct.conflict282 anon_struct.conflict282, *Panon_struct.conflict282;

typedef struct anon_struct.conflict283 anon_struct.conflict283, *Panon_struct.conflict283;

typedef struct anon_struct.conflict284 anon_struct.conflict284, *Panon_struct.conflict284;

typedef struct anon_struct.conflict285 anon_struct.conflict285, *Panon_struct.conflict285;

typedef struct anon_struct.conflict286 anon_struct.conflict286, *Panon_struct.conflict286;

struct anon_struct.conflict282 {
    u8 action_code;
    u8 dialog_token;
    __le16 capability;
    u8[0] variable;
};

struct anon_struct.conflict283 {
    u8 action_code;
    u8 operating_mode;
};

struct anon_struct.conflict284 {
    u8 action_code;
    u8 membership[8];
    u8 position[16];
};

struct anon_struct.conflict285 {
    u8 action_code;
    u8 dialog_token;
    u8 tpc_elem_id;
    u8 tpc_elem_length;
};

struct anon_struct.conflict280 {
    u8 action;
    u8 smps_control;
};

struct anon_struct.conflict281 {
    u8 action_code;
    u8 chanwidth;
};

struct anon_struct.conflict286 {
    u8 action_code;
    u8 dialog_token;
    u8 follow_up;
    u8 tod[6];
    u8 toa[6];
    __le16 tod_error;
    __le16 toa_error;
    u8[0] variable;
};

struct anon_struct.conflict271 {
    u8 action_code;
    u8[0] variable;
};

struct anon_struct.conflict272 {
    u8 action_code;
    u8[0] variable;
};

struct anon_struct.conflict273 {
    u8 action_code;
    u8 dialog_token;
    u8 element_id;
    u8 length;
};

struct anon_struct.conflict274 {
    u8 action_code;
    u8 dialog_token;
    __le16 capab;
    __le16 timeout;
    __le16 start_seq_num;
};

struct anon_struct.conflict278 {
    u8 action_code;
    u8[0] variable;
};

struct anon_struct.conflict276 {
    u8 action_code;
    __le16 params;
    __le16 reason_code;
};

struct anon_struct.conflict279 {
    u8 action;
    u8 trans_id[2];
};

struct anon_struct.conflict277 {
    u8 action_code;
    u8[0] variable;
};

struct anon_struct.conflict270 {
    u8 action_code;
    u8 dialog_token;
    u8 status_code;
    u8[0] variable;
};

struct anon_struct.conflict275 {
    u8 action_code;
    u8 dialog_token;
    __le16 status;
    __le16 capab;
    __le16 timeout;
};

union anon_union.conflict189 {
    struct anon_struct.conflict270 wme_action;
    struct anon_struct.conflict271 chan_switch;
    struct anon_struct.conflict272 ext_chan_switch;
    struct anon_struct.conflict273 measurement;
    struct anon_struct.conflict274 addba_req;
    struct anon_struct.conflict275 addba_resp;
    struct anon_struct.conflict276 delba;
    struct anon_struct.conflict277 self_prot;
    struct anon_struct.conflict278 mesh_action;
    struct anon_struct.conflict279 sa_query;
    struct anon_struct.conflict280 ht_smps;
    struct anon_struct.conflict281 ht_notify_cw;
    struct anon_struct.conflict282 tdls_discover_resp;
    struct anon_struct.conflict283 vht_opmode_notif;
    struct anon_struct.conflict284 vht_group_notif;
    struct anon_struct.conflict285 tpc_report;
    struct anon_struct.conflict286 ftm;
};

typedef struct anon_struct.conflict257 anon_struct.conflict257, *Panon_struct.conflict257;

struct anon_struct.conflict257 {
    u8 action_code;
    u8 dialog_token;
    __le16 capab;
    __le16 timeout;
    __le16 start_seq_num;
};

typedef struct anon_struct.conflict258 anon_struct.conflict258, *Panon_struct.conflict258;

struct anon_struct.conflict258 {
    u8 action_code;
    u8 dialog_token;
    __le16 status;
    __le16 capab;
    __le16 timeout;
};

typedef struct anon_struct.conflict259 anon_struct.conflict259, *Panon_struct.conflict259;

struct anon_struct.conflict259 {
    u8 action_code;
    __le16 params;
    __le16 reason_code;
};

typedef struct anon_struct.conflict253 anon_struct.conflict253, *Panon_struct.conflict253;

struct anon_struct.conflict253 {
    u8 action_code;
    u8 dialog_token;
    u8 status_code;
    u8[0] variable;
};

typedef struct anon_struct.conflict254 anon_struct.conflict254, *Panon_struct.conflict254;

struct anon_struct.conflict254 {
    u8 action_code;
    u8[0] variable;
};

typedef struct anon_struct.conflict255 anon_struct.conflict255, *Panon_struct.conflict255;

struct anon_struct.conflict255 {
    u8 action_code;
    u8[0] variable;
};

typedef struct anon_struct.conflict256 anon_struct.conflict256, *Panon_struct.conflict256;

struct anon_struct.conflict256 {
    u8 action_code;
    u8 dialog_token;
    u8 element_id;
    u8 length;
};

typedef struct anon_struct.conflict260 anon_struct.conflict260, *Panon_struct.conflict260;

struct anon_struct.conflict260 {
    u8 action_code;
    u8[0] variable;
};

typedef struct anon_struct.conflict261 anon_struct.conflict261, *Panon_struct.conflict261;

struct anon_struct.conflict261 {
    u8 action_code;
    u8[0] variable;
};

typedef struct anon_struct.conflict262 anon_struct.conflict262, *Panon_struct.conflict262;

struct anon_struct.conflict262 {
    u8 action;
    u8 trans_id[2];
};

typedef struct anon_struct.conflict263 anon_struct.conflict263, *Panon_struct.conflict263;

struct anon_struct.conflict263 {
    u8 action;
    u8 smps_control;
};

typedef struct anon_struct.conflict268 anon_struct.conflict268, *Panon_struct.conflict268;

struct anon_struct.conflict268 {
    u8 action_code;
    u8 dialog_token;
    u8 tpc_elem_id;
    u8 tpc_elem_length;
};

typedef struct anon_struct.conflict269 anon_struct.conflict269, *Panon_struct.conflict269;

struct anon_struct.conflict269 {
    u8 action_code;
    u8 dialog_token;
    u8 follow_up;
    u8 tod[6];
    u8 toa[6];
    __le16 tod_error;
    __le16 toa_error;
    u8[0] variable;
};

typedef struct anon_struct.conflict264 anon_struct.conflict264, *Panon_struct.conflict264;

struct anon_struct.conflict264 {
    u8 action_code;
    u8 chanwidth;
};

typedef struct anon_struct.conflict265 anon_struct.conflict265, *Panon_struct.conflict265;

struct anon_struct.conflict265 {
    u8 action_code;
    u8 dialog_token;
    __le16 capability;
    u8[0] variable;
};

typedef struct anon_struct.conflict266 anon_struct.conflict266, *Panon_struct.conflict266;

struct anon_struct.conflict266 {
    u8 action_code;
    u8 operating_mode;
};

typedef struct anon_struct.conflict267 anon_struct.conflict267, *Panon_struct.conflict267;

struct anon_struct.conflict267 {
    u8 action_code;
    u8 membership[8];
    u8 position[16];
};

typedef struct anon_struct.conflict317 anon_struct.conflict317, *Panon_struct.conflict317;

struct anon_struct.conflict317 {
    __le16 auth_alg;
    __le16 auth_transaction;
    __le16 status_code;
    u8[0] variable;
};

typedef struct anon_struct.conflict318 anon_struct.conflict318, *Panon_struct.conflict318;

struct anon_struct.conflict318 {
    __le16 reason_code;
};

typedef struct anon_struct.conflict319 anon_struct.conflict319, *Panon_struct.conflict319;

struct anon_struct.conflict319 {
    __le16 capab_info;
    __le16 listen_interval;
    u8[0] variable;
};

typedef struct anon_struct.conflict323 anon_struct.conflict323, *Panon_struct.conflict323;

struct anon_struct.conflict323 {
    __le64 timestamp;
    __le16 beacon_int;
    __le16 capab_info;
    u8[0] variable;
};

typedef struct anon_struct.conflict324 anon_struct.conflict324, *Panon_struct.conflict324;

struct anon_struct.conflict324 {
    __le64 timestamp;
    __le16 beacon_int;
    __le16 capab_info;
    u8[0] variable;
};

typedef struct anon_struct.conflict325 anon_struct.conflict325, *Panon_struct.conflict325;

struct anon_struct.conflict325 {
    u8 action_code;
    u8 dialog_token;
    u8 status_code;
    u8[0] variable;
};

typedef struct anon_struct.conflict326 anon_struct.conflict326, *Panon_struct.conflict326;

struct anon_struct.conflict326 {
    u8 action_code;
    u8[0] variable;
};

typedef struct anon_struct.conflict320 anon_struct.conflict320, *Panon_struct.conflict320;

struct anon_struct.conflict320 {
    __le16 capab_info;
    __le16 status_code;
    __le16 aid;
    u8[0] variable;
};

typedef struct anon_struct.conflict288 anon_struct.conflict288, *Panon_struct.conflict288;

struct anon_struct.conflict288 {
    __le16 auth_alg;
    __le16 auth_transaction;
    __le16 status_code;
    u8[0] variable;
};

typedef struct anon_struct.conflict321 anon_struct.conflict321, *Panon_struct.conflict321;

struct anon_struct.conflict321 {
    __le16 capab_info;
    __le16 listen_interval;
    u8 current_ap[6];
    u8[0] variable;
};

typedef struct anon_struct.conflict289 anon_struct.conflict289, *Panon_struct.conflict289;

struct anon_struct.conflict289 {
    __le16 reason_code;
};

typedef struct anon_struct.conflict322 anon_struct.conflict322, *Panon_struct.conflict322;

struct anon_struct.conflict322 {
    __le16 reason_code;
};

typedef struct anon_struct.conflict327 anon_struct.conflict327, *Panon_struct.conflict327;

struct anon_struct.conflict327 {
    u8 action_code;
    u8[0] variable;
};

typedef enum ieee80211_reasoncode {
    WLAN_REASON_4WAY_HANDSHAKE_TIMEOUT=15,
    WLAN_REASON_CIPHER_SUITE_REJECTED=24,
    WLAN_REASON_CLASS2_FRAME_FROM_NONAUTH_STA=6,
    WLAN_REASON_CLASS3_FRAME_FROM_NONASSOC_STA=7,
    WLAN_REASON_DEAUTH_LEAVING=3,
    WLAN_REASON_DISASSOC_AP_BUSY=5,
    WLAN_REASON_DISASSOC_BAD_POWER=10,
    WLAN_REASON_DISASSOC_BAD_SUPP_CHAN=11,
    WLAN_REASON_DISASSOC_DUE_TO_INACTIVITY=4,
    WLAN_REASON_DISASSOC_LOW_ACK=34,
    WLAN_REASON_DISASSOC_QAP_EXCEED_TXOP=35,
    WLAN_REASON_DISASSOC_QAP_NO_BANDWIDTH=33,
    WLAN_REASON_DISASSOC_STA_HAS_LEFT=8,
    WLAN_REASON_DISASSOC_UNSPECIFIED_QOS=32,
    WLAN_REASON_GROUP_KEY_HANDSHAKE_TIMEOUT=16,
    WLAN_REASON_IEEE8021X_FAILED=23,
    WLAN_REASON_IE_DIFFERENT=17,
    WLAN_REASON_INVALID_AKMP=20,
    WLAN_REASON_INVALID_GROUP_CIPHER=18,
    WLAN_REASON_INVALID_IE=13,
    WLAN_REASON_INVALID_PAIRWISE_CIPHER=19,
    WLAN_REASON_INVALID_RSN_IE_CAP=22,
    WLAN_REASON_MAC_EXISTS_IN_MBSS=64,
    WLAN_REASON_MESH_CHAN=66,
    WLAN_REASON_MESH_CHAN_REGULATORY=65,
    WLAN_REASON_MESH_CLOSE=55,
    WLAN_REASON_MESH_CONFIG=54,
    WLAN_REASON_MESH_CONFIRM_TIMEOUT=57,
    WLAN_REASON_MESH_INCONSISTENT_PARAM=59,
    WLAN_REASON_MESH_INVALID_GTK=58,
    WLAN_REASON_MESH_INVALID_SECURITY=60,
    WLAN_REASON_MESH_MAX_PEERS=53,
    WLAN_REASON_MESH_MAX_RETRIES=56,
    WLAN_REASON_MESH_PATH_DEST_UNREACHABLE=63,
    WLAN_REASON_MESH_PATH_ERROR=61,
    WLAN_REASON_MESH_PATH_NOFORWARD=62,
    WLAN_REASON_MESH_PEER_CANCELED=52,
    WLAN_REASON_MIC_FAILURE=14,
    WLAN_REASON_PREV_AUTH_NOT_VALID=2,
    WLAN_REASON_QSTA_CIPHER_NOT_SUPP=45,
    WLAN_REASON_QSTA_LEAVE_QBSS=36,
    WLAN_REASON_QSTA_NOT_USE=37,
    WLAN_REASON_QSTA_REQUIRE_SETUP=38,
    WLAN_REASON_QSTA_TIMEOUT=39,
    WLAN_REASON_STA_REQ_ASSOC_WITHOUT_AUTH=9,
    WLAN_REASON_TDLS_TEARDOWN_UNREACHABLE=25,
    WLAN_REASON_TDLS_TEARDOWN_UNSPECIFIED=26,
    WLAN_REASON_UNSPECIFIED=1,
    WLAN_REASON_UNSUPP_RSN_VERSION=21
} ieee80211_reasoncode;

typedef struct anon_struct.conflict328 anon_struct.conflict328, *Panon_struct.conflict328;

struct anon_struct.conflict328 {
    u8 action_code;
    u8 dialog_token;
    u8 element_id;
    u8 length;
};

typedef struct anon_struct.conflict329 anon_struct.conflict329, *Panon_struct.conflict329;

struct anon_struct.conflict329 {
    u8 action_code;
    u8 dialog_token;
    __le16 capab;
    __le16 timeout;
    __le16 start_seq_num;
};

typedef struct anon_struct.conflict293 anon_struct.conflict293, *Panon_struct.conflict293;

struct anon_struct.conflict293 {
    __le16 capab_info;
    __le16 listen_interval;
    u8 current_ap[6];
    u8[0] variable;
};

typedef struct anon_struct.conflict294 anon_struct.conflict294, *Panon_struct.conflict294;

struct anon_struct.conflict294 {
    __le16 reason_code;
};

typedef struct anon_struct.conflict295 anon_struct.conflict295, *Panon_struct.conflict295;

struct anon_struct.conflict295 {
    __le64 timestamp;
    __le16 beacon_int;
    __le16 capab_info;
    u8[0] variable;
};

typedef struct anon_struct.conflict296 anon_struct.conflict296, *Panon_struct.conflict296;

struct anon_struct.conflict296 {
    __le64 timestamp;
    __le16 beacon_int;
    __le16 capab_info;
    u8[0] variable;
};

typedef struct anon_struct.conflict290 anon_struct.conflict290, *Panon_struct.conflict290;

struct anon_struct.conflict290 {
    __le16 capab_info;
    __le16 listen_interval;
    u8[0] variable;
};

typedef struct anon_struct.conflict291 anon_struct.conflict291, *Panon_struct.conflict291;

struct anon_struct.conflict291 {
    __le16 capab_info;
    __le16 status_code;
    __le16 aid;
    u8[0] variable;
};

typedef struct anon_struct.conflict334 anon_struct.conflict334, *Panon_struct.conflict334;

struct anon_struct.conflict334 {
    u8 action;
    u8 trans_id[2];
};

typedef struct anon_struct.conflict335 anon_struct.conflict335, *Panon_struct.conflict335;

struct anon_struct.conflict335 {
    u8 action;
    u8 smps_control;
};

typedef struct anon_struct.conflict336 anon_struct.conflict336, *Panon_struct.conflict336;

struct anon_struct.conflict336 {
    u8 action_code;
    u8 chanwidth;
};

typedef struct anon_struct.conflict337 anon_struct.conflict337, *Panon_struct.conflict337;

struct anon_struct.conflict337 {
    u8 action_code;
    u8 dialog_token;
    __le16 capability;
    u8[0] variable;
};

typedef struct anon_struct.conflict330 anon_struct.conflict330, *Panon_struct.conflict330;

struct anon_struct.conflict330 {
    u8 action_code;
    u8 dialog_token;
    __le16 status;
    __le16 capab;
    __le16 timeout;
};

typedef struct anon_struct.conflict331 anon_struct.conflict331, *Panon_struct.conflict331;

struct anon_struct.conflict331 {
    u8 action_code;
    __le16 params;
    __le16 reason_code;
};

typedef struct anon_struct.conflict332 anon_struct.conflict332, *Panon_struct.conflict332;

struct anon_struct.conflict332 {
    u8 action_code;
    u8[0] variable;
};

typedef struct anon_struct.conflict333 anon_struct.conflict333, *Panon_struct.conflict333;

struct anon_struct.conflict333 {
    u8 action_code;
    u8[0] variable;
};

typedef struct ke_msg_handler.conflict2 ke_msg_handler.conflict2, *Pke_msg_handler.conflict2;

struct ke_msg_handler.conflict2 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict41 ke_msg_handler.conflict41, *Pke_msg_handler.conflict41;

struct ke_msg_handler.conflict41 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_task_desc ke_task_desc, *Pke_task_desc;

struct ke_task_desc {
    struct ke_state_handler * state_handler;
    struct ke_state_handler * default_handler;
    ke_state_t * state;
    uint16_t state_max;
    uint16_t idx_max;
};

typedef struct ke_msg_handler.conflict67 ke_msg_handler.conflict67, *Pke_msg_handler.conflict67;

struct ke_msg_handler.conflict67 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict66 ke_msg_handler.conflict66, *Pke_msg_handler.conflict66;

struct ke_msg_handler.conflict66 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict65 ke_msg_handler.conflict65, *Pke_msg_handler.conflict65;

struct ke_msg_handler.conflict65 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict62 ke_msg_handler.conflict62, *Pke_msg_handler.conflict62;

struct ke_msg_handler.conflict62 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict64 ke_msg_handler.conflict64, *Pke_msg_handler.conflict64;

struct ke_msg_handler.conflict64 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict63 ke_msg_handler.conflict63, *Pke_msg_handler.conflict63;

struct ke_msg_handler.conflict63 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict3 ke_msg_handler.conflict3, *Pke_msg_handler.conflict3;

struct ke_msg_handler.conflict3 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict61 ke_msg_handler.conflict61, *Pke_msg_handler.conflict61;

struct ke_msg_handler.conflict61 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict60 ke_msg_handler.conflict60, *Pke_msg_handler.conflict60;

struct ke_msg_handler.conflict60 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict ke_msg_handler.conflict, *Pke_msg_handler.conflict;

struct ke_msg_handler.conflict {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict59 ke_msg_handler.conflict59, *Pke_msg_handler.conflict59;

struct ke_msg_handler.conflict59 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict58 ke_msg_handler.conflict58, *Pke_msg_handler.conflict58;

struct ke_msg_handler.conflict58 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict57 ke_msg_handler.conflict57, *Pke_msg_handler.conflict57;

struct ke_msg_handler.conflict57 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict56 ke_msg_handler.conflict56, *Pke_msg_handler.conflict56;

struct ke_msg_handler.conflict56 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict55 ke_msg_handler.conflict55, *Pke_msg_handler.conflict55;

struct ke_msg_handler.conflict55 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict54 ke_msg_handler.conflict54, *Pke_msg_handler.conflict54;

struct ke_msg_handler.conflict54 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict48 ke_msg_handler.conflict48, *Pke_msg_handler.conflict48;

struct ke_msg_handler.conflict48 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict53 ke_msg_handler.conflict53, *Pke_msg_handler.conflict53;

struct ke_msg_handler.conflict53 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict52 ke_msg_handler.conflict52, *Pke_msg_handler.conflict52;

struct ke_msg_handler.conflict52 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict51 ke_msg_handler.conflict51, *Pke_msg_handler.conflict51;

struct ke_msg_handler.conflict51 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict50 ke_msg_handler.conflict50, *Pke_msg_handler.conflict50;

struct ke_msg_handler.conflict50 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict9 ke_msg_handler.conflict9, *Pke_msg_handler.conflict9;

struct ke_msg_handler.conflict9 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict6 ke_msg_handler.conflict6, *Pke_msg_handler.conflict6;

struct ke_msg_handler.conflict6 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict5 ke_msg_handler.conflict5, *Pke_msg_handler.conflict5;

struct ke_msg_handler.conflict5 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict8 ke_msg_handler.conflict8, *Pke_msg_handler.conflict8;

struct ke_msg_handler.conflict8 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict7 ke_msg_handler.conflict7, *Pke_msg_handler.conflict7;

struct ke_msg_handler.conflict7 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict1 ke_msg_handler.conflict1, *Pke_msg_handler.conflict1;

struct ke_msg_handler.conflict1 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict4 ke_msg_handler.conflict4, *Pke_msg_handler.conflict4;

struct ke_msg_handler.conflict4 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict49 ke_msg_handler.conflict49, *Pke_msg_handler.conflict49;

struct ke_msg_handler.conflict49 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict47 ke_msg_handler.conflict47, *Pke_msg_handler.conflict47;

struct ke_msg_handler.conflict47 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict46 ke_msg_handler.conflict46, *Pke_msg_handler.conflict46;

struct ke_msg_handler.conflict46 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict45 ke_msg_handler.conflict45, *Pke_msg_handler.conflict45;

struct ke_msg_handler.conflict45 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict44 ke_msg_handler.conflict44, *Pke_msg_handler.conflict44;

struct ke_msg_handler.conflict44 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict43 ke_msg_handler.conflict43, *Pke_msg_handler.conflict43;

struct ke_msg_handler.conflict43 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict42 ke_msg_handler.conflict42, *Pke_msg_handler.conflict42;

struct ke_msg_handler.conflict42 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict40 ke_msg_handler.conflict40, *Pke_msg_handler.conflict40;

struct ke_msg_handler.conflict40 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict39 ke_msg_handler.conflict39, *Pke_msg_handler.conflict39;

struct ke_msg_handler.conflict39 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict38 ke_msg_handler.conflict38, *Pke_msg_handler.conflict38;

struct ke_msg_handler.conflict38 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict37 ke_msg_handler.conflict37, *Pke_msg_handler.conflict37;

struct ke_msg_handler.conflict37 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict36 ke_msg_handler.conflict36, *Pke_msg_handler.conflict36;

struct ke_msg_handler.conflict36 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict35 ke_msg_handler.conflict35, *Pke_msg_handler.conflict35;

struct ke_msg_handler.conflict35 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict34 ke_msg_handler.conflict34, *Pke_msg_handler.conflict34;

struct ke_msg_handler.conflict34 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict33 ke_msg_handler.conflict33, *Pke_msg_handler.conflict33;

struct ke_msg_handler.conflict33 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict32 ke_msg_handler.conflict32, *Pke_msg_handler.conflict32;

struct ke_msg_handler.conflict32 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict31 ke_msg_handler.conflict31, *Pke_msg_handler.conflict31;

struct ke_msg_handler.conflict31 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict30 ke_msg_handler.conflict30, *Pke_msg_handler.conflict30;

struct ke_msg_handler.conflict30 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict29 ke_msg_handler.conflict29, *Pke_msg_handler.conflict29;

struct ke_msg_handler.conflict29 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict28 ke_msg_handler.conflict28, *Pke_msg_handler.conflict28;

struct ke_msg_handler.conflict28 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict27 ke_msg_handler.conflict27, *Pke_msg_handler.conflict27;

struct ke_msg_handler.conflict27 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict26 ke_msg_handler.conflict26, *Pke_msg_handler.conflict26;

struct ke_msg_handler.conflict26 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict25 ke_msg_handler.conflict25, *Pke_msg_handler.conflict25;

struct ke_msg_handler.conflict25 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict24 ke_msg_handler.conflict24, *Pke_msg_handler.conflict24;

struct ke_msg_handler.conflict24 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict23 ke_msg_handler.conflict23, *Pke_msg_handler.conflict23;

struct ke_msg_handler.conflict23 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict22 ke_msg_handler.conflict22, *Pke_msg_handler.conflict22;

struct ke_msg_handler.conflict22 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict21 ke_msg_handler.conflict21, *Pke_msg_handler.conflict21;

struct ke_msg_handler.conflict21 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict20 ke_msg_handler.conflict20, *Pke_msg_handler.conflict20;

struct ke_msg_handler.conflict20 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict19 ke_msg_handler.conflict19, *Pke_msg_handler.conflict19;

struct ke_msg_handler.conflict19 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict18 ke_msg_handler.conflict18, *Pke_msg_handler.conflict18;

struct ke_msg_handler.conflict18 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict17 ke_msg_handler.conflict17, *Pke_msg_handler.conflict17;

struct ke_msg_handler.conflict17 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict16 ke_msg_handler.conflict16, *Pke_msg_handler.conflict16;

struct ke_msg_handler.conflict16 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict15 ke_msg_handler.conflict15, *Pke_msg_handler.conflict15;

struct ke_msg_handler.conflict15 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict14 ke_msg_handler.conflict14, *Pke_msg_handler.conflict14;

struct ke_msg_handler.conflict14 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict13 ke_msg_handler.conflict13, *Pke_msg_handler.conflict13;

struct ke_msg_handler.conflict13 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict12 ke_msg_handler.conflict12, *Pke_msg_handler.conflict12;

struct ke_msg_handler.conflict12 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict11 ke_msg_handler.conflict11, *Pke_msg_handler.conflict11;

struct ke_msg_handler.conflict11 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict10 ke_msg_handler.conflict10, *Pke_msg_handler.conflict10;

struct ke_msg_handler.conflict10 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct anon_struct.conflict18 anon_struct.conflict18, *Panon_struct.conflict18;

struct anon_struct.conflict18 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict17 anon_struct.conflict17, *Panon_struct.conflict17;

struct anon_struct.conflict17 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef union anon_union.conflict17 anon_union.conflict17, *Panon_union.conflict17;

typedef struct anon_struct.conflict19 anon_struct.conflict19, *Panon_struct.conflict19;

typedef struct anon_struct.conflict20 anon_struct.conflict20, *Panon_struct.conflict20;

struct anon_struct.conflict19 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

struct anon_struct.conflict20 {
    uint32_t key[4];
};

union anon_union.conflict17 {
    struct anon_struct.conflict19 mic;
    struct anon_struct.conflict20 mfp;
};

typedef struct anon_struct.conflict105 anon_struct.conflict105, *Panon_struct.conflict105;

struct anon_struct.conflict105 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict106 anon_struct.conflict106, *Panon_struct.conflict106;

struct anon_struct.conflict106 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict100 anon_struct.conflict100, *Panon_struct.conflict100;

struct anon_struct.conflict100 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict107 anon_struct.conflict107, *Panon_struct.conflict107;

struct anon_struct.conflict107 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict108 anon_struct.conflict108, *Panon_struct.conflict108;

struct anon_struct.conflict108 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict114 anon_struct.conflict114, *Panon_struct.conflict114;

struct anon_struct.conflict114 {
    uint32_t key[4];
};

typedef union anon_union.conflict27 anon_union.conflict27, *Panon_union.conflict27;

typedef struct anon_struct.conflict29 anon_struct.conflict29, *Panon_struct.conflict29;

typedef struct anon_struct.conflict30 anon_struct.conflict30, *Panon_struct.conflict30;

struct anon_struct.conflict30 {
    uint32_t key[4];
};

struct anon_struct.conflict29 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

union anon_union.conflict27 {
    struct anon_struct.conflict29 mic;
    struct anon_struct.conflict30 mfp;
};

typedef struct anon_struct.conflict115 anon_struct.conflict115, *Panon_struct.conflict115;

struct anon_struct.conflict115 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict116 anon_struct.conflict116, *Panon_struct.conflict116;

struct anon_struct.conflict116 {
    uint32_t key[4];
};

typedef union anon_union.conflict3 anon_union.conflict3, *Panon_union.conflict3;

typedef struct anon_struct.conflict4 anon_struct.conflict4, *Panon_struct.conflict4;

typedef struct anon_struct.conflict5 anon_struct.conflict5, *Panon_struct.conflict5;

struct anon_struct.conflict5 {
    uint32_t key[4];
};

struct anon_struct.conflict4 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

union anon_union.conflict3 {
    struct anon_struct.conflict4 mic;
    struct anon_struct.conflict5 mfp;
};

typedef struct anon_struct.conflict113 anon_struct.conflict113, *Panon_struct.conflict113;

struct anon_struct.conflict113 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict118 anon_struct.conflict118, *Panon_struct.conflict118;

struct anon_struct.conflict118 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict119 anon_struct.conflict119, *Panon_struct.conflict119;

struct anon_struct.conflict119 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict120 anon_struct.conflict120, *Panon_struct.conflict120;

struct anon_struct.conflict120 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef union anon_union.conflict34 anon_union.conflict34, *Panon_union.conflict34;

typedef struct anon_struct.conflict39 anon_struct.conflict39, *Panon_struct.conflict39;

typedef struct anon_struct.conflict40 anon_struct.conflict40, *Panon_struct.conflict40;

struct anon_struct.conflict39 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

struct anon_struct.conflict40 {
    uint32_t key[4];
};

union anon_union.conflict34 {
    struct anon_struct.conflict39 mic;
    struct anon_struct.conflict40 mfp;
};

typedef struct anon_struct.conflict125 anon_struct.conflict125, *Panon_struct.conflict125;

struct anon_struct.conflict125 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict126 anon_struct.conflict126, *Panon_struct.conflict126;

struct anon_struct.conflict126 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict127 anon_struct.conflict127, *Panon_struct.conflict127;

struct anon_struct.conflict127 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict128 anon_struct.conflict128, *Panon_struct.conflict128;

struct anon_struct.conflict128 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict121 anon_struct.conflict121, *Panon_struct.conflict121;

struct anon_struct.conflict121 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict129 anon_struct.conflict129, *Panon_struct.conflict129;

struct anon_struct.conflict129 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef union anon_union.conflict41 anon_union.conflict41, *Panon_union.conflict41;

typedef struct anon_struct.conflict47 anon_struct.conflict47, *Panon_struct.conflict47;

typedef struct anon_struct.conflict48 anon_struct.conflict48, *Panon_struct.conflict48;

struct anon_struct.conflict48 {
    uint32_t key[4];
};

struct anon_struct.conflict47 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

union anon_union.conflict41 {
    struct anon_struct.conflict47 mic;
    struct anon_struct.conflict48 mfp;
};

typedef struct anon_struct.conflict130 anon_struct.conflict130, *Panon_struct.conflict130;

struct anon_struct.conflict130 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict131 anon_struct.conflict131, *Panon_struct.conflict131;

struct anon_struct.conflict131 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef union anon_union.conflict48 anon_union.conflict48, *Panon_union.conflict48;

typedef struct anon_struct.conflict63 anon_struct.conflict63, *Panon_struct.conflict63;

typedef struct anon_struct.conflict64 anon_struct.conflict64, *Panon_struct.conflict64;

struct anon_struct.conflict64 {
    uint32_t key[4];
};

struct anon_struct.conflict63 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

union anon_union.conflict48 {
    struct anon_struct.conflict63 mic;
    struct anon_struct.conflict64 mfp;
};

typedef struct anon_struct.conflict132 anon_struct.conflict132, *Panon_struct.conflict132;

struct anon_struct.conflict132 {
    uint32_t key[4];
};

typedef union anon_union.conflict173 anon_union.conflict173, *Panon_union.conflict173;

typedef struct anon_struct.conflict209 anon_struct.conflict209, *Panon_struct.conflict209;

typedef struct anon_struct.conflict210 anon_struct.conflict210, *Panon_struct.conflict210;

struct anon_struct.conflict210 {
    uint32_t key[4];
};

struct anon_struct.conflict209 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

union anon_union.conflict173 {
    struct anon_struct.conflict209 mic;
    struct anon_struct.conflict210 mfp;
};

typedef union anon_union.conflict55 anon_union.conflict55, *Panon_union.conflict55;

typedef struct anon_struct.conflict73 anon_struct.conflict73, *Panon_struct.conflict73;

typedef struct anon_struct.conflict74 anon_struct.conflict74, *Panon_struct.conflict74;

struct anon_struct.conflict74 {
    uint32_t key[4];
};

struct anon_struct.conflict73 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

union anon_union.conflict55 {
    struct anon_struct.conflict73 mic;
    struct anon_struct.conflict74 mfp;
};

typedef struct anon_struct.conflict46 anon_struct.conflict46, *Panon_struct.conflict46;

struct anon_struct.conflict46 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict45 anon_struct.conflict45, *Panon_struct.conflict45;

struct anon_struct.conflict45 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef union anon_union.conflict62 anon_union.conflict62, *Panon_union.conflict62;

typedef struct anon_struct.conflict81 anon_struct.conflict81, *Panon_struct.conflict81;

typedef struct anon_struct.conflict82 anon_struct.conflict82, *Panon_struct.conflict82;

struct anon_struct.conflict82 {
    uint32_t key[4];
};

struct anon_struct.conflict81 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

union anon_union.conflict62 {
    struct anon_struct.conflict81 mic;
    struct anon_struct.conflict82 mfp;
};

typedef union anon_union.conflict69 anon_union.conflict69, *Panon_union.conflict69;

typedef struct anon_struct.conflict89 anon_struct.conflict89, *Panon_struct.conflict89;

typedef struct anon_struct.conflict90 anon_struct.conflict90, *Panon_struct.conflict90;

struct anon_struct.conflict90 {
    uint32_t key[4];
};

struct anon_struct.conflict89 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

union anon_union.conflict69 {
    struct anon_struct.conflict89 mic;
    struct anon_struct.conflict90 mfp;
};

typedef union anon_union.conflict166 anon_union.conflict166, *Panon_union.conflict166;

typedef struct anon_struct.conflict201 anon_struct.conflict201, *Panon_struct.conflict201;

typedef struct anon_struct.conflict202 anon_struct.conflict202, *Panon_struct.conflict202;

struct anon_struct.conflict202 {
    uint32_t key[4];
};

struct anon_struct.conflict201 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

union anon_union.conflict166 {
    struct anon_struct.conflict201 mic;
    struct anon_struct.conflict202 mfp;
};

typedef struct anon_struct.conflict38 anon_struct.conflict38, *Panon_struct.conflict38;

struct anon_struct.conflict38 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict37 anon_struct.conflict37, *Panon_struct.conflict37;

struct anon_struct.conflict37 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef union anon_union.conflict159 anon_union.conflict159, *Panon_union.conflict159;

typedef struct anon_struct.conflict193 anon_struct.conflict193, *Panon_struct.conflict193;

typedef struct anon_struct.conflict194 anon_struct.conflict194, *Panon_struct.conflict194;

struct anon_struct.conflict193 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

struct anon_struct.conflict194 {
    uint32_t key[4];
};

union anon_union.conflict159 {
    struct anon_struct.conflict193 mic;
    struct anon_struct.conflict194 mfp;
};

typedef union anon_union.conflict152 anon_union.conflict152, *Panon_union.conflict152;

typedef struct anon_struct.conflict185 anon_struct.conflict185, *Panon_struct.conflict185;

typedef struct anon_struct.conflict186 anon_struct.conflict186, *Panon_struct.conflict186;

struct anon_struct.conflict186 {
    uint32_t key[4];
};

struct anon_struct.conflict185 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

union anon_union.conflict152 {
    struct anon_struct.conflict185 mic;
    struct anon_struct.conflict186 mfp;
};

typedef union anon_union.conflict77 anon_union.conflict77, *Panon_union.conflict77;

typedef struct anon_struct.conflict99 anon_struct.conflict99, *Panon_struct.conflict99;

struct anon_struct.conflict99 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

union anon_union.conflict77 {
    struct anon_struct.conflict99 mic;
    struct anon_struct.conflict100 mfp;
};

typedef struct anon_struct.conflict200 anon_struct.conflict200, *Panon_struct.conflict200;

struct anon_struct.conflict200 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict207 anon_struct.conflict207, *Panon_struct.conflict207;

struct anon_struct.conflict207 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict208 anon_struct.conflict208, *Panon_struct.conflict208;

struct anon_struct.conflict208 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict28 anon_struct.conflict28, *Panon_struct.conflict28;

struct anon_struct.conflict28 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict27 anon_struct.conflict27, *Panon_struct.conflict27;

struct anon_struct.conflict27 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef union anon_union.conflict91 anon_union.conflict91, *Panon_union.conflict91;

union anon_union.conflict91 {
    struct anon_struct.conflict115 mic;
    struct anon_struct.conflict116 mfp;
};

typedef union anon_union.conflict84 anon_union.conflict84, *Panon_union.conflict84;

union anon_union.conflict84 {
    struct anon_struct.conflict107 mic;
    struct anon_struct.conflict108 mfp;
};

typedef union anon_union.conflict145 anon_union.conflict145, *Panon_union.conflict145;

typedef struct anon_struct.conflict177 anon_struct.conflict177, *Panon_struct.conflict177;

typedef struct anon_struct.conflict178 anon_struct.conflict178, *Panon_struct.conflict178;

struct anon_struct.conflict178 {
    uint32_t key[4];
};

struct anon_struct.conflict177 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

union anon_union.conflict145 {
    struct anon_struct.conflict177 mic;
    struct anon_struct.conflict178 mfp;
};

typedef struct anon_struct.conflict98 anon_struct.conflict98, *Panon_struct.conflict98;

struct anon_struct.conflict98 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict97 anon_struct.conflict97, *Panon_struct.conflict97;

struct anon_struct.conflict97 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef union anon_union.conflict138 anon_union.conflict138, *Panon_union.conflict138;

typedef struct anon_struct.conflict169 anon_struct.conflict169, *Panon_struct.conflict169;

typedef struct anon_struct.conflict170 anon_struct.conflict170, *Panon_struct.conflict170;

struct anon_struct.conflict170 {
    uint32_t key[4];
};

struct anon_struct.conflict169 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

union anon_union.conflict138 {
    struct anon_struct.conflict169 mic;
    struct anon_struct.conflict170 mfp;
};

typedef struct anon_struct.conflict183 anon_struct.conflict183, *Panon_struct.conflict183;

struct anon_struct.conflict183 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef union anon_union.conflict96 anon_union.conflict96, *Panon_union.conflict96;

union anon_union.conflict96 {
    struct anon_struct.conflict120 mic;
    struct anon_struct.conflict121 mfp;
};

typedef struct anon_struct.conflict184 anon_struct.conflict184, *Panon_struct.conflict184;

struct anon_struct.conflict184 {
    uint32_t key[4];
};

typedef union anon_union.conflict133 anon_union.conflict133, *Panon_union.conflict133;

typedef struct anon_struct.conflict165 anon_struct.conflict165, *Panon_struct.conflict165;

typedef struct anon_struct.conflict166 anon_struct.conflict166, *Panon_struct.conflict166;

struct anon_struct.conflict166 {
    uint32_t key[4];
};

struct anon_struct.conflict165 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

union anon_union.conflict133 {
    struct anon_struct.conflict165 mic;
    struct anon_struct.conflict166 mfp;
};

typedef struct anon_struct.conflict87 anon_struct.conflict87, *Panon_struct.conflict87;

struct anon_struct.conflict87 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict80 anon_struct.conflict80, *Panon_struct.conflict80;

struct anon_struct.conflict80 {
    uint32_t key[4];
};

typedef union anon_union.conflict126 anon_union.conflict126, *Panon_union.conflict126;

typedef struct anon_struct.conflict157 anon_struct.conflict157, *Panon_struct.conflict157;

typedef struct anon_struct.conflict158 anon_struct.conflict158, *Panon_struct.conflict158;

struct anon_struct.conflict157 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

struct anon_struct.conflict158 {
    uint32_t key[4];
};

union anon_union.conflict126 {
    struct anon_struct.conflict157 mic;
    struct anon_struct.conflict158 mfp;
};

typedef struct anon_struct.conflict88 anon_struct.conflict88, *Panon_struct.conflict88;

struct anon_struct.conflict88 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict191 anon_struct.conflict191, *Panon_struct.conflict191;

struct anon_struct.conflict191 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict192 anon_struct.conflict192, *Panon_struct.conflict192;

struct anon_struct.conflict192 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict199 anon_struct.conflict199, *Panon_struct.conflict199;

struct anon_struct.conflict199 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict72 anon_struct.conflict72, *Panon_struct.conflict72;

struct anon_struct.conflict72 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict71 anon_struct.conflict71, *Panon_struct.conflict71;

struct anon_struct.conflict71 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict79 anon_struct.conflict79, *Panon_struct.conflict79;

struct anon_struct.conflict79 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef union anon_union.conflict119 anon_union.conflict119, *Panon_union.conflict119;

typedef struct anon_struct.conflict149 anon_struct.conflict149, *Panon_struct.conflict149;

typedef struct anon_struct.conflict150 anon_struct.conflict150, *Panon_struct.conflict150;

struct anon_struct.conflict150 {
    uint32_t key[4];
};

struct anon_struct.conflict149 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

union anon_union.conflict119 {
    struct anon_struct.conflict149 mic;
    struct anon_struct.conflict150 mfp;
};

typedef union anon_union.conflict111 anon_union.conflict111, *Panon_union.conflict111;

union anon_union.conflict111 {
    struct anon_struct.conflict131 mic;
    struct anon_struct.conflict132 mfp;
};

typedef struct anon_struct.conflict62 anon_struct.conflict62, *Panon_struct.conflict62;

struct anon_struct.conflict62 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict61 anon_struct.conflict61, *Panon_struct.conflict61;

struct anon_struct.conflict61 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef union anon_union.conflict106 anon_union.conflict106, *Panon_union.conflict106;

union anon_union.conflict106 {
    struct anon_struct.conflict127 mic;
    struct anon_struct.conflict128 mfp;
};

typedef struct anon_struct.conflict147 anon_struct.conflict147, *Panon_struct.conflict147;

struct anon_struct.conflict147 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict148 anon_struct.conflict148, *Panon_struct.conflict148;

struct anon_struct.conflict148 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict7 anon_struct.conflict7, *Panon_struct.conflict7;

struct anon_struct.conflict7 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict6 anon_struct.conflict6, *Panon_struct.conflict6;

struct anon_struct.conflict6 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict3 anon_struct.conflict3, *Panon_struct.conflict3;

struct anon_struct.conflict3 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict2 anon_struct.conflict2, *Panon_struct.conflict2;

struct anon_struct.conflict2 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict155 anon_struct.conflict155, *Panon_struct.conflict155;

struct anon_struct.conflict155 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict156 anon_struct.conflict156, *Panon_struct.conflict156;

struct anon_struct.conflict156 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict163 anon_struct.conflict163, *Panon_struct.conflict163;

struct anon_struct.conflict163 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict164 anon_struct.conflict164, *Panon_struct.conflict164;

struct anon_struct.conflict164 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict167 anon_struct.conflict167, *Panon_struct.conflict167;

struct anon_struct.conflict167 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict168 anon_struct.conflict168, *Panon_struct.conflict168;

struct anon_struct.conflict168 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict175 anon_struct.conflict175, *Panon_struct.conflict175;

struct anon_struct.conflict175 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict176 anon_struct.conflict176, *Panon_struct.conflict176;

struct anon_struct.conflict176 {
    uint32_t key[4];
};

typedef struct _uart_ioctrl_wait_read _uart_ioctrl_wait_read, *P_uart_ioctrl_wait_read;

struct _uart_ioctrl_wait_read {
    char * buf;
    int read_size;
    uint32_t timeout;
};

typedef struct _uart_ioctrl_config _uart_ioctrl_config, *P_uart_ioctrl_config;

typedef struct _uart_ioctrl_config uart_ioc_config_t;

typedef enum ioc_uart_parity_t {
    IO_UART_PARITY_EVEN=2,
    IO_UART_PARITY_NONE=0,
    IO_UART_PARITY_ODD=1
} ioc_uart_parity_t;

struct _uart_ioctrl_config {
    uint32_t baud;
    enum ioc_uart_parity_t parity;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct _uart_ioctrl_wait_read uart_ioc_waitread_t;

typedef struct anon_struct.conflict371 anon_struct.conflict371, *Panon_struct.conflict371;

struct anon_struct.conflict371 {
    uint8_t partition_active_idx;
    uint8_t pad[3];
    struct PtTable_Stuff_Config table;
};

typedef struct HALPartition_Entry_Config HALPartition_Entry_Config, *PHALPartition_Entry_Config;

struct HALPartition_Entry_Config {
    uint8_t type;
    uint8_t device;
    uint8_t activeIndex;
    uint8_t name[9];
    uint32_t Address[2];
    uint32_t maxLen[2];
    uint32_t len;
    uint32_t age;
};

typedef enum HAL_Err_Type {
    HAL_ERROR=1,
    HAL_SUCCESS=0
} HAL_Err_Type;

typedef struct NoHostSecurityParams_t NoHostSecurityParams_t, *PNoHostSecurityParams_t;

struct NoHostSecurityParams_t {
    UINT8 CipherType;
    UINT8 MulticastCipher;
    UINT8 UnicastCipher;
    char PSKPassPhrase[64];
};

typedef struct phy_hal_tag phy_hal_tag, *Pphy_hal_tag;

struct phy_hal_tag {
    int16_t temperature;
    uint8_t capcode;
    undefined field_0x3;
};

typedef struct anon_struct.conflict402 anon_struct.conflict402, *Panon_struct.conflict402;

struct anon_struct.conflict402 {
    void * handle;
    int fd;
};

typedef struct event_list_node_t event_list_node_t, *Pevent_list_node_t;

struct event_list_node_t {
    dlist_t node;
    void (* cb)(struct input_event_t *, void *);
    void * priv;
    uint16_t type_filter;
    undefined field_0x12;
    undefined field_0x13;
};

typedef struct Bl_MD5_CTX Bl_MD5_CTX, *PBl_MD5_CTX;

struct Bl_MD5_CTX {
    ulong state[4];
    ulong count[2];
    ulong scratch[16];
    uchar buffer[64];
};

typedef struct mbedtls_md5_context mbedtls_md5_context, *Pmbedtls_md5_context;

struct mbedtls_md5_context {
    uint32_t total[2];
    uint32_t state[4];
    uchar buffer[64];
};

typedef struct input_t input_t, *Pinput_t;

struct input_t {
    int8_t rssi;
    int8_t lna;
    undefined field_0x2;
    undefined field_0x3;
    float ppm;
    uint8_t new;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
};

typedef struct pa_state_t pa_state_t, *Ppa_state_t;

struct pa_state_t {
    uint8_t used;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    uint32_t vif_tag;
    struct input_t input_buffer[8];
    int8_t input_buffer_ptr;
    undefined field_0x69;
    undefined field_0x6a;
    undefined field_0x6b;
    uint32_t last_update;
    int8_t rss;
    int8_t rss_acq;
    int8_t rss_trk;
    int8_t rss_state;
    uint8_t rss_hit_count;
    undefined field_0x75;
    undefined field_0x76;
    undefined field_0x77;
    uint32_t rss_count;
    int8_t ris;
    undefined field_0x7d;
    undefined field_0x7e;
    undefined field_0x7f;
    float ce;
    int8_t ce_in;
    int8_t ce_acq;
    int8_t ce_trk;
    int8_t ce_state;
    int8_t ce_num_up_cmds;
    int8_t ce_num_dn_cmds;
    undefined field_0x8a;
    undefined field_0x8b;
};

typedef struct rvec_t rvec_t, *Prvec_t;

struct rvec_t {
    uint32_t leg_length:12;
    uint32_t leg_rate:4;
    uint32_t ht_length:16;
    uint32_t _ht_length:4;
    uint32_t short_gi:1;
    uint32_t stbc:2;
    uint32_t smoothing:1;
    uint32_t mcs:7;
    uint32_t pre_type:1;
    uint32_t format_mod:3;
    uint32_t ch_bw:2;
    uint32_t n_sts:3;
    uint32_t lsig_valid:1;
    uint32_t sounding:1;
    uint32_t num_extn_ss:2;
    uint32_t aggregation:1;
    uint32_t fec_coding:1;
    uint32_t dyn_bw:1;
    uint32_t doze_not_allowed:1;
    uint32_t antenna_set:8;
    uint32_t partial_aid:9;
    uint32_t group_id:6;
    uint32_t reserved_1c:1;
    int32_t rssi1:8;
    int32_t rssi2:8;
    int32_t agc_lna:4;
    int32_t agc_rbb1:5;
    int32_t agc_dg:7;
    uint32_t reserved_1d:8;
    uint32_t rcpi:8;
    uint32_t evm1:8;
    uint32_t evm2:8;
    uint32_t freqoff_lo:8;
    uint32_t freqoff_hi:8;
    uint32_t reserved2b_1:8;
    uint32_t reserved2b_2:8;
    uint32_t reserved2b_3:8;
};

typedef struct sm_env_tag sm_env_tag, *Psm_env_tag;

struct sm_env_tag {
    struct sm_connect_req * connect_param;
    struct sm_connect_ind * connect_ind;
    struct co_list bss_config;
    _Bool join_passive;
    _Bool ft_over_ds;
    undefined field_0x12;
    undefined field_0x13;
    int exist_ssid_idx;
    struct mac_addr ft_old_bssid;
    undefined field_0x1e;
    undefined field_0x1f;
};

typedef struct utils_memp_node utils_memp_node, *Putils_memp_node;

struct utils_memp_node {
    struct utils_memp_node * next;
};

typedef struct pool pool, *Ppool;

typedef struct pool utils_memp_pool_t;

struct pool {
    uint32_t node_size;
    uint32_t pool_cap;
    uint32_t pool_size;
    uint8_t align_req;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t padded_node_size;
    void * first_node;
    void * last_node;
    struct utils_memp_node * mem;
};

typedef struct ke_timer ke_timer, *Pke_timer;

struct ke_timer {
    struct ke_timer * next;
    ke_msg_id_t id;
    ke_task_id_t task;
    uint32_t time;
};

typedef struct anon_struct.conflict372 anon_struct.conflict372, *Panon_struct.conflict372;

struct anon_struct.conflict372 {
    uint32_t magic;
    struct SPI_Flash_Cfg_Type flashCfg;
};

typedef struct igmp_msg igmp_msg, *Pigmp_msg;

struct igmp_msg {
    u8_t igmp_msgtype;
    u8_t igmp_maxresp;
    u16_t igmp_checksum;
    ip4_addr_p_t igmp_group_address;
};

typedef struct igmp_group igmp_group, *Pigmp_group;

struct igmp_group {
    struct igmp_group * next;
    ip4_addr_t group_address;
    u8_t last_reporter_flag;
    u8_t group_state;
    u16_t timer;
    u8_t use;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
};

typedef struct env_hdr_data env_hdr_data, *Penv_hdr_data;

typedef struct env_hdr_data * env_hdr_data_t;

struct env_hdr_data {
    uint8_t status_table[5];
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t magic;
    uint32_t len;
    uint32_t crc32;
    uint8_t name_len;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
    uint32_t value_len;
};

typedef enum sector_dirty_status {
    SECTOR_DIRTY_FALSE=1,
    SECTOR_DIRTY_GC=3,
    SECTOR_DIRTY_STATUS_NUM=4,
    SECTOR_DIRTY_TRUE=2,
    SECTOR_DIRTY_UNUSED=0
} sector_dirty_status;

typedef enum sector_dirty_status sector_dirty_status_t;

typedef struct sector_cache_node sector_cache_node, *Psector_cache_node;

struct sector_cache_node {
    uint32_t addr;
    uint32_t empty_addr;
};

typedef struct anon_struct.conflict369 anon_struct.conflict369, *Panon_struct.conflict369;

struct anon_struct.conflict369 {
    uint8_t store[3];
    uint8_t dirty[3];
};

typedef struct sector_meta_data sector_meta_data, *Psector_meta_data;

typedef struct sector_meta_data * sector_meta_data_t;

typedef struct anon_struct_for_status anon_struct_for_status, *Panon_struct_for_status;

typedef enum sector_store_status {
    SECTOR_STORE_EMPTY=1,
    SECTOR_STORE_FULL=3,
    SECTOR_STORE_STATUS_NUM=4,
    SECTOR_STORE_UNUSED=0,
    SECTOR_STORE_USING=2
} sector_store_status;

typedef enum sector_store_status sector_store_status_t;

struct anon_struct_for_status {
    sector_store_status_t store;
    sector_dirty_status_t dirty;
};

struct sector_meta_data {
    _Bool check_ok;
    struct anon_struct_for_status status;
    undefined field_0x3;
    uint32_t addr;
    uint32_t magic;
    uint32_t combined;
    size_t remain;
    uint32_t empty_env;
};

typedef struct anon_struct.conflict370 anon_struct.conflict370, *Panon_struct.conflict370;

struct anon_struct.conflict370 {
    sector_store_status_t store;
    sector_dirty_status_t dirty;
};

typedef struct env_cache_node env_cache_node, *Penv_cache_node;

struct env_cache_node {
    uint16_t name_crc;
    uint16_t active;
    uint32_t addr;
};

typedef struct sector_hdr_data sector_hdr_data, *Psector_hdr_data;

typedef struct anon_struct_for_status_table anon_struct_for_status_table, *Panon_struct_for_status_table;

struct anon_struct_for_status_table {
    uint8_t store[3];
    uint8_t dirty[3];
};

struct sector_hdr_data {
    struct anon_struct_for_status_table status_table;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t magic;
    uint32_t combined;
    uint32_t reserved;
};

typedef struct uart_priv_data uart_priv_data, *Puart_priv_data;

typedef struct uart_priv_data uart_priv_data_t;

struct uart_priv_data {
    aos_mutex_t mutex;
};

typedef struct _feature_pin _feature_pin, *P_feature_pin;

struct _feature_pin {
    char * featue_name;
    char * pin_name;
    uint8_t value;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
};

typedef struct bl_uart_notify bl_uart_notify, *Pbl_uart_notify;

struct bl_uart_notify {
    void (* rx_cb)(void *);
    void * rx_cb_arg;
    void (* tx_cb)(void *);
    void * tx_cb_arg;
};

typedef struct bl_uart_notify bl_uart_notify_t;

typedef struct apm_start_cac_req apm_start_cac_req, *Papm_start_cac_req;

struct apm_start_cac_req {
    struct scan_chan_tag chan;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t center_freq1;
    uint32_t center_freq2;
    uint8_t ch_width;
    uint8_t vif_idx;
    undefined field_0x12;
    undefined field_0x13;
};

typedef struct apm_start_cfm apm_start_cfm, *Papm_start_cfm;

struct apm_start_cfm {
    uint8_t status;
    uint8_t vif_idx;
    uint8_t ch_idx;
    uint8_t bcmc_idx;
};

typedef struct apm_sta_del_cfm apm_sta_del_cfm, *Papm_sta_del_cfm;

struct apm_sta_del_cfm {
    uint8_t status;
    uint8_t vif_idx;
    uint8_t sta_idx;
};

typedef struct apm_stop_req apm_stop_req, *Papm_stop_req;

struct apm_stop_req {
    uint8_t vif_idx;
};

typedef struct apm_sta_del_ind apm_sta_del_ind, *Papm_sta_del_ind;

struct apm_sta_del_ind {
    uint8_t sta_idx;
};

typedef enum apm_msg_tag {
    APM_CONF_MAX_STA_CFM=7182,
    APM_CONF_MAX_STA_REQ=7181,
    APM_MAX=7183,
    APM_START_CAC_CFM=7173,
    APM_START_CAC_REQ=7172,
    APM_START_CFM=7169,
    APM_START_REQ=7168,
    APM_STA_ADD_IND=7176,
    APM_STA_CONNECT_TIMEOUT_IND=7178,
    APM_STA_DEL_CFM=7180,
    APM_STA_DEL_IND=7177,
    APM_STA_DEL_REQ=7179,
    APM_STOP_CAC_CFM=7175,
    APM_STOP_CAC_REQ=7174,
    APM_STOP_CFM=7171,
    APM_STOP_REQ=7170
} apm_msg_tag;

typedef enum apm_state_tag {
    APM_BCN_SETTING=2,
    APM_BSS_PARAM_SETTING=1,
    APM_IDLE=0,
    APM_STATE_MAX=3
} apm_state_tag;

typedef struct apm_start_cac_cfm apm_start_cac_cfm, *Papm_start_cac_cfm;

struct apm_start_cac_cfm {
    uint8_t status;
    uint8_t ch_idx;
};

typedef struct apm_stop_cac_req apm_stop_cac_req, *Papm_stop_cac_req;

struct apm_stop_cac_req {
    uint8_t vif_idx;
};

typedef struct apm_conf_max_sta_req apm_conf_max_sta_req, *Papm_conf_max_sta_req;

struct apm_conf_max_sta_req {
    uint8_t max_sta_supported;
};

typedef struct apm_sta_del_req apm_sta_del_req, *Papm_sta_del_req;

struct apm_sta_del_req {
    uint8_t vif_idx;
    uint8_t sta_idx;
};

typedef struct apm_sta_add_ind apm_sta_add_ind, *Papm_sta_add_ind;

struct apm_sta_add_ind {
    uint32_t flags;
    struct mac_addr sta_addr;
    uint8_t vif_idx;
    uint8_t sta_idx;
    int8_t rssi;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t tsflo;
    uint32_t tsfhi;
    uint8_t data_rate;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
};

typedef struct UART_CFG_Type UART_CFG_Type, *PUART_CFG_Type;

typedef enum UART_DataBits_Type {
    UART_DATABITS_5=0,
    UART_DATABITS_6=1,
    UART_DATABITS_7=2,
    UART_DATABITS_8=3
} UART_DataBits_Type;

typedef enum UART_StopBits_Type {
    UART_STOPBITS_1=0,
    UART_STOPBITS_1_5=1,
    UART_STOPBITS_2=2
} UART_StopBits_Type;

typedef enum UART_Parity_Type {
    UART_PARITY_EVEN=2,
    UART_PARITY_NONE=0,
    UART_PARITY_ODD=1
} UART_Parity_Type;

typedef enum UART_ByteBitInverse_Type {
    UART_LSB_FIRST=0,
    UART_MSB_FIRST=1
} UART_ByteBitInverse_Type;

struct UART_CFG_Type {
    uint32_t uartClk;
    uint32_t baudRate;
    enum UART_DataBits_Type dataBits;
    enum UART_StopBits_Type stopBits;
    enum UART_Parity_Type parity;
    enum BL_Fun_Type ctsFlowControl;
    enum BL_Fun_Type rxDeglitch;
    enum BL_Fun_Type rtsSoftwareControl;
    enum UART_ByteBitInverse_Type byteBitInverse;
    undefined field_0xf;
};

typedef struct UART_FifoCfg_Type UART_FifoCfg_Type, *PUART_FifoCfg_Type;

struct UART_FifoCfg_Type {
    uint8_t txFifoDmaThreshold;
    uint8_t rxFifoDmaThreshold;
    enum BL_Fun_Type txFifoDmaEnable;
    enum BL_Fun_Type rxFifoDmaEnable;
};

typedef enum UART_ID_Type {
    UART0_ID=0,
    UART1_ID=1,
    UART_ID_MAX=2
} UART_ID_Type;

typedef enum UART_AutoBaudDetection_Type {
    UART_AUTOBAUD_0X55=0,
    UART_AUTOBAUD_STARTBIT=1
} UART_AutoBaudDetection_Type;

typedef enum UART_Direction_Type {
    UART_RX=1,
    UART_TX=0,
    UART_TXRX=2
} UART_Direction_Type;

typedef enum UART_Overflow_Type {
    UART_RX_OVERFLOW=2,
    UART_RX_UNDERFLOW=3,
    UART_TX_OVERFLOW=0,
    UART_TX_UNDERFLOW=1
} UART_Overflow_Type;

typedef struct UART_IrCfg_Type UART_IrCfg_Type, *PUART_IrCfg_Type;

struct UART_IrCfg_Type {
    enum BL_Fun_Type txIrEnable;
    enum BL_Fun_Type rxIrEnable;
    enum BL_Fun_Type txIrInverse;
    enum BL_Fun_Type rxIrInverse;
    uint16_t txIrPulseStart;
    uint16_t txIrPulseStop;
    uint16_t rxIrPulseStart;
};

typedef enum UART_INT_Type {
    UART_INT_ALL=8,
    UART_INT_PCE=5,
    UART_INT_RTO=4,
    UART_INT_RX_END=1,
    UART_INT_RX_FER=7,
    UART_INT_RX_FIFO_REQ=3,
    UART_INT_TX_END=0,
    UART_INT_TX_FER=6,
    UART_INT_TX_FIFO_REQ=2
} UART_INT_Type;

typedef struct ethhdr ethhdr, *Pethhdr;

struct ethhdr {
    uchar h_dest[6];
    uchar h_source[6];
    __be16 h_proto;
};

typedef struct anon_struct.conflict343 anon_struct.conflict343, *Panon_struct.conflict343;

struct anon_struct.conflict343 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

typedef struct anon_struct.conflict229 anon_struct.conflict229, *Panon_struct.conflict229;

struct anon_struct.conflict229 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

typedef struct anon_struct.conflict308 anon_struct.conflict308, *Panon_struct.conflict308;

struct anon_struct.conflict308 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

typedef struct anon_struct.conflict230 anon_struct.conflict230, *Panon_struct.conflict230;

struct anon_struct.conflict230 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

typedef struct anon_struct.conflict312 anon_struct.conflict312, *Panon_struct.conflict312;

struct anon_struct.conflict312 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

typedef enum ieee80211_vht_mcs_support {
    IEEE80211_VHT_MCS_NOT_SUPPORTED=3,
    IEEE80211_VHT_MCS_SUPPORT_0_7=0,
    IEEE80211_VHT_MCS_SUPPORT_0_8=1,
    IEEE80211_VHT_MCS_SUPPORT_0_9=2
} ieee80211_vht_mcs_support;

typedef struct anon_struct.conflict231 anon_struct.conflict231, *Panon_struct.conflict231;

struct anon_struct.conflict231 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

typedef struct anon_struct.conflict232 anon_struct.conflict232, *Panon_struct.conflict232;

struct anon_struct.conflict232 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

typedef struct anon_struct.conflict360 anon_struct.conflict360, *Panon_struct.conflict360;

struct anon_struct.conflict360 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

typedef struct anon_struct.conflict240 anon_struct.conflict240, *Panon_struct.conflict240;

struct anon_struct.conflict240 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

typedef struct anon_struct.conflict361 anon_struct.conflict361, *Panon_struct.conflict361;

struct anon_struct.conflict361 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

typedef struct anon_struct.conflict241 anon_struct.conflict241, *Panon_struct.conflict241;

struct anon_struct.conflict241 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

typedef struct anon_struct.conflict242 anon_struct.conflict242, *Panon_struct.conflict242;

struct anon_struct.conflict242 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

typedef struct anon_struct.conflict363 anon_struct.conflict363, *Panon_struct.conflict363;

struct anon_struct.conflict363 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

typedef struct anon_struct.conflict243 anon_struct.conflict243, *Panon_struct.conflict243;

struct anon_struct.conflict243 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

typedef union anon_union.conflict190 anon_union.conflict190, *Panon_union.conflict190;

union anon_union.conflict190 {
    struct anon_struct.conflict288 auth;
    struct anon_struct.conflict289 deauth;
    struct anon_struct.conflict290 assoc_req;
    struct anon_struct.conflict291 assoc_resp;
    struct anon_struct.conflict292 reassoc_resp;
    struct anon_struct.conflict293 reassoc_req;
    struct anon_struct.conflict294 disassoc;
    struct anon_struct.conflict295 beacon;
    struct anon_struct probe_req;
    struct anon_struct.conflict296 probe_resp;
};

typedef union anon_union.conflict186 anon_union.conflict186, *Panon_union.conflict186;

union anon_union.conflict186 {
    struct anon_struct.conflict226 sta;
    struct anon_struct.conflict241 ap;
    struct anon_struct.conflict228 ap_vlan;
};

typedef union anon_union.conflict183 anon_union.conflict183, *Panon_union.conflict183;

union anon_union.conflict183 {
    struct anon_struct.conflict226 sta;
    struct anon_struct.conflict230 ap;
    struct anon_struct.conflict228 ap_vlan;
};

typedef union anon_union.conflict184 anon_union.conflict184, *Panon_union.conflict184;

union anon_union.conflict184 {
    struct anon_struct.conflict226 sta;
    struct anon_struct.conflict232 ap;
    struct anon_struct.conflict228 ap_vlan;
};

typedef union anon_union.conflict187 anon_union.conflict187, *Panon_union.conflict187;

union anon_union.conflict187 {
    struct anon_struct.conflict226 sta;
    struct anon_struct.conflict243 ap;
    struct anon_struct.conflict228 ap_vlan;
};

typedef struct txl_frame_desc_tag txl_frame_desc_tag, *Ptxl_frame_desc_tag;

typedef struct txl_frame_cfm_tag txl_frame_cfm_tag, *Ptxl_frame_cfm_tag;

struct txl_frame_cfm_tag {
    void (* cfm_func)(void *, uint32_t);
    void * env;
};

struct txl_frame_desc_tag {
    struct txdesc txdesc;
    struct txl_frame_cfm_tag cfm;
    uint8_t type;
    _Bool postponed;
    _Bool keep_desc;
    undefined field_0x2d7;
};

typedef struct txl_frame_env_tag txl_frame_env_tag, *Ptxl_frame_env_tag;

struct txl_frame_env_tag {
    struct co_list desc_free;
    struct co_list desc_done;
};

typedef enum icmp_dur_type {
    ICMP_DUR_FRAG=4,
    ICMP_DUR_HOST=1,
    ICMP_DUR_NET=0,
    ICMP_DUR_PORT=3,
    ICMP_DUR_PROTO=2,
    ICMP_DUR_SR=5
} icmp_dur_type;

typedef struct icmp_echo_hdr icmp_echo_hdr, *Picmp_echo_hdr;

struct icmp_echo_hdr {
    u8_t type;
    u8_t code;
    u16_t chksum;
    u16_t id;
    u16_t seqno;
};

typedef struct fdt_property fdt_property, *Pfdt_property;

struct fdt_property {
    fdt32_t tag;
    fdt32_t len;
    fdt32_t nameoff;
    char[0] data;
};

typedef struct fdt_reserve_entry fdt_reserve_entry, *Pfdt_reserve_entry;

struct fdt_reserve_entry {
    fdt64_t address;
    fdt64_t size;
};

typedef struct fdt_node_header fdt_node_header, *Pfdt_node_header;

struct fdt_node_header {
    fdt32_t tag;
    char[0] name;
};

typedef struct fdt_header fdt_header, *Pfdt_header;

struct fdt_header {
    fdt32_t magic;
    fdt32_t totalsize;
    fdt32_t off_dt_struct;
    fdt32_t off_dt_strings;
    fdt32_t off_mem_rsvmap;
    fdt32_t version;
    fdt32_t last_comp_version;
    fdt32_t boot_cpuid_phys;
    fdt32_t size_dt_strings;
    fdt32_t size_dt_struct;
};

typedef struct mbedtls_rsa_context mbedtls_rsa_context, *Pmbedtls_rsa_context;

struct mbedtls_rsa_context {
    int ver;
    size_t len;
    struct mbedtls_mpi N;
    struct mbedtls_mpi E;
    struct mbedtls_mpi D;
    struct mbedtls_mpi P;
    struct mbedtls_mpi Q;
    struct mbedtls_mpi DP;
    struct mbedtls_mpi DQ;
    struct mbedtls_mpi QP;
    struct mbedtls_mpi RN;
    struct mbedtls_mpi RP;
    struct mbedtls_mpi RQ;
    struct mbedtls_mpi Vi;
    struct mbedtls_mpi Vf;
    int padding;
    int hash_id;
};

typedef struct anon_struct.conflict223 anon_struct.conflict223, *Panon_struct.conflict223;

struct anon_struct.conflict223 {
    uint32_t task;
    uint32_t element;
    uint32_t type;
    uint32_t length;
    uint32_t[0] buf;
};

typedef struct anon_struct.conflict221 anon_struct.conflict221, *Panon_struct.conflict221;

struct anon_struct.conflict221 {
    uint32_t task;
    uint32_t element;
};

typedef struct anon_struct.conflict217 anon_struct.conflict217, *Panon_struct.conflict217;

struct anon_struct.conflict217 {
    uint32_t task;
    uint32_t element;
    uint32_t length;
    uint32_t[0] buf;
};

typedef struct anon_struct.conflict218 anon_struct.conflict218, *Panon_struct.conflict218;

struct anon_struct.conflict218 {
    uint32_t task;
    uint32_t element;
};

typedef struct anon_struct.conflict219 anon_struct.conflict219, *Panon_struct.conflict219;

struct anon_struct.conflict219 {
    uint32_t task;
    uint32_t element;
};

typedef struct cfg_start_req cfg_start_req, *Pcfg_start_req;

struct cfg_start_req { // Missing member u : anon_union_for_u at offset 0x4 [exceeds parent struct len]
    uint32_t ops;
};

typedef struct cfg_start_cfm cfg_start_cfm, *Pcfg_start_cfm;

struct cfg_start_cfm {
    uint8_t status;
};

typedef struct anon_struct.conflict220 anon_struct.conflict220, *Panon_struct.conflict220;

struct anon_struct.conflict220 {
    uint32_t task;
    uint32_t element;
    uint32_t type;
    uint32_t length;
    uint32_t[0] buf;
};

typedef struct anon_struct.conflict222 anon_struct.conflict222, *Panon_struct.conflict222;

struct anon_struct.conflict222 {
    uint32_t task;
    uint32_t element;
};

typedef enum cfg_msg_tag {
    CFG_MAX=12290,
    CFG_START_CFM=12289,
    CFG_START_REQ=12288
} cfg_msg_tag;

typedef enum cfg_state_tag {
    CFG_IDLE=0,
    CFG_STATE_MAX=1
} cfg_state_tag;

typedef struct anon_struct.conflict117 anon_struct.conflict117, *Panon_struct.conflict117;

struct anon_struct.conflict117 {
    uint32_t task;
    uint32_t element;
    uint32_t length;
    uint32_t[0] buf;
};

typedef union anon_union.conflict181 anon_union.conflict181, *Panon_union.conflict181;

union anon_union.conflict181 {
    undefined1 get; // Data type larger than union's declared size: anon_struct[1]
    undefined1 reset; // Data type larger than union's declared size: anon_struct[1]
    undefined1 set; // Data type larger than union's declared size: anon_struct[1]
};

typedef union tcp_listen_pcbs_t tcp_listen_pcbs_t, *Ptcp_listen_pcbs_t;

union tcp_listen_pcbs_t {
    struct tcp_pcb_listen * listen_pcbs;
    struct tcp_pcb * pcbs;
};

typedef union anon_union.conflict10 anon_union.conflict10, *Panon_union.conflict10;

union anon_union.conflict10 {
    uint32 Interface;
    struct cm_ConnectionInfo * connPtr;
};

typedef struct TIMER_CFG_Type TIMER_CFG_Type, *PTIMER_CFG_Type;

typedef enum TIMER_Chan_Type {
    TIMER_CH0=0,
    TIMER_CH1=1,
    TIMER_CH_MAX=2
} TIMER_Chan_Type;

typedef enum TIMER_ClkSrc_Type {
    TIMER_CLKSRC_1K=2,
    TIMER_CLKSRC_32K=1,
    TIMER_CLKSRC_FCLK=0,
    TIMER_CLKSRC_XTAL=3
} TIMER_ClkSrc_Type;

typedef enum TIMER_PreLoad_Trig_Type {
    TIMER_PRELOAD_TRIG_COMP0=1,
    TIMER_PRELOAD_TRIG_COMP1=2,
    TIMER_PRELOAD_TRIG_COMP2=3,
    TIMER_PRELOAD_TRIG_NONE=0
} TIMER_PreLoad_Trig_Type;

typedef enum TIMER_CountMode_Type {
    TIMER_COUNT_FREERUN=1,
    TIMER_COUNT_PRELOAD=0
} TIMER_CountMode_Type;

struct TIMER_CFG_Type {
    enum TIMER_Chan_Type timerCh;
    enum TIMER_ClkSrc_Type clkSrc;
    enum TIMER_PreLoad_Trig_Type plTrigSrc;
    enum TIMER_CountMode_Type countMode;
    uint8_t clockDivision;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t matchVal0;
    uint32_t matchVal1;
    uint32_t matchVal2;
    uint32_t preLoadVal;
};

typedef enum WDT_INT_Type {
    WDT_INT=0,
    WDT_INT_ALL=1
} WDT_INT_Type;

typedef enum TIMER_INT_Type {
    TIMER_INT_ALL=3,
    TIMER_INT_COMP_0=0,
    TIMER_INT_COMP_1=1,
    TIMER_INT_COMP_2=2
} TIMER_INT_Type;

typedef enum TIMER_Comp_ID_Type {
    TIMER_COMP_ID_0=0,
    TIMER_COMP_ID_1=1,
    TIMER_COMP_ID_2=2
} TIMER_Comp_ID_Type;

typedef struct DMA_LLI_Ctrl_Type DMA_LLI_Ctrl_Type, *PDMA_LLI_Ctrl_Type;

typedef struct DMA_Control_Reg.conflict DMA_Control_Reg.conflict, *PDMA_Control_Reg.conflict;

struct DMA_Control_Reg.conflict {
    uint32_t TransferSize:12;
    uint32_t SBSize:3;
    uint32_t DBSize:3;
    uint32_t SWidth:3;
    uint32_t DWidth:3;
    uint32_t SLargerD:1;
    uint32_t reserved_25:1;
    uint32_t SI:1;
    uint32_t DI:1;
    uint32_t Prot:3;
    uint32_t I:1;
};

struct DMA_LLI_Ctrl_Type {
    uint32_t srcDmaAddr;
    uint32_t destDmaAddr;
    uint32_t nextLLI;
    struct DMA_Control_Reg.conflict dmaCtrl;
};

typedef enum DMA_Trans_Dir_Type {
    DMA_TRNS_M2M=0,
    DMA_TRNS_M2P=1,
    DMA_TRNS_P2M=2,
    DMA_TRNS_P2P=3
} DMA_Trans_Dir_Type;

typedef enum DMA_Burst_Size_Type {
    DMA_BURST_SIZE_1=0,
    DMA_BURST_SIZE_16=3,
    DMA_BURST_SIZE_4=1,
    DMA_BURST_SIZE_8=2
} DMA_Burst_Size_Type;

typedef struct DMA_LLI_Ctrl_Type.conflict DMA_LLI_Ctrl_Type.conflict, *PDMA_LLI_Ctrl_Type.conflict;

typedef struct DMA_Control_Reg.conflict1 DMA_Control_Reg.conflict1, *PDMA_Control_Reg.conflict1;

struct DMA_Control_Reg.conflict1 {
    uint32_t TransferSize:12;
    uint32_t SBSize:3;
    uint32_t DBSize:3;
    uint32_t SWidth:3;
    uint32_t DWidth:3;
    uint32_t SLargerD:1;
    uint32_t reserved_25:1;
    uint32_t SI:1;
    uint32_t DI:1;
    uint32_t Prot:3;
    uint32_t I:1;
};

struct DMA_LLI_Ctrl_Type.conflict {
    uint32_t srcDmaAddr;
    uint32_t destDmaAddr;
    uint32_t nextLLI;
    struct DMA_Control_Reg.conflict1 dmaCtrl;
};

typedef struct DMA_LLI_Ctrl_Type.conflict1 DMA_LLI_Ctrl_Type.conflict1, *PDMA_LLI_Ctrl_Type.conflict1;

typedef struct DMA_Control_Reg.conflict2 DMA_Control_Reg.conflict2, *PDMA_Control_Reg.conflict2;

struct DMA_Control_Reg.conflict2 {
    uint32_t TransferSize:12;
    uint32_t SBSize:3;
    uint32_t DBSize:3;
    uint32_t SWidth:3;
    uint32_t DWidth:3;
    uint32_t SLargerD:1;
    uint32_t reserved_25:1;
    uint32_t SI:1;
    uint32_t DI:1;
    uint32_t Prot:3;
    uint32_t I:1;
};

struct DMA_LLI_Ctrl_Type.conflict1 {
    uint32_t srcDmaAddr;
    uint32_t destDmaAddr;
    uint32_t nextLLI;
    struct DMA_Control_Reg.conflict2 dmaCtrl;
};

typedef enum DMA_Chan_Type {
    DMA_CH0=0,
    DMA_CH1=1,
    DMA_CH2=2,
    DMA_CH3=3,
    DMA_CH_MAX=4
} DMA_Chan_Type;

typedef struct DMA_LLI_PP_Buf DMA_LLI_PP_Buf, *PDMA_LLI_PP_Buf;

struct DMA_LLI_PP_Buf {
    uint8_t idleIndex;
    uint8_t dmaChan;
    undefined field_0x2;
    undefined field_0x3;
    struct DMA_LLI_Ctrl_Type * lliListHeader[2];
    void (* onTransCompleted)(struct DMA_LLI_Ctrl_Type *);
};

typedef struct DMA_LLI_PP_Struct DMA_LLI_PP_Struct, *PDMA_LLI_PP_Struct;

typedef struct DMA_Control_Reg DMA_Control_Reg, *PDMA_Control_Reg;

typedef struct DMA_LLI_Cfg_Type DMA_LLI_Cfg_Type, *PDMA_LLI_Cfg_Type;

typedef enum DMA_Periph_Req_Type {
    DMA_REQ_GPADC0=22,
    DMA_REQ_GPADC1=23,
    DMA_REQ_I2C_RX=6,
    DMA_REQ_I2C_TX=7,
    DMA_REQ_NONE=0,
    DMA_REQ_SPI_RX=10,
    DMA_REQ_SPI_TX=11,
    DMA_REQ_UART0_RX=0,
    DMA_REQ_UART0_TX=1,
    DMA_REQ_UART1_RX=2,
    DMA_REQ_UART1_TX=3
} DMA_Periph_Req_Type;

struct DMA_LLI_Cfg_Type {
    enum DMA_Trans_Dir_Type dir;
    enum DMA_Periph_Req_Type srcPeriph;
    enum DMA_Periph_Req_Type dstPeriph;
};

struct DMA_Control_Reg {
    uint32_t TransferSize:12;
    uint32_t SBSize:3;
    uint32_t DBSize:3;
    uint32_t SWidth:3;
    uint32_t DWidth:3;
    uint32_t SLargerD:1;
    uint32_t reserved_25:1;
    uint32_t SI:1;
    uint32_t DI:1;
    uint32_t Prot:3;
    uint32_t I:1;
};

struct DMA_LLI_PP_Struct {
    uint8_t trans_index;
    uint8_t dmaChan;
    undefined field_0x2;
    undefined field_0x3;
    struct DMA_Control_Reg dmaCtrlRegVal;
    struct DMA_LLI_Cfg_Type * DMA_LLI_Cfg;
    uint32_t operatePeriphAddr;
    uint32_t chache_buf_addr[2];
    enum BL_Fun_Type is_single_mode;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
};

typedef enum DMA_INT_Type {
    DMA_INT_ALL=2,
    DMA_INT_ERR=1,
    DMA_INT_TCOMPLETED=0
} DMA_INT_Type;

typedef struct DMA_Channel_Cfg_Type DMA_Channel_Cfg_Type, *PDMA_Channel_Cfg_Type;

typedef enum DMA_Trans_Width_Type {
    DMA_TRNS_WIDTH_16BITS=1,
    DMA_TRNS_WIDTH_32BITS=2,
    DMA_TRNS_WIDTH_8BITS=0
} DMA_Trans_Width_Type;

struct DMA_Channel_Cfg_Type {
    uint32_t srcDmaAddr;
    uint32_t destDmaAddr;
    uint32_t transfLength;
    enum DMA_Trans_Dir_Type dir;
    enum DMA_Chan_Type ch;
    enum DMA_Trans_Width_Type srcTransfWidth;
    enum DMA_Trans_Width_Type dstTransfWidth;
    enum DMA_Burst_Size_Type srcBurstSzie;
    enum DMA_Burst_Size_Type dstBurstSzie;
    uint8_t srcAddrInc;
    uint8_t destAddrInc;
    enum DMA_Periph_Req_Type srcPeriph;
    enum DMA_Periph_Req_Type dstPeriph;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct anon_struct.conflict415 anon_struct.conflict415, *Panon_struct.conflict415;

struct anon_struct.conflict415 {
    uint frac:23;
    uint exp:8;
    uint sign:1;
};

typedef union _FP_UNION_S _FP_UNION_S, *P_FP_UNION_S;

union _FP_UNION_S {
    SFtype flt;
    struct anon_struct.conflict415 bits;
};

typedef SemaphoreHandle_t sys_mutex_t;

typedef TaskHandle_t sys_thread_t;

typedef enum BL_Sts_Type {
    RESET=0,
    SET=1
} BL_Sts_Type;

typedef enum BL_Err_Type {
    ERROR=1,
    SUCCESS=0,
    TIMEOUT=2
} BL_Err_Type;

typedef enum BL_Mask_Type {
    MASK=1,
    UNMASK=0
} BL_Mask_Type;

typedef struct scan_cancel_cfm scan_cancel_cfm, *Pscan_cancel_cfm;

struct scan_cancel_cfm {
    uint8_t status;
};

typedef struct scan_start_cfm scan_start_cfm, *Pscan_start_cfm;

struct scan_start_cfm {
    uint8_t status;
};

typedef enum scan_state_tag {
    SCAN_IDLE=0,
    SCAN_STATE_MAX=4,
    SCAN_WAIT_BEACON_PROBE_RSP=3,
    SCAN_WAIT_CHANNEL=2,
    SCAN_WAIT_IE_DWNLD=1
} scan_state_tag;

typedef enum scan_msg_tag {
    SCAN_CANCEL_CFM=2052,
    SCAN_CANCEL_REQ=2051,
    SCAN_DONE_IND=2050,
    SCAN_MAX=2054,
    SCAN_START_CFM=2049,
    SCAN_START_REQ=2048,
    SCAN_TIMER=2053
} scan_msg_tag;

typedef struct utils_time_date_t utils_time_date_t, *Putils_time_date_t;

struct utils_time_date_t {
    uchar ntp_hour;
    uchar ntp_minute;
    uchar ntp_second;
    uchar ntp_week_day;
    uchar ntp_date;
    uchar ntp_month;
    uchar leap_days;
    uchar leap_year_ind;
    uint ntp_year;
    uint days_since_epoch;
    uint day_of_year;
};

typedef struct _MessageHandlers.conflict24 _MessageHandlers.conflict24, *P_MessageHandlers.conflict24;

typedef struct _MessageHandlers.conflict24 MessageHandlers.conflict20;

struct _MessageHandlers.conflict24 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict25 _MessageHandlers.conflict25, *P_MessageHandlers.conflict25;

typedef struct _MessageHandlers.conflict25 MessageHandlers.conflict21;

struct _MessageHandlers.conflict25 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict17 _MessageHandlers.conflict17, *P_MessageHandlers.conflict17;

typedef struct _MessageHandlers.conflict17 MessageHandlers.conflict14;

struct _MessageHandlers.conflict17 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict28 _MessageHandlers.conflict28, *P_MessageHandlers.conflict28;

typedef struct _MessageHandlers.conflict28 MessageHandlers.conflict24;

struct _MessageHandlers.conflict28 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict30 _MessageHandlers.conflict30, *P_MessageHandlers.conflict30;

typedef struct _MessageHandlers.conflict30 MessageHandlers.conflict25;

struct _MessageHandlers.conflict30 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict26 _MessageHandlers.conflict26, *P_MessageHandlers.conflict26;

typedef struct _MessageHandlers.conflict26 MessageHandlers.conflict22;

struct _MessageHandlers.conflict26 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict27 _MessageHandlers.conflict27, *P_MessageHandlers.conflict27;

typedef struct _MessageHandlers.conflict27 MessageHandlers.conflict23;

struct _MessageHandlers.conflict27 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict33 _MessageHandlers.conflict33, *P_MessageHandlers.conflict33;

typedef struct _MessageHandlers.conflict33 MessageHandlers.conflict28;

struct _MessageHandlers.conflict33 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict34 _MessageHandlers.conflict34, *P_MessageHandlers.conflict34;

typedef struct _MessageHandlers.conflict34 MessageHandlers.conflict29;

struct _MessageHandlers.conflict34 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict31 _MessageHandlers.conflict31, *P_MessageHandlers.conflict31;

typedef struct _MessageHandlers.conflict31 MessageHandlers.conflict26;

struct _MessageHandlers.conflict31 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict32 _MessageHandlers.conflict32, *P_MessageHandlers.conflict32;

typedef struct _MessageHandlers.conflict32 MessageHandlers.conflict27;

struct _MessageHandlers.conflict32 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict10 _MessageHandlers.conflict10, *P_MessageHandlers.conflict10;

typedef struct _MessageHandlers.conflict10 MessageHandlers.conflict8;

struct _MessageHandlers.conflict10 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict3 _MessageHandlers.conflict3, *P_MessageHandlers.conflict3;

typedef struct _MessageHandlers.conflict3 MessageHandlers.conflict2;

struct _MessageHandlers.conflict3 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict37 _MessageHandlers.conflict37, *P_MessageHandlers.conflict37;

typedef struct _MessageHandlers.conflict37 MessageHandlers.conflict31;

struct _MessageHandlers.conflict37 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict38 _MessageHandlers.conflict38, *P_MessageHandlers.conflict38;

typedef struct _MessageHandlers.conflict38 MessageHandlers.conflict32;

struct _MessageHandlers.conflict38 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict35 _MessageHandlers.conflict35, *P_MessageHandlers.conflict35;

typedef struct _MessageHandlers.conflict35 MessageHandlers.conflict30;

struct _MessageHandlers.conflict35 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict41 _MessageHandlers.conflict41, *P_MessageHandlers.conflict41;

typedef struct _MessageHandlers.conflict41 MessageHandlers.conflict35;

struct _MessageHandlers.conflict41 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict42 _MessageHandlers.conflict42, *P_MessageHandlers.conflict42;

typedef struct _MessageHandlers.conflict42 MessageHandlers.conflict36;

struct _MessageHandlers.conflict42 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict39 _MessageHandlers.conflict39, *P_MessageHandlers.conflict39;

typedef struct _MessageHandlers.conflict39 MessageHandlers.conflict33;

struct _MessageHandlers.conflict39 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict40 _MessageHandlers.conflict40, *P_MessageHandlers.conflict40;

typedef struct _MessageHandlers.conflict40 MessageHandlers.conflict34;

struct _MessageHandlers.conflict40 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict46 _MessageHandlers.conflict46, *P_MessageHandlers.conflict46;

typedef struct _MessageHandlers.conflict46 MessageHandlers.conflict39;

struct _MessageHandlers.conflict46 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict44 _MessageHandlers.conflict44, *P_MessageHandlers.conflict44;

typedef struct _MessageHandlers.conflict44 MessageHandlers.conflict37;

struct _MessageHandlers.conflict44 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict45 _MessageHandlers.conflict45, *P_MessageHandlers.conflict45;

typedef struct _MessageHandlers.conflict45 MessageHandlers.conflict38;

struct _MessageHandlers.conflict45 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict4 _MessageHandlers.conflict4, *P_MessageHandlers.conflict4;

typedef struct _MessageHandlers.conflict4 MessageHandlers.conflict3;

struct _MessageHandlers.conflict4 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers _MessageHandlers, *P_MessageHandlers;

struct _MessageHandlers {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict _MessageHandlers.conflict, *P_MessageHandlers.conflict;

typedef struct _MessageHandlers.conflict MessageHandlers.conflict;

struct _MessageHandlers.conflict {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict12 _MessageHandlers.conflict12, *P_MessageHandlers.conflict12;

typedef struct _MessageHandlers.conflict12 MessageHandlers.conflict10;

struct _MessageHandlers.conflict12 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict16 _MessageHandlers.conflict16, *P_MessageHandlers.conflict16;

typedef struct _MessageHandlers.conflict16 MessageHandlers.conflict13;

struct _MessageHandlers.conflict16 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict13 _MessageHandlers.conflict13, *P_MessageHandlers.conflict13;

typedef struct _MessageHandlers.conflict13 MessageHandlers.conflict11;

struct _MessageHandlers.conflict13 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict14 _MessageHandlers.conflict14, *P_MessageHandlers.conflict14;

typedef struct _MessageHandlers.conflict14 MessageHandlers.conflict12;

struct _MessageHandlers.conflict14 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict20 _MessageHandlers.conflict20, *P_MessageHandlers.conflict20;

typedef struct _MessageHandlers.conflict20 MessageHandlers.conflict17;

struct _MessageHandlers.conflict20 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict21 _MessageHandlers.conflict21, *P_MessageHandlers.conflict21;

typedef struct _MessageHandlers.conflict21 MessageHandlers.conflict18;

struct _MessageHandlers.conflict21 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict18 _MessageHandlers.conflict18, *P_MessageHandlers.conflict18;

typedef struct _MessageHandlers.conflict18 MessageHandlers.conflict15;

struct _MessageHandlers.conflict18 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict19 _MessageHandlers.conflict19, *P_MessageHandlers.conflict19;

typedef struct _MessageHandlers.conflict19 MessageHandlers.conflict16;

struct _MessageHandlers.conflict19 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict23 _MessageHandlers.conflict23, *P_MessageHandlers.conflict23;

typedef struct _MessageHandlers.conflict23 MessageHandlers.conflict19;

struct _MessageHandlers.conflict23 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _Client.conflict11 _Client.conflict11, *P_Client.conflict11;

struct _Client.conflict11 {
    struct Timer pingTimer;
    struct Timer reconnectDelayTimer;
    ClientStatus clientStatus;
    undefined field_0x1b;
    ClientData clientData;
    struct Network.conflict25 networkStack;
};

typedef struct _Client.conflict12 _Client.conflict12, *P_Client.conflict12;

struct _Client.conflict12 {
    struct Timer pingTimer;
    struct Timer reconnectDelayTimer;
    ClientStatus clientStatus;
    undefined field_0x1b;
    ClientData clientData;
    struct Network.conflict26 networkStack;
};

typedef struct _Client.conflict10 _Client.conflict10, *P_Client.conflict10;

struct _Client.conflict10 {
    struct Timer pingTimer;
    struct Timer reconnectDelayTimer;
    ClientStatus clientStatus;
    undefined field_0x1b;
    ClientData clientData;
    struct Network.conflict22 networkStack;
};

typedef struct IoT_Client_Init_Params IoT_Client_Init_Params, *PIoT_Client_Init_Params;

struct IoT_Client_Init_Params {
    _Bool enableAutoReconnect;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    char * pHostURL;
    uint16_t port;
    undefined field_0xa;
    undefined field_0xb;
    char * pRootCALocation;
    char * pDeviceCertLocation;
    char * pDevicePrivateKeyLocation;
    uint32_t mqttPacketTimeout_ms;
    uint32_t mqttCommandTimeout_ms;
    uint32_t tlsHandshakeTimeout_ms;
    _Bool isSSLHostnameVerify;
    undefined field_0x25;
    undefined field_0x26;
    undefined field_0x27;
    void (* disconnectHandler)(AWS_IoT_Client *, void *);
    void * disconnectHandlerData;
    _Bool isBlockOnThreadLockEnabled;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct _Client.conflict _Client.conflict, *P_Client.conflict;

struct _Client.conflict {
    struct Timer pingTimer;
    struct Timer reconnectDelayTimer;
    ClientStatus clientStatus;
    undefined field_0x1b;
    ClientData clientData;
    struct Network.conflict2 networkStack;
};

typedef struct _Client.conflict7 _Client.conflict7, *P_Client.conflict7;

struct _Client.conflict7 {
    struct Timer pingTimer;
    struct Timer reconnectDelayTimer;
    ClientStatus clientStatus;
    undefined field_0x1b;
    ClientData clientData;
    struct Network.conflict17 networkStack;
};

typedef struct _Client.conflict6 _Client.conflict6, *P_Client.conflict6;

struct _Client.conflict6 {
    struct Timer pingTimer;
    struct Timer reconnectDelayTimer;
    ClientStatus clientStatus;
    undefined field_0x1b;
    ClientData clientData;
    struct Network.conflict14 networkStack;
};

typedef struct _Client.conflict9 _Client.conflict9, *P_Client.conflict9;

struct _Client.conflict9 {
    struct Timer pingTimer;
    struct Timer reconnectDelayTimer;
    ClientStatus clientStatus;
    undefined field_0x1b;
    ClientData clientData;
    struct Network.conflict21 networkStack;
};

typedef struct _Client.conflict8 _Client.conflict8, *P_Client.conflict8;

struct _Client.conflict8 {
    struct Timer pingTimer;
    struct Timer reconnectDelayTimer;
    ClientStatus clientStatus;
    undefined field_0x1b;
    ClientData clientData;
    struct Network.conflict18 networkStack;
};

typedef struct _MessageHandlers MessageHandlers;

typedef struct _MessageHandlers.conflict6 _MessageHandlers.conflict6, *P_MessageHandlers.conflict6;

typedef struct _MessageHandlers.conflict6 MessageHandlers.conflict5;

struct _MessageHandlers.conflict6 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict36 _MessageHandlers.conflict36, *P_MessageHandlers.conflict36;

struct _MessageHandlers.conflict36 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict7 _MessageHandlers.conflict7, *P_MessageHandlers.conflict7;

typedef struct _MessageHandlers.conflict7 MessageHandlers.conflict6;

struct _MessageHandlers.conflict7 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _Client.conflict1 _Client.conflict1, *P_Client.conflict1;

struct _Client.conflict1 {
    struct Timer pingTimer;
    struct Timer reconnectDelayTimer;
    ClientStatus clientStatus;
    undefined field_0x1b;
    ClientData clientData;
    struct Network.conflict5 networkStack;
};

typedef struct _Client.conflict3 _Client.conflict3, *P_Client.conflict3;

struct _Client.conflict3 {
    struct Timer pingTimer;
    struct Timer reconnectDelayTimer;
    ClientStatus clientStatus;
    undefined field_0x1b;
    ClientData clientData;
    struct Network.conflict9 networkStack;
};

typedef struct _Client.conflict2 _Client.conflict2, *P_Client.conflict2;

struct _Client.conflict2 {
    struct Timer pingTimer;
    struct Timer reconnectDelayTimer;
    ClientStatus clientStatus;
    undefined field_0x1b;
    ClientData clientData;
    struct Network.conflict6 networkStack;
};

typedef struct _Client.conflict5 _Client.conflict5, *P_Client.conflict5;

struct _Client.conflict5 {
    struct Timer pingTimer;
    struct Timer reconnectDelayTimer;
    ClientStatus clientStatus;
    undefined field_0x1b;
    ClientData clientData;
    struct Network.conflict13 networkStack;
};

typedef struct _Client.conflict4 _Client.conflict4, *P_Client.conflict4;

struct _Client.conflict4 {
    struct Timer pingTimer;
    struct Timer reconnectDelayTimer;
    ClientStatus clientStatus;
    undefined field_0x1b;
    ClientData clientData;
    struct Network.conflict10 networkStack;
};

typedef struct _MessageHandlers.conflict43 _MessageHandlers.conflict43, *P_MessageHandlers.conflict43;

struct _MessageHandlers.conflict43 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict15 _MessageHandlers.conflict15, *P_MessageHandlers.conflict15;

struct _MessageHandlers.conflict15 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict8 _MessageHandlers.conflict8, *P_MessageHandlers.conflict8;

struct _MessageHandlers.conflict8 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict9 _MessageHandlers.conflict9, *P_MessageHandlers.conflict9;

struct _MessageHandlers.conflict9 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict11 _MessageHandlers.conflict11, *P_MessageHandlers.conflict11;

struct _MessageHandlers.conflict11 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict5 _MessageHandlers.conflict5, *P_MessageHandlers.conflict5;

struct _MessageHandlers.conflict5 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict5 MessageHandlers.conflict4;

typedef struct _MessageHandlers.conflict1 _MessageHandlers.conflict1, *P_MessageHandlers.conflict1;

struct _MessageHandlers.conflict1 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict2 _MessageHandlers.conflict2, *P_MessageHandlers.conflict2;

struct _MessageHandlers.conflict2 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict29 _MessageHandlers.conflict29, *P_MessageHandlers.conflict29;

struct _MessageHandlers.conflict29 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _MessageHandlers.conflict9 MessageHandlers.conflict7;

typedef struct _MessageHandlers.conflict11 MessageHandlers.conflict9;

typedef struct _MessageHandlers.conflict2 MessageHandlers.conflict1;

typedef struct _MessageHandlers.conflict22 _MessageHandlers.conflict22, *P_MessageHandlers.conflict22;

struct _MessageHandlers.conflict22 {
    char * topicName;
    uint16_t topicNameLen;
    enum QoS qos;
    undefined field_0x7;
    void (* pApplicationHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
    void * pApplicationHandlerData;
};

typedef struct _Client.conflict5 AWS_IoT_Client.conflict2;

typedef struct _Client.conflict7 AWS_IoT_Client.conflict3;

typedef struct _Client.conflict9 AWS_IoT_Client.conflict4;

typedef struct _Client.conflict11 AWS_IoT_Client.conflict5;

typedef struct _Client.conflict3 AWS_IoT_Client.conflict1;

typedef struct _Client.conflict1 AWS_IoT_Client.conflict;

typedef struct iot_sha256_context iot_sha256_context, *Piot_sha256_context;

struct iot_sha256_context {
    uint32_t total[2];
    uint32_t state[8];
    uchar buffer[64];
    int is224;
};

typedef enum task_mm_cfg {
    TASK_MM_CFG_KEEP_ALIVE_PACKET_COUNTER=2,
    TASK_MM_CFG_KEEP_ALIVE_STATUS_ENABLED=0,
    TASK_MM_CFG_KEEP_ALIVE_TIME_LAST_RECEIVED=1
} task_mm_cfg;

typedef int ptrdiff_t;

typedef struct mm_timer_env_tag mm_timer_env_tag, *Pmm_timer_env_tag;

struct mm_timer_env_tag {
    struct co_list prog;
};

typedef enum dbg_sev_tag {
    DBG_SEV_ALL=7,
    DBG_SEV_IDX_CRT=1,
    DBG_SEV_IDX_ERR=2,
    DBG_SEV_IDX_INF=4,
    DBG_SEV_IDX_MAX=6,
    DBG_SEV_IDX_NONE=0,
    DBG_SEV_IDX_VRB=5,
    DBG_SEV_IDX_WRN=3
} dbg_sev_tag;

typedef struct debug_env_tag debug_env_tag, *Pdebug_env_tag;

struct debug_env_tag {
    uint32_t filter_module;
    uint32_t filter_severity;
};

typedef enum dbg_mod_tag {
    DBG_MOD_IDX_DBG=1,
    DBG_MOD_IDX_DMA=3,
    DBG_MOD_IDX_IPC=2,
    DBG_MOD_IDX_KE=0,
    DBG_MOD_IDX_MAX=8,
    DBG_MOD_IDX_MM=4,
    DBG_MOD_IDX_PHY=7,
    DBG_MOD_IDX_RX=6,
    DBG_MOD_IDX_TX=5
} dbg_mod_tag;

typedef enum mbedtls_cipher_padding_t {
    MBEDTLS_PADDING_NONE=4,
    MBEDTLS_PADDING_ONE_AND_ZEROS=1,
    MBEDTLS_PADDING_PKCS7=0,
    MBEDTLS_PADDING_ZEROS=3,
    MBEDTLS_PADDING_ZEROS_AND_LEN=2
} mbedtls_cipher_padding_t;

typedef enum ShadowActions_t {
    SHADOW_DELETE=2,
    SHADOW_GET=0,
    SHADOW_UPDATE=1
} ShadowActions_t;

typedef struct ShadowInitParameters_t ShadowInitParameters_t, *PShadowInitParameters_t;

struct ShadowInitParameters_t {
    char * pHost;
    uint16_t port;
    undefined field_0x6;
    undefined field_0x7;
    char * pRootCA;
    char * pClientCRT;
    char * pClientKey;
    _Bool enableAutoReconnect;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
    void (* disconnectHandler)(AWS_IoT_Client *, void *);
};

typedef struct ShadowConnectParameters_t.conflict9 ShadowConnectParameters_t.conflict9, *PShadowConnectParameters_t.conflict9;

struct ShadowConnectParameters_t.conflict9 {
    char * pMyThingName;
    char * pMqttClientId;
    uint16_t mqttClientIdLen;
    undefined field_0xa;
    undefined field_0xb;
    void (* deleteActionHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
};

typedef struct ShadowConnectParameters_t.conflict7 ShadowConnectParameters_t.conflict7, *PShadowConnectParameters_t.conflict7;

struct ShadowConnectParameters_t.conflict7 {
    char * pMyThingName;
    char * pMqttClientId;
    uint16_t mqttClientIdLen;
    undefined field_0xa;
    undefined field_0xb;
    void (* deleteActionHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
};

typedef struct ShadowConnectParameters_t.conflict8 ShadowConnectParameters_t.conflict8, *PShadowConnectParameters_t.conflict8;

struct ShadowConnectParameters_t.conflict8 {
    char * pMyThingName;
    char * pMqttClientId;
    uint16_t mqttClientIdLen;
    undefined field_0xa;
    undefined field_0xb;
    void (* deleteActionHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
};

typedef struct ShadowConnectParameters_t.conflict6 ShadowConnectParameters_t.conflict6, *PShadowConnectParameters_t.conflict6;

struct ShadowConnectParameters_t.conflict6 {
    char * pMyThingName;
    char * pMqttClientId;
    uint16_t mqttClientIdLen;
    undefined field_0xa;
    undefined field_0xb;
    void (* deleteActionHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
};

typedef struct ShadowConnectParameters_t.conflict ShadowConnectParameters_t.conflict, *PShadowConnectParameters_t.conflict;

struct ShadowConnectParameters_t.conflict {
    char * pMyThingName;
    char * pMqttClientId;
    uint16_t mqttClientIdLen;
    undefined field_0xa;
    undefined field_0xb;
    void (* deleteActionHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
};

typedef struct ShadowConnectParameters_t.conflict2 ShadowConnectParameters_t.conflict2, *PShadowConnectParameters_t.conflict2;

struct ShadowConnectParameters_t.conflict2 {
    char * pMyThingName;
    char * pMqttClientId;
    uint16_t mqttClientIdLen;
    undefined field_0xa;
    undefined field_0xb;
    void (* deleteActionHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
};

typedef struct ShadowConnectParameters_t.conflict11 ShadowConnectParameters_t.conflict11, *PShadowConnectParameters_t.conflict11;

struct ShadowConnectParameters_t.conflict11 {
    char * pMyThingName;
    char * pMqttClientId;
    uint16_t mqttClientIdLen;
    undefined field_0xa;
    undefined field_0xb;
    void (* deleteActionHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
};

typedef struct ShadowConnectParameters_t.conflict10 ShadowConnectParameters_t.conflict10, *PShadowConnectParameters_t.conflict10;

struct ShadowConnectParameters_t.conflict10 {
    char * pMyThingName;
    char * pMqttClientId;
    uint16_t mqttClientIdLen;
    undefined field_0xa;
    undefined field_0xb;
    void (* deleteActionHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
};

typedef struct ShadowConnectParameters_t.conflict12 ShadowConnectParameters_t.conflict12, *PShadowConnectParameters_t.conflict12;

struct ShadowConnectParameters_t.conflict12 {
    char * pMyThingName;
    char * pMqttClientId;
    uint16_t mqttClientIdLen;
    undefined field_0xa;
    undefined field_0xb;
    void (* deleteActionHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
};

typedef struct ShadowConnectParameters_t ShadowConnectParameters_t, *PShadowConnectParameters_t;

struct ShadowConnectParameters_t {
    char * pMyThingName;
    char * pMqttClientId;
    uint16_t mqttClientIdLen;
    undefined field_0xa;
    undefined field_0xb;
    void (* deleteActionHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
};

typedef struct ShadowConnectParameters_t.conflict5 ShadowConnectParameters_t.conflict5, *PShadowConnectParameters_t.conflict5;

struct ShadowConnectParameters_t.conflict5 {
    char * pMyThingName;
    char * pMqttClientId;
    uint16_t mqttClientIdLen;
    undefined field_0xa;
    undefined field_0xb;
    void (* deleteActionHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
};

typedef struct ShadowConnectParameters_t.conflict3 ShadowConnectParameters_t.conflict3, *PShadowConnectParameters_t.conflict3;

struct ShadowConnectParameters_t.conflict3 {
    char * pMyThingName;
    char * pMqttClientId;
    uint16_t mqttClientIdLen;
    undefined field_0xa;
    undefined field_0xb;
    void (* deleteActionHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
};

typedef struct ShadowConnectParameters_t.conflict4 ShadowConnectParameters_t.conflict4, *PShadowConnectParameters_t.conflict4;

struct ShadowConnectParameters_t.conflict4 {
    char * pMyThingName;
    char * pMqttClientId;
    uint16_t mqttClientIdLen;
    undefined field_0xa;
    undefined field_0xb;
    void (* deleteActionHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
};

typedef struct ShadowConnectParameters_t.conflict1 ShadowConnectParameters_t.conflict1, *PShadowConnectParameters_t.conflict1;

struct ShadowConnectParameters_t.conflict1 {
    char * pMyThingName;
    char * pMqttClientId;
    uint16_t mqttClientIdLen;
    undefined field_0xa;
    undefined field_0xb;
    void (* deleteActionHandler)(AWS_IoT_Client *, char *, uint16_t, struct IoT_Publish_Message_Params *, void *);
};

typedef enum Shadow_Ack_Status_t {
    SHADOW_ACK_ACCEPTED=2,
    SHADOW_ACK_REJECTED=1,
    SHADOW_ACK_TIMEOUT=0
} Shadow_Ack_Status_t;

typedef struct anon_struct.conflict10 anon_struct.conflict10, *Panon_struct.conflict10;

struct anon_struct.conflict10 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict13 anon_struct.conflict13, *Panon_struct.conflict13;

struct anon_struct.conflict13 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict12 anon_struct.conflict12, *Panon_struct.conflict12;

struct anon_struct.conflict12 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict11 anon_struct.conflict11, *Panon_struct.conflict11;

struct anon_struct.conflict11 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict103 anon_struct.conflict103, *Panon_struct.conflict103;

struct anon_struct.conflict103 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict104 anon_struct.conflict104, *Panon_struct.conflict104;

struct anon_struct.conflict104 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict101 anon_struct.conflict101, *Panon_struct.conflict101;

struct anon_struct.conflict101 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict102 anon_struct.conflict102, *Panon_struct.conflict102;

struct anon_struct.conflict102 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef union anon_union.conflict9 anon_union.conflict9, *Panon_union.conflict9;

union anon_union.conflict9 {
    struct anon_struct.conflict10 sta;
    struct anon_struct.conflict11 ap;
};

typedef enum VIF_AP_BCMC_STATUS {
    VIF_AP_BCMC_BUFFERED=1,
    VIF_AP_BCMC_MOREDATA=2
} VIF_AP_BCMC_STATUS;

typedef struct anon_struct.conflict109 anon_struct.conflict109, *Panon_struct.conflict109;

struct anon_struct.conflict109 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef union anon_union.conflict23 anon_union.conflict23, *Panon_union.conflict23;

typedef struct anon_struct.conflict23 anon_struct.conflict23, *Panon_struct.conflict23;

typedef struct anon_struct.conflict24 anon_struct.conflict24, *Panon_struct.conflict24;

struct anon_struct.conflict24 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

struct anon_struct.conflict23 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

union anon_union.conflict23 {
    struct anon_struct.conflict23 sta;
    struct anon_struct.conflict24 ap;
};

typedef struct anon_struct.conflict110 anon_struct.conflict110, *Panon_struct.conflict110;

struct anon_struct.conflict110 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict111 anon_struct.conflict111, *Panon_struct.conflict111;

struct anon_struct.conflict111 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict112 anon_struct.conflict112, *Panon_struct.conflict112;

struct anon_struct.conflict112 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef union anon_union.conflict33 anon_union.conflict33, *Panon_union.conflict33;

typedef struct anon_struct.conflict33 anon_struct.conflict33, *Panon_struct.conflict33;

typedef struct anon_struct.conflict34 anon_struct.conflict34, *Panon_struct.conflict34;

struct anon_struct.conflict34 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

struct anon_struct.conflict33 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

union anon_union.conflict33 {
    struct anon_struct.conflict33 sta;
    struct anon_struct.conflict34 ap;
};

typedef union anon_union.conflict40 anon_union.conflict40, *Panon_union.conflict40;

typedef struct anon_struct.conflict43 anon_struct.conflict43, *Panon_struct.conflict43;

typedef struct anon_struct.conflict44 anon_struct.conflict44, *Panon_struct.conflict44;

struct anon_struct.conflict43 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

struct anon_struct.conflict44 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

union anon_union.conflict40 {
    struct anon_struct.conflict43 sta;
    struct anon_struct.conflict44 ap;
};

typedef union anon_union.conflict47 anon_union.conflict47, *Panon_union.conflict47;

typedef struct anon_struct.conflict51 anon_struct.conflict51, *Panon_struct.conflict51;

typedef struct anon_struct.conflict52 anon_struct.conflict52, *Panon_struct.conflict52;

struct anon_struct.conflict52 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

struct anon_struct.conflict51 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

union anon_union.conflict47 {
    struct anon_struct.conflict51 sta;
    struct anon_struct.conflict52 ap;
};

typedef struct anon_struct.conflict50 anon_struct.conflict50, *Panon_struct.conflict50;

struct anon_struct.conflict50 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef union anon_union.conflict61 anon_union.conflict61, *Panon_union.conflict61;

typedef struct anon_struct.conflict77 anon_struct.conflict77, *Panon_struct.conflict77;

typedef struct anon_struct.conflict78 anon_struct.conflict78, *Panon_struct.conflict78;

struct anon_struct.conflict78 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

struct anon_struct.conflict77 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

union anon_union.conflict61 {
    struct anon_struct.conflict77 sta;
    struct anon_struct.conflict78 ap;
};

typedef union anon_union.conflict172 anon_union.conflict172, *Panon_union.conflict172;

typedef struct anon_struct.conflict205 anon_struct.conflict205, *Panon_struct.conflict205;

typedef struct anon_struct.conflict206 anon_struct.conflict206, *Panon_struct.conflict206;

struct anon_struct.conflict206 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

struct anon_struct.conflict205 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

union anon_union.conflict172 {
    struct anon_struct.conflict205 sta;
    struct anon_struct.conflict206 ap;
};

typedef union anon_union.conflict54 anon_union.conflict54, *Panon_union.conflict54;

typedef struct anon_struct.conflict67 anon_struct.conflict67, *Panon_struct.conflict67;

typedef struct anon_struct.conflict68 anon_struct.conflict68, *Panon_struct.conflict68;

struct anon_struct.conflict67 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

struct anon_struct.conflict68 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

union anon_union.conflict54 {
    struct anon_struct.conflict67 sta;
    struct anon_struct.conflict68 ap;
};

typedef union anon_union.conflict179 anon_union.conflict179, *Panon_union.conflict179;

typedef struct anon_struct.conflict215 anon_struct.conflict215, *Panon_struct.conflict215;

typedef struct anon_struct.conflict216 anon_struct.conflict216, *Panon_struct.conflict216;

struct anon_struct.conflict216 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

struct anon_struct.conflict215 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

union anon_union.conflict179 {
    struct anon_struct.conflict215 sta;
    struct anon_struct.conflict216 ap;
};

typedef struct anon_struct.conflict42 anon_struct.conflict42, *Panon_struct.conflict42;

struct anon_struct.conflict42 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct vif_info_tag vif_info_tag, *Pvif_info_tag;


// WARNING! conflicting data type names: /DWARF/vif_mgmt.h/vif_info_tag/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u

struct vif_info_tag {
    struct co_list_hdr list_hdr;
    uint32_t prevent_sleep;
    uint32_t txq_params[4];
    struct mm_timer_tag tbtt_timer;
    struct mm_timer_tag tmr_bcn_to;
    struct mac_addr bssid;
    undefined field_0x3e;
    undefined field_0x3f;
    struct chan_ctxt_tag * chan_ctxt;
    struct chan_tbtt_tag tbtt_switch;
    struct mac_addr mac_addr;
    uint8_t type;
    uint8_t index;
    _Bool active;
    int8_t tx_power;
    int8_t user_tx_power;
    undefined field_0x5b;
    union anon_union_for_u u;
    struct co_list sta_list;
    struct mac_bss_info bss_info;
    undefined field_0x41c;
    undefined field_0x41d;
    undefined field_0x41e;
    undefined field_0x41f;
    struct key_info_tag key_info[4];
    struct key_info_tag * default_key;
    uint32_t flags;
    struct mm_chan_ctxt_add_req csa_channel;
    undefined field_0x5d2;
    undefined field_0x5d3;
    undefined field_0x5d4;
    undefined field_0x5d5;
    undefined field_0x5d6;
    undefined field_0x5d7;
};

typedef struct anon_struct.conflict41 anon_struct.conflict41, *Panon_struct.conflict41;

struct anon_struct.conflict41 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict49 anon_struct.conflict49, *Panon_struct.conflict49;

struct anon_struct.conflict49 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef union anon_union.conflict68 anon_union.conflict68, *Panon_union.conflict68;

typedef struct anon_struct.conflict85 anon_struct.conflict85, *Panon_struct.conflict85;

typedef struct anon_struct.conflict86 anon_struct.conflict86, *Panon_struct.conflict86;

struct anon_struct.conflict86 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

struct anon_struct.conflict85 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

union anon_union.conflict68 {
    struct anon_struct.conflict85 sta;
    struct anon_struct.conflict86 ap;
};

typedef union anon_union.conflict165 anon_union.conflict165, *Panon_union.conflict165;

typedef struct anon_struct.conflict197 anon_struct.conflict197, *Panon_struct.conflict197;

typedef struct anon_struct.conflict198 anon_struct.conflict198, *Panon_struct.conflict198;

struct anon_struct.conflict197 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

struct anon_struct.conflict198 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

union anon_union.conflict165 {
    struct anon_struct.conflict197 sta;
    struct anon_struct.conflict198 ap;
};

typedef struct anon_struct.conflict32 anon_struct.conflict32, *Panon_struct.conflict32;

struct anon_struct.conflict32 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict31 anon_struct.conflict31, *Panon_struct.conflict31;

struct anon_struct.conflict31 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef union anon_union.conflict158 anon_union.conflict158, *Panon_union.conflict158;

typedef struct anon_struct.conflict189 anon_struct.conflict189, *Panon_struct.conflict189;

typedef struct anon_struct.conflict190 anon_struct.conflict190, *Panon_struct.conflict190;

struct anon_struct.conflict190 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

struct anon_struct.conflict189 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

union anon_union.conflict158 {
    struct anon_struct.conflict189 sta;
    struct anon_struct.conflict190 ap;
};

typedef union anon_union.conflict83 anon_union.conflict83, *Panon_union.conflict83;

union anon_union.conflict83 {
    struct anon_struct.conflict103 sta;
    struct anon_struct.conflict104 ap;
};

typedef union anon_union.conflict75 anon_union.conflict75, *Panon_union.conflict75;

typedef struct anon_struct.conflict93 anon_struct.conflict93, *Panon_struct.conflict93;

typedef struct anon_struct.conflict94 anon_struct.conflict94, *Panon_struct.conflict94;

struct anon_struct.conflict94 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

struct anon_struct.conflict93 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

union anon_union.conflict75 {
    struct anon_struct.conflict93 sta;
    struct anon_struct.conflict94 ap;
};

typedef union anon_union.conflict151 anon_union.conflict151, *Panon_union.conflict151;

typedef struct anon_struct.conflict181 anon_struct.conflict181, *Panon_struct.conflict181;

typedef struct anon_struct.conflict182 anon_struct.conflict182, *Panon_struct.conflict182;

struct anon_struct.conflict182 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

struct anon_struct.conflict181 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

union anon_union.conflict151 {
    struct anon_struct.conflict181 sta;
    struct anon_struct.conflict182 ap;
};

typedef struct anon_struct.conflict203 anon_struct.conflict203, *Panon_struct.conflict203;

struct anon_struct.conflict203 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict204 anon_struct.conflict204, *Panon_struct.conflict204;

struct anon_struct.conflict204 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict21 anon_struct.conflict21, *Panon_struct.conflict21;

struct anon_struct.conflict21 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef union anon_union.conflict90 anon_union.conflict90, *Panon_union.conflict90;

union anon_union.conflict90 {
    struct anon_struct.conflict111 sta;
    struct anon_struct.conflict112 ap;
};

typedef struct anon_struct.conflict22 anon_struct.conflict22, *Panon_struct.conflict22;

struct anon_struct.conflict22 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef union anon_union.conflict144 anon_union.conflict144, *Panon_union.conflict144;

typedef struct anon_struct.conflict173 anon_struct.conflict173, *Panon_struct.conflict173;

typedef struct anon_struct.conflict174 anon_struct.conflict174, *Panon_struct.conflict174;

struct anon_struct.conflict173 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

struct anon_struct.conflict174 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

union anon_union.conflict144 {
    struct anon_struct.conflict173 sta;
    struct anon_struct.conflict174 ap;
};

typedef struct anon_struct.conflict213 anon_struct.conflict213, *Panon_struct.conflict213;

struct anon_struct.conflict213 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict214 anon_struct.conflict214, *Panon_struct.conflict214;

struct anon_struct.conflict214 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict92 anon_struct.conflict92, *Panon_struct.conflict92;

struct anon_struct.conflict92 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict91 anon_struct.conflict91, *Panon_struct.conflict91;

struct anon_struct.conflict91 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict180 anon_struct.conflict180, *Panon_struct.conflict180;

struct anon_struct.conflict180 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef union anon_union.conflict132 anon_union.conflict132, *Panon_union.conflict132;

typedef struct anon_struct.conflict161 anon_struct.conflict161, *Panon_struct.conflict161;

typedef struct anon_struct.conflict162 anon_struct.conflict162, *Panon_struct.conflict162;

struct anon_struct.conflict161 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

struct anon_struct.conflict162 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

union anon_union.conflict132 {
    struct anon_struct.conflict161 sta;
    struct anon_struct.conflict162 ap;
};

typedef struct anon_struct.conflict187 anon_struct.conflict187, *Panon_struct.conflict187;

struct anon_struct.conflict187 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict188 anon_struct.conflict188, *Panon_struct.conflict188;

struct anon_struct.conflict188 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict84 anon_struct.conflict84, *Panon_struct.conflict84;

struct anon_struct.conflict84 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict83 anon_struct.conflict83, *Panon_struct.conflict83;

struct anon_struct.conflict83 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef union anon_union.conflict125 anon_union.conflict125, *Panon_union.conflict125;

typedef struct anon_struct.conflict153 anon_struct.conflict153, *Panon_struct.conflict153;

typedef struct anon_struct.conflict154 anon_struct.conflict154, *Panon_struct.conflict154;

struct anon_struct.conflict154 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

struct anon_struct.conflict153 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

union anon_union.conflict125 {
    struct anon_struct.conflict153 sta;
    struct anon_struct.conflict154 ap;
};

typedef struct anon_struct.conflict195 anon_struct.conflict195, *Panon_struct.conflict195;

struct anon_struct.conflict195 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict196 anon_struct.conflict196, *Panon_struct.conflict196;

struct anon_struct.conflict196 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict76 anon_struct.conflict76, *Panon_struct.conflict76;

struct anon_struct.conflict76 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict75 anon_struct.conflict75, *Panon_struct.conflict75;

struct anon_struct.conflict75 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict65 anon_struct.conflict65, *Panon_struct.conflict65;

struct anon_struct.conflict65 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict66 anon_struct.conflict66, *Panon_struct.conflict66;

struct anon_struct.conflict66 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict9 anon_struct.conflict9, *Panon_struct.conflict9;

struct anon_struct.conflict9 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict8 anon_struct.conflict8, *Panon_struct.conflict8;

struct anon_struct.conflict8 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct vif_mgmt_env_tag vif_mgmt_env_tag, *Pvif_mgmt_env_tag;

struct vif_mgmt_env_tag {
    struct co_list free_list;
    struct co_list used_list;
    uint8_t vif_sta_cnt;
    uint8_t vif_ap_cnt;
    uint8_t low_bcn_int_idx;
    undefined field_0x13;
};

typedef struct anon_struct.conflict151 anon_struct.conflict151, *Panon_struct.conflict151;

struct anon_struct.conflict151 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict152 anon_struct.conflict152, *Panon_struct.conflict152;

struct anon_struct.conflict152 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict159 anon_struct.conflict159, *Panon_struct.conflict159;

struct anon_struct.conflict159 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict160 anon_struct.conflict160, *Panon_struct.conflict160;

struct anon_struct.conflict160 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict172 anon_struct.conflict172, *Panon_struct.conflict172;

struct anon_struct.conflict172 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict171 anon_struct.conflict171, *Panon_struct.conflict171;

struct anon_struct.conflict171 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict179 anon_struct.conflict179, *Panon_struct.conflict179;

struct anon_struct.conflict179 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct tcpip_msg tcpip_msg, *Ptcpip_msg;

typedef enum tcpip_msg_type {
    TCPIP_MSG_API=0,
    TCPIP_MSG_API_CALL=1,
    TCPIP_MSG_CALLBACK=3,
    TCPIP_MSG_CALLBACK_STATIC=4,
    TCPIP_MSG_INPKT=2
} tcpip_msg_type;


// WARNING! conflicting data type names: /DWARF/tcpip_priv.h/tcpip_msg/anon_union_for_msg - /DWARF/api_msg.h/api_msg/anon_union_for_msg

struct tcpip_msg {
    enum tcpip_msg_type type;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    union anon_union_for_msg msg;
};

typedef struct anon_struct.conflict381 anon_struct.conflict381, *Panon_struct.conflict381;

struct anon_struct.conflict381 {
    struct pbuf * p;
    struct netif * netif;
    err_t (* input_fn)(struct pbuf *, struct netif *);
};

typedef struct anon_struct.conflict382 anon_struct.conflict382, *Panon_struct.conflict382;

struct anon_struct.conflict382 {
    tcpip_callback_fn function;
    void * ctx;
};

typedef struct anon_struct.conflict380 anon_struct.conflict380, *Panon_struct.conflict380;

struct anon_struct.conflict380 {
    err_t (* function)(struct tcpip_api_call_data *);
    struct tcpip_api_call_data * arg;
    sys_sem_t * sem;
};

typedef struct anon_struct.conflict379 anon_struct.conflict379, *Panon_struct.conflict379;

struct anon_struct.conflict379 {
    tcpip_callback_fn function;
    void * msg;
};

typedef struct dhcp_server dhcp_server, *Pdhcp_server;

typedef struct dhcp_client_node dhcp_client_node, *Pdhcp_client_node;

struct dhcp_server {
    struct dhcp_server * next;
    struct netif * netif;
    struct udp_pcb * pcb;
    struct dhcp_client_node * node_list;
    ip4_addr_t start;
    ip4_addr_t end;
    ip4_addr_t current;
};

struct dhcp_client_node {
    struct dhcp_client_node * next;
    u8_t chaddr[6];
    undefined field_0xa;
    undefined field_0xb;
    ip4_addr_t ipaddr;
    u32_t lease_end;
};

typedef struct eth_hdr.conflict eth_hdr.conflict, *Peth_hdr.conflict;

struct eth_hdr.conflict {
    struct eth_addr dest;
    struct eth_addr src;
    u16_t type;
};

typedef enum ps_dpsm_state_bit_pos {
    PS_DPSM_STATE_ON=0,
    PS_DPSM_STATE_PAUSE=3,
    PS_DPSM_STATE_PAUSING=1,
    PS_DPSM_STATE_RESUMING=2,
    PS_DPSM_STATE_SET_MODE_REQ=4
} ps_dpsm_state_bit_pos;

typedef struct ps_env_tag ps_env_tag, *Pps_env_tag;

struct ps_env_tag {
    _Bool ps_on;
    undefined field_0x1;
    ke_task_id_t taskid;
    uint32_t prevent_sleep;
    uint8_t cfm_cnt;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    struct mm_timer_tag uapsd_timer;
    _Bool uapsd_tmr_on;
    _Bool uapsd_on;
    undefined field_0x1e;
    undefined field_0x1f;
    uint32_t uapsd_timeout;
    uint8_t dpsm_state;
    uint8_t next_mode;
    undefined field_0x26;
    undefined field_0x27;
};

typedef struct mbedtls_oid_descriptor_t mbedtls_oid_descriptor_t, *Pmbedtls_oid_descriptor_t;

struct mbedtls_oid_descriptor_t {
    char * asn1;
    size_t asn1_len;
    char * name;
    char * description;
};

typedef void (* tcp_err_fn.conflict)(void *, err_t);

typedef struct tcp_pcb.conflict tcp_pcb.conflict, *Ptcp_pcb.conflict;

struct tcp_pcb.conflict {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict11 tcp_pcb.conflict11, *Ptcp_pcb.conflict11;

struct tcp_pcb.conflict11 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict10 tcp_pcb.conflict10, *Ptcp_pcb.conflict10;

struct tcp_pcb.conflict10 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict14 tcp_pcb.conflict14, *Ptcp_pcb.conflict14;

struct tcp_pcb.conflict14 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict13 tcp_pcb.conflict13, *Ptcp_pcb.conflict13;

struct tcp_pcb.conflict13 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict12 tcp_pcb.conflict12, *Ptcp_pcb.conflict12;

struct tcp_pcb.conflict12 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict9 tcp_pcb.conflict9, *Ptcp_pcb.conflict9;

struct tcp_pcb.conflict9 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict7 tcp_pcb.conflict7, *Ptcp_pcb.conflict7;

struct tcp_pcb.conflict7 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict8 tcp_pcb.conflict8, *Ptcp_pcb.conflict8;

struct tcp_pcb.conflict8 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict1 tcp_pcb.conflict1, *Ptcp_pcb.conflict1;

struct tcp_pcb.conflict1 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    tcp_err_fn.conflict errf;
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict2 tcp_pcb.conflict2, *Ptcp_pcb.conflict2;

struct tcp_pcb.conflict2 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict5 tcp_pcb.conflict5, *Ptcp_pcb.conflict5;

struct tcp_pcb.conflict5 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict6 tcp_pcb.conflict6, *Ptcp_pcb.conflict6;

struct tcp_pcb.conflict6 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict3 tcp_pcb.conflict3, *Ptcp_pcb.conflict3;

struct tcp_pcb.conflict3 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict4 tcp_pcb.conflict4, *Ptcp_pcb.conflict4;

struct tcp_pcb.conflict4 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct HeapRegion HeapRegion, *PHeapRegion;

struct HeapRegion {
    uint8_t * pucStartAddress;
    size_t xSizeInBytes;
};

typedef struct HeapRegion HeapRegion_t;

typedef struct anon_struct.conflict123 anon_struct.conflict123, *Panon_struct.conflict123;

typedef struct anon_struct.conflict123 wpa_suite_ucast_t;

typedef struct _wpa_suite_t _wpa_suite_t, *P_wpa_suite_t;

typedef struct _wpa_suite_t wpa_suite;

struct _wpa_suite_t {
    uint8_t oui[3];
    uint8_t type;
};

struct anon_struct.conflict123 {
    uint16_t count;
    wpa_suite list[2];
};

typedef struct anon_struct.conflict124 anon_struct.conflict124, *Panon_struct.conflict124;

typedef struct anon_struct.conflict124 wpa_suite_auth_key_mgmt_t;

struct anon_struct.conflict124 {
    uint16_t count;
    wpa_suite list[2];
};

typedef struct _IEEEtypes_Rsn_t _IEEEtypes_Rsn_t, *P_IEEEtypes_Rsn_t;

typedef struct _wpa_suite_t wpa_suite_mcast_t;

struct _IEEEtypes_Rsn_t {
    uint8_t element_id;
    uint8_t len;
    uint16_t version;
    wpa_suite_mcast_t group_cipher;
    wpa_suite_ucast_t pairwise_cipher;
    wpa_suite_auth_key_mgmt_t auth_key_mgmt;
};

typedef struct anon_struct.conflict122 anon_struct.conflict122, *Panon_struct.conflict122;

struct anon_struct.conflict122 {
    uint16_t count;
    wpa_suite list[2];
};

typedef struct _IEEEtypes_Wpa_t _IEEEtypes_Wpa_t, *P_IEEEtypes_Wpa_t;

typedef struct _IEEEtypes_Wpa_t IEEEtypes_Wpa_t;

struct _IEEEtypes_Wpa_t {
    uint8_t element_id;
    uint8_t len;
    uint8_t oui[4];
    uint16_t version;
    wpa_suite_mcast_t group_cipher;
    wpa_suite_ucast_t pairwise_cipher;
    wpa_suite_auth_key_mgmt_t auth_key_mgmt;
};

typedef struct _IEEEtypes_Rsn_t IEEEtypes_Rsn_t;

typedef struct iperf_server_udp_ctx iperf_server_udp_ctx, *Piperf_server_udp_ctx;

struct iperf_server_udp_ctx {
    int exit_flag;
    uint32_t datagram_cnt;
    int32_t packet_id;
    uint32_t out_of_order_cnt;
    uint32_t error_cnt;
    uint32_t out_of_order_curr;
    uint32_t receive_start;
    uint32_t period_start;
    uint32_t current;
    undefined field_0x24;
    undefined field_0x25;
    undefined field_0x26;
    undefined field_0x27;
    uint64_t recv_total_len;
    uint64_t recv_now;
    float f_min;
    float f_max;
};

typedef struct UDP_datagram UDP_datagram, *PUDP_datagram;

struct UDP_datagram {
    uint32_t id;
    uint32_t tv_sec;
    uint32_t tv_usec;
};

typedef struct server_hdr_v1 server_hdr_v1, *Pserver_hdr_v1;

typedef struct server_hdr_v1 server_hdr;

struct server_hdr_v1 {
    int32_t flags;
    int32_t total_len1;
    int32_t total_len2;
    int32_t stop_sec;
    int32_t stop_usec;
    int32_t error_cnt;
    int32_t outorder_cnt;
    int32_t datagrams;
    int32_t jitter1;
    int32_t jitter2;
};

typedef struct cm_ConnectionInfo cm_ConnectionInfo_t;

typedef union anon_union.conflict76 anon_union.conflict76, *Panon_union.conflict76;

union anon_union.conflict76 {
    struct apSpecificData_t apData;
};

typedef union anon_union.conflict13 anon_union.conflict13, *Panon_union.conflict13;

union anon_union.conflict13 {
    struct apSpecificData_t apData;
};

typedef union anon_union.conflict110 anon_union.conflict110, *Panon_union.conflict110;

union anon_union.conflict110 {
    struct apSpecificData_t apData;
};

typedef union anon_union.conflict105 anon_union.conflict105, *Panon_union.conflict105;

union anon_union.conflict105 {
    struct apSpecificData_t apData;
};

typedef union anon_union.conflict101 anon_union.conflict101, *Panon_union.conflict101;

union anon_union.conflict101 {
    struct apSpecificData_t apData;
};

typedef union anon_union.conflict180 anon_union.conflict180, *Panon_union.conflict180;

union anon_union.conflict180 {
    struct apSpecificData_t apData;
};

typedef struct wifi_ap_data_rate wifi_ap_data_rate, *Pwifi_ap_data_rate;

struct wifi_ap_data_rate {
    uint8_t data_rate;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    char * val;
};

typedef struct rc4_key rc4_key, *Prc4_key;

struct rc4_key {
    uchar state[256];
    uchar x;
    uchar y;
};

typedef struct netif.conflict75 netif.conflict75, *Pnetif.conflict75;

struct netif.conflict75 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict76 netif.conflict76, *Pnetif.conflict76;

struct netif.conflict76 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict71 netif.conflict71, *Pnetif.conflict71;

struct netif.conflict71 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict72 netif.conflict72, *Pnetif.conflict72;

struct netif.conflict72 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict73 netif.conflict73, *Pnetif.conflict73;

struct netif.conflict73 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict74 netif.conflict74, *Pnetif.conflict74;

struct netif.conflict74 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict68 netif.conflict68, *Pnetif.conflict68;

struct netif.conflict68 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict69 netif.conflict69, *Pnetif.conflict69;

struct netif.conflict69 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict64 netif.conflict64, *Pnetif.conflict64;

struct netif.conflict64 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict65 netif.conflict65, *Pnetif.conflict65;

struct netif.conflict65 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict66 netif.conflict66, *Pnetif.conflict66;

struct netif.conflict66 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict67 netif.conflict67, *Pnetif.conflict67;

struct netif.conflict67 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict60 netif.conflict60, *Pnetif.conflict60;

struct netif.conflict60 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict61 netif.conflict61, *Pnetif.conflict61;

struct netif.conflict61 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict62 netif.conflict62, *Pnetif.conflict62;

struct netif.conflict62 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict63 netif.conflict63, *Pnetif.conflict63;

struct netif.conflict63 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict70 netif.conflict70, *Pnetif.conflict70;

struct netif.conflict70 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef u8_t netif_addr_idx_t;

typedef void (* netif_status_callback_fn.conflict)(struct netif *);

typedef struct netif.conflict18 netif.conflict18, *Pnetif.conflict18;

struct netif.conflict18 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict10 netif.conflict10, *Pnetif.conflict10;

struct netif.conflict10 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef enum lwip_internal_netif_client_data_index {
    LWIP_NETIF_CLIENT_DATA_INDEX_DHCP=0,
    LWIP_NETIF_CLIENT_DATA_INDEX_IGMP=1,
    LWIP_NETIF_CLIENT_DATA_INDEX_MAX=2
} lwip_internal_netif_client_data_index;

typedef struct netif.conflict netif.conflict, *Pnetif.conflict;

struct netif.conflict {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict39 netif.conflict39, *Pnetif.conflict39;

struct netif.conflict39 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict37 netif.conflict37, *Pnetif.conflict37;

struct netif.conflict37 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict38 netif.conflict38, *Pnetif.conflict38;

struct netif.conflict38 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict30 netif.conflict30, *Pnetif.conflict30;

struct netif.conflict30 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict3 netif.conflict3, *Pnetif.conflict3;

struct netif.conflict3 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict2 netif.conflict2, *Pnetif.conflict2;

struct netif.conflict2 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict4 netif.conflict4, *Pnetif.conflict4;

struct netif.conflict4 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict24 netif.conflict24, *Pnetif.conflict24;

struct netif.conflict24 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict1 netif.conflict1, *Pnetif.conflict1;

struct netif.conflict1 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict57 netif.conflict57, *Pnetif.conflict57;

struct netif.conflict57 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict58 netif.conflict58, *Pnetif.conflict58;

struct netif.conflict58 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict59 netif.conflict59, *Pnetif.conflict59;

struct netif.conflict59 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict53 netif.conflict53, *Pnetif.conflict53;

struct netif.conflict53 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict54 netif.conflict54, *Pnetif.conflict54;

struct netif.conflict54 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict55 netif.conflict55, *Pnetif.conflict55;

struct netif.conflict55 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict56 netif.conflict56, *Pnetif.conflict56;

struct netif.conflict56 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict50 netif.conflict50, *Pnetif.conflict50;

struct netif.conflict50 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict51 netif.conflict51, *Pnetif.conflict51;

struct netif.conflict51 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict52 netif.conflict52, *Pnetif.conflict52;

struct netif.conflict52 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict46 netif.conflict46, *Pnetif.conflict46;

struct netif.conflict46 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict47 netif.conflict47, *Pnetif.conflict47;

struct netif.conflict47 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict48 netif.conflict48, *Pnetif.conflict48;

struct netif.conflict48 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict49 netif.conflict49, *Pnetif.conflict49;

struct netif.conflict49 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict42 netif.conflict42, *Pnetif.conflict42;

struct netif.conflict42 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict43 netif.conflict43, *Pnetif.conflict43;

struct netif.conflict43 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict44 netif.conflict44, *Pnetif.conflict44;

struct netif.conflict44 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict45 netif.conflict45, *Pnetif.conflict45;

struct netif.conflict45 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict40 netif.conflict40, *Pnetif.conflict40;

struct netif.conflict40 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    netif_status_callback_fn.conflict status_callback;
    netif_status_callback_fn.conflict link_callback;
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef struct netif.conflict41 netif.conflict41, *Pnetif.conflict41;

struct netif.conflict41 {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef int __intptr_t;

typedef __intptr_t intptr_t;

typedef longlong __int64_t;

typedef __int64_t int64_t;

typedef struct mbedtls_pem_context mbedtls_pem_context, *Pmbedtls_pem_context;

struct mbedtls_pem_context {
    uchar * buf;
    size_t buflen;
    uchar * info;
};

typedef struct rxl_cntrl_env_tag rxl_cntrl_env_tag, *Prxl_cntrl_env_tag;

struct rxl_cntrl_env_tag {
    struct co_list ready;
    struct rx_dmadesc * first;
    struct rx_dmadesc * last;
    struct rx_dmadesc * free;
    uint32_t packet_stack_cnt;
};

typedef struct _gpio_ctx_desc _gpio_ctx_desc, *P_gpio_ctx_desc;

struct _gpio_ctx_desc {
    struct _gpio_ctx_desc * next;
    void (* gpio_handler)(void *);
    void * arg;
    uint8_t gpioPin;
    uint8_t intCtrlMod;
    uint8_t intTrgMod;
    undefined field_0xf;
};

typedef struct _gpio_ctx_desc gpio_ctx_t;

typedef struct gpio_feature_config gpio_feature_config, *Pgpio_feature_config;

struct gpio_feature_config {
    int pin;
    uint8_t valid;
    uint8_t feature;
    uint8_t active;
    uint8_t mode;
    uint time;
};

typedef struct GLB_GPIO_Cfg_Type GLB_GPIO_Cfg_Type, *PGLB_GPIO_Cfg_Type;

struct GLB_GPIO_Cfg_Type {
    uint8_t gpioPin;
    uint8_t gpioFun;
    uint8_t gpioMode;
    uint8_t pullType;
    uint8_t drive;
    uint8_t smtCtrl;
};

typedef enum GLB_GPIO_FUNC_Type {
    GPIO_FUN_ANALOG=10,
    GPIO_FUN_EXT_PA=9,
    GPIO_FUN_FLASH=2,
    GPIO_FUN_I2C=6,
    GPIO_FUN_JTAG=14,
    GPIO_FUN_PWM=8,
    GPIO_FUN_SDIO=1,
    GPIO_FUN_SPI=4,
    GPIO_FUN_SWGPIO=11,
    GPIO_FUN_UART=7
} GLB_GPIO_FUNC_Type;

typedef enum GLB_GPIO_Type {
    GLB_GPIO_PIN_0=0,
    GLB_GPIO_PIN_1=1,
    GLB_GPIO_PIN_10=10,
    GLB_GPIO_PIN_11=11,
    GLB_GPIO_PIN_12=12,
    GLB_GPIO_PIN_13=13,
    GLB_GPIO_PIN_14=14,
    GLB_GPIO_PIN_15=15,
    GLB_GPIO_PIN_16=16,
    GLB_GPIO_PIN_17=17,
    GLB_GPIO_PIN_18=18,
    GLB_GPIO_PIN_19=19,
    GLB_GPIO_PIN_2=2,
    GLB_GPIO_PIN_20=20,
    GLB_GPIO_PIN_21=21,
    GLB_GPIO_PIN_22=22,
    GLB_GPIO_PIN_3=3,
    GLB_GPIO_PIN_4=4,
    GLB_GPIO_PIN_5=5,
    GLB_GPIO_PIN_6=6,
    GLB_GPIO_PIN_7=7,
    GLB_GPIO_PIN_8=8,
    GLB_GPIO_PIN_9=9,
    GLB_GPIO_PIN_MAX=23
} GLB_GPIO_Type;

typedef struct txl_buffer_list_tag txl_buffer_list_tag, *Ptxl_buffer_list_tag;

struct txl_buffer_list_tag {
    struct txl_buffer_tag * first;
    struct txl_buffer_tag * last;
};

typedef union anon_union.conflict137 anon_union.conflict137, *Panon_union.conflict137;

union anon_union.conflict137 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict95 anon_union.conflict95, *Panon_union.conflict95;

union anon_union.conflict95 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict130 anon_union.conflict130, *Panon_union.conflict130;

union anon_union.conflict130 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict7 anon_union.conflict7, *Panon_union.conflict7;

union anon_union.conflict7 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict21 anon_union.conflict21, *Panon_union.conflict21;

union anon_union.conflict21 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict123 anon_union.conflict123, *Panon_union.conflict123;

union anon_union.conflict123 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef struct txl_buffer_idx_tag txl_buffer_idx_tag, *Ptxl_buffer_idx_tag;

typedef struct txl_buffer_hw_desc_tag txl_buffer_hw_desc_tag, *Ptxl_buffer_hw_desc_tag;

struct txl_buffer_hw_desc_tag {
    struct dma_desc dma_desc;
    struct tx_pbd pbd;
};

struct txl_buffer_idx_tag {
    uint32_t used_area;
    uint32_t free;
    uint32_t free_size;
    uint32_t last;
    uint32_t next_needed;
    uint32_t buf_size;
    uint32_t * pool;
    struct txl_buffer_hw_desc_tag * desc;
    uint8_t count;
    undefined field_0x21;
    undefined field_0x22;
    undefined field_0x23;
};

typedef union anon_union.conflict115 anon_union.conflict115, *Panon_union.conflict115;

union anon_union.conflict115 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict31 anon_union.conflict31, *Panon_union.conflict31;

union anon_union.conflict31 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict38 anon_union.conflict38, *Panon_union.conflict38;

union anon_union.conflict38 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict45 anon_union.conflict45, *Panon_union.conflict45;

union anon_union.conflict45 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict100 anon_union.conflict100, *Panon_union.conflict100;

union anon_union.conflict100 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict52 anon_union.conflict52, *Panon_union.conflict52;

union anon_union.conflict52 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict177 anon_union.conflict177, *Panon_union.conflict177;

union anon_union.conflict177 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict59 anon_union.conflict59, *Panon_union.conflict59;

union anon_union.conflict59 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef struct txl_buffer_env_tag txl_buffer_env_tag, *Ptxl_buffer_env_tag;

struct txl_buffer_env_tag {
    struct txl_buffer_idx_tag buf_idx[5][1];
    struct txl_buffer_list_tag list[5];
};

typedef union anon_union.conflict171 anon_union.conflict171, *Panon_union.conflict171;

union anon_union.conflict171 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict163 anon_union.conflict163, *Panon_union.conflict163;

union anon_union.conflict163 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict66 anon_union.conflict66, *Panon_union.conflict66;

union anon_union.conflict66 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict81 anon_union.conflict81, *Panon_union.conflict81;

union anon_union.conflict81 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict74 anon_union.conflict74, *Panon_union.conflict74;

union anon_union.conflict74 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict156 anon_union.conflict156, *Panon_union.conflict156;

union anon_union.conflict156 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict149 anon_union.conflict149, *Panon_union.conflict149;

union anon_union.conflict149 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict142 anon_union.conflict142, *Panon_union.conflict142;

union anon_union.conflict142 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef union anon_union.conflict88 anon_union.conflict88, *Panon_union.conflict88;

union anon_union.conflict88 {
    struct tx_policy_tbl policy_tbl;
    struct tx_compressed_policy_tbl comp_pol_tbl;
};

typedef struct oid_x520_attr_t oid_x520_attr_t, *Poid_x520_attr_t;

struct oid_x520_attr_t {
    struct mbedtls_oid_descriptor_t descriptor;
    char * short_name;
};

typedef struct oid_x509_ext_t oid_x509_ext_t, *Poid_x509_ext_t;

struct oid_x509_ext_t {
    struct mbedtls_oid_descriptor_t descriptor;
    int ext_type;
};

typedef struct oid_md_alg_t oid_md_alg_t, *Poid_md_alg_t;

struct oid_md_alg_t {
    struct mbedtls_oid_descriptor_t descriptor;
    enum mbedtls_md_type_t md_alg;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
};

typedef struct oid_sig_alg_t oid_sig_alg_t, *Poid_sig_alg_t;

struct oid_sig_alg_t {
    struct mbedtls_oid_descriptor_t descriptor;
    enum mbedtls_md_type_t md_alg;
    enum mbedtls_pk_type_t pk_alg;
    undefined field_0x12;
    undefined field_0x13;
};

typedef struct oid_cipher_alg_t oid_cipher_alg_t, *Poid_cipher_alg_t;

struct oid_cipher_alg_t {
    struct mbedtls_oid_descriptor_t descriptor;
    enum mbedtls_cipher_type_t cipher_alg;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
};

typedef struct oid_ecp_grp_t oid_ecp_grp_t, *Poid_ecp_grp_t;

struct oid_ecp_grp_t {
    struct mbedtls_oid_descriptor_t descriptor;
    enum mbedtls_ecp_group_id grp_id;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
};

typedef struct oid_pk_alg_t oid_pk_alg_t, *Poid_pk_alg_t;

struct oid_pk_alg_t {
    struct mbedtls_oid_descriptor_t descriptor;
    enum mbedtls_pk_type_t pk_alg;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
};

typedef enum riscv_abi_type {
    ABI_ILP32=0,
    ABI_ILP32D=3,
    ABI_ILP32E=1,
    ABI_ILP32F=2,
    ABI_LP64=4,
    ABI_LP64D=6,
    ABI_LP64F=5
} riscv_abi_type;

typedef enum riscv_microarchitecture_type {
    generic=0,
    sifive_7=1
} riscv_microarchitecture_type;

typedef enum riscv_code_model {
    CM_MEDANY=1,
    CM_MEDLOW=0,
    CM_PIC=2
} riscv_code_model;

typedef struct PDS_CTL2_Type PDS_CTL2_Type, *PPDS_CTL2_Type;

struct PDS_CTL2_Type {
    uint32_t forceCpuPwrOff:1;
    uint32_t rsv1:1;
    uint32_t forceWbPwrOff:1;
    uint32_t rsv3:1;
    uint32_t forceCpuIsoPwrOff:1;
    uint32_t rsv5:1;
    uint32_t forceWbIsoPwrOff:1;
    uint32_t rsv7:1;
    uint32_t forceCpuPdsRst:1;
    uint32_t rsv9:1;
    uint32_t forceWbPdsRst:1;
    uint32_t rsv11:1;
    uint32_t forceCpuMemStby:1;
    uint32_t rsv13:1;
    uint32_t forceWbMemStby:1;
    uint32_t rsv15:1;
    uint32_t forceCpuGateClk:1;
    uint32_t rsv17:1;
    uint32_t forceWbGateClk:1;
    uint32_t rsv19_31:12;
};

typedef enum PDS_PLL_CLK_Type {
    PDS_PLL_CLK_120M=4,
    PDS_PLL_CLK_160M=3,
    PDS_PLL_CLK_192M=2,
    PDS_PLL_CLK_240M=1,
    PDS_PLL_CLK_32M=8,
    PDS_PLL_CLK_480M=0,
    PDS_PLL_CLK_48M=7,
    PDS_PLL_CLK_80M=6,
    PDS_PLL_CLK_96M=5
} PDS_PLL_CLK_Type;

typedef struct PDS_DEFAULT_LV_CFG_Type PDS_DEFAULT_LV_CFG_Type, *PPDS_DEFAULT_LV_CFG_Type;

typedef struct PDS_CTL_Type PDS_CTL_Type, *PPDS_CTL_Type;

typedef struct PDS_CTL3_Type PDS_CTL3_Type, *PPDS_CTL3_Type;

typedef struct PDS_CTL4_Type PDS_CTL4_Type, *PPDS_CTL4_Type;

struct PDS_CTL3_Type {
    uint32_t rsv0:1;
    uint32_t forceMiscPwrOff:1;
    uint32_t rsv2_3:2;
    uint32_t forceMiscIsoEn:1;
    uint32_t rsv5_6:2;
    uint32_t forceMiscPdsRst:1;
    uint32_t rsv8_9:2;
    uint32_t forceMiscMemStby:1;
    uint32_t rsv11_12:2;
    uint32_t forceMiscGateClk:1;
    uint32_t rsv14_23:10;
    uint32_t CpuIsoEn:1;
    uint32_t rsv25_26:2;
    uint32_t WbIsoEn:1;
    uint32_t rsv28_29:2;
    uint32_t MiscIsoEn:1;
    uint32_t rsv31:1;
};

struct PDS_CTL4_Type {
    uint32_t cpuPwrOff:1;
    uint32_t cpuRst:1;
    uint32_t cpuMemStby:1;
    uint32_t cpuGateClk:1;
    uint32_t rsv4_11:8;
    uint32_t WbPwrOff:1;
    uint32_t WbRst:1;
    uint32_t WbMemStby:1;
    uint32_t WbGateClk:1;
    uint32_t rsv16_23:8;
    uint32_t MiscPwrOff:1;
    uint32_t MiscRst:1;
    uint32_t MiscMemStby:1;
    uint32_t MiscGateClk:1;
    uint32_t rsv28_31:4;
};

struct PDS_CTL_Type {
    uint32_t pdsStart:1;
    uint32_t sleepForever:1;
    uint32_t xtalForceOff:1;
    uint32_t saveWiFiState:1;
    uint32_t dcdc18Off:1;
    uint32_t bgSysOff:1;
    uint32_t rsv6_7:2;
    uint32_t clkOff:1;
    uint32_t memStby:1;
    uint32_t rsv10:1;
    uint32_t isolation:1;
    uint32_t waitXtalRdy:1;
    uint32_t pdsPwrOff:1;
    uint32_t xtalOff:1;
    uint32_t socEnbForceOn:1;
    uint32_t pdsRstSocEn:1;
    uint32_t pdsRC32mOn:1;
    uint32_t pdsLdoVselEn:1;
    uint32_t rsv19_20:2;
    uint32_t wfiMask:1;
    uint32_t ldo11Off:1;
    uint32_t rsv23:1;
    uint32_t pdsLdoVol:4;
    uint32_t pdsCtlRfSel:2;
    uint32_t pdsCtlPllSel:2;
};

struct PDS_DEFAULT_LV_CFG_Type {
    struct PDS_CTL_Type pdsCtl;
    struct PDS_CTL2_Type pdsCtl2;
    struct PDS_CTL3_Type pdsCtl3;
    struct PDS_CTL4_Type pdsCtl4;
};

typedef struct PDS_RAM_CFG_Type PDS_RAM_CFG_Type, *PPDS_RAM_CFG_Type;

struct PDS_RAM_CFG_Type {
    uint32_t PDS_RAM_CFG_0KB_16KB_CPU_RAM_RET:1;
    uint32_t PDS_RAM_CFG_16KB_32KB_CPU_RAM_RET:1;
    uint32_t PDS_RAM_CFG_32KB_48KB_CPU_RAM_RET:1;
    uint32_t PDS_RAM_CFG_48KB_64KB_CPU_RAM_RET:1;
    uint32_t PDS_RAM_CFG_0KB_16KB_CPU_RAM_SLP:1;
    uint32_t PDS_RAM_CFG_16KB_32KB_CPU_RAM_SLP:1;
    uint32_t PDS_RAM_CFG_32KB_48KB_CPU_RAM_SLP:1;
    uint32_t PDS_RAM_CFG_48KB_64KB_CPU_RAM_SLP:1;
    uint32_t PDS_RAM_CFG_RSV:24;
};

typedef enum PDS_PLL_XTAL_Type {
    PDS_PLL_XTAL_24M=1,
    PDS_PLL_XTAL_26M=5,
    PDS_PLL_XTAL_32M=2,
    PDS_PLL_XTAL_38P4M=3,
    PDS_PLL_XTAL_40M=4,
    PDS_PLL_XTAL_NONE=0,
    PDS_PLL_XTAL_RC32M=6
} PDS_PLL_XTAL_Type;

typedef struct x509_crt_verify_string x509_crt_verify_string, *Px509_crt_verify_string;

struct x509_crt_verify_string {
    int code;
    char * string;
};

typedef uintptr_t insn_t;

typedef struct bl_mtd_info_t bl_mtd_info_t, *Pbl_mtd_info_t;

struct bl_mtd_info_t {
    char name[16];
    uint offset;
    uint size;
    void * xip_addr;
};

typedef void * bl_mtd_handle_t;

typedef struct mbedtls_ssl_config.conflict mbedtls_ssl_config.conflict, *Pmbedtls_ssl_config.conflict;

struct mbedtls_ssl_config.conflict {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict1 mbedtls_ssl_config.conflict1, *Pmbedtls_ssl_config.conflict1;

struct mbedtls_ssl_config.conflict1 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict2 mbedtls_ssl_config.conflict2, *Pmbedtls_ssl_config.conflict2;

struct mbedtls_ssl_config.conflict2 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict64 mbedtls_ssl_config.conflict64, *Pmbedtls_ssl_config.conflict64;

struct mbedtls_ssl_config.conflict64 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict63 mbedtls_ssl_config.conflict63, *Pmbedtls_ssl_config.conflict63;

struct mbedtls_ssl_config.conflict63 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict66 mbedtls_ssl_config.conflict66, *Pmbedtls_ssl_config.conflict66;

struct mbedtls_ssl_config.conflict66 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict65 mbedtls_ssl_config.conflict65, *Pmbedtls_ssl_config.conflict65;

struct mbedtls_ssl_config.conflict65 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict68 mbedtls_ssl_config.conflict68, *Pmbedtls_ssl_config.conflict68;

struct mbedtls_ssl_config.conflict68 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict67 mbedtls_ssl_config.conflict67, *Pmbedtls_ssl_config.conflict67;

struct mbedtls_ssl_config.conflict67 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict69 mbedtls_ssl_config.conflict69, *Pmbedtls_ssl_config.conflict69;

struct mbedtls_ssl_config.conflict69 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict71 mbedtls_ssl_config.conflict71, *Pmbedtls_ssl_config.conflict71;

struct mbedtls_ssl_config.conflict71 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict70 mbedtls_ssl_config.conflict70, *Pmbedtls_ssl_config.conflict70;

struct mbedtls_ssl_config.conflict70 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict73 mbedtls_ssl_config.conflict73, *Pmbedtls_ssl_config.conflict73;

struct mbedtls_ssl_config.conflict73 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict72 mbedtls_ssl_config.conflict72, *Pmbedtls_ssl_config.conflict72;

struct mbedtls_ssl_config.conflict72 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict74 mbedtls_ssl_config.conflict74, *Pmbedtls_ssl_config.conflict74;

struct mbedtls_ssl_config.conflict74 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict9 mbedtls_ssl_config.conflict9, *Pmbedtls_ssl_config.conflict9;

struct mbedtls_ssl_config.conflict9 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_context.conflict24 mbedtls_ssl_context.conflict24, *Pmbedtls_ssl_context.conflict24;

struct mbedtls_ssl_context.conflict24 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict23 mbedtls_ssl_context.conflict23, *Pmbedtls_ssl_context.conflict23;

struct mbedtls_ssl_context.conflict23 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict16 mbedtls_ssl_context.conflict16, *Pmbedtls_ssl_context.conflict16;

struct mbedtls_ssl_context.conflict16 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict15 mbedtls_ssl_context.conflict15, *Pmbedtls_ssl_context.conflict15;

struct mbedtls_ssl_context.conflict15 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_config.conflict20 mbedtls_ssl_config.conflict20, *Pmbedtls_ssl_config.conflict20;

struct mbedtls_ssl_config.conflict20 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict28 mbedtls_ssl_config.conflict28, *Pmbedtls_ssl_config.conflict28;

struct mbedtls_ssl_config.conflict28 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict27 mbedtls_ssl_config.conflict27, *Pmbedtls_ssl_config.conflict27;

struct mbedtls_ssl_config.conflict27 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict29 mbedtls_ssl_config.conflict29, *Pmbedtls_ssl_config.conflict29;

struct mbedtls_ssl_config.conflict29 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict37 mbedtls_ssl_config.conflict37, *Pmbedtls_ssl_config.conflict37;

struct mbedtls_ssl_config.conflict37 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict36 mbedtls_ssl_config.conflict36, *Pmbedtls_ssl_config.conflict36;

struct mbedtls_ssl_config.conflict36 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict38 mbedtls_ssl_config.conflict38, *Pmbedtls_ssl_config.conflict38;

struct mbedtls_ssl_config.conflict38 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict46 mbedtls_ssl_config.conflict46, *Pmbedtls_ssl_config.conflict46;

struct mbedtls_ssl_config.conflict46 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict45 mbedtls_ssl_config.conflict45, *Pmbedtls_ssl_config.conflict45;

struct mbedtls_ssl_config.conflict45 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict47 mbedtls_ssl_config.conflict47, *Pmbedtls_ssl_config.conflict47;

struct mbedtls_ssl_config.conflict47 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict55 mbedtls_ssl_config.conflict55, *Pmbedtls_ssl_config.conflict55;

struct mbedtls_ssl_config.conflict55 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict54 mbedtls_ssl_config.conflict54, *Pmbedtls_ssl_config.conflict54;

struct mbedtls_ssl_config.conflict54 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict56 mbedtls_ssl_config.conflict56, *Pmbedtls_ssl_config.conflict56;

struct mbedtls_ssl_config.conflict56 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_context.conflict mbedtls_ssl_context.conflict, *Pmbedtls_ssl_context.conflict;

struct mbedtls_ssl_context.conflict {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_config.conflict11 mbedtls_ssl_config.conflict11, *Pmbedtls_ssl_config.conflict11;

struct mbedtls_ssl_config.conflict11 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict10 mbedtls_ssl_config.conflict10, *Pmbedtls_ssl_config.conflict10;

struct mbedtls_ssl_config.conflict10 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict19 mbedtls_ssl_config.conflict19, *Pmbedtls_ssl_config.conflict19;

struct mbedtls_ssl_config.conflict19 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_config.conflict18 mbedtls_ssl_config.conflict18, *Pmbedtls_ssl_config.conflict18;

struct mbedtls_ssl_config.conflict18 {
    int * ciphersuite_list[4];
    void (* f_dbg)(void *, int, char *, int, char *);
    void * p_dbg;
    int (* f_rng)(void *, uchar *, size_t);
    void * p_rng;
    int (* f_get_cache)(void *, struct mbedtls_ssl_session *);
    int (* f_set_cache)(void *, struct mbedtls_ssl_session *);
    void * p_cache;
    int (* f_sni)(void *, struct mbedtls_ssl_context *, uchar *, size_t);
    void * p_sni;
    int (* f_vrfy)(void *, struct mbedtls_x509_crt *, int, uint32_t *);
    void * p_vrfy;
    int (* f_ticket_write)(void *, struct mbedtls_ssl_session *, uchar *, uchar *, size_t *, uint32_t *);
    int (* f_ticket_parse)(void *, struct mbedtls_ssl_session *, uchar *, size_t);
    void * p_ticket;
    struct mbedtls_x509_crt_profile * cert_profile;
    struct mbedtls_ssl_key_cert * key_cert;
    struct mbedtls_x509_crt * ca_chain;
    struct mbedtls_x509_crl * ca_crl;
    int * sig_hashes;
    enum mbedtls_ecp_group_id * curve_list;
    char * * alpn_list;
    uint32_t read_timeout;
    uint32_t hs_timeout_min;
    uint32_t hs_timeout_max;
    uchar max_major_ver;
    uchar max_minor_ver;
    uchar min_major_ver;
    uchar min_minor_ver;
    uint endpoint:1;
    uint transport:1;
    uint authmode:2;
    uint allow_legacy_renegotiation:2;
    uint mfl_code:3;
    uint session_tickets:1;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct mbedtls_ssl_context.conflict7 mbedtls_ssl_context.conflict7, *Pmbedtls_ssl_context.conflict7;

struct mbedtls_ssl_context.conflict7 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict8 mbedtls_ssl_context.conflict8, *Pmbedtls_ssl_context.conflict8;

struct mbedtls_ssl_context.conflict8 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict65 mbedtls_ssl_context.conflict65, *Pmbedtls_ssl_context.conflict65;

struct mbedtls_ssl_context.conflict65 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict64 mbedtls_ssl_context.conflict64, *Pmbedtls_ssl_context.conflict64;

struct mbedtls_ssl_context.conflict64 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict63 mbedtls_ssl_context.conflict63, *Pmbedtls_ssl_context.conflict63;

struct mbedtls_ssl_context.conflict63 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict62 mbedtls_ssl_context.conflict62, *Pmbedtls_ssl_context.conflict62;

struct mbedtls_ssl_context.conflict62 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict66 mbedtls_ssl_context.conflict66, *Pmbedtls_ssl_context.conflict66;

struct mbedtls_ssl_context.conflict66 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict61 mbedtls_ssl_context.conflict61, *Pmbedtls_ssl_context.conflict61;

struct mbedtls_ssl_context.conflict61 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict60 mbedtls_ssl_context.conflict60, *Pmbedtls_ssl_context.conflict60;

struct mbedtls_ssl_context.conflict60 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict59 mbedtls_ssl_context.conflict59, *Pmbedtls_ssl_context.conflict59;

struct mbedtls_ssl_context.conflict59 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict58 mbedtls_ssl_context.conflict58, *Pmbedtls_ssl_context.conflict58;

struct mbedtls_ssl_context.conflict58 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict57 mbedtls_ssl_context.conflict57, *Pmbedtls_ssl_context.conflict57;

struct mbedtls_ssl_context.conflict57 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict56 mbedtls_ssl_context.conflict56, *Pmbedtls_ssl_context.conflict56;

struct mbedtls_ssl_context.conflict56 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict55 mbedtls_ssl_context.conflict55, *Pmbedtls_ssl_context.conflict55;

struct mbedtls_ssl_context.conflict55 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict48 mbedtls_ssl_context.conflict48, *Pmbedtls_ssl_context.conflict48;

struct mbedtls_ssl_context.conflict48 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict40 mbedtls_ssl_context.conflict40, *Pmbedtls_ssl_context.conflict40;

struct mbedtls_ssl_context.conflict40 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict47 mbedtls_ssl_context.conflict47, *Pmbedtls_ssl_context.conflict47;

struct mbedtls_ssl_context.conflict47 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict39 mbedtls_ssl_context.conflict39, *Pmbedtls_ssl_context.conflict39;

struct mbedtls_ssl_context.conflict39 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict32 mbedtls_ssl_context.conflict32, *Pmbedtls_ssl_context.conflict32;

struct mbedtls_ssl_context.conflict32 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct mbedtls_ssl_context.conflict31 mbedtls_ssl_context.conflict31, *Pmbedtls_ssl_context.conflict31;

struct mbedtls_ssl_context.conflict31 {
    struct mbedtls_ssl_config * conf;
    int state;
    int major_ver;
    int minor_ver;
    int (* f_send)(void *, uchar *, size_t);
    int (* f_recv)(void *, uchar *, size_t);
    int (* f_recv_timeout)(void *, uchar *, size_t, uint32_t);
    void * p_bio;
    struct mbedtls_ssl_session * session_in;
    struct mbedtls_ssl_session * session_out;
    struct mbedtls_ssl_session * session;
    struct mbedtls_ssl_session * session_negotiate;
    struct mbedtls_ssl_handshake_params * handshake;
    struct mbedtls_ssl_transform * transform_in;
    struct mbedtls_ssl_transform * transform_out;
    struct mbedtls_ssl_transform * transform;
    struct mbedtls_ssl_transform * transform_negotiate;
    void * p_timer;
    void (* f_set_timer)(void *, uint32_t, uint32_t);
    int (* f_get_timer)(void *);
    uchar * in_buf;
    uchar * in_ctr;
    uchar * in_hdr;
    uchar * in_len;
    uchar * in_iv;
    uchar * in_msg;
    uchar * in_offt;
    int in_msgtype;
    size_t in_msglen;
    size_t in_left;
    uint16_t in_epoch;
    undefined field_0x7a;
    undefined field_0x7b;
    size_t next_record_offset;
    size_t in_hslen;
    int nb_zero;
    int record_read;
    uchar * out_buf;
    uchar * out_ctr;
    uchar * out_hdr;
    uchar * out_len;
    uchar * out_iv;
    uchar * out_msg;
    int out_msgtype;
    size_t out_msglen;
    size_t out_left;
    int client_auth;
    char * hostname;
    char * alpn_chosen;
    int secure_renegotiation;
};

typedef struct key_MgtMaterial_t key_MgtMaterial_t, *Pkey_MgtMaterial_t;

typedef union anon_union_for_keyEncypt anon_union_for_keyEncypt, *Panon_union_for_keyEncypt;

typedef struct key_Type_TKIP_t key_Type_TKIP_t, *Pkey_Type_TKIP_t;

typedef struct key_Type_AES_t key_Type_AES_t, *Pkey_Type_AES_t;

typedef struct key_Type_WEP_t key_Type_WEP_t, *Pkey_Type_WEP_t;

typedef struct key_Type_WAPI_t key_Type_WAPI_t, *Pkey_Type_WAPI_t;

typedef struct key_Type_AES_CMAC_t key_Type_AES_CMAC_t, *Pkey_Type_AES_CMAC_t;

struct key_Type_WEP_t {
    UINT8 keyIndex;
    UINT8 isDefaultTx;
    UINT8 key[13];
};

struct key_Type_WAPI_t {
    UINT8 keyIndex;
    UINT8 isDefKey;
    UINT8 key[16];
    UINT8 mickey[16];
    UINT8 rxPN[16];
};

struct key_Type_TKIP_t {
    UINT8 key[16];
    UINT8 txMicKey[8];
    UINT8 rxMicKey[8];
};

struct key_Type_AES_CMAC_t {
    UINT8 ipn[6];
    UINT8 reserved[2];
    UINT8 key[16];
};

struct key_Type_AES_t {
    UINT8 key[16];
};

union anon_union_for_keyEncypt {
    struct key_Type_TKIP_t TKIP;
    struct key_Type_AES_t AES1;
    struct key_Type_WEP_t WEP;
    struct key_Type_WAPI_t WAPI;
    struct key_Type_AES_CMAC_t iGTK;
};

struct key_MgtMaterial_t {
    UINT16 keyType;
    UINT16 keyInfo;
    UINT16 keyLen;
    union anon_union_for_keyEncypt keyEncypt;
};

typedef union anon_union.conflict11 anon_union.conflict11, *Panon_union.conflict11;

union anon_union.conflict11 {
    struct key_Type_TKIP_t TKIP;
    struct key_Type_AES_t AES1;
    struct key_Type_WEP_t WEP;
    struct key_Type_WAPI_t WAPI;
    struct key_Type_AES_CMAC_t iGTK;
};

typedef uint hashval_t;

typedef struct notifier_block notifier_block, *Pnotifier_block;

struct notifier_block {
    int (* cb)(struct notifier_block *, int, void *);
    struct notifier_block * next;
    int priority;
};

typedef struct rd_env_tag rd_env_tag, *Prd_env_tag;

struct rd_env_tag {
    struct co_list event_free_list;
};

typedef enum GLB_DIG_CLK_Type {
    GLB_DIG_CLK_PLL_32M=0,
    GLB_DIG_CLK_XCLK=1
} GLB_DIG_CLK_Type;

typedef enum BMX_BUS_ERR_Type {
    BMX_BUS_ERR_ADDR_DECODE=1,
    BMX_BUS_ERR_TRUSTZONE_DECODE=0
} BMX_BUS_ERR_Type;

typedef enum GLB_SPI_PAD_ACT_AS_Type {
    GLB_SPI_PAD_ACT_AS_MASTER=1,
    GLB_SPI_PAD_ACT_AS_SLAVE=0
} GLB_SPI_PAD_ACT_AS_Type;

typedef enum GLB_EM_Type {
    GLB_EM_0KB=0,
    GLB_EM_16KB=15,
    GLB_EM_8KB=3
} GLB_EM_Type;

typedef enum BMX_ERR_INT_Type {
    BMX_ERR_INT_ALL=1,
    BMX_ERR_INT_ERR=0
} BMX_ERR_INT_Type;

typedef struct BMX_Cfg_Type BMX_Cfg_Type, *PBMX_Cfg_Type;

typedef enum BMX_ARB_Type {
    BMX_ARB_FIX=0,
    BMX_ARB_RANDOM=2,
    BMX_ARB_ROUND_ROBIN=1
} BMX_ARB_Type;

struct BMX_Cfg_Type {
    uint8_t timeoutEn;
    enum BL_Fun_Type errEn;
    enum BMX_ARB_Type arbMod;
};

typedef enum GLB_PLL_XTAL_Type {
    GLB_PLL_XTAL_24M=1,
    GLB_PLL_XTAL_26M=5,
    GLB_PLL_XTAL_32M=2,
    GLB_PLL_XTAL_38P4M=3,
    GLB_PLL_XTAL_40M=4,
    GLB_PLL_XTAL_NONE=0,
    GLB_PLL_XTAL_RC32M=6
} GLB_PLL_XTAL_Type;

typedef enum GLB_SYS_CLK_Type {
    GLB_SYS_CLK_PLL120M=3,
    GLB_SYS_CLK_PLL160M=4,
    GLB_SYS_CLK_PLL192M=5,
    GLB_SYS_CLK_PLL48M=2,
    GLB_SYS_CLK_RC32M=0,
    GLB_SYS_CLK_XTAL=1
} GLB_SYS_CLK_Type;

typedef enum GLB_BT_BANDWIDTH_Type {
    GLB_BT_BANDWIDTH_1M=0,
    GLB_BT_BANDWIDTH_2M=1
} GLB_BT_BANDWIDTH_Type;

typedef enum GLB_GPIO_INT_TRIG_Type {
    GLB_GPIO_INT_TRIG_NEG_LEVEL=2,
    GLB_GPIO_INT_TRIG_NEG_PULSE=0,
    GLB_GPIO_INT_TRIG_POS_LEVEL=3,
    GLB_GPIO_INT_TRIG_POS_PULSE=1
} GLB_GPIO_INT_TRIG_Type;

typedef enum GLB_DMA_CLK_ID_Type {
    GLB_DMA_CLK_DMA0_CH0=0,
    GLB_DMA_CLK_DMA0_CH1=1,
    GLB_DMA_CLK_DMA0_CH2=2,
    GLB_DMA_CLK_DMA0_CH3=3
} GLB_DMA_CLK_ID_Type;

typedef enum GLB_UART_SIG_FUN_Type {
    GLB_UART_SIG_FUN_UART0_CTS=1,
    GLB_UART_SIG_FUN_UART0_RTS=0,
    GLB_UART_SIG_FUN_UART0_RXD=3,
    GLB_UART_SIG_FUN_UART0_TXD=2,
    GLB_UART_SIG_FUN_UART1_CTS=5,
    GLB_UART_SIG_FUN_UART1_RTS=4,
    GLB_UART_SIG_FUN_UART1_RXD=7,
    GLB_UART_SIG_FUN_UART1_TXD=6
} GLB_UART_SIG_FUN_Type;

typedef enum GLB_PLL_CLK_Type {
    GLB_PLL_CLK_120M=4,
    GLB_PLL_CLK_160M=3,
    GLB_PLL_CLK_192M=2,
    GLB_PLL_CLK_240M=1,
    GLB_PLL_CLK_32M=8,
    GLB_PLL_CLK_480M=0,
    GLB_PLL_CLK_48M=7,
    GLB_PLL_CLK_80M=6,
    GLB_PLL_CLK_96M=5
} GLB_PLL_CLK_Type;

typedef enum GLB_ROOT_CLK_Type {
    GLB_ROOT_CLK_PLL=2,
    GLB_ROOT_CLK_RC32M=0,
    GLB_ROOT_CLK_XTAL=1
} GLB_ROOT_CLK_Type;

typedef enum GLB_SFLASH_CLK_Type {
    GLB_SFLASH_CLK_120M=0,
    GLB_SFLASH_CLK_48M=2,
    GLB_SFLASH_CLK_80M=3,
    GLB_SFLASH_CLK_96M=5,
    GLB_SFLASH_CLK_BCLK=4,
    GLB_SFLASH_CLK_XTAL=1
} GLB_SFLASH_CLK_Type;

typedef enum BMX_TO_INT_Type {
    BMX_TO_INT_ALL=1,
    BMX_TO_INT_TIMEOUT=0
} BMX_TO_INT_Type;

typedef enum GLB_DAC_CLK_Type {
    GLB_DAC_CLK_32M=0,
    GLB_DAC_CLK_XCLK=1
} GLB_DAC_CLK_Type;

typedef enum GLB_IR_CLK_SRC_Type {
    GLB_IR_CLK_SRC_XCLK=0
} GLB_IR_CLK_SRC_Type;

typedef enum GLB_ADC_CLK_Type {
    GLB_ADC_CLK_96M=0,
    GLB_ADC_CLK_XCLK=1
} GLB_ADC_CLK_Type;

typedef enum GLB_GPIO_INT_CONTROL_Type {
    GLB_GPIO_INT_CONTROL_ASYNC=1,
    GLB_GPIO_INT_CONTROL_SYNC=0
} GLB_GPIO_INT_CONTROL_Type;

typedef enum GLB_MTIMER_CLK_Type {
    GLB_MTIMER_CLK_32K=1,
    GLB_MTIMER_CLK_BCLK=0
} GLB_MTIMER_CLK_Type;

typedef enum GLB_GPIO_REAL_MODE_Type {
    GLB_GPIO_REAL_MODE_CCI=15,
    GLB_GPIO_REAL_MODE_JTAG=14,
    GLB_GPIO_REAL_MODE_REG=0,
    GLB_GPIO_REAL_MODE_RF=12,
    GLB_GPIO_REAL_MODE_SDIO=1
} GLB_GPIO_REAL_MODE_Type;

typedef enum GLB_PKA_CLK_Type {
    GLB_PKA_CLK_HCLK=0,
    GLB_PKA_CLK_PLL120M=1
} GLB_PKA_CLK_Type;

typedef enum GLB_UART_SIG_Type {
    GLB_UART_SIG_0=0,
    GLB_UART_SIG_1=1,
    GLB_UART_SIG_2=2,
    GLB_UART_SIG_3=3,
    GLB_UART_SIG_4=4,
    GLB_UART_SIG_5=5,
    GLB_UART_SIG_6=6,
    GLB_UART_SIG_7=7
} GLB_UART_SIG_Type;

typedef int32_t mbedtls_mpi_sint;

typedef uint64_t mbedtls_t_udbl;

typedef struct phy_env_tag phy_env_tag, *Pphy_env_tag;

typedef struct phy_bl602_cfg_tag phy_bl602_cfg_tag, *Pphy_bl602_cfg_tag;

struct phy_bl602_cfg_tag {
    uint32_t reserved;
};

struct phy_env_tag {
    struct phy_bl602_cfg_tag cfg;
    uint16_t chnl_prim20_freq;
    uint16_t chnl_center1_freq;
    uint16_t chnl_center2_freq;
    uint8_t band;
    uint8_t chnl_type;
};

typedef struct lwip_cyclic_timer.conflict59 lwip_cyclic_timer.conflict59, *Plwip_cyclic_timer.conflict59;

struct lwip_cyclic_timer.conflict59 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer lwip_cyclic_timer, *Plwip_cyclic_timer;

typedef void (* lwip_cyclic_timer_handler)(void);

struct lwip_cyclic_timer {
    u32_t interval_ms;
    lwip_cyclic_timer_handler handler;
};

typedef struct lwip_cyclic_timer.conflict lwip_cyclic_timer.conflict, *Plwip_cyclic_timer.conflict;

struct lwip_cyclic_timer.conflict {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict2 lwip_cyclic_timer.conflict2, *Plwip_cyclic_timer.conflict2;

struct lwip_cyclic_timer.conflict2 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict18 lwip_cyclic_timer.conflict18, *Plwip_cyclic_timer.conflict18;

struct lwip_cyclic_timer.conflict18 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict31 lwip_cyclic_timer.conflict31, *Plwip_cyclic_timer.conflict31;

struct lwip_cyclic_timer.conflict31 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict48 lwip_cyclic_timer.conflict48, *Plwip_cyclic_timer.conflict48;

struct lwip_cyclic_timer.conflict48 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict1 lwip_cyclic_timer.conflict1, *Plwip_cyclic_timer.conflict1;

struct lwip_cyclic_timer.conflict1 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict9 lwip_cyclic_timer.conflict9, *Plwip_cyclic_timer.conflict9;

struct lwip_cyclic_timer.conflict9 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict8 lwip_cyclic_timer.conflict8, *Plwip_cyclic_timer.conflict8;

struct lwip_cyclic_timer.conflict8 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict7 lwip_cyclic_timer.conflict7, *Plwip_cyclic_timer.conflict7;

struct lwip_cyclic_timer.conflict7 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict6 lwip_cyclic_timer.conflict6, *Plwip_cyclic_timer.conflict6;

struct lwip_cyclic_timer.conflict6 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict5 lwip_cyclic_timer.conflict5, *Plwip_cyclic_timer.conflict5;

struct lwip_cyclic_timer.conflict5 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict4 lwip_cyclic_timer.conflict4, *Plwip_cyclic_timer.conflict4;

struct lwip_cyclic_timer.conflict4 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict43 lwip_cyclic_timer.conflict43, *Plwip_cyclic_timer.conflict43;

struct lwip_cyclic_timer.conflict43 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict60 lwip_cyclic_timer.conflict60, *Plwip_cyclic_timer.conflict60;

struct lwip_cyclic_timer.conflict60 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict23 lwip_cyclic_timer.conflict23, *Plwip_cyclic_timer.conflict23;

struct lwip_cyclic_timer.conflict23 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict55 lwip_cyclic_timer.conflict55, *Plwip_cyclic_timer.conflict55;

struct lwip_cyclic_timer.conflict55 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict38 lwip_cyclic_timer.conflict38, *Plwip_cyclic_timer.conflict38;

struct lwip_cyclic_timer.conflict38 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict44 lwip_cyclic_timer.conflict44, *Plwip_cyclic_timer.conflict44;

struct lwip_cyclic_timer.conflict44 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict11 lwip_cyclic_timer.conflict11, *Plwip_cyclic_timer.conflict11;

struct lwip_cyclic_timer.conflict11 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict22 lwip_cyclic_timer.conflict22, *Plwip_cyclic_timer.conflict22;

struct lwip_cyclic_timer.conflict22 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict27 lwip_cyclic_timer.conflict27, *Plwip_cyclic_timer.conflict27;

struct lwip_cyclic_timer.conflict27 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict51 lwip_cyclic_timer.conflict51, *Plwip_cyclic_timer.conflict51;

struct lwip_cyclic_timer.conflict51 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct sys_timeo sys_timeo, *Psys_timeo;

struct sys_timeo {
    struct sys_timeo * next;
    u32_t time;
    void (* h)(void *);
    void * arg;
};

typedef struct lwip_cyclic_timer.conflict17 lwip_cyclic_timer.conflict17, *Plwip_cyclic_timer.conflict17;

struct lwip_cyclic_timer.conflict17 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict39 lwip_cyclic_timer.conflict39, *Plwip_cyclic_timer.conflict39;

struct lwip_cyclic_timer.conflict39 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict15 lwip_cyclic_timer.conflict15, *Plwip_cyclic_timer.conflict15;

struct lwip_cyclic_timer.conflict15 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict16 lwip_cyclic_timer.conflict16, *Plwip_cyclic_timer.conflict16;

struct lwip_cyclic_timer.conflict16 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict19 lwip_cyclic_timer.conflict19, *Plwip_cyclic_timer.conflict19;

struct lwip_cyclic_timer.conflict19 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict10 lwip_cyclic_timer.conflict10, *Plwip_cyclic_timer.conflict10;

struct lwip_cyclic_timer.conflict10 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict13 lwip_cyclic_timer.conflict13, *Plwip_cyclic_timer.conflict13;

struct lwip_cyclic_timer.conflict13 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict14 lwip_cyclic_timer.conflict14, *Plwip_cyclic_timer.conflict14;

struct lwip_cyclic_timer.conflict14 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict12 lwip_cyclic_timer.conflict12, *Plwip_cyclic_timer.conflict12;

struct lwip_cyclic_timer.conflict12 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict40 lwip_cyclic_timer.conflict40, *Plwip_cyclic_timer.conflict40;

struct lwip_cyclic_timer.conflict40 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict56 lwip_cyclic_timer.conflict56, *Plwip_cyclic_timer.conflict56;

struct lwip_cyclic_timer.conflict56 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict28 lwip_cyclic_timer.conflict28, *Plwip_cyclic_timer.conflict28;

struct lwip_cyclic_timer.conflict28 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict29 lwip_cyclic_timer.conflict29, *Plwip_cyclic_timer.conflict29;

struct lwip_cyclic_timer.conflict29 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict26 lwip_cyclic_timer.conflict26, *Plwip_cyclic_timer.conflict26;

struct lwip_cyclic_timer.conflict26 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict20 lwip_cyclic_timer.conflict20, *Plwip_cyclic_timer.conflict20;

struct lwip_cyclic_timer.conflict20 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict21 lwip_cyclic_timer.conflict21, *Plwip_cyclic_timer.conflict21;

struct lwip_cyclic_timer.conflict21 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict24 lwip_cyclic_timer.conflict24, *Plwip_cyclic_timer.conflict24;

struct lwip_cyclic_timer.conflict24 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict25 lwip_cyclic_timer.conflict25, *Plwip_cyclic_timer.conflict25;

struct lwip_cyclic_timer.conflict25 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict34 lwip_cyclic_timer.conflict34, *Plwip_cyclic_timer.conflict34;

struct lwip_cyclic_timer.conflict34 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict37 lwip_cyclic_timer.conflict37, *Plwip_cyclic_timer.conflict37;

struct lwip_cyclic_timer.conflict37 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict32 lwip_cyclic_timer.conflict32, *Plwip_cyclic_timer.conflict32;

struct lwip_cyclic_timer.conflict32 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict30 lwip_cyclic_timer.conflict30, *Plwip_cyclic_timer.conflict30;

struct lwip_cyclic_timer.conflict30 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict35 lwip_cyclic_timer.conflict35, *Plwip_cyclic_timer.conflict35;

struct lwip_cyclic_timer.conflict35 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict36 lwip_cyclic_timer.conflict36, *Plwip_cyclic_timer.conflict36;

struct lwip_cyclic_timer.conflict36 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict33 lwip_cyclic_timer.conflict33, *Plwip_cyclic_timer.conflict33;

struct lwip_cyclic_timer.conflict33 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict49 lwip_cyclic_timer.conflict49, *Plwip_cyclic_timer.conflict49;

struct lwip_cyclic_timer.conflict49 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict42 lwip_cyclic_timer.conflict42, *Plwip_cyclic_timer.conflict42;

struct lwip_cyclic_timer.conflict42 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict41 lwip_cyclic_timer.conflict41, *Plwip_cyclic_timer.conflict41;

struct lwip_cyclic_timer.conflict41 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict46 lwip_cyclic_timer.conflict46, *Plwip_cyclic_timer.conflict46;

struct lwip_cyclic_timer.conflict46 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict47 lwip_cyclic_timer.conflict47, *Plwip_cyclic_timer.conflict47;

struct lwip_cyclic_timer.conflict47 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict45 lwip_cyclic_timer.conflict45, *Plwip_cyclic_timer.conflict45;

struct lwip_cyclic_timer.conflict45 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict53 lwip_cyclic_timer.conflict53, *Plwip_cyclic_timer.conflict53;

struct lwip_cyclic_timer.conflict53 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict54 lwip_cyclic_timer.conflict54, *Plwip_cyclic_timer.conflict54;

struct lwip_cyclic_timer.conflict54 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict52 lwip_cyclic_timer.conflict52, *Plwip_cyclic_timer.conflict52;

struct lwip_cyclic_timer.conflict52 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict57 lwip_cyclic_timer.conflict57, *Plwip_cyclic_timer.conflict57;

struct lwip_cyclic_timer.conflict57 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict58 lwip_cyclic_timer.conflict58, *Plwip_cyclic_timer.conflict58;

struct lwip_cyclic_timer.conflict58 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict50 lwip_cyclic_timer.conflict50, *Plwip_cyclic_timer.conflict50;

struct lwip_cyclic_timer.conflict50 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef enum raw_input_state {
    RAW_INPUT_DELIVERED=2,
    RAW_INPUT_EATEN=1,
    RAW_INPUT_NONE=0
} raw_input_state;

typedef enum raw_input_state raw_input_state_t;

typedef enum memp_t {
    MEMP_ALTCP_PCB=5,
    MEMP_IGMP_GROUP=10,
    MEMP_MAX=15,
    MEMP_NETBUF=6,
    MEMP_NETCONN=7,
    MEMP_NETDB=12,
    MEMP_PBUF=13,
    MEMP_PBUF_POOL=14,
    MEMP_RAW_PCB=0,
    MEMP_SYS_TIMEOUT=11,
    MEMP_TCPIP_MSG_API=8,
    MEMP_TCPIP_MSG_INPKT=9,
    MEMP_TCP_PCB=2,
    MEMP_TCP_PCB_LISTEN=3,
    MEMP_TCP_SEG=4,
    MEMP_UDP_PCB=1
} memp_t;

typedef struct bl_mtd_handle_priv bl_mtd_handle_priv, *Pbl_mtd_handle_priv;

struct bl_mtd_handle_priv {
    char name[16];
    int id;
    uint offset;
    uint size;
    void * xip_addr;
};

typedef struct bl_mtd_handle_priv * bl_mtd_handle_priv_t;

typedef enum LOG_BUF_OUT_DATA_TYPE {
    LOG_BUF_OUT_DATA_TYPE_HEX=0,
    LOG_BUF_OUT_DATA_TYPE_INT8=1,
    LOG_BUF_OUT_DATA_TYPE_UNT8=2
} LOG_BUF_OUT_DATA_TYPE;

typedef enum LOG_BUF_OUT_DATA_TYPE LOG_BUF_OUT_DATA_TYPE_T;

typedef int __gcc_CMPtype;


// WARNING! conflicting data type names: /DWARF/err.h/anon_enum_8 - /DWARF/debug.c/vsnprintf/anon_enum_8

typedef uint __uintptr_t;

typedef uchar __uint8_t;

typedef char __int8_t;

typedef long __int32_t;

typedef struct bl_env_tag bl_env_tag, *Pbl_env_tag;

struct bl_env_tag {
    uint8_t prev_hw_state;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    int hw_in_doze;
};

typedef struct t_hdr t_hdr, *Pt_hdr;

struct t_hdr {
    struct t_hdr * next;
    u16_t ping_seq;
    undefined field_0x6;
    undefined field_0x7;
    u32_t send_time;
};

typedef struct ping_var ping_var, *Pping_var;

struct ping_var {
    u32_t total_count;
    u32_t requests_count;
    u16_t interval;
    u16_t data_size;
    u16_t seq_num;
    u16_t id;
    u16_t timeout;
    u8_t node_num;
    undefined field_0x13;
    ip_addr_t dest;
    utils_memp_pool_t * pool;
    struct raw_pcb * pcb;
    struct utils_list req_list;
};

typedef struct SubscriptionRecord_t SubscriptionRecord_t, *PSubscriptionRecord_t;

struct SubscriptionRecord_t {
    char Topic[80];
    uint8_t count;
    _Bool isFree;
    _Bool isSticky;
};

typedef struct JsonTokenTable_t JsonTokenTable_t, *PJsonTokenTable_t;

struct JsonTokenTable_t {
    char * pKey;
    void * pStruct;
    void (* callback)(char *, uint32_t, jsonStruct_t *);
    _Bool isFree;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
};

typedef struct ToBeReceivedAckRecord_t ToBeReceivedAckRecord_t, *PToBeReceivedAckRecord_t;

struct ToBeReceivedAckRecord_t {
    char clientTokenID[90];
    char thingName[20];
    enum ShadowActions_t action;
    undefined field_0x6f;
    void (* callback)(char *, enum ShadowActions_t, enum Shadow_Ack_Status_t, char *, void *);
    void * pCallbackContext;
    _Bool isFree;
    undefined field_0x79;
    undefined field_0x7a;
    undefined field_0x7b;
    struct Timer timer;
};

typedef enum ShadowAckTopicTypes_t {
    SHADOW_ACCEPTED=0,
    SHADOW_ACTION=2,
    SHADOW_REJECTED=1
} ShadowAckTopicTypes_t;


// WARNING! conflicting data type names: /stddef.h/size_t - /DWARF/stddef.h/size_t

typedef struct __locale_data __locale_data, *P__locale_data;

struct __locale_data {
};

typedef struct __locale_struct __locale_struct, *P__locale_struct;

struct __locale_struct {
    struct __locale_data * __locales[13];
    ushort * __ctype_b;
    int * __ctype_tolower;
    int * __ctype_toupper;
    char * __names[13];
};


// WARNING! conflicting data type names: /xlocale.h/__locale_t - /DWARF/_UNCATEGORIZED_/__locale_t

typedef struct astruct astruct, *Pastruct;

struct astruct {
};

typedef struct astruct_1 astruct_1, *Pastruct_1;

struct astruct_1 {
};

typedef enum Elf_ProgramHeaderType {
    PT_DYNAMIC=2,
    PT_GNU_EH_FRAME=1685382480,
    PT_GNU_RELRO=1685382482,
    PT_GNU_STACK=1685382481,
    PT_INTERP=3,
    PT_LOAD=1,
    PT_NOTE=4,
    PT_NULL=0,
    PT_PHDR=6,
    PT_SHLIB=5,
    PT_TLS=7
} Elf_ProgramHeaderType;

typedef struct Elf32_Shdr Elf32_Shdr, *PElf32_Shdr;

typedef enum Elf_SectionHeaderType {
    SHT_CHECKSUM=1879048184,
    SHT_DYNAMIC=6,
    SHT_DYNSYM=11,
    SHT_FINI_ARRAY=15,
    SHT_GNU_ATTRIBUTES=1879048181,
    SHT_GNU_HASH=1879048182,
    SHT_GNU_LIBLIST=1879048183,
    SHT_GNU_verdef=1879048189,
    SHT_GNU_verneed=1879048190,
    SHT_GNU_versym=1879048191,
    SHT_GROUP=17,
    SHT_HASH=5,
    SHT_INIT_ARRAY=14,
    SHT_NOBITS=8,
    SHT_NOTE=7,
    SHT_NULL=0,
    SHT_PREINIT_ARRAY=16,
    SHT_PROGBITS=1,
    SHT_REL=9,
    SHT_RELA=4,
    SHT_SHLIB=10,
    SHT_STRTAB=3,
    SHT_SUNW_COMDAT=1879048187,
    SHT_SUNW_move=1879048186,
    SHT_SUNW_syminfo=1879048188,
    SHT_SYMTAB=2,
    SHT_SYMTAB_SHNDX=18
} Elf_SectionHeaderType;

struct Elf32_Shdr {
    dword sh_name;
    enum Elf_SectionHeaderType sh_type;
    dword sh_flags;
    dword sh_addr;
    dword sh_offset;
    dword sh_size;
    dword sh_link;
    dword sh_info;
    dword sh_addralign;
    dword sh_entsize;
};

typedef struct Elf32_Sym Elf32_Sym, *PElf32_Sym;

struct Elf32_Sym {
    dword st_name;
    dword st_value;
    dword st_size;
    byte st_info;
    byte st_other;
    word st_shndx;
};

typedef struct Elf32_Phdr Elf32_Phdr, *PElf32_Phdr;

struct Elf32_Phdr {
    enum Elf_ProgramHeaderType p_type;
    dword p_offset;
    dword p_vaddr;
    dword p_paddr;
    dword p_filesz;
    dword p_memsz;
    dword p_flags;
    dword p_align;
};

typedef struct Elf32_Ehdr Elf32_Ehdr, *PElf32_Ehdr;

struct Elf32_Ehdr {
    byte e_ident_magic_num;
    char e_ident_magic_str[3];
    byte e_ident_class;
    byte e_ident_data;
    byte e_ident_version;
    byte e_ident_pad[9];
    word e_type;
    word e_machine;
    dword e_version;
    dword e_entry;
    dword e_phoff;
    dword e_shoff;
    dword e_flags;
    word e_ehsize;
    word e_phentsize;
    word e_phnum;
    word e_shentsize;
    word e_shnum;
    word e_shstrndx;
};




void bl602_start(void);
err_t cb_httpc_headers_done_fn(httpc_state_t *connection,void *arg,pbuf *hdr,u16_t hdr_len,u32_t content_len);
void cb_httpc_result(void *arg,httpc_result_t httpc_result,u32_t rx_content_len,u32_t srv_res,err_t err);
err_t cb_altcp_recv_fn(void *arg,altcp_pcb *conn,pbuf *p,err_t err);
void cmd_stack_wifi(char *buf,int len,int argc,char **argv);
void cmd_exception_illegal_ins(char *buf,int len,int argc,char **argv);
void cmd_exception_store(char *buf,int len,int argc,char **argv);
void cmd_exception_l_illegal(char *buf,int len,int argc,char **argv);
void cmd_exception_load(char *buf,int len,int argc,char **argv);
void cmd_dma(void);
undefined4 cmd_cks(void);
int cmd_aes(void);
int cmd_trng(void);
int cmd_sha(void);
void cmd_wifi(void);
int cmd_pka(void);
void cmd_aws(char *buf,int len,int argc,char **argv);
void proc_hellow_entry(void *pvParameters);
uchar char_to_hex(char asccode);
void cmd_httpc_test(char *buf,int len,int argc,char **argv);
int get_dts_addr(char *name);
int client_demo(void);
int http_test_cmd(void);
void aos_loop_proc(void *pvParameters);
void vApplicationStackOverflowHook(TaskHandle_t xTask,char *pcTaskName);
void vApplicationMallocFailedHook(void);
void vApplicationIdleHook(void);
int check_dts_config(char *ssid,char *password);
void _connect_wifi(undefined4 param_1);
void event_cb_wifi_event(input_event_t *event,void *private_data);
void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,StackType_t **ppxIdleTaskStackBuffer,uint32_t *pulIdleTaskStackSize);
void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,StackType_t **ppxTimerTaskStackBuffer,uint32_t *pulTimerTaskStackSize);
void vAssertCalled(void);
void bfl_main(void);
void ShadowUpdateStatusCallback(char *pThingName,ShadowActions_t action,Shadow_Ack_Status_t status,char *pReceivedJsonDocument,void *pContextData);
void windowActuate_Callback(char *pJsonString,uint32_t JsonStringDataLen,jsonStruct_t *pContext);
void cmd_coex_dump(char *buf,int len,int argc,char **argv);
int codex_debug_cli_init(void);
void mm_rx_filter_set(void);
int element_notify_status_enabled(cfg_element_entry *entry,void *arg1,void *arg2,CFG_ELEMENT_TYPE_OPS ops);
void blmac_ap_setf(uint8_t ap);
uchar ascii_to_hex(char asccode);
undefined4 element_notify_time_last_received_set(void);
void blmac_encr_cntrl_pack(uint8_t newread,uint8_t newwrite,uint16_t keyindexram,uint8_t ctyperam,uint8_t vlanidram,uint8_t sppram,uint8_t usedefkeyram,uint8_t clenram);
undefined4 element_notify_keepalive_received(void);
uint32_t hal_machw_rx_duration(rx_hd *rhd,uint16_t len);
void mm_env_max_ampdu_duration_set(void);
void mm_env_init(void);
void mm_init(void);
void mm_active(void);
void mm_reset(void);
uint8_t mm_sec_machwaddr_wr(uint8_t sta_idx,uint8_t inst_nbr);
void mm_sec_keydump(void);
uint8_t mm_sec_machwkey_wr(mm_key_add_req *param);
void mm_sec_machwkey_del(uint8_t hw_key_idx);
void mm_sec_machwaddr_del(uint8_t sta_idx);
void mm_hw_idle_evt(int dummy);
void mm_hw_info_set(mac_addr *mac_addr);
void mm_hw_ap_info_set(void);
void mm_hw_ap_info_reset(void);
void mm_back_to_host_idle(void);
uint8_t mm_sta_add(mm_sta_add_req *param,uint8_t *sta_idx,uint8_t *hw_sta_idx);
void mm_sta_del(uint8_t sta_idx);
void mm_cfg_element_keepalive_timestamp_update(void);
void mm_send_connection_loss_ind(vif_info_tag *p_vif_entry);
void mm_ap_probe_cfm(void *env,uint32_t status);
void mm_check_rssi(vif_info_tag *vif_entry,int8_t rssi);
void mm_send_csa_traffic_ind(uint8_t vif_index,_Bool enable);
uint mm_check_beacon(rx_hd *param_1,vif_info_tag *param_2,int param_3,char **param_4);
void mm_sta_tbtt(void *env);
uint16_t mm_get_rsn_wpa_ie(uint8_t sta_id,uint8_t *wpa_ie);
void mm_tim_update_proceed(ushort *param_1);
void mm_bcn_init(void);
void mm_bcn_init_vif(vif_info_tag *vif_entry);
void mm_tim_update(mm_tim_update_req *param);
void mm_bcn_transmit(void);
void mm_bcn_updated(void *env,int dma_queue);
void mm_bcn_update(mm_bcn_change_req *param);
void mm_bcn_transmitted(vif_info_tag *param_1);
void mm_bcn_change(mm_bcn_change_req *param);
_Bool cmp_abs_time(co_list_hdr *timerA,co_list_hdr *timerB);
void mm_timer_init(void);
void mm_timer_set(mm_timer_tag *timer,uint32_t value);
void mm_timer_clear(mm_timer_tag *timer);
void mm_timer_schedule(int dummy);
void ps_uapsd_timer_handle(void *env);
void blmac_pwr_mgt_setf(uint8_t pwrmgt);
void ps_dpsm_update(_Bool pause);
uint8_t ps_send_pspoll(vif_info_tag *vif_entry);
void ps_init(void);
void ps_set_mode(uint8_t mode,ke_task_id_t taskid);
void ps_enable_cfm(void *env,uint32_t status);
void ps_disable_cfm(void *env,uint32_t status);
uint8_t ps_polling_frame(vif_info_tag *vif_entry);
void ps_check_beacon(int param_1,vif_info_tag *param_2);
void ps_check_frame(uint8_t *frame,uint32_t statinfo,vif_info_tag *vif_entry);
void ps_check_tx_frame(uint8_t staid,uint8_t tid);
void ps_uapsd_set(vif_info_tag *vif_entry,uint8_t hw_queue,_Bool uapsd);
void ps_traffic_status_update(uint8_t vif_index,uint8_t new_status);
void mm_ps_change_ind(uint8_t sta_idx,uint8_t ps_state);
void rxl_mpdu_transfer(rx_swdesc *swdesc);
void rxl_init(void);
void rxl_cntrl_dump(void);
void rxl_timer_int_handler(void);
void rxl_timeout_int_handler(void);
void rxl_dma_int_handler(void);
void rxl_dma_evt(int dummy);
void rxl_frame_release(rx_swdesc *swdesc);
void rxl_mpdu_free(rx_swdesc *swdesc);
void bl60x_firmwre_mpdu_free(void *swdesc_ptr);
void rxl_reset(void);
void rxl_hwdesc_dump(void);
void rxl_hwdesc_init(int init);
void rxl_hd_append(rx_dmadesc *desc);
void rxl_pd_append(rx_pbd *first,rx_pbd *last,rx_pbd *spare);
void scan_search_ds(void);
void scan_init(void);
void scan_set_channel_request(void);
void dma_cb(void *env,int dma_queue);
void scan_ie_download(scan_start_req *param);
void scan_probe_req_tx(void);
void scan_send_cancel_cfm(uint8_t status,ke_task_id_t dest_id);
void sta_mgmt_entry_init(sta_info_tag *sta_entry);
void sta_mgmt_init(void);
uint8_t sta_mgmt_register(mm_sta_add_req *param,uint8_t *sta_idx);
void sta_mgmt_unregister(uint8_t sta_idx);
void sta_mgmt_add_key(mm_key_add_req *param,uint8_t hw_key_idx);
void sta_mgmt_del_key(sta_info_tag *sta);
int sta_mgmt_send_postponed_frame(vif_info_tag *p_vif_entry,sta_info_tag *p_sta_entry,int limit);
void td_timer_end(void *env);
void td_reset(uint8_t vif_index);
void td_init(void);
void td_start(uint8_t vif_index);
void td_pck_ind(uint8_t vif_index,uint8_t sta_index,_Bool rx);
void td_pck_ps_ind(uint8_t vif_index,_Bool rx);
void bl_tpc_update_power_table(int8_t *power_table);
void bl_tpc_power_table_get(int8_t *power_table_config);
void bl_tpc_update_power_rate_11b(int8_t *power_rate_table);
void bl_tpc_update_power_rate_11g(int8_t *power_rate_table);
void bl_tpc_update_power_rate_11n(int8_t *power_rate_table);
void tpc_update_tx_power(int8_t pwr);
void tpc_update_vif_tx_power(vif_info_tag *vif,int8_t *pwr,uint8_t *idx);
uint8_t tpc_get_vif_tx_power_vs_rate(uint32_t rate_config);
void tpc_update_frame_tx_power(vif_info_tag *vif,txl_frame_desc_tag *frame);
void txl_int_fake_transfer(txdesc *txdesc,uint8_t access_category);
void blmac_abs_timer_set(int reg_idx,uint32_t value);
void txl_machdr_format(uint32_t machdrptr);
void txl_cntrl_init(void);
_Bool txl_cntrl_tx_check(vif_info_tag *p_vif_entry);
void txl_cntrl_halt_ac(uint8_t access_category);
void txl_cntrl_flush_ac(uint8_t access_category,uint32_t status);
void txl_cntrl_inc_pck_cnt(void);
void txl_payload_handle(void);
void txl_payload_handle_backup(void);
void txl_transmit_trigger(void);
void txl_reset(void);
void txl_cntrl_env_dump(void);
void txl_frame_init_desc(txl_frame_desc_tag *frame,txl_buffer_tag *buffer,tx_hw_desc *hwdesc,txl_buffer_control *bufctrl);
void txl_frame_init(_Bool reset);
txl_frame_desc_tag * txl_frame_get(int type,int len);
_Bool txl_frame_push(txl_frame_desc_tag *frame,uint8_t ac);
_Bool txl_frame_push_force(txl_frame_desc_tag *frame,uint8_t ac);
void txl_frame_cfm(txdesc *txdesc);
void txl_frame_release(txdesc *txdesc,_Bool postponed);
uint8_t txl_frame_send_null_frame(uint8_t sta_idx,cfm_func_ptr *cfm,void *env);
uint8_t txl_frame_send_qosnull_frame(uint8_t sta_idx,uint16_t qos,cfm_func_ptr *cfm,void *env);
uint8_t txl_frame_send_eapol_frame(uint8_t sta_idx,cfm_func_ptr *cfm,void *cfm_env,uint8_t *pBuf,uint32_t pBuf_len);
void txl_frame_dump(void);
void txl_hwdesc_init(void);
void txl_hwdesc_reset(void);
void vif_mgmt_bcn_to_evt(void *env);
void vif_mgmt_init(void);
uint8_t vif_mgmt_register(mac_addr *mac_addr,uint8_t vif_type,_Bool p2p,uint8_t *vif_idx);
void vif_mgmt_unregister(uint8_t vif_idx);
void vif_mgmt_add_key(mm_key_add_req *param,uint8_t hw_key_idx);
void vif_mgmt_del_key(vif_info_tag *vif,uint8_t keyid);
void vif_mgmt_send_postponed_frame(vif_info_tag *p_vif_entry);
void vif_mgmt_reset(void);
void vif_mgmt_bcn_to_prog(vif_info_tag *p_vif_entry);
void vif_mgmt_bcn_recv(vif_info_tag *p_vif_entry);
void vif_mgmt_switch_channel(vif_info_tag *p_vif_entry);
vif_info_tag * vif_mgmt_get_first_ap_inf(void);
void me_init(void);
scan_chan_tag * me_freq_to_chan_ptr(uint8_t band,uint16_t freq);
void michael_block(mic_calc *mic_calc_ptr,uint32_t block);
void me_mic_init(mic_calc *mic_calc_ptr,uint32_t *mic_key_ptr,mac_addr *da,mac_addr *sa,uint8_t tid);
void me_mic_calc(mic_calc *mic_calc_ptr,uint32_t start_ptr,uint32_t data_len);
void me_mic_end(mic_calc *mic_calc_ptr);
_Bool me_set_sta_ht_vht_param(sta_info_tag *sta,mac_bss_info *bss);
uint8_t me_11n_nss_max(uint8_t *mcs_set);
uint8_t me_legacy_ridx_min(uint16_t rate_map);
uint8_t me_legacy_ridx_max(uint16_t rate_map);
uint8_t me_rate_translate(uint8_t rate);
void me_get_basic_rates(mac_rateset *rateset,mac_rateset *basic_ratest);
uint16_t me_legacy_rate_bitfield_build(mac_rateset *rateset,_Bool basic_only);
uint16_t me_build_capability(uint8_t vif_idx);
void me_init_bcmc_rate(sta_info_tag *sta_entry);
void me_tx_cfm_singleton(txdesc *txdesc);
void me_check_rc(uint8_t sta_idx,_Bool *tx_ampdu);
void me_init_rate(sta_info_tag *sta_entry);
void me_bw_check(int param_1,int param_2);
void me_beacon_check(uint8_t vif_idx,uint16_t length,uint32_t bcn_addr);
void me_sta_bw_nss_max_upd(uint8_t sta_idx,uint8_t bw,uint8_t nss);
uint8_t me_add_chan_ctx(uint8_t *p_chan_idx,scan_chan_tag *p_chan,uint32_t center_freq1,uint32_t center_freq2,uint8_t ch_width);
uint8_t rc_get_nss(uint16_t rate_config);
uint8_t rc_get_mcs_index(uint16_t rate_config);
uint16_t rc_set_previous_mcs_index(rc_sta_stats *rc_ss,uint16_t rate_config);
uint16_t rc_set_next_mcs_index(rc_sta_stats *rc_ss,uint16_t rate_config);
_Bool is_cck_group(uint16_t rate_config);
void rc_update_retry_chain(rc_sta_stats *rc_ss,uint32_t *cur_tp);
uint16_t rc_get_lowest_rate_config(rc_sta_stats *rc_ss);
void rc_sort_samples_tp(rc_sta_stats *rc_ss,uint32_t *cur_tp);
uint16_t rc_get_initial_rate_config(rc_sta_stats *rc_ss);
void rc_calc_prob_ewma(rc_rate_stats *rc_rs);
_Bool rc_check_valid_rate(rc_sta_stats *rc_ss,uint16_t rate_config);
uint16_t rc_new_random_rate(rc_sta_stats *rc_ss);
void rc_update_counters(uint8_t sta_idx,uint32_t attempts,uint32_t failures,_Bool tx_ampdu,_Bool retry_required);
uint32_t rc_get_duration(uint param_1);
void rc_update_bw_nss_max(uint8_t sta_idx,uint8_t bw_max,uint8_t nss_max);
void rc_init_bcmc_rate(sta_info_tag *sta_entry,uint8_t basic_rate_idx);
_Bool rc_check_fixed_rate_config(rc_sta_stats *rc_ss,uint16_t fixed_rate_config);
uint32_t rc_calc_tp(rc_sta_stats *rc_ss,uint8_t sample_idx);
_Bool rc_update_stats(rc_sta_stats *rc_ss,_Bool init);
void rc_init(sta_info_tag *sta_entry);
void rc_check(uint8_t sta_idx,_Bool *tx_ampdu);
uint8_t rxu_cntrl_machdr_len_get(uint16_t frame_cntl);
_Bool rxu_cntrl_protected_handle(uint8_t *frame,uint32_t statinfo);
undefined4 rxu_mgt_frame_check(rx_swdesc *param_1,uint param_2);
void rxu_cntrl_init(void);
void rxu_cntrl_monitor_pm(mac_addr *addr);
uint8_t rxu_cntrl_get_pm(void);
void rxu_cntrl_evt(int dummy);
void rxu_swdesc_upload_evt(int arg);
void scanu_confirm(uint8_t status);
void scanu_raw_send_cfm(uint8_t status,ke_task_id_t dst_id);
void scanu_init(void);
mac_scan_result * scanu_find_result(mac_addr *bssid_ptr,_Bool allocate);
undefined4 scanu_frame_handler(ushort *param_1);
mac_scan_result * scanu_search_by_bssid(mac_addr *bssid);
mac_scan_result * scanu_search_by_ssid(mac_ssid *ssid,int *idx);
void scanu_rm_exist_ssid(mac_ssid *ssid,int index);
void scanu_scan_next(void);
void scanu_dma_cb(void);
void scanu_start(void);
uint16_t txl_get_seq_ctrl(void);
void sm_delete_resources(vif_info_tag *vif);
void sm_frame_tx_cfm_handler(void *env,uint32_t status);
void sm_init(void);
void sm_get_bss_params(mac_addr **bssid,scan_chan_tag **chan);
void sm_scan_bss(mac_addr *bssid,scan_chan_tag *chan_1);
void sm_join_bss(mac_addr *bssid,scan_chan_tag *chan,_Bool passive);
uint8_t sm_add_chan_ctx(uint8_t *p_chan_idx);
void sm_send_next_bss_param(void);
void sm_set_bss_param(void);
void sm_disconnect_process(vif_info_tag *vif,uint16_t reason);
void sm_deauth_cfm(void *env,uint32_t status);
void sm_disconnect(uint8_t vif_index,uint16_t reason_code);
void sm_connect_ind(uint16_t status);
void sm_supplicant_deauth_cfm(void *env,uint32_t status);
void sm_auth_send(uint16_t auth_seq,uint32_t *challenge);
void sm_assoc_req_send(void);
void sm_assoc_done(uint16_t aid);
void sm_auth_handler(rxu_mgt_ind *param);
void sm_assoc_rsp_handler(rxu_mgt_ind *param);
int sm_deauth_handler(rxu_mgt_ind *param);
void sm_handle_supplicant_result(uint8_t sta_id,uint16_t reason_code);
undefined2 * txu_cntrl_sec_hdr_append(int param_1,undefined2 *param_2,int param_3);
int txu_cntrl_sechdr_len_compute(txdesc *txdesc,int *tail_len);
void txu_cntrl_frame_build(txdesc *txdesc,uint32_t buf);
void txu_cntrl_tkip_mic_append(txdesc *txdesc,uint8_t ac);
void txu_cntrl_cfm(txdesc *txdesc);
void txu_cntrl_protect_mgmt_frame(txdesc *txdesc,uint32_t frame,uint16_t hdr_len);
int _aid_list_delete(uint8_t *mac);
void apm_sta_delete(uint8_t sta_idx,uint8_t *mac);
void apm_tx_cfm_handler(uint8_t *param_1,int param_2);
void apm_init(void);
void apm_start_cfm(int param_1);
void apm_send_next_bss_param(void);
void apm_set_bss_param(void);
void apm_stop(vif_info_tag *vif);
_Bool apm_tx_int_ps_check(txdesc *txdesc);
void apm_tx_int_ps_postpone(txdesc *txdesc,sta_info_tag *sta);
txdesc * apm_tx_int_ps_get_postpone(vif_info_tag *vif,sta_info_tag *sta,int *stop);
void apm_tx_int_ps_clear(vif_info_tag *vif,uint8_t sta_idx);
void apm_sta_fw_delete(uint8_t sta_idx);
void apm_sta_add(uint8_t sta_idx);
void apm_send_mlme(vif_info_tag *vif,uint16_t fctl,mac_addr *ra,cfm_func_ptr *cfm_func,void *env,uint16_t status_code);
_Bool apm_embedded_enabled(vif_info_tag *vif);
void apm_bcn_set(void);
void apm_probe_req_handler(ushort *param_1);
void apm_auth_handler(rxu_mgt_ind *param);
void apm_assoc_req_handler(ushort *param_1,int param_2);
void apm_deauth_handler(rxu_mgt_ind *param);
void apm_disassoc_handler(rxu_mgt_ind *param);
void apm_beacon_handler(rxu_mgt_ind *param);
void apm_sta_remove(uint8_t vif_idx,uint8_t sta_idx);
char * cfg_api_element_dump(void *val,CFG_ELEMENT_TYPE type,char *strs);
int cfg_api_element_general_set(cfg_element_entry *entry,void *arg1,void *arg2);
int cfg_api_element_general_get(cfg_element_entry *entry,void *arg1,void *arg2);
int cfg_api_element_set(uint32_t task,uint32_t element,uint32_t type,void *arg1,void *arg2);
void co_list_init(co_list *list);
void co_list_push_back(co_list *list,co_list_hdr *list_hdr);
void co_list_push_front(co_list *list,co_list_hdr *list_hdr);
co_list_hdr * co_list_pop_front(co_list *list);
void co_list_extract(co_list *list,co_list_hdr *list_hdr);
uint32_t co_list_cnt(co_list *list);
void co_list_insert(co_list *list,co_list_hdr *element,anon_subr__Bool_co_list_hdr_ptr_co_list_hdr_ptr *cmp);
void co_list_insert_after(co_list *list,co_list_hdr *prev_element,co_list_hdr *element);
void co_list_remove(co_list *list,co_list_hdr *prev_element,co_list_hdr *element);
uint32_t co_crc32(uint32_t addr,uint32_t len,uint32_t crc);
void bl_event_handle(int param);
void bl60x_fw_dump_statistic(int forced);
void ke_evt_schedule(void);
void ke_init(void);
void * ke_msg_alloc(ke_msg_id_t id,ke_task_id_t dest_id,ke_task_id_t src_id,uint16_t param_len);
void ke_msg_send(int param_1);
void ke_msg_send_basic(ke_msg_id_t id,ke_task_id_t dest_id,ke_task_id_t src_id);
void ke_msg_forward_and_change_id(void *param_ptr,ke_msg_id_t msg_id,ke_task_id_t dest_id,ke_task_id_t src_id);
_Bool cmp_dest_id(co_list_hdr *msg,uint32_t dest_id);
_Bool ke_task_local(ke_task_id_t id);
ke_msg_func_t * ke_handler_search(ke_msg_id_t msg_id,ke_state_handler *state_handler);
ke_state_t ke_state_get(ke_task_id_t id);
int ke_msg_discard(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int ke_msg_save(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
_Bool cmp_abs_time(co_list_hdr *timerA,co_list_hdr *timerB);
_Bool cmp_timer_id(co_list_hdr *timer,uint32_t timer_task);
void ke_timer_set(ke_msg_id_t timer_id,ke_task_id_t task_id,uint32_t delay);
void ke_timer_clear(ke_msg_id_t timer_id,ke_task_id_t task_id);
void ke_timer_schedule(int dummy);
void bl60x_current_time_us(longlong *time_now);
byte * mac_ie_find(byte *param_1,int param_2,uint param_3);
char * mac_vsie_find(char *param_1,int param_2,int param_3,int param_4);
BufferDesc_t *GetTxEAPOLBuffer(cm_ConnectionInfo_t *connPtr,EAPOL_KeyMsg_Tx_t **ppTxEapol,BufferDesc_t *pBufDesc);
void UpdateEAPOLWcbLenAndTransmit(BufferDesc_t *pBufDesc,UINT16 frameLen);
BOOLEAN keyMgmtProcessMsgExt(keyMgmtInfoSta_t *pKeyMgmtInfoSta,EAPOL_KeyMsg_t *pKeyMsg);
void KeyMgmtInitSta(cm_ConnectionInfo_t *connPtr);
void keyMgmtSta_StartSession(cm_ConnectionInfo_t *connPtr,CHAR *pBssid,UINT8 *pStaAddr);
void init_customApp_mibs(supplicantData_t *suppData);
UINT8 supplicantIsEnabled(void *connectionPtr);
void supplicantInitSession(cm_ConnectionInfo_t *connPtr,CHAR *pSsid,UINT16 len,CHAR *pBssid,UINT8 *pStaAddr);
void supplicantDisable(cm_ConnectionInfo_t *connPtr);
void supplicantEnable(void *connectionPtr,int security_mode,void *mcstCipher,void *ucstCipher,_Bool is_pmf_required);
UINT16 keyMgmtFormatWpaRsnIe(cm_ConnectionInfo_t *connPtr,UINT8 *pos,IEEEtypes_MacAddr_t *pBssid,IEEEtypes_MacAddr_t *pStaAddr,UINT8 *pPmkid,BOOLEAN addPmkid);
Status_e GeneratePWKMsg2(BufferDesc_t *pEAPoLBufDesc,UINT8 *pSNonce,UINT8 *pEAPOLMICKey,UINT8 forceKeyDescVersion);
BOOLEAN KeyMgmtStaHsk_Recvd_PWKMsg1(BufferDesc_t *pEAPoLBufDesc,IEEEtypes_MacAddr_t *sa,IEEEtypes_MacAddr_t *da);
void supplicantInit(supplicantData_t *suppData);
void allocSupplicantData(void *connectionPtr);
UINT16 keyMgmtGetKeySize(cm_ConnectionInfo_t *connPtr,UINT8 isPairwise);
uint8_t add_key_to_mac(cm_ConnectionInfo_t *connPtr,UINT8 pairwise);
BufferReturnNotify_t * keyMgmtKeyGroupTxDone(void);
Status_e GenerateGrpMsg2(BufferDesc_t *pEAPoLBufDesc,keyMgmtInfoSta_t *pKeyMgmtInfoSta);
EAPOL_KeyMsg_t * KeyMgmtStaHsk_Recvd_GrpMsg1(BufferDesc_t *pEAPoLBufDesc);
uint8_t add_mfp_key_to_mac(cm_ConnectionInfo_t *connPtr,UINT8 pairwise);
void keyMgmtPlumbPairwiseKey(cm_ConnectionInfo_t *connPtr);
BufferReturnNotify_t * keyMgmtKeyPairwiseTxDone(void);
Status_e GeneratePWKMsg4(BufferDesc_t *pEAPoLBufDesc,keyMgmtInfoSta_t *pKeyMgmtInfoSta,BOOLEAN groupKeyReceived);
EAPOL_KeyMsg_t * KeyMgmtStaHsk_Recvd_PWKMsg3(BufferDesc_t *pEAPoLBufDesc);
void ProcessKeyMgmtDataSta(BufferDesc_t *pBufDesc,IEEEtypes_MacAddr_t *sa,IEEEtypes_MacAddr_t *da);
UINT8 ProcessEAPoLPkt(BufferDesc_t *bufDesc,IEEEtypes_MacAddr_t *sa,IEEEtypes_MacAddr_t *da);
uchar process_rsn_ie(uint8_t *rsn_ie,Cipher_t *mcstCipher,Cipher_t *ucstCipher,_Bool *is_pmf_required,SecurityMode_t *security_mode,_Bool wpa2_prefered);
uchar process_wpa_ie(uint8_t *wpa_ie,Cipher_t *mcstCipher,Cipher_t *ucstCipher);
void keyMgmtStaRsnSecuredTimeoutHandler(void *env);
void supplicantGenerateRand(UINT8 *dataOut,UINT32 length);
void ComputeEAPOL_MIC(EAPOL_KeyMsg_t *pKeyMsg,UINT16 data_length,UINT8 *MIC_Key,UINT8 MIC_Key_length,UINT8 micKeyDescVersion);
UINT16 keyMgmtGetKeySize_internal(RSNConfig_t *pRsnConfig,UINT8 isPairwise);
int isApReplayCounterFresh(keyMgmtInfoSta_t *pKeyMgmtInfoSta,UINT8 *pRxReplayCount);
void updateApReplayCounter(keyMgmtInfoSta_t *pKeyMgmtStaInfo,UINT8 *pRxReplayCount);
void formEAPOLEthHdr(EAPOL_KeyMsg_Tx_t *pTxEapol,IEEEtypes_MacAddr_t *da,IEEEtypes_MacAddr_t *sa);
BOOLEAN IsEAPOL_MICValid(EAPOL_KeyMsg_t *pKeyMsg,UINT8 *pMICKey);
UINT16 KeyMgmtSta_PopulateEAPOLLengthMic(EAPOL_KeyMsg_Tx_t *pTxEapol,UINT8 *pEAPOLMICKey,UINT8 eapolProtocolVersion,UINT8 forceKeyDescVersion);
KDE_t * parseKeyKDE(IEEEtypes_InfoElementHdr_t *pIe);
KDE_t * parseKeyKDE_DataType(UINT8 *pData,SINT32 dataLen,IEEEtypes_KDEDataType_e KDEDataType);
KDE_t * parseKeyDataGTK(UINT8 *pKey,UINT16 len,KeyData_t *pGRKey);
void KeyMgmtSta_ApplyKEK(EAPOL_KeyMsg_t *pKeyMsg,KeyData_t *pGRKey,UINT8 *EAPOL_Encr_Key);
BOOLEAN KeyMgmtSta_IsRxEAPOLValid(keyMgmtInfoSta_t *pKeyMgmtInfoSta,EAPOL_KeyMsg_t *pKeyMsg);
void KeyMgmtSta_PrepareEAPOLFrame(EAPOL_KeyMsg_Tx_t *pTxEapol,EAPOL_KeyMsg_t *pRxEapol,IEEEtypes_MacAddr_t *da,IEEEtypes_MacAddr_t *sa,UINT8 *pSNonce);
BOOLEAN supplicantAkmIsWpaWpa2(AkmSuite_t *pAkm);
BOOLEAN supplicantAkmIsWpa2(AkmSuite_t *pAkm);
BOOLEAN supplicantAkmIsWpaWpa2Psk(AkmSuite_t *pAkm);
BOOLEAN supplicantAkmUsesKdf(AkmSuite_t *pAkm);
void supplicantConstructContext(IEEEtypes_MacAddr_t *pAddr1,IEEEtypes_MacAddr_t *pAddr2,UINT8 *pNonce1,UINT8 *pNonce2,UINT8 *pContext);
void KeyMgmt_DerivePTK(IEEEtypes_MacAddr_t *pAddr1,IEEEtypes_MacAddr_t *pAddr2,UINT8 *pNonce1,UINT8 *pNonce2,UINT8 *pPTK,UINT8 *pPMK,BOOLEAN use_kdf);
void KeyMgmtSta_DeriveKeys(UINT8 *pPMK,IEEEtypes_MacAddr_t *da,IEEEtypes_MacAddr_t *sa,UINT8 *ANonce,UINT8 *SNonce,UINT8 *EAPOL_MIC_Key,UINT8 *EAPOL_Encr_Key,KeyData_t *newPWKey,BOOLEAN use_kdf);
void SetEAPOLKeyDescTypeVersion(EAPOL_KeyMsg_Tx_t *pTxEapol,BOOLEAN isWPA2,BOOLEAN isKDF,BOOLEAN nonTKIP);
EAPOL_KeyMsg_t *GetKeyMsgNonceFromEAPOL(BufferDesc_t *pEAPoLBufDesc,keyMgmtInfoSta_t *pKeyMgmtInfoSta);
EAPOL_KeyMsg_t *ProcessRxEAPOL_PwkMsg3(BufferDesc_t *pEAPoLBufDesc,keyMgmtInfoSta_t *pKeyMgmtInfoSta);
EAPOL_KeyMsg_t *ProcessRxEAPOL_GrpMsg1(BufferDesc_t *pEAPoLBufDesc,keyMgmtInfoSta_t *pKeyMgmtInfoSta);
void KeyMgmtResetCounter(keyMgmtInfoSta_t *pKeyMgmtInfo);
void keyMgmtSta_StartSession_internal(keyMgmtInfoSta_t *pKeyMgmtInfoSta,UINT32 expiry);
void KeyMgmtSta_InitSession(keyMgmtInfoSta_t *pKeyMgmtInfoSta);
void set_psk(char *pSsid,UINT8 ssidLen,char *phrase);
void remove_psk(char *pSsid,UINT8 ssidLen);
void bl_sha256_crypto_kdf(UINT8 *pKey,UINT8 key_len,char *label,UINT8 label_len,UINT8 *pContext,UINT16 context_len,UINT8 *pOutput,UINT16 output_len);
UINT8 * pmkCacheFindPSK(UINT8 *pSsid,UINT8 ssidLen);
void pmkCacheSetPassphrase(UINT8 *pSsid,UINT8 ssidLen,UINT8 *pPassphrase,UINT8 PassphraseLen);
void pmkCacheInit(void);
void pmkCacheRomInit(void);
pmkElement_t * pmkCacheNewElement(void);
void pmkCacheUpdateReplacementRank(pmkElement_t *pPMKElement);
pmkElement_t * pmkCacheFindPSKElement(UINT8 *pSsid,UINT8 ssidLen);
void pmkCacheAddPSK(UINT8 *pSsid,UINT8 ssidLen,UINT8 *pPSK,UINT8 pPSKLen);
void pmkCacheDeletePSK(UINT8 *pSsid,UINT8 ssidLen);
UINT8 pmkCacheGetHexNibble(UINT8 nibble);
void pmkCacheGeneratePSK(UINT8 *pSsid,UINT8 ssidLen,UINT8 *pPassphrase,UINT8 PassphraseLen,UINT8 *pPSK);
void prepare_key(uchar *key_data_ptr,int key_data_len,rc4_key *key);
void rc4(uchar *buffer_ptr,int buffer_len,int skip,rc4_key *key);
void RC4_Encrypt(uchar *Encr_Key,uchar *IV,ushort iv_length,uchar *Data,ushort data_length,ushort skipBytes);
int sha256_compress(sha256_state *md,UINT8 *msgBuf,UINT8 *pScratchMem);
void sha256_init(sha256_state *md);
void sha256_vector(size_t num_elem,UINT8 **addr,size_t *len,UINT8 *mac,UINT8 *pScratchMem);
void hmac_sha256_vector(UINT8 *key,size_t key_len,size_t num_elem,UINT8 **addr,size_t *len,UINT8 *mac);
void KeyMgmtInit(cm_ConnectionInfo_t *connPtr);
BufferDesc_t *PrepDefaultEapolMsg(cm_ConnectionInfo_t *connPtr,EAPOL_KeyMsg_Tx_t **pTxEapolPtr,BufferDesc_t *pBufDesc);
Status_e GeneratePWKMsg1(cm_ConnectionInfo_t *connPtr,BufferDesc_t *pBufDesc);
Status_e GeneratePWKMsg3(cm_ConnectionInfo_t *connPtr,BufferDesc_t *pBufDesc);
Status_e ProcessPWKMsg4(BufferDesc_t *pBufDesc);
Status_e GenerateApEapolMsg(cm_ConnectionInfo_t *connPtr,keyMgmtState_e msgState,BufferDesc_t *pBufDesc);
Status_e ProcessPWKMsg2(BufferDesc_t *pBufDesc);
BOOLEAN SendEAPOLMsgUsingBufDesc(cm_ConnectionInfo_t *connPtr,BufferDesc_t *pBufDesc);
Status_e ProcessKeyMgmtDataAp(BufferDesc_t *pBufDesc);
void InitStaKeyInfo(void *pConn,SecurityMode_t *secType,Cipher_t *pwCipher,UINT16 staRsnCap,UINT8 akmType);
void RemoveAPKeyInfo(void *pConn);
void InitGroupKey(cm_ConnectionInfo_t *connPtr);
void GenerateGTK_internal(KeyData_t *grpKeyData,UINT8 *nonce,IEEEtypes_Addr_t *StaMacAddr);
void PopulateKeyMsg(EAPOL_KeyMsg_Tx_t *tx_eapol_ptr,Cipher_t *Cipher,UINT16 Type,UINT32 *replay_cnt,UINT8 *Nonce);
void prepareKDE(EAPOL_KeyMsg_Tx_t *tx_eapol_ptr,KeyData_t *grKey,Cipher_t *cipher);
BOOLEAN Encrypt_keyData(EAPOL_KeyMsg_Tx_t *tx_eapol_ptr,UINT8 *EAPOL_Encr_Key,Cipher_t *cipher);
void KeyMgmtAp_DerivePTK(UINT8 *pPMK,IEEEtypes_MacAddr_t *da,IEEEtypes_MacAddr_t *sa,UINT8 *ANonce,UINT8 *SNonce,UINT8 *EAPOL_MIC_Key,UINT8 *EAPOL_Encr_Key,KeyData_t *newPWKey,BOOLEAN use_kdf);
BOOLEAN KeyData_CopyWPAWP2(EAPOL_KeyMsg_Tx_t *pTxEAPOL,void *pIe);
BOOLEAN KeyData_UpdateKeyMaterial(EAPOL_KeyMsg_Tx_t *pTxEAPOL,SecurityMode_t *pSecType,void *pWPA,void *pWPA2);
void ROM_InitGTK(KeyData_t *grpKeyData,UINT8 *nonce,IEEEtypes_Addr_t *StaMacAddr);
void InitKeyMgmtInfo(apKeyMgmtInfoStaRom_t *pKeyMgmtInfo,SecurityMode_t *secType,Cipher_t *pwCipher,UINT16 staRsnCap,UINT8 akmType);
apInfo_t * cm_GetApInfo(cm_ConnectionInfo_t *connPtr);
apSpecificData_t * cm_GetApData(cm_ConnectionInfo_t *connPtr);
Status_e cm_AllocAPResources(cm_ConnectionInfo_t *connPtr);
Status_e cm_AllocResources(cm_ConnectionInfo_t *connPtr);
cm_ConnectionInfo_t *cm_InitConnection(UINT8 conType,UINT8 bssType,UINT8 bssNum,IEEEtypes_MacAddr_t *bssId,IEEEtypes_MacAddr_t *peerMacAddr,UINT8 channel,unkbyte0 *hostMdev);
void cm_DeleteConnection(cm_ConnectionInfo_t *connPtr);
void cm_SetPeerAddr(cm_ConnectionInfo_t *connPtr,IEEEtypes_MacAddr_t *bssId,IEEEtypes_MacAddr_t *peerMacAddr);
void cm_SetComData(cm_ConnectionInfo_t *connPtr,char *ssid);
void assert_err(char *condition,char *file,int line);
void assert_warn(char *condition,char *file,int line);
void coex_dump_pta(void);
void coex_dump_wifi(void);
void coex_wifi_rf_forece_enable(int enable);
void coex_wifi_pti_forece_enable(int enable);
void wifi_main(void);
void ipc_emb_notify(void);
void ipc_emb_wait(void);
void ipc_emb_init(void);
void ipc_emb_tx_irq(void);
void ipc_emb_tx_evt(int queue_idx);
void ipc_emb_cfmback_irq(void);
void ipc_emb_txcfm_ind(uint32_t queue_bits);
void ipc_emb_msg_irq(void);
void ipc_emb_msg_evt(void);
void ipc_emb_msg_dma_int_handler(void);
void ipc_emb_dbg_dma_int_handler(void);
void ipc_emb_dump(void);
void rf_set_channel(uint8_t bandwidth,uint16_t channel_freq);
void rf_dump_status(void);
void mdm_txcbwmax_setf(uint8_t txcbwmax);
void phy_config_rxgain(int offset);
void agc_config(void);
void mdm_reset(void);
void phy_powroffset_set(int8_t *power_offset);
void phy_hw_set_channel(uint8_t band,uint16_t freq,uint16_t freq1,uint8_t chantype);
void phy_get_channel(phy_channel_info *info,uint8_t index);
void phy_set_channel(uint8_t band,uint8_t type,uint16_t prim20_freq,uint16_t center1_freq,uint16_t center2_freq,uint8_t index);
void phy_get_version(uint32_t *version_1,uint32_t *version_2);
_Bool phy_vht_supported(void);
void phy_init(phy_cfg_tag *config);
uint8_t phy_get_nss(void);
uint8_t phy_get_ntx(void);
void phy_stop(void);
_Bool phy_ldpc_tx_supported(void);
uint8_t phy_get_mac_freq(void);
void phy_get_rf_gain_idx(int8_t *power,uint8_t *idx);
void phy_get_rf_gain_capab(int8_t *max,int8_t *min);
void mpif_clk_init(void);
void phy_mdm_isr(void);
void phy_rc_isr(void);
void pa_init(void);
void pa_input(uint8_t id,rx_hd *rhd);
uint8_t hal_get_capcode(void);
void hal_set_capcode(uint32_t capcode);
_Bool hal_get_temperature(int16_t *temperature);
void hal_set_temperature(int16_t temperature);
void trpc_update_power(int8_t (*power_rate_table) [8]);
void trpc_power_get(int8_t *power_rate_table);
void trpc_update_power_11b(int8_t *power_rate_table);
void trpc_update_power_11g(int8_t *power_rate_table);
void trpc_update_power_11n(int8_t *power_rate_table);
void trpc_init(void);
int8_t trpc_get_rf_max_power(void);
int8_t trpc_get_rf_min_power(void);
uint8_t trpc_get_power_idx(uint8_t formatmod,uint8_t mcs,int8_t pwr_dbm);
uint8_t trpc_get_default_power_idx(uint8_t formatmod,uint8_t mcs);
void trpc_update_vs_channel(int8_t channel_MHz);
void trpc_update_vs_temperature(int8_t temperature);
void phy_tcal_reset(void);
void phy_tcal_start(void);
void phy_tcal_txpwr(int16_t curr_temperature);
void phy_tcal_callback(int16_t temperature);
void rf_fsm_ctrl_en_setf(uint32_t x);
void rf_fsm_st_dbg_en_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc3_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc2_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc1_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc0_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc7_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc6_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc5_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc4_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc11_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc10_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc9_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc8_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc15_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc14_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc13_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc12_setf(uint32_t x);
void wait_us(uint32_t us);
void _print_channel_info(void);
void rfc_init(uint32_t xtalfreq_hz);
void rfc_rxdfe_set_notch0(uint8_t en,uint8_t alpha,int8_t nrmfc);
void rfc_config_channel(uint32_t channel_freq);
void rfc_coex_force_to(uint32_t force_enable,uint32_t bbmode);
uint32_t rfc_get_power_level(uint32_t formatmod,int32_t power);
void rfc_apply_tx_dvga(int8_t *dvga_qdb);
void rfc_apply_tx_power_offset(uint8_t channel,int8_t *power_offset);
void rf_pri_set_gain_table_regs(void);
void rf_pri_manu_pu(uint32_t mode);
void rf_pri_save_state_for_cal(void);
void rf_pri_restore_state_for_cal(void);
void rf_pri_singen_start(void);
uint32_t rf_pri_pm_pwr(void);
void rf_pri_start_txdfe(void);
int32_t rf_pri_pm_pwr_avg(uint32_t iq,uint32_t acc_len);
void rf_pri_txcal_config_hw(void);
uint16_t rf_pri_fcal_meas(uint32_t cw);
void rf_pri_rccal_config(uint32_t rbb_fc);
void rf_pri_rccal_config(uint32_t iq,uint32_t rbb_fc);
void rf_pri_txcal_config(uint32_t param_ind,int32_t val);
int32_t rf_pri_txcal_search_core(uint32_t param_ind,uint32_t center,uint32_t delta,uint32_t meas_freq);
void rf_pri_singen_config(uint32_t fcw);
uint32_t rf_pri_rccal_iq(uint32_t iq);
void rf_pri_config_channel(void);
uint32_t rf_pri_roscal_iq(uint32_t iq);
void rf_pri_chipv(uint8_t chipv);
void rf_pri_update_tx_power_offset(uint8_t channel,int8_t *power_offset);
void rf_pri_get_notch_param(uint32_t chanfreq_MHz,uint8_t *ncf_on,int32_t *ncf_freq_Hz);
void rf_pri_update_param(uint32_t chanfreq_MHz);
void rf_pri_xtalfreq(uint32_t xtalfreq);
uint32_t rf_pri_get_vco_freq_cw(uint32_t chanfreq_MHz);
uint32_t rf_pri_get_vco_idac_cw(uint32_t chanfreq_MHz);
int32_t rf_pri_get_txgain_max(void);
int32_t rf_pri_get_txgain_min(void);
uint32_t rf_pri_get_txgain_index(int32_t pwr,uint32_t mode);
void rf_pri_query_txgain_table(uint32_t index,uint32_t *rfg_index,uint32_t *dg);
void rf_pri_update_dvga_os(int8_t dvga_os);
void rf_pri_tx_gain_comp(int32_t Tsens);
void rf_pri_txcal(void);
void rf_pri_roscal(void);
void rf_pri_rccal(void);
void rf_pri_lo_acal(void);
void rf_pri_fcal(void);
void rf_pri_full_cal(void);
void rf_pri_restore_cal_reg(void);
void rf_pri_init(uint8_t reset,uint8_t chipv);
void rf_pri_update_power_offset(int32_t *power_offset);
int phyif_utils_decode(phyif_utils_recvtable_t *vec,int8_t *ppm);
void sysctrl_init(void);
void intc_spurious(void);
void intc_enable_irq(int index);
void intc_init(void);
void mac_irq(void);
void bl_irq_handler(void);
void blmac_pwr_mgt_setf(uint8_t pwrmgt);
chan_ctxt_tag * chan_get_next_chan(void);
void chan_conn_less_delay_prog(void);
void chan_upd_nb_rem_slots(uint32_t current_time);
_Bool chan_tbtt_detect_conflict(void);
void chan_tbtt_insert(chan_tbtt_tag *p_tbtt_entry);
void chan_upd_ctxt_status(chan_ctxt_tag *p_chan_entry,uint8_t next_status);
void chan_switch_start(chan_ctxt_tag *p_chan_entry);
void chan_conn_less_delay_evt(void *env);
void chan_tbtt_switch_evt(void *env);
void chan_tbtt_schedule(chan_tbtt_tag *p_tbtt_entry);
void chan_cde_evt(void *env);
void chan_goto_idle_cb(void);
void chan_tx_cfm(void *dummy,uint32_t status);
void chan_init(void);
void chan_scan_req(uint8_t band,uint16_t freq,int8_t pwr,uint32_t duration_us,uint8_t vif_index);
uint8_t chan_roc_req(mm_remain_on_channel_req *req,ke_task_id_t taskid);
uint8_t chan_ctxt_add(mm_chan_ctxt_add_req *p_add_req,uint8_t *idx);
void chan_ctxt_del(uint8_t chan_idx);
void chan_tbtt_switch_update(vif_info_tag *p_vif_entry,uint32_t tbtt_time);
void chan_bcn_to_evt(vif_info_tag *p_vif_entry);
void chan_bcn_detect_start(vif_info_tag *p_vif_entry);
_Bool chan_is_on_channel(vif_info_tag *p_vif_entry);
_Bool chan_is_tx_allowed(vif_info_tag *p_vif_entry);
_Bool chan_is_on_operational_channel(vif_info_tag *p_vif_entry);
void chan_update_tx_power(chan_ctxt_tag *p_chan_entry);
void chan_ctxt_link(uint8_t vif_idx,uint8_t chan_idx);
void chan_ctxt_unlink(uint8_t vif_idx);
void hal_dma_init(void);
uint8_t blmac_soft_reset_getf(void);
void blmac_wt_2_crypt_clk_ratio_setf(uint8_t wt2cryptclkratio);
void blmac_rx_flow_cntrl_en_setf(void);
void blmac_key_sto_ram_reset_setf(void);
void hal_machw_stop(void);
void hal_machw_init(void);
void hal_machw_disable_int(void);
void hal_machw_reset(void);
uint8_t hal_machw_search_addr(mac_addr *addr);
void hal_machw_monitor_mode(void);
_Bool hal_machw_sleep_check(void);
void hal_machw_gen_handler(void);
void hal_mib_dump(void);
int mm_monitor_channel_req_handler(ke_msg_id_t msgid,mm_monitor_channel_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_monitor_enable_req_handler(ke_msg_id_t msgid,mm_monitor_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_cfg_rssi_req_handler(ke_msg_id_t msgid,mm_cfg_rssi_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_set_ps_options_req_handler(ke_msg_id_t msgid,mm_set_ps_options_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_tim_update_req_handler(ke_msg_id_t msgid,mm_tim_update_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_bcn_change_req_handler(ke_msg_id_t msgid,mm_bcn_change_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_remain_on_channel_req_handler(ke_msg_id_t msgid,mm_remain_on_channel_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_sta_del_req_handler(ke_msg_id_t msgid,mm_sta_del_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_sta_add_req_handler(ke_msg_id_t msgid,mm_sta_add_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_key_del_req_handler(ke_msg_id_t msgid,mm_key_del_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_key_add_req_handler(ke_msg_id_t msgid,mm_key_add_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_set_power_req_handler(ke_msg_id_t msgid,mm_set_power_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_set_idle_req_handler(ke_msg_id_t msgid,mm_set_idle_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_version_req_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_start_req_handler(ke_msg_id_t msgid,mm_start_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_set_ps_mode_req_handler(ke_msg_id_t msgid,mm_set_ps_mode_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_force_idle_req_handler(ke_msg_id_t msgid,mm_force_idle_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_hw_config_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int bl60x_edca_get(int ac,uint8_t *aifs,uint8_t *cwmin,uint8_t *cwmax,uint16_t *txop);
void bl_init(void);
int bl_sleep(void);
uint32_t bl_nap_calculate(void);
void rx_swdesc_init(void);
int scan_cancel_req_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int scan_start_req_handler(ke_msg_id_t msgid,scan_start_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
undefined4 mm_scan_channel_end_ind_handler(void);
int mm_scan_channel_start_ind_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
void txl_buffer_reinit(void);
void txl_buffer_init(void);
void txl_buffer_reset(void);
txl_buffer_tag * txl_buffer_alloc(txdesc *txdesc,uint8_t access_category,uint8_t user_idx);
void txl_buffer_update_thd(txdesc *txdesc);
void txl_cfm_init(void);
void txl_cfm_push(txdesc *txdesc,uint32_t status,uint8_t access_category);
void txl_cfm_flush(uint8_t access_category,co_list *list,uint32_t status);
void txl_cfm_dma_int_handler(void);
void txl_cfm_dump(void);
void bam_init(void);
void bam_send_air_action_frame(int param_1,bam_env_tag *param_2,int param_3,uint8_t param_4,int param_5,uint16_t param_6,cfm_func_ptr *param_7);
undefined4 rxu_mgt_ind_handler(int param_1);
void co_pack8p(uint32_t dst,uint8_t *src,uint32_t len);
int phy_freq_to_channel(uint8_t band,uint16_t freq);
uint16_t phy_channel_to_freq(uint8_t band,int channel);
uint32_t me_add_ie_ssid(uint32_t *frame_addr,uint8_t ssid_len,uint8_t *p_ssid);
uint32_t me_add_ie_supp_rates(uint32_t *frame_addr,mac_rateset *p_rateset);
uint32_t me_add_ie_ext_supp_rates(uint32_t *frame_addr,mac_rateset *p_rateset);
uint32_t me_add_ie_ds(uint32_t *frame_addr,uint8_t channel);
uint32_t me_add_ie_erp(uint32_t *frame_addr,uint8_t erp_info);
uint32_t me_add_ie_rsn(uint32_t *frame_addr,uint8_t enc_type);
uint32_t me_add_ie_wpa(uint32_t *frame_addr,uint8_t enc_type);
uint32_t me_add_ie_tim(uint32_t *frame_addr,uint8_t dtim_period);
uint32_t me_add_ie_ht_capa(uint32_t *frame_addr);
uint32_t me_add_ie_ht_oper(uint32_t *frame_addr,vif_info_tag *p_vif_entry);
uint16_t me_build_authenticate(uint32_t frame,uint16_t algo_type,uint16_t seq_nbr,uint16_t status_code,uint32_t *challenge_array_ptr);
uint16_t me_build_deauthenticate(uint32_t frame,uint16_t reason_code);
uint16_t me_build_associate_req(uint32_t frame,mac_bss_info *bss,mac_addr *old_ap_addr_ptr,uint8_t vif_idx,uint32_t *ie_addr,uint16_t *ie_len,sm_connect_req *con_par);
uint16_t me_build_add_ba_req(uint32_t frame,bam_env_tag *bam_env);
uint16_t me_build_add_ba_rsp(uint32_t frame,bam_env_tag *bam_env,uint16_t param,uint8_t dialog_token,uint16_t status_code);
uint16_t me_build_del_ba(uint32_t frame,bam_env_tag *bam_env,uint16_t reason_code);
void me_extract_rate_set(uint32_t buffer,uint16_t buflen,mac_rateset *mac_rate_set_ptr);
void me_extract_power_constraint(uint32_t buffer,uint16_t buflen,mac_bss_info *bss);
void me_extract_country_reg(int param_1);
void me_extract_mobility_domain(uint32_t buffer,uint16_t buflen,mac_bss_info *bss);
uint me_extract_csa(undefined4 param_1,undefined4 param_2,undefined *param_3,int param_4);
uint16_t me_build_beacon(uint32_t frame,uint8_t vif_idx,uint16_t *tim_oft,uint8_t *tim_len,uint8_t hidden_ssid);
uint16_t me_build_probe_rsp(uint32_t frame,uint8_t vif_idx);
uint16_t me_build_associate_rsp(uint32_t frame,uint8_t vif_idx,uint16_t status_code,me_sta_add_req *req);
int me_rc_set_rate_req_handler(ke_msg_id_t msgid,me_rc_set_rate_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_rc_stats_req_handler(ke_msg_id_t msgid,me_rc_stats_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_traffic_ind_req_handler(ke_msg_id_t msgid,me_traffic_ind_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_sta_del_req_handler(ke_msg_id_t msgid,me_sta_del_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_set_control_port_req_handler(ke_msg_id_t msgid,me_set_control_port_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_chan_config_req_handler(ke_msg_id_t msgid,me_chan_config_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_set_ps_mode_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_set_idle_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_config_req_handler(ke_msg_id_t msgid,me_config_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_set_ps_disable_req_handler(ke_msg_id_t msgid,me_set_ps_disable_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_set_active_req_handler(ke_msg_id_t msgid,me_set_active_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_sta_add_req_handler(ke_msg_id_t msgid,me_sta_add_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
void cfm_raw_send(void *env,uint32_t status);
int scanu_raw_send_req_handler(ke_msg_id_t msgid,scanu_raw_send_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int scanu_join_req_handler(ke_msg_id_t msgid,scanu_start_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int scanu_start_req_handler(ke_msg_id_t msgid,scanu_start_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int rxu_mgt_ind_handler(ke_msg_id_t msgid,rxu_mgt_ind *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int scan_done_ind_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int scan_start_cfm_handler(ke_msg_id_t msgid,scan_start_cfm *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_set_ps_disable_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_bss_param_setting_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int sm_rsp_timeout_ind_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int scanu_start_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_connection_loss_ind_handler(ke_msg_id_t msgid,mm_connection_loss_ind *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int scanu_join_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int sm_connect_req_handler(ke_msg_id_t msgid,sm_connect_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int rxu_mgt_ind_handler(ke_msg_id_t msgid,rxu_mgt_ind *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_set_vif_state_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_set_active_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_sta_add_cfm_handler(ke_msg_id_t msgid,mm_sta_add_cfm *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int sm_disconnect_req_handler(ke_msg_id_t msgid,sm_disconnect_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int apm_sta_connect_timeout_ind_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int rxu_mgt_ind_handler(ke_msg_id_t msgid,rxu_mgt_ind *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int apm_sta_add_cfm_handler(ke_msg_id_t msgid,me_sta_add_cfm *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int apm_sta_del_req_handler(ke_msg_id_t msgid,apm_sta_del_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int apm_conf_max_sta_req_handler(ke_msg_id_t msgid,apm_conf_max_sta_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_set_ps_disable_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_bss_param_setting_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_bcn_change_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int apm_stop_req_handler(ke_msg_id_t msgid,apm_stop_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int apm_start_req_handler(ke_msg_id_t msgid,apm_start_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_set_active_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hostapd_mgt_ind_handler(ke_msg_id_t msgid,rxu_mgt_ind *param,ke_task_id_t dest_id,ke_task_id_t src_id);
void dump_cfg_entries(void);
int cfg_start_req_handler(ke_msg_id_t msgid,cfg_start_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
void dbg_init(void);
void dbg_test_print(char *fmt,...);
int dbg_get_sys_stat_req_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int dbg_mem_write_req_handler(ke_msg_id_t msgid,dbg_mem_write_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int dbg_mem_read_req_handler(ke_msg_id_t msgid,dbg_mem_read_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int dbg_set_sev_filter_req_handler(ke_msg_id_t msgid,dbg_set_sev_filter_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int dbg_set_mod_filter_req_handler(ke_msg_id_t msgid,dbg_set_mod_filter_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
co_list_hdr *ke_queue_extract(co_list *queue,anon_subr__Bool_co_list_hdr_ptr_uint32_t *func,uint32_t arg);
void bl_aes_128(UINT8 *key,UINT8 *input,UINT8 *output);
void xor_128(UINT8 *a,UINT8 *b,UINT8 *out);
void leftshift_onebit(UINT8 *input,UINT8 *output);
void generate_subkey(UINT8 *key,UINT8 *K1,UINT8 *K2);
void padding(UINT8 *lastb,UINT8 *pad,int length);
void bl_aes_cmac(UINT8 *key,UINT8 *input,int length,UINT8 *mac);
int BL_AES_MEMCMP(UINT8 *dst,UINT8 *src,int len);
void BL_AES_MEMSET(UINT8 *dst,UINT8 val,int size);
void BL_AES_MEMCPY(UINT8 *dst,UINT8 *src,int size);
int BL_AesEncrypt(UINT8 *kek,UINT8 kekLen,UINT8 *data,UINT8 *ret);
int BL_AesWrap(UINT8 *kek,UINT8 kekLen,UINT32 n,UINT8 *plain,UINT8 *keyIv,UINT8 *cipher);
int BL_AesUnWrap(UINT8 *kek,UINT8 kekLen,UINT32 n,UINT8 *cipher,UINT8 *keyIv,UINT8 *plain);
void Bl_hmac_md5(UINT8 *text_data,int text_len,UINT8 *key,int key_len,void *digest);
void Bl_hmac_sha1(uchar **ppText,int *pTextLen,int textNum,uchar *key,int key_len,uchar *output,int outputLen);
void Bl_PRF(uchar *key,int key_len,uchar *prefix,int prefix_len,uchar *data,int data_len,uchar *output,int len);
void wpa_MD5Transform(UINT32 *state,ulong *block);
void wpa_MD5Init(Bl_MD5_CTX *context);
void wpa_MD5Update(Bl_MD5_CTX *context,UINT8 *input,UINT32 inputLen);
void wpa_MD5Final(uchar *digest,Bl_MD5_CTX *context);
int rijndaelKeySetupEnc(u32 *rk,u8 *cipherKey,int keyBits);
void rijndael_set_key(rijndael_ctx *ctx,u8 *key,int bits,int encrypt);
void rijndael_decrypt(rijndael_ctx *ctx,u8 *src,u8 *dst);
void rijndael_encrypt(rijndael_ctx *ctx,u8 *src,u8 *dst);
void Bl_SHA1ProcessMessageBlock(Bl_SHA1_CTX *context);
int Bl_SHA1Init(Bl_SHA1_CTX *context);
int Bl_SHA1Final(Bl_SHA1_CTX *context,UINT8 *Message_Digest);
int Bl_SHA1Update(Bl_SHA1_CTX *context,UINT8 *message_array,uint length);
Status_e supplicantRestoreDefaults(void);
void supplicantFuncInit(void);
void ap_setpsk(cm_ConnectionInfo_t *connPtr,CHAR *ssid,CHAR *passphrase);
void ap_resetConfiguration(cm_ConnectionInfo_t *connPtr);
void InitializeAp(cm_ConnectionInfo_t *connPtr);
int bl60x_check_mac_status(int *is_ok);
void helper_record_dump(void);
void helper_record_rc_rf_states(uint *param_1,uint *param_2);
void helper_record_all_states(char *func_name);
u32.conflict3 ipc_emb2app_rawstatus_get(void);
void ipc_host_init(ipc_host_env_tag *env,ipc_host_cb_tag *cb,ipc_shared_env_tag.conflict3 *shared_env_ptr,void *pthis);
int ipc_host_msg_push(ipc_host_env_tag *env,void *msg_buf,uint16_t len);
uint32_t ipc_host_get_rawstatus(ipc_host_env_tag *env);
txdesc_host * ipc_host_txdesc_get(ipc_host_env_tag *env);
void ipc_host_txdesc_push(ipc_host_env_tag *env,void *host_id);
void ipc_host_irq(ipc_host_env_tag *env,uint32_t status);
void ipc_host_enable_irq(ipc_host_env_tag *env,uint32_t value);
void ipc_host_disable_irq_e2a(void);
int bl_main_disconnect(void);
int bl_main_powersaving(int mode);
int bl_main_denoise(int mode);
int bl_main_monitor(void);
int bl_main_phy_up(void);
int bl_main_monitor_channel_set(int channel,int use_40MHZ);
int bl_main_if_remove(uint8_t vif_index);
int bl_main_raw_send(uint8_t *pkt,int len);
int bl_main_rate_config(uint8_t sta_idx,uint16_t fixed_rate_cfg);
int bl_main_set_country_code(char *country_code);
int bl_main_get_channel_nums(void);
int bl_main_if_add(int is_sta,netif *netif,uint8_t *vif_index);
int bl_main_apm_start(char *ssid,char *password,int channel,uint8_t vif_index,uint8_t hidden_ssid);
int bl_main_apm_stop(uint8_t vif_index);
int bl_main_apm_sta_cnt_get(uint8_t *sta_cnt);
int bl_main_apm_sta_info_get(wifi_apm_sta_info *apm_sta_info,uint8_t idx);
int bl_main_apm_sta_delete(uint8_t sta_idx);
int bl_main_apm_remove_all_sta(void);
int bl_main_conf_max_sta(uint8_t max_sta_supported);
int bl_main_cfg_task_req(uint32_t ops,uint32_t task,uint32_t element,uint32_t type,void *arg1,void *arg2);
int bl_main_scan(void);
int bl_cfg80211_connect(bl_hw *bl_hw,cfg80211_connect_params *sme);
int bl_main_connect(uint8_t *ssid,int ssid_len,uint8_t *psk,int psk_len,uint8_t *pmk,int pmk_len,uint8_t *mac,uint8_t band,uint16_t freq);
void bl_main_event_handle(void);
void bl_main_lowlevel_init(void);
int bl_main_rtthread_start(bl_hw **bl_hw);
int bl_handle_dynparams(bl_hw *bl_hw);
int bl_send_msg(bl_hw *bl_hw,void *msg_params,int reqcfm,lmac_msg_id_t reqid,void *cfm);
void * bl_msg_zalloc(lmac_msg_id_t id,lmac_task_id_t dest_id,uint16_t param_len);
void bl_msg_update_channel_cfg(char *code);
int bl_msg_get_channel_nums(void);
int bl_send_reset(bl_hw *bl_hw);
int bl_send_monitor_enable(bl_hw *bl_hw,mm_monitor_cfm *cfm);
int bl_send_monitor_channel_set(bl_hw *bl_hw,mm_monitor_channel_cfm *cfm,int channel,int use_40Mhz);
int bl_send_version_req(bl_hw *bl_hw,mm_version_cfm *cfm);
int bl_send_me_config_req(bl_hw *bl_hw);
int bl_send_me_chan_config_req(bl_hw *bl_hw);
int bl_send_me_rate_config_req(bl_hw *bl_hw,uchar sta_idx,uint16_t fixed_rate_cfg);
int bl_send_start(bl_hw *bl_hw);
int bl_send_add_if(bl_hw *bl_hw,uchar *mac,nl80211_iftype iftype,_Bool p2p,mm_add_if_cfm *cfm);
int bl_send_remove_if(bl_hw *bl_hw,uchar inst_nbr);
int bl_send_scanu_req(bl_hw *bl_hw);
int bl_send_scanu_raw_send(bl_hw *bl_hw,uint8_t *pkt,int len);
int bl_send_sm_connect_req(bl_hw *bl_hw,cfg80211_connect_params *sme,sm_connect_cfm *cfm);
int bl_send_sm_disconnect_req(bl_hw *bl_hw,u16 reason);
int bl_send_mm_powersaving_req(bl_hw *bl_hw,int mode);
int bl_send_mm_denoise_req(bl_hw *bl_hw,int mode);
int bl_send_apm_start_req(bl_hw *bl_hw,apm_start_cfm *cfm,char *ssid,char *password,int channel,uchar vif_index,uchar hidden_ssid);
int bl_send_apm_stop_req(bl_hw *bl_hw,uchar vif_idx);
int bl_send_apm_sta_del_req(bl_hw *bl_hw,apm_sta_del_cfm *cfm,uchar sta_idx,uchar vif_idx);
int bl_send_apm_conf_max_sta_req(bl_hw *bl_hw,uchar max_sta_supported);
int bl_send_cfg_task_req(bl_hw *bl_hw,uint32_t ops,uint32_t task,uint32_t element,uint32_t type,void *arg1,void *arg2);
int bl_platform_on(bl_hw *bl_hw);
int bl_rx_chan_pre_switch_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
int bl_rx_rssi_status_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
int bl_rx_apm_sta_del_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
int bl_rx_apm_sta_add_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
void notify_event_scan_done(int join_scan);
int bl_rx_scanu_join_cfm(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
int bl_rx_scanu_start_cfm(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
int bl_rx_chan_switch_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
int bl_rx_sm_connect_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
int bl_rx_sm_disconnect_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
undefined4 bl_rx_scanu_result_ind(int param_1,longlong param_2);
undefined4 bl_rx_mesh_path_update_ind(void);
undefined4 bl_rx_mesh_proxy_update_ind(void);
undefined4 bl_rx_remain_on_channel_exp_ind(void);
undefined4 bl_rx_ps_change_ind(void);
undefined4 bl_rx_traffic_req_ind(void);
undefined4 bl_rx_csa_counter_ind(void);
undefined4 bl_rx_csa_finish_ind(void);
undefined4 bl_rx_csa_traffic_ind(void);
undefined4 bl_rx_channel_survey_ind(void);
undefined4 bl_rx_dbg_error_ind(void);
undefined4 bl_rx_tdls_chan_switch_cfm(void);
undefined4 bl_rx_tdls_chan_switch_ind(void);
undefined4 bl_rx_tdls_chan_switch_base_ind(void);
undefined4 bl_rx_tdls_peer_ps_ind(void);
undefined4 bl_rx_me_tkip_mic_failure_ind(void);
undefined4 bl_rx_me_tx_credits_update_ind(void);
undefined4 bl_rx_mesh_path_create_cfm(void);
undefined4 bl_rx_mesh_peer_update_ind(void);
int bl_rx_sm_connect_ind_cb_register(void *env,wifi_event_sm_connect_ind_cb_t *cb);
int bl_rx_sm_disconnect_ind_cb_register(void *env,wifi_event_sm_disconnect_ind_cb_t *cb);
int bl_rx_beacon_ind_cb_register(void *env,wifi_event_beacon_ind_cb_t *cb);
int bl_rx_probe_resp_ind_cb_register(void *env,wifi_event_probe_resp_ind_cb_t *cb);
int bl_rx_pkt_cb_register(void *env,wifi_event_pkt_cb_t *cb);
int bl_rx_pkt_cb_unregister(void *env);
int bl_rx_rssi_cb_register(void *env,wifi_event_rssi_cb_t *cb);
int bl_rx_event_register(void *env,wifi_event_cb_t *cb);
void bl_rx_e2a_handler(void *arg);
void bl_rx_pkt_cb(uint8_t *pkt,int len);
void bl_tx_push(bl_hw *bl_hw,bl_txhdr.conflict1 *txhdr);
void bl_tx_resend(void);
void bl_tx_try_flush(void);
int bl_txdatacfm(void *pthis,void *host_id);
void bl_tx_notify(void);
err_t bl_output(bl_hw *bl_hw,netif *netif,pbuf *p,int is_sta);
u8 bl_radarind(void *pthis,void *hostid);
u8 bl_msgackind(bl_hw *pthis,void *hostid);
void bl_prim_tbtt_ind(void *pthis);
void my_pbuf_free_custom(pbuf *p);
undefined4 bl_dbgind(void);
void bl_sec_tbtt_ind(void);
void my_pbuf_free_custom_fake(void);
int tcpip_stack_input(void *swdesc,uchar status,void *hwhdr,uint msdu_offset,wifi_pkt *pkt);
int bl_utils_idx_lookup(bl_hw *bl_hw,uint8_t *mac);
int bl_ipc_init(bl_hw *bl_hw,ipc_shared_env_tag.conflict21 *ipc_shared_mem);
void bl_utils_dump(void);
_Bool stateSnifferGuard(void *ch,event *event);
_Bool stateConnectedIPYesGuard_ip_update(void *ch,event *event);
void printErrMsg(void *stateData,event *event);
void stateSnifferExit(void *stateData,event *event);
void stateSnifferAction(void *oldStateData,event *event,void *newStateData);
void stateConnectedIPNoAction_ipgot(void *oldStateData,event *event,void *newStateData);
void stateGlobalEnter(void *stateData,event *event);
void stateGlobalAction(void *oldStateData,event *event,void *newStateData);
void stateConnectingEnter(void *stateData,event *event);
_Bool stateSnifferGuard_ChannelSet(void *ch,event *event);
_Bool stateIdleGuard_sniffer(void *ev,event *event);
void stateConnectedIPNoExit(void *stateData,event *event);
void stateDisconnect_action_idle(void *oldStateData,event *event,void *newStateData);
void stateDisconnect_action_reconnect(void *oldStateData,event *event,void *newStateData);
void ip_obtaining_timeout(timer_cb_arg_t data);
void stateConnectedIPNoEnter(void *stateData,event *event);
_Bool stateConnectedIPNoGuard_disconnect(void *ch,event *event);
_Bool stateConnectedIPYesGuard_disconnect(void *ch,event *event);
_Bool stateConnectedIPYesGuard_rcconfig(void *ch,event *event);
void stateIdleAction_connect(void *oldStateData,event *event,void *newStateData);
_Bool stateGlobal_cfg_req(void *ch,event *event);
_Bool stateGlobalGuard_fw_powersaving(void *ch,event *event);
_Bool stateGlobalGuard_conf_max_sta(void *ev,event *event);
_Bool stateGlobalGuard_AP(void *ev,event *event);
_Bool stateGlobalGuard_scan_beacon(void *ch,event *event);
void __reload_tsen(timer_cb_arg_t data);
void event_cb_wifi_event_mgmr(input_event_t *event,void *private_data);
void trigger_auto_denoise(void *arg);
void stateDisconnect_exit(void *stateData,event *event);
void disconnect_retry(timer_cb_arg_t data);
_Bool stateGlobalGuard_fw_disconnect(void *ch,event *event);
void stateConnectedIPYes_exit(void *stateData,event *event);
_Bool stateGlobalGuard_denoise(void *ev,event *event);
_Bool stateIdleGuard_connect(void *ev,event *event);
_Bool stateIfaceDownGuard_phyup(void *ev,event *event);
_Bool stateSnifferGuard_raw_send(void *ch,event *event);
_Bool stateGlobalGuard_stop(void *ev,event *event);
_Bool stateGlobalGuard_enable_autoreconnect(void *ch,event *event);
_Bool stateGlobalGuard_disable_autoreconnect(void *ch,event *event);
void stateDisconnect_enter(void *stateData,event *event);
_Bool stateGlobalGuard_fw_scan(void *ch,event *event);
uint stateDisconnect_guard(uint param_1,int param_2);
void stateGlobalExit(void);
void stateSnifferEnter(void);
uint stateConnectingGuard(uint param_1,int param_2);
void stateConnectingAction_connected(void);
void stateConnectingAction_disconnect(void);
void stateConnectingExit(void);
void stateIdleAction_sniffer(void);
void stateIdleEnter(void);
void stateIdleExit(void);
void stateIfaceDownAction_phyup(void);
void stateIfaceDownEnter(void);
void stateIfaceDownExit(void);
uint stateConnectedIPNoGuard(uint param_1,int param_2);
void stateConnectedIPNoAction_disconnect(void);
uint stateConnectedIPYesGuard(uint param_1,int param_2);
void stateConnectedIPYes_action(void);
void stateConnectedIPYes_enter(void *stateData,event *event);
char * wifi_mgmr_auth_to_str(uint8_t auth);
char * wifi_mgmr_cipher_to_str(uint8_t cipher);
int wifi_mgmr_event_notify(wifi_mgmr_msg_t *msg);
void wifi_mgmr_start(void);
void _wifi_mgmr_entry(void *pvParameters);
void wifi_mgmr_start_background(wifi_conf_t *conf);
int wifi_mgmr_init(void);
int wifi_mgmr_state_get_internal(int *state);
void wifi_mgmr_set_connect_stat_info(wifi_event_sm_connect_ind *ind,uint8_t type_ind);
int wifi_mgmr_set_country_code_internal(char *country_code);
int wifi_mgmr_ap_sta_cnt_get_internal(uint8_t *sta_cnt);
int wifi_mgmr_ap_sta_info_get_internal(wifi_mgmr_sta_basic_info_t *sta_info_internal,uint8_t idx);
int wifi_mgmr_ap_sta_delete_internal(uint8_t sta_idx);
int wifi_mgmr_scan_complete_notify(void);
int wifi_mgmr_api_connect(char *ssid,char *psk,char *pmk,uint8_t *mac,uint8_t band,uint16_t freq);
int wifi_mgmr_api_cfg_req(uint32_t ops,uint32_t task,uint32_t element,uint32_t type,uint32_t length,uint32_t *buf);
int wifi_mgmr_api_ip_got(uint32_t ip,uint32_t mask,uint32_t gw,uint32_t dns1,uint32_t dns2);
int wifi_mgmr_api_ip_update(void);
int wifi_mgmr_api_reconnect(void);
int wifi_mgmr_api_disable_autoreconnect(void);
int wifi_mgmr_api_enable_autoreconnect(void);
int wifi_mgmr_api_disconnect(void);
int wifi_mgmr_api_rate_config(uint16_t config);
int wifi_mgmr_api_conf_max_sta(uint8_t max_sta_supported);
int wifi_mgmr_api_ifaceup(void);
int wifi_mgmr_api_sniffer_enable(void);
int wifi_mgmr_api_scan_item_beacon(uint8_t channel,int8_t rssi,uint8_t auth,uint8_t *mac,uint8_t *ssid,int len,int8_t ppm_abs,int8_t ppm_rel,uint8_t cipher);
int wifi_mgmr_api_fw_disconnect(void);
int wifi_mgmr_api_fw_tsen_reload(void);
int wifi_mgmr_api_fw_scan(void);
int wifi_mgmr_api_fw_powersaving(int mode);
int wifi_mgmr_api_ap_start(char *ssid,char *passwd,int channel,uint8_t hidden_ssid);
int wifi_mgmr_api_ap_stop(void);
int wifi_mgmr_api_idle(void);
int wifi_mgmr_api_denoise_enable(void);
int wifi_mgmr_api_denoise_disable(void);
int wifi_mgmr_api_raw_send(uint8_t *pkt,int len);
int wifi_mgmr_api_set_country_code(char *country_code);
void cmd_rf_dump(char *buf,int len,int argc,char **argv);
void cmd_dump_reset(char *buf,int len,int argc,char **argv);
void cmd_wifi_power_table_update(char *buf,int len,int argc,char **argv);
void cmd_wifi_state_get(char *buf,int len,int argc,char **argv);
void wifi_sta_get_state_cmd(char *buf,int len,int argc,char **argv);
void wifi_edca_dump_cmd(char *buf,int len,int argc,char **argv);
void wifi_ap_sta_list_get_cmd(char *buf,int len,int argc,char **argv);
void wifi_ap_sta_delete_cmd(char *buf,int len,int argc,char **argv);
void cmd_wifi_coex_pta_force_off(char *buf,int len,int argc,char **argv);
void cmd_wifi_coex_pta_force_on(char *buf,int len,int argc,char **argv);
void cmd_wifi_coex_pti_force_off(char *buf,int len,int argc,char **argv);
void cmd_wifi_coex_pti_force_on(char *buf,int len,int argc,char **argv);
void cmd_wifi_coex_rf_force_off(char *buf,int len,int argc,char **argv);
void cmd_wifi_coex_rf_force_on(char *buf,int len,int argc,char **argv);
void cmd_wifi_mib(char *buf,int len,int argc,char **argv);
void cmd_wifi_cfg(char *buf,int len,int argc,char **argv);
void cmd_wifi_ap_stop(char *buf,int len,int argc,char **argv);
void cmd_wifi_ap_start(char *buf,int len,int argc,char **argv);
void wifi_sniffer_off_cmd(char *buf,int len,int argc,char **argv);
void wifi_sniffer_on_cmd(char *buf,int len,int argc,char **argv);
int wifi_denoise_disable_cmd(void);
int wifi_denoise_enable_cmd(void);
void wifi_power_saving_off_cmd(char *buf,int len,int argc,char **argv);
void wifi_power_saving_on_cmd(char *buf,int len,int argc,char **argv);
void wifi_rc_fixed_disable(char *buf,int len,int argc,char **argv);
int wifi_disable_autoreconnect_cmd(void);
int wifi_enable_autoreconnect_cmd(void);
void wifi_disconnect_cmd(char *buf,int len,int argc,char **argv);
int wifi_sta_ip_unset_cmd(void);
void wifi_sta_ip_info(char *buf,int len,int argc,char **argv);
void cmd_wifi_raw_send(char *buf,int len,int argc,char **argv);
void wifi_scan_cmd(char *buf,int len,int argc,char **argv);
void sniffer_cb(void *env,uint8_t *pkt,int len);
void cmd_wifi_dump(char *buf,int len,int argc,char **argv);
void cmd_wifi_ap_conf_max_sta(char *buf,int len,int argc,char **argv);
void wifi_mon_cmd(char *buf,int len,int argc,char **argv);
void wifi_rc_fixed_enable(char *buf,int len,int argc,char **argv);
void wifi_connect_cmd(char *buf,int len,int argc,char **argv);
void wifi_sta_ip_set_cmd(char *buf,int len,int argc,char **argv);
void wifi_scan_filter_cmd(char *buf,int len,int argc,char **argv);
void wifi_capcode_cmd(char *buf,int len,int argc,char **argv);
int wifi_mgmr_cli_scanlist(void);
int wifi_mgmr_ext_dump_needed(void);
int wifi_mgmr_cli_init(void);
int mac_is_unvalid(uint8_t *mac);
int wifi_mgmr_psk_cal(char *password,char *ssid,int ssid_len,char *output);
int wifi_mgmr_drv_init(wifi_conf_t *conf);
wifi_interface_t wifi_mgmr_sta_enable(void);
int wifi_mgmr_sta_disable(wifi_interface_t *interface);
int wifi_mgmr_sta_ip_get(uint32_t *ip,uint32_t *gw,uint32_t *mask);
int wifi_mgmr_sta_dns_get(uint32_t *dns1,uint32_t *dns2);
int wifi_mgmr_sta_ip_set(uint32_t ip,uint32_t mask,uint32_t gw,uint32_t dns1,uint32_t dns2);
int wifi_mgmr_sta_ip_unset(void);
int wifi_mgmr_sta_disconnect(void);
int wifi_mgmr_sta_powersaving(int ps);
int wifi_mgmr_sta_autoconnect_enable(void);
int wifi_mgmr_sta_autoconnect_disable(void);
void wifi_mgmr_sta_ssid_set(char *ssid);
void wifi_mgmr_sta_psk_set(char *psk);
int wifi_mgmr_sta_connect(wifi_interface_t *wifi_interface,char *ssid,char *psk,char *pmk,uint8_t *mac,uint8_t band,uint16_t freq);
wifi_interface_t wifi_mgmr_ap_enable(void);
int wifi_mgmr_ap_start(wifi_interface_t *interface,char *ssid,int hidden_ssid,char *passwd,int channel);
int wifi_mgmr_ap_stop(wifi_interface_t *interface);
int wifi_mgmr_ap_sta_cnt_get(uint8_t *sta_cnt);
int wifi_mgmr_ap_sta_info_get(wifi_sta_basic_info *sta_info,uint8_t idx);
int wifi_mgmr_ap_sta_delete(uint8_t sta_idx);
int wifi_mgmr_sniffer_register(void *env,sniffer_cb_t *cb);
int wifi_mgmr_sniffer_unregister(void *env);
int wifi_mgmr_sniffer_enable(void);
int wifi_mgmr_sniffer_disable(void);
int wifi_mgmr_rate_config(uint16_t config);
int wifi_mgmr_conf_max_sta(uint8_t max_sta_supported);
int wifi_mgmr_state_get(int *state);
int wifi_mgmr_rssi_get(int *rssi);
int wifi_mgmr_raw_80211_send(uint8_t *pkt,int len);
int wifi_mgmr_scan(void *data,scan_complete_cb_t *cb);
int wifi_mgmr_cfg_req(uint32_t ops,uint32_t task,uint32_t element,uint32_t type,uint32_t length,uint32_t *buf);
int wifi_mgmr_scan_filter_hidden_ssid(int filter);
int wifi_mgmr_scan_complete_callback(void);
char * wifi_mgmr_status_code_str(uint16_t status_code);
int wifi_mgmr_profile_add(wifi_mgmr_t *mgmr,wifi_mgmr_profile_msg_t *profile_msg,int index);
int wifi_mgmr_profile_get(wifi_mgmr_t *mgmr,wifi_mgmr_profile_msg_t *profile_msg);
int wifi_mgmr_profile_autoreconnect_is_enabled(wifi_mgmr_t *mgmr,int index);
int wifi_mgmr_profile_autoreconnect_disable(wifi_mgmr_t *mgmr,int index);
int wifi_mgmr_profile_autoreconnect_enable(wifi_mgmr_t *mgmr,int index);
int wifi_netif_dhcp_start(netif *netif);
void cb_rssi_ind(void *env,int8_t rssi);
void cb_probe_resp_ind(void *env);
void cb_beacon_ind(void *env,wifi_event_beacon_ind.conflict4 *ind);
void cb_disconnect_ind(void *env,wifi_event_sm_disconnect_ind *ind);
void cb_connect_ind(void *env,wifi_event_sm_connect_ind *ind);
void cb_event_ind(void *env,wifi_event *event);
int wifi_mgmr_event_init(void);
void cmd_mgr_print(bl_cmd_mgr *cmd_mgr);
void cmd_complete(bl_cmd *cmd);
int cmd_mgr_msgind(bl_cmd_mgr *cmd_mgr,ipc_e2a_msg *msg,msg_cb_fct *cb);
int cmd_mgr_llind(bl_cmd_mgr *cmd_mgr,bl_cmd *cmd);
undefined4 cmd_mgr_queue(char *param_1,char **param_2);
void cmd_mgr_drain(bl_cmd_mgr *cmd_mgr);
void bl_cmd_mgr_init(bl_cmd_mgr *cmd_mgr);
int bl_irqs_init(bl_hw *bl_hw);
void bl_irq_bottomhalf(bl_hw *bl_hw);
void goToErrorState(stateMachine *fsm,event *event);
void stateM_init(stateMachine *fsm,state *initialState,state *errorState);
int stateM_handleEvent(stateMachine *fsm,event *event);
void netif_status_callback(netif *netif);
err_t wifi_tx(netif *netif,pbuf *p);
err_t bl606a0_wifi_netif_init(netif *netif);
int bl606a0_wifi_init(wifi_conf_t *conf);
uint32_t fdt32_ld(fdt32_t *p);
int nextprop_(void *fdt,int offset);
fdt_property * fdt_get_property_by_offset_(void *fdt,int offset,int *lenp);
char * fdt_get_string(void *fdt,int stroffset,int *lenp);
char * fdt_get_name(void *fdt,int nodeoffset,int *len);
int fdt_subnode_offset_namelen(void *fdt,int offset,char *name,int namelen);
int fdt_subnode_offset(void *fdt,int parentoffset,char *name);
int fdt_first_property_offset(void *fdt,int nodeoffset);
int fdt_next_property_offset(void *fdt,int offset);
fdt_property *fdt_get_property_namelen_(void *fdt,int offset,char *name,int namelen,int *lenp,int *poffset);
void * fdt_getprop_namelen(void *fdt,int nodeoffset,char *name,int namelen,int *lenp);
void * fdt_getprop(void *fdt,int nodeoffset,char *name,int *lenp);
int fdt_stringlist_count(void *fdt,int nodeoffset,char *property);
char * fdt_stringlist_get(void *fdt,int nodeoffset,char *property,int idx,int *lenp);
void blfdt(char *buf,int len,int argc,char **argv);
int blfdt_cli_init(void);
uint32_t fdt32_ld(fdt32_t *p);
int fdt_ro_probe_(void *fdt);
void * fdt_offset_ptr(void *fdt,int offset,uint len);
uint32_t fdt_next_tag(void *fdt,int startoffset,int *nextoffset);
int fdt_check_node_offset_(void *fdt,int offset);
int fdt_check_prop_offset_(void *fdt,int offset);
int fdt_next_node(void *fdt,int offset,int *depth);
uint32_t fdt32_to_cpu(fdt32_t x);
uint64_t fdt64_to_cpu(void);
uint32_t fdt32_ld(fdt32_t *p);
_Bool util_is_printable_string(void *data,int len);
void utilfdt_print_data(char *data,int len);
undefined4 tc_blfdtdump(void);
undefined4 tc_fdt_wifi_module(void);
int tc_fdt_wifi(void);
void cmd_blog_info_dump(char *buf,int len,int argc,char **argv);
void cmd_blog_set_level(char *buf,int len,int argc,char **argv);
void blog_init(void);
int ota_dump_cmd(void);
void ota_tcp_cmd(char **argv);
void ota_tcp_cmd(char *buf,int len,int argc,char **argv);
int bl_sys_ota_cli_init(void);
void cmd_sys_time_now(char *buf,int len,int argc,char **argv);
int bl_sys_time_cli_init(void);
void bl_sys_time_update(undefined4 param_1,undefined4 param_2);
int bl_sys_time_get(uint64_t *epoch);
int bl_sys_time_sync_state(uint32_t *xTicksToJump);
cli_command * cli_command_get(int idx,int *is_static_cmd);
void exit_cmd(char *buf,int len,int argc,char **argv);
int cb_idnoe(void *arg,inode_t *node);
void ota_cmd(char *buf,int len,int argc,char **argv);
void tftp_ota_thread(void *arg);
void cat_cmd(char *buf,int len,int argc,char **argv);
void hexdump_cmd(char *buf,int len,int argc,char **argv);
int aos_cli_init(int use_thread);
void * aos_cli_event_cb_read_get(void);
int cli_putstr(char *msg);
void ps_cmd(char *buf,int len,int argc,char **argv);
int aos_cli_printf(char *msg,...);
int proc_onecmd(int argc,char **argv);
void ls_cmd(char *buf,int len,int argc,char **argv);
void uptime_cmd(char *buf,int len,int argc,char **argv);
void reset_cmd(char *buf,int len,int argc,char **argv);
void poweroff_cmd(char *buf,int len,int argc,char **argv);
void reboot_cmd(char *buf,int len,int argc,char **argv);
void version_cmd(char *buf,int len,int argc,char **argv);
void devname_cmd(char *buf,int len,int argc,char **argv);
void echo_cmd(char *buf,int len,int argc,char **argv);
void mmem_cmd(char *buf,int len,int argc,char **argv);
void pmem_cmd(char *buf,int len,int argc,char **argv);
void help_cmd(char *buf,int len,int argc,char **argv);
int cli_getchar(char *inbuf);
void cli_main_input(char *buffer,int count);
void console_cb_read(int fd,void *param);
void get_dns_request(void *arg,udp_pcb *upcb,pbuf *p,ip_addr_t *addr,u16_t port);
void dns_server_init(void);
EfErrCode easyflash_init(void);
size_t get_status(uint8_t *status_table,size_t status_num);
void update_sector_cache(uint32_t sec_addr,uint32_t empty_addr);
uint32_t get_next_sector_addr(sector_meta_data_t pre_sec);
_Bool gc_check_cb(sector_meta_data_t sector,void *arg1,void *arg2);
void update_env_cache(char *name,size_t name_len,uint32_t addr);
_Bool find_env_cb(env_node_obj_t env,void *arg1,void *arg2);
_Bool sector_statistics_cb(sector_meta_data_t sector,void *arg1,void *arg2);
_Bool alloc_env_cb(sector_meta_data_t sector,void *arg1,void *arg2);
EfErrCode write_status(uint32_t addr,uint8_t *status_table,size_t status_num,size_t status_index);
EfErrCode read_env(env_node_obj_t env);
EfErrCode update_sec_status(sector_meta_data_t sector,size_t new_env_len,_Bool *is_full);
EfErrCode format_sector(uint32_t addr);
_Bool check_sec_hdr_cb(sector_meta_data_t sector,void *arg1,void *arg2);
_Bool print_env_cb(env_node_obj_t env,void *arg1,void *arg2);
uint32_t get_next_env_addr(sector_meta_data_t sector,env_node_obj_t pre_env);
EfErrCode read_sector_meta_data(uint32_t addr,sector_meta_data_t sector,_Bool traversal);
void sector_iterator(sector_meta_data_t sector,sector_store_status_t status,void *arg1,void *arg2,anon_subr__Bool_sector_meta_data_t_void_ptr_void_ptr *callback,_Bool traversal_env);
uint32_t alloc_env(sector_meta_data_t sector,size_t env_size);
void gc_collect(void);
uint32_t new_env(sector_meta_data_t sector,size_t env_size);
_Bool check_and_recovery_gc_cb(sector_meta_data_t sector,void *arg1,void *arg2);
void env_iterator(env_node_obj_t env,void *arg1,void *arg2,anon_subr__Bool_env_node_obj_t_void_ptr_void_ptr *callback);
_Bool find_env(char *key,env_node_obj_t env);
EfErrCode del_env(char *key,env_node_obj_t old_env,_Bool complete_del);
EfErrCode move_env(env_node_obj_t env);
_Bool check_and_recovery_env_cb(env_node_obj_t env,void *arg1,void *arg2);
_Bool do_gc(sector_meta_data_t sector,void *arg1,void *arg2);
EfErrCode create_env_blob(sector_meta_data_t sector,char *key,void *value,size_t len);
size_t ef_get_env_blob(char *key,void *value_buf,size_t buf_len,size_t *saved_value_len);
EfErrCode ef_del_env(char *key);
EfErrCode ef_set_env_blob(char *key,void *value_buf,size_t buf_len);
EfErrCode ef_set_env(char *key,char *value);
EfErrCode ef_save_env(void);
EfErrCode ef_env_set_default(void);
void ef_print_env(void);
EfErrCode ef_load_env(void);
EfErrCode ef_env_init(ef_env *default_env,size_t default_env_size);
EfErrCode ef_port_read(uint32_t addr,uint32_t *buf,size_t size);
EfErrCode ef_port_write(uint32_t addr,uint32_t *buf,size_t size);
void ef_port_env_lock(void);
void ef_port_env_unlock(void);
void ef_log_debug(char *file,long line,char *format,...);
EfErrCode ef_port_erase(uint32_t addr,size_t size);
void ef_log_info(char *format,...);
EfErrCode ef_port_init(ef_env **default_env,size_t *default_env_size);
void ef_print(char *format,...);
uint32_t ef_calc_crc32(uint32_t crc,void *buf,size_t size);
void psm_get_cmd(char *buf,int len,int argc,char **argv);
void psm_test_cmd(void);
EfErrCode psm_erase_cmd(void);
void psm_dump_cmd(void);
void psm_unset_cmd(char *buf,int len,int argc,char **argv);
void psm_set_cmd(char *buf,int len,int argc,char **argv);
int easyflash_cli_init(void);
EventGroupHandle_t xEventGroupCreateStatic(StaticEventGroup_t *pxEventGroupBuffer);
EventBits_t xEventGroupWaitBits(EventGroupHandle_t xEventGroup,EventBits_t uxBitsToWaitFor,BaseType_t xClearOnExit,BaseType_t xWaitForAllBits,TickType_t xTicksToWait);
EventBits_t xEventGroupSetBits(EventGroupHandle_t xEventGroup,EventBits_t uxBitsToSet);
void vEventGroupDelete(EventGroupHandle_t xEventGroup);
void vListInitialise(List_t *pxList);
void vListInitialiseItem(ListItem_t *pxItem);
void vListInsertEnd(List_t *pxList,ListItem_t *pxNewListItem);
void vListInsert(List_t *pxList,ListItem_t *pxNewListItem);
UBaseType_t uxListRemove(ListItem_t *pxItemToRemove);
BaseType_t prvCopyDataToQueue(Queue_t *pxQueue,void *pvItemToQueue,BaseType_t xPosition);
void prvCopyDataFromQueue(Queue_t *pxQueue,void *pvBuffer);
void prvUnlockQueue(Queue_t *pxQueue);
BaseType_t xQueueGenericReset(QueueHandle_t xQueue,BaseType_t xNewQueue);
QueueHandle_t xQueueGenericCreateStatic(UBaseType_t uxQueueLength,UBaseType_t uxItemSize,uint8_t *pucQueueStorage,StaticQueue_t *pxStaticQueue,uint8_t ucQueueType);
QueueHandle_t xQueueGenericCreate(UBaseType_t uxQueueLength,UBaseType_t uxItemSize,uint8_t ucQueueType);
QueueHandle_t xQueueCreateCountingSemaphore(UBaseType_t uxMaxCount,UBaseType_t uxInitialCount);
BaseType_t xQueueGenericSend(QueueHandle_t xQueue,void *pvItemToQueue,TickType_t xTicksToWait,BaseType_t xCopyPosition);
QueueHandle_t xQueueCreateMutexStatic(uint8_t ucQueueType,StaticQueue_t *pxStaticQueue);
BaseType_t xQueueGiveMutexRecursive(QueueHandle_t xMutex);
QueueHandle_t xQueueCreateMutex(uint8_t ucQueueType);
BaseType_t xQueueGenericSendFromISR(QueueHandle_t xQueue,void *pvItemToQueue,BaseType_t *pxHigherPriorityTaskWoken,BaseType_t xCopyPosition);
BaseType_t xQueueGiveFromISR(QueueHandle_t xQueue,BaseType_t *pxHigherPriorityTaskWoken);
BaseType_t xQueueReceive(QueueHandle_t xQueue,void *pvBuffer,TickType_t xTicksToWait);
BaseType_t xQueueSemaphoreTake(QueueHandle_t xQueue,TickType_t xTicksToWait);
BaseType_t xQueueTakeMutexRecursive(QueueHandle_t xMutex,TickType_t xTicksToWait);
UBaseType_t uxQueueMessagesWaiting(QueueHandle_t xQueue);
void vQueueDelete(QueueHandle_t xQueue);
void vQueueAddToRegistry(QueueHandle_t xQueue,char *pcQueueName);
void vQueueWaitForMessageRestricted(QueueHandle_t xQueue,TickType_t xTicksToWait,BaseType_t xWaitIndefinitely);
void prvInitialiseNewStreamBuffer(StreamBuffer_t *pxStreamBuffer,uint8_t *pucBuffer,size_t xBufferSizeBytes,size_t xTriggerLevelBytes,uint8_t ucFlags);
size_t prvWriteBytesToBuffer(StreamBuffer_t *pxStreamBuffer,uint8_t *pucData,size_t xCount);
size_t prvReadBytesFromBuffer(StreamBuffer_t *pxStreamBuffer,uint8_t *pucData,size_t xMaxCount,size_t xBytesAvailable);
StreamBufferHandle_t xStreamBufferGenericCreate(size_t xBufferSizeBytes,size_t xTriggerLevelBytes,BaseType_t xIsMessageBuffer);
StreamBufferHandle_t xStreamBufferGenericCreateStatic(size_t xBufferSizeBytes,size_t xTriggerLevelBytes,BaseType_t xIsMessageBuffer,uint8_t *pucStreamBufferStorageArea,StaticStreamBuffer_t *pxStaticStreamBuffer);
void vStreamBufferDelete(StreamBufferHandle_t xStreamBuffer);
size_t xStreamBufferSpacesAvailable(StreamBufferHandle_t xStreamBuffer);
size_t xStreamBufferSend(StreamBufferHandle_t xStreamBuffer,void *pvTxData,size_t xDataLengthBytes,TickType_t xTicksToWait);
size_t xStreamBufferSendFromISR(StreamBufferHandle_t xStreamBuffer,void *pvTxData,size_t xDataLengthBytes,BaseType_t *pxHigherPriorityTaskWoken);
size_t xStreamBufferReceive(StreamBufferHandle_t xStreamBuffer,void *pvRxData,size_t xBufferLengthBytes,TickType_t xTicksToWait);
size_t xStreamBufferReceiveFromISR(StreamBufferHandle_t xStreamBuffer,void *pvRxData,size_t xBufferLengthBytes,BaseType_t *pxHigherPriorityTaskWoken);
BaseType_t xStreamBufferIsEmpty(StreamBufferHandle_t xStreamBuffer);
void prvResetNextTaskUnblockTime(void);
void prvInitialiseNewTask(TaskFunction_t *pxTaskCode,char *pcName,uint32_t ulStackDepth,void *pvParameters,UBaseType_t uxPriority,TaskHandle_t *pxCreatedTask,TCB_t *pxNewTCB);
void prvDeleteTCB(TCB_t *pxTCB);
void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait,BaseType_t xCanBlockIndefinitely);
void vTaskEnterCritical(void);
void vTaskExitCritical(void);
void prvAddNewTaskToReadyList(TCB_t *pxNewTCB);
TaskHandle_t xTaskCreateStatic(TaskFunction_t *pxTaskCode,char *pcName,uint32_t ulStackDepth,void *pvParameters,UBaseType_t uxPriority,StackType_t *puxStackBuffer,StaticTask_t *pxTaskBuffer);
BaseType_t xTaskCreate(TaskFunction_t *pxTaskCode,char *pcName,uint16_t usStackDepth,void *pvParameters,UBaseType_t uxPriority,TaskHandle_t *pxCreatedTask);
void vTaskDelete(TaskHandle_t xTaskToDelete);
void vTaskSuspendAll(void);
TickType_t xTaskGetTickCount(void);
BaseType_t xTaskGetTickCount2(TickType_t *ticks,BaseType_t *overflow);
TickType_t xTaskGetTickCountFromISR(void);
char * pcTaskGetName(TaskHandle_t xTaskToQuery);
BaseType_t xTaskIncrementTick(void);
void vTaskDelay(TickType_t xTicksToDelay);
void vTaskSwitchContext(void);
void vTaskPlaceOnEventList(List_t *pxEventList,TickType_t xTicksToWait);
void vTaskPlaceOnUnorderedEventList(List_t *pxEventList,TickType_t xItemValue,TickType_t xTicksToWait);
void vTaskPlaceOnEventListRestricted(List_t *pxEventList,TickType_t xTicksToWait,BaseType_t xWaitIndefinitely);
BaseType_t xTaskRemoveFromEventList(List_t *pxEventList);
void vTaskRemoveFromUnorderedEventList(ListItem_t *pxEventListItem,TickType_t xItemValue);
void vTaskInternalSetTimeOutState(TimeOut_t *pxTimeOut);
void vTaskMissedYield(void);
void vTaskGetInfo(TaskHandle_t xTask,TaskStatus_t *pxTaskStatus,BaseType_t xGetFreeStackSpace,eTaskState eState);
UBaseType_t prvListTasksWithinSingleList(TaskStatus_t *pxTaskStatusArray,List_t *pxList,eTaskState eState);
UBaseType_t uxTaskGetSystemState(TaskStatus_t *pxTaskStatusArray,UBaseType_t uxArraySize,uint32_t *pulTotalRunTime);
UBaseType_t uxTaskGetStackHighWaterMark(TaskHandle_t xTask);
TaskHandle_t xTaskGetCurrentTaskHandle(void);
BaseType_t xTaskGetSchedulerState(void);
BaseType_t xTaskPriorityInherit(TaskHandle_t pxMutexHolder);
BaseType_t xTaskPriorityDisinherit(TaskHandle_t pxMutexHolder);
void vTaskPriorityDisinheritAfterTimeout(TaskHandle_t pxMutexHolder,UBaseType_t uxHighestPriorityWaitingTask);
void vTaskEnterCritical(void);
void vTaskExitCritical(void);
void vTaskList(char *pcWriteBuffer);
TickType_t uxTaskResetEventItemValue(void);
TaskHandle_t pvTaskIncrementMutexHeldCount(void);
BaseType_t xTaskGenericNotifyFromISR(TaskHandle_t xTaskToNotify,uint32_t ulValue,eNotifyAction eAction,uint32_t *pulPreviousNotificationValue,BaseType_t *pxHigherPriorityTaskWoken);
void vTaskNotifyGiveFromISR(TaskHandle_t xTaskToNotify,BaseType_t *pxHigherPriorityTaskWoken);
BaseType_t xTaskNotifyStateClear(TaskHandle_t xTask);
void prvCheckForValidListAndQueue(void);
BaseType_t prvInsertTimerInActiveList(Timer_t *pxTimer,TickType_t xNextExpiryTime,TickType_t xTimeNow,TickType_t xCommandTime);
BaseType_t xTimerCreateTimerTask(void);
TimerHandle_t xTimerCreateStatic(char *pcTimerName,TickType_t xTimerPeriodInTicks,UBaseType_t uxAutoReload,void *pvTimerID,TimerCallbackFunction_t *pxCallbackFunction,StaticTimer_t *pxTimerBuffer);
BaseType_t xTimerGenericCommand(TimerHandle_t xTimer,BaseType_t xCommandID,TickType_t xOptionalValue,BaseType_t *pxHigherPriorityTaskWoken,TickType_t xTicksToWait);
void prvSwitchTimerLists(void);
void prvTimerTask(void *pvParameters);
void * pvTimerGetTimerID(TimerHandle_t xTimer);
void vPortSetupTimerInterrupt(void);
void pxPortInitialiseStack(int param_1,undefined4 param_2,undefined4 param_3);
void prvInsertBlockIntoFreeList(BlockLink_t *pxBlockToInsert);
void * pvPortMalloc(size_t xWantedSize);
void vPortFree(void *pv);
size_t xPortGetFreeHeapSize(void);
void vPortDefineHeapRegions(HeapRegion_t *pxHeapRegions);
void uart_generic_notify_handler(uint8_t id);
void UART0_IRQHandler(void);
void UART1_IRQHandler(void);
int bl_uart_init(uint8_t id,uint8_t tx_pin,uint8_t rx_pin,uint8_t cts_pin,uint8_t rts_pin,uint32_t baudrate);
int bl_uart_data_send(uint8_t id,uint8_t data);
int bl_uart_data_recv(uint8_t id);
int bl_uart_int_rx_enable(uint8_t id);
int bl_uart_int_rx_disable(uint8_t id);
int bl_uart_int_tx_enable(uint8_t id);
int bl_uart_int_tx_disable(uint8_t id);
int bl_uart_flush(uint8_t id);
void bl_uart_getdefconfig(uint8_t id,uint8_t *parity);
void bl_uart_setconfig(uint8_t id,uint32_t baudrate,UART_Parity_Type parity);
void bl_uart_setbaud(uint8_t id,uint32_t baud);
int bl_uart_int_enable(uint8_t id);
int bl_uart_int_disable(uint8_t id);
int bl_uart_int_rx_notify_register(uint8_t id,cb_uart_notify_t *cb,void *arg);
int bl_uart_int_tx_notify_register(uint8_t id,cb_uart_notify_t *cb,void *arg);
int bl_chip_info(char *info);
int bl_chip_banner(char **banner);
int bl_chip_memory_ram(int *num,uint *addr,uint *size,char (*desc) [6]);
void _cb_cmd(void *arg);
undefined4 bl_cks_test(void);
void _cb_cmd(void *arg);
void bl_dma_int_process(void);
int bl_dma_int_clear(int ch);
void bl_dma_IRQHandler(void);
void bl_dma_copy(bl_dma_item *first);
int bl_dma_irq_register(int channel,void *tc_handler,void *interr_handler,void *ctx);
void bl_dma_init(void);
void bl_dma_test(void);
void _irq_num_check(int irqnum);
void bl_irq_enable(uint source);
void bl_irq_disable(uint source);
void bl_irq_exception_trigger(BL_IRQ_EXCEPTION_TYPE_T type,void *ptr);
void bl_irq_register_with_ctx(int irqnum,void *handler,void *ctx);
void bl_irq_ctx_get(int irqnum,void **ctx);
void bl_irq_register(int irqnum,void *handler);
void bl_irq_unregister(int irqnum,void *handler);
void interrupt_entry(uint32_t mcause);
void exception_entry(uint32_t mcause,uint32_t mepc,uint32_t mtval,uintptr_t *regs);
void bl_irq_init(void);
void _trng_trigger(void);
void wait_trng4feed(void);
void sec_trng_IRQHandler(uint param_1,int param_2);
void bl_sec_pka_IRQHandler(void);
uint32_t bl_sec_get_random_word(void);
void bl_rand_stream(uint8_t *buf,int len);
int bl_rand(void);
int bl_sec_init(void);
int bl_sec_test(void);
void _dump_rsa_data(uint8_t *data,int size);
void _pka_test_case_xgcd(void);
void _pka_test_case2(uint8_t param_1);
int bl_pka_test(void);
void int_timer_cb(void);
uint32_t bl_timer_now_us(void);
int bl_timer_tick_enable(void);
void cmd_gpio_get(char *buf,int len,int argc,char **argv);
void cmd_gpio_set(char *buf,int len,int argc,char **argv);
void cmd_gpio_func(char *buf,int len,int argc,char **argv);
int bl_gpio_cli_init(void);
int bl_efuse_read_mac(uint8_t *mac);
int bl_efuse_read_mac_factory(uint8_t *mac);
int bl_efuse_read_capcode(uint8_t *capcode);
int bl_efuse_read_pwroft(int8_t *poweroffset);
void Aes_Compare_Data(uint8_t *expected,uint8_t *input,uint32_t len);
void _dump_iv_status(SEC_Eng_AES_Link_Config_Type.conflict1 *linkCfg);
void bl_sec_aes_IRQHandler(void);
void Sec_Eng_AES_Link_Case_CBC_128(SEC_ENG_AES_ID_Type aesId);
void Sec_Eng_AES_Link_Case_CTR_128(SEC_ENG_AES_ID_Type aesId);
void Sec_Eng_AES_Link_Case_ECB_128(SEC_ENG_AES_ID_Type aesId);
int bl_sec_aes_test(void);
void bl_sec_sha_IRQHandler(void);
int bl_sha_mutex_take(void);
int bl_sha_mutex_give(void);
void bl_sha_init(bl_sha_ctx_t *ctx,bl_sha_type_t type);
int bl_sha_update(bl_sha_ctx_t *ctx,uint8_t *input,uint32_t len);
int bl_sha_finish(bl_sha_ctx_t *ctx,uint8_t *hash);
void sha256_test_case0(void);
int bl_sec_sha_test(void);
int bl_wifi_clock_enable(void);
int bl_wifi_enable_irq(void);
int bl_wifi_sta_mac_addr_set(uint8_t *mac);
int bl_wifi_ap_mac_addr_set(uint8_t *mac);
int bl_wifi_mac_addr_get(uint8_t *mac);
int bl_wifi_country_code_set(uint8_t country_code);
int bl_wifi_ap_info_set(uint8_t *ssid,uint8_t ssid_len,uint8_t *psk,uint8_t psk_len,uint8_t chan);
int bl_wifi_sta_info_set(uint8_t *ssid,uint8_t ssid_len,uint8_t *psk,uint8_t psk_len,int autoconnect);
int bl_wifi_sta_info_get(bl_wifi_ap_info_t *sta_info);
int cmd_timer_start(void);
void cmd_wdt_disable(void);
void cmd_wdt_feed(void);
void cmd_wdt_init(int param_1,undefined4 *param_2);
int bl_wdt_cli_init(void);
uint32_t fdt32_to_cpu(fdt32_t x);
int dev_uart_init(uint8_t id,char *path,uint32_t rx_buf_size,uint32_t tx_buf_size);
int32_t hal_uart_send_trigger(uart_dev_t *uart);
int32_t hal_uart_send_trigger_off(uart_dev_t *uart);
int32_t hal_uart_init(uart_dev_t *uart);
int32_t hal_uart_recv_II(uart_dev_t *uart,void *data,uint32_t expect_size,uint32_t *recv_size,uint32_t timeout);
int32_t hal_uart_send(uart_dev_t *uart,void *data,uint32_t size,uint32_t timeout);
int32_t hal_uart_finalize(uart_dev_t *uart);
int32_t hal_uart_notify_register(uart_dev_t *uart,hal_uart_int_t type,anon_subr_void_void_ptr *cb);
undefined4 vfs_uart_init(void *param_1,int param_2);
int32_t hal_uart_send_flush(uart_dev_t *uart,uint32_t timeout);
void hal_uart_setbaud(uart_dev_t *uart,uint32_t baud);
void hal_uart_setconfig(uart_dev_t *uart,uint32_t baud,hal_uart_parity_t parity);
undefined4 hal_gpio_init_from_dts(void *param_1,int param_2);
void _dump_partition(void);
int hal_boot2_update_ptable(HALPartition_Entry_Config *ptEntry_hal);
uint32_t hal_boot2_get_flash_addr(void);
int hal_boot2_partition_bus_addr(char *name,uint32_t *addr0,uint32_t *addr1,uint32_t *size0,uint32_t *size1,int *active);
int hal_boot2_partition_bus_addr_active(char *name,uint32_t *addr,uint32_t *size);
int hal_boot2_partition_bus_addr_inactive(char *name,uint32_t *addr,uint32_t *size);
int hal_boot2_partition_addr(char *name,uint32_t *addr0,uint32_t *addr1,uint32_t *size0,uint32_t *size1,int *active);
int hal_boot2_partition_addr_active(char *name,uint32_t *addr,uint32_t *size);
int hal_boot2_partition_addr_inactive(char *name,uint32_t *addr,uint32_t *size);
uint8_t hal_boot2_get_active_partition(void);
int hal_boot2_get_active_entries(int type,HALPartition_Entry_Config *ptEntry_hal);
int hal_boot2_dump(void);
int hal_boot2_init(void);
int hal_reboot(void);
void hal_sys_reset(void);
void hal_poweroff(void);
void hal_sys_capcode_update(uint8_t capin,uint8_t capout);
uint8_t hal_sys_capcode_get(void);
uint32_t fdt32_to_cpu(fdt32_t x);
uint32_t hal_board_get_factory_addr(void);
undefined4 hal_board_cfg(void);
void bl_tsen_adc_get(void);
uint64_t bl_rtc_get_counter(void);
uint64_t bl_rtc_get_timestamp_ms(void);
int hal_wifi_start_firmware_task(void);
int bl_sys_reset_por(void);
void bl_sys_reset_system(void);
int bl_sys_isxipaddr(uint32_t addr);
PtTable_Error_Type PtTable_Update_Entry(SPI_Flash_Cfg_Type *pFlashCfg,PtTable_ID_Type targetTableID,PtTable_Stuff_Config *ptStuff,PtTable_Entry_Config *ptEntry);
PtTable_Error_Type PtTable_Get_Active_Entries(PtTable_Stuff_Config *ptStuff,PtTable_Entry_Type type,PtTable_Entry_Config *ptEntry);
int bl_gpio_enable_output(uint8_t pin,uint8_t pullup,uint8_t pulldown);
int bl_gpio_enable_input(uint8_t pin,uint8_t pullup,uint8_t pulldown);
int bl_gpio_output_set(uint8_t pin,uint8_t value);
int bl_gpio_input_get(uint8_t pin,uint8_t *value);
int bl_flash_erase(uint32_t addr,int len);
int bl_flash_write(uint32_t addr,uint8_t *src,int len);
int bl_flash_read(uint32_t addr,uint8_t *dst,int len);
undefined4 bl_flash_config_update(void);
void bl_wdt_feed(void);
void bl_wdt_disable(void);
int bl_wdt_init(int ms);
err_t httpc_tcp_sent(void *arg,altcp_pcb *pcb,u16_t len);
err_t httpc_get_internal_addr(httpc_state_t *req,ip_addr_t *ipaddr);
err_t httpc_free_state(httpc_state_t *req);
err_t httpc_close(httpc_state_t *req,httpc_result_t result,u32_t server_response,err_t err);
err_t httpc_tcp_recv(void *arg,altcp_pcb *pcb,pbuf *p,err_t r);
void httpc_dns_found(char *hostname,ip_addr_t *ipaddr,void *arg);
err_t httpc_tcp_poll(void *arg,altcp_pcb *pcb);
void httpc_tcp_err(void *arg,err_t err);
err_t httpc_tcp_connected(void *arg,altcp_pcb *pcb,err_t err);
int httpc_create_request_string(httpc_connection_t.conflict *settings,char *server_name,int server_port,char *uri,char *buffer,size_t buffer_size);
err_t httpc_init_connection_common(httpc_state_t **connection,httpc_connection_t.conflict *settings,char *server_name,u16_t server_port,char *uri,altcp_recv_fn *recv_fn,void *callback_arg);
err_t httpc_get_file_dns(char *server_name,u16_t port,char *uri,httpc_connection_t.conflict *settings,altcp_recv_fn *recv_fn,void *callback_arg,httpc_state_t **connection);
void proc_entry_looprt(void *pvParameters);
void looprt_evt_notify_async(uint task,uint32_t evt_map);
void looprt_evt_status_dump(void);
void looprt_evt_schedule(int task,uint32_t evt_map,int delay_ms);
int looprt_start(StackType_t *proc_stack_looprt,int stack_count,StaticTask_t *proc_task_looprt);
int looprt_start_auto(void);
int looprt_handler_register(loop_evt_handler *handler,int priority);
int looprt_timer_register(loop_timer *timer);
void cmd_looprt_test(char *buf,int len,int argc,char **argv);
void cmd_looprt_test_status(char *buf,int len,int argc,char **argv);
void cmd_looprt_test_evt(char *buf,int len,int argc,char **argv);
void cmd_looprt_test_evt_dump(char *buf,int len,int argc,char **argv);
void cmd_looprt_test_schedule_evt1(char *buf,int len,int argc,char **argv);
void cmd_looprt_test_schedule_evt2(char *buf,int len,int argc,char **argv);
int looprt_test_cli_init(void);
void _cb_led_trigger(loop_ctx *loop,loop_timer *timer,void *arg);
int _led_bloop_msg(loop_ctx *loop,loop_evt_handler *handler,loop_msg *msg);
int _led_bloop_evt(loop_ctx *loop,loop_evt_handler *handler,uint32_t *bitmap_evt,uint32_t *evt_type_map);
int loopset_led_hook_on_looprt(void);
void loopset_led_trigger(int pin,uint timeon_ms);
err_t sys_mbox_new(sys_mbox_t *mbox,int size);
void sys_mbox_free(sys_mbox_t *mbox);
void sys_mbox_post(sys_mbox_t *mbox,void *data);
err_t sys_mbox_trypost(sys_mbox_t *mbox,void *msg);
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox,void **msg,u32_t timeout);
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox,void **msg);
uint sys_mbox_valid(int *param_1);
void sys_mbox_set_invalid(undefined4 *param_1);
err_t sys_sem_new(sys_sem_t *sem,u8_t count);
u32_t sys_arch_sem_wait(sys_sem_t *sem,u32_t timeout);
void sys_sem_free(sys_sem_t *sem);
int sys_sem_valid(sys_sem_t *sem);
void sys_sem_set_invalid(sys_sem_t *sem);
void sys_init(void);
err_t sys_mutex_new(sys_mutex_t *mutex);
void sys_mutex_lock(sys_mutex_t *mutex);
void sys_mutex_unlock(sys_mutex_t *mutex);
void sys_sem_signal(sys_mutex_t *mutex);
sys_thread_t sys_thread_new(char *name,lwip_thread_fn *thread,void *arg,int stacksize,int prio);
sys_prot_t sys_arch_protect(void);
void sys_arch_unprotect(void);
TickType_t sys_now(void);
hostent * lwip_gethostbyname(char *name);
void lwip_freeaddrinfo(addrinfo *ai);
int lwip_getaddrinfo(char *nodename,char *servname,addrinfo *hints,addrinfo **res);
err_t netifapi_do_netif_add(tcpip_api_call_data *m);
err_t netifapi_do_netif_set_addr(tcpip_api_call_data *m);
err_t netifapi_do_netif_common(tcpip_api_call_data *m);
err_t netifapi_netif_add(netif *netif,ip4_addr_t *ipaddr,ip4_addr_t *netmask,ip4_addr_t *gw,void *state,netif_init_fn init,netif_input_fn *input);
err_t netifapi_netif_set_addr(netif *netif,ip4_addr_t *ipaddr,ip4_addr_t *netmask,ip4_addr_t *gw);
err_t netifapi_netif_common(netif *netif,netifapi_void_fn voidfunc,netifapi_errt_fn errtfunc);
int alloc_socket(netconn *newconn,int accepted);
void lwip_link_select_cb(lwip_select_cb *select_cb);
void lwip_unlink_select_cb(lwip_select_cb *select_cb);
int lwip_selscan(int maxfdp1,_types_fd_set *readset_in,_types_fd_set *writeset_in,_types_fd_set *exceptset_in,_types_fd_set *readset_out,_types_fd_set *writeset_out,_types_fd_set *exceptset_out);
ssize_t lwip_recv_tcp(lwip_sock *sock,void *mem,size_t len,int flags);
int lwip_sock_make_addr(u16_t port,sockaddr *from,socklen_t *fromlen);
void free_socket(lwip_sock *sock,int is_tcp);
err_t lwip_recvfrom_udp_raw(lwip_sock *sock,int flags,msghdr *msg,u16_t *datagram_len);
lwip_sock * get_socket(int fd);
void lwip_setsockopt_callback(void *arg);
void event_callback(netconn *conn,netconn_evt evt,u16_t len);
int lwip_accept(int s,sockaddr *addr,socklen_t *addrlen);
int lwip_bind(int s,sockaddr *name,socklen_t namelen);
int lwip_close(int s);
int lwip_connect(int s,sockaddr *name,socklen_t namelen);
int lwip_listen(int s,int backlog);
ssize_t lwip_recvfrom(int s,void *mem,size_t len,int flags,sockaddr *from,socklen_t *fromlen);
ssize_t lwip_read(int s,void *mem,size_t len);
ssize_t lwip_recv(int s,void *mem,size_t len,int flags);
ssize_t lwip_sendto(int s,void *data,size_t size,int flags,sockaddr *to,socklen_t tolen);
ssize_t lwip_send(int s,void *data,size_t size,int flags);
int lwip_socket(int domain,int type,int protocol);
ssize_t lwip_write(int s,void *data,size_t size);
int lwip_select(int maxfdp1,_types_fd_set *readset,_types_fd_set *writeset,_types_fd_set *exceptset,timeval *timeout);
int lwip_shutdown(int s,int how);
int lwip_setsockopt(int s,int level,int optname,void *optval,socklen_t optlen);
int lwip_fcntl(int s,int cmd,int val);
void tcpip_thread(void *arg);
err_t tcpip_inpkt(pbuf *p,netif *inp,netif_input_fn *input_fn);
err_t tcpip_input(pbuf *p,netif *inp);
err_t tcpip_callback(tcpip_callback_fn function,void *ctx);
err_t tcpip_try_callback(tcpip_callback_fn function,void *ctx);
err_t tcpip_send_msg_wait_sem(tcpip_callback_fn fn,void *apimsg,sys_sem_t *sem);
err_t tcpip_api_call(tcpip_api_call_fn *fn,tcpip_api_call_data *call);
void tcpip_init(tcpip_init_done_fn initfunc,void *arg);
altcp_pcb * altcp_alloc(void);
void altcp_free(altcp_pcb *conn);
altcp_pcb * altcp_new_ip_type(altcp_allocator_t *allocator,u8_t ip_type);
altcp_pcb * altcp_new(altcp_allocator_t *allocator);
void altcp_arg(altcp_pcb *conn,void *arg);
void altcp_recv(altcp_pcb *conn,altcp_recv_fn *recv);
void altcp_sent(altcp_pcb *conn,altcp_sent_fn *sent);
void altcp_poll(altcp_pcb *conn,altcp_poll_fn *poll,u8_t interval);
void altcp_err(altcp_pcb *conn,altcp_err_fn *err);
void altcp_recved(altcp_pcb *conn,u16_t len);
err_t altcp_connect(altcp_pcb *conn,ip_addr_t *ipaddr,u16_t port,altcp_connected_fn connected);
void altcp_abort(altcp_pcb *conn);
err_t altcp_close(altcp_pcb *conn);
err_t altcp_write(altcp_pcb *conn,void *dataptr,u16_t len,u8_t apiflags);
err_t altcp_output(altcp_pcb *conn);
err_t altcp_tcp_connected(void *arg,tcp_pcb *tpcb,err_t err);
err_t altcp_tcp_sent(void *arg,tcp_pcb *tpcb,u16_t len);
err_t altcp_tcp_poll(void *arg,tcp_pcb *tpcb);
u16_t altcp_tcp_mss(altcp_pcb *conn);
u16_t altcp_tcp_sndbuf(altcp_pcb *conn);
u16_t altcp_tcp_sndqueuelen(altcp_pcb *conn);
void altcp_tcp_nagle_disable(altcp_pcb *conn);
void altcp_tcp_nagle_enable(altcp_pcb *conn);
int altcp_tcp_nagle_disabled(altcp_pcb *conn);
void altcp_tcp_dealloc(altcp_pcb *conn);
ip_addr_t * altcp_tcp_get_ip(altcp_pcb *conn,int local);
u16_t altcp_tcp_get_port(altcp_pcb *conn,int local);
void altcp_tcp_setup_callbacks(altcp_pcb *conn,tcp_pcb *tpcb);
void altcp_tcp_err(void *arg,err_t err);
err_t altcp_tcp_get_tcp_addrinfo(altcp_pcb *conn,int local,ip_addr_t *addr,u16_t *port);
void altcp_tcp_setprio(altcp_pcb *conn,u8_t prio);
err_t altcp_tcp_output(altcp_pcb *conn);
err_t altcp_tcp_write(altcp_pcb *conn,void *dataptr,u16_t len,u8_t apiflags);
err_t altcp_tcp_shutdown(altcp_pcb *conn,int shut_rx,int shut_tx);
err_t altcp_tcp_close(altcp_pcb *conn);
void altcp_tcp_abort(altcp_pcb *conn);
altcp_pcb * altcp_tcp_listen(altcp_pcb *conn,u8_t backlog,err_t *err);
err_t altcp_tcp_connect(altcp_pcb *conn,ip_addr_t *ipaddr,u16_t port,altcp_connected_fn connected);
err_t altcp_tcp_bind(altcp_pcb *conn,ip_addr_t *ipaddr,u16_t port);
void altcp_tcp_recved(altcp_pcb *conn,u16_t len);
err_t altcp_tcp_recv(void *arg,tcp_pcb *tpcb,pbuf *p,err_t err);
void altcp_tcp_set_poll(altcp_pcb *conn,u8_t interval);
err_t altcp_tcp_accept(void *arg,tcp_pcb *new_tpcb,err_t err);
altcp_pcb * altcp_tcp_new_ip_type(u8_t ip_type);
u16_t lwip_htons(u16_t n);
u32_t lwip_htonl(u32_t n);
int lwip_strnicmp(char *str1,char *str2,size_t len);
void dns_call_found(u8_t idx,ip_addr_t *addr);
err_t dns_send(u8_t idx);
void dns_check_entry(u8_t i);
void dns_recv(void *arg,udp_pcb *pcb,pbuf *p,ip_addr_t *addr,u16_t port);
void dns_init(void);
void dns_setserver(u8_t numdns,ip_addr_t *dnsserver);
ip_addr_t * dns_getserver(u8_t numdns);
void dns_tmr(void);
err_t dns_gethostbyname_addrtype(char *hostname,ip_addr_t *addr,dns_found_callback *found,void *callback_arg,u8_t dns_addrtype);
err_t dns_gethostbyname(char *hostname,ip_addr_t *addr,dns_found_callback *found,void *callback_arg);
u16_t lwip_standard_chksum(void *dataptr,int len);
u16_t inet_chksum_pseudo(pbuf *p,u8_t proto,u16_t proto_len,ip4_addr_t *src,ip4_addr_t *dest);
u16_t ip_chksum_pseudo(pbuf *p,u8_t proto,u16_t proto_len,ip4_addr_t *src,ip4_addr_t *dest);
u16_t inet_chksum_pseudo_partial(pbuf *p,u8_t proto,u16_t proto_len,u16_t chksum_len,ip4_addr_t *src,ip4_addr_t *dest);
u16_t ip_chksum_pseudo_partial(pbuf *p,u8_t proto,u16_t proto_len,u16_t chksum_len,ip4_addr_t *src,ip4_addr_t *dest);
u16_t inet_chksum(void *dataptr,u16_t len);
u16_t inet_chksum_pbuf(pbuf *p);
u16_t lwip_chksum_copy(void *dst,void *src,u16_t len);
void lwip_init(void);
void dhcp_set_state(dhcp *dhcp,u8_t new_state);
u16_t dhcp_option_short(u16_t options_out_len,u8_t *options,u16_t value);
u16_t dhcp_option_long(u16_t options_out_len,u8_t *options,u32_t value);
pbuf * dhcp_create_msg(netif *netif,dhcp *dhcp,u8_t message_type,u16_t *options_out_len);
void dhcp_option_trailer(u16_t options_out_len,u8_t *options,pbuf *p_out);
err_t dhcp_discover(netif *netif);
void dhcp_check(netif *netif);
void dhcp_bind(netif *netif);
err_t dhcp_inc_pcb_refcount(void);
u16_t dhcp_option_hostname(u16_t options_out_len,u8_t *options);
err_t dhcp_reboot(netif *netif);
err_t dhcp_select(netif *netif);
void dhcp_dec_pcb_refcount(void);
void dhcp_handle_ack(dhcp_msg *msg_in);
void dhcp_recv(void *arg,udp_pcb *pcb,pbuf *p,ip_addr_t *addr,u16_t port);
void dhcp_network_changed(netif *netif);
void dhcp_arp_reply(netif *netif,ip4_addr_t *addr);
err_t dhcp_renew(netif *netif);
u8_t dhcp_supplied_address(netif *netif);
void dhcp_release_and_stop(netif *netif);
err_t dhcp_start(netif *netif);
void dhcp_coarse_tmr(void);
void dhcp_fine_tmr(void);
void dhcp_stop(netif *netif);
void etharp_free_entry(int i);
s16_t etharp_find_entry(ip4_addr_t *ipaddr,u8_t flags,netif *netif);
err_t etharp_raw(netif *netif,eth_addr *ethsrc_addr,eth_addr *ethdst_addr,eth_addr *hwsrc_addr,ip4_addr_t *ipsrc_addr,eth_addr *hwdst_addr,ip4_addr_t *ipdst_addr,u16_t opcode);
void etharp_cleanup_netif(netif *netif);
void etharp_input(pbuf *p,netif *netif);
err_t etharp_request(netif *netif,ip4_addr_t *ipaddr);
void etharp_tmr(void);
err_t etharp_output_to_arp_index(netif *netif,pbuf *q,netif_addr_idx_t arp_idx);
err_t etharp_query(netif *netif,ip4_addr_t *ipaddr,pbuf *q);
err_t etharp_output(netif *netif,pbuf *q,ip4_addr_t *ipaddr);
void igmp_send(netif *netif,igmp_group *group,u8_t type);
void igmp_delaying_member(igmp_group *group,u8_t maxresp);
void igmp_init(void);
err_t igmp_stop(netif *netif);
void igmp_report_groups(netif *netif);
igmp_group * igmp_lookfor_group(netif *ifp,ip4_addr_t *addr);
igmp_group * igmp_lookup_group(netif *ifp,ip4_addr_t *addr);
err_t igmp_start(netif *netif);
void igmp_input(pbuf *p,netif *inp,ip4_addr_t *dest);
err_t igmp_joingroup_netif(netif *netif,ip4_addr_t *groupaddr);
err_t igmp_joingroup(ip4_addr_t *ifaddr,ip4_addr_t *groupaddr);
err_t igmp_leavegroup_netif(netif *netif,ip4_addr_t *groupaddr);
err_t igmp_leavegroup(ip4_addr_t *ifaddr,ip4_addr_t *groupaddr);
void igmp_tmr(void);
int ip4_input_accept(netif *netif);
netif * ip4_route(ip4_addr_t *dest);
err_t ip4_input(pbuf *p,netif *inp);
err_t ip4_output_if_opt_src(pbuf *p,ip4_addr_t *src,ip4_addr_t *dest,u8_t ttl,u8_t tos,u8_t proto,netif *netif,void *ip_options,u16_t optlen);
err_t ip4_output_if_opt(pbuf *p,ip4_addr_t *src,ip4_addr_t *dest,u8_t ttl,u8_t tos,u8_t proto,netif *netif,void *ip_options,u16_t optlen);
err_t ip4_output_if(pbuf *p,ip4_addr_t *src,ip4_addr_t *dest,u8_t ttl,u8_t tos,u8_t proto,netif *netif);
err_t ip4_output_if_src(pbuf *p,ip4_addr_t *src,ip4_addr_t *dest,u8_t ttl,u8_t tos,u8_t proto,netif *netif);
u8_t ip4_addr_isbroadcast_u32(u32_t addr,netif *netif);
int ip4addr_aton(char *cp,ip4_addr_t *addr);
u32_t ipaddr_addr(char *cp);
char * ip4addr_ntoa_r(ip4_addr_t *addr,char *buf,int buflen);
char * ip4addr_ntoa(ip4_addr_t *addr);
void mem_init(void);
void mem_free(uint param_1);
mem * mem_trim(mem *param_1,uint param_2);
mem_size_t * mem_malloc(uint param_1);
void * do_memp_malloc_pool(memp_desc *desc);
void memp_init_pool(memp_desc *desc);
void memp_init(void);
void * memp_malloc(memp_t type);
void memp_free(memp_t type,void *mem);
err_t netif_null_output_ip4(netif *netif,pbuf *p,ip4_addr_t *ipaddr);
void netif_issue_reports(netif *netif,u8_t report_type);
int netif_do_set_ipaddr(netif *netif,ip4_addr_t *ipaddr,ip_addr_t *old_addr);
void netif_init(void);
void netif_set_ipaddr(netif *netif,ip4_addr_t *ipaddr);
void netif_set_netmask(netif *netif,ip4_addr_t *netmask);
void netif_set_gw(netif *netif,ip4_addr_t *gw);
void netif_set_addr(netif *netif,ip4_addr_t *ipaddr,ip4_addr_t *netmask,ip4_addr_t *gw);
netif * netif_add(netif *netif,ip4_addr_t *ipaddr,ip4_addr_t *netmask,ip4_addr_t *gw,void *state,netif_init_fn.conflict *init,netif_input_fn *input);
void netif_set_default(netif *netif);
void netif_set_up(netif *netif);
void netif_set_down(netif *netif);
void netif_remove(netif *netif);
void netif_set_status_callback(netif *netif,netif_status_callback_fn *status_callback);
void netif_set_link_up(netif *netif);
void netif_set_link_down(netif *netif);
netif * netif_get_by_index(u8_t idx);
netif * netif_find(char *name);
pbuf * pbuf_skip_const(pbuf *in,u16_t in_offset,u16_t *out_offset);
void pbuf_free_ooseq_callback(void *arg);
u8_t pbuf_add_header_impl(pbuf *p,size_t header_size_increment,u8_t force);
pbuf * pbuf_alloc_reference(void *payload,u16_t length,pbuf_type type);
pbuf * pbuf_alloced_custom(pbuf_layer l,u16_t length,pbuf_type type,pbuf_custom *p,void *payload_mem,u16_t payload_mem_len);
u8_t pbuf_add_header(pbuf *p,size_t header_size_increment);
u8_t pbuf_remove_header(pbuf *p,size_t header_size_decrement);
u8_t pbuf_header(pbuf *p,s16_t header_size_increment);
u8_t pbuf_header_force(pbuf *p,s16_t header_size_increment);
u8_t pbuf_free(pbuf *p);
pbuf * pbuf_alloc(pbuf_layer layer,u16_t length,pbuf_type type);
void pbuf_realloc(pbuf *p,u16_t new_len);
pbuf * pbuf_free_header(pbuf *q,u16_t size);
u16_t pbuf_clen(pbuf *p);
void pbuf_ref(pbuf *p);
void pbuf_cat(pbuf *h,pbuf *t);
void pbuf_chain(pbuf *h,pbuf *t);
err_t pbuf_copy(pbuf *p_to,pbuf *p_from);
u16_t pbuf_copy_partial(pbuf *buf,void *dataptr,u16_t len,u16_t offset);
err_t pbuf_take(pbuf *buf,void *dataptr,u16_t len);
err_t pbuf_take_at(pbuf *buf,void *dataptr,u16_t len,u16_t offset);
pbuf * pbuf_clone(pbuf_layer layer,pbuf_type type,pbuf *p);
int pbuf_try_get_at(pbuf *p,u16_t offset);
u8_t pbuf_get_at(pbuf *p,u16_t offset);
void pbuf_put_at(pbuf *p,u16_t offset,u8_t data);
u16_t pbuf_memcmp(pbuf *p,u16_t offset,void *s2,u16_t n);
u16_t pbuf_memfind(pbuf *p,void *mem,u16_t mem_len,u16_t start_offset);
raw_input_state_t raw_input(pbuf *p,netif *inp);
err_t raw_bind(raw_pcb *pcb,ip_addr_t *ipaddr);
void raw_bind_netif(raw_pcb *pcb,netif *netif);
err_t raw_connect(raw_pcb *pcb,ip_addr_t *ipaddr);
void raw_recv(raw_pcb *pcb,raw_recv_fn *recv,void *recv_arg);
err_t raw_sendto_if_src(raw_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,netif *netif,ip_addr_t *src_ip);
err_t raw_sendto(raw_pcb *pcb,pbuf *p,ip_addr_t *ipaddr);
err_t raw_send(raw_pcb *pcb,pbuf *p);
void raw_remove(raw_pcb *pcb);
raw_pcb * raw_new(u8_t proto);
raw_pcb * raw_new_ip_type(u8_t type,u8_t proto);
void raw_netif_ip_addr_changed(ip_addr_t *old_addr,ip_addr_t *new_addr);
raw_pcb * raw_get_pcbs(void);
void stats_init(void);
void stats_netstat(void *ctx);
u16_t tcp_new_port(void);
err_t tcp_close_shutdown_fin(tcp_pcb *pcb);
void tcp_init(void);
void tcp_free(tcp_pcb *pcb);
err_t tcp_bind(tcp_pcb *pcb,ip_addr_t *ipaddr,u16_t port);
void tcp_bind_netif(tcp_pcb *pcb,netif *netif);
tcp_pcb * tcp_listen_with_backlog_and_err(tcp_pcb *pcb,u8_t backlog,err_t *err);
u32_t tcp_update_rcv_ann_wnd(tcp_pcb *pcb);
void tcp_recved(tcp_pcb *pcb,u16_t len);
void tcp_seg_free(tcp_seg *seg);
void tcp_segs_free(tcp_seg *seg);
void tcp_setprio(tcp_pcb *pcb,u8_t prio);
tcp_seg * tcp_seg_copy(tcp_seg *seg);
void tcp_arg(tcp_pcb *pcb,void *arg);
void tcp_recv(tcp_pcb *pcb,tcp_recv_fn *recv);
void tcp_sent(tcp_pcb *pcb,tcp_sent_fn *sent);
void tcp_err(tcp_pcb *pcb,tcp_err_fn *err);
void tcp_accept(tcp_pcb *pcb,tcp_accept_fn accept);
void tcp_poll(tcp_pcb *pcb,tcp_poll_fn *poll,u8_t interval);
u32_t tcp_next_iss(tcp_pcb *pcb);
u16_t tcp_eff_send_mss_netif(u16_t sendmss,netif *outif,ip_addr_t *dest);
err_t tcp_connect(tcp_pcb *pcb,ip_addr_t *ipaddr,u16_t port,tcp_connected_fn connected);
char * tcp_debug_state_str(tcp_state s);
err_t tcp_tcp_get_tcp_addrinfo(tcp_pcb *pcb,int local,ip_addr_t *addr,u16_t *port);
void tcp_free_ooseq(tcp_pcb *pcb);
void tcp_pcb_purge(tcp_pcb *pcb);
void tcp_pcb_remove(tcp_pcb **pcblist,tcp_pcb *pcb);
void tcp_abandon(tcp_pcb *pcb,int reset);
void tcp_abort(tcp_pcb *pcb);
err_t tcp_accept_null(void *arg,tcp_pcb *pcb,err_t err);
void tcp_netif_ip_addr_changed_pcblist(tcp_pcb *pcb_list);
void tcp_netif_ip_addr_changed(ip_addr_t *old_addr,ip_addr_t *new_addr);
void tcp_kill_state(tcp_state state);
tcp_pcb * tcp_alloc(u8_t prio);
tcp_pcb * tcp_new_ip_type(u8_t type);
err_t tcp_close_shutdown(tcp_pcb *pcb,u8_t rst_on_unacked_data);
err_t tcp_close(tcp_pcb *pcb);
err_t tcp_recv_null(void *arg,tcp_pcb *pcb,pbuf *p,err_t err);
err_t tcp_process_refused_data(tcp_pcb *pcb);
void tcp_fasttmr(void);
err_t tcp_shutdown(tcp_pcb *pcb,int shut_rx,int shut_tx);
void tcp_slowtmr(void);
void tcp_tmr(void);
int tcp_get_pcbs(tcp_pcb ****list);
u8_t tcp_get_next_optbyte(void);
void tcp_oos_insert_segment(tcp_seg *cseg,tcp_seg *next);
void tcp_parseopt(undefined2 *param_1);
int tcp_input_delayed_close(tcp_pcb *pcb);
tcp_seg * tcp_free_acked_segments(tcp_seg *seg_list);
void tcp_receive(tcp_pcb *pcb);
void tcp_input(pbuf *p,netif *inp);
void tcp_trigger_input_pcb_close(void);
void tcp_seg_add_chksum(u16_t chksum,u16_t len,u16_t *seg_chksum,u8_t *seg_chksum_swapped);
tcp_seg * tcp_create_segment(tcp_pcb *pcb,pbuf *p,u8_t hdrflags,u32_t seqno,u8_t optflags);
pbuf * tcp_output_alloc_header_common(u32_t ackno,u16_t datalen,u32_t seqno_be,u16_t src_port,u16_t dst_port,u8_t flags,u16_t wnd);
pbuf * tcp_output_alloc_header(tcp_pcb *pcb,u16_t datalen,u32_t seqno_be);
err_t tcp_output_control_segment(tcp_pcb *pcb,pbuf *p,ip_addr_t *src,ip_addr_t *dst);
err_t tcp_write(tcp_pcb *pcb,void *arg,u16_t len,u8_t apiflags);
err_t tcp_split_unsent_seg(tcp_pcb *pcb,u16_t split);
err_t tcp_enqueue_flags(tcp_pcb *pcb,u8_t flags);
err_t tcp_send_fin(tcp_pcb *pcb);
err_t tcp_rexmit_rto_prepare(tcp_pcb *pcb);
err_t tcp_rexmit(tcp_pcb *pcb);
void tcp_rexmit_fast(tcp_pcb *pcb);
void tcp_rst(tcp_pcb *pcb,u32_t seqno,u32_t ackno,ip_addr_t *param_4,ip_addr_t *remote_ip,u16_t param_6,u16_t remote_port);
err_t tcp_send_empty_ack(tcp_pcb *pcb);
err_t tcp_output(tcp_pcb *pcb);
void tcp_rexmit_rto_commit(tcp_pcb *pcb);
void tcp_rexmit_rto(tcp_pcb *pcb);
err_t tcp_keepalive(tcp_pcb *pcb);
err_t tcp_zero_window_probe(tcp_pcb *pcb);
void sys_timeout_abs(u32_t abs_time,sys_timeout_handler *handler,void *arg);
void lwip_cyclic_timer(void *arg);
void sys_timeout(u32_t msecs,sys_timeout_handler *handler,void *arg);
void tcp_timer_needed(void);
void tcpip_tcp_timer(void *arg);
void sys_timeouts_init(void);
void sys_untimeout(sys_timeout_handler *handler,void *arg);
void sys_check_timeouts(void);
u32_t sys_timeouts_sleeptime(void);
void udp_init(void);
void udp_input(pbuf *p,netif *inp);
err_t udp_bind(udp_pcb *pcb,ip_addr_t *ipaddr,u16_t port);
err_t udp_sendto_if_src_chksum(udp_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,u16_t dst_port,netif *netif,u8_t have_chksum,u16_t chksum,ip_addr_t *src_ip);
err_t udp_sendto_if_chksum(udp_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,u16_t dst_port,netif *netif,u8_t have_chksum,u16_t chksum);
err_t udp_sendto_chksum(udp_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,u16_t dst_port,u8_t have_chksum,u16_t chksum);
err_t udp_send_chksum(udp_pcb *pcb,pbuf *p,u8_t have_chksum,u16_t chksum);
err_t udp_sendto(udp_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,u16_t dst_port);
err_t udp_sendto_if(udp_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,u16_t dst_port,netif *netif);
err_t udp_sendto_if_src(udp_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,u16_t dst_port,netif *netif,ip_addr_t *src_ip);
void udp_bind_netif(udp_pcb *pcb,netif *netif);
err_t udp_connect(udp_pcb *pcb,ip_addr_t *ipaddr,u16_t port);
void udp_disconnect(udp_pcb *pcb);
void udp_recv(udp_pcb *pcb,udp_recv_fn *recv,void *recv_arg);
void udp_remove(udp_pcb *pcb);
udp_pcb * udp_new(void);
udp_pcb * udp_new_ip_type(void);
void udp_netif_ip_addr_changed(ip_addr_t *old_addr,ip_addr_t *new_addr);
udp_pcb * udp_get_pcbs(void);
err_t ethernet_input(pbuf *p,netif *netif);
err_t ethernet_output(netif *netif,pbuf *p,eth_addr *src,eth_addr *dst,u16_t eth_type);
err_t netconn_apimsg(tcpip_callback_fn.conflict *fn,api_msg *apimsg);
err_t netconn_close_shutdown(netconn *conn,u8_t how);
netconn * netconn_new_with_proto_and_callback(netconn_type t,u8_t proto,netconn_callback *callback);
err_t netconn_prepare_delete(netconn *conn);
err_t netconn_delete(netconn *conn);
err_t netconn_getaddr(netconn *conn,ip_addr_t *addr,u16_t *port,u8_t local);
err_t netconn_bind(netconn *conn,ip_addr_t *addr,u16_t port);
err_t netconn_connect(netconn *conn,ip_addr_t *addr,u16_t port);
err_t netconn_disconnect(netconn *conn);
err_t netconn_listen_with_backlog(netconn *conn,u8_t backlog);
err_t netconn_tcp_recvd(netconn *conn,size_t len);
err_t netconn_send(netconn *conn,netbuf *buf);
err_t netconn_write_vectors_partly(netconn *conn,netvector *vectors,u16_t vectorcnt,u8_t apiflags,size_t *bytes_written);
err_t netconn_write_partly(netconn *conn,void *dataptr,size_t size,u8_t apiflags,size_t *bytes_written);
err_t netconn_err(netconn *conn);
err_t netconn_accept(netconn *conn,netconn **new_conn);
err_t netconn_recv_data(netconn *conn,void **new_buf,u8_t apiflags);
err_t netconn_recv_udp_raw_netbuf_flags(netconn *conn,netbuf **new_buf,u8_t apiflags);
err_t netconn_recv_data_tcp(netconn *conn,pbuf **new_buf,u8_t apiflags);
err_t netconn_recv_tcp_pbuf_flags(netconn *conn,pbuf **new_buf,u8_t apiflags);
err_t netconn_shutdown(netconn *conn,u8_t shut_rx,u8_t shut_tx);
err_t netconn_join_leave_group(netconn *conn,ip_addr_t *multiaddr,ip_addr_t *netif_addr,netconn_igmp join_or_leave);
err_t netconn_gethostbyname(char *name,ip_addr_t *addr);
void lwip_netconn_do_dns_found(char *name,ip_addr_t *ipaddr,void *arg);
void recv_udp(void *arg,udp_pcb *pcb,pbuf *p,ip_addr_t *addr,u16_t port);
void setup_tcp(netconn *conn);
err_t lwip_netconn_do_connected(void *arg,tcp_pcb *pcb,err_t err);
void err_tcp(void *arg,err_t err);
err_t lwip_netconn_do_writemore(netconn *conn);
err_t lwip_netconn_do_close_internal(netconn *conn);
err_t poll_tcp(void *arg,tcp_pcb *pcb);
u8_t recv_raw(void *arg,raw_pcb *pcb,pbuf *p,ip_addr_t *addr);
err_t sent_tcp(void *arg,tcp_pcb *pcb,u16_t len);
err_t recv_tcp(void *arg,tcp_pcb *pcb,pbuf *p,err_t err);
int lwip_netconn_is_err_msg(void *msg,err_t *err);
void lwip_netconn_do_newconn(void *m);
netconn * netconn_alloc(netconn_type t,netconn_callback *callback);
void netconn_free(netconn *conn);
void netconn_drain(netconn *conn);
err_t accept_function(void *arg,tcp_pcb *newpcb,err_t err);
void lwip_netconn_do_delconn(void *m);
void lwip_netconn_do_bind(void *m);
void lwip_netconn_do_connect(void *m);
void lwip_netconn_do_disconnect(void *m);
void lwip_netconn_do_listen(void *m);
void lwip_netconn_do_send(void *m);
void lwip_netconn_do_recv(void *m);
void lwip_netconn_do_write(void *m);
void lwip_netconn_do_getaddr(void *m);
void lwip_netconn_do_close(void *m);
void lwip_netconn_do_join_leave_group(void *m);
void lwip_netconn_do_gethostbyname(void *arg);
int err_to_errno(err_t err);
void netbuf_delete(netbuf *buf);
void * netbuf_alloc(netbuf *buf,u16_t size);
void netbuf_free(netbuf *buf);
void icmp_input(pbuf *p,netif *inp);
void icmp_dest_unreach(pbuf *p,icmp_dur_type t);
u8_t * dhcp_server_option_find(u8_t *buf,u16_t len,u8_t option);
dhcp_client_node * dhcp_client_find_by_ip(uint8_t *ip);
void dhcp_server_recv(void *arg,udp_pcb *pcb,pbuf *p,ip_addr_t *recv_addr,u16_t port);
err_t dhcp_server_start(netif *netif,ip4_addr_t *start,ip4_addr_t *end);
err_t dhcp_server_stop(netif *netif);
void dhcpd_start(netif *netif);
void tcpc_entry(void *arg);
void tcpclient_cmd(char *buf,int len,int argc,char **argv);
int network_netutils_tcpclinet_cli_register(void);
void TCP_Server(void *pvParameters);
void cmd_tcp_server(char *buf,int len,int argc,char **argv);
int network_netutils_tcpserver_cli_register(void);
void iperf_server_udp_entry(char *name);
void iperf_client_udp_entry(char *name);
void iperf_server_entry(char *name);
void iperf_client_tcp_entry(char *name);
void iperf_server_udp(void *arg);
void iperf_server_udp_recv_fn(void *arg,udp_pcb *pcb,pbuf *p,ip_addr_t *addr,u16_t port);
void iperf_client_udp(void *arg);
void iperf_server(void *arg);
void iperf_client_tcp(void *arg);
void ipus_test_cmd(char *buf,int len,int argc,char **argv);
void ipu_test_cmd(char *buf,int len,int argc,char **argv);
void ipc_test_cmd(char *buf,int len,int argc,char **argv);
void ips_test_cmd(char *buf,int len,int argc,char **argv);
int network_netutils_iperf_cli_register(void);
void cmd_netstat(char *buf,int len,int argc,char **argv);
int network_netutils_netstat_cli_register(void);
void ping_usage(void);
void ping_free(void *arg);
void ping_timeout(void *arg);
u8_t ping_recv(void *arg,raw_pcb *pcb,pbuf *p,ip_addr_t *addr);
ping_var * ping_api_init(u16_t interval,u16_t size,u32_t count,u16_t timeout,ip_addr_t *dest);
void ping_cmd(char *buf,int len,int argc,char **argv);
int network_netutils_ping_cli_register(void);
int dirent_type(void *addr);
uint32_t dirent_hardfh(void *addr);
uint32_t dirent_childaddr(void *addr);
uint32_t dirent_size(void *addr);
int romfs_close(file_t *fp);
int romfs_ioctl(file_t *fp,int cmd,ulong arg);
ssize_t romfs_read(file_t *fp,char *buf,size_t length);
undefined4 file_info(char *param_1,char **param_2,char **param_3);
int romfs_closedir(file_t *fp,aos_dir_t *dir);
off_t romfs_lseek(file_t *fp,off_t off,int whence);
aos_dirent_t * romfs_readdir(file_t *fp,aos_dir_t *dir);
uint32_t dirent_file(char *path,void **p_addr_start_input,void **p_addr_end_input);
aos_dir_t * romfs_opendir(file_t *fp,char *path);
int romfs_stat(file_t *fp,char *path,stat *st);
int romfs_open(file_t *fp,char *path,int flags);
int romfs_register(void);
void _startup_sntp(void *arg);
void cmd_sntp_date(char *buf,int len,int argc,char **argv);
void cmd_sntp_time(char *buf,int len,int argc,char **argv);
void cmd_sntp_start(char *buf,int len,int argc,char **argv);
int sntp_cli_init(void);
void sntp_retry(void *arg);
void sntp_recv(void *arg,udp_pcb *pcb,pbuf *p,ip_addr_t *addr,u16_t port);
void sntp_send_request(ip_addr_t *server_addr);
void sntp_request(void *arg);
void sntp_dns_found(char *hostname,ip_addr_t *ipaddr,void *arg);
void sntp_init(void);
void sntp_setoperatingmode(u8_t operating_mode);
int sntp_get_time(uint32_t *seconds,uint32_t *frags);
void sntp_setservername(u8_t idx,char *server);
char * utils_bin2hex(char *dst,void *src,size_t count);
void utils_sha256_init(iot_sha256_context *ctx);
void utils_sha256_free(iot_sha256_context *ctx);
void utils_sha256_starts(iot_sha256_context *ctx);
void utils_sha256_process(iot_sha256_context *ctx,uchar *data);
void utils_sha256_update(iot_sha256_context *ctx,uchar *input,uint32_t ilen);
void utils_sha256_update(iot_sha256_context *ctx,uchar *input,uint32_t ilen);
void utils_sha256_finish(iot_sha256_context *ctx,uint8_t *output);
void bl_printk(char *format,...);
int log_buf_out(char *file,int line,void *inbuf,int len,LOG_BUF_OUT_DATA_TYPE_T type);
int utils_dns_domain_get(uint8_t *records,uint8_t *buf,int *len);
void utils_list_init(utils_list *list);
void utils_list_push_back(utils_list *list,utils_list_hdr *list_hdr);
utils_list_hdr * utils_list_pop_front(utils_list *list);
void utils_hexdump(void *mem,uint len);
undefined4 utils_time_date_from_epoch(uint param_1,undefined *param_2);
int utils_getopt_init(getopt_env_t *env,int opterr);
int utils_getopt(getopt_env_t *env,int argc,char **argv,char *optstring);
void Bl_F_fast(uchar *digest,uchar *digest1,char *password,uchar *ssid,int ssidlength,int count,uchar *output);
int utils_wifi_psk_cal_fast_bin(char *password,uchar *ssid,int ssidlength,uchar *output);
int utils_memp_init(utils_memp_pool_t **pool,uint16_t node_size,uint16_t pool_cap,uint8_t align_req);
int utils_memp_deinit(utils_memp_pool_t *pool);
void * utils_memp_malloc(utils_memp_pool_t *pool);
int utils_memp_free(utils_memp_pool_t *pool,void *node);
int utils_tlv_bl_pack_auto(uint32_t *buf,int buf_sz,uint16_t type,void *arg1);
int utils_tlv_bl_unpack_auto(uint32_t *buf,int buf_sz,uint16_t type,void *arg1);
void utils_hmac_sha1_fast(uchar **ppText,int *pTextLen,int textNum,uchar *key,int key_len,uchar *output,int outputLen);
int vfs_init(void);
int aos_open(char *path,int flags);
int aos_close(int fd);
ssize_t aos_read(int fd,void *buf,size_t nbytes);
ssize_t aos_write(int fd,void *buf,size_t nbytes);
int aos_ioctl(int fd,int cmd,ulong arg);
off_t aos_lseek(int fd,off_t offset,int whence);
int aos_stat(char *path,stat *st);
aos_dir_t * aos_opendir(char *path);
int aos_closedir(aos_dir_t *dir);
aos_dirent_t * aos_readdir(aos_dir_t *dir);
file_t * new_file(inode_t *node);
void del_file(file_t *file);
int get_fd(file_t *file);
file_t * get_file(int fd);
int inode_init(void);
int inode_alloc(void);
inode_t * inode_open(char *path);
int inode_forearch_name(anon_subr_int_void_ptr_inode_t_ptr *cb,void *arg);
void inode_ref(inode_t *node);
void inode_unref(inode_t *node);
int inode_reserve(char *path,inode_t **inode);
int aos_register_driver(char *path,file_ops_t *ops,void *arg);
int aos_register_fs(char *path,fs_ops_t *ops,void *arg);
int vfs_uart_open(inode_t *inode,file_t *fp);
void __uart_rx_irq(void *p_arg);
void __uart_tx_irq(void *p_arg);
int vfs_uart_close(file_t *fp);
ssize_t vfs_uart_read(file_t *fp,void *buf,size_t nbytes);
ssize_t vfs_uart_write(file_t *fp,void *buf,size_t nbytes);
int vfs_uart_poll(file_t *fp,_Bool setup,poll_notify_t *notify,pollfd *fd,void *opa);
int vfs_uart_sync(file_t *fp);
int uart_ioctl_cmd_waimode(uart_dev_t *uart_dev,int cmd,ulong arg);
int uart_ioctl_cmd_setconfig(uart_dev_t *uart_dev,ulong arg);
int vfs_uart_ioctl(file_t *fp,int cmd,ulong arg);
yloop_ctx_t * get_context(void);
void aos_loop_set_eventfd(int fd);
aos_loop_t aos_loop_init(void);
int aos_poll_read_fd(int sock,aos_poll_call_t *cb,void *private_data);
int aos_post_delayed_action(int ms,aos_call_t *action,void *param);
void aos_loop_run(yloop_sock_t *param_1);
void vfs_poll_notify(pollfd *fd,void *arg);
int aos_poll(pollfd *fds,int nfds,int timeout);
int aos_fcntl(int fd,int cmd,int val);
void dfl_entry(void *arg);
int aos_task_new(char *name,anon_subr_void_void_ptr *fn,void *arg,int stack_size);
void aos_task_exit(int code);
int aos_task_key_create(aos_task_key_t *key);
int aos_task_setspecific(aos_task_key_t key,void *vp);
void * aos_task_getspecific(aos_task_key_t key);
int aos_mutex_new(aos_mutex_t *mutex);
void aos_mutex_free(aos_mutex_t *mutex);
int aos_mutex_lock(aos_mutex_t *mutex,uint ms);
int aos_mutex_unlock(aos_mutex_t *mutex);
int aos_sem_new(aos_sem_t *sem,int count);
void aos_sem_free(aos_sem_t *sem);
int aos_sem_wait(aos_sem_t *sem,uint ms);
void aos_sem_signal(aos_sem_t *sem);
void * aos_malloc(size_t xWantedSize);
void aos_free(void *pv);
longlong aos_now_ms(void);
int event_poll(file_t *f,_Bool setup,poll_notify_t *notify,pollfd *fd,void *opa);
int event_open(inode_t *node,file_t *file);
ssize_t _event_write(void *buf,size_t len,_Bool urgent);
int event_ioctl(file_t *f,int cmd,ulong arg);
ssize_t event_write(file_t *f,void *buf,size_t len);
int event_close(file_t *file);
ssize_t event_read(file_t *f,void *buf,size_t len);
int vfs_device_init(void);
void event_read_cb(int fd,void *param);
int aos_event_service_init(void);
int aos_post_event(uint16_t type,uint16_t code,ulong value);
int aos_register_event_filter(uint16_t type,aos_event_cb *cb,void *priv);
IoT_Error_t aws_iot_shadow_init(AWS_IoT_Client *pClient,ShadowInitParameters_t *pParams);
IoT_Error_t aws_iot_shadow_connect(AWS_IoT_Client *pClient,ShadowConnectParameters_t.conflict6 *pParams);
IoT_Error_t aws_iot_shadow_register_delta(AWS_IoT_Client *pMqttClient,jsonStruct_t *pStruct);
IoT_Error_t aws_iot_shadow_yield(AWS_IoT_Client *pClient,uint32_t timeout);
IoT_Error_t aws_iot_shadow_disconnect(AWS_IoT_Client *pClient);
IoT_Error_t aws_iot_shadow_update(AWS_IoT_Client *pClient,char *pThingName,char *pJsonString,fpActionCallback_t *callback,void *pContextData,uint8_t timeout_seconds,_Bool isPersistentSubscribe);
IoT_Error_t aws_iot_shadow_set_autoreconnect_status(AWS_IoT_Client *pClient,_Bool newStatus);
IoT_Error_t aws_iot_shadow_internal_action(char *pThingName,ShadowActions_t action,char *pJsonDocumentToBeSent,size_t jsonSize,fpActionCallback_t *callback,void *pCallbackContext,uint32_t timeout_seconds,_Bool isSticky);
IoT_Error_t convertDataToString(char *pStringBuffer,size_t maxSizoStringBuffer,JsonPrimitiveType type,void *pData);
void resetClientTokenSequenceNum(void);
IoT_Error_t aws_iot_shadow_init_json_document(char *pJsonDocument,size_t maxSizeOfJsonDocument);
IoT_Error_t aws_iot_shadow_add_reported(char *pJsonDocument,size_t maxSizeOfJsonDocument,uint8_t count,...);
int32_t FillWithClientTokenSize(char *pBufferToBeUpdatedWithClientToken,size_t maxSizeOfJsonDocument);
IoT_Error_t aws_iot_finalize_json_document(char *pJsonDocument,size_t maxSizeOfJsonDocument);
_Bool isJsonValidAndParse(char *pJsonDocument,size_t jsonSize,void *pJsonHandler,int32_t *pTokenCount);
_Bool isJsonKeyMatchingAndUpdateValue(char *pJsonDocument,void *pJsonHandler,int32_t tokenCount,jsonStruct_t *pDataStruct,uint32_t *pDataLength,int32_t *pDataPosition);
_Bool extractClientToken(char *pJsonDocument,size_t jsonSize,char *pExtractedClientToken,size_t clientTokenSize);
_Bool extractVersionNumber(char *pJsonDocument,void *pJsonHandler,int32_t tokenCount,uint32_t *pVersionNumber);
void shadow_delta_callback(AWS_IoT_Client *pClient,char *topicName,uint16_t topicNameLen,IoT_Publish_Message_Params *params,void *pData);
int16_t findIndexOfSubscriptionList(char *pTopic);
void topicNameFromThingAndAction(char *pTopic,char *pThingName,ShadowActions_t action,ShadowAckTopicTypes_t ackType);
void unsubscribeFromAcceptedAndRejected(uint8_t index);
void AckStatusCallback(AWS_IoT_Client *pClient,char *topicName,uint16_t topicNameLen,IoT_Publish_Message_Params *params,void *pData);
void initDeltaTokens(void);
IoT_Error_t registerJsonTokenOnDelta(jsonStruct_t *pStruct);
void initializeRecords(AWS_IoT_Client *pClient);
_Bool isSubscriptionPresent(char *pThingName,ShadowActions_t action);
IoT_Error_t subscribeToShadowActionAcks(char *pThingName,ShadowActions_t action,_Bool isSticky);
void incrementSubscriptionCnt(char *pThingName,ShadowActions_t action,_Bool isSticky);
IoT_Error_t publishToShadowAction(char *pThingName,ShadowActions_t action,char *pJsonDocumentToBeSent);
_Bool getNextFreeIndexOfAckWaitList(uint8_t *pIndex);
void addToAckWaitList(uint8_t indexAckWaitList,char *pThingName,ShadowActions_t action,char *pExtractedClientToken,fpActionCallback_t *callback,void *pCallbackContext,uint32_t timeout_seconds);
void HandleExpiredResponseCallbacks(void);
_Bool has_timer_expired(Timer *timer);
void countdown_ms(Timer *timer,uint32_t timeout);
uint32_t left_ms(Timer *timer);
void countdown_sec(Timer *timer,uint32_t timeout);
void init_timer(Timer *timer);
int jsmn_parse(jsmn_parser *parser,char *js,size_t len,jsmntok_t *tokens,uint num_tokens);
void jsmn_init(jsmn_parser *parser);
int8_t jsoneq(char *json,jsmntok_t *tok,char *s);
IoT_Error_t parseUnsignedInteger32Value(uint32_t *i,char *jsonString,jsmntok_t *token);
IoT_Error_t parseUnsignedInteger16Value(uint16_t *i,char *jsonString,jsmntok_t *token);
IoT_Error_t parseUnsignedInteger8Value(uint8_t *i,char *jsonString,jsmntok_t *token);
IoT_Error_t parseInteger32Value(int32_t *i,char *jsonString,jsmntok_t *token);
IoT_Error_t parseInteger16Value(int16_t *i,char *jsonString,jsmntok_t *token);
IoT_Error_t parseInteger8Value(int8_t *i,char *jsonString,jsmntok_t *token);
IoT_Error_t parseFloatValue(float *f,char *jsonString,jsmntok_t *token);
IoT_Error_t parseDoubleValue(double *d,char *jsonString,jsmntok_t *token);
IoT_Error_t parseBooleanValue(_Bool *b,char *jsonString,jsmntok_t *token);
IoT_Error_t parseStringValue(char *buf,size_t bufLen,char *jsonString,jsmntok_t *token);
ClientState aws_iot_mqtt_get_client_state(AWS_IoT_Client *pClient);
IoT_Error_t aws_iot_mqtt_client_lock_mutex(AWS_IoT_Client *pClient,IoT_Mutex_t *pMutex);
IoT_Error_t aws_iot_mqtt_client_unlock_mutex(AWS_IoT_Client *pClient,IoT_Mutex_t *pMutex);
int aws_iot_mqtt_set_client_state(AWS_IoT_Client *param_1,uint param_2,ClientState param_3);
IoT_Error_t aws_iot_mqtt_set_connect_params(AWS_IoT_Client *pClient,IoT_Client_Connect_Params *pNewConnectParams);
IoT_Error_t aws_iot_mqtt_init(AWS_IoT_Client *pClient,IoT_Client_Init_Params *pInitParams);
uint16_t aws_iot_mqtt_get_next_packet_id(AWS_IoT_Client *pClient);
_Bool aws_iot_mqtt_is_client_connected(AWS_IoT_Client *pClient);
IoT_Error_t aws_iot_mqtt_autoreconnect_set_status(AWS_IoT_Client *pClient,_Bool newStatus);
IoT_Error_t aws_iot_mqtt_connect(AWS_IoT_Client *pClient,IoT_Client_Connect_Params *pConnectParams);
IoT_Error_t _aws_iot_mqtt_internal_disconnect(AWS_IoT_Client *pClient);
IoT_Error_t aws_iot_mqtt_disconnect(AWS_IoT_Client *pClient);
IoT_Error_t aws_iot_mqtt_attempt_reconnect(AWS_IoT_Client *pClient);
IoT_Error_t aws_iot_mqtt_internal_serialize_ack(uchar *pTxBuf,size_t txBufLen,MessageTypes msgType,uint8_t dup,uint16_t packetId,uint32_t *pSerializedLen);
IoT_Error_t aws_iot_mqtt_internal_deserialize_publish(uint8_t *dup,QoS *qos,uint8_t *retained,uint16_t *pPacketId,char **pTopicName,uint16_t *topicNameLen,uchar **payload,size_t *payloadLen,uchar *pRxBuf,size_t rxBufLen);
IoT_Error_t aws_iot_mqtt_internal_deserialize_ack(uchar *pPacketType,uchar *dup,uint16_t *pPacketId,uchar *pRxBuf,size_t rxBuflen);
IoT_Error_t aws_iot_mqtt_publish(AWS_IoT_Client *pClient,char *pTopicName,uint16_t topicNameLen,IoT_Publish_Message_Params *pParams);
IoT_Error_t _aws_iot_mqtt_deserialize_suback(uint16_t *pPacketId,uint32_t *pGrantedQoSCount,QoS *pGrantedQoSs,uchar *pRxBuf,size_t rxBufLen);
IoT_Error_t _aws_iot_mqtt_serialize_subscribe(uchar *pTxBuf,size_t txBufLen,uint16_t packetId,char **pTopicNameList,uint16_t *pTopicNameLenList,QoS *pRequestedQoSs,uint32_t *pSerializedLen);
IoT_Error_t aws_iot_mqtt_subscribe(AWS_IoT_Client *pClient,char *pTopicName,uint16_t topicNameLen,QoS qos,pApplicationHandler_t *pApplicationHandler,void *pApplicationHandlerData);
IoT_Error_t aws_iot_mqtt_resubscribe(AWS_IoT_Client *pClient);
IoT_Error_t aws_iot_mqtt_unsubscribe(AWS_IoT_Client *pClient,char *pTopicFilter,uint16_t topicFilterLen);
IoT_Error_t _aws_iot_mqtt_handle_disconnect(AWS_IoT_Client *pClient);
IoT_Error_t aws_iot_mqtt_yield(AWS_IoT_Client *pClient,uint32_t timeout_ms);
IoT_Error_t iot_tls_is_connected(Network *pNetwork);
IoT_Error_t iot_tls_connect(Network *pNetwork,TLSConnectParams *params);
int _iot_tls_verify_cert(void *data,mbedtls_x509_crt *crt,int depth,uint32_t *flags);
IoT_Error_t iot_tls_write(Network *pNetwork,uchar *pMsg,size_t len,Timer *timer,size_t *written_len);
IoT_Error_t iot_tls_read(Network *pNetwork,uchar *pMsg,size_t len,Timer *timer,size_t *read_len);
IoT_Error_t iot_tls_disconnect(Network *pNetwork);
IoT_Error_t iot_tls_destroy(Network *pNetwork);
IoT_Error_t iot_tls_init(Network *pNetwork,char *pRootCALocation,char *pDeviceCertLocation,char *pDevicePrivateKeyLocation,char *pDestinationURL,uint16_t destinationPort,uint32_t timeout_ms,_Bool ServerVerificationFlag);
IoT_Error_t aws_iot_thread_mutex_init(IoT_Mutex_t *pMutex);
IoT_Error_t aws_iot_thread_mutex_lock(IoT_Mutex_t *pMutex);
IoT_Error_t aws_iot_thread_mutex_trylock(IoT_Mutex_t *pMutex);
IoT_Error_t aws_iot_thread_mutex_unlock(IoT_Mutex_t *pMutex);
IoT_Error_t aws_iot_thread_mutex_destroy(IoT_Mutex_t *pMutex);
IoT_Error_t _aws_iot_mqtt_internal_readWrapper(AWS_IoT_Client *pClient,size_t offset,size_t size,Timer *pTimer,size_t *read_len);
size_t aws_iot_mqtt_internal_write_len_to_buffer(uchar *buf,uint32_t length);
IoT_Error_t aws_iot_mqtt_internal_decode_remaining_length_from_buffer(uchar *buf,uint32_t *decodedLen,uint32_t *readBytesLen);
uint32_t aws_iot_mqtt_internal_get_final_packet_length_from_remaining_length(uint32_t rem_len);
uint16_t aws_iot_mqtt_internal_read_uint16_t(uchar **pptr);
void aws_iot_mqtt_internal_write_uint_16(uchar **pptr,uint16_t anInt);
uchar aws_iot_mqtt_internal_read_char(uchar **pptr);
void aws_iot_mqtt_internal_write_char(uchar **pptr,uchar c);
void aws_iot_mqtt_internal_write_utf8_string(uchar **pptr,char *string,uint16_t stringLen);
IoT_Error_t aws_iot_mqtt_internal_init_header(MQTTHeader *pHeader,MessageTypes message_type,QoS qos,uint8_t dup,uint8_t retained);
IoT_Error_t aws_iot_mqtt_internal_send_packet(AWS_IoT_Client *pClient,size_t length,Timer *pTimer);
IoT_Error_t aws_iot_mqtt_internal_cycle_read(AWS_IoT_Client *pClient,Timer *pTimer,uint8_t *pPacketType);
IoT_Error_t aws_iot_mqtt_internal_flushBuffers(AWS_IoT_Client *pClient);
IoT_Error_t aws_iot_mqtt_internal_wait_for_read(AWS_IoT_Client *pClient,uint8_t packetType,Timer *pTimer);
IoT_Error_t aws_iot_mqtt_internal_serialize_zero(uchar *pTxBuf,size_t txBufLen,MessageTypes packetType,size_t *pSerializedLength);
size_t format_int(char *q,size_t n,uint flags,int base,int width,int prec);
char * cvt(int ndigits,int *decpt,int *sign,char *buf,int eflag);
char * ecvtbuf(int ndigits,int *decpt,int *sign,char *buf);
char * fcvtbuf(int ndigits,int *decpt,int *sign,char *buf);
char * flt(char *str,int size,int precision,char fmt,int flags);
int vsnprintf(char *__s,size_t __maxlen,char *__format,__gnuc_va_list __arg);
int vsprintf(char *__s,char *__format,__gnuc_va_list __arg);
void vprint(char *fmt,va_list argp);
int bl_putchar(int c);
int puts(char *__s);
int printf(char *__format,...);
int sprintf(char *__s,char *__format,...);
int snprintf(char *__s,size_t __maxlen,char *__format,...);
int sscanf(char *__s,char *__format,...);
void set_bit(ulong *bitmap,uint bit);
int vsscanf(char *__s,char *__format,__gnuc_va_list __arg);
uintmax_t strntoumax(char *nptr,char **endptr,int base,size_t n);
BL_Err_Type UART_Init(UART_ID_Type uartId,UART_CFG_Type *uartCfg);
BL_Err_Type UART_FifoConfig(UART_ID_Type uartId,UART_FifoCfg_Type *fifoCfg);
BL_Err_Type UART_Enable(UART_ID_Type uartId,UART_Direction_Type direct);
BL_Err_Type UART_Disable(UART_ID_Type uartId,UART_Direction_Type direct);
BL_Err_Type UART_SetRxTimeoutValue(UART_ID_Type uartId,uint8_t time);
BL_Err_Type UART_TxFreeRun(UART_ID_Type uartId,BL_Fun_Type txFreeRun);
BL_Err_Type UART_IntMask(UART_ID_Type uartId,UART_INT_Type intType,BL_Mask_Type intMask);
uint8_t UART_GetTxFifoCount(UART_ID_Type uartId);
BL_Err_Type UART_SendData(UART_ID_Type uartId,uint8_t *data,uint32_t len);
uint8_t UART_GetRxFifoCount(UART_ID_Type uartId);
void ADC_Reset(void);
void ADC_Enable(void);
void ADC_Disable(void);
void ADC_Channel_Config(ADC_Chan_Type posCh,ADC_Chan_Type negCh,BL_Fun_Type contEn);
void ADC_Start(void);
void ADC_FIFO_Cfg(ADC_FIFO_Cfg_Type *fifoCfg);
uint8_t ADC_Get_FIFO_Count(void);
void ADC_Parse_Result(uint32_t *orgVal,uint32_t len,ADC_Result_Type *result);
void ADC_Tsen_Init(ADC_TSEN_MOD_Type tsenMod);
void ADC_SET_TSVBE_LOW(void);
void ADC_SET_TSVBE_HIGH(void);
uint32_t TSEN_Get_V_Error(void);
float TSEN_Get_Temp(uint32_t tsen_offset);
void ADC_Init(ADC_CFG_Type *cfg);
void Sec_Eng_PKA_Write_Common_OP_First_Cfg(uint8_t s0RegIndex,uint8_t s0RegType,uint8_t dRegIndex,uint8_t dRegType,uint8_t op,uint8_t lastOp);
BL_Err_Type Sec_Eng_PKA_Wait_ISR(void);
BL_Err_Type Sec_Eng_SHA256_Update(SEC_Eng_SHA256_Ctx *shaCtx,uint8_t *input,uint32_t len);
void Sec_Eng_SHA256_Init(SEC_Eng_SHA256_Ctx *shaCtx,SEC_ENG_SHA_ID_Type shaNo,SEC_ENG_SHA_Type shaType,uint32_t *shaTmpBuf,uint32_t *padding);
void Sec_Eng_SHA_Start(SEC_ENG_SHA_ID_Type shaNo);
BL_Err_Type Sec_Eng_SHA256_Update(SEC_Eng_SHA256_Ctx *shaCtx,SEC_ENG_SHA_ID_Type shaNo,uint8_t *input,uint32_t len);
BL_Err_Type Sec_Eng_SHA256_Finish(SEC_Eng_SHA256_Ctx *shaCtx,SEC_ENG_SHA_ID_Type shaNo,uint8_t *hash);
void Sec_Eng_SHA_Enable_Link(SEC_ENG_SHA_ID_Type shaNo);
void Sec_Eng_SHA_Disable_Link(SEC_ENG_SHA_ID_Type shaNo);
void Sec_Eng_SHA256_Link_Init(SEC_Eng_SHA256_Link_Ctx *shaCtx,SEC_ENG_SHA_ID_Type shaNo,uint32_t linkAddr,uint32_t *shaTmpBuf,uint32_t *padding);
BL_Err_Type Sec_Eng_SHA256_Link_Update(SEC_Eng_SHA256_Link_Ctx *shaCtx,SEC_ENG_SHA_ID_Type shaNo,uint8_t *input,uint32_t len);
BL_Err_Type Sec_Eng_SHA256_Link_Finish(SEC_Eng_SHA256_Link_Ctx *shaCtx,SEC_ENG_SHA_ID_Type shaNo,uint8_t *hash);
void Sec_Eng_AES_Enable_Link(SEC_ENG_AES_ID_Type aesNo);
void Sec_Eng_AES_Disable_Link(SEC_ENG_AES_ID_Type aesNo);
BL_Err_Type Sec_Eng_AES_Link_Work(SEC_ENG_AES_ID_Type aesNo,uint32_t linkAddr,uint8_t *in,uint32_t len,uint8_t *out);
void Sec_Eng_PKA_Reset(void);
void Sec_Eng_PKA_BigEndian_Enable(void);
void Sec_Eng_PKA_Clear_Int(void);
void Sec_Eng_PKA_Read_Block(uint32_t *dest,uint32_t *src,uint32_t len);
void Sec_Eng_PKA_Write_Block(uint32_t *dest,uint32_t *src,uint32_t len);
void Sec_Eng_PKA_Write_Data(SEC_ENG_PKA_REG_SIZE_Type regType,uint8_t regIndex,uint32_t *data,uint16_t size,uint8_t lastOp);
void Sec_Eng_PKA_Read_Data(SEC_ENG_PKA_REG_SIZE_Type regType,uint8_t regIdx,uint32_t *result,uint8_t retSize);
void Sec_Eng_PKA_CREG(SEC_ENG_PKA_REG_SIZE_Type dRegType,uint8_t dRegIdx,uint8_t size,uint8_t lastOp);
void Sec_Eng_PKA_Move_Data(uint8_t dRegType,uint8_t dRegIdx,uint8_t s0RegType,uint8_t s0RegIdx,uint8_t lastOp);
void Sec_Eng_PKA_MREM(uint8_t dRegType,uint8_t dRegIdx,uint8_t s0RegType,uint8_t s0RegIdx,uint8_t s2RegType,uint8_t s2RegIdx,uint8_t lastOp);
void Sec_Eng_PKA_MEXP(uint8_t dRegType,uint8_t dRegIdx,uint8_t s0RegType,uint8_t s0RegIdx,uint8_t s1RegType,uint8_t s1RegIdx,uint8_t s2RegType,uint8_t s2RegIdx,uint8_t lastOp);
void Sec_Eng_PKA_LCMP(uint8_t *cout,uint8_t s0RegType,uint8_t s0RegIdx,uint8_t s1RegType,uint8_t s1RegIdx);
void Sec_Eng_PKA_LSUB(uint8_t dRegType,uint8_t dRegIdx,uint8_t s0RegType,uint8_t s0RegIdx,uint8_t s1RegType,uint8_t s1RegIdx,uint8_t lastOp);
void Sec_Eng_PKA_LMUL(uint8_t dRegType,uint8_t dRegIdx,uint8_t s0RegType,uint8_t s0RegIdx,uint8_t s1RegType,uint8_t s1RegIdx,uint8_t lastOp);
void Sec_Eng_PKA_LDIV(uint8_t dRegType,uint8_t dRegIdx,uint8_t s0RegType,uint8_t s0RegIdx,uint8_t s2RegType,uint8_t s2RegIdx,uint8_t lastOp);
void Sec_Eng_PKA_LMUL2N(uint8_t dRegType,uint8_t dRegIdx,uint8_t s0RegType,uint8_t s0RegIdx,uint16_t bit_shift,uint8_t lastOp);
void SEC_Eng_IntMask(SEC_ENG_INT_Type intType,BL_Mask_Type intMask);
void DMA_Enable(void);
void DMA_Channel_Enable(uint8_t ch);
void DMA_LLI_Init(uint8_t ch,DMA_LLI_Cfg_Type *lliCfg);
void DMA_LLI_Update(uint8_t ch,uint32_t LLI);
void DMA_IntMask(uint8_t ch,DMA_INT_Type intType,BL_Mask_Type intMask);
void Default_Handler(void);
BL_Err_Type GLB_Set_UART_CLK(uint8_t enable,HBN_UART_CLK_Type clkSel,uint8_t div);
BL_Err_Type GLB_Set_ADC_CLK(uint8_t enable,GLB_ADC_CLK_Type clkSel,uint8_t div);
BL_Err_Type GLB_UART_Fun_Sel(GLB_UART_SIG_Type sig,GLB_UART_SIG_FUN_Type fun);
BL_Err_Type GLB_GPIO_Write(GLB_GPIO_Type gpioPin,uint32_t val);
uint32_t GLB_GPIO_Read(GLB_GPIO_Type gpioPin);
BL_Err_Type HBN_Set_UART_CLK_Sel(HBN_UART_CLK_Type clkSel);
BL_Err_Type HBN_Get_RTC_Timer_Val(uint32_t *valLow,uint32_t *valHigh);
void TIMER_SetCompValue(TIMER_Chan_Type timerCh,TIMER_Comp_ID_Type cmpNo,uint32_t val);
void TIMER_SetCountMode(TIMER_Chan_Type timerCh,TIMER_CountMode_Type countMode);
void TIMER_ClearIntStatus(TIMER_Chan_Type timerCh,TIMER_Comp_ID_Type cmpNo);
BL_Err_Type TIMER_Init(TIMER_CFG_Type *timerCfg);
void TIMER_Enable(TIMER_Chan_Type timerCh);
void TIMER_Disable(TIMER_Chan_Type timerCh);
void TIMER_IntMask(TIMER_Chan_Type timerCh,TIMER_INT_Type intType,BL_Mask_Type intMask);
void WDT_Set_Clock(TIMER_ClkSrc_Type clkSrc,uint8_t div);
void WDT_SetCompValue(uint16_t val);
void WDT_ResetCounterValue(void);
void WDT_Enable(void);
void WDT_Disable(void);
void WDT_IntMask(WDT_INT_Type intType,BL_Mask_Type intMask);
uint32_t EF_Ctrl_Get_Byte_Zero_Cnt(uint8_t val);
BL_Err_Type EF_Ctrl_Read_MAC_Address(uint8_t *mac);
uint8_t EF_Ctrl_Is_MAC_Address_Slot_Empty(uint8_t slot,uint8_t reload);
BL_Err_Type EF_Ctrl_Read_MAC_Address_Opt(uint8_t slot,uint8_t *mac,uint8_t reload);
uint EF_Ctrl_Is_CapCode_Slot_Empty(int param_1,int param_2);
BL_Err_Type EF_Ctrl_Read_CapCode_Opt(uint8_t slot,uint8_t *code,uint8_t reload);
uint8_t EF_Ctrl_Is_PowerOffset_Slot_Empty(uint8_t slot,uint8_t reload);
BL_Err_Type EF_Ctrl_Read_PowerOffset_Opt(uint8_t slot,int8_t *pwrOffset,uint8_t reload);
int8_t mfg_media_read_xtal_capcode(uint8_t *capcode,uint8_t reload);
int8_t mfg_media_read_poweroffset(int8_t *pwrOffset,uint8_t reload);
int8_t mfg_media_read_macaddr(uint8_t *mac,uint8_t reload);
void bflb_platform_usart_dbg_send(uint8_t *data,uint32_t len);
void bflb_platform_printf(char *fmt,...);
void Default_Handler_Stub(void);
int8_t mfg_efuse_read_xtal_capcode(uint8_t *capcode,uint8_t reload);
int8_t mfg_efuse_read_poweroffset(int8_t *pwrOffset,uint8_t reload);
int8_t mfg_efuse_read_macaddr(uint8_t *mac,uint8_t reload);
int8_t mfg_flash_read_xtal_capcode(uint8_t *capcode,uint8_t reload);
int8_t mfg_flash_read_poweroffset(int8_t *pwrOffset,uint8_t reload);
int8_t mfg_flash_read_macaddr(uint8_t *mac,uint8_t reload);
void Bl_F(uchar *digest,uchar *digest1,char *password,uchar *ssid,int ssidlength,int iterations,int count,uchar *output);
int Bl_PasswordHash(char *password,uchar *ssid,int ssidlength,uchar *output);
int bl60x_fw_password_hash(char *password,uchar *ssid,int ssidlength,uchar *output);
int bl_mtd_open(char *name,bl_mtd_handle_t *handle,uint flags);
int bl_mtd_close(bl_mtd_handle_t handle);
int bl_mtd_info(bl_mtd_handle_t handle,bl_mtd_info_t *info);
int bl_mtd_erase(bl_mtd_handle_t handle,uint addr,uint size);
int bl_mtd_erase_all(bl_mtd_handle_t handle);
int bl_mtd_write(bl_mtd_handle_t handle,uint addr,uint size,uint8_t *data);
int bl_mtd_read(bl_mtd_handle_t handle,uint addr,uint size,uint8_t *data);
int bloop_init(loop_ctx *loop);
int bloop_handler_register(loop_ctx *loop,loop_evt_handler *handler,int priority);
void bloop_timer_init(loop_timer *timer,int use_auto_free);
void bloop_timer_configure(loop_timer *timer,uint delay_ms,anon_subr_void_loop_ctx_ptr_loop_timer_ptr_void_ptr *cb,void *arg,int idx_task,uint32_t evt_type_map);
void bloop_timer_repeat_enable(loop_timer *timer);
void bloop_timer_repeat_reconfigure(loop_timer *timer);
void bloop_timer_register(loop_ctx *loop,loop_timer *timer);
void bloop_wait_startup(loop_ctx *loop);
void bloop_evt_set_async(loop_ctx *loop,uint evt,uint32_t evt_map);
void bloop_evt_set_sync(loop_ctx *loop,uint evt,uint32_t evt_map);
void bloop_evt_unset_sync(loop_ctx *loop,uint evt);
void bloop_run(loop_ctx *param_1);
int bloop_status_dump(loop_ctx *loop);
int loop_evt_entity_sys_handler(loop_ctx *loop,loop_evt_handler *handler,loop_msg *msg);
int loop_evt_entity_sys_evt(loop_ctx *loop,loop_evt_handler *handler,uint32_t *bitmap_evt,uint32_t *evt_type_map);
void get_f32_reg(void);
void put_f32_reg(void);
int backtrace_riscv(anon_subr_int_char_ptr *print_func,uintptr_t *regs);
void set_if(netif *netif,char *ip_addr,char *gw_addr,char *nm_addr);
int block_cipher_df(uchar *output,uchar *data,size_t data_len);
int ctr_drbg_update_internal(mbedtls_ctr_drbg_context.conflict *ctx,uchar *data);
void mbedtls_ctr_drbg_init(mbedtls_ctr_drbg_context.conflict *ctx);
void mbedtls_ctr_drbg_free(mbedtls_ctr_drbg_context.conflict *ctx);
int mbedtls_ctr_drbg_reseed(mbedtls_ctr_drbg_context.conflict *ctx,uchar *additional,size_t len);
int mbedtls_ctr_drbg_seed_entropy_len(mbedtls_ctr_drbg_context.conflict *ctx,anon_subr_int_void_ptr_uchar_ptr_size_t *f_entropy,void *p_entropy,uchar *custom,size_t len,size_t entropy_len);
int mbedtls_ctr_drbg_seed(mbedtls_ctr_drbg_context.conflict *ctx,anon_subr_int_void_ptr_uchar_ptr_size_t *f_entropy,void *p_entropy,uchar *custom,size_t len);
int mbedtls_ctr_drbg_random_with_add(void *p_rng,uchar *output,size_t output_len,uchar *additional,size_t add_len);
int mbedtls_ctr_drbg_random(void *p_rng,uchar *output,size_t output_len);
int entropy_update(mbedtls_entropy_context *ctx,uchar source_id,uchar *data,size_t len);
int entropy_gather_internal(mbedtls_entropy_context *ctx);
void mbedtls_entropy_init(mbedtls_entropy_context *ctx);
void mbedtls_entropy_free(mbedtls_entropy_context *ctx);
int mbedtls_entropy_func(void *data,uchar *output,size_t len);
int mbedtls_platform_entropy_poll(void *data,uchar *output,size_t len,size_t *olen);
void mbedtls_pk_init(mbedtls_pk_context *ctx);
void mbedtls_pk_free(mbedtls_pk_context *ctx);
mbedtls_pk_info_t * mbedtls_pk_info_from_type(mbedtls_pk_type_t pk_type);
int mbedtls_pk_setup(mbedtls_pk_context *ctx,mbedtls_pk_info_t *info);
int mbedtls_pk_can_do(mbedtls_pk_context *ctx,mbedtls_pk_type_t type);
int mbedtls_pk_verify(mbedtls_pk_context *ctx,mbedtls_md_type_t md_alg,uchar *hash,size_t hash_len,uchar *sig,size_t sig_len);
int mbedtls_pk_sign(mbedtls_pk_context *ctx,mbedtls_md_type_t md_alg,uchar *hash,size_t hash_len,uchar *sig,size_t *sig_len,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng);
int mbedtls_pk_decrypt(mbedtls_pk_context *ctx,uchar *input,size_t ilen,uchar *output,size_t *olen,size_t osize,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng);
int mbedtls_pk_encrypt(mbedtls_pk_context *ctx,uchar *input,size_t ilen,uchar *output,size_t *olen,size_t osize,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng);
size_t mbedtls_pk_get_bitlen(mbedtls_pk_context *ctx);
int mbedtls_pk_verify_ext(mbedtls_pk_type_t type,void *options,mbedtls_pk_context *ctx,mbedtls_md_type_t md_alg,uchar *hash,size_t hash_len,uchar *sig,size_t sig_len);
int mbedtls_pk_debug(mbedtls_pk_context *ctx,mbedtls_pk_debug_item *items);
char * mbedtls_pk_get_name(mbedtls_pk_context *ctx);
mbedtls_pk_type_t mbedtls_pk_get_type(mbedtls_pk_context *ctx);
int pk_use_ecparams(mbedtls_asn1_buf *params,mbedtls_ecp_group *grp);
int pk_parse_key_pkcs1_der(mbedtls_rsa_context *rsa,uchar *key,size_t keylen);
int pk_parse_key_sec1_der(mbedtls_ecp_keypair *eck,uchar *key,size_t keylen);
int pk_get_pk_alg(uchar **p,uchar *end,mbedtls_pk_type_t *pk_alg,mbedtls_asn1_buf *params);
int pk_parse_key_pkcs8_unencrypted_der(mbedtls_pk_context *pk,uchar *key,size_t keylen);
int mbedtls_pk_load_file(char *path,uchar **buf,size_t *n);
int mbedtls_pk_parse_subpubkey(uchar **p,uchar *end,mbedtls_pk_context *pk);
int mbedtls_pk_parse_key(mbedtls_pk_context *pk,uchar *key,size_t keylen,uchar *pwd,size_t pwdlen);
int mbedtls_pk_parse_keyfile(mbedtls_pk_context *ctx,char *path,char *pwd);
int rsa_can_do(mbedtls_pk_type_t type);
size_t rsa_get_bitlen(void *ctx);
void rsa_debug(void *ctx,mbedtls_pk_debug_item *items);
int eckey_can_do(mbedtls_pk_type_t type);
size_t eckey_get_bitlen(void *ctx);
void eckey_debug(void *ctx,mbedtls_pk_debug_item *items);
int eckeydh_can_do(mbedtls_pk_type_t type);
void rsa_free_wrap(void *ctx);
void * rsa_alloc_wrap(void);
int rsa_check_pair_wrap(mbedtls_rsa_context *pub,mbedtls_rsa_context *prv);
int rsa_encrypt_wrap(void *ctx,uchar *input,size_t ilen,uchar *output,size_t *olen,size_t osize,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng);
int rsa_decrypt_wrap(void *ctx,uchar *input,size_t ilen,uchar *output,size_t *olen,size_t osize,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng);
int rsa_sign_wrap(void *ctx,mbedtls_md_type_t md_alg,uchar *hash,size_t hash_len,uchar *sig,size_t *sig_len,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng);
int rsa_verify_wrap(void *ctx,mbedtls_md_type_t md_alg,uchar *hash,size_t hash_len,uchar *sig,size_t sig_len);
void eckey_free_wrap(void *ctx);
void * eckey_alloc_wrap(void);
int eckey_check_pair(mbedtls_ecp_keypair *pub,mbedtls_ecp_keypair *prv);
void mgf_mask(uchar *dst,size_t dlen,uchar *src,size_t slen,mbedtls_md_context_t *md_ctx);
void mbedtls_rsa_init(mbedtls_rsa_context *ctx,int padding,int hash_id);
int mbedtls_rsa_check_pubkey(mbedtls_rsa_context *ctx);
int mbedtls_rsa_check_privkey(mbedtls_rsa_context *ctx);
int mbedtls_rsa_check_pub_priv(mbedtls_rsa_context *pub,mbedtls_rsa_context *prv);
int mbedtls_rsa_public(mbedtls_rsa_context *ctx,uchar *input,uchar *output);
int mbedtls_rsa_private(mbedtls_rsa_context *ctx,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng,uchar *input,uchar *output);
int mbedtls_rsa_rsaes_oaep_encrypt(mbedtls_rsa_context *ctx,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng,int mode,uchar *label,size_t label_len,size_t ilen,uchar *input,uchar *output);
int mbedtls_rsa_rsaes_pkcs1_v15_encrypt(mbedtls_rsa_context *ctx,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng,int mode,size_t ilen,uchar *input,uchar *output);
int mbedtls_rsa_pkcs1_encrypt(mbedtls_rsa_context *ctx,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng,int mode,size_t ilen,uchar *input,uchar *output);
int mbedtls_rsa_rsaes_oaep_decrypt(mbedtls_rsa_context *ctx,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng,int mode,uchar *label,size_t label_len,size_t *olen,uchar *input,uchar *output,size_t output_max_len);
int mbedtls_rsa_rsaes_pkcs1_v15_decrypt(mbedtls_rsa_context *ctx,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng,int mode,size_t *olen,uchar *input,uchar *output,size_t output_max_len);
int mbedtls_rsa_pkcs1_decrypt(mbedtls_rsa_context *ctx,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng,int mode,size_t *olen,uchar *input,uchar *output,size_t output_max_len);
int mbedtls_rsa_rsassa_pss_sign(mbedtls_rsa_context *ctx,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng,int mode,mbedtls_md_type_t md_alg,uint hashlen,uchar *hash,uchar *sig);
int mbedtls_rsa_rsassa_pkcs1_v15_sign(mbedtls_rsa_context *ctx,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng,int mode,mbedtls_md_type_t md_alg,uint hashlen,uchar *hash,uchar *sig);
int mbedtls_rsa_pkcs1_sign(mbedtls_rsa_context *ctx,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng,int mode,mbedtls_md_type_t md_alg,uint hashlen,uchar *hash,uchar *sig);
int mbedtls_rsa_rsassa_pss_verify_ext(mbedtls_rsa_context *ctx,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng,int mode,mbedtls_md_type_t md_alg,uint hashlen,uchar *hash,mbedtls_md_type_t mgf1_hash_id,int expected_salt_len,uchar *sig);
int mbedtls_rsa_rsassa_pss_verify(mbedtls_rsa_context *ctx,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng,int mode,mbedtls_md_type_t md_alg,uint hashlen,uchar *hash,uchar *sig);
int mbedtls_rsa_rsassa_pkcs1_v15_verify(mbedtls_rsa_context *ctx,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng,int mode,mbedtls_md_type_t md_alg,uint hashlen,uchar *hash,uchar *sig);
int mbedtls_rsa_pkcs1_verify(mbedtls_rsa_context *ctx,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng,int mode,mbedtls_md_type_t md_alg,uint hashlen,uchar *hash,uchar *sig);
void mbedtls_rsa_free(mbedtls_rsa_context *ctx);
void mbedtls_sha256_init(mbedtls_sha256_context *ctx);
void mbedtls_sha256_free(mbedtls_sha256_context *ctx);
void mbedtls_sha256_clone(mbedtls_sha256_context *dst,mbedtls_sha256_context *src);
void mbedtls_sha256_starts(mbedtls_sha256_context *ctx,int is224);
void mbedtls_sha256_process(mbedtls_sha256_context *ctx,uchar *data);
void mbedtls_sha256_update(mbedtls_sha256_context *ctx,uchar *input,size_t ilen);
void mbedtls_sha256_update(mbedtls_sha256_context *ctx,uchar *input,size_t ilen);
void mbedtls_sha256_finish(mbedtls_sha256_context *ctx,uchar *output);
void mbedtls_sha256(uchar *input,size_t ilen,uchar *output,int is224);
mbedtls_x509_crt * mbedtls_ssl_own_cert(mbedtls_ssl_context *ssl);
void mbedtls_zeroize(void *v,size_t n);
void ssl_swap_epochs(mbedtls_ssl_context *ssl);
void ssl_calc_finished_tls_sha256(mbedtls_ssl_context *ssl,uchar *buf,int from);
void ssl_calc_verify_tls_sha256(mbedtls_ssl_context *ssl,uchar *hash);
void ssl_flight_free(mbedtls_ssl_flight_item *flight);
int ssl_append_key_cert(mbedtls_ssl_key_cert **head,mbedtls_x509_crt *cert,mbedtls_pk_context *key);
void ssl_update_checksum_start(mbedtls_ssl_context *ssl,uchar *buf,size_t len);
void ssl_update_checksum_sha256(mbedtls_ssl_context *ssl,uchar *buf,size_t len);
size_t mbedtls_ssl_hdr_len(void);
void ssl_set_timer(mbedtls_ssl_context *ssl,uint32_t millisecs);
int ssl_check_timer(mbedtls_ssl_context *ssl);
int tls_prf_sha256(uchar *secret,size_t slen,char *label,uchar *random,size_t rlen,uchar *dstbuf,size_t dlen);
int mbedtls_ssl_derive_keys(mbedtls_ssl_context *ssl);
int mbedtls_ssl_flush_output(mbedtls_ssl_context *ssl);
void mbedtls_ssl_recv_flight_completed(mbedtls_ssl_context *ssl);
void mbedtls_ssl_send_flight_completed(mbedtls_ssl_context *ssl);
void mbedtls_ssl_update_handshake_status(mbedtls_ssl_context *ssl);
void mbedtls_ssl_optimize_checksum(mbedtls_ssl_context *ssl,mbedtls_ssl_ciphersuite_t *ciphersuite_info);
void mbedtls_ssl_reset_checksum(mbedtls_ssl_context *ssl);
void mbedtls_ssl_session_init(mbedtls_ssl_session *session);
void mbedtls_ssl_init(mbedtls_ssl_context *ssl);
void mbedtls_ssl_conf_authmode(mbedtls_ssl_config *conf,int authmode);
void mbedtls_ssl_conf_verify(mbedtls_ssl_config *conf,anon_subr_int_void_ptr_mbedtls_x509_crt_ptr_int_uint32_t_ptr *f_vrfy,void *p_vrfy);
void mbedtls_ssl_conf_rng(mbedtls_ssl_config *conf,mbedtls_ssl_recv_t *f_rng,void *p_rng);
void mbedtls_ssl_set_bio(mbedtls_ssl_context *ssl,void *p_bio,mbedtls_ssl_send_t *f_send,mbedtls_ssl_recv_t *f_recv,mbedtls_ssl_recv_timeout_t.conflict1 *f_recv_timeout);
void mbedtls_ssl_conf_read_timeout(mbedtls_ssl_config *conf,uint32_t timeout);
int mbedtls_ssl_conf_own_cert(mbedtls_ssl_config *conf,mbedtls_x509_crt *own_cert,mbedtls_pk_context *pk_key);
void mbedtls_ssl_conf_ca_chain(mbedtls_ssl_config *conf,mbedtls_x509_crt *ca_chain,mbedtls_x509_crl *ca_crl);
int mbedtls_ssl_set_hostname(mbedtls_ssl_context *ssl,char *hostname);
int mbedtls_ssl_conf_alpn_protocols(mbedtls_ssl_config *conf,char **protos);
uint32_t mbedtls_ssl_get_verify_result(mbedtls_ssl_context *ssl);
char * mbedtls_ssl_get_ciphersuite(mbedtls_ssl_context *ssl);
char * mbedtls_ssl_get_version(mbedtls_ssl_context *ssl);
size_t mbedtls_ssl_get_record_expansion(mbedtls_ssl_context *param_1);
size_t mbedtls_ssl_get_max_frag_len(mbedtls_ssl_context *ssl);
mbedtls_x509_crt * mbedtls_ssl_get_peer_cert(mbedtls_ssl_context *ssl);
int mbedtls_ssl_handshake_step(mbedtls_ssl_context *ssl);
int mbedtls_ssl_handshake(mbedtls_ssl_context *ssl);
void mbedtls_ssl_transform_free(mbedtls_ssl_transform *transform);
void mbedtls_ssl_handshake_free(mbedtls_ssl_handshake_params *handshake);
void ssl_handshake_wrapup_free_hs_transform(mbedtls_ssl_context *ssl);
void mbedtls_ssl_session_free(mbedtls_ssl_session *session);
void mbedtls_ssl_handshake_wrapup(mbedtls_ssl_context *ssl);
int ssl_handshake_init(mbedtls_ssl_context *ssl);
int mbedtls_ssl_setup(mbedtls_ssl_context *ssl,mbedtls_ssl_config *conf);
void mbedtls_ssl_free(mbedtls_ssl_context *ssl);
void mbedtls_ssl_config_init(mbedtls_ssl_config *conf);
int mbedtls_ssl_config_defaults(mbedtls_ssl_config *conf,int endpoint,int transport,int preset);
void mbedtls_ssl_config_free(mbedtls_ssl_config *conf);
uchar mbedtls_ssl_sig_from_pk(mbedtls_pk_context *pk);
mbedtls_pk_type_t mbedtls_ssl_pk_alg_from_sig(uchar sig);
mbedtls_md_type_t mbedtls_ssl_md_alg_from_hash(uchar hash);
uchar mbedtls_ssl_hash_from_md_alg(int md);
int mbedtls_ssl_check_curve(mbedtls_ssl_context *ssl,mbedtls_ecp_group_id grp_id);
int mbedtls_ssl_check_cert_usage(mbedtls_x509_crt *cert,mbedtls_ssl_ciphersuite_t *ciphersuite,int cert_endpoint,uint32_t *flags);
void mbedtls_ssl_write_version(int major,int minor,int transport,uchar *ver);
int mbedtls_ssl_write_record(mbedtls_ssl_context *ssl);
int mbedtls_ssl_resend(mbedtls_ssl_context *ssl);
int mbedtls_ssl_fetch_input(mbedtls_ssl_context *ssl,size_t nb_want);
int mbedtls_ssl_prepare_handshake_record(mbedtls_ssl_context *ssl);
int mbedtls_ssl_handle_message_type(mbedtls_ssl_context *ssl);
int mbedtls_ssl_send_alert_message(mbedtls_ssl_context *ssl,uchar level,uchar message);
int mbedtls_ssl_send_fatal_handshake_failure(mbedtls_ssl_context *ssl);
int mbedtls_ssl_close_notify(mbedtls_ssl_context *ssl);
int mbedtls_ssl_write_certificate(mbedtls_ssl_context *ssl);
int mbedtls_ssl_write_change_cipher_spec(mbedtls_ssl_context *ssl);
int mbedtls_ssl_write_finished(mbedtls_ssl_context *ssl);
int mbedtls_ssl_write(mbedtls_ssl_context *ssl,uchar *buf,size_t len);
void mbedtls_ssl_read_version(int *major,int *minor,int transport,uchar *ver);
int mbedtls_ssl_read_record_layer(mbedtls_ssl_context *ssl);
int mbedtls_ssl_read_record(mbedtls_ssl_context *ssl);
int mbedtls_ssl_parse_certificate(mbedtls_ssl_context *ssl);
int mbedtls_ssl_parse_change_cipher_spec(mbedtls_ssl_context *ssl);
int mbedtls_ssl_parse_finished(mbedtls_ssl_context *ssl);
int mbedtls_ssl_read(mbedtls_ssl_context *ssl,uchar *buf,size_t len);
int mbedtls_ssl_set_calc_verify_md(mbedtls_ssl_context *ssl,int md);
void mbedtls_zeroize(void *v,size_t n);
int x509_memcasecmp(void *s1,void *s2,size_t len);
int x509_name_cmp(mbedtls_x509_name *a,mbedtls_x509_name *b);
int x509_check_wildcard(char *cn,mbedtls_x509_buf *name);
int x509_profile_check_key(mbedtls_x509_crt_profile *profile,mbedtls_pk_type_t pk_alg,mbedtls_pk_context *pk);
int mbedtls_x509_crt_info(char *buf,size_t size,char *prefix,mbedtls_x509_crt *crt);
int mbedtls_x509_crt_verify_info(char *buf,size_t size,char *prefix,uint32_t flags);
int mbedtls_x509_crt_check_key_usage(mbedtls_x509_crt *crt,uint usage);
int x509_crt_check_parent(mbedtls_x509_crt *child,mbedtls_x509_crt *parent,int top,int bottom);
int x509_crt_verify_top(mbedtls_x509_crt *child,mbedtls_x509_crt *trust_ca,mbedtls_x509_crt_profile *profile,int path_cnt,int self_cnt,uint32_t *flags,anon_subr_int_void_ptr_mbedtls_x509_crt_ptr_int_uint32_t_ptr *f_vrfy,void *p_vrfy);
int x509_crt_verify_child(mbedtls_x509_crt *child,mbedtls_x509_crt *parent,mbedtls_x509_crt *trust_ca,mbedtls_x509_crl *ca_crl,mbedtls_x509_crt_profile *profile,int path_cnt,int self_cnt,uint32_t *flags,anon_subr_int_void_ptr_mbedtls_x509_crt_ptr_int_uint32_t_ptr *f_vrfy,void *p_vrfy);
int mbedtls_x509_crt_check_extended_key_usage(mbedtls_x509_crt *crt,char *usage_oid,size_t usage_len);
int mbedtls_x509_crt_verify_with_profile(mbedtls_x509_crt *crt,mbedtls_x509_crt *trust_ca,mbedtls_x509_crl *ca_crl,mbedtls_x509_crt_profile *profile,char *cn,uint32_t *flags,anon_subr_int_void_ptr_mbedtls_x509_crt_ptr_int_uint32_t_ptr *f_vrfy,void *p_vrfy);
void mbedtls_x509_crt_init(mbedtls_x509_crt *crt);
void mbedtls_x509_crt_free(mbedtls_x509_crt *crt);
int mbedtls_x509_crt_parse_der(mbedtls_x509_crt *chain,uchar *buf,size_t buflen);
int mbedtls_x509_crt_parse(mbedtls_x509_crt *chain,uchar *buf,size_t buflen);
int mbedtls_x509_crt_parse_file(mbedtls_x509_crt *chain,char *path);
int net_would_block(void);
void mbedtls_net_init(mbedtls_net_context *ctx);
int mbedtls_net_connect(mbedtls_net_context *ctx,char *host,char *port,int proto);
int mbedtls_net_set_block(mbedtls_net_context *ctx);
int mbedtls_net_recv(void *ctx,uchar *buf,size_t len);
int mbedtls_net_send(void *ctx,uchar *buf,size_t len);
int mbedtls_net_recv_timeout(void *ctx,uchar *buf,size_t len,uint32_t timeout);
void mbedtls_net_free(mbedtls_net_context *ctx);
void * mycalloc(size_t numitems,size_t size);
void aes_gen_tables(void);
void mbedtls_aes_init(mbedtls_aes_context *ctx);
void mbedtls_aes_free(mbedtls_aes_context *ctx);
int mbedtls_aes_setkey_enc(mbedtls_aes_context *ctx,uchar *key,uint keybits);
int mbedtls_aes_setkey_dec(mbedtls_aes_context *ctx,uchar *key,uint keybits);
void mbedtls_aes_encrypt(mbedtls_aes_context *ctx,uchar *input,uchar *output);
void mbedtls_aes_decrypt(mbedtls_aes_context *ctx,uchar *input,uchar *output);
int mbedtls_aes_crypt_ecb(mbedtls_aes_context *ctx,int mode,uchar *input,uchar *output);
int mbedtls_aes_crypt_cbc(mbedtls_aes_context *ctx,int mode,size_t length,uchar *iv,uchar *input,uchar *output);
int mbedtls_aes_crypt_cfb128(mbedtls_aes_context *ctx,int mode,size_t length,size_t *iv_off,uchar *iv,uchar *input,uchar *output);
int mbedtls_aes_crypt_ctr(mbedtls_aes_context *ctx,size_t length,size_t *nc_off,uchar *nonce_counter,uchar *stream_block,uchar *input,uchar *output);
int mbedtls_asn1_get_len(uchar **p,uchar *end,size_t *len);
int mbedtls_asn1_get_tag(uchar **p,uchar *end,size_t *len,int tag);
int mbedtls_asn1_get_bool(uchar **p,uchar *end,int *val);
int mbedtls_asn1_get_int(uchar **p,uchar *end,int *val);
int mbedtls_asn1_get_mpi(uchar **p,uchar *end,mbedtls_mpi *X);
int mbedtls_asn1_get_bitstring(uchar **p,uchar *end,mbedtls_asn1_bitstring *bs);
int mbedtls_asn1_get_bitstring_null(uchar **p,uchar *end,size_t *len);
int mbedtls_asn1_get_sequence_of(uchar **p,uchar *end,mbedtls_asn1_sequence *cur,int tag);
int mbedtls_asn1_get_alg(uchar **p,uchar *end,mbedtls_asn1_buf *alg,mbedtls_asn1_buf *params);
void mpi_sub_hlp(size_t n,mbedtls_mpi_uint *s,mbedtls_mpi_uint *d);
void mpi_mul_hlp(size_t i,mbedtls_mpi_uint *s,mbedtls_mpi_uint *d,mbedtls_mpi_uint b);
void mbedtls_mpi_init(mbedtls_mpi *X);
void mbedtls_mpi_free(mbedtls_mpi *X);
int mbedtls_mpi_grow(mbedtls_mpi *X,size_t nblimbs);
int mbedtls_mpi_shrink(mbedtls_mpi *X,size_t nblimbs);
int mbedtls_mpi_copy(mbedtls_mpi *X,mbedtls_mpi *Y);
int mbedtls_mpi_safe_cond_assign(mbedtls_mpi *X,mbedtls_mpi *Y,uchar assign);
int mbedtls_mpi_lset(mbedtls_mpi *X,mbedtls_mpi_sint z);
int mbedtls_mpi_get_bit(mbedtls_mpi *X,size_t pos);
size_t mbedtls_mpi_lsb(mbedtls_mpi *X);
size_t mbedtls_mpi_bitlen(mbedtls_mpi *X);
size_t mbedtls_mpi_size(mbedtls_mpi *X);
int mbedtls_mpi_read_binary(mbedtls_mpi *X,uchar *buf,size_t buflen);
int mbedtls_mpi_write_binary(mbedtls_mpi *X,uchar *buf,size_t buflen);
int mbedtls_mpi_shift_l(mbedtls_mpi *X,size_t count);
int mbedtls_mpi_shift_r(mbedtls_mpi *X,size_t count);
int mbedtls_mpi_cmp_abs(mbedtls_mpi *X,mbedtls_mpi *Y);
int mpi_montmul(mbedtls_mpi *A,mbedtls_mpi *B,mbedtls_mpi *N,mbedtls_mpi_uint mm,mbedtls_mpi *T);
int mbedtls_mpi_cmp_mpi(mbedtls_mpi *X,mbedtls_mpi *Y);
int mbedtls_mpi_cmp_int(mbedtls_mpi *X,mbedtls_mpi_sint z);
int mbedtls_mpi_add_abs(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi *B);
int mbedtls_mpi_sub_abs(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi *B);
int mbedtls_mpi_add_mpi(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi *B);
int mbedtls_mpi_sub_mpi(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi *B);
int mbedtls_mpi_sub_int(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi_sint b);
int mbedtls_mpi_mul_mpi(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi *B);
int mbedtls_mpi_mul_int(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi_uint b);
int mbedtls_mpi_div_mpi(mbedtls_mpi *Q,mbedtls_mpi *R,mbedtls_mpi *A,mbedtls_mpi *B);
int mbedtls_mpi_mod_mpi(mbedtls_mpi *R,mbedtls_mpi *A,mbedtls_mpi *B);
int mbedtls_mpi_exp_mod(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi *E,mbedtls_mpi *N,mbedtls_mpi *_RR);
int mbedtls_mpi_gcd(mbedtls_mpi *G,mbedtls_mpi *A,mbedtls_mpi *B);
int mbedtls_mpi_fill_random(mbedtls_mpi *X,size_t size,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng);
int mbedtls_mpi_inv_mod(mbedtls_mpi *X,mbedtls_mpi *A,mbedtls_mpi *N);
uint mbedtls_cipher_get_block_size(mbedtls_cipher_context_t *ctx);
void add_pkcs_padding(uchar *output,size_t output_len,size_t data_len);
int get_pkcs_padding(uchar *input,size_t input_len,size_t *data_len);
void add_zeros_padding(uchar *output,size_t output_len,size_t data_len);
int get_no_padding(uchar *input,size_t input_len,size_t *data_len);
int get_zeros_padding(uchar *input,size_t input_len,size_t *data_len);
mbedtls_cipher_info_t * mbedtls_cipher_info_from_type(mbedtls_cipher_type_t cipher_type);
mbedtls_cipher_info_t *mbedtls_cipher_info_from_values(mbedtls_cipher_id_t cipher_id,int key_bitlen,mbedtls_cipher_mode_t mode);
void mbedtls_cipher_init(mbedtls_cipher_context_t *ctx);
void mbedtls_cipher_free(mbedtls_cipher_context_t *ctx);
int mbedtls_cipher_setkey(mbedtls_cipher_context_t *ctx,uchar *key,int key_bitlen,mbedtls_operation_t operation);
int mbedtls_cipher_set_iv(mbedtls_cipher_context_t *ctx,uchar *iv,size_t iv_len);
int mbedtls_cipher_reset(mbedtls_cipher_context_t *ctx);
int mbedtls_cipher_update(mbedtls_cipher_context_t *ctx,uchar *input,size_t ilen,uchar *output,size_t *olen);
int mbedtls_cipher_finish(mbedtls_cipher_context_t *ctx,uchar *output,size_t *olen);
int mbedtls_cipher_set_padding_mode(mbedtls_cipher_context_t *ctx,mbedtls_cipher_padding_t mode);
int mbedtls_cipher_setup(mbedtls_cipher_context_t *ctx,mbedtls_cipher_info_t *cipher_info);
int mbedtls_cipher_crypt(mbedtls_cipher_context_t *ctx,uchar *iv,size_t iv_len,uchar *input,size_t ilen,uchar *output,size_t *olen);
int mbedtls_cipher_auth_encrypt(mbedtls_cipher_context_t *ctx,uchar *iv,size_t iv_len,uchar *ad,size_t ad_len,uchar *input,size_t ilen,uchar *output,size_t *olen,uchar *tag,size_t tag_len);
int mbedtls_cipher_auth_decrypt(mbedtls_cipher_context_t *ctx,uchar *iv,size_t iv_len,uchar *ad,size_t ad_len,uchar *input,size_t ilen,uchar *output,size_t *olen,uchar *tag,size_t tag_len);
void gcm_ctx_free(void *ctx);
void * gcm_ctx_alloc(void);
int gcm_aes_setkey_wrap(void *ctx,uchar *key,uint key_bitlen);
void aes_ctx_free(void *ctx);
void * aes_ctx_alloc(void);
int aes_setkey_dec_wrap(mbedtls_aes_context *ctx,uchar *key,uint keybits);
int aes_setkey_enc_wrap(mbedtls_aes_context *ctx,uchar *key,uint keybits);
int aes_crypt_ctr_wrap(mbedtls_aes_context *ctx,size_t length,size_t *nc_off,uchar *nonce_counter,uchar *stream_block,uchar *input,uchar *output);
int aes_crypt_cfb128_wrap(mbedtls_aes_context *ctx,int mode,size_t length,size_t *iv_off,uchar *iv,uchar *input,uchar *output);
int aes_crypt_cbc_wrap(mbedtls_aes_context *ctx,int mode,size_t length,uchar *iv,uchar *input,uchar *output);
int aes_crypt_ecb_wrap(mbedtls_aes_context *ctx,int mode,uchar *input,uchar *output);
void debug_send_line(int level,char *file,int line,char *str);
void mbedtls_debug_print_mpi(mbedtls_ssl_context *ssl,int level,char *file,int line,char *text,mbedtls_mpi *X);
void mbedtls_debug_print_msg(mbedtls_ssl_context *ssl,int level,char *file,int line,char *format,...);
void mbedtls_debug_print_ret(mbedtls_ssl_context *ssl,int level,char *file,int line,char *text,int ret);
void mbedtls_debug_print_buf(mbedtls_ssl_context *ssl,int level,char *file,int line,char *text,uchar *buf,size_t len);
void mbedtls_debug_print_mpi(mbedtls_ssl_context *ssl,int level,char *file,int line,char *text,mbedtls_mpi *X);
void mbedtls_debug_print_ecp(mbedtls_ssl_context *ssl,int level,char *file,int line,char *text,mbedtls_ecp_point *X);
void mbedtls_debug_print_ecp(mbedtls_ssl_context *ssl,int level,char *file,int line,char *text,mbedtls_ecp_point *X);
void mbedtls_debug_print_crt(mbedtls_ssl_context *ssl,int level,char *file,int line,char *text,mbedtls_x509_crt *crt);
ecp_curve_type ecp_get_type(mbedtls_ecp_group *grp);
int ecp_safe_invert_jac(mbedtls_ecp_group *grp,mbedtls_ecp_point *Q,uchar inv);
int ecp_select_comb(mbedtls_ecp_group *grp,mbedtls_ecp_point *R,mbedtls_ecp_point *T,uchar t_len,uchar i);
int ecp_modp(mbedtls_mpi *N,mbedtls_ecp_group *grp);
int ecp_double_jac(mbedtls_ecp_group *grp,mbedtls_ecp_point *R,mbedtls_ecp_point *P);
int ecp_normalize_jac(mbedtls_ecp_group *grp,mbedtls_ecp_point *pt);
int ecp_normalize_jac_many(mbedtls_ecp_group *grp,mbedtls_ecp_point **T,size_t t_len);
void mbedtls_ecp_point_init(mbedtls_ecp_point *pt);
void mbedtls_ecp_point_free(mbedtls_ecp_point *pt);
mbedtls_ecp_group_id * mbedtls_ecp_grp_id_list(void);
void mbedtls_ecp_point_init(mbedtls_ecp_point *pt);
void mbedtls_ecp_group_init(mbedtls_ecp_group *grp);
void mbedtls_ecp_keypair_init(mbedtls_ecp_keypair *key);
void mbedtls_ecp_point_free(mbedtls_ecp_point *pt);
void mbedtls_ecp_group_free(mbedtls_ecp_group *grp);
void mbedtls_ecp_keypair_free(mbedtls_ecp_keypair *key);
int mbedtls_ecp_copy(mbedtls_ecp_point *P,mbedtls_ecp_point *Q);
int mbedtls_ecp_group_copy(mbedtls_ecp_group *dst,mbedtls_ecp_group *src);
int mbedtls_ecp_set_zero(mbedtls_ecp_point *pt);
int ecp_add_mixed(mbedtls_ecp_group *grp,mbedtls_ecp_point *R,mbedtls_ecp_point *P,mbedtls_ecp_point *Q);
int ecp_mul_comb(mbedtls_ecp_group *grp,mbedtls_ecp_point *R,mbedtls_mpi *m,mbedtls_ecp_point *P,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng);
int mbedtls_ecp_point_read_binary(mbedtls_ecp_group *grp,mbedtls_ecp_point *pt,uchar *buf,size_t ilen);
int mbedtls_ecp_check_pubkey(mbedtls_ecp_group *grp,mbedtls_ecp_point *pt);
int mbedtls_ecp_check_privkey(mbedtls_ecp_group *grp,mbedtls_mpi *d);
int mbedtls_ecp_mul(mbedtls_ecp_group *grp,mbedtls_ecp_point *R,mbedtls_mpi *m,mbedtls_ecp_point *P,anon_subr_int_void_ptr_uchar_ptr_size_t *f_rng,void *p_rng);
int mbedtls_ecp_check_pub_priv(mbedtls_ecp_keypair *pub,mbedtls_ecp_keypair *prv);
int ecp_mod_koblitz(mbedtls_mpi *N,mbedtls_mpi_uint *Rp,size_t p_limbs);
int ecp_mod_p224k1(mbedtls_mpi *N);
int ecp_mod_p256k1(mbedtls_mpi *N);
int mbedtls_ecp_group_load(mbedtls_ecp_group *grp,mbedtls_ecp_group_id id);
void gcm_mult(mbedtls_gcm_context *ctx,uchar *x,uchar *output);
void mbedtls_gcm_init(mbedtls_gcm_context *ctx);
int mbedtls_gcm_setkey(mbedtls_gcm_context *ctx,mbedtls_cipher_id_t cipher,uchar *key,uint keybits);
int mbedtls_gcm_starts(mbedtls_gcm_context *ctx,int mode,uchar *iv,size_t iv_len,uchar *add,size_t add_len);
int mbedtls_gcm_update(mbedtls_gcm_context *ctx,size_t length,uchar *input,uchar *output);
int mbedtls_gcm_finish(mbedtls_gcm_context *ctx,uchar *tag,size_t tag_len);
int mbedtls_gcm_crypt_and_tag(mbedtls_gcm_context *ctx,int mode,size_t length,uchar *iv,size_t iv_len,uchar *add,size_t add_len,uchar *input,uchar *output,size_t tag_len,uchar *tag);
int mbedtls_gcm_auth_decrypt(mbedtls_gcm_context *ctx,size_t length,uchar *iv,size_t iv_len,uchar *add,size_t add_len,uchar *tag,size_t tag_len,uchar *input,uchar *output);
void mbedtls_gcm_free(mbedtls_gcm_context *ctx);
mbedtls_md_info_t * mbedtls_md_info_from_type(mbedtls_md_type_t md_type);
void mbedtls_md_init(mbedtls_md_context_t *ctx);
void mbedtls_md_free(mbedtls_md_context_t *ctx);
int mbedtls_md_setup(mbedtls_md_context_t *ctx,mbedtls_md_info_t *md_info,int hmac);
int mbedtls_md_starts(mbedtls_md_context_t *ctx);
int mbedtls_md_update(mbedtls_md_context_t *ctx,uchar *input,size_t ilen);
int mbedtls_md_finish(mbedtls_md_context_t *ctx,uchar *output);
int mbedtls_md(mbedtls_md_info_t *md_info,uchar *input,size_t ilen,uchar *output);
int mbedtls_md_hmac_starts(mbedtls_md_context_t *ctx,uchar *key,size_t keylen);
int mbedtls_md_hmac_update(mbedtls_md_context_t *ctx,uchar *input,size_t ilen);
int mbedtls_md_hmac_finish(mbedtls_md_context_t *ctx,uchar *output);
int mbedtls_md_hmac_reset(mbedtls_md_context_t *ctx);
int mbedtls_md_process(mbedtls_md_context_t *ctx,uchar *data);
uchar mbedtls_md_get_size(mbedtls_md_info_t *md_info);
void md5_process_wrap(mbedtls_md5_context *ctx,uchar *data);
void md5_clone_wrap(mbedtls_md5_context *dst,mbedtls_md5_context *src);
void md5_ctx_free(void *ctx);
void * md5_ctx_alloc(void);
void md5_finish_wrap(mbedtls_md5_context *ctx,uchar *output);
void md5_update_wrap(mbedtls_md5_context *ctx,uchar *input,size_t ilen);
void md5_starts_wrap(mbedtls_md5_context *ctx);
void sha1_process_wrap(mbedtls_sha1_context *ctx,uchar *data);
void sha1_clone_wrap(mbedtls_sha1_context *dst,mbedtls_sha1_context *src);
void sha1_ctx_free(void *ctx);
void * sha1_ctx_alloc(void);
void sha1_finish_wrap(mbedtls_sha1_context *ctx,uchar *output);
void sha1_update_wrap(mbedtls_sha1_context *ctx,uchar *input,size_t ilen);
void sha1_starts_wrap(mbedtls_sha1_context *ctx);
void sha224_process_wrap(mbedtls_sha256_context *ctx,uchar *data);
void sha224_clone_wrap(mbedtls_sha256_context *dst,mbedtls_sha256_context *src);
void sha224_ctx_free(void *ctx);
void * sha224_ctx_alloc(void);
void sha224_wrap(uchar *input,size_t ilen,uchar *output);
void sha256_wrap(uchar *input,size_t ilen,uchar *output);
void sha224_finish_wrap(mbedtls_sha256_context *ctx,uchar *output);
void sha224_update_wrap(mbedtls_sha256_context *ctx,uchar *input,size_t ilen);
void sha224_starts_wrap(void *ctx);
void sha256_starts_wrap(void *ctx);
oid_sig_alg_t * oid_sig_alg_from_asn1(mbedtls_asn1_buf *oid);
int mbedtls_oid_get_attr_short_name(mbedtls_asn1_buf *oid,char **short_name);
int mbedtls_oid_get_x509_ext_type(mbedtls_asn1_buf *oid,int *ext_type);
int mbedtls_oid_get_extended_key_usage(mbedtls_asn1_buf *oid,char **description);
int mbedtls_oid_get_sig_alg_desc(mbedtls_asn1_buf *oid,char **description);
int mbedtls_oid_get_sig_alg(mbedtls_asn1_buf *oid,mbedtls_md_type_t *md_alg,mbedtls_pk_type_t *pk_alg);
int mbedtls_oid_get_pk_alg(mbedtls_asn1_buf *oid,mbedtls_pk_type_t *pk_alg);
int mbedtls_oid_get_ec_grp(mbedtls_asn1_buf *oid,mbedtls_ecp_group_id *grp_id);
int mbedtls_oid_get_md_alg(mbedtls_asn1_buf *oid,mbedtls_md_type_t *md_alg);
int mbedtls_oid_get_oid_by_md(mbedtls_md_type_t md_alg,char **oid,size_t *olen);
void pem_aes_decrypt(uchar *aes_iv,uint keylen,uchar *buf,size_t buflen,uchar *pwd,size_t pwdlen);
void mbedtls_pem_init(mbedtls_pem_context *ctx);
int mbedtls_pem_read_buffer(mbedtls_pem_context *ctx,char *header,char *footer,uchar *data,uchar *pwd,size_t pwdlen,size_t *use_len);
void mbedtls_pem_free(mbedtls_pem_context *ctx);
void mbedtls_md5_init(mbedtls_md5_context *ctx);
void mbedtls_md5_free(mbedtls_md5_context *ctx);
void mbedtls_md5_clone(mbedtls_md5_context *dst,mbedtls_md5_context *src);
void mbedtls_md5_starts(mbedtls_md5_context *ctx);
void mbedtls_md5_process(mbedtls_md5_context *ctx,uchar *data);
void mbedtls_md5_update(mbedtls_md5_context *ctx,uchar *input,size_t ilen);
void mbedtls_md5_update(mbedtls_md5_context *ctx,uchar *input,size_t ilen);
void mbedtls_md5_finish(mbedtls_md5_context *ctx,uchar *output);
void mbedtls_md5(uchar *input,size_t ilen,uchar *output);
void mbedtls_sha1_init(mbedtls_sha1_context *ctx);
void mbedtls_sha1_free(mbedtls_sha1_context *ctx);
void mbedtls_sha1_clone(mbedtls_sha1_context *dst,mbedtls_sha1_context *src);
void mbedtls_sha1_starts(mbedtls_sha1_context *ctx);
void mbedtls_sha1_process(mbedtls_sha1_context *ctx,uchar *data);
void mbedtls_sha1_update(mbedtls_sha1_context *ctx,uchar *input,size_t ilen);
void mbedtls_sha1_update(mbedtls_sha1_context *ctx,uchar *input,size_t ilen);
void mbedtls_sha1_finish(mbedtls_sha1_context *ctx,uchar *output);
void mbedtls_sha1(uchar *input,size_t ilen,uchar *output);
mbedtls_ssl_ciphersuite_t * mbedtls_ssl_ciphersuite_from_id(int ciphersuite);
int * mbedtls_ssl_list_ciphersuites(void);
char * mbedtls_ssl_get_ciphersuite_name(int ciphersuite_id);
mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg(mbedtls_ssl_ciphersuite_t *info);
mbedtls_pk_context * mbedtls_ssl_own_key(mbedtls_ssl_context *ssl);
size_t mbedtls_ssl_hs_hdr_len(void);
int mbedtls_ssl_handshake_client_step(mbedtls_ssl_context *ssl);
mbedtls_pk_context * mbedtls_ssl_own_key(mbedtls_ssl_context *ssl);
int mbedtls_ssl_handshake_server_step(mbedtls_ssl_context *ssl);
int mbedtls_x509_get_serial(uchar **p,uchar *end,mbedtls_x509_buf *serial);
int mbedtls_x509_get_alg(uchar **p,uchar *end,mbedtls_x509_buf *alg,mbedtls_x509_buf *params);
int mbedtls_x509_get_name(uchar **p,uchar *end,mbedtls_x509_name *cur);
int mbedtls_x509_get_sig(uchar **p,uchar *end,mbedtls_x509_buf *sig);
int mbedtls_x509_get_sig_alg(mbedtls_x509_buf *sig_oid,mbedtls_x509_buf *sig_params,mbedtls_md_type_t *md_alg,mbedtls_pk_type_t *pk_alg,void **sig_opts);
int mbedtls_x509_get_ext(uchar **p,uchar *end,mbedtls_x509_buf *ext,int tag);
int mbedtls_x509_dn_gets(char *buf,size_t size,mbedtls_x509_name *dn);
int mbedtls_x509_serial_gets(char *buf,size_t size,mbedtls_x509_buf *serial);
int mbedtls_x509_sig_alg_gets(char *buf,size_t size,mbedtls_x509_buf *sig_oid,mbedtls_pk_type_t pk_alg,mbedtls_md_type_t md_alg,void *sig_opts);
int mbedtls_x509_key_size_helper(char *buf,size_t buf_size,char *name);
int mbedtls_x509_time_is_past(mbedtls_x509_time *to);
undefined4 mbedtls_x509_time_is_future(void);
int mbedtls_base64_decode(uchar *dst,size_t dlen,size_t *olen,uchar *src,size_t slen);
double modf(double __x,double *__iptr);
DItype __lshrdi3(shift_count_type b);
int __clzsi2(USItype x);
SFtype __floatundisf(void);
DItype __divdi3(void);
DItype __moddi3(void);
UDItype __udivdi3(void);
UDItype __umoddi3(void);
__gcc_CMPtype __eqdf2(void);
__gcc_CMPtype __gedf2(void);
__gcc_CMPtype __ledf2(void);
SItype __fixdfsi(void);
USItype __fixunsdfsi(void);
DFtype __floatsidf(SItype i);
DFtype __floatunsidf(USItype i);
SFtype __truncdfsf2(void);
int atoi(char *__nptr);
void _atoi_r(void);
undefined * __errno(void);
void * memchr(void *__s,int __c,size_t __n);
int memcmp(void *__s1,void *__s2,size_t __n);
void * memcpy(void *__dest,void *__src,size_t __n);
void * memmove(void *__dest,void *__src,size_t __n);
void * memset(void *__s,int __c,size_t __n);
char * strchr(char *__s,int __c);
int strcmp(char *__s1,char *__s2);
char * strcpy(char *__dest,char *__src);
size_t strlen(char *__s);
int strncmp(char *__s1,char *__s2,size_t __n);
char * strncpy(char *__dest,char *__src,size_t __n);
size_t strnlen(char *__string,size_t __maxlen);
char * strrchr(char *__s,int __c);
byte * two_way_long_needle(int param_1,int param_2,byte *param_3,byte *param_4);
char * strstr(char *__haystack,char *__needle);
uint _strtol_l.isra.0(undefined4 *param_1,byte *param_2,byte **param_3,uint param_4);
uint _strtol_r(undefined4 *param_1,byte *param_2,byte **param_3,uint param_4);
long strtol_l(char *__nptr,char **__endptr,int __base,__locale_t __loc);
long strtol(char *__nptr,char **__endptr,int __base);
int stat(char *__file,stat *__buf);
void _stat_r(int *param_1,undefined4 param_2,undefined4 param_3);
int _stat(int param_1,undefined4 param_2);
void _conv_stat(undefined2 *param_1,undefined4 *param_2);
BL_Err_Type AON_Power_On_BG(void);
BL_Err_Type AON_Power_Off_BG(void);
BL_Err_Type AON_Power_On_LDO11_SOC(void);
BL_Err_Type AON_Power_Off_LDO11_SOC(void);
BL_Err_Type AON_Power_On_LDO15_RF(void);
BL_Err_Type AON_Power_Off_LDO15_RF(void);
BL_Err_Type AON_Power_On_SFReg(void);
BL_Err_Type AON_Power_Off_SFReg(void);
BL_Err_Type AON_LowPower_Enter_PDS0(void);
BL_Err_Type AON_LowPower_Exit_PDS0(void);
void ASM_Delay_Us(uint32_t core,uint32_t cnt);
void BL602_Delay_US(uint32_t cnt);
void BL602_Delay_MS(uint32_t cnt);
void * BL602_MemCpy(void *dst,void *src,uint32_t n);
uint32_t * BL602_MemCpy4(uint32_t *dst,uint32_t *src,uint32_t n);
void * BL602_MemCpy_Fast(void *pdst,void *psrc,uint32_t n);
void * BL602_MemSet(void *s,uint8_t c,uint32_t n);
uint32_t * BL602_MemSet4(uint32_t *dst,uint32_t val,uint32_t n);
int BL602_MemCmp(void *s1,void *s2,uint32_t n);
void EF_Ctrl_Sw_AHB_Clk_0(void);
void EF_Ctrl_Program_Efuse_0(void);
void EF_Ctrl_Load_Efuse_R0(void);
BL_Sts_Type EF_Ctrl_Busy(void);
BL_Sts_Type EF_Ctrl_AutoLoad_Done(void);
void EF_Ctrl_Clear(uint32_t index,uint32_t len);
BL_Err_Type GLB_SW_System_Reset(void);
BL_Err_Type GLB_SW_CPU_Reset(void);
BL_Err_Type GLB_SW_POR_Reset(void);
BL_Err_Type GLB_Select_Internal_Flash(void);
BL_Err_Type GLB_Select_External_Flash(void);
BL_Err_Type GLB_Deswap_Flash_Pin(void);
BL_Err_Type GLB_Swap_Flash_Pin(void);
BL_Err_Type GLB_GPIO_Init(GLB_GPIO_Cfg_Type *cfg);
BL_Err_Type GLB_GPIO_OUTPUT_Enable(GLB_GPIO_Type gpioPin);
BL_Err_Type GLB_GPIO_OUTPUT_Disable(GLB_GPIO_Type gpioPin);
BL_Err_Type GLB_GPIO_Set_HZ(GLB_GPIO_Type gpioPin);
uint8_t GLB_GPIO_Get_Fun(GLB_GPIO_Type gpioPin);
void HBN_Mode_Enter(HBN_APP_CFG_Type *cfg);
void HBN_Power_Down_Flash(SPI_Flash_Cfg_Type *flashCfg);
void HBN_Enable(uint8_t aGPIOIeCfg,HBN_LDO_LEVEL_Type ldoLevel,HBN_LEVEL_Type hbnLevel);
BL_Err_Type HBN_Reset(void);
BL_Err_Type HBN_Set_Ldo11_Aon_Vout(HBN_LDO_LEVEL_Type ldoLevel);
BL_Err_Type HBN_Set_Ldo11_Rt_Vout(HBN_LDO_LEVEL_Type ldoLevel);
BL_Err_Type HBN_Set_Ldo11_Soc_Vout(HBN_LDO_LEVEL_Type ldoLevel);
BL_Err_Type HBN_Hw_Pu_Pd_Cfg(uint8_t enable);
BL_Err_Type HBN_Pin_WakeUp_Mask(uint8_t maskVal);
BL_Err_Type HBN_GPIO7_Dbg_Pull_Cfg(BL_Fun_Type pupdEn,BL_Fun_Type iesmtEn,BL_Fun_Type dlyEn,uint8_t dlySec);
BL_Err_Type HBN_Set_Embedded_Flash_Pullup(uint8_t enable);
BL_Err_Type L1C_Set_Wrap(BL_Fun_Type wrap);
BL_Err_Type L1C_Set_Way_Disable(uint8_t disableVal);
BL_Err_Type L1C_IROM_2T_Access_Set(uint8_t enable);
BL_Err_Type PDS_Reset(void);
BL_Err_Type PDS_Force_Config(PDS_CTL2_Type *cfg2,PDS_CTL3_Type *cfg3);
BL_Err_Type PDS_RAM_Config(PDS_RAM_CFG_Type *ramCfg);
BL_Err_Type PDS_Default_Level_Config(PDS_DEFAULT_LV_CFG_Type *defaultLvCfg,PDS_RAM_CFG_Type *ramCfg,uint32_t pdsSleepCnt);
void SEC_Eng_Turn_On_Sec_Ring(void);
void SEC_Eng_Turn_Off_Sec_Ring(void);
void SFlash_Init(SF_Ctrl_Cfg_Type *pSfCtrlCfg);
BL_Err_Type SFlash_SetSPIMode(SF_Ctrl_Mode_Type mode);
BL_Err_Type SFlash_Read_Reg(SPI_Flash_Cfg_Type *flashCfg,uint8_t regIndex,uint8_t *regValue,uint8_t regLen);
BL_Err_Type SFlash_Write_Reg(SPI_Flash_Cfg_Type *flashCfg,uint8_t regIndex,uint8_t *regValue,uint8_t regLen);
BL_Sts_Type SFlash_Busy(SPI_Flash_Cfg_Type *flashCfg);
BL_Err_Type SFlash_Write_Enable(SPI_Flash_Cfg_Type *flashCfg);
BL_Err_Type SFlash_Qspi_Enable(SPI_Flash_Cfg_Type *flashCfg);
void SFlash_Volatile_Reg_Write_Enable(SPI_Flash_Cfg_Type *flashCfg);
BL_Err_Type SFlash_Chip_Erase(SPI_Flash_Cfg_Type *flashCfg);
BL_Err_Type SFlash_Sector_Erase(SPI_Flash_Cfg_Type *flashCfg,uint32_t secNum);
BL_Err_Type SFlash_Blk32_Erase(SPI_Flash_Cfg_Type *flashCfg,uint32_t blkNum);
BL_Err_Type SFlash_Blk64_Erase(SPI_Flash_Cfg_Type *flashCfg,uint32_t blkNum);
BL_Err_Type SFlash_Erase(SPI_Flash_Cfg_Type *flashCfg,uint32_t startaddr,uint32_t endaddr);
BL_Err_Type SFlash_Program(SPI_Flash_Cfg_Type *flashCfg,SF_Ctrl_IO_Type ioMode,uint32_t addr,uint8_t *data,uint32_t len);
void SFlash_GetUniqueId(uint8_t *data,uint8_t idLen);
void SFlash_GetJedecId(SPI_Flash_Cfg_Type *flashCfg,uint8_t *data);
void SFlash_GetDeviceId(uint8_t *data);
void SFlash_Powerdown(void);
void SFlash_Releae_Powerdown(SPI_Flash_Cfg_Type *flashCfg);
void SFlash_SetBurstWrap(SPI_Flash_Cfg_Type *flashCfg);
void SFlash_DisableBurstWrap(SPI_Flash_Cfg_Type *flashCfg);
BL_Err_Type SFlash_Software_Reset(SPI_Flash_Cfg_Type *flashCfg);
void SFlash_Reset_Continue_Read(SPI_Flash_Cfg_Type *flashCfg);
BL_Err_Type SFlash_Set_IDbus_Cfg(SPI_Flash_Cfg_Type *flashCfg,SF_Ctrl_IO_Type ioMode,uint8_t contRead,uint32_t addr,uint32_t len);
BL_Err_Type SFlash_IDbus_Read_Enable(SPI_Flash_Cfg_Type *flashCfg,SF_Ctrl_IO_Type ioMode,uint8_t contRead);
BL_Err_Type SFlash_Cache_Enable_Set(uint8_t wayDisable);
BL_Err_Type SFlash_Cache_Flush(void);
BL_Err_Type SFlash_Cache_Read_Enable(SPI_Flash_Cfg_Type *flashCfg,SF_Ctrl_IO_Type ioMode,uint8_t contRead,uint8_t wayDisable);
void SFlash_Cache_Hit_Count_Get(uint32_t *hitCountLow,uint32_t *hitCountHigh);
uint32_t SFlash_Cache_Miss_Count_Get(void);
void SFlash_Cache_Read_Disable(void);
BL_Err_Type SFlash_Read(SPI_Flash_Cfg_Type *flashCfg,SF_Ctrl_IO_Type ioMode,uint8_t contRead,uint32_t addr,uint8_t *data,uint32_t len);
BL_Err_Type SFlash_Read_Reg_With_Cmd(SPI_Flash_Cfg_Type *flashCfg,uint8_t readRegCmd,uint8_t *regValue,uint8_t regLen);
BL_Err_Type SFlash_Write_Reg_With_Cmd(SPI_Flash_Cfg_Type *flashCfg,uint8_t writeRegCmd,uint8_t *regValue,uint8_t regLen);
void SF_Cfg_Init_Ext_Flash_Gpio(uint8_t extFlashPin);
void SF_Cfg_Init_Internal_Flash_Gpio(void);
void SF_Cfg_Deinit_Ext_Flash_Gpio(uint8_t extFlashPin);
void SF_Cfg_Restore_GPIO17_Fun(uint8_t fun);
BL_Err_Type SF_Cfg_Get_Flash_Cfg_Need_Lock(uint32_t flashID,SPI_Flash_Cfg_Type *pFlashCfg);
void SF_Cfg_Init_Flash_Gpio(uint8_t flashPinCfg,uint8_t restoreDefault);
uint32_t SF_Cfg_Flash_Identify(uint8_t callFromFlash,uint32_t autoScan,uint32_t flashPinCfg,uint8_t restoreDefault,SPI_Flash_Cfg_Type *pFlashCfg);
void SF_Ctrl_Enable(SF_Ctrl_Cfg_Type *cfg);
void SF_Ctrl_Select_Pad(SF_Ctrl_Pad_Sel sel);
void SF_Ctrl_Set_Owner(SF_Ctrl_Owner_Type owner);
void SF_Ctrl_Disable(void);
void SF_Ctrl_AES_Enable_BE(void);
void SF_Ctrl_AES_Enable_LE(void);
void SF_Ctrl_AES_Set_Region(uint8_t region,uint8_t enable,uint8_t hwKey,uint32_t startAddr,uint32_t endAddr,uint8_t locked);
void SF_Ctrl_AES_Set_Key(uint8_t region,uint8_t *key,SF_Ctrl_AES_Key_Type keyType);
void SF_Ctrl_AES_Set_Key_BE(uint8_t region,uint8_t *key,SF_Ctrl_AES_Key_Type keyType);
void SF_Ctrl_AES_Set_IV(uint8_t region,uint8_t *iv,uint32_t addrOffset);
void SF_Ctrl_AES_Set_IV_BE(uint8_t region,uint8_t *iv,uint32_t addrOffset);
void SF_Ctrl_AES_Enable(void);
void SF_Ctrl_AES_Disable(void);
void SF_Ctrl_Set_Flash_Image_Offset(uint32_t addrOffset);
uint32_t SF_Ctrl_Get_Flash_Image_Offset(void);
void SF_Ctrl_Select_Clock(SF_Ctrl_Sahb_Type sahbType);
void SF_Ctrl_SendCmd(SF_Ctrl_Cmd_Cfg_Type *cfg);
void SF_Ctrl_Icache_Set(SF_Ctrl_Cmd_Cfg_Type *cfg,uint8_t cmdValid);
void SF_Ctrl_Icache2_Set(SF_Ctrl_Cmd_Cfg_Type *cfg,uint8_t cmdValid);
BL_Sts_Type SF_Ctrl_GetBusyState(void);
uint8_t SF_Ctrl_Is_AES_Enable(void);
uint8_t SF_Ctrl_Get_Clock_Delay(void);
void SF_Ctrl_Set_Clock_Delay(uint8_t delay);
BL_Err_Type XIP_SFlash_State_Save(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t *offset);
BL_Err_Type XIP_SFlash_State_Restore(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t offset);
BL_Err_Type XIP_SFlash_Erase_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t startaddr,uint32_t endaddr);
BL_Err_Type XIP_SFlash_Write_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t addr,uint8_t *data,uint32_t len);
BL_Err_Type XIP_SFlash_Read_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t addr,uint8_t *data,uint32_t len);
BL_Err_Type XIP_SFlash_GetJedecId_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint8_t *data);
BL_Err_Type XIP_SFlash_GetDeviceId_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint8_t *data);
BL_Err_Type XIP_SFlash_GetUniqueId_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint8_t *data,uint8_t idLen);
BL_Err_Type XIP_SFlash_Read_Via_Cache_Need_Lock(uint32_t addr,uint8_t *data,uint32_t len);
int XIP_SFlash_Read_With_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t addr,uint8_t *dst,int len);
int XIP_SFlash_Write_With_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t addr,uint8_t *src,int len);
int XIP_SFlash_Erase_With_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t addr,int len);
void XIP_SFlash_Opt_Enter(uint8_t *aesEnable);
void XIP_SFlash_Opt_Exit(uint8_t aesEnable);
uint32_t BFLB_Soft_CRC32(void *dataIn,uint32_t len);
BL_Err_Type ADC_Trim_TSEN(uint16_t *tsen_offset);
BL_Err_Type ADC_Gain_Trim(void);
uint8_t EF_Ctrl_Get_Trim_Parity(uint32_t val,uint8_t len);
void EF_Ctrl_Read_RC32M_Trim(Efuse_Ana_RC32M_Trim_Type *trim);
void EF_Ctrl_Read_RC32K_Trim(Efuse_Ana_RC32K_Trim_Type *trim);
void EF_Ctrl_Read_TSEN_Trim(Efuse_TSEN_Refcode_Corner_Type *trim);
void EF_Ctrl_Read_ADC_Gain_Trim(Efuse_ADC_Gain_Coeff_Type *trim);
BL_Err_Type AON_Power_On_MBG(void);
BL_Err_Type AON_Power_Off_MBG(void);
BL_Err_Type AON_Power_On_XTAL(void);
BL_Err_Type AON_Set_Xtal_CapCode(uint8_t capIn,uint8_t capOut);
uint8_t AON_Get_Xtal_CapCode(void);
BL_Err_Type AON_Power_Off_XTAL(void);
uint8_t EF_Ctrl_Get_Trim_Parity(uint32_t val,uint8_t len);
void EF_Ctrl_Read_RC32M_Trim(Efuse_Ana_RC32M_Trim_Type *trim);
void EF_Ctrl_Read_RC32K_Trim(Efuse_Ana_RC32K_Trim_Type *trim);
GLB_ROOT_CLK_Type GLB_Get_Root_CLK_Sel(void);
BL_Err_Type GLB_Set_System_CLK_Div(uint8_t hclkDiv,uint8_t bclkDiv);
uint8_t GLB_Get_BCLK_Div(void);
uint8_t GLB_Get_HCLK_Div(void);
BL_Err_Type Update_SystemCoreClockWith_XTAL(GLB_PLL_XTAL_Type xtalType);
BL_Err_Type GLB_Set_System_CLK(GLB_PLL_XTAL_Type xtalType,GLB_SYS_CLK_Type clkFreq);
BL_Err_Type System_Core_Clock_Update_From_RC32M(void);
BL_Err_Type GLB_Set_SF_CLK(uint8_t enable,GLB_SFLASH_CLK_Type clkSel,uint8_t div);
BL_Err_Type GLB_Set_PKA_CLK_Sel(GLB_PKA_CLK_Type clkSel);
BL_Err_Type HBN_32K_Sel(HBN_32K_CLK_Type clkType);
BL_Err_Type HBN_Set_ROOT_CLK_Sel(HBN_ROOT_CLK_Type rootClk);
BL_Err_Type HBN_Power_On_Xtal_32K(void);
BL_Err_Type HBN_Power_Off_Xtal_32K(void);
BL_Err_Type HBN_Power_On_RC32K(void);
BL_Err_Type HBN_Power_Off_RC32K(void);
BL_Err_Type HBN_Trim_RC32K(void);
BL_Err_Type PDS_Trim_RC32M(void);
BL_Err_Type PDS_Select_RC32M_As_PLL_Ref(void);
BL_Err_Type PDS_Select_XTAL_As_PLL_Ref(void);
BL_Err_Type PDS_Power_On_PLL(PDS_PLL_XTAL_Type xtalType);
BL_Err_Type PDS_Enable_PLL_All_Clks(void);
BL_Err_Type PDS_Disable_PLL_All_Clks(void);
BL_Err_Type PDS_Enable_PLL_Clk(PDS_PLL_CLK_Type pllClk);
BL_Err_Type PDS_Disable_PLL_Clk(PDS_PLL_CLK_Type pllClk);
BL_Err_Type PDS_Power_Off_PLL(void);

