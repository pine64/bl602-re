word32 __fixdfsi(word32 ra, word32 a0, word32 a1, word32 fflags, word32 frm, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      rf_set_channel
//      trpc_get_default_power_idx
//      rf_pri_get_vco_freq_cw
//      rf_pri_get_vco_idac_cw
//      phyif_utils_decode
//      tcpip_stack_input
//      ecvtbuf
// MayUse:  a0:[0..31] a1:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut: a0 a1 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6
// Preserved: sp
__fixdfsi_entry:
l23070414:
	word32 a5_31
	__csrrs(frm, fp)
	word32 a3_28 = a1 >>u 0x14<u32> & 2047<i32>
	word32 a4_10 = 1022<i32>
	branch a3_28 > 1022<i32> l2307044C
l2307044C:
	branch a3_28 <= 1053<i32> l23070490
l23070490:
	word32 a5_14 = a1 & 0xFFFFF<32> | 0x100000<32>
	word32 a2_16 = 1075<i32> - a3_28
	branch a2_16 > 31<i32> l230704D0
l230704D0:
	word32 a4_19 = 0<i32>
	branch a2_16 == 32<i32> l230704E4
l230704DC:
	a4_19 = a5_14 << a3_28 + -1011<i32>
l230704E4:
	a3_28 = 1043<i32> - a3_28
	a4_10 = CONVERT((a4_19 | a0) != 0<32>, bool, word32)
	a5_31 = a5_14 >>u a3_28
l230704A4:
	a3_28 = a3_28 + -1043<i32>
	a4_10 = CONVERT(a0 << a3_28 + -1043<i32> != 0<32>, bool, word32)
	a5_31 = a5_14 << a3_28 + -1043<i32> | a0 >>u a2_16
l230704BC:
	branch a1 >>u 0x1F<u32> == 0<32> l230704C4
l230704C0:
	a5_31 = 0<32> - a5_31
l230704C4:
	branch a4_10 == 0<32> l23070444
l23070454:
	a5_31 = (a1 >>u 0x1F<u32>) + 0x7FFFFFFF<32>
	branch a1 >>u 0x1F<u32> == 0<32> l23070508
l23070508:
	a4_10 = 16<i32>
l23070464:
	a4_10 = 16<i32>
	branch a3_28 != 1054<i32> l230704C8
l23070470:
	a3_28 = a0 >>u 0x15<u32>
	branch ((a1 & 0xFFFFF<32>) << 0xB<u32> | a0 >>u 0x15<u32>) != 0<32> l230704C8
l23070480:
	a4_10 = a0 << 0xB<u32>
	branch a0 << 0xB<u32> == 0<32> l23070444
l23070488:
	a4_10 = a1 >>u 0x1F<u32>
l23070438:
	branch a3_28 != 0<32> l230704FC
l2307043C:
	a5_31 = a1 & 0xFFFFF<32> | a0
	branch a5_31 != 0<32> l230704FC
l230704FC:
	a5_31 = 0<i32>
	a4_10 = 1<i32>
l230704C8:
	__csrrs(fflags, ra)
l23070444:
	a1Out = a1 >>u 0x1F<u32>
	a3Out = a3_28
	a4Out = a4_10
	a5Out = a5_31
	return a5_31
__fixdfsi_exit:


word32 __fixunsdfsi(word32 ra, word32 a0, word32 a1, word32 fflags, word32 frm, ptr32 & a4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      rfc_init
//      rf_pri_rccal_iq
// MayUse:  a0:[0..31] a1:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut: a0 a4
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: sp
__fixunsdfsi_entry:
l23070510:
	word32 a4_16
	word32 a0_13
	__csrrs(frm, fp)
	word32 a3_9 = a1 >>u 0x14<u32> & 2047<i32>
	branch a3_9 > 1022<i32> l23070544
l23070544:
	branch a1 >>u 0x1F<u32> != 0<32> l230705C0
l230705C0:
	a0_13 = 0<i32>
l23070548:
	branch a3_9 > 1054<i32> l230705CC
l230705CC:
	a0_13 = -1<i32>
l230705C4:
	a4_16 = 16<i32>
l23070550:
	word32 a5_18 = a1 & 0xFFFFF<32> | 0x100000<32>
	word32 a2_19 = 1075<i32> - a3_9
	branch a2_19 > 31<i32> l23070588
l23070588:
	word32 a4_22 = 0<i32>
	branch a2_19 == 32<i32> l2307059C
l23070594:
	a4_22 = a5_18 << a3_9 + -1011<i32>
l2307059C:
	a4_16 = CONVERT((a4_22 | a0) != 0<32>, bool, word32)
	a0_13 = a5_18 >>u 1043<i32> - a3_9
l23070564:
	a4_16 = CONVERT(a0 << a3_9 + -1043<i32> != 0<32>, bool, word32)
	a0_13 = a5_18 << a3_9 + -1043<i32> | a0 >>u a2_19
l2307057C:
	branch a4_16 == 0<32> l230705D4
l230705D4:
	a4Out = a4_16
	return a0_13
l23070534:
	branch a3_9 != 0<32> l230705B4
l23070538:
	word32 a0_42 = a1 & 0xFFFFF<32> | a0
	branch a0_42 != 0<32> l230705B4
l230705B4:
	a0_13 = 0<i32>
	a4_16 = 1<i32>
l23070580:
	__csrrs(fflags, ra)
	a4Out = a4_16
	return a0_13
l23070540:
	a4Out = 0x100000<32>
	return a0_42
__fixunsdfsi_exit:


word32 __floatsidf(word32 a0, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      rf_set_channel
//      pa_input
//      trpc_get_default_power_idx
//      phyif_utils_decode
//      tcpip_stack_input
//      ADC_Parse_Result
// MayUse:  a0:[0..31]
// LiveOut: a0 a1
// Trashed: a0 a1 a4 a5
// Preserved: ra s0 s1 sp
__floatsidf_entry:
l230705D8:
	word32 s0_27
	word32 a4_11
	word32 a5_12
	branch a0 == 0<32> l23070678
l23070678:
	a4_11 = 0<i32>
	a5_12 = 0<i32>
l230705EC:
	word32 s0_15 = (a0 >> 0x1F<u32> ^ a0) - (a0 >> 0x1F<u32>)
	word32 a4_68
	word32 a0_18 = __clzsi2(s0_15, out a4_68)
	a4_11 = 1054<i32> - a0_18
	branch a0_18 > 10<i32> l23070664
l23070664:
	a5_12 = s0_15 << a0_18 + -11<i32>
	a0 = a0 >>u 0x1F<u32>
l23070670:
	s0_27 = 0<i32>
l23070614:
	a5_12 = s0_15 >>u 11<i32> - a0_18
	s0_27 = s0_15 << a0_18 + 21<i32>
	a0 = a0 >>u 0x1F<u32>
l2307062C:
	a1Out = CONVERT(SLICE(a5_12, word20, 0), word20, word32) | (a4_11 & 2047<i32>) << 0x14<u32> | a0 << 0x1F<u32>
	return s0_27
__floatsidf_exit:


word32 __floatunsidf(word32 a0, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      rfc_init
//      rf_pri_rccal_iq
//      rf_pri_get_vco_freq_cw
//      rf_pri_get_vco_idac_cw
//      __floatundisf
// MayUse:  a0:[0..31]
// LiveOut: a0 a1
// Trashed: a0 a1 a3 a4 a5
// Preserved: ra s0 sp
__floatunsidf_entry:
l23070684:
	word32 a4_11
	word32 a5_10
	word32 s0_20 = a0
	branch a0 == 0<32> l230706FC
l230706FC:
	a5_10 = 0<i32>
	a4_11 = 0<i32>
l23070698:
	word32 a4_46
	word32 a0_12 = __clzsi2(a0, out a4_46)
	a4_11 = 1054<i32> - a0_12
	branch a0_12 > 10<i32> l230706EC
l230706EC:
	a5_10 = a0 << a0_12 + -11<i32>
	s0_20 = 0<i32>
l230706AC:
	a5_10 = a0 >>u 11<i32> - a0_12
	s0_20 = a0 << a0_12 + 21<i32>
l230706C0:
	a1Out = CONVERT(SLICE(a5_10, word20, 0), word20, word32) | (a4_11 & 2047<i32>) << 0x14<u32>
	return s0_20
__floatunsidf_exit:


word32 __extendsfdf2(word32 ra, word32 fa0, word32 fflags, word32 frm, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pa_adapt
//      rfc_init
//      tcpip_stack_input
//      bl_tsen_adc_get
//      iperf_server_udp_recv_fn
//      iperf_client_udp
//      iperf_server
//      iperf_client_tcp
//      convertDataToString
//      ADC_Parse_Result
//      TSEN_Get_Temp
// MayUse:  fa0:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut: a0 a1
// Trashed: a0 a1 a4 a5
// Preserved: ra s0 s1 s2 sp
__extendsfdf2_entry:
l23070708:
	word32 a0_31
	word32 a5_23
	__csrrs(frm, fp + -16<i32>)
	word32 a0_17 = fa0 >>u 0x17<u32> & 255<i32>
	word32 s1_20 = a0_17 + 1<i32> & 254<i32>
	word32 s0_21 = CONVERT(SLICE(fa0, word23, 0), word23, word32)
	branch s1_20 == 0<32> l23070798
l23070798:
	branch a0_17 != 0<32> l230707E0
l230707E0:
	a5_23 = 0<i32>
	branch s0_21 == 0<32> l23070804
l230707E8:
	branch s0_21 << 9<u32> < 0<32> l230707F4
l230707F0:
	s1_20 = 16<i32>
l230707F4:
	s0_21 = s0_21 << 0x1D<u32>
	a5_23 = s0_21 >>u 3<u32> | 0x80000<32>
l23070804:
	a0_31 = 2047<i32>
l2307079C:
	branch s0_21 == 0<32> l2307080C
l2307080C:
	a5_23 = 0<i32>
	a0_31 = 0<i32>
l230707A0:
	word32 a4_131
	word32 a0_35 = __clzsi2(s0_21, out a4_131)
	branch a0_35 > 10<i32> l230707D0
l230707D0:
	a5_23 = s0_21 << a0_35 + -11<i32>
	s0_21 = 0<i32>
l230707B0:
	a5_23 = s0_21 >>u 11<i32> - a0_35
	s0_21 = s0_21 << a0_35 + 21<i32>
l230707C4:
	a0_31 = 905<i32> - a0_35
l23070744:
	a5_23 = s0_21 >>u 3<u32>
	a0_31 = a0_17 + 896<i32>
	s0_21 = s0_21 << 0x1D<u32>
	s1_20 = 0<i32>
l23070754:
	word32 a1_73 = CONVERT(SLICE(a5_23, word20, 0), word20, word32) | (a0_31 & 2047<i32>) << 0x14<u32> | (fa0 >>u 0x1F<u32>) << 0x1F<u32>
	branch s1_20 == 0<32> l23070780
l2307077C:
	__csrrs(fflags, ra)
l23070780:
	a1Out = a1_73
	return s0_21
__extendsfdf2_exit:


word32 __truncdfsf2(word32 ra, word32 a0, word32 a1, word32 fflags, word32 frm, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & fa0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pa_input
//      pa_adapt
//      ADC_Parse_Result
//      TSEN_Get_Temp
//      __floatundisf
// MayUse:  a0:[0..31] a1:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut: a1 a2 a3 a4 a5 fa0
// Trashed: a1 a2 a3 a4 a5 a6 a7 fa0 t1
// Preserved: a0 sp
__truncdfsf2_entry:
l23070818:
	word32 a2_105
	word32 a6_112
	word32 a5_100
	word32 t1_10 = a1 >>u 0x14<u32> & 2047<i32>
	word32 a7_4 = __csrrs(frm, fp)
	word32 a3_102 = a0 >>u 0x1D<u32> | CONVERT(SLICE(a1, word20, 0), word20, word32) << 3<u32>
	word32 a4_103 = t1_10 + 1<i32> & 2046<i32>
	word32 a1_16 = a1 >>u 0x1F<u32>
	branch a4_103 == 0<32> l23070A1C
l23070A1C:
	a5_100 = a3_102 | a0 << 3<u32>
	branch t1_10 != 0<32> l23070A2C
l23070A2C:
	branch a5_100 == 0<32> l23070A90
l23070A90:
	a2_105 = 0<i32>
	a6_112 = 255<i32>
l23070A30:
	a2_105 = 0<i32>
	branch t1_10 != 2047<i32> l23070A4C
l23070A3C:
	a2_105 = CONVERT((a3_102 & 0x400000<32>) <u 1<i32>, bool, word32) << 4<u32>
l23070A4C:
	a5_100 = a3_102 << 3<u32> | 0x2000000<32>
	a6_112 = 255<i32>
l23070A24:
	a5_100 = CONVERT(a5_100 != 0<32>, bool, word32)
l2307084C:
	a6_112 = t1_10 + -896<i32>
	branch t1_10 <= -1150<i32> l23070928
l23070928:
	branch t1_10 > 0xFFFFFC80<32> l230709E8
l230709E8:
	a5_100 = CONVERT(a0 << 6<u32> != 0<32>, bool, word32) | a3_102 << 3<u32> | (a0 << 3<u32>) >>u 0x1D<u32>
	a4_103 = 0<i32>
	a2_105 = 0<i32>
l2307092C:
	branch t1_10 < -873<i32> l23070A60
l23070A60:
	a5_100 = 1<i32>
l23070934:
	a3_102 = a3_102 | 0x800000<32>
	word32 a2_48 = 30<i32> - (t1_10 + -896<i32>)
	branch a2_48 > 31<i32> l230709B8
l230709B8:
	word32 a6_53 = (a3_102 | 0x800000<32>) >>u -2<i32> - (t1_10 + -896<i32>)
	word32 a4_54 = 0<i32>
	branch a2_48 == 32<i32> l230709D8
l230709D0:
	a4_54 = (a3_102 | 0x800000<32>) << t1_10 + -862<i32>
l230709D8:
	a5_100 = a6_53 | CONVERT((a4_54 | a0 << 3<u32>) != 0<32>, bool, word32)
l2307094C:
	a3_102 = CONVERT(a0 << 3<u32> << t1_10 + -894<i32> != 0<32>, bool, word32) | (a3_102 | 0x800000<32>) << t1_10 + -894<i32>
	a5_100 = a0 << 3<u32> >>u a2_48 | a3_102
l23070968:
	branch a5_100 == 0<32> l23070A9C
l23070A9C:
	a6_112 = 0<i32>
	a2_105 = 0<i32>
l2307096C:
	word32 a4_74 = a5_100 << 1<u32>
	a2_105 = 0<i32>
	branch (a4_74 & 7<i32>) == 0<32> l230709A4
l2307097C:
	branch a7_4 == 2<i32> l23070A7C
l23070A7C:
	a2_105 = 1<i32>
	branch a1 >>u 0x1F<u32> == 0<32> l230709A4
l23070A84:
	a4_74 = a4_74 + 8<i32>
	a2_105 = a1 >>u 0x1F<u32>
l23070984:
	branch a7_4 == 3<i32> l23070A68
l23070A68:
	a2_105 = a1 >>u 0x1F<u32>
	branch a1 >>u 0x1F<u32> != 0<32> l230709A4
l23070A70:
	a4_74 = a4_74 + 8<i32>
	a2_105 = 1<i32>
l2307098C:
	a2_105 = 1<i32>
	branch a7_4 != 0<32> l230709A4
l23070994:
	branch (a4_74 & 15<i32>) == 4<i32> l230709A4
l230709A0:
	a4_74 = a4_74 + 4<i32>
l230709A4:
	a4_103 = (a4_74 >>u 0x1B<u32> ^ 1<i32>) & 1<i32>
	a6_112 = 0<i32>
l23070A08:
	a3_102 = a5_100 & 7<i32>
	branch a3_102 != 0<32> l23070878
l23070A10:
	branch a4_103 == 0<32> l230708C4
l23070A14:
	a4_103 = a2_105 & 1<i32>
l23070858:
	branch a7_4 == 0<32> l230708B8
l2307085C:
	branch a7_4 != 3<i32> l230708AC
l230708AC:
	branch a7_4 != 2<i32> l23070868
l230708B4:
	branch a1 >>u 0x1F<u32> == 0<32> l23070868
l23070864:
	branch a1 >>u 0x1F<u32> == 0<32> l230708B8
l230708B8:
	a5_100 = 0<i32>
	a6_112 = 255<i32>
	a2_105 = 5<i32>
l23070868:
	a5_100 = -1<i32>
	a6_112 = 254<i32>
	a4_103 = 0<i32>
	a2_105 = 5<i32>
l23070878:
	a3_102 = 2<i32>
	a2_105 = a2_105 | 1<i32>
	branch a7_4 == 2<i32> l23070AB4
l23070AB4:
	branch a1 >>u 0x1F<u32> == 0<32> l230708A0
l23070AB8:
l23070884:
	a3_102 = 3<i32>
	branch a7_4 == 3<i32> l23070AA8
l23070AA8:
	branch a1 >>u 0x1F<u32> != 0<32> l230708A0
l23070AAC:
	a5_100 = a5_100 + 8<i32>
l2307088C:
	branch a7_4 != 0<32> l230708A0
l23070890:
	a3_102 = a5_100 & 15<i32>
	branch a3_102 == 4<i32> l230708A0
l2307089C:
	a5_100 = a5_100 + 4<i32>
l230708A0:
	branch a4_103 == 0<32> l230708C4
l230708A4:
	a2_105 = a2_105 | 2<i32>
l230708C4:
	branch a5_100 << 5<u32> >= 0<32> l230708E4
l230708CC:
	a6_112 = a6_112 + 1<i32>
	branch a6_112 == 255<i32> l23070ABC
l23070ABC:
	a5_100 = 0<i32>
	branch a7_4 == 0<32> l23070AE8
l23070AC4:
	branch a7_4 != 3<i32> l23070ADC
l23070ADC:
	branch a7_4 != 2<i32> l23070AD0
l23070AE4:
	branch a1 >>u 0x1F<u32> == 0<32> l23070AD0
l23070ACC:
	branch a1 >>u 0x1F<u32> == 0<32> l23070AE8
l23070AD0:
	a5_100 = -1<i32>
	a6_112 = 254<i32>
l23070AE8:
	a2_105 = a2_105 | 5<i32>
l230708D8:
	a5_100 = a5_100 & 0xFBFFFFFF<32>
l230708E4:
	word32 a5_177 = a5_100 >>u 3<u32>
	branch a6_112 != 255<i32> l230708FC
l230708F0:
	branch a5_177 == 0<32> l230708FC
l230708F4:
	a5_177 = 0x400000<32>
	a1_16 = 0<i32>
l230708FC:
	word32 a1_192 = a1_16 << 0x1F<u32>
	word32 a5_194 = CONVERT(SLICE(a5_177, word23, 0), word23, word32) | (a6_112 & 255<i32>) << 0x17<u32> | a1_192
	branch a2_105 == 0<32> l23070920
l2307091C:
	__csrrs(fflags, ra)
l23070920:
	a2Out = a2_105
	a3Out = a3_102
	a4Out = 255<i32>
	a5Out = a5_194
	fa0Out = a5_194
	return a1_192
__truncdfsf2_exit:


word32 atoi(word32 a0, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      aws_main_entry
//      cmd_wifi_cfg
//      cmd_wifi_ap_start
//      cmd_wifi_ap_conf_max_sta
//      wifi_rc_fixed_enable
//      wifi_capcode_cmd
//      cmd_gpio_get
//      cmd_gpio_set
//      cmd_gpio_func
//      cmd_wdt_init
//      httpc_tcp_recv
//      lwip_getaddrinfo
//      netif_find
//      TCP_Server
//      ping_cmd
// MayUse:  a0:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
atoi_entry:
l23070AF0:
l23070AF8_thunk_strtol:
	word32 a1_7
	word32 a2_8
	word32 a3_9
	word32 a4_10
	word32 a5_11
	word32 a0_6 = strtol(a0, 0<i32>, 10<i32>, out a1_7, out a2_8, out a3_9, out a4_10, out a5_11)
	a1Out = a1_7
	a2Out = a2_8
	a3Out = a3_9
	a4Out = a4_10
	a5Out = a5_11
	return a0_6
atoi_exit:


void _atoi_r(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
_atoi_r_entry:
l23070AFC:
l23070B04_thunk__strtol_r:
	_strtol_r(a0, a1, 0<i32>, 10<i32>)
	return
_atoi_r_exit:


word32 __errno(ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      aos_loop_run
//      _stat
// MayUse: 
// LiveOut: a0 a5
// Trashed: a0 a5
// Preserved: sp
__errno_entry:
l23070B08:
	word32 a0_6 = Mem0[0x4200D994<p32>:int32]
	a5Out = 0x4200D994<p32>
	return a0_6
__errno_exit:


word32 memchr(word32 a0, word32 a1, word32 a2, ptr32 & a3Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fdt_get_string
//      fdt_subnode_offset_namelen
//      tc_blfdtdump
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a0 a3 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: sp
memchr_entry:
l23070B18:
	word32 a5_100
	branch (a0 & 3<i32>) == 0<32> l23070BEC
l23070BEC:
	a5_100 = a2
l23070B24:
	a5_100 = a2 + -1<i32>
	branch a2 == 0<32> l23070B84
l23070B2C:
	branch CONVERT(Mem0[a0:byte], byte, word32) == (a1 & 255<i32>) l23070B88
l23070B34:
	a3 = -1<i32>
l23070B4C:
	a0 = a0 + 1<i32>
	branch (a0 & 3<i32>) != 0<32> l23070B3C
l23070B3C:
	a5_100 = a5_100 + -1<i32>
	branch a5_100 == -1<i32> l23070B84
l23070B44:
	branch CONVERT(Mem0[a0:byte], byte, word32) == (a1 & 255<i32>) l23070B88
l23070B58:
	branch a5_100 >u 3<i32> l23070B8C
l23070B8C:
	word32 a1_31 = a1 << 8<u32> & 0xFFFF<32> | a1 & 255<i32>
	word32 a7_33 = a1_31 << 0x10<u32> | a1_31
l23070BC0:
	word32 a4_43 = a7_33 ^ Mem0[a0:int32]
	a3 = a4_43 + 0xFEFEFEFF<32>
	branch (a4_43 + 0xFEFEFEFF<32> & ~a4_43 & 0x80808080<32>) != 0<32> l23070B64
l23070BDC:
	a5_100 = a5_100 + -4<i32>
	a0 = a0 + 4<i32>
	branch a5_100 >u 3<i32> l23070BC0
l23070BE8:
l23070B60:
	branch a5_100 == 0<32> l23070B84
l23070B64:
	branch CONVERT(Mem0[a0:byte], byte, word32) == (a1 & 255<i32>) l23070B88
l23070B6C:
	a5_100 = a0 + a5_100
l23070B7C:
	a0 = a0 + 1<i32>
	branch a5_100 != a0 l23070B74
l23070B74:
	branch CONVERT(Mem0[a0:byte], byte, word32) == (a1 & 255<i32>) l23070B88
l23070B84:
	a0 = 0<i32>
l23070B88:
	a3Out = a3
	a5Out = a5_100
	return a0
memchr_exit:


word32 memcmp(word32 a0, word32 a1, word32 a2, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      rxu_cntrl_frame_handle
//      scanu_search_by_ssid
//      scanu_rm_exist_ssid
//      _aid_list_delete
//      apm_probe_req_handler
//      apm_assoc_req_handler
//      process_rsn_ie
//      process_wpa_ie
//      IsEAPOL_MICValid
//      parseKeyKDE
//      KeyMgmtSta_IsRxEAPOLValid
//      supplicantAkmIsWpaWpa2
//      supplicantAkmIsWpa2
//      supplicantConstructContext
//      pmkCacheFindPSKElement
//      chan_ctxt_add
//      rxu_mgt_ind_handler
//      bl_utils_idx_lookup
//      stateGlobalGuard_scan_beacon
//      fdt_subnode_offset_namelen
//      fdt_get_property_namelen_
//      ota_tcp_cmd
//      ls_cmd
//      psm_test_cmd
//      vfs_uart_init
//      hal_gpio_init_from_dts
//      ethernet_input
//      dhcp_server_recv
//      file_info
//      dirent_file
//      romfs_register
//      mbedtls_rsa_rsassa_pss_verify_ext
//      mbedtls_rsa_pkcs1_verify
//      mbedtls_ssl_prepare_handshake_record
//      mbedtls_ssl_parse_certificate
//      x509_name_cmp
//      x509_crt_check_parent
//      x509_crt_verify_top.isra.7
//      mbedtls_x509_crt_check_extended_key_usage
//      mbedtls_x509_crt_verify_with_profile
//      mbedtls_x509_crt_parse_der
//      oid_sig_alg_from_asn1.part.0
//      mbedtls_oid_get_attr_short_name
//      mbedtls_oid_get_x509_ext_type
//      mbedtls_oid_get_extended_key_usage
//      mbedtls_oid_get_pk_alg
//      mbedtls_oid_get_ec_grp
//      mbedtls_oid_get_md_alg
//      mbedtls_pem_read_buffer
//      mbedtls_ssl_handshake_server_step
//      two_way_long_needle
//      strstr
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: sp
memcmp_entry:
l23070BF4:
	word32 a5_17
	branch a2 <=u 3<i32> l23070C28
l23070BFC:
	a3 = 3<i32>
	branch ((a0 | a1) & 3<i32>) != 0<32> l23070C6C
l23070C0C:
	a4 = Mem0[a0:int32]
	branch a4 != Mem0[a1:int32] l23070C6C
l23070C6C:
	a5_17 = a2 + -1<i32>
l23070C18:
	a2 = a2 + -4<i32>
	a0 = a0 + 4<i32>
	a1 = a1 + 4<i32>
	branch a2 >u 3<i32> l23070C0C
l23070C28:
	a5_17 = a2 + -1<i32>
	branch a2 == 0<32> l23070C64
l23070C30:
	a4 = CONVERT(Mem0[a0:byte], byte, word32)
	a3 = CONVERT(Mem0[a1:byte], byte, word32)
	branch a4 != a3 l23070C74
l23070C3C:
	a4 = a5_17 + 1<i32>
	a5_17 = a0 + 1<i32>
	word32 a0_39 = a0 + a4
l23070C5C:
	a1 = a1 + 1<i32>
	branch a5_17 != a0_39 l23070C4C
l23070C4C:
	a4 = CONVERT(Mem0[a5_17:byte], byte, word32)
	a3 = CONVERT(Mem0[a1:byte], byte, word32)
	a5_17 = a5_17 + 1<i32>
	branch a4 != a3 l23070C74
l23070C74:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5_17
	return a4 - a3
l23070C64:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5_17
	return 0<i32>
memcmp_exit:


word32 memcpy(word32 a0, word32 a1, word32 a2, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out, ptr32 & a7Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      http_test_cmd
//      aws_main_entry
//      mm_sta_add
//      mm_bcn_change
//      ps_send_pspoll
//      scan_probe_req_tx
//      sta_mgmt_register
//      txl_frame_get
//      txl_frame_send_null_frame
//      txl_frame_send_qosnull_frame
//      txl_frame_send_eapol_frame
//      vif_mgmt_register
//      rc_update_stats
//      rc_init
//      rxu_cntrl_frame_handle
//      scanu_scan_next
//      scanu_start
//      sm_scan_bss
//      sm_join_bss
//      sm_set_bss_param
//      sm_disconnect
//      sm_connect_ind
//      sm_auth_send
//      sm_assoc_req_send
//      sm_handle_supplicant_result
//      txu_cntrl_sechdr_len_compute
//      apm_start_cfm
//      apm_set_bss_param
//      apm_sta_add
//      apm_send_mlme
//      apm_bcn_set
//      apm_assoc_req_handler
//      keyMgmtSta_StartSession
//      supplicantInitSession
//      supplicantEnable
//      keyMgmtFormatWpaRsnIe
//      add_key_to_mac
//      add_mfp_key_to_mac
//      keyMgmtPlumbPairwiseKey
//      process_rsn_ie
//      process_wpa_ie
//      isApReplayCounterFresh
//      updateApReplayCounter
//      formEAPOLEthHdr
//      IsEAPOL_MICValid
//      parseKeyDataGTK
//      KeyMgmtSta_PrepareEAPOLFrame
//      supplicantConstructContext
//      KeyMgmtSta_DeriveKeys
//      GetKeyMsgNonceFromEAPOL
//      ProcessRxEAPOL_GrpMsg1
//      bl_sha256_crypto_kdf
//      pmkCacheSetPassphrase
//      pmkCacheAddPSK
//      RC4_Encrypt
//      sha256_compress
//      sha256_vector
//      hmac_sha256_vector
//      ProcessKeyMgmtDataAp
//      GenerateGTK_internal
//      PopulateKeyMsg
//      prepareKDE
//      Encrypt_keyData
//      KeyMgmtAp_DerivePTK
//      KeyData_CopyWPAWP2
//      InitKeyMgmtInfo
//      cm_InitConnection
//      cm_SetPeerAddr
//      cm_SetComData
//      trpc_power_get
//      rf_pri_update_tx_power_offset
//      mm_hw_config_handler
//      me_build_beacon
//      me_rc_stats_req_handler
//      me_chan_config_req_handler
//      me_config_req_handler
//      me_sta_add_req_handler
//      scanu_raw_send_req_handler
//      rxu_mgt_ind_handler
//      scanu_join_cfm_handler
//      sm_connect_req_handler
//      mm_sta_add_cfm_handler
//      apm_start_req_handler
//      Bl_hmac_md5
//      Bl_hmac_sha1
//      Bl_PRF
//      wpa_MD5Update
//      wpa_MD5Final
//      ap_setpsk
//      InitializeAp
//      ipc_host_init
//      bl_main_apm_sta_info_get
//      bl_send_start
//      bl_send_add_if
//      bl_send_sm_connect_req
//      bl_send_apm_start_req
//      bl_rx_apm_sta_add_ind
//      bl_rx_scanu_result_ind
//      bl_output
//      stateGlobalGuard_scan_beacon
//      wifi_mgmr_ap_sta_info_get_internal
//      wifi_mgmr_api_scan_item_beacon
//      wifi_mgmr_api_ap_start
//      cmd_wifi_power_table_update
//      wifi_mgmr_sta_enable
//      wifi_mgmr_sta_ssid_set
//      wifi_mgmr_sta_psk_set
//      wifi_mgmr_sta_connect
//      wifi_mgmr_ap_enable
//      wifi_mgmr_ap_sta_info_get
//      wifi_mgmr_cfg_req
//      wifi_mgmr_profile_add
//      wifi_mgmr_profile_get
//      cmd_mgr_msgind
//      tc_fdt_wifi_module
//      ota_tcp_cmd
//      cli_main_input
//      psm_test_cmd
//      prvCopyDataToQueue
//      prvCopyDataFromQueue
//      prvWriteBytesToBuffer
//      prvReadBytesFromBuffer
//      bl_uart_init
//      bl_chip_info
//      bl_rand_stream
//      bl_wifi_sta_mac_addr_set
//      bl_wifi_ap_mac_addr_set
//      bl_wifi_mac_addr_get
//      bl_wifi_ap_info_set
//      bl_wifi_sta_info_set
//      bl_wifi_sta_info_get
//      cmd_timer_start
//      vfs_uart_init
//      hal_uart_setconfig
//      hal_board_cfg
//      bl_tsen_adc_get
//      PtTable_Update_Entry
//      PtTable_Get_Active_Entries
//      lwip_getaddrinfo
//      lwip_sock_make_addr.isra.3
//      lwip_accept
//      lwip_sendto
//      dns_gethostbyname
//      lwip_chksum_copy
//      etharp_input
//      etharp_request
//      ip4_output_if_opt
//      pbuf_copy
//      pbuf_copy_partial
//      pbuf_take
//      pbuf_take_at
//      tcp_seg_copy
//      ethernet_output
//      icmp_input
//      icmp_dest_unreach
//      dhcp_client_find_by_ip.isra.0
//      dhcp_server_recv
//      dhcpd_start
//      ping_recv
//      romfs_read
//      dirent_file
//      utils_sha256_update
//      Bl_F_fast.constprop.0
//      utils_wifi_psk_cal_fast_bin
//      utils_hmac_sha1_fast
//      inode_reserve
//      aos_poll_read_fd
//      event_write
//      event_read
//      aws_iot_shadow_init
//      aws_iot_shadow_connect
//      isJsonKeyMatchingAndUpdateValue
//      shadow_delta_callback
//      AckStatusCallback
//      addToAckWaitList
//      aws_iot_mqtt_init
//      aws_iot_mqtt_publish
//      aws_iot_mqtt_internal_write_utf8_string
//      mfg_media_read_macaddr
//      Bl_F
//      bl60x_fw_password_hash
//      bl_mtd_write
//      block_cipher_df
//      ctr_drbg_update_internal
//      mbedtls_ctr_drbg_reseed
//      mbedtls_ctr_drbg_random
//      mbedtls_entropy_func
//      mbedtls_rsa_rsaes_oaep_encrypt
//      mbedtls_rsa_pkcs1_encrypt
//      mbedtls_rsa_rsaes_oaep_decrypt
//      mbedtls_rsa_pkcs1_decrypt
//      mbedtls_rsa_pkcs1_sign
//      ssl_swap_epochs
//      tls_prf_sha256
//      mbedtls_ssl_derive_keys
//      mbedtls_ssl_set_hostname
//      mbedtls_ssl_write_record
//      mbedtls_ssl_resend
//      mbedtls_ssl_prepare_handshake_record
//      mbedtls_ssl_write_certificate
//      mbedtls_ssl_write_finished
//      mbedtls_ssl_write
//      mbedtls_ssl_read_record_layer
//      mbedtls_ssl_read
//      mbedtls_x509_crt_parse_der
//      mbedtls_aes_crypt_cbc
//      mbedtls_mpi_grow
//      mbedtls_mpi_shrink
//      mbedtls_mpi_copy
//      mpi_montmul
//      mbedtls_mpi_exp_mod
//      mbedtls_cipher_set_iv
//      mbedtls_cipher_update
//      mbedtls_cipher_auth_encrypt
//      mbedtls_debug_print_crt
//      ecp_mod_p256k1
//      mbedtls_gcm_starts
//      sha224_clone_wrap
//      sha224_update_wrap
//      pem_aes_decrypt
//      mbedtls_md5_clone
//      mbedtls_md5_update
//      mbedtls_sha1_clone
//      mbedtls_sha1_update
//      mbedtls_ssl_handshake_client_step
//      mbedtls_ssl_handshake_server_step
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a1 a2 a3 a4 a5 a6 a7 t1
// Trashed: a1 a2 a3 a4 a5 a6 a7 t0 t1 t3 t4 t5 t6
// Preserved: sp
memcpy_entry:
l23070C7C:
	word32 a4_11
	word32 a5_5 = a1 ^ a0
	word32 a5_118 = a5_5 & 3<i32>
	word32 a7_8 = a0 + a2
	branch (a5_5 & 3<i32>) != 0<32> l23070CEC
l23070C8C:
	a5_118 = 3<i32>
	branch a2 <=u 3<i32> l23070CEC
l23070CEC:
	a4_11 = a0
	branch a0 >=u a7_8 l23070CE8
l23070C94:
	a4_11 = a0 + 1<i32>
	branch (a0 & 3<i32>) != 0<32> l23070D0C
l23070D0C:
	a3 = CONVERT(Mem16[a1:byte], byte, word32)
	a4_11 = a4_11 + 0<i32>
	Mem21[a4_11 + 4095<i32>:byte] = SLICE(a3, byte, 0)
	a1 = a1 + 1<i32>
	branch (a4_11 & 3<i32>) == 0<32> l23070CA0
l23070D24:
	a3 = CONVERT(Mem21[a1:byte], byte, word32)
	Mem26[a4_11 + 4096<i32>:byte] = SLICE(a3, byte, 0)
	a4_11 = a4_11 + 1<i32>
	a1 = a1 + 1<i32>
	branch (a4_11 + 1<i32> & 3<i32>) != 0<32> l23070D0C
l23070D3C:
l23070CA0:
	a2 = a7_8 & -4<i32>
	a5_118 = (a7_8 & -4<i32>) + -32<i32>
	branch a4_11 <u a5_118 l23070D40
l23070D40:
	word32 t0_36 = Mem34[a1 + 4<i32>:int32]
	word32 t6_37 = Mem34[a1 + 8<i32>:int32]
	word32 t5_38 = Mem34[a1 + 12<i32>:int32]
	word32 t4_39 = Mem34[a1 + 16<i32>:int32]
	word32 t3_40 = Mem34[a1 + 20<i32>:int32]
	t1 = Mem34[a1 + 24<i32>:int32]
	a6 = Mem34[a1 + 28<i32>:int32]
	Mem45[a4_11:word32] = Mem34[a1:int32]
	a1 = a1 + 36<i32>
	a3 = Mem45[a1 + -4<i32>:int32]
	Mem47[a4_11 + 4<i32>:word32] = t0_36
	Mem48[a4_11 + 8<i32>:word32] = t6_37
	Mem49[a4_11 + 12<i32>:word32] = t5_38
	Mem50[a4_11 + 16<i32>:word32] = t4_39
	Mem51[a4_11 + 20<i32>:word32] = t3_40
	Mem52[a4_11 + 24<i32>:word32] = t1
	Mem53[a4_11 + 28<i32>:word32] = a6
	a4_11 = a4_11 + 36<i32>
	Mem55[a4_11 + 4092<i32>:word32] = a3
	branch a4_11 <u a5_118 l23070D40
l23070D94:
l23070CAC:
	branch a4_11 >=u (a7_8 & -4<i32>) l23070CE4
l23070CB0:
	a3 = a1
	word32 a5_63 = a4_11
l23070CB8:
	a6 = Mem65[a3:int32]
	a5_63 = a5_63 + 4<i32>
	Mem70[a5_63 + 4092<i32>:word32] = a6
	a3 = a3 + 4<i32>
	branch a5_63 <u (a7_8 & -4<i32>) l23070CB8
l23070CCC:
	a5_118 = ((a7_8 & -4<i32>) + -1<i32> - a4_11 & -4<i32>) + 4<i32>
	a4_11 = a4_11 + a5_118
	a1 = a1 + a5_118
l23070CE4:
	branch a4_11 <u a7_8 l23070CF4
l23070CF4:
	word32 a5_87 = CONVERT(Mem86[a1:byte], byte, word32)
	a4_11 = a4_11 + 1<i32>
	Mem91[a4_11 + 4095<i32>:byte] = SLICE(a5_87, byte, 0)
	a1 = a1 + 1<i32>
	branch a4_11 <u a7_8 l23070CF4
l23070D08:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4_11
	a5Out = a5_87
	a6Out = a6
	a7Out = <invalid>
	return t1
l23070CE8:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4_11
	a5Out = a5_118
	a6Out = a6
	a7Out = <invalid>
	return t1
memcpy_exit:


word32 memmove(word32 a0, word32 a1, word32 a2, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      rc_sort_samples_tp
//      mbedtls_ssl_write_record
//      mbedtls_ssl_fetch_input
//      mbedtls_ssl_prepare_handshake_record
//      mbedtls_ssl_read_record_layer
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a1 a3 a4 a5
// Trashed: a1 a3 a4 a5
// Preserved: a2 a6 a7 sp t1 t3
memmove_entry:
l23070D98:
	branch a1 >=u a0 l23070DC4
l23070D9C:
	word32 a5_6 = a1 + a2
	branch a0 >=u a5_6 l23070DC4
l23070DC4:
	word32 a5_14
	word32 a3_13
	branch a2 >u 15<i32> l23070DF8
l23070DF8:
	branch ((a1 | a0) & 3<i32>) != 0<32> l23070EA0
l23070EA0:
	a3_13 = a2 + -1<i32>
	a5_14 = a0
l23070E04:
	word32 a7_16 = a2 + -16<i32> & -16<i32>
	word32 a6_18 = a0 + (a7_16 + 16<i32>)
	word32 a4_19 = a1
	a5_14 = a0
l23070E1C:
	a5_14 = a5_14 + 16<i32>
	Mem27[a5_14 + 4080<i32>:word32] = Mem22[a4_19:int32]
	a4_19 = a4_19 + 16<i32>
	Mem29[a5_14 + 4084<i32>:word32] = Mem27[a4_19 + -12<i32>:int32]
	Mem31[a5_14 + 4088<i32>:word32] = Mem29[a4_19 + -8<i32>:int32]
	Mem33[a5_14 + 4092<i32>:word32] = Mem31[a4_19 + -4<i32>:int32]
	branch a6_18 != a5_14 l23070E1C
l23070E48:
	a4 = a2 & 12<i32>
	a1 = a1 + (a7_16 + 16<i32>)
	branch (a2 & 12<i32>) == 0<32> l23070EB0
l23070EB0:
	a2 = a2 & 15<i32>
l23070E58:
	word32 a4_42 = a1
	word32 a7_43 = a5_14
l23070E64:
	a4_42 = a4_42 + 4<i32>
	a7_43 = a7_43 + 4<i32>
	Mem53[a7_43 + 4092<i32>:word32] = Mem47[a4_42 + -4<i32>:int32]
	branch a1 + ((a2 & 15<i32>) - a4_42) >u 3<i32> l23070E64
l23070E80:
	a4 = ((a2 & 15<i32>) + -4<i32> & -4<i32>) + 4<i32>
	a2 = a2 & 3<i32>
	a5_14 = a5_14 + a4
	a1 = a1 + a4
l23070DCC:
	a5_14 = a0
l23070DD0:
	a3_13 = a2 + -1<i32>
	branch a2 == 0<32> l23070EAC
l23070EAC:
	a3Out = a3_13
	a4Out = a4
	a5Out = a5_14
	return a1
l23070DD8:
	word32 a3_72 = a5_14 + (a3_13 + 1<i32>)
l23070DE0:
	a1 = a1 + 1<i32>
	word32 a4_76 = CONVERT(Mem75[a1 + -1<i32>:byte], byte, word32)
	a5_14 = a5_14 + 1<i32>
	Mem79[a5_14 + 4095<i32>:byte] = SLICE(a4_76, byte, 0)
	branch a5_14 != a3_72 l23070DE0
l23070DF4:
	a3Out = a3_72
	a4Out = a4_76
	a5Out = a5_14
	return a1
l23070DA4:
	word32 a4_81 = a0 + a2
	branch a2 == 0<32> l23070E9C
l23070E9C:
	a3Out = a3
	a4Out = a4_81
	a5Out = a5_6
	return a1
l23070DAC:
	a5_6 = a5_6 + -1<i32>
	word32 a3_85 = CONVERT(Mem84[a5_6:byte], byte, word32)
	a4_81 = a4_81 + -1<i32>
	Mem88[a4_81:byte] = SLICE(a3_85, byte, 0)
	branch a1 != a5_6 l23070DAC
l23070DC0:
	a3Out = a3_85
	a4Out = a4_81
	a5Out = a5_6
	return a1
memmove_exit:


word32 memset(word32 ra, word32 a0, word32 a1, word32 a2, ptr32 & t1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      cmd_httpc_test
//      http_test_cmd
//      event_cb_wifi_event
//      mm_env_init
//      mm_init
//      mm_sta_add
//      mm_sta_del
//      mm_bcn_init_vif
//      ps_init
//      scan_init
//      sta_mgmt_entry_init
//      sta_mgmt_add_key
//      td_reset
//      txl_cntrl_init
//      txl_reset
//      txl_frame_init_desc
//      txl_frame_init
//      vif_mgmt_init
//      vif_mgmt_unregister
//      vif_mgmt_add_key
//      me_init
//      rc_update_stats
//      rc_init
//      rxu_swdesc_upload_evt
//      scanu_init
//      scanu_rm_exist_ssid
//      _aid_list_delete
//      apm_init
//      apm_assoc_req_handler
//      ke_msg_alloc
//      GetTxEAPOLBuffer
//      init_customApp_mibs
//      supplicantInit
//      add_key_to_mac
//      add_mfp_key_to_mac
//      IsEAPOL_MICValid
//      KeyMgmtSta_PrepareEAPOLFrame
//      set_psk
//      pmkCacheInit
//      pmkCacheNewElement
//      pmkCacheDeletePSK
//      hmac_sha256_vector
//      PrepDefaultEapolMsg
//      InitStaKeyInfo
//      prepareKDE
//      cm_InitConnection
//      ipc_emb_init
//      ipc_emb_tx_evt
//      phy_tcal_reset
//      chan_init
//      chan_ctxt_del
//      mm_monitor_enable_req_handler
//      bl_init
//      txl_cfm_init
//      me_build_associate_req
//      me_build_beacon
//      me_build_probe_rsp
//      me_build_associate_rsp
//      rxu_mgt_ind_handler
//      dbg_init
//      generate_subkey
//      bl_aes_cmac
//      Bl_hmac_md5
//      Bl_hmac_sha1
//      Bl_PRF
//      wpa_MD5Transform
//      wpa_MD5Final
//      Bl_SHA1Final
//      InitializeAp
//      ipc_host_init
//      bl_main_monitor
//      bl_main_apm_start
//      bl_main_apm_sta_delete
//      bl_main_connect
//      bl_send_msg
//      bl_msg_zalloc.constprop.3
//      notify_event_scan_done
//      bl_rx_chan_switch_ind
//      bl_rx_sm_connect_ind
//      bl_rx_sm_disconnect_ind
//      bl_rx_scanu_result_ind
//      bl_output
//      tcpip_stack_input
//      bl_ipc_init
//      stateGlobalGuard_scan_beacon
//      wifi_mgmr_ap_sta_info_get_internal
//      wifi_mgmr_api_ip_update
//      wifi_mgmr_api_reconnect
//      wifi_mgmr_api_disable_autoreconnect
//      wifi_mgmr_api_enable_autoreconnect
//      wifi_mgmr_api_disconnect
//      wifi_mgmr_api_ifaceup
//      wifi_mgmr_api_sniffer_enable
//      wifi_mgmr_api_scan_item_beacon
//      wifi_mgmr_api_fw_disconnect
//      wifi_mgmr_api_fw_tsen_reload
//      wifi_mgmr_api_fw_scan
//      wifi_mgmr_api_fw_powersaving
//      wifi_mgmr_api_ap_start
//      wifi_mgmr_api_ap_stop
//      wifi_mgmr_api_idle
//      wifi_mgmr_api_raw_send
//      wifi_ap_sta_list_get_cmd
//      wifi_ap_sta_delete_cmd
//      cmd_wifi_ap_start
//      wifi_denoise_disable_cmd
//      wifi_denoise_enable_cmd
//      wifi_mgmr_sta_connect
//      wifi_mgmr_ap_sta_info_get
//      wifi_mgmr_rate_config
//      wifi_mgmr_conf_max_sta
//      wifi_mgmr_cfg_req
//      wifi_mgmr_profile_add
//      wifi_mgmr_profile_get
//      cb_disconnect_ind
//      cb_connect_ind
//      netif_status_callback
//      bl606a0_wifi_init
//      cmd_blog_info_dump
//      ota_tcp_cmd
//      hexdump_cmd
//      aos_cli_init
//      aos_cli_printf
//      proc_onecmd
//      ls_cmd
//      cli_getchar
//      cli_main_input
//      get_dns_request
//      dns_server_init
//      write_status
//      format_sector.constprop.16
//      move_env
//      create_env_blob
//      ef_port_init
//      psm_test_cmd
//      prvInitialiseNewStreamBuffer
//      vStreamBufferDelete
//      prvInitialiseNewTask.isra.2
//      bl_cks_test
//      bl_dma_test
//      Sec_Eng_AES_Link_Case_CBC_128
//      Sec_Eng_AES_Link_Case_CTR_128
//      Sec_Eng_AES_Link_Case_ECB_128
//      sha256_test_case0
//      bl_wifi_ap_info_set
//      bl_wifi_sta_info_set
//      dev_uart_init
//      hal_gpio_init_from_dts
//      hal_board_cfg
//      httpc_tcp_recv
//      httpc_init_connection_common.constprop.5
//      loopset_led_trigger
//      lwip_getaddrinfo
//      lwip_sock_make_addr.isra.3
//      lwip_accept
//      lwip_select
//      altcp_alloc
//      dns_check_entry
//      dhcp_create_msg
//      dhcp_recv
//      dhcp_start
//      ip4_output_if_opt
//      netif_add
//      raw_new
//      stats_netstat
//      tcp_new_ip_type
//      udp_new_ip_type
//      dhcp_server_recv
//      dhcp_server_start
//      tcpc_entry
//      TCP_Server
//      iperf_server_udp
//      iperf_server_udp_recv_fn
//      iperf_client_udp
//      iperf_server
//      iperf_client_tcp
//      dirent_file
//      romfs_opendir
//      romfs_register
//      sntp_dns_found
//      utils_sha256_init
//      utils_hmac_sha1_fast
//      inode_init
//      aos_register_driver
//      aos_register_fs
//      aos_loop_init
//      aos_task_new
//      event_open
//      Sec_Eng_SHA256_Init
//      Sec_Eng_SHA256_Link_Init
//      mfg_media_read_poweroffset
//      bl_mtd_open
//      bloop_init
//      bloop_timer_init
//      block_cipher_df
//      ctr_drbg_update_internal
//      mbedtls_ctr_drbg_init
//      mbedtls_ctr_drbg_reseed
//      mbedtls_ctr_drbg_seed
//      mbedtls_ctr_drbg_random
//      mbedtls_entropy_init
//      mbedtls_entropy_func
//      pk_get_pk_alg
//      mgf_mask
//      mbedtls_rsa_init
//      mbedtls_rsa_rsaes_oaep_encrypt
//      mbedtls_rsa_pkcs1_sign
//      mbedtls_rsa_rsassa_pss_verify_ext
//      mbedtls_sha256_init
//      mbedtls_ssl_session_init
//      mbedtls_ssl_init
//      mbedtls_ssl_setup
//      mbedtls_ssl_config_init
//      mbedtls_ssl_write_record
//      mbedtls_ssl_prepare_handshake_record
//      mbedtls_ssl_write_finished
//      mbedtls_ssl_parse_change_cipher_spec
//      mbedtls_x509_crt_init
//      mbedtls_x509_crt_parse_der
//      mbedtls_net_connect
//      mycalloc
//      mbedtls_aes_init
//      mbedtls_mpi_copy
//      mbedtls_mpi_lset
//      mbedtls_mpi_write_binary
//      mpi_montmul
//      mbedtls_mpi_exp_mod
//      mbedtls_cipher_init
//      mbedtls_cipher_setup
//      mbedtls_cipher_auth_encrypt
//      mbedtls_debug_print_buf
//      mbedtls_debug_print_crt
//      mbedtls_ecp_group_init
//      mbedtls_ecp_mul
//      mbedtls_ecp_check_pub_priv
//      ecp_mod_p256k1
//      mbedtls_gcm_init
//      mbedtls_gcm_setkey
//      mbedtls_gcm_starts
//      mbedtls_md_init
//      mbedtls_md_hmac_starts
//      mbedtls_pem_init
//      mbedtls_pem_read_buffer
//      mbedtls_md5_init
//      mbedtls_sha1_init
//      mbedtls_ssl_handshake_server_step
//      mbedtls_x509_dn_gets
//      strstr
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] ra:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 ra t1
// Trashed: a0 a1 a2 a3 a4 a5 ra t0 t1
// Preserved: sp
memset_entry:
l23070EB8:
	word32 t1_14 = 15<i32>
	word32 a4_25 = a0
	branch a2 <=u 15<i32> l23070EFC
l23070EC4:
	word32 a5_24 = a0 & 15<i32>
	branch (a0 & 15<i32>) != 0<32> l23070F68
l23070F68:
	word32 a3_10 = ((a0 & 15<i32>) << 2<u32>) + 0x23070F6C<p32>
	word32 a4_16
	word32 a2_17
	word32 a5_18
	word32 t0_22
	call a3_10 + -96<i32> (retsize: 0;)
		uses: a0:a0,a1:a1_19,a2:a2,a3:a3_10,ra:ra,t0:ra
		defs: a0:a0_15,a1:a1_19,a2:a2_17,a4:a4_16,a5:a5_18,t0:t0_22,t1:t1_14
	ra = t0_22
	a5_24 = a5_18 + -16<i32>
	a4_25 = a4_16 - (a5_18 + -16<i32>)
	a2 = a2_17 + (a5_18 + -16<i32>)
	branch t1_14 >=u a2 l23070EFC
l23070F90:
l23070ECC:
	branch a1 != 0<32> l23070F50
l23070F50:
	word32 a1_29 = a1 & 255<i32>
	word32 a1_31 = a1_29 | a1_29 << 8<u32>
	a1 = a1_31 | a1_31 << 0x10<u32>
l23070ED0:
	a2 = a2 & 15<i32>
	word32 a3_40 = (a2 & -16<i32>) + a4_25
l23070EDC:
	Mem43[a4_25:word32] = a1
	Mem44[a4_25 + 4<i32>:word32] = a1
	Mem45[a4_25 + 8<i32>:word32] = a1
	Mem46[a4_25 + 12<i32>:word32] = a1
	a4_25 = a4_25 + 16<i32>
	branch a4_25 <u a3_40 l23070EDC
l23070EF4:
	branch a2 != 0<32> l23070EFC
l23070EFC:
	word32 a3_58 = (t1_14 - a2 << 2<u32>) + 0x23070F04<p32>
	word32 t1_73
	word32 a0_74
	word32 a4_75
	word32 a2_76
	word32 a5_77
	word32 a1_78
	word32 a3_79
	word32 ra_80
	call a3_58 + 12<i32> (retsize: 0;)
		uses: a0:a0_59,a1:a1_67,a2:a2_54,a3:a3_58,ra:ra_63,t0:0x23070F04<p32>
		defs: a0:a0_74,a1:a1_78,a2:a2_76,a3:a3_79,a4:a4_75,a5:a5_77,ra:ra_80,t1:t1_73
	t1Out = t1_73
	a0Out = a0_74
	a1Out = a1_78
	a2Out = a2_76
	a3Out = a3_79
	a4Out = a4_75
	a5Out = a5_77
	return ra_80
l23070EF8:
	t1Out = t1_14
	a0Out = a0
	a1Out = a1
	a2Out = a2
	a3Out = a3_40
	a4Out = a4_25
	a5Out = a5_24
	return ra
memset_exit:


void fn23070F0C(word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a3:[0..31]
// LiveOut:
// Trashed: a3
// Preserved: sp
fn23070F0C_entry:
l23070F0C:
	call a3 + 12<i32> (retsize: 0;)
		uses: a3:a3
	return
fn23070F0C_exit:


void fn23070F10(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn23070F10_entry:
l23070F10:
	Mem5[a4 + 14<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 13<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 12<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 11<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 10<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 9<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4 + 8<i32>:byte] = SLICE(a1, byte, 0)
	Mem12[a4 + 7<i32>:byte] = SLICE(a1, byte, 0)
	Mem13[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem14[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem15[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem16[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem17[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem18[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem19[a4:byte] = SLICE(a1, byte, 0)
	return
fn23070F10_exit:


void fn23070F14(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn23070F14_entry:
l23070F14:
	Mem5[a4 + 13<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 12<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 11<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 10<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 9<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 8<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4 + 7<i32>:byte] = SLICE(a1, byte, 0)
	Mem12[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem13[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem14[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem15[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem16[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem17[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem18[a4:byte] = SLICE(a1, byte, 0)
	return
fn23070F14_exit:


void fn23070F18(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn23070F18_entry:
l23070F18:
	Mem5[a4 + 12<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 11<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 10<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 9<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 8<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 7<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem12[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem13[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem14[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem15[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem16[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem17[a4:byte] = SLICE(a1, byte, 0)
	return
fn23070F18_exit:


void fn23070F1C(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn23070F1C_entry:
l23070F1C:
	Mem5[a4 + 11<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 10<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 9<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 8<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 7<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem12[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem13[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem14[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem15[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem16[a4:byte] = SLICE(a1, byte, 0)
	return
fn23070F1C_exit:


void fn23070F20(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn23070F20_entry:
l23070F20:
	Mem5[a4 + 10<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 9<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 8<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 7<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem12[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem13[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem14[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem15[a4:byte] = SLICE(a1, byte, 0)
	return
fn23070F20_exit:


void fn23070F24(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn23070F24_entry:
l23070F24:
	Mem5[a4 + 9<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 8<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 7<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem12[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem13[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem14[a4:byte] = SLICE(a1, byte, 0)
	return
fn23070F24_exit:


void fn23070F28(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn23070F28_entry:
l23070F28:
	Mem5[a4 + 8<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 7<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem12[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem13[a4:byte] = SLICE(a1, byte, 0)
	return
fn23070F28_exit:


void fn23070F2C(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn23070F2C_entry:
l23070F2C:
	Mem5[a4 + 7<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem12[a4:byte] = SLICE(a1, byte, 0)
	return
fn23070F2C_exit:


void fn23070F30(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn23070F30_entry:
l23070F30:
	Mem5[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4:byte] = SLICE(a1, byte, 0)
	return
fn23070F30_exit:


void fn23070F34(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn23070F34_entry:
l23070F34:
	Mem5[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4:byte] = SLICE(a1, byte, 0)
	return
fn23070F34_exit:


void fn23070F38(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn23070F38_entry:
l23070F38:
	Mem5[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4:byte] = SLICE(a1, byte, 0)
	return
fn23070F38_exit:


void fn23070F3C(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn23070F3C_entry:
l23070F3C:
	Mem5[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4:byte] = SLICE(a1, byte, 0)
	return
fn23070F3C_exit:


void fn23070F40(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn23070F40_entry:
l23070F40:
	Mem5[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4:byte] = SLICE(a1, byte, 0)
	return
fn23070F40_exit:


void fn23070F44(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn23070F44_entry:
l23070F44:
	Mem5[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4:byte] = SLICE(a1, byte, 0)
	return
fn23070F44_exit:


void fn23070F48(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn23070F48_entry:
l23070F48:
	Mem5[a4:byte] = SLICE(a1, byte, 0)
	return
fn23070F48_exit:


word32 strchr(word32 a0, word32 a1, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      event_cb_wifi_event
//      proc_onecmd
//      dhcpd_start
//      dirent_file
//      strrchr
//      strstr
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: sp
strchr_entry:
l23070F94:
	word32 a5_13
	word32 a3_123 = a1 & 255<i32>
	branch (a1 & 255<i32>) == 0<32> l23071074
l23071074:
	branch (a0 & 3<i32>) == 0<32> l23071098
l23071078:
	word32 a5_8 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5_8 != 0<32> l2307108C
l2307108C:
	a0 = a0 + 1<i32>
	branch (a0 & 3<i32>) != 0<32> l23071084
l23071084:
	a5_13 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5_13 == 0<32> l23071070
l23071098:
	word32 a4_16 = Mem0[a0:int32]
	a4 = ~a4_16
	a2 = 0xFEFEFEFF<32>
	a3_123 = 0x80808080<32>
	branch (a4_16 + 0xFEFEFEFF<32> & a4 & 0x80808080<32>) != 0<32> l230710DC
l230710C0:
	a0 = a0 + 4<i32>
	word32 a4_28 = Mem0[a0:int32]
	a4 = ~a4_28
	branch (a4_28 + 0xFEFEFEFF<32> & a4 & 0x80808080<32>) == 0<32> l230710C0
l230710DC:
	a5_13 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5_13 == 0<32> l23071070
l230710E4:
	a0 = a0 + 1<i32>
	word32 a5_41 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5_41 != 0<32> l230710E4
l230710F0:
	a1Out = a1
	a2Out = 0xFEFEFEFF<32>
	a3Out = 0x80808080<32>
	a4Out = a4
	a5Out = a5_41
	return a0
l23071080:
l230710F8:
	a1Out = a1
	a2Out = a2
	a3Out = a1 & 255<i32>
	a4Out = a4
	a5Out = a5_8
	return a0
l23070FA0:
	branch (a0 & 3<i32>) == 0<32> l23070FCC
l23070FA4:
	a5_13 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5_13 == 0<32> l2307106C
l23070FAC:
	branch (a1 & 255<i32>) != a5_13 l23070FC0
l23070FC0:
	a0 = a0 + 1<i32>
	branch (a0 & 3<i32>) != 0<32> l23070FB4
l23070FB4:
	a5_13 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5_13 == 0<32> l2307106C
l23070FBC:
	branch a5_13 == (a1 & 255<i32>) l23071070
l23070FCC:
	word32 a1_53 = a1 & 255<i32> | (a1 & 255<i32>) << 8<u32>
	word32 a4_56 = Mem0[a0:int32]
	word32 t1_58 = a1_53 << 0x10<u32> | a1_53
	word32 a2_60 = t1_58 ^ a4_56
	a1 = ~a2_60
	a2 = a1 & a2_60 + 0xFEFEFEFF<32>
	a4 = a4_56 + 0xFEFEFEFF<32>
	branch ((~a4_56 & a4_56 + 0xFEFEFEFF<32> | a2) & 0x80808080<32>) != 0<32> l2307104C
l2307101C:
	a0 = a0 + 4<i32>
	word32 a4_75 = Mem0[a0:int32]
	word32 a2_77 = a4_75 ^ t1_58
	a4 = ~a4_75
	a2 = a2_77 + 0xFEFEFEFF<32> & ~a2_77
	a1 = a2_77 + 0xFEFEFEFF<32>
	branch ((a4_75 + 0xFEFEFEFF<32> & a4 | a2) & 0x80808080<32>) == 0<32> l2307101C
l2307104C:
	a5_13 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5_13 == 0<32> l2307106C
l23071054:
	branch (a1 & 255<i32>) != a5_13 l23071060
l23071060:
	a0 = a0 + 1<i32>
	a5_13 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5_13 != 0<32> l2307105C
l2307105C:
	branch a5_13 == (a1 & 255<i32>) l230710F4
l230710F4:
	a1Out = a1
	a2Out = a2
	a3Out = a1 & 255<i32>
	a4Out = a4
	a5Out = a5_13
	return a0
l2307106C:
	a0 = 0<i32>
l23071058:
l23071070:
	a1Out = a1
	a2Out = a2
	a3Out = a3_123
	a4Out = a4
	a5Out = a5_13
	return a0
l23070FB0:
l230710FC:
	a1Out = a1
	a2Out = a2
	a3Out = a1 & 255<i32>
	a4Out = a4
	a5Out = a5_13
	return a0
strchr_exit:


word32 strcmp(word32 a0, word32 a1, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      bl_msg_update_channel_cfg
//      stateGlobalGuard_scan_beacon
//      cmd_wifi_cfg
//      cmd_blog_info_dump
//      cmd_blog_set_level
//      proc_onecmd
//      ls_cmd
//      echo_cmd
//      hal_boot2_partition_bus_addr
//      hal_boot2_partition_addr
//      inode_open
//      findIndexOfSubscriptionList
//      AckStatusCallback
//      isSubscriptionPresent
//      incrementSubscriptionCnt
//      aws_iot_mqtt_unsubscribe
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 t0 t1 t2
// Preserved: sp
strcmp_entry:
l23071100:
	word32 a4_5 = a0 | a1
	branch (a4_5 & 3<i32>) != 0<32> l2307120C
l23071110:
	a5 = 0x7F7F7F7F<32>
l23071118:
	word32 a2_12 = Mem0[a0:int32]
	word32 a3_14 = Mem0[a1:int32]
	branch ((a2_12 & 0x7F7F7F7F<32>) + 0x7F7F7F7F<32> | (a2_12 | 0x7F7F7F7F<32>)) != -1<i32> l23071234
l23071134:
	branch a2_12 != a3_14 l230711C0
l23071138:
	a2_12 = Mem0[a0 + 4<i32>:int32]
	a3_14 = Mem0[a1 + 4<i32>:int32]
	branch ((a2_12 & 0x7F7F7F7F<32>) + 0x7F7F7F7F<32> | (a2_12 | 0x7F7F7F7F<32>)) != -1<i32> l2307122C
l2307122C:
	a0 = a0 + 4<i32>
	a1 = a1 + 4<i32>
l23071234:
	branch a2_12 != a3_14 l2307120C
l23071238:
	a1Out = a1
	a2Out = a2_12
	a3Out = a3_14
	a4Out = a4_5 & 3<i32>
	a5Out = 0x7F7F7F7F<32>
	return 0<i32>
l23071154:
	branch a2_12 != a3_14 l230711C0
l23071158:
	a2_12 = Mem0[a0 + 8<i32>:int32]
	a3_14 = Mem0[a1 + 8<i32>:int32]
	branch ((a2_12 & 0x7F7F7F7F<32>) + 0x7F7F7F7F<32> | (a2_12 | 0x7F7F7F7F<32>)) != -1<i32> l23071240
l23071240:
	a0 = a0 + 8<i32>
	a1 = a1 + 8<i32>
	branch a2_12 != a3_14 l2307120C
l2307124C:
	a1Out = a1
	a2Out = a2_12
	a3Out = a3_14
	a4Out = a4_5 & 3<i32>
	a5Out = 0x7F7F7F7F<32>
	return 0<i32>
l23071174:
	branch a2_12 != a3_14 l230711C0
l23071178:
	a2_12 = Mem0[a0 + 12<i32>:int32]
	a3_14 = Mem0[a1 + 12<i32>:int32]
	branch ((a2_12 & 0x7F7F7F7F<32>) + 0x7F7F7F7F<32> | (a2_12 | 0x7F7F7F7F<32>)) != -1<i32> l23071254
l23071254:
	a0 = a0 + 12<i32>
	a1 = a1 + 12<i32>
	branch a2_12 != a3_14 l2307120C
l23071260:
	a1Out = a1
	a2Out = a2_12
	a3Out = a3_14
	a4Out = a4_5 & 3<i32>
	a5Out = 0x7F7F7F7F<32>
	return 0<i32>
l23071194:
	branch a2_12 != a3_14 l230711C0
l23071198:
	a2_12 = Mem0[a0 + 16<i32>:int32]
	a3_14 = Mem0[a1 + 16<i32>:int32]
	branch ((a2_12 & 0x7F7F7F7F<32>) + 0x7F7F7F7F<32> | (a2_12 | 0x7F7F7F7F<32>)) != -1<i32> l23071268
l23071268:
	a0 = a0 + 16<i32>
	a1 = a1 + 16<i32>
	branch a2_12 != a3_14 l2307120C
l2307120C:
	word32 a2_60 = CONVERT(Mem0[a0:byte], byte, word32)
	word32 a3_62 = CONVERT(Mem0[a1:byte], byte, word32)
	a0 = a0 + 1<i32>
	a1 = a1 + 1<i32>
	branch a2_60 != a3_62 l23071224
l23071220:
	branch a2_60 != 0<32> l2307120C
l23071224:
	a1Out = a1
	a2Out = a2_60
	a3Out = a3_62
	a4Out = a4_5 & 3<i32>
	a5Out = a5
	return a2_60 - a3_62
l23071274:
	a1Out = a1
	a2Out = a2_12
	a3Out = a3_14
	a4Out = a4_5 & 3<i32>
	a5Out = 0x7F7F7F7F<32>
	return 0<i32>
l230711B4:
	a0 = a0 + 20<i32>
	a1 = a1 + 20<i32>
	branch a2_12 == a3_14 l23071118
l230711C0:
	word32 a5_76
	word32 a4_75
	word32 a1_78
	word32 a4_72 = a2_12 << 0x10<u32>
	word32 a5_74 = a3_14 << 0x10<u32>
	branch a4_72 != a5_74 l230711E4
l230711E4:
	word32 a0_77 = (a4_72 >>u 0x10<u32>) - (a5_74 >>u 0x10<u32>)
	a4_75 = a4_72 >>u 0x10<u32>
	a5_76 = a5_74 >>u 0x10<u32>
	a1_78 = a0_77 & 255<i32>
	branch (a0_77 & 255<i32>) != 0<32> l230711FC
l230711F8:
	a1Out = a0_77 & 255<i32>
	a2Out = a2_12
	a3Out = a3_14
	a4Out = a4_72 >>u 0x10<u32>
	a5Out = a5_74 >>u 0x10<u32>
	return a0_77
l230711CC:
	a4_75 = a2_12 >>u 0x10<u32>
	a5_76 = a3_14 >>u 0x10<u32>
	word32 a0_81 = a4_75 - a5_76
	a1_78 = a0_81 & 255<i32>
	branch (a0_81 & 255<i32>) != 0<32> l230711FC
l230711FC:
	a1Out = a1_78
	a2Out = a2_12
	a3Out = a3_14
	word32 a4_84 = a4_75 & 255<i32>
	a4Out = a4_84
	word32 a5_86 = a5_76 & 255<i32>
	a5Out = a5_86
	return a4_84 - a5_86
l230711E0:
	a1Out = a0_81 & 255<i32>
	a2Out = a2_12
	a3Out = a3_14
	a4Out = a4_75
	a5Out = a5_76
	return a0_81
strcmp_exit:


word32 strcpy(word32 a0, word32 a1, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      cmd_blog_info_dump
//      ps_cmd
//      aos_cli_printf
//      vTaskList
//      bl_chip_memory_ram
//      tcpclient_cmd
//      ipus_test_cmd
//      ipu_test_cmd
//      ipc_test_cmd
//      ips_test_cmd
//      bl_mtd_info
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a1 a4 a5
// Trashed: a1 a4 a5
// Preserved: a2 a3 a6 sp
strcpy_entry:
l2307127C:
	branch ((a0 | a1) & 3<i32>) != 0<32> l23071308
l23071308:
	word32 a5_11 = a0
l2307130C:
	word32 a4_10 = CONVERT(Mem9[a1:byte], byte, word32)
	a5_11 = a5_11 + 1<i32>
	Mem14[a5_11 + 4095<i32>:byte] = SLICE(a4_10, byte, 0)
	a1 = a1 + 1<i32>
	branch a4_10 != 0<32> l2307130C
l23071320:
	a4Out = a4_10
	a5Out = a5_11
	return a1
l23071288:
	word32 a2_24
	word32 a4_16 = Mem0[a1:int32]
	branch ((a4_16 & 0x7F7F7F7F<32>) + 0x7F7F7F7F<32> | a4_16 | 0x7F7F7F7F<32>) != -1<i32> l23071324
l23071324:
	a2_24 = a0
l230712AC:
	a2_24 = a0
l230712B4:
	a2_24 = a2_24 + 4<i32>
	Mem32[a2_24 + 4092<i32>:word32] = a4_16
	a1 = a1 + 4<i32>
	a4_16 = Mem32[a1:int32]
	branch ((a4_16 & 0x7F7F7F7F<32>) + 0x7F7F7F7F<32> | a4_16 | 0x7F7F7F7F<32>) == -1<i32> l230712B4
l230712D8:
	word32 a5_42 = CONVERT(Mem41[a1:byte], byte, word32)
	word32 a4_43 = CONVERT(Mem41[a1 + 1<i32>:byte], byte, word32)
	word32 a3_44 = CONVERT(Mem41[a1 + 2<i32>:byte], byte, word32)
	Mem46[a2_24:byte] = SLICE(a5_42, byte, 0)
	branch a5_42 == 0<32> l230712FC
l230712EC:
	Mem47[a2_24 + 1<i32>:byte] = SLICE(a4_43, byte, 0)
	branch a4_43 == 0<32> l230712FC
l230712F4:
	Mem48[a2_24 + 2<i32>:byte] = SLICE(a3_44, byte, 0)
	branch a3_44 != 0<32> l23071300
l23071300:
	Mem49[a2_24 + 3<i32>:byte] = 0<8>
	a4Out = a4_43
	a5Out = a5_42
	return a1
l230712FC:
	a4Out = a4_43
	a5Out = a5_42
	return a1
strcpy_exit:


word32 strlen(word32 a0, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      event_cb_wifi_event
//      aws_main_entry
//      mm_sta_add
//      set_psk
//      pmkCacheFindPSK
//      KeyMgmtInit
//      GenerateGTK_internal
//      cm_SetComData
//      ap_setpsk
//      InitializeAp
//      bl_send_apm_start_req
//      stateGlobalGuard_scan_beacon
//      wifi_mgmr_api_ap_start
//      wifi_ap_sta_delete_cmd
//      wifi_mgmr_sta_ssid_set
//      wifi_mgmr_sta_psk_set
//      wifi_mgmr_sta_connect
//      fdt_get_name
//      fdt_subnode_offset
//      fdt_getprop
//      utilfdt_print_data
//      tc_blfdtdump
//      cmd_blog_info_dump
//      cmd_blog_set_level
//      cli_putstr
//      ps_cmd
//      aos_cli_printf
//      ls_cmd
//      cli_main_input
//      find_env_cb
//      find_env
//      del_env
//      create_env_blob
//      ef_get_env_blob
//      ef_del_env
//      ef_set_env
//      psm_erase_cmd
//      vTaskList
//      hal_board_cfg
//      httpc_create_request_string.constprop.6
//      lwip_getaddrinfo
//      dns_check_entry
//      dns_gethostbyname
//      dhcp_option_hostname.isra.0
//      tcpclient_cmd
//      ipus_test_cmd
//      ipu_test_cmd
//      ipc_test_cmd
//      ips_test_cmd
//      romfs_ioctl
//      romfs_read
//      file_info
//      dirent_file
//      romfs_opendir
//      romfs_open
//      romfs_register
//      Bl_F_fast.constprop.0
//      utils_wifi_psk_cal_fast_bin
//      aos_open
//      inode_open
//      inode_reserve
//      aws_iot_shadow_connect
//      aws_iot_shadow_update
//      aws_iot_shadow_add_reported
//      aws_iot_finalize_json_document
//      unsubscribeFromAcceptedAndRejected
//      registerJsonTokenOnDelta
//      subscribeToShadowActionAcks
//      publishToShadowAction
//      jsoneq
//      aws_iot_mqtt_set_connect_params
//      iot_tls_connect
//      Default_Handler
//      Bl_F
//      bl60x_fw_password_hash
//      mbedtls_pk_parse_keyfile
//      tls_prf_sha256
//      mbedtls_ssl_set_hostname
//      mbedtls_ssl_conf_alpn_protocols
//      mbedtls_ssl_free
//      x509_check_wildcard
//      mbedtls_x509_crt_verify_with_profile
//      mbedtls_pem_read_buffer
//      mbedtls_ssl_handshake_client_step
//      mbedtls_ssl_handshake_server_step
//      strstr
// MayUse:  a0:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: sp
strlen_entry:
l2307132C:
	word32 a4_17 = a0
	branch (a0 & 3<i32>) != 0<32> l2307138C
l2307138C:
	a4_17 = a4_17 + 1<i32>
	word32 a5_8 = CONVERT(Mem0[a4_17:byte], byte, word32)
	branch a5_8 != 0<32> l23071388
l23071388:
	branch (a4_17 & 3<i32>) == 0<32> l23071338
l2307139C:
	a1Out = a1
	a2Out = a2
	a3Out = a4_17 & 3<i32>
	word32 a4_12 = a4_17 - a0
	a4Out = a4_12
	a5Out = a5_8
	return a4_12 + -1<i32>
l23071338:
l23071344:
	a4_17 = a4_17 + 4<i32>
	word32 a2_20 = Mem0[a4_17 + -4<i32>:int32]
	branch ((a2_20 & 0x7F7F7F7F<32>) + 0x7F7F7F7F<32> | a2_20 | 0x7F7F7F7F<32>) == -1<i32> l23071344
l23071360:
	word32 a3_27 = CONVERT(Mem0[a4_17 + -4<i32>:byte], byte, word32)
	word32 a5_30 = a4_17 - a0
	word32 a2_31 = CONVERT(Mem0[a4_17 + -3<i32>:byte], byte, word32)
	word32 a0_32 = CONVERT(Mem0[a4_17 + -2<i32>:byte], byte, word32)
	branch a3_27 == 0<32> l230713B0
l230713B0:
	a1Out = -1<i32>
	a2Out = a2_31
	a3Out = a3_27
	a4Out = a4_17
	a5Out = a5_30
	return a5_30 + -4<i32>
l23071374:
	branch a2_31 == 0<32> l230713A8
l230713A8:
	a1Out = -1<i32>
	a2Out = a2_31
	a3Out = a3_27
	a4Out = a4_17
	a5Out = a5_30
	return a5_30 + -3<i32>
l23071378:
	a1Out = -1<i32>
	a2Out = a2_31
	a3Out = a3_27
	a4Out = a4_17
	a5Out = a5_30
	return CONVERT(a0_32 != 0<32>, bool, word32) + a5_30 + -2<i32>
strlen_exit:


word32 strncmp(word32 a0, word32 a1, word32 a2, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      proc_onecmd
//      cli_main_input
//      find_env_cb
//      find_env
//      romfs_open
//      inode_open
//      jsoneq
//      parseBooleanValue
//      aws_iot_mqtt_internal_cycle_read
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1 t3
// Preserved: sp
strncmp_entry:
l230713B8:
	branch a2 == 0<32> l2307148C
l230713BC:
	word32 a5_6 = a0 | a1
	a5 = a5_6 & 3<i32>
	branch (a5_6 & 3<i32>) != 0<32> l23071444
l230713C8:
	a5 = 3<i32>
	branch a2 <=u 3<i32> l23071444
l230713D0:
	a5 = Mem0[a0:int32]
	a4 = Mem0[a1:int32]
	branch a5 != a4 l23071494
l230713DC:
	a2 = a2 + -4<i32>
	branch a2 == 0xFFFFFFFC<32> l2307148C
l230713E4:
	word32 a5_18 = a5 + 0xFEFEFEFF<32> & ~a5
	a4 = a5 + 0xFEFEFEFF<32>
	a5 = a5_18 & 0x80808080<32>
	branch (a5_18 & 0x80808080<32>) != 0<32> l2307148C
l23071408:
l23071438:
	a0 = a0 + 4<i32>
	a1 = a1 + 4<i32>
	branch a2 >u 3<i32> l23071410
l23071410:
	a4 = Mem0[a0:int32]
	word32 a5_34 = a4 + 0xFEFEFEFF<32> & ~a4
	a3 = Mem0[a1:int32]
	a5 = a5_34 & 0x80808080<32>
	branch a4 != a3 l23071494
l23071494:
	a4 = CONVERT(Mem0[a0:byte], byte, word32)
	a3 = CONVERT(Mem0[a1:byte], byte, word32)
	a2 = a2 + -1<i32>
	branch a3 == a4 l23071458
l230714A4:
l2307142C:
	a2 = a2 + -4<i32>
	branch a2 == 0<32> l2307148C
l23071434:
	branch (a5_34 & 0x80808080<32>) != 0<32> l2307148C
l23071444:
	a4 = CONVERT(Mem0[a0:byte], byte, word32)
	a3 = CONVERT(Mem0[a1:byte], byte, word32)
	a2 = a2 + -1<i32>
	branch a3 != a4 l23071484
l23071454:
	branch a2 == 0<32> l2307148C
l23071458:
	branch a4 == 0<32> l2307148C
l2307145C:
	a5 = a0 + 1<i32>
	a2 = a0 + a2
l23071474:
	a1 = a1 + 1<i32>
	a4 = CONVERT(Mem0[a5:byte], byte, word32)
	a3 = CONVERT(Mem0[a1:byte], byte, word32)
	branch a4 == a3 l23071468
l23071468:
	branch a2 == a5 l2307148C
l2307146C:
	a5 = a5 + 1<i32>
	branch a4 == 0<32> l2307148C
l2307148C:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5
	return 0<i32>
l23071484:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5
	return a4 - a3
strncmp_exit:


word32 strncpy(word32 a0, word32 a1, word32 a2, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      check_dts_config
//      event_cb_wifi_event
//      stateGlobalGuard_scan_beacon
//      wifi_mgmr_set_country_code_internal
//      cli_main_input
//      move_env
//      lwip_gethostbyname
//      romfs_readdir
//      aos_task_new
//      extractClientToken
//      topicNameFromThingAndAction
//      parseStringValue
//      bl_mtd_open
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a1 a3 a4 a5
// Trashed: a1 a2 a3 a4 a5 a6 a7 t1 t3
// Preserved: sp
strncpy_entry:
l230714A8:
	word32 a4_25
	word32 a5_5 = a1 | a0
	word32 a5_24 = a5_5 & 3<i32>
	branch (a5_5 & 3<i32>) != 0<32> l23071524
l23071524:
	a4_25 = a0
l230714B4:
	a5_24 = 3<i32>
	a4_25 = a0
	branch a2 >u 3<i32> l2307152C
l2307152C:
l23071540:
	a3 = Mem17[a1:int32]
	word32 a5_22 = a3 + 0xFEFEFEFF<32> & ~a3
	a5_24 = a5_22 & 0x80808080<32>
	branch (a5_22 & 0x80808080<32>) != 0<32> l230714C4
l23071558:
	a4_25 = a4_25 + 4<i32>
	Mem29[a4_25 + 4092<i32>:word32] = a3
	a2 = a2 + -4<i32>
	a1 = a1 + 4<i32>
	branch a2 >u 3<i32> l23071540
l2307156C:
l230714C0:
	branch a2 == 0<32> l23071520
l230714C4:
	word32 a6_46
	word32 a6_38 = CONVERT(Mem35[a1:byte], byte, word32)
	Mem44[a4_25:byte] = SLICE(a6_38, byte, 0)
	a3 = a2 + -1<i32>
	a1 = a1 + 1<i32>
	a5_24 = a4_25 + 1<i32>
	branch a6_38 == 0<32> l23071508
l23071508:
	a6_46 = a3
l230714DC:
	word32 a2_47 = a4_25 + a2
	a3 = a4_25 + a3
l230714F8:
	a1 = a1 + 1<i32>
	a6_46 = a3 - a5_24
	branch a5_24 != a2_47 l230714E8
l230714E8:
	a4_25 = CONVERT(Mem55[a1 + -1<i32>:byte], byte, word32)
	a5_24 = a5_24 + 1<i32>
	Mem58[a5_24 + 4095<i32>:byte] = SLICE(a4_25, byte, 0)
	branch a4_25 == 0<32> l2307150C
l2307150C:
	a4_25 = a5_24 + a6_46
	branch a6_46 == 0<32> l23071570
l23071570:
	a3Out = a3
	a4Out = a4_25
	a5Out = a5_24
	return a1
l23071514:
	a5_24 = a5_24 + 1<i32>
	Mem64[a5_24 + 4095<i32>:byte] = 0<8>
	branch a5_24 != a4_25 l23071514
l23071520:
	a3Out = a3
	a4Out = a4_25
	a5Out = a5_24
	return a1
l23071504:
	a3Out = a3
	a4Out = a4_25
	a5Out = a5_24
	return a1
strncpy_exit:


word32 strnlen(word32 a0, word32 a1, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fdt_stringlist_count
//      fdt_stringlist_get
//      flt
//      two_way_long_needle
//      strstr
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a0 a1 a3 a4 a5
// Trashed: a0 a1 a3 a4 a5
// Preserved: sp
strnlen_entry:
l23071574:
	branch a1 == 0<32> l2307159C
l23071578:
	a5 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5 == 0<32> l230715B0
l230715B0:
	a1 = 0<i32>
l23071580:
	a3 = a0 + a1
	a5 = a0
l23071594:
	a5 = a5 + 1<i32>
	branch a5 != a3 l2307158C
l2307158C:
	a4 = CONVERT(Mem0[a5:byte], byte, word32)
	branch a4 == 0<32> l230715A4
l230715A4:
	word32 a1_16 = a5 - a0
	a1Out = a1_16
	a3Out = a3
	a4Out = a4
	a5Out = a5
	return a1_16
l2307159C:
	a1Out = a1
	a3Out = a3
	a4Out = a4
	a5Out = a5
	return a1
strnlen_exit:


word32 strrchr(word32 a0, word32 a1, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fdt_get_name
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a0 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: ra s0 s1 sp
strrchr_entry:
l230715B8:
	branch a1 == 0<32> l2307160C
l2307160C:
l2307160C_thunk_strchr:
	word32 a5_8
	word32 a1_71
	word32 a2_72
	word32 a3_73
	word32 a4_74
	word32 a0_9 = strchr(a0, a1, out a1_71, out a2_72, out a3_73, out a4_74, out a5_8)
	a5Out = a5_8
	return a0_9
l230715BC:
	word32 a5_22 = a0
	word32 s1_23 = 0<i32>
l230715E4:
	word32 a5_31
	word32 a1_67
	word32 a2_68
	word32 a3_69
	word32 a4_70
	word32 a0_32 = strchr(a5_22, a1, out a1_67, out a2_68, out a3_69, out a4_70, out a5_31)
	branch a0_32 != 0<32> l230715DC
l230715DC:
	a5_22 = a0_32 + 1<i32>
	s1_23 = a0_32
l230715F4:
	a5Out = a5_31
	return s1_23
strrchr_exit:


word32 two_way_long_needle(word32 a0, word32 a1, word32 a2, word32 a3, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      strstr
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31]
// LiveOut: a0 a1 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7
// Preserved: ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 sp
two_way_long_needle_entry:
l23071610:
	word32 s10_221 = a1
	word32 s7_125 = 1<i32>
	word32 a3_39 = 1<i32>
	word32 a2_40 = 0<i32>
	word32 s11_41 = -1<i32>
l23071668:
	word32 a5_48 = a3_39 + a2_40
	word32 a4_46 = a2 + s11_41 + a3_39
	word32 a1_49 = a2 + a5_48
	branch a5_48 >=u a3 l230716A8
l2307167C:
	word32 a1_53 = CONVERT(Mem33[a1_49:byte], byte, word32)
	word32 a4_55 = CONVERT(Mem33[a4_46:byte], byte, word32)
	branch a1_53 >=u a4_55 l23071874
l23071874:
	branch a1_53 == a4_55 l23071900
l23071900:
	branch a3_39 == s7_125 l23071A5C
l23071A5C:
	a2_40 = a5_48
	a3_39 = 1<i32>
l23071904:
	a3_39 = a3_39 + 1<i32>
l23071878:
	s11_41 = a2_40
	s7_125 = 1<i32>
	a2_40 = a2_40 + 1<i32>
	a3_39 = 1<i32>
l23071688:
	a5_48 = a5_48 + 1<i32>
	a2_40 = a5_48
	a3_39 = 1<i32>
	s7_125 = a5_48 - s11_41
	a4_46 = a2 + s11_41 + 1<i32>
	a1_49 = a2 + a5_48
	branch a5_48 <u a3 l2307167C
l230716A8:
	word32 a7_103 = 1<i32>
	word32 a3_100 = 1<i32>
	word32 a2_101 = 0<i32>
	word32 a1_102 = -1<i32>
l230716B8:
	word32 a5_113 = a3_100 + a2_101
	word32 a4_112 = a2 + a1_102 + a3_100
	word32 a0_114 = a2 + a5_113
	branch a5_113 >=u a3 l230716F8
l230716CC:
	word32 a0_92 = CONVERT(Mem33[a0_114:byte], byte, word32)
	word32 a4_94 = CONVERT(Mem33[a4_112:byte], byte, word32)
	branch a4_94 >=u a0_92 l2307188C
l2307188C:
	branch a0_92 == a4_94 l2307190C
l2307190C:
	branch a3_100 == a7_103 l23071A50
l23071A50:
	a2_101 = a5_113
	a3_100 = 1<i32>
l23071910:
	a3_100 = a3_100 + 1<i32>
l23071890:
	a1_102 = a2_101
	a7_103 = 1<i32>
	a2_101 = a2_101 + 1<i32>
	a3_100 = 1<i32>
l230716D8:
	a5_113 = a5_113 + 1<i32>
	a2_101 = a5_113
	a3_100 = 1<i32>
	a7_103 = a5_113 - a1_102
	a4_112 = a2 + a1_102 + 1<i32>
	a0_114 = a2 + a5_113
	branch a5_113 <u a3 l230716CC
l230716F8:
	word32 a1_117 = a1_102 + 1<i32>
	word32 s11_122 = s11_41 + 1<i32>
	branch a1_117 <u s11_122 l2307170C
l23071704:
	s7_125 = a7_103
	s11_122 = a1_117
l2307170C:
	word32 a5_134 = fp + -1088<i32>
l23071714:
	Mem138[a5_134:word32] = a3
	a5_134 = a5_134 + 4<i32>
	branch fp + -64<i32> != a5_134 l23071714
l23071720:
	word32 a1_145 = a2 + a3
	word32 a4_146 = a2
	word32 a2_147 = a2 + (a3 + -1<i32>)
	branch a3 == 0<32> l23071754
l23071734:
	Mem158[fp + -64<i32> + (CONVERT(Mem149[a4_146:byte], byte, word32) << 2<u32>) + 3072<i32>:word32] = a2_147 - a4_146
	a4_146 = a4_146 + 1<i32>
	branch a4_146 != a1_145 l23071734
l23071754:
	word32 a4_1194
	word32 a5_1204
	word32 a0_1153
	word32 a4_1274
	word32 a2_1273
	word32 a5_1275
	word32 a3_1181
	word32 a1_1154
	branch memcmp(a2, a2 + s7_125, s11_122, out a1_1154, out a2_1273, out a3_1181, out a4_1274, out a5_1275) != 0<32> l23071918
l23071918:
	word32 s7_186 = a3 - s11_122
	branch s7_186 <u s11_122 l23071A48
l23071A48:
	s7_186 = s11_122
l23071920:
	word32 s5_189 = s11_122 + -1<i32>
	word32 a5_192 = a2 + s5_189
	word32 s7_196 = s7_186 + 1<i32>
	word32 s8_197 = 0<i32>
	word32 s6_202 = s11_122 + -2<i32>
	word32 s4_203 = 1<i32> - s11_122
l2307194C:
	a1_1154 = a0 + s8_197
	Mem211 = Mem201 (alias)
	word32 a5_217 = Mem211[fp + -64<i32> + (CONVERT(Mem211[a1_1154 + (a3 + -1<i32>):byte], byte, word32) << 2<u32>) + -1024<i32>:int32]
	branch a5_217 == 0<32> l230719B0
l2307196C:
	s8_197 = s8_197 + a5_217
l23071970:
	Mem239 = Mem201 (alias)
	branch s10_221 - a3 >=u s8_197 l2307194C
l23071978:
	word32 a5_1277
	s10_221 = s10_221 + strnlen(a0 + s10_221, a3 | 0x800<32>, out a1_1154, out a3_1181, out a4_1194, out a5_1277)
	a5_1204 = s10_221 - a3
	branch a5_1204 <u s8_197 l230717EC
l23071990:
	a1_1154 = a0 + s8_197
	a5_217 = Mem239[fp + -64<i32> + (CONVERT(Mem239[a1_1154 + (a3 + -1<i32>):byte], byte, word32) << 2<u32>) + -1024<i32>:int32]
	branch a5_217 != 0<32> l2307196C
l230719B0:
	a4_1194 = fp + -64<i32>
	Mem256 = Mem201 (alias)
	branch s11_122 >=u a3 + -1<i32> l230719F0
l230719B4:
	word32 a5_259 = s11_122
	branch CONVERT(Mem256[a1_1154 + s11_122:byte], byte, word32) == CONVERT(Mem256[a2 + s11_122:byte], byte, word32) l230719DC
l230719DC:
	a5_259 = a5_259 + 1<i32>
	word32 a2_265 = a2 + a5_259
	a4_1194 = a0 + (s8_197 + a5_259)
	branch a5_259 <u a3 + -1<i32> l230719D0
l230719D0:
	branch CONVERT(Mem256[a2_265:byte], byte, word32) != CONVERT(Mem256[a4_1194:byte], byte, word32) l23071A3C
l230719F0:
	a5_1204 = -1<i32>
	branch s5_189 == -1<i32> l23071A7C
l230719F8:
	branch CONVERT(Mem256[a1_1154 + s5_189:byte], byte, word32) != CONVERT(Mem256[a5_192:byte], byte, word32) l23071A34
l23071A0C:
	a5_1204 = a2 + s6_202
	a4_1194 = a0 + (s8_197 + s6_202)
l23071A1C:
	branch a5_1278 == a2 + -1<i32> l23071A7C
l23071A7C:
	a0_1153 = a1_1154
l23071A20:
	a5_1204 = a5_1278 + -1<i32>
	a4_1194 = a4_1279 + -1<i32>
	a5_1278 = a5_1204
	a4_1279 = a4_1194
	branch CONVERT(Mem256[a5_1278:byte], byte, word32) == CONVERT(Mem256[a4_1279:byte], byte, word32) l23071A1C
l23071A34:
	s8_197 = s8_197 + s7_196
l230719CC:
l23071A3C:
	a3_1181 = s4_203 + s8_197
	s8_197 = a3_1181 + a5_259
l23071768:
	word32 s5_332 = s11_122 + -1<i32>
	word32 a5_343 = a0 + s5_332
	word32 a5_347 = a2 + s5_332
	word32 s6_349 = 0<i32>
	word32 s8_350 = 0<i32>
	word32 s4_352 = 1<i32> - s11_122
l23071798:
	word32 a2_356 = a0 + s8_350
	a4_1194 = fp + -64<i32>
	a5_1204 = Mem351[fp + -64<i32> + (CONVERT(Mem351[a2_356 + (a3 + -1<i32>):byte], byte, word32) << 2<u32>) + -1024<i32>:int32]
	branch a5_1204 == 0<32> l2307182C
l2307182C:
	a5_1204 = s6_349
	branch s6_349 >=u s11_122 l23071838
l23071834:
	a5_1204 = s11_122
l23071838:
	branch a5_1204 >=u a3 + -1<i32> l230718A4
l2307183C:
	word32 a3_375 = a0 + a5_1204 + s8_350
	a4_1194 = a2 + a5_1204
l23071860:
	branch CONVERT(Mem351[a3_375:byte], byte, word32) == CONVERT(Mem351[a4_1194:byte], byte, word32) l2307184C
l2307184C:
	a5_1204 = a5_1204 + 1<i32>
	a3_375 = a2 + a5_1204
	a4_1194 = a0 + (a5_1204 + s8_350)
	branch a5_1204 >=u a3 + -1<i32> l230718A4
l230718A4:
	a3_1181 = s5_332
	branch s6_349 >=u s11_122 l23071A68
l230718AC:
	a4_1194 = CONVERT(Mem351[a5_343 + s8_350:byte], byte, word32)
	a5_1204 = CONVERT(Mem351[a5_347:byte], byte, word32)
	branch a4_1194 == a5_1204 l230718D8
l230718D8:
	a4_1194 = a3_1181 + -1<i32>
	a1_1154 = a2 + a4_1194
	a5_1204 = a0 + (a4_1194 + s8_350)
	branch s6_349 != a3_1181 l230718C8
l230718C8:
	a1_1154 = CONVERT(Mem351[a1_1154:byte], byte, word32)
	a5_1204 = CONVERT(Mem351[a5_1204:byte], byte, word32)
	branch a1_1154 != a5_1204 l230718EC
l230718D4:
	a3_1181 = a4_1194
l230718EC:
	branch a3_1181 <u s6_349 + 1<i32> l23071A74
l230718C4:
l23071A68:
	a3_1181 = s11_122
	branch s11_122 >=u s6_349 + 1<i32> l230718F4
l230718F4:
	s8_350 = s8_350 + s7_125
	s6_349 = a3 - s7_125
l23071A74:
	a0_1153 = a2_356
l2307186C:
	s8_350 = s4_352 + s8_350
l230717B8:
	branch s6_349 == 0<32> l230717C4
l230717BC:
	branch a5_1204 >=u s7_125 l230717C4
l230717C0:
	a5_1204 = a3 - s7_125
l230717C4:
	s8_350 = s8_350 + a5_1204
	s6_349 = 0<i32>
l230717CC:
	branch s10_221 - a3 >=u s8_350 l23071798
l230717D4:
	word32 a5_1276
	s10_221 = s10_221 + strnlen(a0 + s10_221, a3 | 0x800<32>, out a1_1154, out a3_1181, out a4_1194, out a5_1276)
	a5_1204 = s10_221 - a3
	branch a5_1204 >=u s8_350 l23071798
l230717EC:
	a0_1153 = 0<i32>
l230717F0:
	a1Out = a1_1154
	a3Out = a3_1181
	a4Out = a4_1194
	a5Out = a5_1204
	return a0_1153
two_way_long_needle_exit:


word32 strstr(word32 ra, word32 a0, word32 a1, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      cmd_blog_info_dump
//      ota_tcp_cmd
//      AckStatusCallback
//      mbedtls_pk_load_file
//      mbedtls_x509_crt_parse
//      mbedtls_pem_read_buffer
// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31]
// LiveOut: a0 a1 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1
// Preserved: ra s0 s1 s2 s3 s4 s5 sp
strstr_entry:
l23071A84:
	word32 a1_104 = CONVERT(Mem17[a1:byte], byte, word32)
	word32 s0_121 = a0
	branch a1_104 == 0<32> l23071BA8
l23071AB4:
	a3 = CONVERT(Mem17[a1 + 1<i32>:byte], byte, word32)
	branch a3 == 0<32> l23071C60
l23071C60:
	word32 a2_407
	s0_121 = strchr(a0, a1_104, out a1_104, out a2_407, out a3, out a4, out a5)
l23071ABC:
	word32 a2_34 = CONVERT(Mem17[a1 + 2<i32>:byte], byte, word32)
	branch a2_34 == 0<32> l23071BD0
l23071BD0:
	a5 = CONVERT(Mem17[a0:byte], byte, word32)
	a1_104 = a1_104 << 0x10<u32> | a3
	branch a5 == 0<32> l23071C58
l23071BE0:
	a3 = a0 + 1<i32>
	a4 = CONVERT(Mem17[a0 + 1<i32>:byte], byte, word32)
l23071BF0:
	a5 = a4 | a5 << 0x10<u32>
	branch a4 == 0<32> l23071C58
l23071BFC:
	word32 a2_45 = a3 + 1<i32>
	a4 = CONVERT(Mem17[a3 + 1<i32>:byte], byte, word32)
	branch a1_104 != a5 l23071BEC
l23071BEC:
	a3 = a2_45
l23071C08:
	s0_121 = a3 + -1<i32>
l23071AC4:
	a4 = CONVERT(Mem17[a1 + 3<i32>:byte], byte, word32)
	branch a4 == 0<32> l23071C6C
l23071C6C:
	a4 = CONVERT(Mem17[a0:byte], byte, word32)
	a1_104 = a3 << 0x10<u32>
	a5 = a1_104 << 0x18<u32> | a3 << 0x10<u32> | a2_34 << 8<u32>
	branch a4 == 0<32> l23071C58
l23071C88:
	a4 = a4 << 8<u32>
	word32 a2_59 = a0 + 1<i32>
	a3 = CONVERT(Mem17[a0 + 1<i32>:byte], byte, word32)
l23071C9C:
	word32 a4_63 = a3 | a4
	a4 = a4_63 << 8<u32>
	branch a3 == 0<32> l23071C58
l23071CA8:
	a1_104 = a2_59 + 1<i32>
	a3 = CONVERT(Mem17[a2_59 + 1<i32>:byte], byte, word32)
	branch a5 != a4_63 << 8<u32> l23071C98
l23071C98:
	a2_59 = a1_104
l23071CB4:
	s0_121 = a2_59 + -2<i32>
l23071ACC:
	branch CONVERT(Mem17[a1 + 4<i32>:byte], byte, word32) == 0<32> l23071C10
l23071C10:
	a1_104 = a1_104 << 0x18<u32>
	a3 = CONVERT(Mem17[a0:byte], byte, word32)
	a5 = a1_104 << 0x18<u32> | a3 << 0x10<u32> | a4 | a2_34 << 8<u32>
	branch a3 == 0<32> l23071C58
l23071C30:
	a4 = 0<i32>
l23071C40:
	a4 = a3 | a4 << 8<u32>
	a3 = CONVERT(Mem17[s0_121 + 1<i32>:byte], byte, word32)
	word32 a2_88 = s0_121 + 1<i32>
	branch a3 != 0<32> l23071C38
l23071C38:
	branch a5 == a4 l23071CE0
l23071C3C:
	s0_121 = a2_88
l23071C54:
	branch a5 == a4 l23071CE0
l23071CE0:
	s0_121 = s0_121 + -3<i32>
l23071AD4:
	word32 a3_410
	word32 a5_412
	word32 a1_408
	word32 a2_409
	word32 a4_411
	word32 a0_94 = strlen(a1, out a1_408, out a2_409, out a3_410, out a4_411, out a5_412)
	word32 a0_103 = strnlen(a0, a0_94 | 512<i32>, out a1_104, out a3, out a4, out a5)
	branch a0_103 <u a0_94 l23071C58
l23071AF0:
	branch a0_94 >u 254<i32> l23071CE8
l23071CE8:
	s0_121 = two_way_long_needle(a0, a0_103, a1, a0_94, out a1_104, out a3, out a4, out a5)
l23071AF8:
	word32 a4_416
	word32 a5_417
	word32 a0_414
	word32 a2_415
	word32 t1_413
	memset(ra, fp + -96<i32>, a0_94 + 1<i32>, 64<i32>, out t1_413, out a0_414, out a1_104, out a2_415, out a3, out a4_416, out a5_417)
	word32 s3_126 = a0 + (a0_103 - a0_94)
	branch a0_94 == 0<32> l23071B44
l23071B14:
	word32 a4_137 = a1
	a1_104 = a0_94 + a1
	word32 a2_139 = a1 + (a0_94 & 255<i32>)
l23071B24:
	a3 = a2_139 - a4_137
	Mem150[fp + -32<i32> + (CONVERT(Mem141[a4_137:byte], byte, word32) & 63<i32>) + 4032<i32>:byte] = SLICE(a3, byte, 0)
	a4_137 = a4_137 + 1<i32>
	branch a1_104 != a4_137 l23071B24
l23071B44:
l23071B4C:
	word32 s0_155 = s0_121 + -1<i32>
	a4 = fp + -32<i32>
	s0_121 = s0_155 + CONVERT(Mem231[((fp + -32<i32>) + (CONVERT(Mem231[s0_155 + a0_94:byte], byte, word32) & 63<i32>)) + -64<i32>:byte], byte, word32)
	branch s3_126 >=u s0_121 l23071B7C
l23071B7C:
	word32 s4_180 = CONVERT(Mem231[fp + -32<i32> + (CONVERT(Mem231[s0_121 + a0_94:byte], byte, word32) & 63<i32>) + -64<i32>:byte], byte, word32)
	word32 a2_418
	branch memcmp(s0_121, a1, a0_94, out a1_104, out a2_418, out a3, out a4, out a5) != 0<32> l23071B74
l23071B74:
	s0_121 = s0_121 + s4_180
	branch s3_126 <u s0_121 l23071CBC
l23071B70:
l23071CBC:
	word32 a0_191 = s3_126 + a0_94
	a5 = CONVERT(Mem231[a0_191:byte], byte, word32)
	branch a5 == 0<32> l23071C58
l23071C58:
	s0_121 = 0<i32>
l23071CC8:
	s3_126 = s3_126 + strnlen(a0_191, 0x800<32>, out a1_104, out a3, out a4, out a5)
	branch s3_126 >=u s0_121 l23071B4C
l23071CD8:
	s0_121 = 0<i32>
l23071BA8:
	a1Out = a1_104
	a3Out = a3
	a4Out = a4
	a5Out = a5
	return s0_121
strstr_exit:


word32 _strtol_l.isra.0(word32 a0, word32 a1, word32 a2, word32 a3, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _strtol_r
//      strtol_l
//      strtol
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31]
// LiveOut: a0 a1 a3 a4 a5
// Trashed: a0 a1 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: s0 s1 sp
_strtol_l.isra.0_entry:
l23071D04:
	word32 t1_11 = a1
l23071D28:
	word32 a4_125 = t1_11 + 1<i32>
	word32 a5_17 = CONVERT(Mem7[a4_125 + -1<i32>:byte], byte, word32)
	branch (CONVERT(Mem7[0x2308DC6D<p32> + a5_17:byte], byte, word32) & 8<i32>) != 0<32> l23071D24
l23071D24:
	t1_11 = a4_125
l23071D40:
	word32 a6_183
	word32 t6_46
	word32 s0_25
	branch a5_17 == 45<i32> l23071E54
l23071E54:
	a6_183 = CONVERT(Mem7[a4_125:byte], byte, word32)
	s0_25 = 1<i32>
	a4_125 = t1_11 + 2<i32>
l23071D48:
	branch a5_17 == 43<i32> l23071DD0
l23071DD0:
	a6_183 = CONVERT(Mem7[a4_125:byte], byte, word32)
	s0_25 = 0<i32>
	a4_125 = t1_11 + 2<i32>
	branch a3 != 0<32> l23071D5C
l23071D50:
	a6_183 = a5_17
	s0_25 = 0<i32>
l23071D58:
	branch a3 == 0<32> l23071DE0
l23071DE0:
	branch a6_183 == 48<i32> l23071EA0
l23071EA0:
	branch (CONVERT(Mem7[a4_125:byte], byte, word32) & 223<i32>) == 88<i32> l23071E8C
l23071EB0:
	t6_46 = 8<i32>
	a3 = 8<i32>
l23071DE8:
	t6_46 = 10<i32>
	a3 = 10<i32>
l23071D5C:
	t6_46 = a3
	branch a3 == 16<i32> l23071E6C
l23071E6C:
	branch a6_183 != 48<i32> l23071E84
l23071E74:
	branch (CONVERT(Mem7[a4_125:byte], byte, word32) & 223<i32>) == 88<i32> l23071E8C
l23071E8C:
	a6_183 = CONVERT(Mem7[a4_125 + 1<i32>:byte], byte, word32)
	t6_46 = 16<i32>
	a4_125 = a4_125 + 2<i32>
	a3 = 16<i32>
l23071E84:
	t6_46 = 16<i32>
l23071D68:
	word32 t0_122 = 0x80000000<32>
	branch s0_25 != 0<32> l23071D74
l23071D70:
	t0_122 = 0x7FFFFFFF<32>
l23071D74:
	word32 s1_78 = t0_122 & t6_46
	word32 a7_158 = 0<i32>
	word32 a0_108 = 0<i32>
	word32 t4_84 = t0_122 >>u t6_46
l23071D90:
	word32 a5_166 = a6_183 + -48<i32>
	branch a5_166 <=u 9<i32> l23071DA4
l23071D98:
	branch a6_183 >u -90<i32> l23071DF4
l23071DF4:
	branch a6_183 >u -122<i32> l23071E04
l23071DFC:
	a5_166 = a6_183 + -87<i32>
	branch a5_166 < a3 l23071DA8
l23071DA0:
	a5_166 = a6_183 + -55<i32>
l23071DA4:
	branch a5_166 >= a3 l23071E04
l23071E04:
	word32 a5_100 = -1<i32>
	branch a7_158 == -1<i32> l23071E38
l23071E38:
	Mem104[a0:word32] = 34<i32>
	a5_100 = 34<i32>
	a0_108 = t0_122
	branch a2 == 0<32> l23071E20
l23071E0C:
	branch s0_25 == 0<32> l23071E14
l23071E10:
	a0_108 = 0<32> - a0_108
l23071E14:
	branch a2 == 0<32> l23071E20
l23071E18:
	branch a7_158 != 0<32> l23071E64
l23071E64:
	t0_122 = a0_108
l23071E48:
	a1 = a4_125 + -1<i32>
	a0_108 = t0_122
l23071E1C:
	Mem138[a2:word32] = a1
l23071E20:
	a1Out = a1
	a3Out = a3
	a4Out = a4_125
	a5Out = a5_100
	return a0_108
_strtol_l.isra.0_exit:
l23071DA8:
	branch a7_158 == -1<i32> l23071DC4
l23071DAC:
	a7_158 = -1<i32>
	branch t4_84 <u a0_108 l23071DC4
l23071DB4:
	branch t4_84 == a0_108 l23071E30
l23071E30:
	branch s1_78 < a5_166 l23071DC4
l23071E34:
l23071DB8:
	a7_158 = 1<i32>
	a0_108 = a5_166 + (t6_46 + a0_108)
l23071DC4:
	a4_125 = a4_125 + 1<i32>
	a6_183 = CONVERT(Mem7[a4_125 + -1<i32>:byte], byte, word32)


void _strtol_r(word32 a0, word32 a1, word32 a2, word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _atoi_r
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31]
// LiveOut:
// Trashed: a0 a1 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
_strtol_r_entry:
l23071EBC:
l23071EBC_thunk__strtol_l.isra.0:
	word32 a1_21
	word32 a3_22
	word32 a4_23
	word32 a5_24
	_strtol_l.isra.0(a0, a1, a2, a3, out a1_21, out a3_22, out a4_23, out a5_24)
	return
_strtol_r_exit:


void strtol_l(word32 a0, word32 a1, word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
strtol_l_entry:
l23071EC0:
	word32 a0_12 = Mem0[0x4200D994<p32>:int32]
l23071ED8_thunk__strtol_l.isra.0:
	word32 a1_27
	word32 a3_28
	word32 a4_29
	word32 a5_30
	_strtol_l.isra.0(a0_12, a0, a1, a2, out a1_27, out a3_28, out a4_29, out a5_30)
	return
strtol_l_exit:


word32 strtol(word32 a0, word32 a1, word32 a2, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mmem_cmd
//      pmem_cmd
//      atoi
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
strtol_entry:
l23071EDC:
	word32 a0_12 = Mem0[0x4200D994<p32>:int32]
l23071EF4_thunk__strtol_l.isra.0:
	word32 a3_14
	word32 a4_15
	word32 a5_16
	word32 a1_26
	word32 a0_13 = _strtol_l.isra.0(a0_12, a0, a1, a2, out a1_26, out a3_14, out a4_15, out a5_16)
	a1Out = a1_26
	a2Out = a1
	a3Out = a3_14
	a4Out = a4_15
	a5Out = a5_16
	return a0_13
strtol_exit:


void stat(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
stat_entry:
l23071EF8:
	word32 a0_10 = Mem0[0x4200D994<p32>:int32]
l23071F0C_thunk__stat_r:
	_stat_r(a0_10, a0, a1)
	return
stat_exit:


void _stat_r(word32 a0, word32 a1, word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      stat
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: ra s0 sp
_stat_r_entry:
l23071F10:
	Mem16[0x42020D50<p32>:word32] = 0<32>
	branch _stat(a1, a2) == -1<i32> l23071F50
l23071F50:
	word32 a5_35 = Mem16[0x4201FD50<p32>:int32]
	branch a5_35 == 0<32> l23071F40
l23071F60:
	Mem36[a0:word32] = a5_35
	return
l23071F40:
	return
_stat_r_exit:


word32 _stat(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _stat_r
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: ra s0 s1 sp
_stat_entry:
l23071F74:
	__syscall()
	word32 s0_19 = a0
	branch a0 < 0<32> l23071FD0
l23071FD0:
	word32 a5_55
	Mem23[__errno(out a5_55):word32] = 0<32> - a0
	s0_19 = -1<i32>
l23071FAC:
	_conv_stat(a1, fp + -144<i32>)
	return s0_19
_stat_exit:


void _conv_stat(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _stat
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: s0 s1 s2 sp
_conv_stat_entry:
l23071FE4:
	word32 t2_6 = Mem0[a1 + 20<i32>:int32]
	word32 t0_7 = Mem0[a1 + 24<i32>:int32]
	word32 t6_8 = Mem0[a1 + 28<i32>:int32]
	word32 t5_9 = Mem0[a1 + 32<i32>:int32]
	word32 t4_10 = Mem0[a1 + 48<i32>:int32]
	word32 t3_11 = Mem0[a1 + 64<i32>:int32]
	word32 t1_12 = Mem0[a1 + 56<i32>:int32]
	word32 a6_13 = Mem0[a1 + 72<i32>:int32]
	word32 a7_14 = Mem0[a1 + 76<i32>:int32]
	word32 a2_15 = Mem0[a1 + 88<i32>:int32]
	word32 s0_20 = Mem19[a1 + 16<i32>:int32]
	word32 s1_21 = Mem19[a1 + 8<i32>:int32]
	word32 a3_25 = Mem23[a1 + 92<i32>:int32]
	word32 a4_26 = Mem23[a1 + 104<i32>:int32]
	word32 a5_27 = Mem23[a1 + 108<i32>:int32]
	Mem29[a0:word16] = Mem23[a1:word16]
	Mem30[a0 + 2<i32>:word16] = SLICE(s1_21, word16, 0)
	Mem31[a0 + 4<i32>:word32] = s0_20
	Mem32[a0 + 8<i32>:word16] = SLICE(t2_6, word16, 0)
	Mem33[a0 + 10<i32>:word16] = SLICE(t0_7, word16, 0)
	Mem34[a0 + 12<i32>:word16] = SLICE(t6_8, word16, 0)
	Mem35[a0 + 14<i32>:word16] = SLICE(t5_9, word16, 0)
	Mem36[a0 + 16<i32>:word32] = t4_10
	Mem37[a0 + 72<i32>:word32] = t3_11
	Mem38[a0 + 68<i32>:word32] = t1_12
	Mem39[a0 + 24<i32>:word32] = a6_13
	Mem40[a0 + 28<i32>:word32] = a7_14
	Mem41[a0 + 40<i32>:word32] = a2_15
	Mem42[a0 + 44<i32>:word32] = a3_25
	Mem44[a0 + 56<i32>:word32] = a4_26
	Mem45[a0 + 60<i32>:word32] = a5_27
	return
_conv_stat_exit:


