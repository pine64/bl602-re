word32 mbedtls_aes_crypt_ecb(word32 a1, word32 a2, word32 a3, word32 dwArg2C, word32 dwArg0138, ptr32 & s1Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s9Out, ptr32 & s10Out, ptr32 & s11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      block_cipher_df
//      ctr_drbg_update_internal
//      mbedtls_ctr_drbg_random
//      mbedtls_aes_crypt_cbc
//      aes_crypt_ecb_wrap
// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] Stack +002C:[0..31] Stack +0138:[0..31]
// LiveOut: s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_aes_crypt_ecb_entry:
l230605E8:
	word32 s9_32
	word32 s8_31
	word32 s7_30
	word32 s6_29
	word32 s5_28
	word32 s4_27
	word32 s3_26
	word32 s2_25
	word32 s11_24
	word32 s10_23
	word32 s1_22
	word32 s0_21
	branch a1 != 1<32> l23060604
l23060604:
	s0_21 = mbedtls_aes_decrypt(a2, a3, a2, dwArg2C, dwArg0138, out s1_22, out s2_25, out s3_26, out s4_27, out s5_28, out s6_29, out s7_30, out s8_31, out s9_32, out s10_23, out s11_24)
l230605F6:
	word32 a3_117
	word32 a4_118
	word32 a5_119
	word32 a6_120
	s0_21 = mbedtls_aes_encrypt(a2, a3, 1<32>, dwArg2C, dwArg0138, out s1_22, out a3_117, out a4_118, out a5_119, out a6_120, out s2_25, out s3_26, out s4_27, out s5_28, out s6_29, out s7_30, out s8_31, out s9_32, out s10_23, out s11_24)
l230605FC:
	s1Out = s1_22
	s2Out = s2_25
	s3Out = s3_26
	s4Out = s4_27
	s5Out = s5_28
	s6Out = s6_29
	s7Out = s7_30
	s8Out = s8_31
	s9Out = s9_32
	s10Out = s10_23
	s11Out = s11_24
	return s0_21
mbedtls_aes_crypt_ecb_exit:


word32 mbedtls_aes_crypt_cbc(word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 dwArgF8, word32 dwArg0108, word32 dwArg0198, ptr32 & s1Out, ptr32 & a1Out, ptr32 & a4Out, ptr32 & s7Out, ptr32 & s9Out, ptr32 & s10Out, ptr32 & s11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      aes_crypt_cbc_wrap
//      pem_aes_decrypt
// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] Stack +00F8:[0..31] Stack +0108:[0..31] Stack +0198:[0..31]
// LiveOut: a1 a4 s0 s1 s10 s11 s7 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: s8 sp
mbedtls_aes_crypt_cbc_entry:
l2306060C:
	word32 s0_115 = a2 & 15<i32>
	branch (a2 & 15<i32>) != 0<32> l230606EC
l230606EC:
l23060628:
	word32 s4_121 = a5
	word32 s5_119 = a4
	s1 = a3
	word32 s2_117 = a2
	s7 = a1
	word32 s8_223 = 0x10<32>
	branch a1 != 0<32> l230606DC
l230606DC:
	a4 = s5_119 - s0_115
	word32 s3_45 = s4_121 - s0_115
	branch s2_117 + s0_115 != 0<32> l230606A2
l230606A2:
	word32 a3_46 = 0<32>
l230606A4:
	Mem59[s3_45 + a3_46:byte] = SLICE(CONVERT(Mem52[a4 + a3_46:byte], byte, word32) ^ CONVERT(Mem52[s1 + a3_46:byte], byte, word32), byte, 0)
	a3_46 = a3_46 + 1<32>
	branch a3_46 != s8_223 l230606A4
l230606C4:
	word32 s3_84
	word32 s6_421
	word32 s0_79 = mbedtls_aes_crypt_ecb(s7, s3_45, s3_45, dwLoc14, dwArgF8, out s1, out s2_117, out s3_84, out s4_121, out s5_119, out s6_421, out s7, out s8_223, out s9, out s10, out s11)
	word32 a2_422
	word32 a3_423
	word32 a4_424
	word32 a5_425
	word32 a6_426
	word32 a7_427
	memcpy(s1, s3_84, 0x10<32>, out a1, out a2_422, out a3_423, out a4_424, out a5_425, out a6_426, out a7_427)
	s0_115 = s0_79 + 0xFFFFFFF0<32>
l230606EA:
l23060638:
	s7 = s5_119 - s0_115
	word32 s3_122 = s4_121 - s0_115
	branch s0_115 + s2_117 != 0<32> l23060660
l23060660:
	word32 a5_128
	word32 a1_407
	word32 a2_408
	word32 a3_409
	word32 a4_410
	word32 a6_411
	word32 a7_412
	memcpy(fp + -64<i32>, s7, 0x10<32>, out a1_407, out a2_408, out a3_409, out a4_410, out a5_128, out a6_411, out a7_412)
	word32 s3_158
	word32 s6_413
	word32 s7_414
	word32 s8_415
	word32 s0_153 = mbedtls_aes_decrypt(s7, s3_122, a5_128, dwLoc04, dwArg0108, out s1, out s2_117, out s3_158, out s4_121, out s5_119, out s6_413, out s7_414, out s8_415, out s9, out s10, out s11)
	word32 a3_173 = 0<32>
l23060678:
	word32 a4_177 = s3_158 + a3_173
	Mem185[a4_177:byte] = SLICE(CONVERT(Mem180[s1 + a3_173:byte], byte, word32) ^ CONVERT(Mem180[a4_177:byte], byte, word32), byte, 0)
	a3_173 = a3_173 + 1<32>
	branch a3_173 != 0x10<32> l23060678
l23060694:
	word32 a2_416
	word32 a3_417
	word32 a5_418
	word32 a6_419
	word32 a7_420
	memcpy(s1, fp + -64<i32>, 0x10<32>, out a1, out a2_416, out a3_417, out a4, out a5_418, out a6_419, out a7_420)
	s0_115 = s0_153 + 0xFFFFFFF0<32>
l23060646:
l23060648:
	0<32> = dwArg0198
	s1Out = s1
	a1Out = a1
	a4Out = a4
	s7Out = s7
	s9Out = s9
	s10Out = s10
	s11Out = s11
	return dwArg0158
mbedtls_aes_crypt_cbc_exit:


void mbedtls_aes_crypt_cfb128(word32 s0, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 a6, word32 dwArg1C, word32 dwArgA8, word32 dwArg0128)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      aes_crypt_cfb128_wrap
// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] a6:[0..31] s0:[0..31] Stack +001C:[0..31] Stack +00A8:[0..31] Stack +0128:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_aes_crypt_cfb128_entry:
l230606F2:
	word32 s6_132 = a3
	word32 s2_109 = a4
	word32 s3_129 = a5
	word32 s1_125 = a6
	word32 s4_130 = a6 + a2
	branch a1 == 0<32> l23060770
l23060770:
	branch s1_125 != s4_130 l23060746
l23060746:
	branch s0 != 0<32> l23060752
l23060748:
	word32 a3_323
	word32 a4_324
	word32 a5_325
	word32 a6_326
	word32 s5_327
	word32 s7_328
	word32 s8_329
	word32 s9_330
	word32 s10_331
	word32 s11_332
	s0 = mbedtls_aes_encrypt(s2_109, s2_109, a4, dwArg1C, dwArg0128, out s1_125, out a3_323, out a4_324, out a5_325, out a6_326, out s2_109, out s3_129, out s4_130, out s5_327, out s6_132, out s7_328, out s8_329, out s9_330, out s10_331, out s11_332)
l23060752:
	s3_129 = s3_129 + 1<32>
	a4 = s2_109 + s0
	word32 a3_80 = CONVERT(Mem44[s3_129 + -1<i32>:byte], byte, word32)
	s1_125 = s1_125 + 1<32>
	Mem86[s1_125 + 4095<i32>:byte] = SLICE(CONVERT(Mem44[a4:byte], byte, word32) ^ a3_80, byte, 0)
	Mem87[a4:byte] = SLICE(a3_80, byte, 0)
	s0 = s0 + 1<32> & 0xF<32>
l23060716:
	branch s1_125 == s4_130 l23060774
l23060774:
	Mem97[s6_132:word32] = s0
	0<32> = dwArgA8
	return
mbedtls_aes_crypt_cfb128_exit:
l2306071A:
	branch s0 != 0<32> l23060726
l2306071C:
	word32 a3_313
	word32 a4_314
	word32 a5_315
	word32 a6_316
	word32 s5_317
	word32 s7_318
	word32 s8_319
	word32 s9_320
	word32 s10_321
	word32 s11_322
	s0 = mbedtls_aes_encrypt(s2_109, s2_109, a4, dwArg1C, dwArg0128, out s1_125, out a3_313, out a4_314, out a5_315, out a6_316, out s2_109, out s3_129, out s4_130, out s5_317, out s6_132, out s7_318, out s8_319, out s9_320, out s10_321, out s11_322)
l23060726:
	a4 = s2_109 + s0
	s3_129 = s3_129 + 1<32>
	s1_125 = s1_125 + 1<32>
	word32 a5_156 = CONVERT(Mem115[a4:byte], byte, word32) ^ CONVERT(Mem115[s3_129 + -1<i32>:byte], byte, word32)
	Mem157[s1_125 + 4095<i32>:byte] = SLICE(a5_156, byte, 0)
	Mem158[a4:byte] = SLICE(a5_156, byte, 0)
	s0 = s0 + 1<32> & 0xF<32>


void mbedtls_aes_crypt_ctr(word32 s0, word32 a1, word32 a3, word32 a4, word32 a5, word32 a6, word32 dwArg0C, word32 dwArg74, word32 dwArgB4, word32 dwArg0118, word32 dwArg0128)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      aes_crypt_ctr_wrap
// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] a6:[0..31] s0:[0..31] Stack +000C:[0..31] Stack +0074:[0..31] Stack +00B4:[0..31] Stack +0118:[0..31] Stack +0128:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_aes_crypt_ctr_entry:
l2306078E:
	word32 s1_100 = Mem15[s0:word32]
	word32 s2_111 = a6 + a1
l230607AA:
	branch a6 != s2_111 l230607C2
l230607C2:
	branch s0 != 0<32> l230607F8
l230607C4:
	word32 s4_54
	word32 s9_239
	word32 s10_240
	word32 s11_241
	word32 s8_238
	word32 s7_237
	word32 s6_236
	word32 s5_235
	word32 s3_234
	mbedtls_aes_encrypt(a3, a4, a4, dwArg0C, dwArg0118, out s1_100, out a3, out a4, out a5, out a6, out s2_111, out s3_234, out s4_54, out s5_235, out s6_236, out s7_237, out s8_238, out s9_239, out s10_240, out s11_241)
	0<32> = dwArg74
	s0 = dwArgB4
	word32 a1_71 = s4_54
l230607E0:
	word32 a2_76 = CONVERT(Mem73[a1_71:byte], byte, word32) + 1<32> & 255<i32>
	Mem77[a1_71:byte] = SLICE(a2_76, byte, 0)
	branch a2_76 != 0<32> l230607F8
l230607F0:
	word32 a2_78 = a1_71 + -1<i32>
	branch a3 != a1_71 l23060814
l23060814:
	a1_71 = a2_78
l230607F8:
	a5 = a5 + 1<32>
	a6 = a6 + 1<32>
	Mem98[a6 + 4095<i32>:byte] = SLICE(CONVERT(Mem89[a4 + s0:byte], byte, word32) ^ CONVERT(Mem89[a5 + -1<i32>:byte], byte, word32), byte, 0)
	s0 = s0 + 1<32> & 0xF<32>
l230607AE:
	Mem103[s0:word32] = s1_100
	0<32> = dwArg0128
	return
mbedtls_aes_crypt_ctr_exit:


word32 mbedtls_asn1_get_len(word32 a1, word32 a2, word32 a5, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_crt_parse_der
//      mbedtls_asn1_get_tag
//      mbedtls_asn1_get_alg
//      mbedtls_x509_get_serial
//      mbedtls_x509_get_name
// MayUse:  a1:[0..31] a2:[0..31] a5:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6
// Preserved: sp
mbedtls_asn1_get_len_entry:
l23060818:
	word32 a0_67
	word32 a0_5 = Mem0[a5:word32]
	word32 a3_31 = a1 - a5
	branch a3_31 <= 0<32> l2306084A
l23060822:
	word32 a4_8 = CONVERT(Mem0[a5:byte], byte, word32)
	branch CONVERT(SLICE(a4_8, byte, 0), byte, int32) < 0<32> l23060850
l23060850:
	word32 a0_24
	a4 = a4_8 & 127<i32>
	branch (a4_8 & 127<i32>) == 2<32> l230608B0
l230608B0:
	branch (a4_8 & 127<i32>) >= a3_31 l2306084A
l230608B4:
	word32 a5_16 = CONVERT(Mem0[a5 + 2<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem0[a5 + 1<i32>:byte], byte, word32)
	word32 a5_21 = CONVERT(SLICE(a5_16 >>u 8<i32> | a5_16 << 8<u32>, word16, 0), word16, word32)
	Mem23[a5_21:word32] = a2
	a4 = a5_16 << 8<u32>
	a0_24 = Mem23[a5_21:word32]
	a5 = a5_21 + 3<32>
l2306085A:
	branch (a4_8 & 127<i32>) >u 2<32> l2306086A
l2306086A:
	branch (a4_8 & 127<i32>) == 3<32> l230608D4
l230608D4:
	branch (a4_8 & 127<i32>) >= a3_31 l2306084A
l230608D8:
	word32 a3_28 = CONVERT(Mem0[a5 + 2<i32>:byte], byte, word32)
	a4 = CONVERT(Mem0[a5 + 1<i32>:byte], byte, word32) << 16<i32> | a3_28 << 8<i32>
	word32 a5_33 = CONVERT(Mem0[a5 + 3<i32>:byte], byte, word32) | a4
	Mem34[a5_33:word32] = a2
	a3_31 = a3_28 << 8<i32>
	a0_24 = Mem34[a5_33:word32]
	a5 = a5_33 + 4<32>
l23060870:
	branch (a4_8 & 127<i32>) != 4<32> l23060864
l23060876:
	branch (a4_8 & 127<i32>) >= a3_31 l2306084A
l2306087A:
	a3_31 = CONVERT(Mem0[a5 + 4<i32>:byte], byte, word32)
	a4 = CONVERT(Mem0[a5 + 1<i32>:byte], byte, word32) << 24<i32> | CONVERT(Mem0[a5 + 2<i32>:byte], byte, word32) << 16<i32> | a3_31
	word32 a5_47 = CONVERT(Mem0[a5 + 3<i32>:byte], byte, word32) << 8<i32> | a4
	Mem48[a5_47:word32] = a2
	a0_24 = Mem48[a5_47:word32]
	a5 = a5_47 + 5<32>
l2306085E:
	branch (a4_8 & 127<i32>) == 1<32> l2306089E
l2306089E:
	branch a3_31 == (a4_8 & 127<i32>) l2306084A
l230608A2:
	word32 a5_52 = CONVERT(Mem0[a5 + 1<i32>:byte], byte, word32)
	Mem53[a5_52:word32] = a2
	a0_24 = Mem53[a5_52:word32]
	a5 = a5_52 + 2<32>
l230608AC:
	Mem58[a5:word32] = a0_24
l23060864:
	a1Out = a1
	a2Out = a2
	a3Out = a3_31
	a4Out = a4_8 & 127<i32>
	a5Out = a5
	return -100<i32>
l23060832:
	Mem61[a5 + 1<i32>:word32] = a0_5
	a5 = CONVERT(Mem61[a5:byte], byte, word32)
	Mem63[a5:word32] = a2
	a4 = a5 + 1<i32>
l2306083E:
	a0_67 = 0<32>
	a1 = a1 - a5
	a2 = Mem65[a5:word32]
	branch a1 >=u a5 l2306084E
l2306084A:
	a0_67 = -96<i32>
l2306084E:
	a1Out = a1
	a2Out = a2
	a3Out = a3_31
	a4Out = a4
	a5Out = a5
	return a0_67
mbedtls_asn1_get_len_exit:


word32 mbedtls_asn1_get_tag(word32 a1, word32 a2, word32 a3, word32 a5, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pk_parse_key_pkcs1_der
//      pk_parse_key_sec1_der
//      pk_parse_key_pkcs8_unencrypted_der
//      mbedtls_pk_parse_subpubkey
//      mbedtls_rsa_pkcs1_verify
//      mbedtls_x509_crt_parse_der
//      mbedtls_asn1_get_bool
//      mbedtls_asn1_get_int
//      mbedtls_asn1_get_mpi
//      mbedtls_asn1_get_bitstring
//      mbedtls_asn1_get_bitstring_null
//      mbedtls_asn1_get_sequence_of
//      mbedtls_asn1_get_alg
//      mbedtls_x509_get_name
//      mbedtls_x509_get_ext
// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a5:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6
// Preserved: sp
mbedtls_asn1_get_tag_entry:
l230608F4:
	word32 a0_5 = Mem0[a5:word32]
	branch a1 - a5 <= 0<32> l2306090E
l2306090E:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5
	return -96<i32>
l230608FE:
	branch CONVERT(Mem0[a5:byte], byte, word32) != a3 l23060914
l23060914:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5
	return -98<i32>
l23060906:
	Mem13[a5 + 1<32>:word32] = a0_5
l2306090A_thunk_mbedtls_asn1_get_len:
	word32 a3_16
	word32 a1_17
	word32 a2_18
	word32 a4_19
	word32 a5_20
	word32 a0_15 = mbedtls_asn1_get_len(a1, a2, a5 + 1<32>, out a1_17, out a2_18, out a3_16, out a4_19, out a5_20)
	a1Out = a1_17
	a2Out = a2_18
	a3Out = a3_16
	a4Out = a4_19
	a5Out = a5_20
	return a0_15
mbedtls_asn1_get_tag_exit:


word32 mbedtls_asn1_get_bool(word32 a1, word32 a2, word32 a5, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_crt_parse_der
// MayUse:  a1:[0..31] a2:[0..31] a5:[0..31]
// LiveOut: a0 a1 a5 s0 s1
// Trashed: a0 a1 a2 a3 a4 a5 a6 s0 s1 s4 s8 t3
// Preserved: sp
mbedtls_asn1_get_bool_entry:
l2306091A:
	word32 s0_15 = a0
	word32 a1_20
	word32 a4_23
	word32 a2_64
	word32 a3_65
	word32 a5_24
	word32 a0_18 = mbedtls_asn1_get_tag(a1, fp + 0xFFFFFFEC<32>, 1<32>, a5, out a1_20, out a2_64, out a3_65, out a4_23, out a5_24)
	branch a0_18 != 0<32> l2306094A
l23060930:
	a5_24 = 1<32>
	branch a4_23 != 1<32> l23060954
l23060954:
	a0_18 = -100<i32>
l23060938:
	word32 a5_30 = CONVERT(CONVERT(Mem13[1<32>:byte], byte, word32) != 0<32>, bool, word32)
	Mem31[a5_30:word32] = a2
	s0_15 = Mem31[a5_30:word32]
	Mem34[a5_30 + 1<32>:word32] = s0_15
	a5_24 = a5_30 + 1<32>
l2306094A:
	s1Out = a2
	a0Out = a0_18
	a1Out = a1_20
	a5Out = a5_24
	return s0_15
mbedtls_asn1_get_bool_exit:


word32 mbedtls_asn1_get_int(word32 a1, word32 a2, word32 a5, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pk_parse_key_pkcs1_der
//      pk_parse_key_sec1_der
//      pk_parse_key_pkcs8_unencrypted_der
//      mbedtls_x509_crt_parse_der
// MayUse:  a1:[0..31] a2:[0..31] a5:[0..31]
// LiveOut: a0 a1 a3 a4 a5 s0 s1
// Trashed: a0 a1 a2 a3 a4 a5 a6 s0 s1 s4 s8 t3
// Preserved: sp
mbedtls_asn1_get_int_entry:
l2306095A:
	word32 s1_39 = a2
	word32 s0_15 = a0
	word32 a1_20
	word32 a3_22
	word32 a2_102
	word32 a4_23
	word32 a5_24
	word32 a0_18 = mbedtls_asn1_get_tag(a1, fp + 0xFFFFFFEC<32>, 2<32>, a5, out a1_20, out a2_102, out a3_22, out a4_23, out a5_24)
	branch a0_18 != 0<32> l23060992
l23060970:
	a4_23 = 3<32>
	a5_24 = a5_24 + 0xFFFFFFFF<32>
	branch a5_24 >u 0xFFFFFFFC<32> l230609B2
l2306097A:
	s0_15 = Mem13[a5_24 + 0xFFFFFFFF<32>:word32]
	a5_24 = CONVERT(Mem13[a5_24 + 0xFFFFFFFF<32>:int8], int8, int32)
	branch a5_24 < 0<32> l230609B2
l230609B2:
	a0_18 = -100<i32>
l23060984:
	Mem31[a2:word32] = 0<32>
l23060988:
	a4_23 = a5_24 + -1<i32>
	branch a5_24 != 0<32> l2306099C
l2306099C:
	s1_39 = Mem37[a5_24:word32]
	word32 a5_42 = a5_24 << 8<i32> | CONVERT(Mem37[a4_23:byte], byte, word32)
	Mem43[a5_42:word32] = s1_39
	s0_15 = Mem43[a5_42:word32]
	Mem46[a5_42 + 1<32>:word32] = s0_15
	a5_24 = a5_42 + 1<32>
l23060992:
	s1Out = s1_39
	a0Out = a0_18
	a1Out = a1_20
	a3Out = a3_22
	a4Out = a4_23
	a5Out = a5_24
	return s0_15
mbedtls_asn1_get_int_exit:


word32 mbedtls_asn1_get_mpi(word32 ra, word32 a1, word32 a5, word32 mstatus, word32 dwArg64, word32 dwArgB8, word32 dwArgC8, word32 dwArgF8, word32 dwArg0108, word32 dwArg0138, word32 dwArg0148, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pk_parse_key_pkcs1_der
//      mbedtls_pk_parse_subpubkey
// MayUse:  a1:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] Stack +0064:[0..31] Stack +00B8:[0..31] Stack +00C8:[0..31] Stack +00F8:[0..31] Stack +0108:[0..31] Stack +0138:[0..31] Stack +0148:[0..31]
// LiveOut: a0 a1 a2 a4 a5 ra s0 s1 s2 s3 s4
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_asn1_get_mpi_entry:
l230609B8:
	word32 s1_39 = a2
	word32 s0_15 = a0
	word32 a3_22
	word32 a2_21
	word32 a1_20
	word32 a4_23
	word32 a5_24
	word32 a0_18 = mbedtls_asn1_get_tag(a1, fp + 0xFFFFFFEC<32>, 2<32>, a5, out a1_20, out a2_21, out a3_22, out a4_23, out a5_24)
	branch a0_18 != 0<32> l230609E0
l230609CE:
	word32 a5_34
	word32 s0_118
	word32 a2_119
	word32 a3_120
	word32 a7_121
	word32 s4_122
	word32 s8_123
	ra = mbedtls_mpi_read_binary(ra, a1_20, dwArg64, a3_22, a4_23, mstatus, dwLoc18, dwLoc08, dwArgB8, dwArgC8, dwArgF8, dwArg0108, dwArg0138, dwArg0148, out s0_118, out s1_39, out a0_18, out a1_20, out a2_119, out a3_120, out a4_23, out a5_34, out a7_121, out s2, out s3, out s4_122, out s8_123)
	s0_15 = Mem13[a5_34:word32]
	a5_24 = a5_34 + a4_23
	Mem54[a5_24:word32] = s0_15
	a2_21 = dwArgA4
l230609E0:
	s0Out = s0_15
	s1Out = s1_39
	a0Out = a0_18
	a1Out = a1_20
	a2Out = a2_21
	a4Out = a4_23
	a5Out = a5_24
	s2Out = s2
	s3Out = s3
	s4Out = dwArg04
	return ra
mbedtls_asn1_get_mpi_exit:


word32 mbedtls_asn1_get_bitstring(word32 a1, word32 a2, word32 a5, word32 dwArg38, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_crt_parse_der
// MayUse:  a1:[0..31] a2:[0..31] a5:[0..31] Stack +0038:[0..31]
// LiveOut: a0 a1 a2 a4 a5 s1 s2
// Trashed: a0 a1 a2 a3 a4 a5 a6 s1 s2 tp
// Preserved: s0 sp
mbedtls_asn1_get_bitstring_entry:
l230609EA:
	word32 s1_14 = a0
	word32 a1_22
	word32 a2_75
	word32 a3_76
	word32 a4_25
	word32 a5_26
	word32 a0_20 = mbedtls_asn1_get_tag(a1, a2, 3<32>, a5, out a1_22, out a2_75, out a3_76, out a4_25, out a5_26)
	branch a0_20 != 0<32> l23060A30
l23060A02:
	word32 s0_27 = Mem12[a5_26:word32]
	branch a5_26 == 0<32> l23060A3C
l23060A3C:
	a0_20 = -96<i32>
l23060A06:
	Mem30[a5_26 + 0xFFFFFFFF<32>:word32] = s0_27
	s1_14 = Mem30[a5_26 + 0xFFFFFFFF<32>:word32]
	a5_26 = CONVERT(Mem30[a5_26 + 0xFFFFFFFF<32>:byte], byte, word32)
	Mem34[s0_27 + 4<i32>:byte] = SLICE(a5_26, byte, 0)
	a4_25 = 7<32>
	branch a5_26 >u 7<32> l23060A42
l23060A42:
	a0_20 = -100<i32>
l23060A1A:
	s1_14 = Mem34[a5_26:word32]
	Mem38[a5_26 + 1<32>:word32] = s1_14
	Mem40[a5_26 + 9<32>:word32] = Mem38[7<32>:word32]
	Mem42[a5_26 + 8<32>:word32] = s1_14
	a5_26 = a5_26 + 8<32>
	branch a5_26 + 8<32> == a1 l23060A30
l23060A2C:
	a0_20 = -102<i32>
l23060A30:
	0<32> = dwArg38
	a0Out = a0_20
	a1Out = a1_22
	a2Out = dwArg10
	a4Out = a4_25
	a5Out = a5_26
	s2Out = a1
	return s1_14
mbedtls_asn1_get_bitstring_exit:


word32 mbedtls_asn1_get_bitstring_null(word32 a1, word32 a2, word32 a5, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pk_parse_key_sec1_der
//      mbedtls_pk_parse_subpubkey
//      mbedtls_x509_get_sig
// MayUse:  a1:[0..31] a2:[0..31] a5:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 s1
// Trashed: a0 a1 a2 a3 a4 a5 a6 s1 tp
// Preserved: s0 sp
mbedtls_asn1_get_bitstring_null_entry:
l23060A48:
	word32 s1_14 = a2
	word32 a1_19
	word32 a3_21
	word32 a2_71
	word32 a4_22
	word32 a5_23
	word32 a0_17 = mbedtls_asn1_get_tag(a1, a2, 3<32>, a5, out a1_19, out a2_71, out a3_21, out a4_22, out a5_23)
	branch a0_17 != 0<32> l23060A7C
l23060A5C:
	s1_14 = Mem10[a5_23:word32]
	Mem26[a5_23 + -1<i32>:word32] = s1_14
	a4_22 = 1<32>
	branch a5_23 <=u 1<32> l23060A78
l23060A6A:
	Mem30[a5_23 + 1<i32>:word32] = Mem26[a5_23:word32]
	a4_22 = a5_23 + 1<i32>
	a5_23 = CONVERT(Mem30[a5_23:byte], byte, word32)
	branch a5_23 == 0<32> l23060A7C
l23060A78:
	a0_17 = -104<i32>
l23060A7C:
	a0Out = a0_17
	a1Out = a1_19
	a2Out = dwArg10
	a3Out = a3_21
	a4Out = a4_22
	a5Out = a5_23
	return s1_14
mbedtls_asn1_get_bitstring_null_exit:


word32 mbedtls_asn1_get_sequence_of(word32 ra, word32 a1, word32 a2, word32 a3, word32 a5, word32 mstatus, word32 dwArgE8, word32 dwArg0128, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_crt_parse_der
// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] Stack +00E8:[0..31] Stack +0128:[0..31]
// LiveOut: a0 a1 a5 ra s1 s2 s5
// Trashed: a0 a1 a2 a3 a4 a5 a6 ra s0 s1 s2 s3 s4 s5 s8 t0 t1 t3 tp
// Preserved: sp
mbedtls_asn1_get_sequence_of_entry:
l23060A86:
	word32 a4_34
	word32 a2_212
	word32 a3_213
	word32 a1_170
	word32 a5_114
	word32 a0_29 = mbedtls_asn1_get_tag(a1, fp + -36<i32>, 48<i32>, a5, out a1_170, out a2_212, out a3_213, out a4_34, out a5_114)
	word32 s0_40 = a2
	word32 s4_11 = a3
	word32 s1_190 = a0
	word32 s3_116 = a1
	word32 s2_105 = a0_29
	branch a0_29 != 0<32> l23060B00
l23060AAC:
	s1_190 = Mem23[a5_114:word32]
	a5_114 = a5_114 + a4_34
	branch a1 == a5_114 l23060AEC
l23060AEC:
	s5 = s0_40 + 4<i32>
l23060AF0:
	s1_190 = Mem43[a5_114:word32]
	branch a5_114 <u s3_116 l23060ABC
l23060ABC:
	word32 a5_46 = CONVERT(Mem43[a5_114:byte], byte, word32)
	Mem52[a5_46:word32] = s0_40
	word32 a3_59
	word32 a4_60
	word32 a2_214
	word32 a0_55 = mbedtls_asn1_get_tag(s3_116, s5, s4_11, a5_46, out a1_170, out a2_214, out a3_59, out a4_60, out a5_114)
	branch a0_55 != 0<32> l23060B14
l23060B14:
	s2_105 = a0_55
l23060AD0:
	word32 s1_63 = Mem52[a5_114:word32]
	s0_40 = Mem52[a4_60 + 4<i32>:word32]
	Mem65[a5_114 + 8<i32>:word32] = s0_40
	a5_114 = a5_114 + a4_60
	Mem67[a5_114:word32] = s1_63
	branch a5_114 >=u s3_116 l23060AF0
l23060ADE:
	word32 s0_83
	word32 a2_215
	word32 a3_216
	word32 a4_217
	word32 s8_218
	ra = mycalloc(ra, s1_63, 1<32>, 0x10<32>, a3_59, a4_60, a5_114, mstatus, dwLoc10, dwLoc0C, dwArgE8, dwArg0128, out s0_83, out s1_190, out a1_170, out a2_215, out a3_216, out a4_217, out a5_114, out s2_105, out s3_116, out s4_11, out s8_218)
	Mem93[0xD<32>:word32] = s0_83
	s0_40 = 1<32>
	branch false l23060B18
l23060B18:
	s2_105 = -106<i32>
l23060AF6:
	Mem96[s0_40 + 12<i32>:word32] = 0<32>
	s1_190 = Mem96[a5_114:word32]
	branch a5_114 != s3_116 l23060AB6
l23060AB6:
	s2_105 = -102<i32>
l23060B00:
	0<32> = dwArg0128
	s1Out = s1_190
	a0Out = s2_105
	a1Out = a1_170
	a5Out = a5_114
	s2Out = s2_105
	s5Out = s5
	return ra
mbedtls_asn1_get_sequence_of_exit:


word32 mbedtls_asn1_get_alg(word32 a1, word32 a2, word32 a3, word32 a5, word32 dwArgB4, word32 dwArg0128, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pk_get_pk_alg
//      mbedtls_x509_get_alg
// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a5:[0..31] Stack +00B4:[0..31] Stack +0128:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 s1 s2 s3 s4
// Trashed: a0 a1 a2 a3 a4 a5 a6 s0 s1 s2 s3 s4 s8 t3 tp
// Preserved: sp
mbedtls_asn1_get_alg_entry:
l23060B1E:
	word32 a2_147
	word32 a5_130
	word32 a4_128
	word32 a3_126
	word32 a1_124
	word32 a0_27 = mbedtls_asn1_get_tag(a1, fp + -36<i32>, 48<i32>, a5, out a1_124, out a2_147, out a3_126, out a4_128, out a5_130)
	word32 s1_133 = a3
	word32 s3_134 = a1
	word32 s2_34 = a0_27
	branch a0_27 != 0<32> l23060B8C
l23060B42:
	word32 s0_35 = Mem21[a5_130:word32]
	s2_34 = -96<i32>
	s3_134 = a1 - a5_130
	branch s3_134 <= 0<32> l23060B8C
l23060B50:
	word32 a5_38 = CONVERT(Mem21[a5_130:byte], byte, word32)
	Mem40[a2:word32] = a5_38
	s3_134 = Mem40[s0_35:int32] + a5_38
	word32 a2_148
	word32 a0_46 = mbedtls_asn1_get_tag(s3_134, dwArgB4, 6<32>, a5_38, out a1_124, out a2_148, out a3_126, out a4_128, out a5_130)
	s2_34 = a0_46
	branch a0_46 != 0<32> l23060B8C
l23060B72:
	word32 s0_54 = Mem40[a5_130:word32]
	a4_128 = Mem40[a2 + 4<i32>:int32]
	Mem56[a2 + 8<i32>:word32] = a5_130
	word32 a5_57 = a5_130 + a4_128
	Mem58[a5_57:word32] = s0_54
	branch a5_57 != s3_134 l23060BA6
l23060BA6:
	word32 a5_59 = CONVERT(Mem58[a5_57:byte], byte, word32)
	Mem62[a5_59:word32] = a3
	Mem66[a5_59 + 1<32>:word32] = Mem62[a5_59:word32]
	word32 a2_149
	word32 a0_67 = mbedtls_asn1_get_len(s3_134, a3 + 4<i32>, a5_59 + 1<32>, out a1_124, out a2_149, out a3_126, out a4_128, out a5_130)
	branch a0_67 != 0<32> l23060BD4
l23060BD4:
	s2_34 = a0_67
l23060BC0:
	word32 s0_75 = Mem66[a5_130:word32]
	s1_133 = Mem66[a4_128 + 4<i32>:word32]
	Mem77[a5_130 + 8<i32>:word32] = s1_133
	a5_130 = a5_130 + a4_128
	Mem79[a5_130:word32] = s0_75
	branch a5_130 == s3_134 l23060B8C
l23060BCE:
	s2_34 = -102<i32>
l23060B84:
	a5_130 = a3 + 12<i32>
l23060B88:
	branch s1_133 != a3 + 12<i32> l23060B9E
l23060B9E:
	Mem84[s1_133:byte] = 0<8>
	s1_133 = s1_133 + 1<32>
l23060B8C:
	0<32> = dwArg0128
	a0Out = s2_34
	a1Out = a1_124
	a2Out = dwArg0100
	a3Out = a3_126
	a4Out = a4_128
	a5Out = a5_130
	s2Out = s2_34
	s3Out = s3_134
	s4Out = a2
	return s1_133
mbedtls_asn1_get_alg_exit:


word32 mpi_sub_hlp(word32 a0, word32 a1, word32 a2, word32 a4, ptr32 & a2Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a7Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mpi_montmul
//      mbedtls_mpi_sub_abs
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a4:[0..31]
// LiveOut: a2 a4 a5 a7 t1
// Trashed: a2 a3 a4 a5 a6 a7 t1
// Preserved: sp
mpi_sub_hlp_entry:
l23060BD8:
	word32 a5_16 = 0<32>
	word32 a7_15 = 0<32>
l23060BDE:
	word32 a6_8 = a7_15 << 2<u32>
	branch a7_15 != a0 l23060BEC
l23060BEC:
	word32 a3_12 = Mem11[a4:word32]
	word32 a4_18 = a4 - a5_16
	Mem19[a4_18:word32] = a3_12
	word32 a6_20 = Mem19[a6_8 + a1:int32]
	a4 = a4_18 - a6_20
	Mem24[a3_12 + 0x1000<32>:word32] = a4
	t1 = CONVERT(a4 <u a5_16, bool, word32)
	a7_15 = a7_15 + 1<32>
	a5_16 = CONVERT(a4_18 <u a6_20, bool, word32) + t1
l23060BE6:
	word32 a2_27 = a2 + a6_8
l23060BE8:
	branch a5_16 != 0<32> l23060C10
l23060C10:
	word32 a2_31 = Mem30[a4:word32]
	Mem34[a2_31 + 0x1000<32>:word32] = a4 - a5_16
	a2_27 = a2_31 + 4<32>
	a5_16 = CONVERT(a4 <u a5_16, bool, word32)
l23060BEA:
	a2Out = a2_27
	a4Out = a4
	a5Out = a5_16
	a7Out = a7_15
	return t1
mpi_sub_hlp_exit:


word32 mpi_mul_hlp(word32 a0, word32 a1, word32 a2, word32 a3, ptr32 & a2Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mpi_montmul
//      mbedtls_mpi_mul_mpi
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31]
// LiveOut: a1 a2 a4 a5
// Trashed: a0 a1 a2 a4 a5 a6 a7 t1 t3 t4 t5
// Preserved: sp
mpi_mul_hlp_entry:
l23060C22:
	word32 a4_11 = a2
	word32 a7_16 = a1
	word32 t1_15 = a0
	word32 a5_196 = 0<32>
l23060C2C:
	word32 a6_13 = Mem12[a4_11:int32]
	branch t1_15 >u 0xF<32> l23060D96
l23060D96:
	word32 t5_17 = Mem12[a7_16:int32]
	word32 t4_25 = a3 + t5_17 + a5_196
	a4_11 = a4_11 + 64<i32>
	word32 t4_27 = t4_25 + a6_13
	Mem28[a4_11 + 4032<i32>:word32] = t4_27
	a7_16 = a7_16 + 64<i32>
	word32 a5_31 = Mem28[a7_16 + -60<i32>:int32]
	word32 a6_32 = CONVERT(t4_27 <u a6_13, bool, word32) + CONVERT((a3 <u t5_17) + (t4_25 <u a5_196), bool, bool)
	word32 t4_35 = a3 + a5_31 + a6_32
	word32 a5_38 = Mem28[a4_11 + -60<i32>:int32]
	word32 t4_39 = t4_35 + a5_38
	Mem40[a4_11 + 4036<i32>:word32] = t4_39
	word32 a6_43 = Mem40[a7_16 + -56<i32>:int32]
	word32 a5_42 = CONVERT(t4_39 <u a5_38, bool, word32) + CONVERT((t4_35 <u a6_32) + (a3 <u a5_31), bool, bool)
	word32 t4_46 = a3 + a6_43 + a5_42
	word32 a6_49 = Mem40[a4_11 + -56<i32>:int32]
	word32 t4_50 = t4_46 + a6_49
	Mem51[a4_11 + 4040<i32>:word32] = t4_50
	word32 a5_54 = Mem51[a7_16 + -52<i32>:int32]
	word32 a6_53 = CONVERT(t4_50 <u a6_49, bool, word32) + CONVERT((t4_46 <u a5_42) + (a3 <u a6_43), bool, bool)
	word32 t4_57 = a3 + a5_54 + a6_53
	word32 a5_60 = Mem51[a4_11 + -52<i32>:int32]
	word32 t4_61 = t4_57 + a5_60
	Mem62[a4_11 + 4044<i32>:word32] = t4_61
	word32 a6_65 = Mem62[a7_16 + -48<i32>:int32]
	word32 a5_64 = CONVERT(t4_61 <u a5_60, bool, word32) + CONVERT((t4_57 <u a6_53) + (a3 <u a5_54), bool, bool)
	word32 t4_68 = a3 + a6_65 + a5_64
	word32 a6_71 = Mem62[a4_11 + -48<i32>:int32]
	word32 t4_72 = t4_68 + a6_71
	Mem73[a4_11 + 4048<i32>:word32] = t4_72
	word32 a5_76 = Mem73[a7_16 + -44<i32>:int32]
	word32 a6_75 = CONVERT(t4_72 <u a6_71, bool, word32) + CONVERT((t4_68 <u a5_64) + (a3 <u a6_65), bool, bool)
	word32 t4_79 = a3 + a5_76 + a6_75
	word32 a5_82 = Mem73[a4_11 + -44<i32>:int32]
	word32 t4_83 = t4_79 + a5_82
	Mem84[a4_11 + 4052<i32>:word32] = t4_83
	word32 a6_87 = Mem84[a7_16 + -40<i32>:int32]
	word32 a5_86 = CONVERT(t4_83 <u a5_82, bool, word32) + CONVERT((t4_79 <u a6_75) + (a3 <u a5_76), bool, bool)
	word32 t4_90 = a3 + a6_87 + a5_86
	word32 a6_93 = Mem84[a4_11 + -40<i32>:int32]
	word32 t4_94 = t4_90 + a6_93
	Mem95[a4_11 + 4056<i32>:word32] = t4_94
	word32 a5_98 = Mem95[a7_16 + -36<i32>:int32]
	word32 a6_97 = CONVERT(t4_94 <u a6_93, bool, word32) + CONVERT((t4_90 <u a5_86) + (a3 <u a6_87), bool, bool)
	word32 t4_101 = a3 + a5_98 + a6_97
	word32 a5_104 = Mem95[a4_11 + -36<i32>:int32]
	word32 t4_105 = t4_101 + a5_104
	Mem106[a4_11 + 4060<i32>:word32] = t4_105
	word32 a6_109 = Mem106[a7_16 + -32<i32>:int32]
	word32 a5_108 = CONVERT(t4_105 <u a5_104, bool, word32) + CONVERT((t4_101 <u a6_97) + (a3 <u a5_98), bool, bool)
	word32 t4_112 = a3 + a6_109 + a5_108
	word32 a6_115 = Mem106[a4_11 + -32<i32>:int32]
	word32 t4_116 = t4_112 + a6_115
	Mem117[a4_11 + 4064<i32>:word32] = t4_116
	word32 a5_120 = Mem117[a7_16 + -28<i32>:int32]
	word32 a6_119 = CONVERT(t4_116 <u a6_115, bool, word32) + CONVERT((t4_112 <u a5_108) + (a3 <u a6_109), bool, bool)
	word32 t4_123 = a3 + a5_120 + a6_119
	word32 a5_126 = Mem117[a4_11 + -28<i32>:int32]
	word32 t4_127 = t4_123 + a5_126
	Mem128[a4_11 + 4068<i32>:word32] = t4_127
	word32 a6_131 = Mem128[a7_16 + -24<i32>:int32]
	word32 a5_130 = CONVERT(t4_127 <u a5_126, bool, word32) + CONVERT((t4_123 <u a6_119) + (a3 <u a5_120), bool, bool)
	word32 t4_134 = a3 + a6_131 + a5_130
	word32 a6_137 = Mem128[a4_11 + -24<i32>:int32]
	word32 t4_138 = t4_134 + a6_137
	Mem139[a4_11 + 4072<i32>:word32] = t4_138
	word32 a5_142 = Mem139[a7_16 + -20<i32>:int32]
	word32 a6_141 = CONVERT(t4_138 <u a6_137, bool, word32) + CONVERT((t4_134 <u a5_130) + (a3 <u a6_131), bool, bool)
	word32 t4_145 = a3 + a5_142 + a6_141
	word32 a5_148 = Mem139[a4_11 + -20<i32>:int32]
	word32 t4_149 = t4_145 + a5_148
	Mem150[a4_11 + 4076<i32>:word32] = t4_149
	word32 a6_153 = Mem150[a7_16 + -16<i32>:int32]
	word32 a5_152 = CONVERT(t4_149 <u a5_148, bool, word32) + CONVERT((t4_145 <u a6_141) + (a3 <u a5_142), bool, bool)
	word32 t4_156 = a3 + a6_153 + a5_152
	word32 a6_159 = Mem150[a4_11 + -16<i32>:int32]
	word32 t4_160 = t4_156 + a6_159
	Mem161[a4_11 + 4080<i32>:word32] = t4_160
	word32 a5_164 = Mem161[a7_16 + -12<i32>:int32]
	word32 a6_163 = CONVERT(t4_160 <u a6_159, bool, word32) + CONVERT((t4_156 <u a5_152) + (a3 <u a6_153), bool, bool)
	word32 t4_167 = a3 + a5_164 + a6_163
	word32 a5_170 = Mem161[a4_11 + -12<i32>:int32]
	word32 t4_171 = t4_167 + a5_170
	Mem172[a4_11 + 4084<i32>:word32] = t4_171
	word32 a6_175 = Mem172[a7_16 + -8<i32>:int32]
	word32 a5_174 = CONVERT(t4_171 <u a5_170, bool, word32) + CONVERT((t4_167 <u a6_163) + (a3 <u a5_164), bool, bool)
	word32 t4_178 = a3 + a6_175 + a5_174
	word32 a6_181 = Mem172[a4_11 + -8<i32>:int32]
	word32 t4_182 = t4_178 + a6_181
	Mem183[a4_11 + 4088<i32>:word32] = t4_182
	word32 t4_185 = Mem183[a7_16 + -4<i32>:int32]
	word32 a6_186 = CONVERT(t4_182 <u a6_181, bool, word32) + CONVERT((t4_178 <u a5_174) + (a3 <u a6_175), bool, bool)
	word32 a5_189 = a3 + t4_185 + a6_186
	word32 t4_192 = Mem183[a4_11 + -4<i32>:int32]
	word32 a5_193 = a5_189 + t4_192
	Mem194[a4_11 + 4092<i32>:word32] = a5_193
	t1_15 = t1_15 + 0xFFFFFFF0<32>
	a5_196 = CONVERT(a5_193 <u t4_192, bool, word32) + CONVERT((a5_189 <u a6_186) + (a3 <u t4_185), bool, bool)
l23060C34:
	word32 a4_201 = a0 >>u 4<u32> << 6<i32>
	word32 a1_203 = a1 + a4_201
	word32 a2_205 = a2 + a4_201
	word32 a4_206 = 7<32>
	word32 a0_207 = a0 + ((a0 >>u 4<u32>) + 0xFFFFFFF0<32>)
	branch a0_207 <=u 7<32> l23060D72
l23060C4C:
	word32 a7_208 = Mem12[a1_203:int32]
	word32 a4_214 = a3 + a7_208 + a5_196
	word32 a4_216 = a4_214 + a6_13
	Mem217[a2_205 + 4096<i32>:word32] = a4_216
	word32 a5_220 = Mem217[a1_203 + 4<i32>:int32]
	word32 a6_221 = CONVERT(a4_216 <u a6_13, bool, word32) + CONVERT((a3 <u a7_208) + (a4_214 <u a5_196), bool, bool)
	word32 a4_224 = a3 + a5_220 + a6_221
	word32 a5_227 = Mem217[a2_205 + 4<i32>:int32]
	word32 a4_228 = a4_224 + a5_227
	Mem229[a2_205 + 4100<i32>:word32] = a4_228
	word32 a4_231 = Mem229[a1_203 + 8<i32>:int32]
	word32 a6_232 = CONVERT((a4_224 <u a6_221) + (a3 <u a5_220), bool, bool) + CONVERT(a4_228 <u a5_227, bool, word32)
	word32 a5_235 = a3 + a4_231 + a6_232
	word32 a6_238 = Mem229[a2_205 + 8<i32>:int32]
	word32 a5_239 = a5_235 + a6_238
	Mem240[a2_205 + 4104<i32>:word32] = a5_239
	word32 a4_243 = Mem240[a1_203 + 12<i32>:int32]
	word32 a6_242 = CONVERT(a5_239 <u a6_238, bool, word32) + CONVERT((a3 <u a4_231) + (a5_235 <u a6_232), bool, bool)
	word32 a7_246 = a3 + a4_243 + a6_242
	word32 a4_249 = Mem240[a2_205 + 12<i32>:int32]
	word32 a7_250 = a7_246 + a4_249
	Mem251[a2_205 + 4108<i32>:word32] = a7_250
	word32 a5_252 = Mem251[a1_203 + 16<i32>:int32]
	word32 a4_254 = CONVERT(a7_250 <u a4_249, bool, word32) + CONVERT((a7_246 <u a6_242) + (a3 <u a4_243), bool, bool)
	word32 a7_257 = a3 + a5_252 + a4_254
	word32 a5_260 = Mem251[a2_205 + 16<i32>:int32]
	word32 a7_261 = a7_257 + a5_260
	Mem262[a2_205 + 4112<i32>:word32] = a7_261
	word32 a6_263 = Mem262[a1_203 + 20<i32>:int32]
	word32 a5_265 = CONVERT(a7_261 <u a5_260, bool, word32) + CONVERT((a7_257 <u a4_254) + (a3 <u a5_252), bool, bool)
	word32 a7_268 = a3 + a6_263 + a5_265
	word32 a6_271 = Mem262[a2_205 + 20<i32>:int32]
	word32 a7_272 = a7_268 + a6_271
	Mem273[a2_205 + 4116<i32>:word32] = a7_272
	word32 a4_274 = Mem273[a1_203 + 24<i32>:int32]
	word32 a6_276 = CONVERT(a7_272 <u a6_271, bool, word32) + CONVERT((a7_268 <u a5_265) + (a3 <u a6_263), bool, bool)
	word32 a7_279 = a3 + a4_274 + a6_276
	word32 a4_282 = Mem273[a2_205 + 24<i32>:int32]
	word32 a7_283 = a7_279 + a4_282
	Mem284[a2_205 + 4120<i32>:word32] = a7_283
	word32 a5_285 = Mem284[a1_203 + 28<i32>:int32]
	word32 a4_287 = CONVERT(a7_283 <u a4_282, bool, word32) + CONVERT((a7_279 <u a6_276) + (a3 <u a4_274), bool, bool)
	word32 a6_290 = a3 + a5_285 + a4_287
	word32 a5_293 = Mem284[a2_205 + 28<i32>:int32]
	word32 a6_294 = a6_290 + a5_293
	Mem296[a2_205 + 4124<i32>:word32] = a6_294
	a4_206 = CONVERT((a6_290 <u a4_287) + (a3 <u a5_285), bool, bool)
	a0_207 = a0_207 + 0xFFFFFFF8<32>
	a2_205 = a2_205 + 32<i32>
	a1_203 = a1_203 + 32<i32>
	a5_196 = CONVERT(a6_294 <u a5_293, bool, word32) + a4_206
l23060D72:
	word32 t3_301 = a1_203 + (a0_207 << 2<i32>)
	word32 a6_303 = a2_205
l23060D7A:
	word32 a7_306 = Mem305[a6_303:int32]
	a6_303 = a6_303 + 4<32>
	branch a1_203 != t3_301 l23060FDE
l23060FDE:
	a1_203 = a1_203 + 4<32>
	word32 t1_311 = Mem305[a1_203 + -4<i32>:int32]
	word32 a4_316 = a3 + t1_311 + a5_196
	word32 a4_318 = a4_316 + a7_306
	Mem319[a6_303 + 4092<i32>:word32] = a4_318
	a4_206 = CONVERT(a4_318 <u a7_306, bool, word32)
	a5_196 = a4_206 + CONVERT((a3 <u t1_311) + (a4_316 <u a5_196), bool, bool)
l23060D84:
l23060D86:
	word32 a2_328 = Mem327[a4_206:word32]
	a4_206 = a4_206 + a5_196
	Mem332[a2_328 + 0x1000<32>:word32] = a4_206
	branch a4_206 <u a5_196 l23061004
l23061004:
	a5_196 = 1<32>
l23060D94:
	a2Out = a2_328 + 4<32>
	a4Out = a4_206
	a5Out = a5_196
	return a1_203
mpi_mul_hlp_exit:


word32 mbedtls_mpi_init(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_check_privkey
//      mbedtls_rsa_public
//      mbedtls_rsa_private
//      ecp_select_comb
//      ecp_double_jac
//      ecp_normalize_jac
//      ecp_normalize_jac_many
//      mbedtls_ecp_point_init.part.2
//      mbedtls_ecp_keypair_init
//      ecp_add_mixed
//      mbedtls_ecp_check_pubkey
//      mbedtls_ecp_mul
// MayUse:  a0:[0..31]
// LiveOut: a5
// Trashed: a5
// Preserved: sp
mbedtls_mpi_init_entry:
l23061008:
	branch a0 == 0<32> l23061016
l2306100A:
	Mem5[1<32>:word32] = a0
	Mem6[a0 + 4<i32>:word32] = 0<32>
	Mem7[a0 + 8<i32>:word32] = 0<32>
	a5 = 1<32>
l23061016:
	return a5
mbedtls_mpi_init_exit:


word32 mbedtls_mpi_free(word32 a0, word32 a2, word32 a4, word32 a5, word32 mstatus, word32 dwArg0148, word32 dwArg0188, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out, ptr32 & s4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_check_privkey
//      mbedtls_rsa_public
//      mbedtls_rsa_private
//      mbedtls_rsa_free
//      mbedtls_mpi_copy
//      mbedtls_mpi_sub_abs
//      mbedtls_mpi_mul_mpi
//      mbedtls_mpi_div_mpi
//      mbedtls_mpi_exp_mod
//      mbedtls_mpi_gcd
//      mbedtls_mpi_inv_mod
//      ecp_select_comb
//      ecp_double_jac
//      ecp_normalize_jac
//      ecp_normalize_jac_many
//      mbedtls_ecp_point_free
//      mbedtls_ecp_group_free
//      mbedtls_ecp_keypair_free
//      ecp_add_mixed
//      mbedtls_ecp_check_pubkey
//      mbedtls_ecp_mul
// MayUse:  a0:[0..31] a2:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] Stack +0148:[0..31] Stack +0188:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 a6 s1 s4
// Trashed: a0 a1 a2 a3 a4 a5 a6 s1 s4 t3 tp
// Preserved: s0 sp
mbedtls_mpi_free_entry:
l23061018:
	branch a0 == 0<32> l23061052
l23061052:
	a0Out = a0
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5
	a6Out = a6
	s4Out = s4
	return s1
l2306101A:
	word32 a0_10 = Mem8[a5 + 8<i32>:word32]
	word32 s0_11 = a0_10
	branch a5 == 0<32> l23061036
l23061026:
	word32 a0_13 = Mem8[a4 + 4<i32>:word32]
l2306102A:
	a4 = a4 + 0xFFFFFFFF<32>
	branch a4 != 0xFFFFFFFF<32> l2306104A
l2306104A:
	Mem19[a5:word32] = 0<32>
	a5 = a5 + 4<32>
l23061030:
	word32 a2_98
	word32 a5_99
	word32 t3_100
	vPortFree(a0_13, a2, a5, mstatus, dwArg0148, dwArg0188, out s0_11, out s1, out a0_10, out a1, out a2_98, out a3, out a4, out a5_99, out a6, out s4, out t3_100)
l23061036:
	Mem43[1<32>:word32] = s0_11
	Mem44[s0_11 + 4<i32>:word32] = 0<32>
	Mem45[s0_11 + 8<i32>:word32] = 0<32>
	a0Out = a0_10
	a1Out = a1
	a2Out = dwArg10
	a3Out = a3
	a4Out = a4
	a5Out = 1<32>
	a6Out = a6
	s4Out = s4
	return s1
mbedtls_mpi_free_exit:


word32 mbedtls_mpi_grow(word32 ra, word32 a1, word32 a3, word32 a4, word32 mstatus, word32 dwArg10, word32 dwArg14, word32 dwArg38, word32 dwArg0108, word32 dwArg0148, word32 dwArg0188, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a7Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_mpi_shrink
//      mbedtls_mpi_copy
//      mbedtls_mpi_safe_cond_assign
//      mbedtls_mpi_lset
//      mbedtls_mpi_read_binary
//      mbedtls_mpi_shift_l
//      mbedtls_mpi_add_abs
//      mbedtls_mpi_mul_mpi
//      mbedtls_mpi_div_mpi
//      mbedtls_mpi_exp_mod
// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] mstatus:[0..31] ra:[0..31] Stack +0010:[0..31] Stack +0014:[0..31] Stack +0038:[0..31] Stack +0108:[0..31] Stack +0148:[0..31] Stack +0188:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 a7 ra s1 s2 s3 s4 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: s0 sp
mbedtls_mpi_grow_entry:
l23061054:
	word32 a5_139 = 0x2000710<32>
	branch a1 <=u 0x2000710<32> l23061070
l23061070:
	word32 a0_126 = 0<32>
	branch a1 <=u 0x2000710<32> l23061064
l23061084:
	word32 a2_25
	word32 s0_217
	word32 s2_218
	ra = mycalloc(ra, a1, a1, 4<32>, a3, a4, 0x2000710<32>, mstatus, dwArg10, dwArg14, dwArg0108, dwArg0148, out s0_217, out s1, out a1, out a2_25, out a3, out a4, out a5_139, out s2_218, out s3, out s4, out s8)
	s2 = a1
	branch a1 == 0<32> l23061062
l23061062:
	a0_126 = 0xFFFFFFF0<32>
l23061092:
	word32 s0_43 = Mem14[a1 + 8<i32>:word32]
	branch a1 == 0<32> l230610B0
l23061096:
	word32 a2_50
	word32 a1_219
	word32 a3_220
	word32 a6_221
	word32 a5_47
	word32 a4_46
	memcpy(a1, a1, a2_25 << 2<i32>, out a1_219, out a2_50, out a3_220, out a4_46, out a5_47, out a6_221, out a7)
l230610A4:
	a5_47 = a5_47 + 0xFFFFFFFF<32>
	branch a5_47 != 0xFFFFFFFF<32> l230610BA
l230610BA:
	Mem66[a4_46:word32] = 0<32>
	a4_46 = a4_46 + 4<32>
l230610AA:
	word32 a0_222
	word32 a2_223
	word32 a6_224
	word32 t3_225
	vPortFree(a1, a2_50, a5_47, mstatus, dwArg0148, dwArg0188, out s0_43, out s1, out a0_222, out a1, out a2_223, out a3, out a4, out a5_139, out a6_224, out s4, out t3_225)
l230610B0:
	Mem88[s1 + 4<i32>:word32] = s0_43
	Mem91[s0_43 + 8<i32>:word32] = a1
	a0_126 = 0<32>
l23061064:
	0<32> = dwArg38
	s1Out = s1
	a0Out = a0_126
	a1Out = a1
	a2Out = dwArg10
	a3Out = a3
	a4Out = a4
	a5Out = a5_139
	a7Out = a7
	s2Out = s2
	s3Out = s3
	s4Out = s4
	s8Out = s8
	return ra
l2306105E:
	s1Out = s1
	a0Out = 0xFFFFFFF0<32>
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = 0x2000710<32>
	a7Out = a7
	s2Out = s2
	s3Out = s3
	s4Out = s4
	s8Out = s8
	return ra
mbedtls_mpi_grow_exit:


word32 mbedtls_mpi_shrink(word32 ra, word32 a1, word32 a3, word32 a4, word32 mstatus, word32 dwArg10, word32 dwArg14, word32 dwArg38, word32 dwArg0108, word32 dwArg0148, word32 dwArg0188, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ecp_normalize_jac_many
// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] mstatus:[0..31] ra:[0..31] Stack +0010:[0..31] Stack +0014:[0..31] Stack +0038:[0..31] Stack +0108:[0..31] Stack +0148:[0..31] Stack +0188:[0..31]
// LiveOut: a0 a2 a3 a4 a5 ra s1 s2 s3 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: s0 sp
mbedtls_mpi_shrink_entry:
l230610C2:
	branch a1 <u a4 l23061126
l23061126:
	word32 s1_17 = a1
	word32 a5_18 = a4 + -1<i32>
l230610DA:
	branch a5_18 != 0<32> l230610CC
l230610CC:
	a3 = a5_18 << 2<u32>
	a4 = Mem15[a4 + a3:word32]
	branch a4 != 0<32> l230610DC
l230610D8:
	a5_18 = a5_18 + 0xFFFFFFFF<32>
l230610DC:
	word32 a5_28 = a5_18 + 1<32>
	branch a1 >=u a5_28 l230610E4
l230610E2:
	s1_17 = a5_28
l230610E4:
	word32 a1_54
	word32 s3_64
	word32 s8_66
	word32 a5_291
	word32 s2_292
	word32 s4_293
	word32 a2_290
	word32 s0_289
	word32 s1_107
	word32 a4_105
	word32 a3_104
	word32 ra_60 = mycalloc(ra, s1_17, s1_17, 4<32>, a3, a4, a5_28, mstatus, dwArg10, dwArg14, dwArg0108, dwArg0148, out s0_289, out s1_107, out a1_54, out a2_290, out a3_104, out a4_105, out a5_291, out s2_292, out s3_64, out s4_293, out s8_66)
	word32 a5_121 = 0xFFFFFFF0<32>
	branch s1_17 == 0<32> l23061118
l230610F2:
	word32 s0_112 = Mem15[a1_54 + 8<i32>:word32]
	branch a1_54 == 0<32> l23061110
l230610F6:
	word32 a7_297
	word32 a2_79
	word32 a3_295
	word32 a1_294
	word32 a6_296
	word32 a5_76
	word32 a4_75
	memcpy(s1_17, a1_54, s1_107 << 2<u32>, out a1_294, out a2_79, out a3_295, out a4_75, out a5_76, out a6_296, out a7_297)
l23061104:
	a5_76 = a5_76 + 0xFFFFFFFF<32>
	branch a5_76 != 0xFFFFFFFF<32> l2306113A
l2306113A:
	Mem95[a4_75:word32] = 0<32>
	a4_75 = a4_75 + 4<32>
l2306110A:
	word32 s4_303
	word32 t3_304
	word32 a5_301
	word32 a0_298
	word32 a1_299
	word32 a2_300
	word32 a6_302
	vPortFree(s1_17, a2_79, a5_76, mstatus, dwArg0148, dwArg0188, out s0_112, out s1_107, out a0_298, out a1_299, out a2_300, out a3_104, out a4_105, out a5_301, out a6_302, out s4_303, out t3_304)
l23061110:
	Mem117[s1_107 + 4<i32>:word32] = s0_112
	Mem120[s0_112 + 8<i32>:word32] = s1_17
	a5_121 = 0<32>
l23061118:
	0<32> = dwArg38
	s1Out = s1_107
	a0Out = a5_121
	a2Out = dwArg10
	a3Out = a3_104
	a4Out = a4_105
	a5Out = a5_121
	s2Out = s1_17
	s3Out = s3_64
	s8Out = s8_66
	return ra_60
l230610C8:
l230610C8_thunk_mbedtls_mpi_grow:
	word32 a0_131
	word32 a2_132
	word32 a5_133
	word32 a3_136
	word32 a4_137
	word32 s1_140
	word32 s2_141
	word32 s3_142
	word32 s8_144
	word32 a1_286
	word32 a7_287
	word32 s4_288
	word32 ra_139 = mbedtls_mpi_grow(ra, a1, a3, a4, mstatus, dwArg10, dwArg14, dwArg38, dwArg0108, dwArg0148, dwArg0188, out s1_140, out a0_131, out a1_286, out a2_132, out a3_136, out a4_137, out a5_133, out a7_287, out s2_141, out s3_142, out s4_288, out s8_144)
	s1Out = s1_140
	a0Out = a0_131
	a2Out = a2_132
	a3Out = a3_136
	a4Out = a4_137
	a5Out = a5_133
	s2Out = s2_141
	s3Out = s3_142
	s8Out = s8_144
	return ra_139
mbedtls_mpi_shrink_exit:


word32 mbedtls_mpi_copy(word32 ra, word32 a0, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 mstatus, word32 dwArg18, word32 dwArgE8, word32 dwArg0128, word32 dwArg0168, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out, ptr32 & a7Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_mpi_add_abs
//      mbedtls_mpi_sub_abs
//      mbedtls_mpi_mul_mpi
//      mbedtls_mpi_div_mpi
//      mbedtls_mpi_exp_mod
//      mbedtls_mpi_gcd
//      mbedtls_mpi_inv_mod
//      ecp_double_jac
//      ecp_normalize_jac_many
//      mbedtls_ecp_copy
//      ecp_add_mixed
//      mbedtls_ecp_mul
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] Stack +0018:[0..31] Stack +00E8:[0..31] Stack +0128:[0..31] Stack +0168:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_mpi_copy_entry:
l23061142:
	word32 s3_114
	branch a0 == a1 l2306115C
l23061152:
	word32 a1_17 = Mem13[a4 + 8<i32>:word32]
	s2 = a1_17
	branch a4 != 0<32> l23061160
l23061160:
l23061164:
	a2 = a2 + 0xFFFFFFFF<32>
	branch a2 == 0<32> l23061172
l23061168:
	branch Mem13[(a2 << 2<u32>) + a4:word32] == 0<32> l23061164
l23061172:
	Mem38[Mem13[a1_17:int32]:word32] = a0
	s0 = a2 + 1<i32>
	word32 a0_51
	word32 a2_52
	word32 s3_230
	word32 s4_231
	word32 s8_232
	ra = mbedtls_mpi_grow(ra, a2 + 1<i32>, a3, a4, mstatus, dwLoc10, dwLoc0C, dwArg18, dwArgE8, dwArg0128, dwArg0168, out s1, out a0_51, out a1, out a2_52, out a3, out a4, out a5, out a7, out s2, out s3_230, out s4_231, out s8_232)
	s3_114 = a0_51
	branch a0_51 != 0<32> l230611A2
l23061188:
	word32 a0_77
	word32 t1_233
	word32 a1_234
	word32 a2_235
	word32 a3_236
	word32 a4_237
	word32 a5_238
	ra = memset(ra, a0_51, 0<32>, a2_52 << 2<i32>, out t1_233, out a0_77, out a1_234, out a2_235, out a3_236, out a4_237, out a5_238)
	s1 = Mem38[a0_77 + 8<i32>:word32]
	word32 a2_239
	word32 a6_240
	memcpy(a0_77, Mem38[s2 + 8<i32>:int32], a2 + 1<i32> << 2<u32>, out a1, out a2_239, out a3, out a4, out a5, out a6_240, out a7)
l23061158:
	word32 a0_226
	word32 a2_227
	word32 a6_228
	word32 s4_229
	s1 = mbedtls_mpi_free(a0, a2, a4, a5, mstatus, dwArg0128, dwArg0168, out a0_226, out a1, out a2_227, out a3, out a4, out a5, out a6_228, out s4_229)
l2306115C:
	s3_114 = 0<32>
l230611A2:
	s0Out = s0
	s1Out = s1
	a0Out = s3_114
	a1Out = a1
	a2Out = dwArg48
	a3Out = a3
	a4Out = a4
	a5Out = a5
	a6Out = dwArg28
	a7Out = a7
	s2Out = s2
	s3Out = s3_114
	s4Out = dwArg04
	s8Out = dwLoc1C
	return ra
mbedtls_mpi_copy_exit:


word32 mbedtls_mpi_safe_cond_assign(word32 ra, word32 a1, word32 a2, word32 a3, word32 a4, word32 mstatus, word32 dwArg18, word32 dwArgE8, word32 dwArg0128, word32 dwArg0168, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ecp_select_comb
//      mbedtls_ecp_mul
// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] mstatus:[0..31] ra:[0..31] Stack +0018:[0..31] Stack +00E8:[0..31] Stack +0128:[0..31] Stack +0168:[0..31]
// LiveOut: a0 a2 a3 a4 a5 ra s0 s1 s2 s3 s4
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_mpi_safe_cond_assign_entry:
l230611B2:
	word32 s0_134 = a0
	word32 a0_20
	word32 s2_30
	word32 s3_31
	word32 s8_173
	word32 a7_171
	word32 s4_172
	word32 a1_24
	word32 a3_122
	word32 a4_123
	word32 a2_120
	word32 a5_124
	word32 s1_135
	word32 ra_28 = mbedtls_mpi_grow(ra, Mem9[a1 + 4<i32>:word32], a3, a4, mstatus, dwLoc10, dwLoc0C, dwArg18, dwArgE8, dwArg0128, dwArg0168, out s1_135, out a0_20, out a1_24, out a2_120, out a3_122, out a4_123, out a5_124, out a7_171, out s2_30, out s3_31, out s4_172, out s8_173)
	branch a0_20 != 0<32> l230611F8
l230611C8:
	word32 a5_44 = 0<32> - a2
	a2_120 = ((a2 | a5_44) & 255<i32>) >>u 7<i32>
	a4_123 = 1<32> - a2_120
	a3_122 = a2_120 + a3_122
	Mem53[a4_123 + a5_44 + a3_122:word32] = Mem16[a5_44:word32]
	a5_124 = 0<32>
l230611EC:
	s1_135 = Mem56[a3_122 + 4<i32>:word32]
	branch a5_124 <u a3_122 l23061202
l23061202:
	word32 a6_62 = a5_124 << 2<u32>
	a1_24 = a1_24 + a6_62
	a3_122 = a2_120 + Mem56[a3_122 + a6_62:word32] + (a4_123 + Mem56[a1_24:int32])
	Mem73[a3_122:word32] = a1_24
	a5_124 = a5_124 + 1<32>
l230611F2:
	s0_134 = Mem75[a3_122 + 4<i32>:word32]
	branch a5_124 <u a3_122 l23061224
l23061224:
	word32 a2_79 = a5_124 << 2<u32>
	a3_122 = Mem75[a2_79:word32]
	a2_120 = a2_79 + a4_123
	Mem84[a2_120:word32] = a3_122
	a5_124 = a5_124 + 1<32>
l230611F8:
	s0Out = s0_134
	s1Out = s1_135
	a0Out = a0_20
	a2Out = a2_120
	a3Out = a3_122
	a4Out = a4_123
	a5Out = a5_124
	s2Out = s2_30
	s3Out = s3_31
	s4Out = dwArg04
	return ra_28
mbedtls_mpi_safe_cond_assign_exit:


word32 mbedtls_mpi_lset(word32 ra, word32 a3, word32 a4, word32 mstatus, word32 dwArg00, word32 dwArg04, word32 dwArg28, word32 dwArg38, word32 dwArgF8, word32 dwArg0138, word32 dwArg0178, ptr32 & s1Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a7Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_mpi_read_binary
//      mbedtls_mpi_shift_r
//      mbedtls_mpi_mul_mpi
//      mbedtls_mpi_div_mpi
//      mbedtls_mpi_exp_mod
//      mbedtls_mpi_inv_mod
//      ecp_normalize_jac
//      mbedtls_ecp_set_zero
//      mbedtls_ecp_point_read_binary
//      mbedtls_ecp_mul
// MayUse:  a3:[0..31] a4:[0..31] mstatus:[0..31] ra:[0..31] Stack +0000:[0..31] Stack +0004:[0..31] Stack +0028:[0..31] Stack +0038:[0..31] Stack +00F8:[0..31] Stack +0138:[0..31] Stack +0178:[0..31]
// LiveOut: a1 a2 a3 a4 a5 a7 ra s1 s2 s3 s4 s8
// Trashed: a1 a2 a3 a4 a5 a6 a7 ra s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: s0 sp
mbedtls_mpi_lset_entry:
l23061238:
	word32 a0_20
	word32 a2_21
	word32 s1_29
	word32 s3_31
	word32 s4_32
	word32 s8_33
	word32 a7_37
	word32 s2_140
	word32 a5_102
	word32 a4_100
	word32 a3_25
	word32 a1_24
	word32 ra_107 = mbedtls_mpi_grow(ra, 1<32>, a3, a4, mstatus, dwArg00, dwArg04, dwArg28, dwArgF8, dwArg0138, dwArg0178, out s1_29, out a0_20, out a1_24, out a2_21, out a3_25, out a4_100, out a5_102, out a7_37, out s2_140, out s3_31, out s4_32, out s8_33)
	branch a0_20 != 0<32> l23061274
l23061250:
	word32 a5_145
	word32 a2_143
	word32 a4_144
	word32 t1_141
	word32 a0_142
	ra_107 = memset(ra_107, a0_20, 0<32>, a2_21 << 2<i32>, out t1_141, out a0_142, out a1_24, out a2_143, out a3_25, out a4_144, out a5_145)
	word32 s0_56 = Mem14[a3_25 + 8<i32>:word32]
	Mem59[(s1_29 >> 0x1F<u32> ^ s1_29) - (s1_29 >> 0x1F<u32>):word32] = a3_25
	a4_100 = s1_29 >> 0x1F<u32>
	a5_102 = 0xFFFFFFFF<32>
	branch s1_29 < 0<32> l23061272
l23061270:
	a5_102 = 1<32>
l23061272:
	Mem64[a5_102:word32] = s0_56
l23061274:
	0<32> = dwArg38
	s1Out = s1_29
	a1Out = a1_24
	a2Out = dwArg10
	a3Out = a3_25
	a4Out = a4_100
	a5Out = a5_102
	a7Out = a7_37
	s2Out = a0_20
	s3Out = s3_31
	s4Out = s4_32
	s8Out = s8_33
	return ra_107
mbedtls_mpi_lset_exit:


word32 mbedtls_mpi_get_bit(word32 a1, word32 a5, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ecp_mul
// MayUse:  a1:[0..31] a5:[0..31]
// LiveOut: a0 a4 a5
// Trashed: a0 a4 a5
// Preserved: sp
mbedtls_mpi_get_bit_entry:
l23061282:
	branch a1 >=u a5 << 5<i32> l2306129E
l2306129E:
	a4Out = a4
	a5Out = a5 << 5<i32>
	return 0<32>
l2306128A:
	word32 a0_9 = Mem0[(a5 << 5<i32>) + 8<i32>:word32]
	word32 a5_12 = Mem0[a0_9:word32]
	a4Out = a1 >>u 5<u32> << 2<i32>
	a5Out = a5_12
	return a0_9 >>u a1 & 1<32>
mbedtls_mpi_get_bit_exit:


word32 mbedtls_mpi_lsb(word32 a0, word32 a5, ptr32 & a2Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_mpi_gcd
// MayUse:  a0:[0..31] a5:[0..31]
// LiveOut: a0 a2 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: sp
mbedtls_mpi_lsb_entry:
l230612A2:
	word32 a6_5 = Mem0[a0 + 4<i32>:int32]
	word32 a3_29 = 0<32>
	word32 a4_10 = 0<32>
l230612AE:
	word32 a1_23
	branch a6_5 != a4_10 l230612B8
l230612B8:
	word32 t1_16 = Mem0[a5 + (a4_10 << 2<u32>):int32]
	a5 = 0<32>
l230612C6:
	word32 a2_20 = t1_16 >>u a5
	a2 = a2_20 & 1<32>
	a1_23 = a3_29 + a5
	branch (a2_20 & 1<32>) != 0<32> l230612B4
l230612D2:
	a5 = a5 + 1<32>
	a2 = a3_29 + a5
	branch a5 != 32<i32> l230612C6
l230612DC:
	a4_10 = a4_10 + 1<32>
	a3_29 = a2
l230612B2:
	a1_23 = 0<32>
l230612B4:
	a2Out = a2
	a5Out = a5
	return a1_23
mbedtls_mpi_lsb_exit:


word32 mbedtls_mpi_bitlen(word32 a2, word32 a4, word32 a5, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_check_pubkey
//      mbedtls_rsa_pkcs1_sign
//      mbedtls_rsa_rsassa_pss_verify_ext
//      mbedtls_mpi_size
//      mbedtls_mpi_shift_l
//      mbedtls_mpi_div_mpi
//      mbedtls_mpi_exp_mod
//      ecp_modp
//      mbedtls_ecp_group_load
// MayUse:  a2:[0..31] a4:[0..31] a5:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: sp
mbedtls_mpi_bitlen_entry:
l230612E2:
	branch a5 == 0<32> l23061312
l230612E6:
	word32 a5_15 = a5 + 0xFFFFFFFF<32>
l230612EA:
	word32 a3_10 = a5_15 << 2<u32>
	branch a5_15 != 0<32> l23061316
l23061316:
	a2 = Mem0[a4 + a3_10:word32]
	branch a2 != 0<32> l230612F0
l2306131E:
	a5_15 = a5_15 + 0xFFFFFFFF<32>
l230612F0:
	word32 a0_21 = 0<32>
	a4 = 0x80000000<32>
	a3 = 32<i32>
l230612FE:
	a1 = a2 & a4
	branch a1 != 0<32> l2306130C
l23061304:
	a0_21 = a0_21 + 1<32>
	a4 = a4 >>u 1<i32>
	branch a0_21 != 32<i32> l230612FE
l2306130C:
	a5 = (a5_15 + 1<32> << 5<i32>) - a0_21
l23061312:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5
	return a5
mbedtls_mpi_bitlen_exit:


word32 mbedtls_mpi_size(word32 a2, word32 a4, word32 a5, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pk_parse_key_pkcs1_der
//      mbedtls_pk_parse_subpubkey
//      mbedtls_mpi_write_binary
//      mbedtls_ecp_point_read_binary
// MayUse:  a2:[0..31] a4:[0..31] a5:[0..31]
// LiveOut: a0 a1 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: sp
mbedtls_mpi_size_entry:
l23061322:
	word32 a1_10
	word32 a3_12
	word32 a4_13
	word32 a5_14
	word32 a2_25
	word32 a0_17 = mbedtls_mpi_bitlen(a2, a4, a5, out a1_10, out a2_25, out a3_12, out a4_13, out a5_14) + 7<32> >>u 3<i32>
	a1Out = a1_10
	a3Out = a3_12
	a4Out = a4_13
	a5Out = a5_14
	return a0_17
mbedtls_mpi_size_exit:


word32 mbedtls_mpi_read_binary(word32 ra, word32 a1, word32 a2, word32 a3, word32 a4, word32 mstatus, word32 dwArg08, word32 dwArg18, word32 dwArgD8, word32 dwArgE8, word32 dwArg0118, word32 dwArg0128, word32 dwArg0158, word32 dwArg0168, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a7Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pk_parse_key_sec1_der
//      mbedtls_rsa_public
//      mbedtls_rsa_private
//      mbedtls_asn1_get_mpi
//      mbedtls_mpi_fill_random
//      mbedtls_ecp_point_read_binary
// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] mstatus:[0..31] ra:[0..31] Stack +0008:[0..31] Stack +0018:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +0118:[0..31] Stack +0128:[0..31] Stack +0158:[0..31] Stack +0168:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 a7 ra s0 s1 s2 s3 s4 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_mpi_read_binary_entry:
l23061334:
	word32 s0_20 = 0<32>
l23061348:
	branch s0_20 == a2 l23061356
l2306134C:
	branch CONVERT(Mem13[a1 + s0_20:byte], byte, word32) == 0<32> l23061388
l23061388:
	s0_20 = s0_20 + 1<32>
l23061356:
	word32 a5_30 = a2 - s0_20
	word32 a2_228
	word32 s4_229
	word32 s8_230
	word32 s1_103
	word32 s3_202
	word32 s2_201
	word32 a5_101
	word32 a7_195
	word32 a4_110
	word32 a3_112
	word32 a0_186
	word32 a1_188
	word32 ra_197 = mbedtls_mpi_grow(ra, CONVERT((a5_30 & 3<i32>) != 0<32>, bool, word32) + (a5_30 >>u 2<i32>), a3, a4, mstatus, dwLoc10, dwLoc0C, dwArg18, dwArgE8, dwArg0128, dwArg0168, out s1_103, out a0_186, out a1_188, out a2_228, out a3_112, out a4_110, out a5_101, out a7_195, out s2_201, out s3_202, out s4_229, out s8_230)
	branch a0_186 != 0<32> l2306137A
l2306136E:
	a0_186 = s2_201
	word32 a5_232
	word32 a2_231
	word32 s4_233
	word32 s8_234
	ra_197 = mbedtls_mpi_lset(ra_197, a3_112, a4_110, mstatus, dwLoc20, dwLoc1C, dwArg08, dwArg18, dwArgD8, dwArg0118, dwArg0158, out s1_103, out a1_188, out a2_231, out a3_112, out a4_110, out a5_232, out a7_195, out s2_201, out s3_202, out s4_233, out s8_234)
	a5_101 = 0<32>
	branch s2_201 == 0<32> l230613B2
l230613B2:
	branch s0_20 <u s1_103 l2306138C
l2306138C:
	s1_103 = s1_103 + 0xFFFFFFFF<32>
	word32 a3_106 = CONVERT(Mem99[s3_202 + s1_103:byte], byte, word32)
	a4_110 = Mem99[a3_106:word32]
	a3_112 = a3_106 | a3_106 << (a5_101 << 3<u32> & 0x18<32>)
	Mem113[a3_112:word32] = a4_110
	a5_101 = a5_101 + 1<32>
l230613B6:
l2306137A:
	s0Out = s0_20
	s1Out = s1_103
	a0Out = a0_186
	a1Out = a1_188
	a2Out = dwArg48
	a3Out = a3_112
	a4Out = a4_110
	a5Out = a5_101
	a7Out = a7_195
	s2Out = s2_201
	s3Out = s3_202
	s4Out = dwArg04
	s8Out = dwLoc1C
	return ra_197
mbedtls_mpi_read_binary_exit:


word32 mbedtls_mpi_write_binary(word32 ra, word32 a1, word32 a2, word32 a4, word32 a5, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_public
//      mbedtls_rsa_private
// MayUse:  a1:[0..31] a2:[0..31] a4:[0..31] a5:[0..31] ra:[0..31]
// LiveOut: a0 a2 a4 a5 ra s2 s3
// Trashed: a0 a1 a2 a3 a4 a5 a6 ra s0 s1 s2 s3 s4 s8 t0 t1 t3
// Preserved: sp
mbedtls_mpi_write_binary_entry:
l230613B8:
	word32 a0_28
	word32 a3_117
	word32 a1_116
	word32 a5_27
	word32 a4_26
	word32 a0_22 = mbedtls_mpi_size(a2, a4, a5, out a1_116, out a3_117, out a4_26, out a5_27)
	branch a2 <u a0_22 l2306141A
l2306141A:
	a0_28 = 0xFFFFFFF8<32>
l230613D2:
	s2 = a0_22
	word32 t1_118
	word32 a0_119
	word32 a1_120
	word32 a2_121
	word32 a3_122
	word32 a5_123
	ra = memset(ra, a1, 0<32>, a2, out t1_118, out a0_119, out a1_120, out a2_121, out a3_122, out a4_26, out a5_123)
	word32 a2_42 = a1 + a2
	a5_27 = 0<32>
l230613E4:
	a2_42 = a2_42 + 0xFFFFFFFF<32>
	branch a5_27 != a0_22 l230613FA
l230613FA:
	word32 a4_52 = a5_27 << 3<u32>
	a4_26 = a4_52 >>u (a4_52 & 24<i32>)
	Mem57[a2_42:byte] = SLICE(a4_26, byte, 0)
	a5_27 = a5_27 + 1<32>
l230613EA:
	a0_28 = 0<32>
l230613EC:
	a0Out = a0_28
	a2Out = dwArg48
	a4Out = a4_26
	a5Out = a5_27
	s2Out = s2
	s3Out = a0
	return ra
mbedtls_mpi_write_binary_exit:


word32 mbedtls_mpi_shift_l(word32 ra, word32 a1, word32 a2, word32 a4, word32 a5, word32 mstatus, word32 dwArg18, word32 dwArgE8, word32 dwArg0128, word32 dwArg0168, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a7Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_mpi_div_mpi
//      mbedtls_mpi_exp_mod
//      mbedtls_mpi_gcd
//      ecp_double_jac
// MayUse:  a1:[0..31] a2:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] Stack +0018:[0..31] Stack +00E8:[0..31] Stack +0128:[0..31] Stack +0168:[0..31]
// LiveOut: a0 a2 a3 a4 a5 a7 ra s0 s1 s2 s3 s4 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_mpi_shift_l_entry:
l2306141E:
	word32 a0_118
	word32 a5_112
	word32 a5_28
	word32 a2_297
	word32 a1_141
	word32 a4_102
	word32 a3_135
	word32 a0_23 = mbedtls_mpi_bitlen(a2, a4, a5, out a1_141, out a2_297, out a3_135, out a4_102, out a5_28)
	word32 s2_15 = a1
	word32 s1_101 = a1 >>u 5<u32>
	word32 s3_19 = a1 & 31<i32>
	word32 s0_100 = Mem17[a5_28 + 4<i32>:word32]
	word32 a0_30 = a0_23 + a1
	branch a5_28 << 5<i32> <u a0_30 l23061452
l23061452:
	word32 s8_300
	word32 a2_298
	word32 s4_299
	ra = mbedtls_mpi_grow(ra, CONVERT((a0_30 & 31<i32>) != 0<32>, bool, word32) + (a0_30 >>u 5<i32>), a3_135, a4_102, mstatus, dwLoc10, dwLoc0C, dwArg18, dwArgE8, dwArg0128, dwArg0168, out s1_101, out a0_118, out a1_141, out a2_298, out a3_135, out a4_102, out a5_112, out a7, out s2_15, out s3_19, out s4_299, out s8_300)
	branch a0_118 == 0<32> l23061444
l23061444:
	a5_112 = 0x1F<32>
	branch s2_15 >u 0x1F<32> l23061474
l23061474:
	word32 a2_63 = s1_101 + 0xFFFFFFFC<32>
	s0_100 = Mem17[0x23<32>:word32]
	a4_102 = 0x7C<32>
l23061480:
	a4_102 = a4_102 + 0xFFFFFFFC<32>
	branch s1_101 <u a5_112 l2306149A
l2306149A:
	s0_100 = Mem72[a3_135 + 8<i32>:word32]
	a1_141 = Mem72[a3_135 + a2_63 + a4_102:word32]
	a3_135 = a3_135 + a4_102
	Mem80[a1_141:word32] = a3_135
	a5_112 = a5_112 + 0xFFFFFFFF<32>
l23061486:
	a5_112 = a5_112 << 2<i32>
	a3_135 = 0xFFFFFFFC<32>
l2306148A:
	a5_112 = a5_112 + 0xFFFFFFFC<32>
	branch a5_112 == 0xFFFFFFFC<32> l2306144A
l23061490:
	s0_100 = Mem87[a4_102 + 8<i32>:word32]
	a4_102 = a4_102 + a5_112
	Mem90[a4_102:word32] = 0<32>
l2306144A:
	branch s3_19 != 0<32> l230614D4
l230614D4:
	word32 a2_113 = 0<32>
	a3_135 = 32<i32> - s3_19
l230614CC:
	s0_100 = Mem99[a5_112 + 4<i32>:word32]
	branch s1_101 <u a5_112 l230614AC
l230614AC:
	word32 a4_107 = Mem99[a1_141:word32]
	Mem110[a1_141 << s3_19:word32] = a4_107
	a5_112 = Mem110[a4_107:word32]
	a4_102 = a4_107 | a2_113
	Mem115[a4_102:word32] = a5_112
	s1_101 = s1_101 + 1<32>
	a2_113 = a1_141 >>u a3_135
l230614D2:
l2306144E:
	a0_118 = 0<32>
l23061466:
	s0Out = s0_100
	s1Out = s1_101
	a0Out = a0_118
	a2Out = dwArg48
	a3Out = a3_135
	a4Out = a4_102
	a5Out = a5_112
	a7Out = a7
	s2Out = s2_15
	s3Out = s3_19
	s4Out = dwArg04
	s8Out = dwLoc1C
	return ra
mbedtls_mpi_shift_l_exit:


word32 mbedtls_mpi_shift_r(word32 ra, word32 a1, word32 a2, word32 a5, word32 mstatus, word32 dwArg00, word32 dwArg04, word32 dwArg28, word32 dwArg38, word32 dwArgF8, word32 dwArg0138, word32 dwArg0178, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_mpi_div_mpi
//      mbedtls_mpi_gcd
//      mbedtls_mpi_inv_mod
//      mbedtls_ecp_mul
// MayUse:  a1:[0..31] a2:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] Stack +0000:[0..31] Stack +0004:[0..31] Stack +0028:[0..31] Stack +0038:[0..31] Stack +00F8:[0..31] Stack +0138:[0..31] Stack +0178:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 ra s1 s2 s3 s4 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_mpi_shift_r_entry:
l230614E0:
	word32 a0_5 = Mem0[a5 + 4<i32>:word32]
	word32 a3_124 = a1 >>u 5<u32>
	branch a5 <u a1 >>u 5<u32> l230614F4
l230614EE:
	word32 a5_11
	word32 a1_10
	branch a5 != a1 >>u 5<u32> l230614FA
l230614FA:
	a5_11 = 0x1F<32>
	a1_10 = a1
	branch a1 <=u 0x1F<32> l23061514
l23061500:
	a1_10 = a1 >>u 5<u32> << 2<u32>
	a5_11 = 0<32>
l23061506:
	a2 = a2 - (a1 >>u 5<u32>)
	branch a5_11 <u a2 l2306151A
l2306151A:
	a2 = a2 + (a5_11 << 2<u32>)
	Mem26[a2:word32] = Mem13[a2 + a1_10:int32]
	a5_11 = a5_11 + 1<32>
	a1_10 = a1_10 + 4<32>
l230614F2:
	branch (a1 & 31<i32>) == 0<32> l2306157E
l2306157E:
	a5_11 = 0x1F<32>
	a1_10 = a1
	branch a1 <=u 0x1F<32> l23061516
l23061584:
	a5_11 = 0<32>
	a1_10 = a1
l2306150E:
	branch a5_11 <u a3_124 l23061534
l23061534:
	a2 = a5_11 << 2<u32>
	a3_124 = a3_124 + a2
	Mem37[a3_124:word32] = 0<32>
	a5_11 = a5_11 + 1<32>
l23061514:
	branch (a1 & 31<i32>) != 0<32> l23061544
l23061544:
	word32 a7_45 = 0<32>
	word32 a6_47 = 32<i32> - (a1 & 31<i32>)
l23061552:
	a5_11 = a5_11 + 0xFFFFFFFF<32>
	branch a5_11 == 0xFFFFFFFF<32> l23061516
l23061558:
	Mem59[Mem52[a1_10:word32]:word32] = a1_10 >>u (a1 & 31<i32>)
	a3_124 = Mem59[a5_11 << 2<u32>:word32]
	a2 = a5_11 << 2<u32> | a7_45
	Mem64[a2:word32] = a3_124
	a7_45 = a1_10 << a6_47
l23061516:
	s1Out = s1
	a0Out = 0<32>
	a1Out = a1_10
	a2Out = a2
	a3Out = a3_124
	a4Out = a1 & 31<i32>
	a5Out = a5_11
	s2Out = s2
	s3Out = s3
	s4Out = s4
	s8Out = s8
	return ra
l230614F4:
l230614F6_thunk_mbedtls_mpi_lset:
	word32 a1_77
	word32 a2_78
	word32 a3_79
	word32 a4_80
	word32 a5_81
	word32 s1_85
	word32 s2_86
	word32 s3_87
	word32 s4_88
	word32 s8_89
	word32 a7_249
	word32 ra_84 = mbedtls_mpi_lset(ra, a1 >>u 5<u32>, a1 & 31<i32>, mstatus, dwArg00, dwArg04, dwArg28, dwArg38, dwArgF8, dwArg0138, dwArg0178, out s1_85, out a1_77, out a2_78, out a3_79, out a4_80, out a5_81, out a7_249, out s2_86, out s3_87, out s4_88, out s8_89)
	s1Out = s1_85
	a0Out = a0_5
	a1Out = a1_77
	a2Out = a2_78
	a3Out = a3_79
	a4Out = a4_80
	a5Out = a5_81
	s2Out = s2_86
	s3Out = s3_87
	s4Out = s4_88
	s8Out = s8_89
	return ra_84
mbedtls_mpi_shift_r_exit:


word32 mbedtls_mpi_cmp_abs(word32 a2, word32 a3, word32 a4, word32 a5, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mpi_montmul
//      mbedtls_mpi_sub_abs
//      mbedtls_mpi_add_mpi
//      mbedtls_mpi_sub_mpi
//      mbedtls_mpi_div_mpi
// MayUse:  a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31]
// LiveOut: a0 a1 a3 a4 a5
// Trashed: a0 a1 a3 a4 a5
// Preserved: sp
mbedtls_mpi_cmp_abs_entry:
l23061588:
l2306158A:
	branch a5 != 0<32> l23061596
l23061596:
	a3 = a5 << 2<u32>
	a4 = Mem0[a4 + a3 + -4<i32>:int32]
	branch a4 != 0<32> l2306158C
l230615A4:
	a5 = a5 + 0xFFFFFFFF<32>
l2306158C:
	word32 a1_18 = Mem0[a3 + 4<i32>:word32]
l2306158E:
	word32 a4_26
	branch a3 != 0<32> l230615A8
l230615A8:
	a1_18 = Mem0[a2 + 8<i32>:word32]
	branch Mem0[(a3 << 2<u32>) + a2 + -4<i32>:int32] != 0<32> l230615BA
l230615BA:
	a4_26 = 1<32>
	branch a3 <u a5 l230615D0
l230615C0:
	a4_26 = 0xFFFFFFFF<32>
	branch a5 <u a3 l230615D0
l230615C6:
	a5 = a5 + 0xFFFFFFFF<32>
	a1_18 = 0xFFFFFFFF<32>
l230615CA:
	branch a5 != 0xFFFFFFFF<32> l230615D4
l230615D4:
	word32 a4_36 = a5 << 2<u32>
	a3 = Mem0[a3 + a4_36:word32]
	word32 a4_41 = Mem0[a4_36 + a2:word32]
	branch a4_41 <u a3 l230615F0
l230615F0:
	a4_26 = 1<32>
l230615E6:
	a5 = a5 + 0xFFFFFFFF<32>
	branch a3 >=u a4_41 l230615CA
l230615EC:
	a4_26 = 0xFFFFFFFF<32>
l230615CE:
	a4_26 = 0<32>
l230615B6:
	a3 = a3 + 0xFFFFFFFF<32>
l23061590:
	a4_26 = CONVERT(a5 != 0<32>, bool, word32)
l230615D0:
	a1Out = a1_18
	a3Out = a3
	a4Out = a4_26
	a5Out = a5
	return a4_26
mbedtls_mpi_cmp_abs_exit:


word32 mpi_montmul(word32 ra, word32 a0, word32 a1, word32 a3, word32 a4, word32 a5, word32 dwArg010C, ptr32 & t1Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a7Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s9Out, ptr32 & s10Out, ptr32 & s11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_mpi_exp_mod
// MayUse:  a0:[0..31] a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] ra:[0..31] Stack +010C:[0..31]
// LiveOut: a0 a2 a3 a4 a5 a7 ra s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t1
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mpi_montmul_entry:
l230615F4:
	word32 a2_5 = Mem0[a5 + 4<i32>:word32]
	word32 a7_7 = Mem0[a4 + 4<i32>:int32]
	branch a7_7 <u a5 + 1<32> l230616F8
l230616F8:
l23061600:
	word32 a6_10 = Mem0[a4 + 8<i32>:int32]
	branch a6_10 == 0<32> l230616FA
l230616FA:
	t1Out = t1
	s1Out = s1
	a0Out = 0xFFFFFFFC<32>
	a2Out = a2_5
	a3Out = a3
	a4Out = a4
	a5Out = 0xFFFFFFFC<32>
	a7Out = a7_7
	s2Out = s2
	s3Out = s3
	s4Out = s4
	s5Out = s5
	s6Out = s6
	s7Out = s7
	s8Out = s8
	s9Out = s9
	s10Out = s10
	s11Out = s11
	return ra
l2306160A:
	word32 a1_358
	word32 t1_356
	word32 a2_359
	word32 a0_357
	word32 a4_361
	word32 a5_362
	word32 a3_360
	memset(ra, a6_10, 0<32>, a7_7 << 2<u32>, out t1_356, out a0_357, out a1_358, out a2_359, out a3_360, out a4_361, out a5_362)
	word32 s8_61 = Mem49[a2_5 + 4<i32>:int32]
	word32 s10_190 = Mem49[a1 + 4<i32>:int32]
	word32 a5_115 = Mem49[a4 + 8<i32>:int32]
	branch s8_61 >=u s10_190 l2306164E
l2306164C:
	s10_190 = s8_61
l2306164E:
	word32 s6_67 = s8_61 + 1<i32> << 2<i32>
	word32 s3_70 = 0<32>
	s2_292 = s2
l23061658:
	word32 s2_292
	word32 a0_73 = Mem72[a0 + 8<i32>:int32]
	branch s3_70 != s8_61 l230616A8
l230616A8:
	word32 a4_78 = s3_70 << 2<u32>
	word32 a1_77 = Mem72[a1 + 8<i32>:int32]
	s11 = Mem72[a0_73 + a4_78:int32]
	word32 s1_82 = Mem72[a4_78:word32]
	s2_292 = s11 + Mem72[a1_77:int32] + a4_78 + a3
	word32 a2_363
	word32 a4_364
	word32 a2_366
	word32 a5_365
	word32 a4_367
	mpi_mul_hlp(s8_61, mpi_mul_hlp(s10_190, a1_77, s1_82, s11, out a2_363, out a4_364, out a5_365), s1_82, s2_292, out a2_366, out a4_367, out a5_115)
	Mem124[s1_82 + 0x1000<32>:word32] = s11
	Mem125[s1_82 + 4<32> + s6_67:word32] = 0<32>
	s3_70 = s3_70 + 1<32>
l23061660:
	word32 a2_155
	word32 a4_130
	word32 a5_131
	word32 a2_134
	word32 a3_135
	word32 a1_368
	word32 a6_369
	word32 a7_370
	memcpy(a0_73, s6_67 + -4<i32> + a5_115, s6_67, out a1_368, out a2_134, out a3_135, out a4_130, out a5_131, out a6_369, out a7_370)
	word32 a4_150
	word32 a1_371
	word32 a3_372
	word32 a5_373
	word32 a0_147 = mbedtls_mpi_cmp_abs(a2_134, a3_135, a4_130, a5_131, out a1_371, out a3_372, out a4_150, out a5_373)
	word32 a1_152 = Mem72[a0 + 8<i32>:int32]
	branch a0_147 < 0<32> l230616F2
l230616F2:
	a2_155 = Mem72[a4 + 8<i32>:int32]
l2306167C:
	a2_155 = a1_152
l23061680:
	word32 a4_165
	word32 a7_168
	word32 a5_375
	word32 a2_374
	word32 t1_169 = mpi_sub_hlp(s3_70, a1_152, a2_155, a4_150, out a2_374, out a4_165, out a5_375, out a7_168)
	0<32> = dwArg010C
	t1Out = t1_169
	s1Out = dwLoc4C
	a0Out = 0<32>
	a2Out = dwArg01A8
	a3Out = s2
	a4Out = a4_165
	a5Out = 0<32>
	a7Out = a7_168
	s2Out = s2_292
	s3Out = s3_70
	s4Out = dwArg0168
	s5Out = a0
	s6Out = s6_67
	s7Out = a3
	s8Out = dwArg0148
	s9Out = a1
	s10Out = s10_190
	s11Out = s11
	return dwLoc08
mpi_montmul_exit:


word32 mbedtls_mpi_cmp_mpi(word32 a2, word32 a4, word32 a5, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_check_pubkey
//      mbedtls_rsa_check_privkey
//      mbedtls_rsa_check_pub_priv
//      mbedtls_rsa_public
//      mbedtls_rsa_private
//      mbedtls_mpi_cmp_int
//      mbedtls_mpi_div_mpi
//      mbedtls_mpi_exp_mod
//      mbedtls_mpi_gcd
//      mbedtls_mpi_inv_mod
//      ecp_modp
//      ecp_double_jac
//      ecp_add_mixed
//      mbedtls_ecp_check_pubkey
//      mbedtls_ecp_check_privkey
//      mbedtls_ecp_mul
//      mbedtls_ecp_check_pub_priv
// MayUse:  a2:[0..31] a4:[0..31] a5:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 a6
// Trashed: a0 a1 a2 a3 a4 a5 a6
// Preserved: sp
mbedtls_mpi_cmp_mpi_entry:
l230616FE:
l23061700:
	branch a5 != 0<32> l2306170C
l2306170C:
	a3 = a5 << 2<u32>
	a4 = Mem0[a4 + a3 + -4<i32>:int32]
	branch a4 != 0<32> l23061702
l2306171A:
	a5 = a5 + 0xFFFFFFFF<32>
l23061702:
	word32 a1_16 = Mem0[a4 + 4<i32>:word32]
l23061704:
	branch a4 != 0<32> l2306171E
l2306171E:
	a6 = Mem0[a1_16 + 8<i32>:int32]
	a3 = Mem0[(a4 << 2<u32>) + a6 + -4<i32>:int32]
	branch a3 != 0<32> l23061732
l23061732:
	branch a4 >=u a5 l2306173C
l2306173C:
	a1_16 = Mem0[a3:word32]
	branch a5 >=u a4 l23061748
l23061748:
	branch a4 <= 0<32> l23061756
l23061756:
	branch a3 <= 0<32> l2306177E
l2306175A:
	branch a4 == 0<32> l2306177E
l2306175C:
	a4 = 0xFFFFFFFF<32>
l2306174E:
	branch a3 >= 0<32> l2306177E
l2306177E:
	a5 = a5 + 0xFFFFFFFF<32>
	a1_16 = 0xFFFFFFFF<32>
l23061782:
	branch a5 != 0xFFFFFFFF<32> l23061760
l23061760:
	word32 a3_36 = a5 << 2<u32>
	a2 = Mem0[a2 + a3_36:word32]
	a3 = Mem0[a3_36 + a6:word32]
	branch a3 <u a2 l23061738
l23061772:
	a5 = a5 + 0xFFFFFFFF<32>
	branch a2 >=u a3 l23061782
l23061778:
	a4 = 0<32> - a4
l23061786:
	a4 = 0<32>
l23061752:
	a4 = 1<32>
l23061742:
	a4 = 0<32> - a3
l2306172E:
	a4 = a4 + 0xFFFFFFFF<32>
l23061706:
	a4 = 0<32>
	branch a5 != 0<32> l23061736
l23061736:
l2306170A:
l23061738:
	a1Out = a1_16
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5
	a6Out = a6
	return a4
mbedtls_mpi_cmp_mpi_exit:


word32 mbedtls_mpi_cmp_int(word32 a1, word32 a2, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_check_privkey
//      mbedtls_rsa_private
//      mbedtls_mpi_div_mpi
//      mbedtls_mpi_exp_mod
//      mbedtls_mpi_gcd
//      mbedtls_mpi_inv_mod
//      ecp_select_comb
//      ecp_modp
//      ecp_double_jac
//      ecp_normalize_jac
//      ecp_add_mixed
//      mbedtls_ecp_check_pubkey
//      mbedtls_ecp_check_privkey
//      mbedtls_ecp_mul
// MayUse:  a1:[0..31] a2:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 a6
// Trashed: a0 a1 a2 a3 a4 a5 a6 t3
// Preserved: sp
mbedtls_mpi_cmp_int_entry:
l2306178A:
	branch a1 >= 0<32> l230617A2
l230617A0:
l230617A2:
	word32 a1_24
	word32 a2_25
	word32 a3_26
	word32 a4_27
	word32 a5_28
	word32 a6_29
	word32 a0_23 = mbedtls_mpi_cmp_mpi(a2, a1 >> 0x1F<u32>, 1<32>, out a1_24, out a2_25, out a3_26, out a4_27, out a5_28, out a6_29)
	a1Out = a1_24
	a2Out = a2_25
	a3Out = a3_26
	a4Out = a4_27
	a5Out = a5_28
	a6Out = a6_29
	return a0_23
mbedtls_mpi_cmp_int_exit:


word32 mbedtls_mpi_add_abs(word32 ra, word32 s0, word32 a0, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 s2, word32 mstatus, word32 dwArg08, word32 dwArgB8, word32 dwArgD8, word32 dwArgF8, word32 dwArg0118, word32 dwArg0128, word32 dwArg0138, word32 dwArg0158, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a7Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_mpi_add_mpi
//      mbedtls_mpi_sub_mpi
//      ecp_mod_p256k1
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] s0:[0..31] s2:[0..31] Stack +0008:[0..31] Stack +00B8:[0..31] Stack +00D8:[0..31] Stack +00F8:[0..31] Stack +0118:[0..31] Stack +0128:[0..31] Stack +0138:[0..31] Stack +0158:[0..31]
// LiveOut: a0 a1 a3 a4 a5 a7 ra s0 s1 s2 s3 s4
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_mpi_add_abs_entry:
l230617B6:
	word32 a1_155
	word32 a5_138
	word32 a7_110
	word32 s3_104
	word32 s1_102
	word32 s4_114
	word32 s0_143
	word32 s2_103 = a0
	s0_143 = s0
	branch a0 == a2 l230617D2
l230617CC:
	s0_143 = s0
	branch a0 != a1 l23061830
l23061830:
	word32 a0_26
	word32 a6_373
	word32 s4_374
	word32 s8_375
	word32 a2_372
	ra = mbedtls_mpi_copy(ra, a0, a1, a2, a3, a4, a5, mstatus, dwLoc18, dwArgB8, dwArgF8, dwArg0138, out s0_143, out s1_102, out a0_26, out a1_155, out a2_372, out a3, out a4, out a5_138, out a6_373, out a7_110, out s2_103, out s3_104, out s4_374, out s8_375)
	s4_114 = a0_26
	branch a0_26 == 0<32> l230617D0
l230617D0:
l230617D2:
	Mem55[s2_103:word32] = 1<32>
	word32 a5_52 = 1<32>
l230617DA:
	branch s0_143 != 0<32> l2306184E
l2306184E:
	a4 = s0_143 << 2<u32>
	a5_52 = Mem55[a5_52 + a4 + -4<i32>:int32]
	branch a5_52 != 0<32> l230617DC
l2306185C:
	s0_143 = s0_143 + 0xFFFFFFFF<32>
l230617DC:
	word32 a0_93
	word32 s4_377
	word32 s8_378
	word32 a2_376
	ra = mbedtls_mpi_grow(ra, s0_143, a3, a4, mstatus, s2, s0, dwArg08, dwArgD8, dwArg0118, dwArg0158, out s1_102, out a0_93, out a1_155, out a2_376, out a3, out a4, out a5_138, out a7_110, out s2_103, out s3_104, out s4_377, out s8_378)
	s4_114 = a0_93
	branch a0_93 != 0<32> l2306183C
l230617E8:
	word32 a5_115 = Mem55[s2_103 + 8<i32>:int32]
	a3 = 0<32>
	s1_102 = 0<32>
l230617F4:
	branch s0_143 != a3 l23061860
l23061860:
	word32 a4_125 = Mem124[a1_155:word32]
	word32 a4_130 = a4_125 + s1_102
	word32 a4_132 = a4_130 + a1_155
	Mem133[Mem124[a4_125:word32] + 0x1000<32>:word32] = a4_132
	a3 = a3 + 1<32>
	s1_102 = CONVERT((a4_130 <u s1_102) + (a4_132 <u a1_155), bool, bool)
l230617F8:
	a4 = s0_143 << 2<u32>
	a5_138 = a5_115 + a4
l230617FE:
	branch s1_102 == 0<32> l2306183C
l23061800:
	a4 = Mem141[s2_103 + 4<i32>:int32]
	s3_104 = s0_143 + 1<i32>
	branch s0_143 <u a4 l2306181E
l2306180C:
	word32 a0_151
	word32 a2_379
	word32 s8_380
	ra = mbedtls_mpi_grow(ra, s3_104, a3, a4, mstatus, s2, s0, dwArg08, dwArgD8, dwArg0118, dwArg0158, out s1_102, out a0_151, out a1_155, out a2_379, out a3, out a4, out a5_138, out a7_110, out s2_103, out s3_104, out s4_114, out s8_380)
	branch a0_151 != 0<32> l23061882
l23061882:
	s4_114 = a0_151
l2306183C:
	0<32> = dwArg0128
	s0Out = dwArgE4
	s1Out = s1_102
	a0Out = s4_114
	a1Out = a1_155
	a3Out = a3
	a4Out = a4
	a5Out = a5_138
	a7Out = a7_110
	s2Out = s2_103
	s3Out = s3_104
	s4Out = s4_114
	return ra
mbedtls_mpi_add_abs_exit:
l23061816:
l2306181E:
	word32 a5_189 = Mem141[a4:word32]
	a4 = a4 + s1_102
	Mem195[a5_189 + 0x1000<32>:word32] = a4
	s0_143 = s3_104
	a5_138 = a5_189 + 4<32>
	s1_102 = CONVERT(a4 <u s1_102, bool, word32)


word32 mbedtls_mpi_sub_abs(word32 ra, word32 a0, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 mstatus, word32 dwArgB8, word32 dwArgF8, word32 dwArg0118, word32 dwArg0128, word32 dwArg0138, word32 dwArg0158, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a7Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_mpi_add_mpi
//      mbedtls_mpi_sub_mpi
//      mbedtls_mpi_gcd
//      ecp_modp
//      ecp_double_jac
//      ecp_add_mixed
//      mbedtls_ecp_check_pubkey
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] Stack +00B8:[0..31] Stack +00F8:[0..31] Stack +0118:[0..31] Stack +0128:[0..31] Stack +0138:[0..31] Stack +0158:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 a7 ra s0 s1 s2 s3 s4 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_mpi_sub_abs_entry:
l23061886:
	word32 s3_244 = a1
	word32 s2_13 = a0
	word32 s1_150 = a2
	word32 a1_103
	word32 a3_147
	word32 a4_121
	word32 a5_145
	word32 a0_100 = mbedtls_mpi_cmp_abs(a2, a3, a4, a5, out a1_103, out a3_147, out a4_121, out a5_145)
	word32 s0_117 = 0xFFFFFFF6<32>
	branch a0_100 < 0<32> l230618EE
l230618A6:
	word32 a5_126 = 1<32>
	branch a2 != a0 l230618C0
l230618B2:
	word32 s0_302
	word32 s1_303
	word32 a6_304
	word32 s4_305
	ra = mbedtls_mpi_copy(ra, fp + -44<i32>, a2, a2, a3_147, a4_121, 1<32>, mstatus, dwLoc18, dwArgB8, dwArgF8, dwArg0138, out s0_302, out s1_303, out a0_100, out a1_103, out a2, out a3_147, out a4_121, out a5_126, out a6_304, out a7, out s2_13, out s3_244, out s4_305, out s8)
	s0_117 = a0_100
	branch a0_100 != 0<32> l230618E8
l230618BE:
l230618C0:
	branch s3_244 != s2_13 l230618DC
l230618DC:
	word32 s0_309
	word32 s1_310
	word32 a3_311
	word32 a6_312
	word32 s4_313
	ra = mbedtls_mpi_copy(ra, s2_13, s3_244, a2, a3_147, a4_121, a5_126, mstatus, dwLoc18, dwArgB8, dwArgF8, dwArg0138, out s0_309, out s1_310, out a0_100, out a1_103, out a2, out a3_311, out a4_121, out a5_126, out a6_312, out a7, out s2_13, out s3_244, out s4_313, out s8)
	s0_117 = a0_100
	branch a0_100 == 0<32> l230618C4
l230618C4:
	Mem99[s2_13:word32] = 1<32>
l230618CE:
	branch a0_100 != 0<32> l230618FE
l230618FE:
	branch Mem99[(a0_100 << 2<u32>) + a1_103 + -4<i32>:int32] != 0<32> l230618D0
l2306190A:
	a0_100 = a0_100 + 0xFFFFFFFF<32>
l230618D0:
	mpi_sub_hlp(a0_100, a1_103, Mem99[s2_13 + 8<i32>:int32], a4_121, out a2, out a4_121, out a5_126, out a7)
	s0_117 = 0<32>
l230618E8:
	word32 a0_306
	word32 a2_307
	word32 a6_308
	s1_150 = mbedtls_mpi_free(fp + -44<i32>, a2, a4_121, a5_126, mstatus, dwArg0118, dwArg0158, out a0_306, out a1_103, out a2_307, out a3_147, out a4_121, out a5_145, out a6_308, out s4)
l230618EE:
	0<32> = dwArg0128
	s0Out = dwArgE4
	s1Out = s1_150
	a0Out = s0_117
	a1Out = a1_103
	a2Out = dwArg0100
	a3Out = a3_147
	a4Out = a4_121
	a5Out = a5_145
	a7Out = a7
	s2Out = s2_13
	s3Out = s3_244
	s4Out = s4
	s8Out = s8
	return ra
mbedtls_mpi_sub_abs_exit:


word32 mbedtls_mpi_add_mpi(word32 ra, word32 s0, word32 a0, word32 a3, word32 a4, word32 a5, word32 s2, word32 mstatus, word32 dwArg98, word32 dwArgB8, word32 dwArgD8, word32 dwArgF8, word32 dwArg0108, word32 dwArg0118, word32 dwArg0138, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a7Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_private
//      mbedtls_mpi_div_mpi
//      mbedtls_mpi_exp_mod
//      mbedtls_mpi_inv_mod
//      ecp_modp
//      ecp_double_jac
//      ecp_add_mixed
//      mbedtls_ecp_check_pubkey
// MayUse:  a0:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] s0:[0..31] s2:[0..31] Stack +0098:[0..31] Stack +00B8:[0..31] Stack +00D8:[0..31] Stack +00F8:[0..31] Stack +0108:[0..31] Stack +0118:[0..31] Stack +0138:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 a7 ra s0 s1 s2 s3 s4 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_mpi_add_mpi_entry:
l2306190E:
	word32 s3_179
	word32 s2_176
	word32 s1_106
	word32 s0_108
	word32 ra_171
	word32 a7_168
	word32 a1_156
	word32 a0_105
	word32 a3_159
	word32 a4_162
	word32 a5_165
	word32 a1_14 = Mem13[s0:word32]
	word32 a2_16 = Mem13[a5:word32]
	word32 a5_19 = s0 + a5
	branch a5_19 >= 0<32> l23061966
l23061966:
	word32 s4_213
	ra_171 = mbedtls_mpi_add_abs(ra, s0, a0, a1_14, a2_16, a3, a4, a5_19, s2, mstatus, s2, dwArg98, dwArgB8, dwArgD8, dwArgF8, dwArg0108, dwArg0118, dwArg0138, out s0_108, out s1_106, out a0_105, out a1_156, out a3_159, out a4_162, out a5_165, out a7_168, out s2_176, out s3_179, out s4_213)
l23061928:
	word32 a3_51
	word32 a4_52
	word32 a5_53
	word32 a1_214
	branch mbedtls_mpi_cmp_abs(a2_16, a3, a4, a5_19, out a1_214, out a3_51, out a4_52, out a5_53) < 0<32> l23061948
l23061948:
	word32 s0_63
	word32 a2_215
	word32 s4_216
	word32 s8_217
	ra_171 = mbedtls_mpi_sub_abs(ra, a0, a2_16, a1_14, a3_51, a4_52, a5_53, mstatus, dwArg98, dwArgD8, dwArgF8, dwArg0108, dwArg0118, dwArg0138, out s0_63, out s1_106, out a0_105, out a1_156, out a2_215, out a3_159, out a4_162, out a5_165, out a7_168, out s2_176, out s3_179, out s4_216, out s8_217)
	s0_108 = 0<32> - s0_63
	branch a0_105 == 0<32> l23061944
l23061938:
	word32 a2_218
	word32 s4_219
	word32 s8_220
	ra_171 = mbedtls_mpi_sub_abs(ra, a0, a1_14, a2_16, a3_51, a4_52, a5_53, mstatus, dwArg98, dwArgD8, dwArgF8, dwArg0108, dwArg0118, dwArg0138, out s0_108, out s1_106, out a0_105, out a1_156, out a2_218, out a3_159, out a4_162, out a5_165, out a7_168, out s2_176, out s3_179, out s4_219, out s8_220)
l23061942:
	branch a0_105 != 0<32> l23061958
l23061944:
	Mem110[s0_108:word32] = s1_106
l23061958:
	s0Out = s0_108
	s1Out = s1_106
	a0Out = a0_105
	a1Out = a1_156
	a2Out = dwArg48
	a3Out = a3_159
	a4Out = a4_162
	a5Out = a5_165
	a7Out = a7_168
	s2Out = s2_176
	s3Out = s3_179
	s4Out = dwArg04
	s8Out = dwLoc1C
	return ra_171
mbedtls_mpi_add_mpi_exit:


word32 mbedtls_mpi_sub_mpi(word32 ra, word32 s0, word32 a0, word32 a3, word32 a4, word32 a5, word32 s2, word32 mstatus, word32 dwArg98, word32 dwArgB8, word32 dwArgD8, word32 dwArgF8, word32 dwArg0108, word32 dwArg0118, word32 dwArg0138, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_private
//      mbedtls_mpi_sub_int
//      mbedtls_mpi_div_mpi
//      mbedtls_mpi_inv_mod
//      ecp_select_comb
//      ecp_modp
//      ecp_double_jac
//      ecp_add_mixed
//      mbedtls_ecp_mul
// MayUse:  a0:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] s0:[0..31] s2:[0..31] Stack +0098:[0..31] Stack +00B8:[0..31] Stack +00D8:[0..31] Stack +00F8:[0..31] Stack +0108:[0..31] Stack +0118:[0..31] Stack +0138:[0..31]
// LiveOut: a0 a2 a3 a4 a5 ra s0 s1 s2 s3 s4 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_mpi_sub_mpi_entry:
l2306196C:
	word32 s3_179
	word32 s2_176
	word32 s1_106
	word32 s0_108
	word32 ra_171
	word32 a0_105
	word32 a3_159
	word32 a4_162
	word32 a5_165
	word32 a1_14 = Mem13[s0:word32]
	word32 a2_16 = Mem13[a5:word32]
	word32 a5_19 = s0 + a5
	branch a5_19 <= 0<32> l230619C4
l230619C4:
	word32 a1_211
	word32 a7_212
	word32 s4_213
	ra_171 = mbedtls_mpi_add_abs(ra, s0, a0, a1_14, a2_16, a3, a4, a5_19, s2, mstatus, s2, dwArg98, dwArgB8, dwArgD8, dwArgF8, dwArg0108, dwArg0118, dwArg0138, out s0_108, out s1_106, out a0_105, out a1_211, out a3_159, out a4_162, out a5_165, out a7_212, out s2_176, out s3_179, out s4_213)
l23061986:
	word32 a3_51
	word32 a4_52
	word32 a5_53
	word32 a1_214
	branch mbedtls_mpi_cmp_abs(a2_16, a3, a4, a5_19, out a1_214, out a3_51, out a4_52, out a5_53) < 0<32> l230619A6
l230619A6:
	word32 s0_63
	word32 a1_215
	word32 a2_216
	word32 a7_217
	word32 s4_218
	word32 s8_219
	ra_171 = mbedtls_mpi_sub_abs(ra, a0, a2_16, a1_14, a3_51, a4_52, a5_53, mstatus, dwArg98, dwArgD8, dwArgF8, dwArg0108, dwArg0118, dwArg0138, out s0_63, out s1_106, out a0_105, out a1_215, out a2_216, out a3_159, out a4_162, out a5_165, out a7_217, out s2_176, out s3_179, out s4_218, out s8_219)
	s0_108 = 0<32> - s0_63
	branch a0_105 == 0<32> l230619A2
l23061996:
	word32 a1_220
	word32 a2_221
	word32 a7_222
	word32 s4_223
	word32 s8_224
	ra_171 = mbedtls_mpi_sub_abs(ra, a0, a1_14, a2_16, a3_51, a4_52, a5_53, mstatus, dwArg98, dwArgD8, dwArgF8, dwArg0108, dwArg0118, dwArg0138, out s0_108, out s1_106, out a0_105, out a1_220, out a2_221, out a3_159, out a4_162, out a5_165, out a7_222, out s2_176, out s3_179, out s4_223, out s8_224)
l230619A0:
	branch a0_105 != 0<32> l230619B6
l230619A2:
	Mem110[s0_108:word32] = s1_106
l230619B6:
	s0Out = s0_108
	s1Out = s1_106
	a0Out = a0_105
	a2Out = dwArg48
	a3Out = a3_159
	a4Out = a4_162
	a5Out = a5_165
	s2Out = s2_176
	s3Out = s3_179
	s4Out = dwArg04
	s8Out = dwLoc1C
	return ra_171
mbedtls_mpi_sub_mpi_exit:


word32 mbedtls_mpi_sub_int(word32 ra, word32 s0, word32 a0, word32 a2, word32 a3, word32 s2, word32 mstatus, word32 dwArg78, word32 dwArg98, word32 dwArgB8, word32 dwArgD8, word32 dwArgE8, word32 dwArgF8, word32 dwArg0118, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_check_privkey
//      mbedtls_ecp_check_pubkey
// MayUse:  a0:[0..31] a2:[0..31] a3:[0..31] mstatus:[0..31] ra:[0..31] s0:[0..31] s2:[0..31] Stack +0078:[0..31] Stack +0098:[0..31] Stack +00B8:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +00F8:[0..31] Stack +0118:[0..31]
// LiveOut: a0 a2 a3 a4 a5 ra s2 s3 s4
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_mpi_sub_int_entry:
l230619CA:
	branch a2 >= 0<32> l230619E2
l230619E0:
l230619E2:
	word32 a0_32
	word32 a2_34
	word32 a3_35
	word32 a4_36
	word32 a5_37
	word32 s2_43
	word32 s3_44
	word32 s4_45
	word32 s0_85
	word32 s1_86
	word32 s8_87
	word32 ra_40 = mbedtls_mpi_sub_mpi(ra, s0, a0, a3, a2 >> 0x1F<u32>, 1<32>, s2, mstatus, dwArg78, dwArg98, dwArgB8, dwArgD8, dwArgE8, dwArgF8, dwArg0118, out s0_85, out s1_86, out a0_32, out a2_34, out a3_35, out a4_36, out a5_37, out s2_43, out s3_44, out s4_45, out s8_87)
	a0Out = a0_32
	a2Out = a2_34
	a3Out = a3_35
	a4Out = a4_36
	a5Out = a5_37
	s2Out = s2_43
	s3Out = s3_44
	s4Out = s4_45
	return ra_40
mbedtls_mpi_sub_int_exit:


word32 mbedtls_mpi_mul_mpi(word32 ra, word32 a0, word32 a1, word32 a2, word32 a3, word32 a4, word32 s2, word32 s4, word32 s6, word32 mstatus, word32 dwArgA8, word32 dwArgB8, word32 dwArgC8, word32 dwArgE8, word32 dwArgF8, word32 dwArg0108, word32 dwArg0128, word32 dwArg0138, word32 dwArg0148, word32 dwArg0198, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_check_privkey
//      mbedtls_rsa_private
//      mbedtls_mpi_mul_int
//      ecp_double_jac
//      ecp_normalize_jac
//      ecp_normalize_jac_many
//      ecp_add_mixed
//      mbedtls_ecp_check_pubkey
//      mbedtls_ecp_mul
//      ecp_mod_p256k1
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] mstatus:[0..31] ra:[0..31] s2:[0..31] s4:[0..31] s6:[0..31] Stack +00A8:[0..31] Stack +00B8:[0..31] Stack +00C8:[0..31] Stack +00E8:[0..31] Stack +00F8:[0..31] Stack +0108:[0..31] Stack +0128:[0..31] Stack +0138:[0..31] Stack +0148:[0..31] Stack +0198:[0..31]
// LiveOut: a0 a2 a3 a4 a5 ra s0 s1 s2 s3 s4 s5 s6 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s5 s6 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_mpi_mul_mpi_entry:
l230619F6:
	word32 s2_169
	word32 s3_180
	word32 a5_102 = 1<32>
	word32 s4_28 = a0
	word32 s0_111 = a2
	word32 s1_32 = a1
	branch a0 != a1 l23061A4E
l23061A20:
	word32 a0_37
	word32 a1_492
	word32 a6_493
	word32 a7_494
	word32 s3_495
	word32 s8_496
	word32 s1_491
	ra = mbedtls_mpi_copy(ra, fp + -56<i32>, a1, a2, a3, a4, 1<32>, mstatus, s2, dwArgA8, dwArgE8, dwArg0128, out s0_111, out s1_491, out a0_37, out a1_492, out a2, out a3, out a4, out a5_102, out a6_493, out a7_494, out s2_169, out s3_495, out s4_28, out s8_496)
	s3_180 = a0_37
	s1_32 = fp + -56<i32>
	branch a0_37 == 0<32> l23061A4E
l23061A4E:
	branch s4_28 != s0_111 l23061A60
l23061A52:
	word32 a0_73
	word32 s8_513
	word32 a1_508
	word32 a6_509
	word32 a7_510
	word32 s3_511
	word32 s4_512
	word32 s0_507
	ra = mbedtls_mpi_copy(ra, fp + -44<i32>, s4_28, a2, a3, a4, a5_102, mstatus, s2, dwArgA8, dwArgE8, dwArg0128, out s0_507, out s1_32, out a0_73, out a1_508, out a2, out a3, out a4, out a5_102, out a6_509, out a7_510, out s2_169, out s3_511, out s4_512, out s8_513)
	s3_180 = a0_73
	branch a0_73 != 0<32> l23061A2C
l23061A5E:
	s0_111 = fp + -44<i32>
l23061A60:
	s5 = Mem26[s1_32 + 4<i32>:int32]
l23061A64:
	branch s5 != 0<32> l23061AA0
l23061AA0:
	a4 = s5 << 2<u32>
	a5_102 = Mem26[a5_102 + a4 + -4<i32>:int32]
	branch a5_102 != 0<32> l23061A68
l23061AAE:
	s5 = s5 + 0xFFFFFFFF<32>
l23061A68:
	word32 s2_113 = Mem26[s0_111 + 4<i32>:int32]
l23061A6C:
	branch s2_113 != 0<32> l23061AB2
l23061AB2:
	a4 = s2_113 << 2<u32>
	a5_102 = Mem26[a5_102 + a4 + -4<i32>:int32]
	branch a5_102 != 0<32> l23061A70
l23061AC0:
	s2_113 = s2_113 + 0xFFFFFFFF<32>
l23061A70:
	word32 a0_159
	word32 a3_164
	word32 s4_171
	word32 s1_514
	word32 a7_516
	word32 s3_517
	word32 s8_518
	word32 a1_515
	ra = mbedtls_mpi_grow(ra, s5 + s2_113, a3, a4, mstatus, s6, s4, dwLoc08, dwArgC8, dwArg0108, dwArg0148, out s1_514, out a0_159, out a1_515, out a2, out a3_164, out a4, out a5_102, out a7_516, out s2_169, out s3_517, out s4_171, out s8_518)
	s3_180 = a0_159
	branch a0_159 != 0<32> l23061A2C
l23061A7E:
	word32 a3_185
	word32 s4_194
	word32 s8_522
	word32 s3_521
	word32 s1_519
	word32 a7_520
	word32 a1_183
	ra = mbedtls_mpi_lset(ra, a3_164, a4, mstatus, dwLoc40, 1<32>, dwLoc18, dwLoc08, dwArgB8, dwArgF8, dwArg0138, out s1_519, out a1_183, out a2, out a3_185, out a4, out a5_102, out a7_520, out s2_169, out s3_521, out s4_194, out s8_522)
	s3_180 = s4_171
	s6 = 0xFFFFFFFF<32>
	branch s4_171 != 0<32> l23061A2C
l23061A8C:
	s2_169 = s2_169 + 0xFFFFFFFF<32>
	branch s2_169 != 0xFFFFFFFF<32> l23061AC4
l23061AC4:
	a1_183 = mpi_mul_hlp(s5, a1_183, (s2_169 << 2<u32>) + Mem26[s4_194 + 8<i32>:int32], a3_185, out a2, out a4, out a5_102)
l23061A92:
	a5_102 = a5_102 + a4
	Mem236[s4_194:word32] = a5_102
l23061A2C:
	word32 a2_248
	word32 a5_249
	word32 a4_252
	word32 a1_498
	word32 a6_500
	word32 s4_501
	word32 a3_499
	word32 a0_497
	mbedtls_mpi_free(fp + -44<i32>, a2, a4, a5_102, mstatus, dwArg0108, dwArg0148, out a0_497, out a1_498, out a2_248, out a3_499, out a4_252, out a5_249, out a6_500, out s4_501)
	word32 a5_261
	word32 a3_263
	word32 a4_264
	word32 s4_506
	word32 a6_505
	word32 a0_502
	word32 a1_503
	word32 a2_504
	word32 s1_266 = mbedtls_mpi_free(fp + -56<i32>, a2_248, a4_252, a5_249, mstatus, dwArg0108, dwArg0148, out a0_502, out a1_503, out a2_504, out a3_263, out a4_264, out a5_261, out a6_505, out s4_506)
	0<32> = dwArg0198
	s0Out = dwArg0158
	s1Out = s1_266
	a0Out = s3_180
	a2Out = dwArg0138
	a3Out = a3_263
	a4Out = a4_264
	a5Out = a5_261
	s2Out = s2_169
	s3Out = s3_180
	s4Out = dwArgF4
	s5Out = s5
	s6Out = s6
	s8Out = dwArgD4
	return ra
mbedtls_mpi_mul_mpi_exit:


word32 mbedtls_mpi_mul_int(word32 ra, word32 a0, word32 a1, word32 a3, word32 a4, word32 s2, word32 s4, word32 s6, word32 mstatus, word32 dwArg88, word32 dwArg98, word32 dwArgA8, word32 dwArgC8, word32 dwArgD8, word32 dwArgE8, word32 dwArg0108, word32 dwArg0118, word32 dwArg0128, word32 dwArg0178, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_mpi_div_mpi
//      ecp_double_jac
//      ecp_add_mixed
// MayUse:  a0:[0..31] a1:[0..31] a3:[0..31] a4:[0..31] mstatus:[0..31] ra:[0..31] s2:[0..31] s4:[0..31] s6:[0..31] Stack +0088:[0..31] Stack +0098:[0..31] Stack +00A8:[0..31] Stack +00C8:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +0108:[0..31] Stack +0118:[0..31] Stack +0128:[0..31] Stack +0178:[0..31]
// LiveOut: a0 a2 a3 a4 a5 ra s0 s1 s2 s3 s4 s5 s6 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s5 s6 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_mpi_mul_int_entry:
l23061ADE:
	word32 a2_22
	word32 a3_23
	word32 a4_24
	word32 a5_25
	word32 s0_29
	word32 s1_30
	word32 s2_31
	word32 s3_32
	word32 s4_33
	word32 s5_34
	word32 s8_35
	word32 a0_43
	word32 s6_44
	word32 ra_28 = mbedtls_mpi_mul_mpi(ra, a0, a1, fp + 0xFFFFFFE4<32>, a3, a4, s2, s4, s6, mstatus, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0108, dwArg0118, dwArg0128, dwArg0178, out s0_29, out s1_30, out a0_43, out a2_22, out a3_23, out a4_24, out a5_25, out s2_31, out s3_32, out s4_33, out s5_34, out s6_44, out s8_35)
	s0Out = s0_29
	s1Out = s1_30
	a0Out = a0_43
	a2Out = a2_22
	a3Out = a3_23
	a4Out = a4_24
	a5Out = a5_25
	s2Out = s2_31
	s3Out = s3_32
	s4Out = s4_33
	s5Out = s5_34
	s6Out = s6_44
	s8Out = s8_35
	return ra_28
mbedtls_mpi_mul_int_exit:


word32 mbedtls_mpi_div_mpi(word32 ra, word32 a0, word32 a1, word32 a2, word32 a3, word32 s5, word32 s6, word32 s7, word32 s10, word32 s11, word32 mstatus, word32 dwArg18, word32 dwArg38, word32 dwArg48, word32 dwArg54, word32 dwArg58, word32 dwArg68, word32 dwArg78, word32 dwArg88, word32 dwArg98, word32 dwArgA8, word32 dwArgB8, word32 dwArgD8, word32 dwArgE8, word32 dwArgF8, word32 dwArg0124, word32 dwArg0144, ptr32 & s0Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s9Out, ptr32 & s10Out, ptr32 & s11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_check_privkey
//      ecp_modp
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] mstatus:[0..31] ra:[0..31] s10:[0..31] s11:[0..31] s5:[0..31] s6:[0..31] s7:[0..31] Stack +0018:[0..31] Stack +0038:[0..31] Stack +0048:[0..31] Stack +0054:[0..31] Stack +0058:[0..31] Stack +0068:[0..31] Stack +0078:[0..31] Stack +0088:[0..31] Stack +0098:[0..31] Stack +00A8:[0..31] Stack +00B8:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +00F8:[0..31] Stack +0124:[0..31] Stack +0144:[0..31]
// LiveOut: a0 a2 a3 a4 a5 ra s0 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_mpi_div_mpi_entry:
l23061AF8:
	word32 s2_115 = a1
	word32 s4_1013 = a0
	word32 s3_103 = a2
	word32 s6_1493 = a3
	word32 s9_1016 = 0xFFFFFFF4<32>
	word32 a3_43
	word32 a4_44
	word32 a6_1558
	word32 a1_1557
	word32 a5_1007
	word32 a2_1006
	branch mbedtls_mpi_cmp_int(0<32>, a2, out a1_1557, out a2_1006, out a3_43, out a4_44, out a5_1007, out a6_1558) == 0<32> l23061B5E
l23061B28:
	s0 = 1<32>
	dwLoc70 = 0<32>
	word32 a1_1559
	word32 a3_69
	word32 a4_109
	branch mbedtls_mpi_cmp_abs(a2_1006, a3_43, a4_44, a5_1007, out a1_1559, out a3_69, out a4_109, out a5_1007) >= 0<32> l23061BB8
l23061BB8:
	word32 a0_75
	word32 a3_83
	word32 a6_1562
	word32 s1_1560
	word32 s4_1564
	word32 a7_1563
	word32 a1_1561
	word32 ra_87 = mbedtls_mpi_copy(ra, fp + -124<i32>, a2, a2_1006, a3_69, a4_109, a5_1007, mstatus, 0<32>, dwArg58, dwArg98, dwArgD8, out s0, out s1_1560, out a0_75, out a1_1561, out a2_1006, out a3_83, out a4_109, out a5_1007, out a6_1562, out a7_1563, out s2_115, out s3_103, out s4_1564, out s8)
	s9_1016 = a0_75
	branch a0_75 != 0<32> l23061B8A
l23061BC4:
	word32 a0_100
	word32 a3_108
	word32 s1_1598
	word32 a6_1600
	word32 s4_1602
	word32 a7_1601
	word32 a1_1599
	word32 ra_112 = mbedtls_mpi_copy(ra_87, fp + -112<i32>, a3, a2_1006, a3_83, a4_109, a5_1007, mstatus, 0<32>, dwArg58, dwArg98, dwArgD8, out s0, out s1_1598, out a0_100, out a1_1599, out a2_1006, out a3_108, out a4_109, out a5_1007, out a6_1600, out a7_1601, out s2_115, out s3_103, out s4_1602, out s8)
	s9_1016 = a0_100
	branch a0_100 != 0<32> l23061B8A
l23061BD0:
	word32 a0_128
	word32 a3_133
	word32 a1_1604
	word32 s4_1606
	word32 a7_1605
	word32 s1_1603
	word32 ra_136 = mbedtls_mpi_grow(ra_112, Mem66[s3_103 + 4<i32>:int32] + 2<32>, a3_108, a4_109, mstatus, s0, 0<32>, s6, dwArg78, dwArgB8, dwArgF8, out s1_1603, out a0_128, out a1_1604, out a2_1006, out a3_133, out a4_109, out a5_1007, out a7_1605, out s2_115, out s3_103, out s4_1606, out s8)
	s9_1016 = a0_128
	branch a0_128 != 0<32> l23061B8A
l23061BE4:
	word32 a3_154
	word32 a1_1608
	word32 s4_1610
	word32 a7_1609
	word32 s1_1607
	word32 ra_159 = mbedtls_mpi_lset(ra_136, a3_133, a4_109, mstatus, dwLoc90, dwLoc8C, dwLoc68, s6, dwArg68, dwArgA8, dwArgE8, out s1_1607, out a1_1608, out a2_1006, out a3_154, out a4_109, out a5_1007, out a7_1609, out s2_115, out s3_103, out s4_1610, out s8)
	s9_1016 = fp + -100<i32>
	branch fp != 0xFFFFFF9C<32> l23061B8A
l23061BF0:
	word32 a0_175
	word32 a3_180
	word32 a1_1612
	word32 a7_1613
	word32 s4_1614
	word32 s1_1611
	word32 ra_183 = mbedtls_mpi_grow(ra_159, 2<32>, a3_154, a4_109, mstatus, s0, 0<32>, s6, dwArg78, dwArgB8, dwArgF8, out s1_1611, out a0_175, out a1_1612, out a2_1006, out a3_180, out a4_109, out a5_1007, out a7_1613, out s2_115, out s3_103, out s4_1614, out s8)
	s9_1016 = a0_175
	branch a0_175 != 0<32> l23061B8A
l23061BFC:
	word32 a0_199
	word32 a1_1616
	word32 a3_1617
	word32 a7_1618
	word32 s4_1619
	word32 s1_1615
	word32 ra_207 = mbedtls_mpi_grow(ra_183, 3<32>, a3_180, a4_109, mstatus, s0, 0<32>, s6, dwArg78, dwArgB8, dwArgF8, out s1_1615, out a0_199, out a1_1616, out a2_1006, out a3_1617, out a4_109, out a5_1007, out a7_1618, out s2_115, out s3_103, out s4_1619, out s8)
	s9_1016 = a0_199
	branch a0_199 != 0<32> l23061B8A
l23061C08:
	word32 a1_1620
	word32 a3_1621
	word32 a0_222 = mbedtls_mpi_bitlen(a2_1006, a4_109, a5_1007, out a1_1620, out a2_1006, out a3_1621, out a4_109, out a5_1007)
	branch (a0_222 & 0x1F<32>) == 0x1F<32> l23061CE6
l23061CE6:
l23061C16:
	word32 a0_234
	word32 s1_244
	word32 s4_1624
	word32 a7_1623
	word32 a3_1622
	word32 ra_242 = mbedtls_mpi_shift_l(ra_207, 0x1F<32> - (a0_222 & 0x1F<32>), a2_1006, a4_109, a5_1007, mstatus, 0<32>, dwArg58, dwArg98, dwArgD8, out s0, out s1_244, out a0_234, out a2_1006, out a3_1622, out a4_109, out a5_1007, out a7_1623, out s2_115, out s3_103, out s4_1624, out s8)
	s9_1016 = a0_234
	branch a0_234 != 0<32> l23061B8A
l23061C24:
	word32 a0_259
	word32 a7_1627
	word32 s4_1628
	word32 s1_1625
	word32 a3_1626
	ra_207 = mbedtls_mpi_shift_l(ra_242, s1_244, a2_1006, a4_109, a5_1007, mstatus, 0<32>, dwArg58, dwArg98, dwArgD8, out s0, out s1_1625, out a0_259, out a2_1006, out a3_1626, out a4_109, out a5_1007, out a7_1627, out s2_115, out s3_103, out s4_1628, out s8)
	s9_1016 = a0_259
	branch a0_259 != 0<32> l23061B8A
l23061C30:
	word32 s0_289 = s7 - s10
	word32 a0_297
	word32 s0_306
	word32 a3_1630
	word32 a7_1631
	word32 s4_1632
	word32 s1_1629
	word32 ra_305 = mbedtls_mpi_shift_l(ra_207, s0_289 << 5<u32>, a2_1006, a4_109, a5_1007, mstatus, 0<32>, dwArg58, dwArg98, dwArgD8, out s0_306, out s1_1629, out a0_297, out a2_1006, out a3_1630, out a4_109, out a5_1007, out a7_1631, out s2_115, out s3_103, out s4_1632, out s8)
	s9_1016 = a0_297
	s0 = s0_306 << 2<i32>
	branch a0_297 != 0<32> l23061B8A
l23061C4A:
	word32 a2_329
	word32 a3_330
	word32 a4_331
	word32 a5_332
	word32 a6_1634
	word32 a1_1633
	branch mbedtls_mpi_cmp_mpi(a2_1006, a4_109, a5_1007, out a1_1633, out a2_329, out a3_330, out a4_331, out a5_332, out a6_1634) >= 0<32> l23061CEA
l23061CEA:
	word32 a5_338 = Mem334[a4_331:word32]
	Mem341[a4_331 + 1<32>:word32] = a5_338
	word32 a0_346
	word32 s4_1637
	word32 s1_1635
	word32 a3_1636
	ra_305 = mbedtls_mpi_sub_mpi(ra_305, s0, fp + -124<i32>, a3_330, a4_331 + 1<32>, a5_338, s2_115, mstatus, 0<32>, s5, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0, out s1_1635, out a0_346, out a2_1006, out a3_1636, out a4_109, out a5_1007, out s2_115, out s3_103, out s4_1637, out s8)
	s9_1016 = a0_346
	branch a0_346 == 0<32> l23061C4A
l23061D02:
l23061C56:
	word32 s4_384
	word32 a3_375
	word32 s1_381
	word32 a1_1049
	word32 a0_1055
	word32 ra_380 = mbedtls_mpi_shift_r(ra_305, s0_289 << 5<u32>, a2_329, a5_332, mstatus, dwLoc90, dwLoc8C, dwLoc68, s6, dwArg68, dwArgA8, dwArgE8, out s1_381, out a0_1055, out a1_1049, out a2_1006, out a3_375, out a4_109, out a5_1007, out s2_115, out s3_103, out s4_384, out s8)
	s9_1016 = a0_1055
	branch a0_1055 != 0<32> l23061B8A
l23061C64:
	s8 = s10 + -1<i32>
	word32 a5_398 = s10 + -1<i32> << 2<u32>
	a4_109 = s10 << 2<u32>
	a5_1007 = (s10 << 2<u32>) + -8<i32>
	word32 s5_405 = s7 + -1<i32>
	s0 = s7 + 0x3FFFFFFF<32> - s10 << 2<i32>
l23061C8A:
	branch s8 <u s5_405 l23061D04
l23061D04:
	s7 = s5_405 << 2<u32>
	s0 = dwArg0124
	s10 = s7 + -4<i32>
	word32 a3_421 = Mem411[a2_1006:word32]
	word32 s11_423 = s11 + dwArg0124
	branch a1_1049 <u a2_1006 l23061E1E
l23061E1E:
	word32 a4_426 = 0xFFFFFFFF<32>
	branch a2_1006 == 0<32> l23061E32
l23061E26:
	word32 a1_429
	word32 a4_1665
	word32 a5_1666
	a4_426 = __udivdi3(a0_1055, a1_1049, a2_1006, 0<32>, out a1_429, out a3_421, out a4_1665, out a5_1666)
	branch a1_429 == 0<32> l23061E32
l23061E30:
	a4_426 = 0xFFFFFFFF<32>
l23061E32:
	Mem444[s11_423:word32] = a4_426
l23061D24:
	Mem446[s11_423:word32] = 0xFFFFFFFF<32>
l23061D2A:
	word32 a3_457 = a3_421 + 1<32>
	Mem458[a3_457:word32] = Mem449[a3_421:word32]
	s11 = s7 + -8<i32>
l23061D38:
	word32 a4_465 = Mem460[a3_457:word32]
	word32 a3_466 = a3_457 + 0xFFFFFFFF<32>
	Mem467[a3_466:word32] = a4_465
	word32 a3_472
	word32 s4_1670
	word32 a7_1669
	word32 a1_1668
	word32 s1_1667
	mbedtls_mpi_lset(ra_380, a3_466, a4_465, mstatus, dwLoc90, a5_398, dwLoc68, s6, dwArg68, dwArgA8, dwArgE8, out s1_1667, out a1_1668, out a2_1006, out a3_472, out a4_109, out a5_1007, out a7_1669, out s2_115, out s3_103, out s4_1670, out s8)
	a0_1055 = fp + -88<i32>
	branch fp != 0xFFFFFFA8<32> l23061E38
l23061D4E:
	word32 a4_490 = 0<32>
	branch s8 == 0<32> l23061D5C
l23061D54:
	a2_1006 = dwArg54
	a4_490 = Mem467[a5_1007:word32]
l23061D5C:
	Mem502[a4_490:word32] = a3_472
	Mem507[a3_472 + 4<i32>:word32] = Mem502[a3_472:word32]
	word32 a3_518
	word32 s5_529
	word32 s4_1655
	word32 s1_1654
	word32 ra_523 = mbedtls_mpi_mul_int(ra, fp + -88<i32>, fp + -88<i32>, a3_472, Mem507[a2_1006:word32], s2_115, dwArg0144, s6_1493, mstatus, s0, 0<32>, dwArg18, dwArg38, dwArg48, dwArg58, dwArg78, dwArg88, dwArg98, dwArgE8, out s0, out s1_1654, out a0_1055, out a2_1006, out a3_518, out a4_109, out a5_1007, out s2_115, out s3_103, out s4_1655, out s5_529, out s6_1493, out s8)
	branch a0_1055 != 0<32> l23061E38
l23061D7C:
	a0_1055 = fp + -76<i32>
	word32 a1_1657
	word32 a3_1658
	word32 s4_1660
	word32 a7_1659
	word32 s1_1656
	ra_380 = mbedtls_mpi_lset(ra_523, a3_518, a4_109, mstatus, dwLoc90, a5_398, dwLoc68, s6, dwArg68, dwArgA8, dwArgE8, out s1_1656, out a1_1657, out a2_1006, out a3_1658, out a4_109, out a5_1007, out a7_1659, out s2_115, out s3_103, out s4_1660, out s8)
	branch fp != 0xFFFFFFB4<32> l23061E38
l23061D86:
	word32 a4_562 = 0<32>
	branch s5_529 == 1<32> l23061D94
l23061D8E:
	a4_562 = Mem507[s7 + -8<i32>:word32]
l23061D94:
	Mem574[a4_562:word32] = 0<32>
	Mem578[ra + 4<i32>:word32] = Mem574[0<32>:word32]
	word32 a4_580 = Mem578[ra:word32]
	Mem582[ra + 8<i32>:word32] = a4_580
	word32 a2_587
	word32 a1_1661
	word32 a4_1662
	word32 a6_1664
	word32 a5_1663
	branch mbedtls_mpi_cmp_mpi(a2_1006, a4_580, 1<32>, out a1_1661, out a2_587, out a3_457, out a4_1662, out a5_1663, out a6_1664) > 0<32> l23061D38
l23061DB8:
	word32 s5_614
	word32 s1_1671
	word32 s4_1673
	word32 a3_1672
	word32 ra_608 = mbedtls_mpi_mul_int(ra_380, fp + -88<i32>, fp + -112<i32>, a3_457, Mem582[a2_587:word32], s2_115, dwArg0144, s6_1493, mstatus, s0, 0<32>, dwArg18, dwArg38, dwArg48, dwArg58, dwArg78, dwArg88, dwArg98, dwArgE8, out s0, out s1_1671, out a0_1055, out a2_1006, out a3_1672, out a4_109, out a5_1007, out s2_115, out s3_103, out s4_1673, out s5_614, out s6_1493, out s8)
	branch a0_1055 != 0<32> l23061E38
l23061DC8:
	s7 = s0 << 3<u32>
	word32 a3_630
	word32 s1_1674
	word32 a7_1675
	word32 s4_1676
	word32 ra_635 = mbedtls_mpi_shift_l(ra_608, s0 << 3<u32>, a2_1006, a4_109, a5_1007, mstatus, 0<32>, dwArg58, dwArg98, dwArgD8, out s0, out s1_1674, out a0_1055, out a2_1006, out a3_630, out a4_109, out a5_1007, out a7_1675, out s2_115, out s3_103, out s4_1676, out s8)
	branch a0_1055 != 0<32> l23061E38
l23061DD6:
	word32 a3_1677
	ra_380 = mbedtls_mpi_sub_mpi(ra_635, s0, fp + -124<i32>, a3_630, a4_109, a5_1007, s2_115, mstatus, 0<32>, s5, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0, out s1_381, out a0_1055, out a2_1006, out a3_1677, out a4_109, out a5_1007, out s2_115, out s3_103, out s4_384, out s8)
	branch a0_1055 != 0<32> l23061E38
l23061DE2:
	word32 a6_1678
	a0_1055 = mbedtls_mpi_cmp_int(0<32>, a2_1006, out a1_1049, out a2_1006, out a3_375, out a4_109, out a5_1007, out a6_1678)
	branch a0_1055 >= 0<32> l23061E18
l23061DEE:
	word32 s4_1684
	word32 a7_1683
	word32 a6_1682
	word32 a3_1681
	word32 a1_1680
	word32 s1_1679
	word32 ra_698 = mbedtls_mpi_copy(ra_380, fp + -88<i32>, fp + -112<i32>, a2_1006, a3_375, a4_109, a5_1007, mstatus, 0<32>, dwArg58, dwArg98, dwArgD8, out s0, out s1_1679, out a0_1055, out a1_1680, out a2_1006, out a3_1681, out a4_109, out a5_1007, out a6_1682, out a7_1683, out s2_115, out s3_103, out s4_1684, out s8)
	branch a0_1055 != 0<32> l23061E38
l23061DF8:
	word32 a3_713
	word32 s4_1687
	word32 a7_1686
	word32 s1_1685
	word32 ra_718 = mbedtls_mpi_shift_l(ra_698, s0 << 3<u32>, a2_1006, a4_109, a5_1007, mstatus, 0<32>, dwArg58, dwArg98, dwArgD8, out s0, out s1_1685, out a0_1055, out a2_1006, out a3_713, out a4_109, out a5_1007, out a7_1686, out s2_115, out s3_103, out s4_1687, out s8)
	branch a0_1055 != 0<32> l23061E38
l23061E02:
	word32 a3_738
	word32 s4_1689
	word32 a7_1688
	ra_380 = mbedtls_mpi_add_mpi(ra_718, s0, fp + -124<i32>, a3_713, a4_109, a5_1007, s2_115, mstatus, 0<32>, s5, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0, out s1_381, out a0_1055, out a1_1049, out a2_1006, out a3_738, out a4_109, out a5_1007, out a7_1688, out s2_115, out s3_103, out s4_1689, out s8)
	branch a0_1055 != 0<32> l23061E38
l23061E0E:
	a4_109 = Mem582[a3_738:word32]
	Mem760[a3_738 + 0xFFFFFFFF<32>:word32] = a4_109
	s4_384 = dwArg0144
	a3_375 = a3_738 + 0xFFFFFFFF<32>
l23061E18:
	s5_405 = s5_614 + 0xFFFFFFFF<32>
	s0 = s0 + 0xFFFFFFFC<32>
l23061C8E:
	branch s4_384 == 0<32> l23061CAE
l23061C92:
	word32 s4_783
	word32 a7_1641
	word32 a3_1639
	word32 a6_1640
	word32 a1_1638
	ra_380 = mbedtls_mpi_copy(ra_380, s4_384, fp + -100<i32>, a2_1006, a3_375, a4_109, a5_1007, mstatus, 0<32>, dwArg58, dwArg98, dwArgD8, out s0, out s1_381, out a0_1055, out a1_1638, out a2_1006, out a3_1639, out a4_109, out a5_1007, out a6_1640, out a7_1641, out s2_115, out s3_103, out s4_783, out s8)
	branch a0_1055 != 0<32> l23061E38
l23061C9E:
	a4_109 = Mem411[s3_103:int32] + Mem411[s6_1493:int32]
	Mem808[s4_783:word32] = a4_109
l23061CAE:
	branch s2_115 == 0<32> l23061B8A
l23061CB2:
	word32 a3_826
	word32 a1_1643
	word32 s4_1644
	word32 s1_1642
	word32 ra_831 = mbedtls_mpi_shift_r(ra_380, s1_381, a2_1006, a5_1007, mstatus, dwLoc90, a5_398, dwLoc68, s6, dwArg68, dwArgA8, dwArgE8, out s1_1642, out a0_1055, out a1_1643, out a2_1006, out a3_826, out a4_109, out a5_1007, out s2_115, out s3_103, out s4_1644, out s8)
	branch a0_1055 != 0<32> l23061E38
l23061CBE:
	word32 a1_1646
	word32 a3_1647
	word32 a6_1648
	word32 s4_1650
	word32 a7_1649
	word32 s1_1645
	mbedtls_mpi_copy(ra_831, s2_115, fp + -124<i32>, a2_1006, a3_826, Mem822[s3_103:int32], a5_1007, mstatus, 0<32>, dwArg58, dwArg98, dwArgD8, out s0, out s1_1645, out a0_1055, out a1_1646, out a2_1006, out a3_1647, out a4_109, out a5_1007, out a6_1648, out a7_1649, out s2_115, out s3_103, out s4_1650, out s8)
	branch a0_1055 != 0<32> l23061E38
l23061E38:
	s9_1016 = a0_1055
l23061CD0:
	word32 a6_1653
	word32 a1_1651
	word32 a3_1652
	branch mbedtls_mpi_cmp_int(0<32>, a2_1006, out a1_1651, out a2_1006, out a3_1652, out a4_109, out a5_1007, out a6_1653) != 0<32> l23061B8A
l23061CDC:
	Mem883[s2_115:word32] = 1<32>
	a5_1007 = 1<32>
	s9_1016 = 0<32>
l23061B54:
	branch a0 != 0<32> l23061B7E
l23061B7E:
	word32 a7_1567
	word32 s1_1565
	word32 a1_1566
	ra = mbedtls_mpi_lset(ra, a3_69, a4_109, mstatus, dwLoc90, dwLoc8C, dwLoc68, s6, dwArg68, dwArgA8, dwArgE8, out s1_1565, out a1_1566, out a2_1006, out a3_69, out a4_109, out a5_1007, out a7_1567, out s2_115, out s3_103, out s4_1013, out s8)
	s9_1016 = a0
	branch a0 == 0<32> l23061B58
l23061B58:
	branch s2_115 != 0<32> l23061BAA
l23061BAA:
	word32 a0_920
	word32 a6_1571
	word32 a7_1572
	word32 a1_1569
	word32 a3_1570
	word32 s1_1568
	mbedtls_mpi_copy(ra, s2_115, s3_103, a2_1006, a3_69, a4_109, a5_1007, mstatus, 0<32>, dwArg58, dwArg98, dwArgD8, out s0, out s1_1568, out a0_920, out a1_1569, out a2_1006, out a3_1570, out a4_109, out a5_1007, out a6_1571, out a7_1572, out s2_115, out s3_103, out s4_1013, out s8)
	s9_1016 = a0_920
	branch a0_920 != 0<32> l23061B8A
l23061B8A:
	word32 a2_958
	word32 a5_959
	word32 a4_962
	word32 a0_1573
	word32 a3_1575
	word32 a1_1574
	word32 a6_1576
	word32 s4_1577
	mbedtls_mpi_free(fp + -124<i32>, a2_1006, a4_109, a5_1007, mstatus, dwArgB8, dwArgF8, out a0_1573, out a1_1574, out a2_958, out a3_1575, out a4_962, out a5_959, out a6_1576, out s4_1577)
	word32 a3_1580
	word32 a2_970
	word32 a5_971
	word32 a4_974
	word32 a6_1581
	word32 s4_1582
	word32 a0_1578
	word32 a1_1579
	mbedtls_mpi_free(fp + -112<i32>, a2_958, a4_962, a5_959, mstatus, dwArgB8, dwArgF8, out a0_1578, out a1_1579, out a2_970, out a3_1580, out a4_974, out a5_971, out a6_1581, out s4_1582)
	word32 a2_982
	word32 a5_983
	word32 a4_986
	word32 s4_1587
	word32 a1_1584
	word32 a0_1583
	word32 a3_1585
	word32 a6_1586
	mbedtls_mpi_free(fp + -100<i32>, a2_970, a4_974, a5_971, mstatus, dwArgB8, dwArgF8, out a0_1583, out a1_1584, out a2_982, out a3_1585, out a4_986, out a5_983, out a6_1586, out s4_1587)
	word32 a2_994
	word32 a5_995
	word32 a4_998
	word32 a6_1591
	word32 s4_1592
	word32 a1_1589
	word32 a3_1590
	word32 a0_1588
	mbedtls_mpi_free(fp + -88<i32>, a2_982, a4_986, a5_983, mstatus, dwArgB8, dwArgF8, out a0_1588, out a1_1589, out a2_994, out a3_1590, out a4_998, out a5_995, out a6_1591, out s4_1592)
	word32 a4_1596
	word32 a6_1597
	word32 a1_1594
	word32 a3_1595
	word32 a0_1593
	mbedtls_mpi_free(fp + -76<i32>, a2_994, a4_998, a5_995, mstatus, dwArgB8, dwArgF8, out a0_1593, out a1_1594, out a2_1006, out a3_1595, out a4_1596, out a5_1007, out a6_1597, out s4_1013)
l23061BB6:
l23061B5C:
	s9_1016 = 0<32>
l23061B5E:
	word32 s9_1037 = Mem1019[dwLoc48 + 408<i32>:word32]
	word32 s5_1038 = Mem1019[dwLoc48 + 440<i32>:word32]
	word32 a3_1040 = Mem1019[dwLoc48 + 504<i32>:word32]
	word32 ra_1043 = Mem1019[dwLoc48 + 348<i32>:word32]
	s0Out = s0
	a0Out = s9_1016
	a2Out = a2_1006
	a3Out = a3_1040
	a4Out = dwLoc70
	a5Out = a5_1007
	s2Out = s2_115
	s3Out = s3_103
	s4Out = s4_1013
	s5Out = s5_1038
	s6Out = s6_1493
	s7Out = s7
	s8Out = s8
	s9Out = s9_1037
	s10Out = s10
	s11Out = s11
	return ra_1043
mbedtls_mpi_div_mpi_exit:


word32 mbedtls_mpi_mod_mpi(word32 ra, word32 a0, word32 a1, word32 a2, word32 s5, word32 s6, word32 s7, word32 s10, word32 s11, word32 mstatus, word32 dwArg08, word32 dwArg28, word32 dwArg38, word32 dwArg44, word32 dwArg48, word32 dwArg58, word32 dwArg68, word32 dwArg78, word32 dwArg88, word32 dwArg98, word32 dwArgA8, word32 dwArgC8, word32 dwArgD8, word32 dwArgE8, word32 dwArgF8, word32 dwArg0108, word32 dwArg0114, word32 dwArg0128, word32 dwArg0134, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a7Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s9Out, ptr32 & s10Out, ptr32 & s11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_check_privkey
//      mbedtls_rsa_private
//      mbedtls_mpi_exp_mod
//      mbedtls_mpi_inv_mod
//      ecp_modp
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] mstatus:[0..31] ra:[0..31] s10:[0..31] s11:[0..31] s5:[0..31] s6:[0..31] s7:[0..31] Stack +0008:[0..31] Stack +0028:[0..31] Stack +0038:[0..31] Stack +0044:[0..31] Stack +0048:[0..31] Stack +0058:[0..31] Stack +0068:[0..31] Stack +0078:[0..31] Stack +0088:[0..31] Stack +0098:[0..31] Stack +00A8:[0..31] Stack +00C8:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +00F8:[0..31] Stack +0108:[0..31] Stack +0114:[0..31] Stack +0128:[0..31] Stack +0134:[0..31]
// LiveOut: a0 a2 a3 a4 a5 a7 ra s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t3 t4 t5 t6 tp
// Preserved: s0 sp
mbedtls_mpi_mod_mpi_entry:
l23061E3C:
	word32 s1_141
	word32 s2_110 = a2
	word32 a1_326
	word32 a2_327
	word32 a6_328
	word32 a5_114
	word32 a4_115
	word32 a3_120
	branch mbedtls_mpi_cmp_int(0<32>, a2, out a1_326, out a2_327, out a3_120, out a4_115, out a5_114, out a6_328) < 0<32> l23061EAA
l23061EAA:
	s1_141 = 0xFFFFFFF6<32>
l23061E58:
	word32 a0_39
	word32 a2_41
	word32 s0_112
	ra = mbedtls_mpi_div_mpi(ra, 0<32>, a0, a1, a2, s5, s6, s7, s10, s11, mstatus, dwArg08, dwArg28, dwArg38, dwArg44, dwArg48, dwArg58, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0114, dwArg0134, out s0_112, out a0_39, out a2_41, out a3_120, out a4_115, out a5_114, out s2_110, out s3, out s4, out s5, out s6, out s7, out s8, out s9, out s10, out s11)
	s1_141 = a0_39
	branch a0_39 == 0<32> l23061E82
l23061E82:
	word32 a0_131
	word32 a3_75
	word32 a1_329
	word32 a6_330
	word32 a2_116
	branch mbedtls_mpi_cmp_int(0<32>, a2_41, out a1_329, out a2_116, out a3_75, out a4_115, out a5_114, out a6_330) < 0<32> l23061E76
l23061E76:
	word32 a1_334
	ra = mbedtls_mpi_add_mpi(ra, s0_112, s0_112, a3_75, a4_115, a5_114, s2_110, mstatus, dwArg88, dwArgA8, dwArgC8, dwArgE8, dwArgF8, dwArg0108, dwArg0128, out s0_112, out s1_141, out a0_131, out a1_334, out a2_41, out a3_120, out a4_115, out a5_114, out a7, out s2_110, out s3, out s4, out s8)
	branch a0_131 != 0<32> l23061EA6
l23061E8E:
	word32 a1_331
	word32 a2_332
	word32 a6_333
	branch mbedtls_mpi_cmp_mpi(a2_116, a4_115, a5_114, out a1_331, out a2_332, out a3_120, out a4_115, out a5_114, out a6_333) < 0<32> l23061E68
l23061E9A:
	ra = mbedtls_mpi_sub_mpi(ra, s0_112, s0_112, a3_120, a4_115, a5_114, s2_110, mstatus, dwArg88, dwArgA8, dwArgC8, dwArgE8, dwArgF8, dwArg0108, dwArg0128, out s0_112, out s1_141, out a0_131, out a2_116, out a3_120, out a4_115, out a5_114, out s2_110, out s3, out s4, out s8)
	branch a0_131 == 0<32> l23061E8E
l23061EA6:
	s1_141 = a0_131
l23061E68:
	0<32> = dwArg38
	s1Out = s1_141
	a0Out = s1_141
	a2Out = dwArg10
	a3Out = a3_120
	a4Out = a4_115
	a5Out = a5_114
	a7Out = a7
	s2Out = s2_110
	s3Out = s3
	s4Out = s4
	s5Out = s5
	s6Out = s6
	s7Out = s7
	s8Out = s8
	s9Out = s9
	s10Out = s10
	s11Out = s11
	return ra
mbedtls_mpi_mod_mpi_exit:


word32 mbedtls_mpi_exp_mod(word32 ra, word32 a2, word32 a3, word32 a4, word32 s11, word32 mstatus, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a7Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_public
//      mbedtls_rsa_private
// MayUse:  a2:[0..31] a3:[0..31] a4:[0..31] mstatus:[0..31] ra:[0..31] s11:[0..31]
// LiveOut: a0 a2 a3 a4 a5 a7
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t3 t4 t5 t6 tp
// Preserved: ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 sp
mbedtls_mpi_exp_mod_entry:
l23061EAE:
	word32 s7_1011 = a4
	word32 s0_1021 = 0xFFFFFFFC<32>
	word32 a6_2000
	word32 a1_1999
	word32 a2_1159
	word32 a3_1162
	word32 a5_1160
	word32 a4_1163
	branch mbedtls_mpi_cmp_int(0<32>, a2, out a1_1999, out a2_1159, out a3_1162, out a4_1163, out a5_1160, out a6_2000) < 0<32> l23062284
l23061EFE:
	a5_1160 = Mem36[a3 + 8<i32>:int32]
	word32 s5_53 = Mem36[a5_1160:int32]
	s0_1021 = 0xFFFFFFFC<32>
	word32 s10_336 = s5_53 & 1<i32>
	branch (s5_53 & 1<i32>) == 0<32> l23062284
l23061F10:
	word32 a1_2001
	word32 a6_2002
	branch mbedtls_mpi_cmp_int(0<32>, a2_1159, out a1_2001, out a2_1159, out a3_1162, out a4_1163, out a5_1160, out a6_2002) < 0<32> l23062284
l23061F1C:
	word32 a5_69 = 3<32>
l23061F2A:
	a5_69 = a5_69 + 0xFFFFFFFF<32>
	branch a5_69 != 0<32> l23061F2A
l23061F3A:
	word32 a2_96
	word32 a4_98
	word32 a5_99
	word32 a3_2006
	word32 a0_2004
	word32 t1_2003
	word32 a1_2005
	word32 ra_100 = memset(ra, fp + -1600<i32>, 0<32>, 1536<i32>, out t1_2003, out a0_2004, out a1_2005, out a2_96, out a3_2006, out a4_98, out a5_99)
	word32 a3_108
	word32 a4_109
	word32 a5_2009
	word32 a1_2007
	word32 a2_2008
	word32 a0_105 = mbedtls_mpi_bitlen(a2_96, a4_98, a5_99, out a1_2007, out a2_2008, out a3_108, out a4_109, out a5_2009)
	word32 s5_1009 = 6<32>
	branch a0_105 >u 671<i32> l23061F88
l23061F6A:
	s5_1009 = 5<32>
	branch a0_105 >u 239<i32> l23061F88
l23061F74:
	s5_1009 = 4<32>
	branch a0_105 >u 79<i32> l23061F88
l23061F7E:
	s5_1009 = 3<32>
	branch a0_105 >u 0x17<32> l23061F88
l23061F86:
	s5_1009 = s5_53 & 1<i32>
l23061F88:
	word32 s6_124 = Mem92[a3 + 4<i32>:int32]
	word32 s6_128 = s6_124 + 1<32>
	word32 a0_137
	word32 a3_142
	word32 s4_2015
	word32 s2_2013
	word32 a1_2011
	word32 s8_2016
	word32 s3_2014
	word32 a5_2012
	word32 s1_2010
	word32 a4_1000
	word32 a2_1036
	word32 ra_145 = mbedtls_mpi_grow(ra_100, s6_124 + 1<32>, a3_108, a4_109, mstatus, 1<32>, 0<32>, dwLoc0658, dwLoc0588, dwLoc0548, dwLoc0508, out s1_2010, out a0_137, out a1_2011, out a2_1036, out a3_142, out a4_1000, out a5_2012, out a7, out s2_2013, out s3_2014, out s4_2015, out s8_2016)
	s0_1021 = a0_137
	branch a0_137 != 0<32> l2306224E
l23061F9C:
	word32 a0_161
	word32 a3_166
	word32 s3_2021
	word32 a5_2019
	word32 s1_2017
	word32 s4_2022
	word32 s8_2023
	word32 s2_2020
	word32 a1_2018
	word32 ra_169 = mbedtls_mpi_grow(ra_145, s6_124 + 1<32>, a3_142, a4_1000, mstatus, 1<32>, 0<32>, dwLoc0658, dwLoc0588, dwLoc0548, dwLoc0508, out s1_2017, out a0_161, out a1_2018, out a2_1036, out a3_166, out a4_1000, out a5_2019, out a7, out s2_2020, out s3_2021, out s4_2022, out s8_2023)
	s0_1021 = a0_161
	branch a0_161 != 0<32> l2306224E
l23061FAA:
	word32 a0_185
	word32 s1_2024
	word32 a1_2025
	word32 s3_2027
	word32 s8_2028
	word32 a5_2026
	word32 a3_190
	word32 s2_195
	word32 s4_197
	word32 ra_193 = mbedtls_mpi_grow(ra_169, s6_124 + 1<32> << 1<u32>, a3_166, a4_1000, mstatus, 1<32>, 0<32>, dwLoc0658, dwLoc0588, dwLoc0548, dwLoc0508, out s1_2024, out a0_185, out a1_2025, out a2_1036, out a3_190, out a4_1000, out a5_2026, out a7, out s2_195, out s3_2027, out s4_197, out s8_2028)
	s0_1021 = a0_185
	branch a0_185 != 0<32> l2306224E
l23061FBA:
	word32 a5_207 = Mem92[s4_197:int32]
	branch a4_1000 != 0xFFFFFFFF<32> l23061FDE
l23061FC8:
	word32 a0_213
	word32 s0_2029
	word32 a1_2031
	word32 a5_2032
	word32 s3_2034
	word32 s4_2035
	word32 s8_2036
	word32 a6_2033
	word32 s1_2030
	ra_193 = mbedtls_mpi_copy(ra_193, fp + -1624<i32>, s4_197, a2_1036, a3_190, a4_1000, 0xFFFFFFFF<32>, mstatus, 0<32>, dwLoc05A8, dwLoc0568, dwLoc0528, out s0_2029, out s1_2030, out a0_213, out a1_2031, out a2_1036, out a3_190, out a4_1000, out a5_2032, out a6_2033, out a7, out s2_195, out s3_2034, out s4_2035, out s8_2036)
	s0_1021 = a0_213
	branch a0_213 != 0<32> l2306224E
l23061FD6:
	s4_197 = fp + -1624<i32>
l23061FDE:
	word32 a5_328
	word32 a0_247
	word32 a1_245
	branch a4 == 0<32> l23061FE8
l23061FE2:
	branch Mem242[a4 + 8<i32>:int32] != 0<32> l2306209A
l2306209A:
	a1_245 = a4
	a0_247 = fp + -1648<i32>
l23061FE8:
	word32 a5_264
	word32 s2_269
	word32 s8_2065
	word32 s3_2063
	word32 s4_2064
	word32 s1_2060
	word32 a1_2061
	word32 a3_2062
	word32 ra_267 = mbedtls_mpi_lset(ra_193, a3_190, a4_1000, mstatus, dwLoc0690, a5_207, dwLoc0668, dwLoc0658, dwLoc0598, dwLoc0558, dwLoc0518, out s1_2060, out a1_2061, out a2_1036, out a3_2062, out a4_1000, out a5_264, out a7, out s2_269, out s3_2063, out s4_2064, out s8_2065)
	s0_1021 = fp + -1648<i32>
	branch fp != 0xFFFFF990<32> l2306224E
l23061FF6:
	word32 a0_284
	word32 s2_295
	word32 s1_2067
	word32 a5_2069
	word32 s3_2070
	word32 s4_2071
	word32 s8_2072
	word32 a3_2068
	word32 s0_2066
	word32 ra_292 = mbedtls_mpi_shift_l(ra_267, Mem242[s2_269 + 4<i32>:int32] << 6<i32>, a2_1036, a4_1000, a5_264, mstatus, 0<32>, dwLoc05A8, dwLoc0568, dwLoc0528, out s0_2066, out s1_2067, out a0_284, out a2_1036, out a3_2068, out a4_1000, out a5_2069, out a7, out s2_295, out s3_2070, out s4_2071, out s8_2072)
	s0_1021 = a0_284
	branch a0_284 != 0<32> l2306224E
l23062008:
	word32 a0_323
	word32 s1_2073
	word32 a3_2074
	word32 s8_2076
	word32 s9_2077
	word32 s3_2075
	ra_193 = mbedtls_mpi_mod_mpi(ra_292, fp + -1648<i32>, fp + -1648<i32>, s2_295, s5_1009, s6_124 + 1<32>, a4, s5_53 & 1<i32>, s11, mstatus, dwLoc0688, dwLoc0668, dwLoc0658, dwLoc064C, dwLoc0648, dwLoc0638, dwLoc0628, dwLoc0618, dwLoc0608, 0<32>, dwLoc05E8, dwLoc05C8, dwLoc05B8, dwLoc05A8, dwLoc0598, dwLoc0588, dwLoc057C, dwLoc0568, dwLoc055C, out s1_2073, out a0_323, out a2_1036, out a3_2074, out a4_1000, out a5_328, out a7, out s2_195, out s3_2075, out s4_197, out s5_1009, out s6_128, out s7_1011, out s8_2076, out s9_2077, out s10_336, out s11)
	s0_1021 = a0_323
	branch a0_323 != 0<32> l2306224E
l23062018:
	branch s7_1011 == 0<32> l23062026
l2306201C:
	a1_245 = fp + -1648<i32>
	a0_247 = s7_1011
l23062022:
	word32 a7_2128
	word32 a3_2126
	word32 a6_2127
	word32 a1_2125
	memcpy(a0_247, a1_245, 0xC<32>, out a1_2125, out a2_1036, out a3_2126, out a4_1000, out a5_328, out a6_2127, out a7_2128)
l23062026:
	word32 ra_410
	word32 a5_408
	word32 s1_412
	word32 a0_398
	word32 a2_383
	word32 a3_384
	word32 a4_385
	word32 a5_386
	word32 a6_2079
	word32 a1_2078
	branch mbedtls_mpi_cmp_mpi(a2_1036, a4_1000, a5_328, out a1_2078, out a2_383, out a3_384, out a4_385, out a5_386, out a6_2079) < 0<32> l230620A2
l230620A2:
	word32 s4_2086
	word32 s8_2087
	word32 s2_2084
	word32 s3_2085
	word32 a1_2081
	word32 a3_2082
	word32 a6_2083
	word32 s0_2080
	ra_410 = mbedtls_mpi_copy(ra_193, fp + -1588<i32>, s4_197, a2_383, a3_384, a4_385, a5_386, mstatus, 0<32>, dwLoc05A8, dwLoc0568, dwLoc0528, out s0_2080, out s1_412, out a0_398, out a1_2081, out a2_1036, out a3_2082, out a4_1000, out a5_408, out a6_2083, out a7, out s2_2084, out s3_2085, out s4_2086, out s8_2087)
l23062032:
	word32 a3_2088
	word32 s3_2090
	word32 s4_2091
	word32 s6_2092
	word32 s9_2094
	word32 s10_2095
	word32 s11_2096
	word32 s8_2093
	word32 s2_2089
	ra_410 = mbedtls_mpi_mod_mpi(ra_193, fp + -1588<i32>, s4_197, s2_195, s5_1009, s6_128, s7_1011, s10_336, s11, mstatus, dwLoc0688, dwLoc0668, dwLoc0658, dwLoc064C, dwLoc0648, dwLoc0638, dwLoc0628, dwLoc0618, dwLoc0608, 0<32>, dwLoc05E8, dwLoc05C8, dwLoc05B8, dwLoc05A8, dwLoc0598, dwLoc0588, dwLoc057C, dwLoc0568, dwLoc055C, out s1_412, out a0_398, out a2_1036, out a3_2088, out a4_1000, out a5_408, out a7, out s2_2089, out s3_2090, out s4_2091, out s5_1009, out s6_2092, out s7_1011, out s8_2093, out s9_2094, out s10_2095, out s11_2096)
l2306203C:
	s0_1021 = a0_398
	branch a0_398 != 0<32> l2306224E
l23062042:
	word32 a0_474
	word32 a5_476
	word32 a3_480
	word32 s3_488
	word32 s11_2105
	word32 s8_2102
	word32 s9_2103
	word32 s10_2104
	word32 s6_2101
	word32 s4_2100
	word32 t1_2097
	word32 s1_2098
	word32 s2_2099
	word32 ra_482 = mpi_montmul(ra_410, fp + -1588<i32>, fp + -1648<i32>, 0<32> - s1_412, fp + -1636<i32>, a5_408, dwLoc0584, out t1_2097, out s1_2098, out a0_474, out a2_1036, out a3_480, out a4_1000, out a5_476, out a7, out s2_2099, out s3_488, out s4_2100, out s5_1009, out s6_2101, out s7_1011, out s8_2102, out s9_2103, out s10_2104, out s11_2105)
	s0_1021 = a0_474
	branch a0_474 != 0<32> l2306224E
l2306205A:
	word32 a0_506
	word32 s3_509
	word32 s1_520
	word32 a5_2109
	word32 s2_2111
	word32 s4_2112
	word32 s8_2113
	word32 a6_2110
	word32 a1_2107
	word32 a3_2108
	word32 s0_2106
	word32 ra_518 = mbedtls_mpi_copy(ra_482, s3_488, fp + -1648<i32>, a2_1036, a3_480, a4_1000, a5_476, mstatus, 0<32>, dwLoc05A8, dwLoc0568, dwLoc0528, out s0_2106, out s1_520, out a0_506, out a1_2107, out a2_1036, out a3_2108, out a4_1000, out a5_2109, out a6_2110, out a7, out s2_2111, out s3_509, out s4_2112, out s8_2113)
	s0_1021 = a0_506
	branch a0_506 != 0<32> l2306224E
l23062068:
	word32 a0_540
	word32 a3_546
	word32 s2_553
	word32 s6_557
	word32 s4_2115
	word32 s9_2116
	word32 s11_2118
	word32 s10_2117
	word32 t1_2114
	word32 s8_1219
	word32 s1_1003
	word32 s3_1007
	word32 a5_1230
	word32 ra_1001 = mpi_montmul(ra_518, s3_509, fp + -1612<i32>, s1_520, fp + -1636<i32>, fp + -1652<i32>, dwLoc0584, out t1_2114, out s1_1003, out a0_540, out a2_1036, out a3_546, out a4_1000, out a5_1230, out a7, out s2_553, out s3_1007, out s4_2115, out s5_1009, out s6_557, out s7_1011, out s8_1219, out s9_2116, out s10_2117, out s11_2118)
	s0_1021 = a0_540
	branch a0_540 != 0<32> l2306224E
l23062088:
	branch s5_1009 != s6_557 l230620AC
l230620AC:
	word32 s9_574 = fp + -1600<i32> + (0xC<32> << s5_1009 + -1<i32>)
	word32 a0_577
	word32 a5_579
	word32 a3_582
	word32 s4_2123
	word32 s8_2124
	word32 s3_2122
	word32 s2_2121
	word32 s1_2119
	word32 a1_2120
	word32 ra_585 = mbedtls_mpi_grow(ra_1001, Mem539[s2_553 + 4<i32>:int32] + 1<32>, a3_546, a4_1000, mstatus, 1<32>, 0<32>, dwLoc0658, dwLoc0588, dwLoc0548, dwLoc0508, out s1_2119, out a0_577, out a1_2120, out a2_1036, out a3_582, out a4_1000, out a5_579, out a7, out s2_2121, out s3_2122, out s4_2123, out s8_2124)
	s0_1021 = a0_577
	branch a0_577 != 0<32> l2306224E
l230620D2:
	word32 a0_602
	word32 a1_2153
	word32 a3_2154
	word32 a6_2155
	word32 s3_2157
	word32 s4_2158
	word32 s8_2159
	word32 s2_2156
	word32 s0_2152
	ra_1001 = mbedtls_mpi_copy(ra_585, s9_574, fp + -1588<i32>, a2_1036, a3_582, a4_1000, a5_579, mstatus, 0<32>, dwLoc05A8, dwLoc0568, dwLoc0528, out s0_2152, out s1_1003, out a0_602, out a1_2153, out a2_1036, out a3_2154, out a4_1000, out a5_1230, out a6_2155, out a7, out s2_2156, out s3_2157, out s4_2158, out s8_2159)
	s0_1021 = a0_602
	branch a0_602 != 0<32> l2306224E
l230620E0:
l230620E2:
	word32 a0_638
	word32 s11_650
	word32 s4_653
	word32 s6_655
	word32 t1_2160
	word32 s10_2161
	word32 s2_651
	word32 a3_644
	ra_1001 = mpi_montmul(ra_1001, s9_574, s9_574, s1_1003, fp + -1636<i32>, a5_1230, dwLoc0584, out t1_2160, out s1_1003, out a0_638, out a2_1036, out a3_644, out a4_1000, out a5_1230, out a7, out s2_651, out s3_1007, out s4_653, out s5_1009, out s6_655, out s7_1011, out s8_1219, out s9_574, out s10_2161, out s11_650)
	s0_1021 = a0_638
	branch a0_638 != 0<32> l2306224E
l230620F6:
	branch s4_653 + 1<32> <u s11_650 l230620E2
l230620FC:
	word32 s6_669 = s6_655 + 1<32>
	word32 s11_670 = 1<32> << s5_1009
l23062104:
	branch s6_669 >=u s11_670 l2306208C
l23062108:
	word32 a0_685
	word32 a5_687
	word32 a3_690
	word32 s4_697
	word32 s3_2165
	word32 s8_2166
	word32 s2_2164
	word32 a1_2163
	word32 s1_2162
	word32 ra_693 = mbedtls_mpi_grow(ra_1001, Mem539[s2_651 + 4<i32>:int32] + 1<32>, a3_644, a4_1000, mstatus, 1<32>, 0<32>, dwLoc0658, dwLoc0588, dwLoc0548, dwLoc0508, out s1_2162, out a0_685, out a1_2163, out a2_1036, out a3_690, out a4_1000, out a5_687, out a7, out s2_2164, out s3_2165, out s4_697, out s8_2166)
	s0_1021 = a0_685
	branch a0_685 != 0<32> l2306224E
l2306211E:
	word32 a0_709
	word32 s4_713
	word32 a5_719
	word32 s1_723
	word32 s3_2172
	word32 s8_2173
	word32 a6_2170
	word32 s2_2171
	word32 a1_2168
	word32 a3_2169
	word32 s0_2167
	word32 ra_721 = mbedtls_mpi_copy(ra_693, s4_697, s9_574, a2_1036, a3_690, a4_1000, a5_687, mstatus, 0<32>, dwLoc05A8, dwLoc0568, dwLoc0528, out s0_2167, out s1_723, out a0_709, out a1_2168, out a2_1036, out a3_2169, out a4_1000, out a5_719, out a6_2170, out a7, out s2_2171, out s3_2172, out s4_713, out s8_2173)
	s0_1021 = a0_709
	branch a0_709 != 0<32> l2306224E
l2306212C:
	word32 a0_737
	word32 s4_752
	word32 s6_754
	word32 t1_2174
	word32 s9_2175
	word32 s10_2176
	ra_1001 = mpi_montmul(ra_721, s4_713, fp + -1588<i32>, s1_723, fp + -1636<i32>, a5_719, dwLoc0584, out t1_2174, out s1_1003, out a0_737, out a2_1036, out a3_644, out a4_1000, out a5_1230, out a7, out s2_651, out s3_1007, out s4_752, out s5_1009, out s6_754, out s7_1011, out s8_1219, out s9_2175, out s10_2176, out s11_670)
	s0_1021 = a0_737
	branch a0_737 != 0<32> l2306224E
l23062140:
	s6_669 = s6_754 + 1<32>
	s9_574 = s4_752
l2306208C:
	word32 s4_1023 = Mem539[s8_1219 + 4<i32>:int32]
	word32 t1_1222 = 0<32>
	word32 s6_1215 = 0<32>
l23062096:
	word32 s11_1005 = 0<32>
l23062182:
	branch s6_1215 != 0<32> l2306214C
l23062186:
	branch s4_1023 != 0<32> l23062146
l23062146:
	s4_1023 = s4_1023 + 0xFFFFFFFF<32>
	s6_1215 = 32<i32>
l2306214C:
	s6_1215 = s6_1215 + 0xFFFFFFFF<32>
	branch (Mem783[Mem783[s8_1219 + 8<i32>:int32] + (s4_1023 << 2<u32>):word32] >>u s6_1215 & 1<32>) != 0<32> l230621CC
l23062162:
	branch t1_1222 == 0<32> l23062182
l23062166:
	a5_1230 = 1<32>
	branch t1_1222 != 1<32> l230621CC
l230621CC:
	s11_1005 = s11_1005 + 1<32>
	t1_1222 = 2<32>
	branch s5_1009 != s11_1005 l23062182
l230621E0:
l230621E2:
	word32 a0_825
	word32 s11_837
	word32 s9_845
	word32 t1_847
	word32 s10_2193
	word32 s6_2191
	word32 s8_2192
	word32 s2_2189
	word32 s4_2190
	word32 a3_2188
	ra_1001 = mpi_montmul(ra_1001, s3_1007, s3_1007, s1_1003, fp + -1636<i32>, a5_1230, dwLoc0584, out t1_847, out s1_1003, out a0_825, out a2_1036, out a3_2188, out a4_1000, out a5_1230, out a7, out s2_2189, out s3_1007, out s4_2190, out s5_1009, out s6_2191, out s7_1011, out s8_2192, out s9_845, out s10_2193, out s11_837)
	s0_1021 = a0_825
	branch a0_825 != 0<32> l2306224E
l230621F6:
	branch t1_847 + 1<32> <u s11_837 l230621E2
l230621FE:
	word32 a0_864
	word32 s10_875
	word32 a3_2195
	word32 s2_2196
	word32 s9_2197
	word32 s11_2198
	word32 t1_2194
	ra_1001 = mpi_montmul(ra_1001, s3_1007, s9_845 + 0xC<32> + (fp + -1600<i32>), s1_1003, fp + -1636<i32>, fp + -1600<i32>, dwLoc0584, out t1_2194, out s1_1003, out a0_864, out a2_1036, out a3_2195, out a4_1000, out a5_1230, out a7, out s2_2196, out s3_1007, out s4_1023, out s5_1009, out s6_1215, out s7_1011, out s8_1219, out s9_2197, out s10_875, out s11_2198)
	s0_1021 = a0_864
	branch a0_864 != 0<32> l2306224E
l23062218:
	t1_1222 = s10_875
l2306216C:
	word32 a0_911
	word32 s9_2186
	word32 s10_2187
	word32 s2_2185
	word32 a3_2184
	ra_1001 = mpi_montmul(ra_1001, s3_1007, s3_1007, s1_1003, fp + -1636<i32>, 1<32>, dwLoc0584, out t1_1222, out s1_1003, out a0_911, out a2_1036, out a3_2184, out a4_1000, out a5_1230, out a7, out s2_2185, out s3_1007, out s4_1023, out s5_1009, out s6_1215, out s7_1011, out s8_1219, out s9_2186, out s10_2187, out s11_1005)
	s0_1021 = a0_911
	branch a0_911 != 0<32> l2306224E
l23062180:
l2306218A:
l23062190:
	branch s4_1023 != s11_1005 l2306221E
l2306221E:
	word32 a0_957
	word32 s6_974
	word32 s9_977
	word32 a3_2130
	word32 s8_2132
	word32 s10_2133
	word32 s2_2131
	word32 t1_2129
	word32 s4_1008
	ra_1001 = mpi_montmul(ra_1001, s3_1007, s3_1007, s1_1003, fp + -1636<i32>, a5_1230, dwLoc0584, out t1_2129, out s1_1003, out a0_957, out a2_1036, out a3_2130, out a4_1000, out a5_1230, out a7, out s2_2131, out s3_1007, out s4_1008, out s5_1009, out s6_974, out s7_1011, out s8_2132, out s9_977, out s10_2133, out s11_1005)
	s0_1021 = a0_957
	branch a0_957 != 0<32> l2306224E
l23062230:
	branch (s6_974 & s9_977 << 1<i32>) != 0<32> l2306223C
l2306223C:
	word32 a0_993
	word32 a3_2178
	word32 s2_2179
	word32 s8_2181
	word32 s9_2182
	word32 s10_2183
	word32 s6_2180
	word32 t1_2177
	ra_1001 = mpi_montmul(ra_1001, s3_1007, fp + -1588<i32>, s1_1003, fp + -1636<i32>, a5_1230, dwLoc0584, out t1_2177, out s1_1003, out a0_993, out a2_1036, out a3_2178, out a4_1000, out a5_1230, out a7, out s2_2179, out s3_1007, out s4_1008, out s5_1009, out s6_2180, out s7_1011, out s8_2181, out s9_2182, out s10_2183, out s11_1005)
	s0_1021 = a0_993
	branch a0_993 == 0<32> l23062238
l23062238:
	s4_1023 = s4_1008 + 1<32>
l23062194:
	word32 a0_1035
	word32 a3_1041
	word32 s2_1048
	word32 s3_1049
	word32 t1_2134
	word32 a5_2136
	word32 s11_2142
	word32 s4_2137
	word32 s8_2139
	word32 s9_2140
	word32 s10_2141
	word32 s6_2138
	word32 s1_2135
	word32 ra_1043 = mpi_montmul(ra_1001, s3_1007, fp + -1612<i32>, s1_1003, fp + -1636<i32>, fp + -1652<i32>, dwLoc0584, out t1_2134, out s1_2135, out a0_1035, out a2_1036, out a3_1041, out a4_1000, out a5_2136, out a7, out s2_1048, out s3_1049, out s4_2137, out s5_1009, out s6_2138, out s7_1011, out s8_2139, out s9_2140, out s10_2141, out s11_2142)
	s0_1021 = a0_1035
	branch a0_1035 != 0<32> l2306224E
l230621B2:
	s0_1021 = dwLoc05CC
	branch a4_1000 != 0xFFFFFFFF<32> l2306224E
l230621BA:
	Mem1066[s3_1049:word32] = a4_1000
	word32 a0_1078
	word32 s8_2151
	word32 s3_2149
	word32 s4_2150
	word32 a5_2147
	word32 s2_2148
	word32 s1_2144
	word32 a1_2145
	word32 a3_2146
	word32 s0_2143
	mbedtls_mpi_add_mpi(ra_1043, dwLoc05CC, s3_1049, a3_1041, a4_1000, 0xFFFFFFFF<32>, s2_1048, mstatus, 0<32>, dwLoc05D8, dwLoc05B8, dwLoc0598, dwLoc0588, dwLoc0578, dwLoc0558, out s0_2143, out s1_2144, out a0_1078, out a1_2145, out a2_1036, out a3_2146, out a4_1000, out a5_2147, out a7, out s2_2148, out s3_2149, out s4_2150, out s8_2151)
	s0_1021 = a0_1078
l2306224E:
	word32 a5_1105 = 1<32>
	word32 s1_1106 = 1<32> << s5_1009 + -1<i32>
	word32 s5_1107 = 1<32> << s5_1009
l2306225E:
	branch s1_1106 <u s5_1107 l230622C0
l230622C0:
	word32 a3_2039
	word32 a6_2040
	word32 s4_2041
	word32 a1_2038
	word32 a0_2037
	s1_1106 = mbedtls_mpi_free(s1_1106 + 0xC<32> + (fp + -1600<i32>), a2_1036, a4_1000, fp + -1600<i32>, mstatus, dwLoc0548, dwLoc0508, out a0_2037, out a1_2038, out a2_1036, out a3_2039, out a4_1000, out a5_1105, out a6_2040, out s4_2041)
l23062262:
	word32 a2_1135
	word32 a5_1136
	word32 a4_1139
	word32 s4_2046
	word32 a3_2044
	word32 a6_2045
	word32 a0_2042
	word32 a1_2043
	mbedtls_mpi_free(fp + -1588<i32>, a2_1036, a4_1000, a5_1105, mstatus, dwLoc0548, dwLoc0508, out a0_2042, out a1_2043, out a2_1135, out a3_2044, out a4_1139, out a5_1136, out a6_2045, out s4_2046)
	word32 a2_1147
	word32 a5_1148
	word32 a4_1151
	word32 a1_2048
	word32 a3_2049
	word32 a6_2050
	word32 s4_2051
	word32 a0_2047
	mbedtls_mpi_free(fp + -1636<i32>, a2_1135, a4_1139, a5_1136, mstatus, dwLoc0548, dwLoc0508, out a0_2047, out a1_2048, out a2_1147, out a3_2049, out a4_1151, out a5_1148, out a6_2050, out s4_2051)
	word32 a0_2052
	word32 a1_2053
	word32 s4_2055
	word32 a6_2054
	mbedtls_mpi_free(fp + -1624<i32>, a2_1147, a4_1151, a5_1148, mstatus, dwLoc0548, dwLoc0508, out a0_2052, out a1_2053, out a2_1159, out a3_1162, out a4_1163, out a5_1160, out a6_2054, out s4_2055)
	branch s7_1011 == 0<32> l2306227E
l23062278:
	a5_1160 = Mem1263[s7_1011 + 8<i32>:int32]
	branch a5_1160 != 0<32> l23062284
l2306227E:
	word32 s4_2059
	word32 a6_2058
	word32 a0_2056
	word32 a1_2057
	mbedtls_mpi_free(fp + -1648<i32>, a2_1159, a4_1163, a5_1160, mstatus, dwLoc0548, dwLoc0508, out a0_2056, out a1_2057, out a2_1159, out a3_1162, out a4_1163, out a5_1160, out a6_2058, out s4_2059)
l23062284:
	a2Out = a2_1159
	a3Out = a3_1162
	a4Out = a4_1163
	a5Out = a5_1160
	a7Out = a7
	return s0_1021
mbedtls_mpi_exp_mod_exit:


word32 mbedtls_mpi_gcd(word32 ra, word32 a1, word32 a2, word32 a3, word32 a4, word32 mstatus, word32 dwArg68, word32 dwArg98, word32 dwArgA8, word32 dwArgC8, word32 dwArgD8, word32 dwArgE8, word32 dwArgF8, word32 dwArg0108, word32 dwArg0118, word32 dwArg0128, word32 dwArg0138, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_check_privkey
//      mbedtls_rsa_private
//      mbedtls_mpi_inv_mod
// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] mstatus:[0..31] ra:[0..31] Stack +0068:[0..31] Stack +0098:[0..31] Stack +00A8:[0..31] Stack +00C8:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +00F8:[0..31] Stack +0108:[0..31] Stack +0118:[0..31] Stack +0128:[0..31] Stack +0138:[0..31]
// LiveOut: a0 a2 a3 a4 a5 ra s1 s2 s3 s4 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_mpi_gcd_entry:
l230622D0:
	word32 a0_31
	word32 a3_39
	word32 s1_551
	word32 s0_550
	word32 a1_552
	word32 s4_555
	word32 a6_553
	word32 a7_554
	word32 a5_116
	word32 a4_115
	word32 a2_113
	word32 s8_124
	word32 s3_122
	word32 s2_121
	word32 ra_43 = mbedtls_mpi_copy(ra, fp + -40<i32>, a1, a2, a3, a4, 1<32>, mstatus, 0<32>, dwArg98, dwArgD8, dwArg0118, out s0_550, out s1_551, out a0_31, out a1_552, out a2_113, out a3_39, out a4_115, out a5_116, out a6_553, out a7_554, out s2_121, out s3_122, out s4_555, out s8_124)
	word32 s0_132 = a0_31
	branch a0_31 != 0<32> l230623A8
l230622FC:
	word32 a0_57
	word32 a7_575
	word32 s4_576
	word32 a1_572
	word32 a6_574
	word32 a3_573
	word32 s1_571
	word32 s0_570
	word32 ra_69 = mbedtls_mpi_copy(ra_43, fp + -28<i32>, a2, a2, a3_39, a4_115, a5_116, mstatus, 0<32>, dwArg98, dwArgD8, dwArg0118, out s0_570, out s1_571, out a0_57, out a1_572, out a2_113, out a3_573, out a4_115, out a5_116, out a6_574, out a7_575, out s2_121, out s3_122, out s4_576, out s8_124)
	s0_132 = a0_57
	branch a0_57 != 0<32> l230623A8
l2306230A:
	word32 a5_86
	word32 a2_577
	word32 a0_81 = mbedtls_mpi_lsb(fp + -40<i32>, a5_116, out a2_577, out a5_86)
	word32 s1_101 = a0_81
	word32 a2_94
	word32 a5_97
	word32 a0_92 = mbedtls_mpi_lsb(fp + -28<i32>, a5_86, out a2_94, out a5_97)
	branch a0_92 >=u a0_81 l2306231E
l2306231C:
	s1_101 = a0_92
l2306231E:
	word32 a0_111
	word32 s1_120
	word32 a1_578
	word32 s4_580
	word32 a3_579
	word32 ra_119 = mbedtls_mpi_shift_r(ra_69, s1_101, a2_94, a5_97, mstatus, dwLoc50, dwLoc4C, dwLoc28, dwLoc18, dwArgA8, dwArgE8, dwArg0128, out s1_120, out a0_111, out a1_578, out a2_113, out a3_579, out a4_115, out a5_116, out s2_121, out s3_122, out s4_580, out s8_124)
	s0_132 = a0_111
	branch a0_111 != 0<32> l230623A8
l2306232A:
	word32 a0_135
	word32 s4_583
	word32 a3_582
	word32 a1_581
	word32 s1_144
	word32 ra_143 = mbedtls_mpi_shift_r(ra_119, s1_120, a2_113, a5_116, mstatus, dwLoc50, dwLoc4C, dwLoc28, dwLoc18, dwArgA8, dwArgE8, dwArg0128, out s1_144, out a0_135, out a1_581, out a2_113, out a3_582, out a4_115, out a5_116, out s2_121, out s3_122, out s4_583, out s8_124)
	s0_132 = a0_135
	branch a0_135 != 0<32> l230623A8
l23062336:
l2306233C:
	word32 a2_166
	word32 a4_168
	word32 a5_169
	word32 a1_618
	word32 a3_619
	word32 a6_620
	branch mbedtls_mpi_cmp_int(0<32>, a2_113, out a1_618, out a2_166, out a3_619, out a4_168, out a5_169, out a6_620) != 0<32> l2306235E
l2306235E:
	word32 a2_175
	word32 a5_178
	word32 a0_187
	word32 s4_587
	word32 a3_586
	word32 a1_585
	word32 s1_584
	word32 ra_195 = mbedtls_mpi_shift_r(ra_143, mbedtls_mpi_lsb(fp + -40<i32>, a5_169, out a2_175, out a5_178), a2_175, a5_178, mstatus, dwLoc50, dwLoc4C, dwLoc28, dwLoc18, dwArgA8, dwArgE8, dwArg0128, out s1_584, out a0_187, out a1_585, out a2_113, out a3_586, out a4_115, out a5_116, out s2_121, out s3_122, out s4_587, out s8_124)
	s0_132 = a0_187
	branch a0_187 != 0<32> l230623A8
l23062370:
	word32 a2_212
	word32 a5_215
	word32 a0_221
	word32 s1_599
	word32 a1_600
	word32 a3_601
	word32 s4_602
	word32 ra_229 = mbedtls_mpi_shift_r(ra_195, mbedtls_mpi_lsb(fp + -28<i32>, a5_116, out a2_212, out a5_215), a2_212, a5_215, mstatus, dwLoc50, dwLoc4C, dwLoc28, dwLoc18, dwArgA8, dwArgE8, dwArg0128, out s1_599, out a0_221, out a1_600, out a2_113, out a3_601, out a4_115, out a5_116, out s2_121, out s3_122, out s4_602, out s8_124)
	s0_132 = a0_221
	branch a0_221 != 0<32> l230623A8
l23062382:
	word32 ra_269
	word32 a3_248
	word32 a4_249
	word32 a5_250
	word32 a1_603
	word32 a2_604
	word32 a6_605
	branch mbedtls_mpi_cmp_mpi(a2_113, a4_115, a5_116, out a1_603, out a2_604, out a3_248, out a4_249, out a5_250, out a6_605) < 0<32> l230623C8
l230623C8:
	word32 a0_255
	word32 s0_606
	word32 s1_607
	word32 a1_608
	word32 a3_609
	word32 a7_610
	word32 s4_611
	ra_269 = mbedtls_mpi_sub_abs(ra_229, fp + -28<i32>, fp + -28<i32>, fp + -40<i32>, a3_248, a4_249, a5_250, mstatus, dwArg68, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0108, out s0_606, out s1_607, out a0_255, out a1_608, out a2_113, out a3_609, out a4_115, out a5_116, out a7_610, out s2_121, out s3_122, out s4_611, out s8_124)
	s0_132 = a0_255
	branch a0_255 != 0<32> l230623A8
l230623D6:
l2306238E:
	word32 a0_283
	word32 s0_612
	word32 s1_613
	word32 a1_614
	word32 a3_615
	word32 a7_616
	word32 s4_617
	ra_269 = mbedtls_mpi_sub_abs(ra_229, fp + -40<i32>, fp + -40<i32>, fp + -28<i32>, a3_248, a4_249, a5_250, mstatus, dwArg68, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0108, out s0_612, out s1_613, out a0_283, out a1_614, out a2_113, out a3_615, out a4_115, out a5_116, out a7_616, out s2_121, out s3_122, out s4_617, out s8_124)
	s0_132 = a0_283
	branch a0_283 != 0<32> l230623A8
l2306239C:
l230623A0:
	word32 a0_315
	word32 a1_621
	word32 a3_622
	word32 s4_623
	ra_143 = mbedtls_mpi_shift_r(ra_269, 1<32>, a2_113, a5_116, mstatus, dwLoc50, dwLoc4C, dwLoc28, dwLoc18, dwArgA8, dwArgE8, dwArg0128, out s1_144, out a0_315, out a1_621, out a2_113, out a3_622, out a4_115, out a5_116, out s2_121, out s3_122, out s4_623, out s8_124)
	s0_132 = a0_315
	branch a0_315 == 0<32> l2306233C
l23062346:
	word32 a0_340
	word32 a3_343
	word32 s4_591
	word32 a7_590
	word32 s1_589
	word32 s0_588
	word32 ra_348 = mbedtls_mpi_shift_l(ra_143, s1_144, a2_166, a4_168, a5_169, mstatus, 0<32>, dwArg98, dwArgD8, dwArg0118, out s0_588, out s1_589, out a0_340, out a2_113, out a3_343, out a4_115, out a5_116, out a7_590, out s2_121, out s3_122, out s4_591, out s8_124)
	s0_132 = a0_340
	branch a0_340 != 0<32> l230623A8
l23062352:
	word32 a0_365
	word32 a1_594
	word32 s1_593
	word32 s0_592
	word32 a3_595
	word32 a6_596
	word32 a7_597
	word32 s4_598
	mbedtls_mpi_copy(ra_348, s2_121, fp + -28<i32>, a2_113, a3_343, a4_115, a5_116, mstatus, 0<32>, dwArg98, dwArgD8, dwArg0118, out s0_592, out s1_593, out a0_365, out a1_594, out a2_113, out a3_595, out a4_115, out a5_116, out a6_596, out a7_597, out s2_121, out s3_122, out s4_598, out s8_124)
	s0_132 = a0_365
l230623A8:
	word32 a2_396
	word32 a5_397
	word32 a4_400
	word32 s4_560
	word32 a0_556
	word32 a6_559
	word32 a1_557
	word32 a3_558
	mbedtls_mpi_free(fp + -52<i32>, a2_113, a4_115, a5_116, mstatus, dwArgF8, dwArg0138, out a0_556, out a1_557, out a2_396, out a3_558, out a4_400, out a5_397, out a6_559, out s4_560)
	word32 a2_408
	word32 a5_409
	word32 a4_412
	word32 a6_564
	word32 s4_565
	word32 a3_563
	word32 a0_561
	word32 a1_562
	mbedtls_mpi_free(fp + -40<i32>, a2_396, a4_400, a5_397, mstatus, dwArgF8, dwArg0138, out a0_561, out a1_562, out a2_408, out a3_563, out a4_412, out a5_409, out a6_564, out s4_565)
	word32 a2_420
	word32 a5_421
	word32 a4_424
	word32 s4_427
	word32 a3_568
	word32 a6_569
	word32 a1_567
	word32 a0_566
	mbedtls_mpi_free(fp + -28<i32>, a2_408, a4_412, a5_409, mstatus, dwArgF8, dwArg0138, out a0_566, out a1_567, out a2_420, out a3_568, out a4_424, out a5_421, out a6_569, out s4_427)
	s1Out = dwLoc4C
	a0Out = s0_132
	a2Out = a2_420
	a3Out = s2
	a4Out = a4_424
	a5Out = a5_421
	s2Out = s2_121
	s3Out = s3_122
	s4Out = s4_427
	s8Out = s8_124
	return dwLoc08
mbedtls_mpi_gcd_exit:


word32 mbedtls_mpi_fill_random(word32 ra, word32 s0, word32 s1, word32 a0, word32 a1, word32 a2, word32 a3, word32 a4, word32 mstatus, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s8Out, ptr32 & mstatusOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_private
//      mbedtls_ecp_mul
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] mstatus:[0..31] ra:[0..31] s0:[0..31] s1:[0..31]
// LiveOut: a0 a2 a3 a4 a5 mstatus s2 s3 s4 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 mstatus s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: ra s0 s1 sp
mbedtls_mpi_fill_random_entry:
l230623DC:
	branch a1 >u 1024<i32> l23062420
l23062420:
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = 1024<i32>
	s2Out = s2
	s3Out = s3
	s4Out = s4
	s8Out = s8
	mstatusOut = mstatus
	return 0xFFFFFFFC<32>
l230623E4:
	word32 s0_25
	word32 ra_27
	word32 a6_69
	word32 a7_70
	word32 t0_75
	word32 t1_76
	word32 t3_77
	word32 t4_78
	word32 t5_79
	word32 t6_80
	word32 tp_81
	word32 a0_28
	word32 a2_29
	word32 a3_30
	word32 a4_40
	word32 a5_23
	word32 s2_107
	word32 s3_110
	word32 s4_113
	word32 s8_116
	call a2 (retsize: 0;)
		uses: a0:a3,a1:fp + -1040<i32>,a2:a1,a3:a3,a4:a4,a5:a5_23,a6:a6_69,a7:a7_70,mstatus:mstatus,ra:ra,s0:a1,s1:a0,s2:s2_71,s3:s3_72,s4:s4_73,s8:s8_74,Stack +0404:s1,Stack +0408:s0,Stack +040C:ra,t0:t0_75,t1:t1_76,t3:t3_77,t4:t4_78,t5:t5_79,t6:t6_80,tp:tp_81
		defs: a0:a0_28,a2:a2_29,a3:a3_30,a4:a4_68,a5:a5_23,a6:a6_69,a7:a7_70,mstatus:mstatus_67,ra:ra_27,s0:s0_25,s2:s2_71,s3:s3_72,s4:s4_73,s8:s8_74,t0:t0_75,t1:t1_76,t3:t3_77,t4:t4_78,t5:t5_79,t6:t6_80,tp:tp_81
	branch a0_28 != 0<32> l2306240E
l23062404:
	word32 s0_160
	word32 s1_161
	word32 a1_162
	word32 a7_163
	mbedtls_mpi_read_binary(ra_27, fp - 1040<i32>, s0_25, a3_30, a4, mstatus, dwLoc0408, dwLoc03F8, dwLoc0338, dwLoc0328, dwLoc02F8, dwLoc02E8, dwLoc02B8, dwLoc02A8, out s0_160, out s1_161, out a0_28, out a1_162, out a2_29, out a3_30, out a4_40, out a5_23, out a7_163, out s2_107, out s3_110, out s4_113, out s8_116)
l2306240E:
	a2Out = a2_29
	a3Out = a3_30
	a4Out = a4_40
	a5Out = a5_23
	s2Out = s2_107
	s3Out = s3_110
	s4Out = s4_113
	s8Out = s8_116
	mstatusOut = mstatus
	return a0_28
mbedtls_mpi_fill_random_exit:


word32 mbedtls_mpi_inv_mod(word32 ra, word32 s0, word32 a1, word32 a2, word32 s5, word32 s6, word32 s7, word32 s10, word32 s11, word32 mstatus, word32 dwArg28, word32 dwArg38, word32 dwArg48, word32 dwArg58, word32 dwArg68, word32 dwArg78, word32 dwArg84, word32 dwArg88, word32 dwArg98, word32 dwArgA4, word32 dwArgA8, word32 dwArgB8, word32 dwArgD8, word32 dwArgE8, word32 dwArgF8, word32 dwArg0164, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s9Out, ptr32 & s10Out, ptr32 & s11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_check_privkey
//      mbedtls_rsa_private
//      ecp_normalize_jac
//      ecp_normalize_jac_many
// MayUse:  a1:[0..31] a2:[0..31] mstatus:[0..31] ra:[0..31] s0:[0..31] s10:[0..31] s11:[0..31] s5:[0..31] s6:[0..31] s7:[0..31] Stack +0028:[0..31] Stack +0038:[0..31] Stack +0048:[0..31] Stack +0058:[0..31] Stack +0068:[0..31] Stack +0078:[0..31] Stack +0084:[0..31] Stack +0088:[0..31] Stack +0098:[0..31] Stack +00A4:[0..31] Stack +00A8:[0..31] Stack +00B8:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +00F8:[0..31] Stack +0164:[0..31]
// LiveOut: a0 a2 a3 a4 a5 ra s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_mpi_inv_mod_entry:
l23062424:
	word32 s2_1018 = a0
	word32 s3_11 = a1
	word32 s1_1005 = a2
	word32 a4_26
	word32 a1_1433
	word32 a6_1434
	word32 a5_1000
	word32 a3_1002
	word32 a2_1306
	branch mbedtls_mpi_cmp_int(0<32>, a2, out a1_1433, out a2_1306, out a3_1002, out a4_26, out a5_1000, out a6_1434) <= 0<32> l230625D8
l23062444:
	dwLoc8C = 0<32>
	dwLoc70 = 1<32>
	word32 s1_72
	word32 a0_84
	word32 a3_1435
	word32 s4_1436
	word32 a5_110
	word32 a4_109
	word32 a2_107
	ra = mbedtls_mpi_gcd(ra, a1, a2, a3_1002, a4_26, mstatus, dwLoc28, 1<32>, 0<32>, dwArg38, dwArg48, dwArg58, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, out s1_72, out a0_84, out a2_107, out a3_1435, out a4_109, out a5_110, out s2_1018, out s3_11, out s4_1436, out s8)
	branch a0_84 != 0<32> l230625A2
l2306248C:
	word32 a6_1483
	word32 a1_1481
	word32 a3_1482
	branch mbedtls_mpi_cmp_int(1<32>, a2_107, out a1_1481, out a2_107, out a3_1482, out a4_109, out a5_110, out a6_1483) != 0<32> l230625A2
l2306249A:
	word32 a0_105
	word32 a3_108
	word32 s1_1484
	word32 a7_1485
	word32 s4_1486
	ra = mbedtls_mpi_mod_mpi(ra, fp + -128<i32>, s3_11, s1_72, s5, s6, s7, s10, s11, mstatus, 1<32>, 0<32>, dwLoc58, s0, dwLoc48, dwLoc38, dwLoc28, dwLoc18, 0<32>, 1<32>, 0<32>, dwArg38, dwArg48, dwArg58, dwArg68, dwArg78, dwArg84, dwArg98, dwArgA4, out s1_1484, out a0_105, out a2_107, out a3_108, out a4_109, out a5_110, out a7_1485, out s2_1018, out s3_11, out s4_1486, out s5, out s6, out s7, out s8, out s9, out s10, out s11)
	branch a0_105 != 0<32> l230625A2
l230624AA:
	word32 a0_135
	word32 a3_143
	word32 s1_149
	word32 s4_1491
	word32 a7_1490
	word32 a1_1488
	word32 a6_1489
	word32 s0_1487
	ra = mbedtls_mpi_copy(ra, fp + -116<i32>, fp + -128<i32>, a2_107, a3_108, a4_109, a5_110, mstatus, 0<32>, dwArg58, dwArg98, dwArgD8, out s0_1487, out s1_149, out a0_135, out a1_1488, out a2_107, out a3_143, out a4_109, out a5_110, out a6_1489, out a7_1490, out s2_1018, out s3_11, out s4_1491, out s8)
	branch a0_135 != 0<32> l230625A2
l230624B8:
	word32 a0_160
	word32 a3_168
	word32 s1_174
	word32 a6_1494
	word32 a7_1495
	word32 s4_1496
	word32 s0_1492
	word32 a1_1493
	ra = mbedtls_mpi_copy(ra, fp + -80<i32>, s1_149, a2_107, a3_143, a4_109, a5_110, mstatus, 0<32>, dwArg58, dwArg98, dwArgD8, out s0_1492, out s1_174, out a0_160, out a1_1493, out a2_107, out a3_168, out a4_109, out a5_110, out a6_1494, out a7_1495, out s2_1018, out s3_11, out s4_1496, out s8)
	branch a0_160 != 0<32> l230625A2
l230624C6:
	word32 a0_185
	word32 a3_193
	word32 s4_1502
	word32 a7_1501
	word32 a1_1499
	word32 a6_1500
	word32 s0_1497
	word32 s1_1498
	ra = mbedtls_mpi_copy(ra, fp + -68<i32>, s1_174, a2_107, a3_168, a4_109, a5_110, mstatus, 0<32>, dwArg58, dwArg98, dwArgD8, out s0_1497, out s1_1498, out a0_185, out a1_1499, out a2_107, out a3_193, out a4_109, out a5_110, out a6_1500, out a7_1501, out s2_1018, out s3_11, out s4_1502, out s8)
	branch a0_185 != 0<32> l230625A2
l230624D4:
	word32 a3_212
	word32 s1_1503
	word32 a1_1504
	word32 a7_1505
	word32 s4_1506
	ra = mbedtls_mpi_lset(ra, a3_193, a4_109, mstatus, dwLoc90, 0<32>, 0<32>, dwLoc58, dwArg68, dwArgA8, dwArgE8, out s1_1503, out a1_1504, out a2_107, out a3_212, out a4_109, out a5_110, out a7_1505, out s2_1018, out s3_11, out s4_1506, out s8)
	branch fp != 0xFFFFFF98<32> l230625A2
l230624E0:
	word32 a3_235
	word32 s1_1507
	word32 s4_1510
	word32 a1_1508
	word32 a7_1509
	ra = mbedtls_mpi_lset(ra, a3_212, a4_109, mstatus, dwLoc90, 0<32>, 0<32>, dwLoc58, dwArg68, dwArgA8, dwArgE8, out s1_1507, out a1_1508, out a2_107, out a3_235, out a4_109, out a5_110, out a7_1509, out s2_1018, out s3_11, out s4_1510, out s8)
	branch fp != 0xFFFFFFA4<32> l230625A2
l230624EC:
	word32 a3_258
	word32 a1_1512
	word32 a7_1513
	word32 s4_1514
	word32 s1_1511
	ra = mbedtls_mpi_lset(ra, a3_235, a4_109, mstatus, dwLoc90, 0<32>, 0<32>, dwLoc58, dwArg68, dwArgA8, dwArgE8, out s1_1511, out a1_1512, out a2_107, out a3_258, out a4_109, out a5_110, out a7_1513, out s2_1018, out s3_11, out s4_1514, out s8)
	branch fp != 0xFFFFFFC8<32> l230625A2
l230624F8:
	word32 a0_278 = fp + -44<i32>
	word32 a3_1517
	word32 s1_1515
	word32 a1_1516
	word32 a7_1518
	word32 s4_1519
	ra = mbedtls_mpi_lset(ra, a3_258, a4_109, mstatus, dwLoc90, 0<32>, 0<32>, dwLoc58, dwArg68, dwArgA8, dwArgE8, out s1_1515, out a1_1516, out a2_107, out a3_1517, out a4_109, out a5_110, out a7_1518, out s2_1018, out s3_11, out s4_1519, out s8)
l23062500:
	word32 s0_300 = a0_278
	branch a0_278 != 0<32> l230625A2
l23062504:
	word32 a5_305 = Mem61[a5_110:word32]
	a5_110 = a5_305 & 1<32>
	branch (a5_305 & 1<32>) == 0<32> l2306257A
l2306257A:
	word32 a0_312
	word32 a3_315
	word32 s4_1522
	word32 s1_1520
	word32 a1_1521
	ra = mbedtls_mpi_shift_r(ra, 1<32>, a2_107, a5_305 & 1<32>, mstatus, dwLoc90, 0<32>, 0<32>, dwLoc58, dwArg68, dwArgA8, dwArgE8, out s1_1520, out a0_312, out a1_1521, out a2_107, out a3_315, out a4_109, out a5_110, out s2_1018, out s3_11, out s4_1522, out s8)
	branch a0_312 != 0<32> l230625A2
l23062586:
	word32 a5_335 = Mem61[a5_110:word32]
	a5_110 = a5_335 & 1<32>
	branch (a5_335 & 1<32>) != 0<32> l230625E8
l2306258E:
	word32 a5_338 = Mem61[a5_335 & 1<32>:word32]
	a5_110 = a5_338 & 1<32>
	branch (a5_338 & 1<32>) != 0<32> l230625E8
l230625E8:
	word32 a0_352
	word32 a3_355
	word32 s0_1587
	word32 s1_1588
	word32 a1_1589
	word32 a7_1590
	word32 s4_1591
	ra = mbedtls_mpi_add_mpi(ra, a0_312, fp + -104<i32>, a3_315, a4_109, a5_110, s2_1018, mstatus, 1<32>, dwArg28, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_1587, out s1_1588, out a0_352, out a1_1589, out a2_107, out a3_355, out a4_109, out a5_110, out a7_1590, out s2_1018, out s3_11, out s4_1591, out s8)
	branch a0_352 != 0<32> l230625A2
l230625F6:
	word32 a0_378
	word32 s0_1600
	word32 s1_1601
	word32 a3_1602
	word32 s4_1603
	ra = mbedtls_mpi_sub_mpi(ra, a0_352, fp + -92<i32>, a3_355, a4_109, a5_110, s2_1018, mstatus, 1<32>, dwArg28, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_1600, out s1_1601, out a0_378, out a2_107, out a3_1602, out a4_109, out a5_110, out s2_1018, out s3_11, out s4_1603, out s8)
	branch a0_378 == 0<32> l23062596
l23062604:
l23062596:
	word32 a0_409
	word32 s1_1592
	word32 a1_1593
	word32 a3_1594
	word32 s4_1595
	ra = mbedtls_mpi_shift_r(ra, 1<32>, a2_107, a5_110, mstatus, dwLoc90, 0<32>, 0<32>, dwLoc58, dwArg68, dwArgA8, dwArgE8, out s1_1592, out a0_409, out a1_1593, out a2_107, out a3_1594, out a4_109, out a5_110, out s2_1018, out s3_11, out s4_1595, out s8)
	branch a0_409 == 0<32> l23062606
l23062606:
	word32 s1_1596
	word32 a1_1597
	word32 a3_1598
	word32 s4_1599
	ra = mbedtls_mpi_shift_r(ra, 1<32>, a2_107, a5_110, mstatus, dwLoc90, 0<32>, 0<32>, dwLoc58, dwArg68, dwArgA8, dwArgE8, out s1_1596, out a0_278, out a1_1597, out a2_107, out a3_1598, out a4_109, out a5_110, out s2_1018, out s3_11, out s4_1599, out s8)
l2306250C:
	s5 = dwArg54
	word32 a5_458 = Mem61[a5_110:word32]
	branch (a5_458 & 1<32>) == 0<32> l23062610
l23062610:
	word32 a0_465
	word32 s1_1523
	word32 a1_1524
	word32 s4_1525
	word32 a3_468
	ra = mbedtls_mpi_shift_r(ra, 1<32>, a2_107, a5_458 & 1<32>, mstatus, dwLoc90, 0<32>, 0<32>, dwLoc58, dwArg68, dwArgA8, dwArgE8, out s1_1523, out a0_465, out a1_1524, out a2_107, out a3_468, out a4_109, out a5_110, out s2_1018, out s3_11, out s4_1525, out s8)
	branch a0_465 != 0<32> l230625A2
l2306261C:
	word32 a5_488 = Mem61[a5_110:word32]
	ra = dwArg0164
	a5_110 = a5_488 & 1<32>
	branch (a5_488 & 1<32>) != 0<32> l23062648
l23062624:
	word32 a5_491 = Mem61[a5_488 & 1<32>:word32]
	a3_468 = dwArg0164
	a5_110 = a5_491 & 1<32>
	branch (a5_491 & 1<32>) != 0<32> l23062648
l23062648:
	word32 a0_505
	word32 a3_508
	word32 s4_1567
	word32 a7_1566
	word32 a1_1565
	word32 s1_1564
	word32 s0_1563
	ra = mbedtls_mpi_add_mpi(dwArg0164, a0_465, fp + -56<i32>, a3_468, a4_109, a5_110, s2_1018, mstatus, 1<32>, dwArg28, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_1563, out s1_1564, out a0_505, out a1_1565, out a2_107, out a3_508, out a4_109, out a5_110, out a7_1566, out s2_1018, out s3_11, out s4_1567, out s8)
	branch a0_505 != 0<32> l230625A2
l23062656:
	word32 a0_531
	word32 s4_1579
	word32 a3_1578
	word32 s0_1576
	word32 s1_1577
	ra = mbedtls_mpi_sub_mpi(ra, a0_505, fp + -44<i32>, a3_508, a4_109, a5_110, s2_1018, mstatus, 1<32>, dwArg28, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_1576, out s1_1577, out a0_531, out a2_107, out a3_1578, out a4_109, out a5_110, out s2_1018, out s3_11, out s4_1579, out s8)
	branch a0_531 == 0<32> l2306262C
l23062664:
l2306262C:
	word32 a0_562
	word32 a3_1570
	word32 s4_1571
	word32 s1_1568
	word32 a1_1569
	ra = mbedtls_mpi_shift_r(ra, 1<32>, a2_107, a5_110, mstatus, dwLoc90, 0<32>, 0<32>, dwLoc58, dwArg68, dwArgA8, dwArgE8, out s1_1568, out a0_562, out a1_1569, out a2_107, out a3_1570, out a4_109, out a5_110, out s2_1018, out s3_11, out s4_1571, out s8)
	branch a0_562 != 0<32> l230625A2
l23062638:
	word32 a0_586
	word32 a3_1574
	word32 s4_1575
	word32 s1_1572
	word32 a1_1573
	ra = mbedtls_mpi_shift_r(ra, 1<32>, a2_107, a5_110, mstatus, dwLoc90, 0<32>, 0<32>, dwLoc58, dwArg68, dwArgA8, dwArgE8, out s1_1572, out a0_586, out a1_1573, out a2_107, out a3_1574, out a4_109, out a5_110, out s2_1018, out s3_11, out s4_1575, out s8)
	s0_300 = a0_586
	branch a0_586 == 0<32> l2306250C
l23062646:
l23062516:
	word32 a3_655
	word32 s0_674
	word32 a1_676
	word32 a3_615
	word32 a4_616
	word32 a5_617
	word32 a2_1527
	word32 a1_1526
	word32 a6_1528
	branch mbedtls_mpi_cmp_mpi(a2_107, a4_109, a5_458 & 1<32>, out a1_1526, out a2_1527, out a3_615, out a4_616, out a5_617, out a6_1528) < 0<32> l23062666
l23062666:
	word32 a0_626
	word32 a3_629
	word32 s1_1530
	word32 s4_1531
	word32 s0_1529
	ra = mbedtls_mpi_sub_mpi(ra, s0_300, fp + -68<i32>, a3_615, a4_616, a5_617, s2_1018, mstatus, 1<32>, dwArg28, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_1529, out s1_1530, out a0_626, out a2_107, out a3_629, out a4_109, out a5_110, out s2_1018, out s3_11, out s4_1531, out s8)
	branch a0_626 != 0<32> l230625A2
l23062676:
	word32 a0_652
	word32 s4_1582
	word32 s1_1581
	word32 s0_1580
	ra = mbedtls_mpi_sub_mpi(ra, a0_626, fp + -56<i32>, a3_629, a4_109, a5_110, s2_1018, mstatus, 1<32>, dwArg28, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_1580, out s1_1581, out a0_652, out a2_107, out a3_655, out a4_109, out a5_110, out s2_1018, out s3_11, out s4_1582, out s8)
	s0_674 = a0_652
	branch a0_652 != 0<32> l230625A2
l23062686:
	a1_676 = fp + -44<i32>
l23062522:
	word32 a0_680
	word32 a3_683
	word32 s0_1532
	word32 s1_1533
	word32 s4_1534
	ra = mbedtls_mpi_sub_mpi(ra, s0_300, fp + -116<i32>, a3_615, a4_616, a5_617, s2_1018, mstatus, 1<32>, dwArg28, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_1532, out s1_1533, out a0_680, out a2_107, out a3_683, out a4_109, out a5_110, out s2_1018, out s3_11, out s4_1534, out s8)
	branch a0_680 != 0<32> l230625A2
l23062530:
	word32 a0_706
	word32 s4_1537
	word32 s0_1535
	word32 s1_1536
	ra = mbedtls_mpi_sub_mpi(ra, a0_680, fp + -104<i32>, a3_683, a4_109, a5_110, s2_1018, mstatus, 1<32>, dwArg28, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_1535, out s1_1536, out a0_706, out a2_107, out a3_655, out a4_109, out a5_110, out s2_1018, out s3_11, out s4_1537, out s8)
	s0_674 = a0_706
	branch a0_706 != 0<32> l230625A2
l2306253E:
	a1_676 = fp + -92<i32>
l23062542:
	word32 a0_742
	word32 s4_1586
	word32 a3_1585
	word32 s1_1584
	word32 s0_1583
	ra = mbedtls_mpi_sub_mpi(ra, s0_674, a1_676, a3_655, a4_109, a5_110, s2_1018, mstatus, 1<32>, dwArg28, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_1583, out s1_1584, out a0_742, out a2_107, out a3_1585, out a4_109, out a5_110, out s2_1018, out s3_11, out s4_1586, out s8)
	s0_300 = a0_742
	branch a0_742 != 0<32> l230625A2
l2306254C:
	word32 a6_1540
	word32 a1_1538
	word32 a3_1539
	branch mbedtls_mpi_cmp_int(0<32>, a2_107, out a1_1538, out a2_107, out a3_1539, out a4_109, out a5_110, out a6_1540) != 0<32> l23062504
l23062556:
	word32 a3_782
	word32 a6_1542
	word32 a1_1541
	branch mbedtls_mpi_cmp_int(0<32>, a2_107, out a1_1541, out a2_107, out a3_782, out a4_109, out a5_110, out a6_1542) < 0<32> l2306268C
l2306268C:
	word32 a0_796
	word32 s4_1548
	word32 a7_1547
	word32 a3_1546
	word32 a1_1545
	word32 s1_1544
	word32 s0_1543
	ra = mbedtls_mpi_add_mpi(ra, s0_300, fp + -56<i32>, a3_782, a4_109, a5_110, s2_1018, mstatus, 1<32>, dwArg28, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_1543, out s1_1544, out a0_796, out a1_1545, out a2_107, out a3_1546, out a4_109, out a5_110, out a7_1547, out s2_1018, out s3_11, out s4_1548, out s8)
	s0_300 = a0_796
	branch a0_796 == 0<32> l23062556
l2306269C:
l23062562:
	word32 a2_828
	word32 a3_829
	word32 a4_830
	word32 a5_831
	word32 a1_1549
	word32 a6_1550
	branch mbedtls_mpi_cmp_mpi(a2_107, a4_109, a5_110, out a1_1549, out a2_828, out a3_829, out a4_830, out a5_831, out a6_1550) >= 0<32> l2306269E
l2306269E:
	word32 a0_841
	word32 a3_1553
	word32 s4_1554
	word32 s0_1551
	word32 s1_1552
	ra = mbedtls_mpi_sub_mpi(ra, s0_300, fp + -56<i32>, a3_829, a4_830, a5_831, s2_1018, mstatus, 1<32>, dwArg28, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_1551, out s1_1552, out a0_841, out a2_107, out a3_1553, out a4_109, out a5_110, out s2_1018, out s3_11, out s4_1554, out s8)
	s0_300 = a0_841
	branch a0_841 == 0<32> l23062562
l230626AE:
l2306256E:
	word32 s4_1562
	word32 a7_1561
	word32 a6_1560
	word32 a3_1559
	word32 a0_1557
	word32 a1_1558
	word32 s0_1555
	word32 s1_1556
	ra = mbedtls_mpi_copy(ra, s2_1018, fp + -56<i32>, a2_828, a3_829, a4_830, a5_831, mstatus, 0<32>, dwArg58, dwArg98, dwArgD8, out s0_1555, out s1_1556, out a0_1557, out a1_1558, out a2_107, out a3_1559, out a4_109, out a5_110, out a6_1560, out a7_1561, out s2_1018, out s3_11, out s4_1562, out s8)
l230625A2:
	word32 a2_903
	word32 a5_904
	word32 a4_907
	word32 a6_1440
	word32 s4_1441
	word32 a3_1439
	word32 a0_1437
	word32 a1_1438
	mbedtls_mpi_free(fp + -128<i32>, a2_107, a4_109, a5_110, mstatus, dwArgB8, dwArgF8, out a0_1437, out a1_1438, out a2_903, out a3_1439, out a4_907, out a5_904, out a6_1440, out s4_1441)
	word32 a2_915
	word32 a5_916
	word32 a4_919
	word32 s4_1446
	word32 a3_1444
	word32 a6_1445
	word32 a0_1442
	word32 a1_1443
	mbedtls_mpi_free(fp + -116<i32>, a2_903, a4_907, a5_904, mstatus, dwArgB8, dwArgF8, out a0_1442, out a1_1443, out a2_915, out a3_1444, out a4_919, out a5_916, out a6_1445, out s4_1446)
	word32 a2_927
	word32 a5_928
	word32 a4_931
	word32 a1_1448
	word32 a6_1450
	word32 a3_1449
	word32 a0_1447
	word32 s4_1451
	mbedtls_mpi_free(fp + -104<i32>, a2_915, a4_919, a5_916, mstatus, dwArgB8, dwArgF8, out a0_1447, out a1_1448, out a2_927, out a3_1449, out a4_931, out a5_928, out a6_1450, out s4_1451)
	word32 a2_939
	word32 a5_940
	word32 a4_943
	word32 a1_1453
	word32 a0_1452
	word32 a3_1454
	word32 s4_1456
	word32 a6_1455
	mbedtls_mpi_free(fp + -92<i32>, a2_927, a4_931, a5_928, mstatus, dwArgB8, dwArgF8, out a0_1452, out a1_1453, out a2_939, out a3_1454, out a4_943, out a5_940, out a6_1455, out s4_1456)
	word32 a2_951
	word32 a5_952
	word32 a4_955
	word32 a6_1460
	word32 a1_1458
	word32 a3_1459
	word32 s4_1461
	word32 a0_1457
	mbedtls_mpi_free(fp + -140<i32>, a2_939, a4_943, a5_940, mstatus, dwArgB8, dwArgF8, out a0_1457, out a1_1458, out a2_951, out a3_1459, out a4_955, out a5_952, out a6_1460, out s4_1461)
	word32 a2_963
	word32 a5_964
	word32 a4_967
	word32 a1_1463
	word32 a3_1464
	word32 s4_1466
	word32 a0_1462
	word32 a6_1465
	mbedtls_mpi_free(fp + -80<i32>, a2_951, a4_955, a5_952, mstatus, dwArgB8, dwArgF8, out a0_1462, out a1_1463, out a2_963, out a3_1464, out a4_967, out a5_964, out a6_1465, out s4_1466)
	word32 a2_975
	word32 a5_976
	word32 a4_979
	word32 a6_1470
	word32 a1_1468
	word32 a3_1469
	word32 s4_1471
	word32 a0_1467
	mbedtls_mpi_free(fp + -68<i32>, a2_963, a4_967, a5_964, mstatus, dwArgB8, dwArgF8, out a0_1467, out a1_1468, out a2_975, out a3_1469, out a4_979, out a5_976, out a6_1470, out s4_1471)
	word32 a2_987
	word32 a5_988
	word32 a4_991
	word32 a1_1473
	word32 a3_1474
	word32 a6_1475
	word32 s4_1476
	word32 a0_1472
	mbedtls_mpi_free(fp + -56<i32>, a2_975, a4_979, a5_976, mstatus, dwArgB8, dwArgF8, out a0_1472, out a1_1473, out a2_987, out a3_1474, out a4_991, out a5_988, out a6_1475, out s4_1476)
	word32 a6_1480
	word32 a4_1479
	word32 a0_1477
	word32 a1_1478
	s1_1005 = mbedtls_mpi_free(fp + -44<i32>, a2_987, a4_991, a5_988, mstatus, dwArgB8, dwArgF8, out a0_1477, out a1_1478, out a2_1306, out a3_1002, out a4_1479, out a5_1000, out a6_1480, out s4)
l230625D8:
	s1Out = s1_1005
	a0Out = dwLoc8C
	a2Out = a2_1306
	a3Out = a3_1002
	a4Out = dwLoc70
	a5Out = a5_1000
	s2Out = s2_1018
	s3Out = s3_11
	s4Out = s4
	s5Out = s5
	s6Out = s6
	s7Out = s7
	s8Out = s8
	s9Out = s9
	s10Out = s10
	s11Out = s11
	return ra
mbedtls_mpi_inv_mod_exit:


word32 mbedtls_cipher_get_block_size(word32 a0, word32 a5, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_cipher_update
//      mbedtls_cipher_finish
// MayUse:  a0:[0..31] a5:[0..31]
// LiveOut: a0 a5
// Trashed: a0 a5
// Preserved: sp
mbedtls_cipher_get_block_size_entry:
l230626B0:
	branch a0 == 0<32> l230626BC
l230626BC:
l230626B2:
	branch a5 == 0<32> l230626BE
l230626BE:
	a5Out = a5
	return <invalid>
l230626B8:
	a5Out = Mem0[0x14<32>:word32]
	return <invalid>
mbedtls_cipher_get_block_size_exit:


void add_pkcs_padding(word32 a0, word32 a1, word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut:
// Trashed: a1 a4 a5
// Preserved: sp
add_pkcs_padding_entry:
l230626C0:
	word32 a1_5 = a1 - a2
	word32 a5_15 = 0<32>
l230626C4:
	branch a5_15 <u a1_5 l230626CA
l230626CA:
	Mem14[a0 + a5_15 + a2:byte] = SLICE(a1_5, byte, 0)
	a5_15 = a5_15 + 1<32> & 255<i32>
l230626C8:
	return
add_pkcs_padding_exit:


void get_pkcs_padding(word32 a0, word32 a1, word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut:
// Trashed: a0 a2 a3 a4 a5 a6 a7
// Preserved: sp
get_pkcs_padding_entry:
l230626DC:
	branch a0 == 0<32> l23062728
l230626DE:
	branch a2 == 0<32> l23062728
l23062728:
	return
l230626E0:
	word32 a6_10 = CONVERT(Mem0[a0 + a1 + -1<i32>:byte], byte, word32)
	word32 a7_12 = a1 - a6_10
	Mem15[a2:word32] = a7_12
	word32 a5_14 = CONVERT(a1 <u a6_10, bool, word32) | CONVERT(a6_10 <u 1<i32>, bool, word32)
	word32 a4_16 = 0<32>
l230626FC:
	branch a4_16 != a1 l23062706
l23062706:
	a4_16 = a4_16 + 1<32>
	a5_14 = (a5_14 | (CONVERT(a4_16 <u a7_12, bool, word32) ^ 1<i32>) + (a6_10 ^ CONVERT(Mem15[a0 + a4_16:byte], byte, word32))) & 255<i32>
l23062700:
	branch a5_14 != 0<32> l23062730
l23062730:
	return
l23062702:
	return
get_pkcs_padding_exit:


void add_zeros_padding(word32 a0, word32 a1, word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut:
// Trashed: a2 a5
// Preserved: sp
add_zeros_padding_entry:
l23062738:
	branch a2 <u a1 l2306273E
l2306273E:
	Mem7[a0 + a2:byte] = 0<8>
	a2 = a2 + 1<32>
l2306273C:
	return
add_zeros_padding_exit:


void get_no_padding(word32 a0, word32 a1, word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut:
// Trashed: a0
// Preserved: sp
get_no_padding_entry:
l2306274A:
	branch a0 == 0<32> l23062754
l2306274C:
	branch a2 == 0<32> l23062754
l23062754:
	return
l2306274E:
	Mem8[a1:word32] = a2
	return
get_no_padding_exit:


void get_zeros_padding(word32 a0, word32 a1, word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: sp
get_zeros_padding_entry:
l2306275C:
	branch a0 == 0<32> l23062790
l2306275E:
	branch a2 == 0<32> l23062790
l23062790:
	return
l23062760:
	Mem7[a2:word32] = 0<32>
	word32 a5_16 = 0<32>
l23062766:
	branch a1 != 0<32> l2306276C
l2306276C:
	word32 a3_10 = a1 + -1<i32>
	word32 a4_17 = CONVERT(CONVERT(Mem13[a0 + a3_10:byte], byte, word32) != 0<32>, bool, word32) | a5_16
	Mem22[(a5_16 ^ a4_17) + a1 | a1:word32] = Mem13[a1:word32]
	a1 = a3_10
	a5_16 = a4_17
l23062768:
	return
get_zeros_padding_exit:


word32 mbedtls_cipher_info_from_type(word32 a0, word32 a4, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_derive_keys
// MayUse:  a0:[0..31] a4:[0..31]
// LiveOut: a0 a5
// Trashed: a0 a3 a5
// Preserved: sp
mbedtls_cipher_info_from_type_entry:
l23062798:
l230627A0:
	word32 a5_7 = Mem0[a4 + 4<i32>:word32]
	branch a4 != 0<32> l230627A8
l230627A8:
	branch CONVERT(Mem0[a5_7:byte], byte, word32) == a0 l230627A4
l230627B0:
l230627A4:
	a5Out = a5_7
	return a4
mbedtls_cipher_info_from_type_exit:


word32 mbedtls_cipher_info_from_values(word32 a0, word32 a1, word32 a2, word32 a3, word32 a5, ptr32 & a4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_gcm_setkey
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a5:[0..31]
// LiveOut: a0 a4
// Trashed: a0 a3 a4 a5
// Preserved: sp
mbedtls_cipher_info_from_values_entry:
l230627B4:
l230627BC:
	word32 a4_7 = Mem0[a5 + 4<i32>:word32]
	branch a5 != 0<32> l230627C4
l230627C4:
	a5 = Mem0[a3 + 24<i32>:word32]
	a3 = CONVERT(Mem0[a3:byte], byte, word32)
	branch a3 != a0 l230627DC
l230627CE:
	a5 = Mem0[a3 + 4<i32>:word32]
	branch a3 != a1 l230627DC
l230627D4:
	a3 = CONVERT(Mem0[a5 + 1<i32>:byte], byte, word32)
	branch a3 == a2 l230627C0
l230627DC:
l230627C0:
	a4Out = a4_7
	return a5
mbedtls_cipher_info_from_values_exit:


word32 mbedtls_cipher_init(word32 ra, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_setup
// MayUse:  a0:[0..31] ra:[0..31]
// LiveOut: ra
// Trashed: a0 a1 a2 a3 a4 a5 ra t0 t1
// Preserved: sp
mbedtls_cipher_init_entry:
l230627E0:
l230627E6_thunk_memset:
	word32 t1_16
	word32 a0_17
	word32 a1_18
	word32 a2_19
	word32 a3_20
	word32 a4_21
	word32 a5_22
	return memset(ra, a0, 0<32>, 64<i32>, out t1_16, out a0_17, out a1_18, out a2_19, out a3_20, out a4_21, out a5_22)
mbedtls_cipher_init_exit:


word32 mbedtls_cipher_free(word32 ra, word32 a0, word32 a5, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_transform_free
//      mbedtls_gcm_setkey
//      mbedtls_gcm_free
// MayUse:  a0:[0..31] a5:[0..31] ra:[0..31]
// LiveOut: a2 a5
// Trashed: a0 a2 a5
// Preserved: ra s0 sp
mbedtls_cipher_free_entry:
l230627EA:
	branch a0 == 0<32> l23062818
l23062818:
	a5Out = a5
	return a2
l230627EC:
	word32 s0_17 = a0
	word32 a0_10 = Mem8[a0 + 60<i32>:word32]
	branch a0_10 == 0<32> l23062800
l230627F8:
	word32 a5_14 = Mem8[Mem8[a5 + 24<i32>:word32] + 32<i32>:word32]
	word32 a2_20
	call a5_14 (retsize: 0;)
		uses: a0:a0_10,a2:a2_20,a5:a5_14,ra:ra,s0:Mem8[a5:word32]
		defs: a2:a2_20,s0:s0_17
l23062800:
	word32 a5_22 = s0_17 + 64<i32>
l23062804:
	branch s0_17 != a5_22 l23062810
l23062810:
	Mem25[s0_17:byte] = 0<8>
	s0_17 = s0_17 + 1<32>
l23062808:
	a5Out = a5_22
	return dwArg10
mbedtls_cipher_free_exit:


word32 mbedtls_cipher_setkey(word32 a0, word32 a2, word32 a3, word32 a4, word32 a5, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_derive_keys
//      mbedtls_gcm_setkey
// MayUse:  a0:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31]
// LiveOut: a0 a4 a5
// Trashed: a0 a2 a3 a4 a5 t1
// Preserved: sp
mbedtls_cipher_setkey_entry:
l2306281A:
	branch a0 == 0<32> l23062858
l2306281C:
	word32 a0_6 = Mem0[a5:word32]
	branch a5 == 0<32> l23062858
l23062820:
	a5 = Mem0[a4 + 16<i32>:word32]
	a4 = a4 & 2<32>
	branch (a4 & 2<32>) != 0<32> l2306282C
l23062826:
	a5 = Mem0[(a4 & 2<32>) + 4<i32>:word32]
	branch (a4 & 2<32>) != a2 l23062858
l2306282C:
	word32 a5_25
	word32 t1_26
	Mem14[a2 + 4<i32>:word32] = a0_6
	Mem17[a0_6 + 8<i32>:byte] = SLICE(a3, byte, 0)
	a4 = 1<32>
	branch a3 == 1<32> l23062844
l23062838:
	a4 = CONVERT(Mem17[a5 + 1<i32>:byte], byte, word32) + 0xFFFFFFFD<32> & 253<i32>
	branch a4 != 0<32> l2306284E
l2306284E:
	branch a3 != 0<32> l23062858
l23062858:
	a4Out = a4
	a5Out = a5
	return 0xF9FFFF00<32>
l23062850:
	a5_25 = Mem17[a5 + 24<i32>:word32]
	t1_26 = Mem17[a5_25 + 24<i32>:int32]
l23062844:
	a5_25 = Mem17[a5 + 24<i32>:word32]
	t1_26 = Mem17[a5_25 + 20<i32>:int32]
l2306284A:
	word32 a0_47
	word32 a5_48
	word32 a4_49
	word32 t1_52
	call t1_26 (retsize: 0;)
		uses: a0:Mem17[a0_6 + 60<i32>:word32],a2:a2,a3:a3,a4:a4_37,a5:a5_36,t1:t1_52
		defs: a0:a0_47,a4:a4_49,a5:a5_48,t1:t1_52
	a4Out = a4_49
	a5Out = a5_48
	return a0_47
mbedtls_cipher_setkey_exit:


word32 mbedtls_cipher_set_iv(word32 a0, word32 a1, word32 a2, word32 a5, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_cipher_crypt
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a5:[0..31]
// LiveOut: a0 a1 a3 a5 s1
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s1 t0 t1 t3 t4 t5 t6 tp
// Preserved: s0 sp
mbedtls_cipher_set_iv_entry:
l23062860:
	branch a0 == 0<32> l230628A0
l230628A0:
	a0Out = 0xF9FFFF00<32>
	a1Out = a1
	a3Out = a3
	a5Out = a5
	return s1
l23062862:
	word32 a0_21
	word32 a0_14 = Mem12[a5:word32]
	branch a5 == 0<32> l230628B0
l23062870:
	branch a1 == 0<32> l230628B0
l23062872:
	word32 s0_19 = a2
	branch a2 >u 0x10<32> l230628A8
l230628A8:
	a0_21 = 0xF9FFFF80<32>
l2306287A:
	word32 a5_22 = Mem12[0x20<32>:word32]
	branch false l23062888
l23062880:
	a5 = Mem12[a5_22 + 12<i32>:word32]
	branch a2 <u a5 l230628B0
l230628B0:
	a0_21 = 0xF9FFFF00<32>
l23062886:
	s0_19 = a5
l23062888:
	word32 a6_133
	word32 a7_134
	word32 a4_132
	word32 a2_131
	memcpy(a0_14 + 40<i32>, a1, s0_19, out a1, out a2_131, out a3, out a4_132, out a5, out a6_133, out a7_134)
	Mem47[s0_19 + 56<i32>:word32] = a0_14
	a0_21 = 0<32>
l23062896:
	a0Out = a0_21
	a1Out = a1
	a3Out = a3
	a5Out = a5
	return a0_14
mbedtls_cipher_set_iv_exit:


word32 mbedtls_cipher_reset(word32 a0, word32 a5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_cipher_crypt
// MayUse:  a0:[0..31] a5:[0..31]
// LiveOut: a0
// Trashed: a0
// Preserved: sp
mbedtls_cipher_reset_entry:
l230628B8:
	branch a0 == 0<32> l230628C6
l230628BA:
	word32 a0_6 = Mem0[a5:word32]
	branch a5 == 0<32> l230628C6
l230628C6:
	return 0xF9FFFF00<32>
l230628BE:
	Mem9[a0_6 + 36<i32>:word32] = 0<32>
	return 0<32>
mbedtls_cipher_reset_exit:


word32 mbedtls_cipher_update(word32 ra, word32 a0, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 s3, word32 s5, word32 s7, word32 dwArg38, word32 dwArg78, word32 dwArg98, word32 dwArgB8, word32 dwArgE4, word32 dwArg0100, word32 dwArg0104, word32 dwArg0128, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a5Out, ptr32 & a7Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_cipher_crypt
//      mbedtls_gcm_setkey
//      mbedtls_gcm_starts
//      mbedtls_gcm_update
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] ra:[0..31] s3:[0..31] s5:[0..31] s7:[0..31] Stack +0038:[0..31] Stack +0078:[0..31] Stack +0098:[0..31] Stack +00B8:[0..31] Stack +00E4:[0..31] Stack +0100:[0..31] Stack +0104:[0..31] Stack +0128:[0..31]
// LiveOut: a0 a1 a3 a5 a7 ra s0 s1 s2 s3 s4 s5 s6 s7 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s5 s6 s7 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_cipher_update_entry:
l230628CE:
	branch a0 != 0<32> l230628F4
l230628F4:
	word32 s5_114
	word32 a0_107
	word32 a0_24 = Mem22[a5:word32]
	s5_114 = s5
	branch a5 == 0<32> l230628D8
l2306290E:
	s5_114 = a4
	branch a4 == 0<32> l230628D8
l23062912:
	Mem28[a4:word32] = 0<32>
	word32 a5_708
	word32 a0_35 = mbedtls_cipher_get_block_size(a0_24, a5, out a5_708)
	s6 = a3
	word32 s4_203 = a1
	s1 = a2
	word32 s0_173 = Mem28[a4:word32]
	a3 = 1<32>
	s2 = a0_35
	a5 = CONVERT(Mem28[a4 + 1<i32>:byte], byte, word32)
	branch a5 != 1<32> l2306295E
l2306295E:
	a3 = 6<32>
	branch a5 != 6<32> l23062988
l23062988:
	branch a0_35 == 0<32> l23062AD2
l23062AD2:
	a0_107 = 0xF9FFFC80<32>
l2306298C:
	branch a1 != a3 l2306299A
l23062990:
	s0_173 = Mem28[0x2A<32>:word32]
	branch true l230628D8
l23062994:
	a3 = a2 & a0_35
	branch a3 != 0<32> l230628D8
l230628D8:
	a0_107 = 0xF9FFFF00<32>
l2306299A:
	a3 = 2<32>
	branch a5 != 2<32> l23062A7E
l23062A7E:
	branch a5 != 3<32> l23062AA6
l23062AA6:
	a3 = 5<32>
	branch a5 != 5<32> l23062ADA
l23062ADA:
	a0_107 = 0xF9FFFF80<32>
l23062AAC:
	word32 s0_57 = Mem28[a0_35 + 60<i32>:word32]
	word32 tp_90
	word32 t3_91
	word32 t1_92
	word32 s8_94
	word32 t6_436
	word32 t5_435
	word32 t0_433
	word32 t4_434
	call Mem28[a5 + 16<i32>:int32] (retsize: 0;)
		uses: a0:a0_35,a1:a2,a2:s0_57 + 36<i32>,a3:s0_57 + 40<i32>,a4:s0_57 + 20<i32>,a5:a1,a6:a3,a7:a7_95,ra:ra,s0:s0_57,s1:a2,s2:a0_35,s3:s3,s4:a1,s5:a4,s6:a3,s7:s7,s8:s8_94,Stack +0068:dwArg38,Stack +00A8:dwArg78,Stack +00C8:dwArg98,Stack +00E8:dwArgB8,Stack +0114:dwArgE4,Stack +0130:dwArg0100,Stack +0134:dwArg0104,Stack +0158:dwArg0128,t0:t0_433,t1:t1_92,t3:t3_91,t4:t4_434,t5:t5_435,t6:t6_436,tp:tp_90
		defs: a0:a0_75,a1:a1_88,a3:a3_87,a5:a5_85,a7:a7_95,ra:ra_77,s1:s1_78,s2:s2_79,s3:s3_80,s5:s5_82,s6:s6_83,s7:s7_84,s8:s8_94,t0:t0_433,t1:t1_92,t3:t3_91,t4:t4_434,t5:t5_435,t6:t6_436,tp:tp_90
l23062A84:
	word32 s0_99 = Mem28[a0_35 + 60<i32>:word32]
	word32 tp_122
	word32 t3_123
	word32 t1_124
	word32 s8_126
	word32 t6_440
	word32 t5_439
	word32 t4_438
	word32 t0_437
	call Mem28[a5 + 12<i32>:int32] (retsize: 0;)
		uses: a0:a0_35,a1:CONVERT(Mem28[s0_97 + 8<i32>:int8], int8, int32),a2:a2,a3:s0_99 + 36<i32>,a4:s0_99 + 40<i32>,a5:a1,a6:a3,a7:a7_127,ra:ra,s0:s0_99,s1:a2,s2:a0_35,s3:s3,s4:a1,s5:a4,s6:a3,s7:s7,s8:s8_126,Stack +0068:dwArg38,Stack +00A8:dwArg78,Stack +00C8:dwArg98,Stack +00E8:dwArgB8,Stack +0114:dwArgE4,Stack +0130:dwArg0100,Stack +0134:dwArg0104,Stack +0158:dwArg0128,t0:t0_437,t1:t1_124,t3:t3_123,t4:t4_438,t5:t5_439,t6:t6_440,tp:tp_122
		defs: a0:a0_107,a1:a1_120,a3:a3_119,a5:a5_117,a7:a7_127,ra:ra_109,s1:s1_110,s2:s2_111,s3:s3_112,s5:s5_114,s6:s6_115,s7:s7_116,s8:s8_126,t0:t0_437,t1:t1_124,t3:t3_123,t4:t4_438,t5:t5_439,t6:t6_440,tp:tp_122
l23062AA0:
	branch a0_107 != 0<32> l230628DE
l23062AA4:
l230629A0:
	a5 = CONVERT(Mem28[s0_173 + 8<i32>:int8], int8, int32)
	s3 = Mem28[s0_173 + 36<i32>:int32]
	branch a5 != 0<32> l230629CA
l230629CA:
	branch a5 != 1<32> l230629D8
l230629D0:
	a5 = a0_35 - s3
	branch a2 <u a5 l230629B2
l230629AA:
	a5 = a0_35 - s3
	branch a5 <u a2 l230629D8
l230629D8:
	branch s3 == 0<32> l23062A26
l230629DC:
	word32 s7_136 = a0_35 - s3
	word32 a0_142 = s3 + 20<i32> + s0_173
	word32 a5_144
	word32 a1_712
	word32 a4_715
	word32 a6_716
	word32 a7_717
	word32 a2_713
	word32 a3_714
	memcpy(a0_142, a1, s7_136, out a1_712, out a2_713, out a3_714, out a4_715, out a5_144, out a6_716, out a7_717)
	word32 s0_159 = Mem28[a0_142 + 60<i32>:word32]
	word32 s4_178
	word32 tp_187
	word32 t3_188
	word32 t1_189
	word32 a6_190
	word32 s8_191
	word32 t0_193
	word32 t4_194
	word32 t5_195
	word32 t6_196
	call Mem28[Mem28[a5_144 + 24<i32>:word32] + 8<i32>:int32] (retsize: 0;)
		uses: a0:a0_142,a1:CONVERT(Mem28[Mem28[a5_144:word32] + 8<i32>:int8], int8, int32),a2:a0_35,a3:s0_159 + 40<i32>,a4:s0_159 + 20<i32>,a5:a3,a6:a6_190,a7:a7_192,ra:ra,s0:s0_159,s1:a2,s2:a0_35,s3:s3_130,s4:a1,s5:a4,s6:a3,s7:s7_136,s8:s8_191,Stack +0068:dwArg38,Stack +00A8:dwArg78,Stack +00C8:dwArg98,Stack +00E8:dwArgB8,Stack +0114:dwArgE4,Stack +0130:dwArg0100,Stack +0134:dwArg0104,Stack +0158:dwArg0128,t0:t0_193,t1:t1_189,t3:t3_188,t4:t4_194,t5:t5_195,t6:t6_196,tp:tp_187
		defs: a0:a0_172,a1:a1_185,a3:a3_184,a5:a5_182,a6:a6_190,a7:a7_192,ra:ra_174,s0:s0_173,s1:s1_175,s2:s2_176,s3:s3_177,s4:s4_178,s5:s5_179,s6:s6_180,s7:s7_181,s8:s8_191,t0:t0_193,t1:t1_189,t3:t3_188,t4:t4_194,t5:t5_195,t6:t6_196,tp:tp_187
	branch a0_107 != 0<32> l230628DE
l23062A0E:
	a5 = Mem28[s5_114:int32] + s2
	Mem201[s5_114:word32] = a5
	Mem202[s0_173 + 36<i32>:word32] = 0<32>
	s6 = s6 + s2
	s4_203 = s4_178 + s7
	s1 = s1 + s3 - s2
l23062A26:
	branch s1 == 0<32> l230629C6
l23062A28:
	word32 s3_207 = s1 & s2
	branch s3_207 != 0<32> l23062A38
l23062A30:
	branch CONVERT(Mem209[s0_173 + 8<i32>:int8], int8, int32) != 0<32> l23062A38
l23062A36:
	s3_207 = s2
l23062A38:
	s1 = s1 - s3_207
	word32 a0_220 = s0_173 + 20<i32>
	word32 a4_719
	word32 a6_720
	word32 a2_718
	memcpy(a0_220, s4_203 + s1, s3_207, out a1, out a2_718, out a3, out a4_719, out a5, out a6_720, out a7)
	s3 = s3_207 + a5
	Mem237[Mem209[a5 + 36<i32>:word32] + 36<i32>:word32] = s3
	branch s1 == 0<32> l230629C6
l23062A54:
	word32 s0_240 = Mem237[a0_220 + 60<i32>:word32]
	word32 tp_275
	word32 t3_276
	word32 t1_277
	word32 a6_278
	word32 s8_279
	word32 t0_281
	word32 t4_282
	word32 t5_283
	word32 t6_284
	call Mem237[Mem237[a5 + 24<i32>:word32] + 8<i32>:int32] (retsize: 0;)
		uses: a0:a0_220,a1:CONVERT(Mem237[Mem237[a5_222:word32] + 8<i32>:int8], int8, int32),a2:s1_214,a3:s0_240 + 40<i32>,a4:s4_217,a5:s6_247,a6:a6_278,a7:a7_280,ra:ra_250,s0:s0_240,s1:s1_214,s2:s2_206,s3:s3_236,s4:s4_217,s5:s5_253,s6:s6_247,s7:s7_255,s8:s8_279,Stack +0038:dwArg38,Stack +0078:dwArg78,Stack +0098:dwArg98,Stack +00B8:dwArgB8,Stack +00E4:dwArgE4,Stack +0100:dwArg0100,Stack +0104:dwArg0104,Stack +0128:dwArg0128,t0:t0_281,t1:t1_277,t3:t3_276,t4:t4_282,t5:t5_283,t6:t6_284,tp:tp_275
		defs: a0:a0_260,a1:a1_273,a3:a3_272,a5:a5_270,a6:a6_278,a7:a7_280,ra:ra_262,s1:s1_263,s2:s2_264,s3:s3_265,s5:s5_267,s6:s6_268,s7:s7_269,s8:s8_279,t0:t0_281,t1:t1_277,t3:t3_276,t4:t4_282,t5:t5_283,t6:t6_284,tp:tp_275
	branch a0_107 != 0<32> l230628DE
l23062A72:
	a5 = Mem237[s5_114:int32]
	s1 = s1 + a5
l23062A78:
	Mem291[s5_114:word32] = s1
l230629B2:
	word32 a6_711
	word32 a2_709
	word32 a4_710
	memcpy(s3 + 20<i32> + s0_173, a1, a2, out a1, out a2_709, out a3, out a4_710, out a5, out a6_711, out a7)
	s1 = a2 + a5
	Mem316[s1 + 36<i32>:word32] = Mem28[a5 + 36<i32>:word32]
l230629C6:
	a0_107 = 0<32>
l23062964:
	Mem318[a4:word32] = a2
	0<32> = dwArg0128
l23062984_thunk_mbedtls_gcm_update:
	word32 a0_333
	word32 s0_334
	word32 s1_336
	word32 s2_337
	word32 s3_338
	word32 s4_339
	word32 s5_340
	word32 s6_341
	word32 s7_342
	word32 a5_343
	word32 a3_345
	word32 a1_346
	word32 s8_352
	word32 a7_353
	word32 ra_335 = mbedtls_gcm_update(a0_35, a2, dwArg78, a3, out s0_334, out s1_336, out a0_333, out a1_346, out a3_345, out a5_343, out a7_353, out s2_337, out s3_338, out s4_339, out s5_340, out s6_341, out s7_342, out s8_352)
	s0Out = s0_334
	s1Out = s1_336
	a0Out = a0_333
	a1Out = a1_346
	a3Out = a3_345
	a5Out = a5_343
	a7Out = a7_353
	s2Out = s2_337
	s3Out = s3_338
	s4Out = s4_339
	s5Out = s5_340
	s6Out = s6_341
	s7Out = s7_342
	s8Out = s8_352
	return ra_335
l2306292E:
	branch a0_35 != a2 l23062ACA
l23062ACA:
	a0_107 = 0xF9FFFD80<32>
l230628DE:
	0<32> = dwArg0128
	s0Out = dwArgE4
	s1Out = s1
	a0Out = a0_107
	a1Out = a1
	a3Out = a3
	a5Out = a5
	a7Out = a7
	s2Out = s2
	s3Out = s3
	s4Out = dwArg78
	s5Out = s5_114
	s6Out = s6
	s7Out = s7
	s8Out = s5
	return ra
l23062932:
	Mem379[a4:word32] = a0_35
	word32 a1_381 = CONVERT(Mem379[Mem379[a5:word32] + 8<i32>:int8], int8, int32)
	word32 a5_383 = Mem379[a5 + 24<i32>:word32]
	0<32> = dwArg0128
	word32 a0_397
	word32 s0_398
	word32 ra_399
	word32 s1_400
	word32 s2_401
	word32 s3_402
	word32 s4_403
	word32 s5_404
	word32 s6_405
	word32 s7_406
	word32 a5_407
	word32 a3_409
	word32 a1_410
	word32 t1_414
	word32 s8_416
	word32 a7_417
	word32 t0_418
	word32 t4_419
	word32 t5_420
	word32 t6_421
	call Mem379[a5_383 + 4<i32>:int32] (retsize: 0;)
		uses: a0:a0_35,a1:a1_381,a2:dwArg78,a3:a3,a4:a4,a5:a5_383,a6:dwArg98,a7:a7_417,ra:ra,s0:dwArgE4,s1:a2,s2:a0_35,s3:s3,s4:dwArg78,s5:a4,s6:a3,s7:s7,s8:s5,Stack +0038:dwArg38,Stack +0078:dwArg78,Stack +0098:dwArg98,Stack +00B8:dwArgB8,Stack +00E4:dwArgE4,Stack +0100:dwArg0100,Stack +0104:dwArg0104,Stack +0128:dwArg0128,t0:t0_418,t1:t1_414,t3:dwArg38,t4:t4_419,t5:t5_420,t6:t6_421,tp:dwArg0104
		defs: a0:a0_397,a1:a1_410,a3:a3_409,a5:a5_407,a7:a7_417,ra:ra_399,s0:s0_398,s1:s1_400,s2:s2_401,s3:s3_402,s4:s4_403,s5:s5_404,s6:s6_405,s7:s7_406,s8:s8_416,t0:t0_418,t1:t1_414,t4:t4_419,t5:t5_420,t6:t6_421
	s0Out = s0_398
	s1Out = s1_400
	a0Out = a0_397
	a1Out = a1_410
	a3Out = a3_409
	a5Out = a5_407
	a7Out = a7_417
	s2Out = s2_401
	s3Out = s3_402
	s4Out = s4_403
	s5Out = s5_404
	s6Out = s6_405
	s7Out = s7_406
	s8Out = s8_416
	return ra_399
l230628D0:
	s0Out = s0
	s1Out = s1
	a0Out = 0xF9FFFF00<32>
	a1Out = a1
	a3Out = a3
	a5Out = a5
	a7Out = a7
	s2Out = s2
	s3Out = s3
	s4Out = s4
	s5Out = s5
	s6Out = s6
	s7Out = s7
	s8Out = s8
	return ra
mbedtls_cipher_update_exit:


word32 mbedtls_cipher_finish(word32 ra, word32 s0, word32 a0, word32 a1, word32 a2, word32 a3, word32 a5, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_cipher_crypt
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a5:[0..31] ra:[0..31] s0:[0..31]
// LiveOut: a0 a1 a3 a4 a5 ra s1 s2 s3 s4
// Trashed: a0 a1 a2 a3 a4 a5 a6 ra s0 s1 s2 s3 s4 s8 t1 t3
// Preserved: sp
mbedtls_cipher_finish_entry:
l23062AE2:
	word32 s0_115
	branch a0 == 0<32> l23062BCE
l23062AF2:
	s1 = Mem15[a5:word32]
	branch a5 == 0<32> l23062BCE
l23062AF8:
	branch a2 == 0<32> l23062BCE
l23062BCE:
	s0_115 = 0xF9FFFF00<32>
l23062AFA:
	Mem23[a2:word32] = 0<32>
	word32 a0_25 = Mem23[a3:word32]
	a5 = 3<32>
	a4 = CONVERT(Mem23[a3 + 1<i32>:byte], byte, word32)
	branch a4 == 3<32> l23062BC4
l23062B0A:
	a5 = a4 + -5<i32> & 255<i32>
	branch a5 <=u 2<32> l23062BC4
l23062B18:
	a5 = 1<32>
	branch a4 != 1<32> l23062B2C
l23062B2C:
	branch a4 != 2<32> l23062BD6
l23062BD6:
	s0_115 = 0xF9FFFF80<32>
l23062B30:
	a4 = CONVERT(Mem23[a0_25 + 8<i32>:int8], int8, int32)
	s3 = a2
	word32 s4_37 = a1
	s2 = Mem23[a0_25 + 36<i32>:int32]
	branch a4 != 1<32> l23062BB4
l23062BB4:
	branch mbedtls_cipher_get_block_size(a0_25, 1<32>, out a5) == s2 l23062B68
l23062BBC:
	s1 = Mem23[a5 + 12<i32>:word32]
	branch a5 != 0<32> l23062B24
l23062BC0:
	branch s2 != 0<32> l23062B24
l23062BC4:
	s0_115 = 0<32>
l23062B40:
	word32 a0_43 = Mem23[0xD<32>:word32]
	branch true l23062B5C
l23062B5C:
	word32 s1_44 = Mem23[a1 + 56<i32>:word32]
	branch a1 != 0<32> l23062B64
l23062B62:
	a3 = Mem23[a1 + 12<i32>:word32]
l23062B64:
	word32 a4_70
	word32 t1_75
	call 1<32> (retsize: 0;)
		uses: a0:a0_43 + 0x14<32>,a1:a1,a2:s2_38,a3:a3_56,a4:a4_70,a5:1<32>,ra:ra,s0:s0,s1:s1_44,s2:s2_38,s3:a2,s4:a1,t1:t1_75
		defs: a4:a4_70,a5:a5_67,ra:ra_60,s0:s0_61,s1:s1_62,s2:s2_63,s3:s3_64,s4:s4_65,t1:t1_75
l23062B68:
	word32 a5_80
	word32 a0_79 = mbedtls_cipher_get_block_size(s1, a5, out a5_80)
	word32 s1_87 = Mem23[a0_79 + 60<i32>:word32]
	word32 sp_98
	word32 a0_105
	word32 t1_114
	call Mem23[Mem23[a5_80 + 24<i32>:word32] + 8<i32>:int32] (retsize: 0;)
		uses: a0:a0_79,a1:CONVERT(Mem23[Mem23[a5_80:word32] + 8<i32>:int8], int8, int32),a2:a0_79,a3:s1_87 + 40<i32>,a4:s1_87 + 20<i32>,a5:s4_91,ra:ra_93,s0:s0_94,s1:s1_87,s2:s2_95,s3:s3_96,s4:s4_91,t1:t1_114
		defs: a0:a0_105,a1:a1_111,a3:a3_108,a4:a4_109,a5:a5_106,ra:ra_99,s1:s1_101,s2:s2_102,s3:s3_103,sp:sp_98,t1:t1_114
	s0_115 = a0_105
	branch a0_105 != 0<32> l23062B4A
l23062B8E:
	word32 a5_281
	word32 a0_117 = mbedtls_cipher_get_block_size(s1, a5, out a5_281)
	a5 = CONVERT(Mem23[s1 + 8<i32>:int8], int8, int32)
	a1 = a0_117
	branch a5 != 0<32> l23062BC8
l23062BC8:
	Mem121[s3:word32] = a0_117
l23062B9C:
	word32 s4_125 = Mem23[sp_98 + 36<i32>:word32]
	word32 ra_132
	word32 s1_134
	word32 s2_135
	word32 s3_136
	word32 s4_137
	word32 a0_138
	word32 a5_139
	word32 a3_141
	word32 a4_142
	word32 a1_144
	word32 t1_147
	call Mem23[s1 + 16<i32>:int32] (retsize: 0;)
		uses: a0:s4_125,a1:a0_117,a2:Mem23[sp_98 + 104<i32>:word32],a3:a3_108,a4:a4_142,a5:a5_119,a6:Mem23[sp_98 + 72<i32>:word32],ra:ra_99,s0:Mem23[sp_98 + 136<i32>:word32],s1:s1_101,s2:s2_102,s3:s3_103,s4:s4_125,s8:Mem23[sp_98 + 4<i32>:word32],t1:t1_147,t3:Mem23[sp_98 + 32<i32>:word32]
		defs: a0:a0_138,a1:a1_144,a3:a3_141,a4:a4_142,a5:a5_139,ra:ra_132,s1:s1_134,s2:s2_135,s3:s3_136,s4:s4_137,t1:t1_147
	s1Out = s1_134
	a0Out = a0_138
	a1Out = a1_144
	a3Out = a3_141
	a4Out = a4_142
	a5Out = a5_139
	s2Out = s2_135
	s3Out = s3_136
	s4Out = s4_137
	return ra_132
l23062B44:
	s0_115 = 0<32>
	branch s2 != 0<32> l23062B24
l23062B1E:
	s0_115 = 0<32>
	branch false l23062B4A
l23062B24:
	s0_115 = 0xF9FFFD80<32>
l23062B4A:
	s1Out = s1
	a0Out = s0_115
	a1Out = a1
	a3Out = a3
	a4Out = a4
	a5Out = a5
	s2Out = s2
	s3Out = s3
	s4Out = dwArg04
	return ra
mbedtls_cipher_finish_exit:


word32 mbedtls_cipher_set_padding_mode(word32 a0, word32 a1, word32 a5, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_derive_keys
//      mbedtls_cipher_setup
// MayUse:  a0:[0..31] a1:[0..31] a5:[0..31]
// LiveOut: a0 a4 a5
// Trashed: a0 a4 a5
// Preserved: sp
mbedtls_cipher_set_padding_mode_entry:
l23062BDE:
	branch a0 == 0<32> l23062C34
l23062BE0:
	word32 a0_6 = Mem0[a5:word32]
	a4 = CONVERT(Mem0[a5 + 1<i32>:byte], byte, word32)
	a5 = 2<32>
	branch a4 != 2<32> l23062C34
l23062C34:
	a4Out = a4
	a5Out = a5
	return 0xF9FFFF00<32>
l23062BEC:
	word32 a5_17
	branch a1 == 3<32> l23062C12
l23062C12:
	Mem15[0x23062744<32>:word32] = a0_6
	a5_17 = 0x2306275C<32>
l23062BF2:
	branch a1 == 4<32> l23062C26
l23062C26:
	Mem20[a0_6 + 12<i32>:word32] = 0<32>
	a5_17 = 0x2306274A<32>
l23062BF8:
	branch a1 != 0<32> l23062C3C
l23062C3C:
	a4Out = a4
	a5Out = 4<32>
	return 0xF9FFFF80<32>
l23062BFA:
	Mem26[0x230626CC<32>:word32] = a0_6
	a5_17 = 0x230626DC<32>
l23062C0C:
	Mem31[a5_17 + 16<i32>:word32] = a0_6
	a4Out = a4
	a5Out = a5_17
	return 0<32>
mbedtls_cipher_set_padding_mode_exit:


word32 mbedtls_cipher_setup(word32 ra, word32 a0, word32 a1, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_derive_keys
//      mbedtls_gcm_setkey
// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31]
// LiveOut: a0 a4 a5 ra s1
// Trashed: a0 a1 a2 a3 a4 a5 ra s1 t0 t1 tp
// Preserved: s0 sp
mbedtls_cipher_setup_entry:
l23062C44:
	branch a1 == 0<32> l23062C7E
l23062C7E:
	s1Out = s1
	a0Out = 0xF9FFFF00<32>
	a4Out = a4
	a5Out = a5
	return ra
l23062C46:
	word32 a0_16
	branch a0 == 0<32> l23062C86
l23062C86:
	a0_16 = 0xF9FFFF00<32>
l23062C52:
	word32 a0_20
	word32 a1_21
	word32 a5_25
	word32 s0_33
	word32 a0_36
	word32 a2_37
	word32 tp_39
	word32 a3_40
	word32 t0_42
	word32 t1_43
	call Mem12[a5_25 + 28<i32>:word32] (retsize: 0;)
		uses: a0:a0_20,a1:a1_21,a2:a2_37,a3:a3_40,a4:a4_41,a5:a5_38,ra:memset(ra, a0, 0<32>, 64<i32>, out t1_101, out a0_20, out a1_21, out a2_102, out a3_103, out a4_104, out a5_25),s0:a0,s1:Mem12[a5_25 + 24<i32>:word32],t0:t0_42,t1:t1_43,tp:tp_39
		defs: a0:a0_36,a2:a2_37,a3:a3_40,a4:a4_41,a5:a5_38,ra:ra_34,s0:s0_33,s1:s1_35,t0:t0_42,t1:t1_43,tp:tp_39
	Mem44[a0_36 + 60<i32>:word32] = s0_33
	branch a0_36 == 0<32> l23062C8E
l23062C8E:
	a0_16 = 0xF9FFFE80<32>
l23062C68:
	Mem47[s1:word32] = s0_33
	mbedtls_cipher_set_padding_mode(s0_33, 0<32>, a5, out a4, out a5)
	a0_16 = 0<32>
l23062C74:
	s1Out = s1
	a0Out = a0_16
	a4Out = a4
	a5Out = a5
	return ra
mbedtls_cipher_setup_exit:


word32 mbedtls_cipher_crypt(word32 ra, word32 a0, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 a6, word32 s5, word32 s7, word32 dwArg08, word32 dwArg48, word32 dwArg68, word32 dwArg88, word32 dwArgB4, word32 dwArgD0, word32 dwArgD4, word32 dwArgF8, word32 dwArg0128, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_write_record
//      mbedtls_ssl_read_record_layer
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] a6:[0..31] ra:[0..31] s5:[0..31] s7:[0..31] Stack +0008:[0..31] Stack +0048:[0..31] Stack +0068:[0..31] Stack +0088:[0..31] Stack +00B4:[0..31] Stack +00D0:[0..31] Stack +00D4:[0..31] Stack +00F8:[0..31] Stack +0128:[0..31]
// LiveOut: a0 a1 a2 a3 a5 ra s0 s1 s2 s3 s4 s5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s5 s6 s7 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_cipher_crypt_entry:
l23062C96:
	word32 s3_147 = a3
	word32 s4_148 = a4
	word32 s2_146 = a5
	word32 a5_100
	word32 a3_139
	word32 a1_138
	word32 a0_137
	word32 s1_145 = mbedtls_cipher_set_iv(a0, a1, a2, a5, out a0_137, out a1_138, out a3_139, out a5_100)
	branch a0_137 != 0<32> l23062CE2
l23062CB4:
	a0_137 = mbedtls_cipher_reset(s1_145, a5_100)
	branch a0_137 != 0<32> l23062CE2
l23062CBC:
	word32 s0_169
	word32 a7_170
	word32 s6_171
	word32 s7_172
	word32 s8_173
	ra = mbedtls_cipher_update(ra, s1_145, a3, a4, a5, a6, a5_100, a3, s5, s7, dwArg08, dwArg48, dwArg68, dwArg88, dwArgB4, dwArgD0, dwArgD4, dwArgF8, out s0_169, out s1_145, out a0_137, out a1_138, out a3_139, out a5_100, out a7_170, out s2_146, out s3_147, out s4_148, out s5, out s6_171, out s7_172, out s8_173)
	branch a0_137 != 0<32> l23062CE2
l23062CCC:
	word32 a4_90
	ra = mbedtls_cipher_finish(ra, Mem15[a1_138:word32], s1_145, a1_138 + s2_146, fp + -36<i32>, a3_139, a5_100, out s1_145, out a0_137, out a1_138, out a3_139, out a4_90, out a5_100, out s2_146, out s3_147, out s4_148)
	branch a0_137 != 0<32> l23062CE2
l23062CDA:
	a5_100 = a5_100 + a4_90
	Mem101[a5_100:word32] = Mem15[a5_100:word32]
l23062CE2:
	0<32> = dwArg0128
	s0Out = dwArgE4
	s1Out = s1_145
	a0Out = a0_137
	a1Out = a1_138
	a2Out = dwArg0100
	a3Out = a3_139
	a5Out = a5_100
	s2Out = s2_146
	s3Out = s3_147
	s4Out = s4_148
	s5Out = s5
	return ra
mbedtls_cipher_crypt_exit:


word32 mbedtls_cipher_auth_encrypt(word32 ra, word32 a0, word32 a1, word32 a2, word32 a4, word32 a6, word32 s5, word32 t4, word32 dwArg38, word32 dwArg84, word32 dwArgA8, word32 dwArgAC, word32 dwArg0128, word32 dwArg0198, ptr32 & s0Out, ptr32 & a0Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_write_record
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a4:[0..31] a6:[0..31] ra:[0..31] s5:[0..31] Stack +0038:[0..31] Stack +0084:[0..31] Stack +00A8:[0..31] Stack +00AC:[0..31] Stack +0128:[0..31] Stack +0198:[0..31] t4:[0..31]
// LiveOut: a0 a5 ra s0 s2 s3 s4 s5 s6
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s5 s6 s7 s8 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_cipher_auth_encrypt_entry:
l23062CF2:
	word32 t5_5 = Mem0[a0:int32]
	0<32> = dwArgAC
	branch CONVERT(Mem0[t5_5 + 1<i32>:byte], byte, word32) != 6<32> l23062D26
l23062D26:
	s0Out = dwArg08
	a0Out = 0xF9FFFF80<32>
	a5Out = a5
	s2Out = s2
	s3Out = s3
	s4Out = s4
	s5Out = s5
	s6Out = s6
	return ra
l23062D0A:
	Mem17[t4:word32] = a6
	word32 a0_23 = Mem22[a0 + 60<i32>:word32]
l23062D22_thunk_mbedtls_gcm_crypt_and_tag:
	word32 a0_36
	word32 a5_41
	word32 s0_45
	word32 s2_47
	word32 s3_48
	word32 s4_49
	word32 s5_50
	word32 s6_51
	word32 s1_117
	word32 ra_44 = mbedtls_gcm_crypt_and_tag(ra, a0_23, 1<32>, a1, a2, a4, s5, dwArg38, a6, dwArg84, dwArgA8, dwArg0128, dwArg0198, out s0_45, out s1_117, out a0_36, out a5_41, out s2_47, out s3_48, out s4_49, out s5_50, out s6_51)
	s0Out = s0_45
	a0Out = a0_36
	a5Out = a5_41
	s2Out = s2_47
	s3Out = s3_48
	s4Out = s4_49
	s5Out = s5_50
	s6Out = s6_51
	return ra_44
mbedtls_cipher_auth_encrypt_exit:


word32 mbedtls_cipher_auth_decrypt(word32 a0, word32 a1, word32 a2, word32 a4, word32 a6, word32 a7, word32 s5, word32 dwArg24, word32 dwArg48, word32 dwArgC8, word32 dwArg0138, word32 dwArg0154, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_read_record_layer
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a4:[0..31] a6:[0..31] a7:[0..31] s5:[0..31] Stack +0024:[0..31] Stack +0048:[0..31] Stack +00C8:[0..31] Stack +0138:[0..31] Stack +0154:[0..31]
// LiveOut: a0 a5 ra s0 s1 s2 s3
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s5 s6 s7 s8 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_cipher_auth_decrypt_entry:
l23062D2E:
	branch CONVERT(Mem0[Mem0[a0:int32] + 1<i32>:byte], byte, word32) != 6<32> l23062D74
l23062D74:
	s0Out = s0
	s1Out = s1
	a0Out = 0xF9FFFF80<32>
	a5Out = a5
	s2Out = s2
	s3Out = s3
	return ra
l23062D3C:
	0<32> = dwArg0154
	Mem25[a1:word32] = a6
	word32 s0_43
	word32 s1_44
	word32 s2_45
	word32 s3_46
	word32 a0_34
	word32 ra_42 = mbedtls_gcm_auth_decrypt(Mem28[a0 + 60<i32>:word32], a1, a2, a4, a7, s5, dwArg24, dwArg48, dwArgC8, dwArg0138, out s0_43, out s1_44, out a0_34, out s2_45, out s3_46)
	branch a0_34 != 0xFFFFFFEE<32> l23062D6E
l23062D68:
	a0_34 = 0xF9FFFD00<32>
l23062D6E:
	s0Out = s0_43
	s1Out = s1_44
	a0Out = a0_34
	a5Out = 0xFFFFFFEE<32>
	s2Out = s2_45
	s3Out = s3_46
	return ra_42
mbedtls_cipher_auth_decrypt_exit:


void gcm_ctx_free(word32 ra, word32 a0, word32 a5, word32 mstatus, word32 dwArg10, word32 dwArg0158, word32 dwArg0198)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] Stack +0010:[0..31] Stack +0158:[0..31] Stack +0198:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 s0 s1 s4 t3 tp
// Preserved: sp
gcm_ctx_free_entry:
l23062D7C:
	word32 a5_13 = mbedtls_gcm_free(ra, a0, a5)
l23062D90_thunk_vPortFree:
	word32 s0_36
	word32 s1_37
	word32 a0_38
	word32 a1_39
	word32 a2_40
	word32 a3_41
	word32 a4_42
	word32 a5_43
	word32 a6_44
	word32 s4_45
	word32 t3_46
	vPortFree(a0, dwArg10, a5_13, mstatus, dwArg0158, dwArg0198, out s0_36, out s1_37, out a0_38, out a1_39, out a2_40, out a3_41, out a4_42, out a5_43, out a6_44, out s4_45, out t3_46)
	return
gcm_ctx_free_exit:


void gcm_ctx_alloc(word32 ra, word32 s1, word32 a3, word32 a4, word32 a5, word32 mstatus, word32 dwArg10, word32 dwArg14, word32 dwArg0108, word32 dwArg0148)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] s1:[0..31] Stack +0010:[0..31] Stack +0014:[0..31] Stack +0108:[0..31] Stack +0148:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 ra s1 s2 s3 s4 s8 t0 t1 t3 tp
// Preserved: s0 sp
gcm_ctx_alloc_entry:
l23062D94:
	word32 s2_79
	word32 a5_78
	word32 a4_77
	word32 a3_76
	word32 a2_75
	word32 a1_74
	word32 s1_73
	word32 s0_72
	word32 s3_80
	word32 s4_81
	word32 s8_82
	word32 ra_21 = mycalloc(ra, s1, 1<32>, 392<i32>, a3, a4, a5, mstatus, dwArg10, dwArg14, dwArg0108, dwArg0148, out s0_72, out s1_73, out a1_74, out a2_75, out a3_76, out a4_77, out a5_78, out s2_79, out s3_80, out s4_81, out s8_82)
	branch false l23062DAC
l23062DA8:
	mbedtls_gcm_init(ra_21, 1<32>)
l23062DAC:
	return
gcm_ctx_alloc_exit:


void gcm_aes_setkey_wrap(word32 ra, word32 s1, word32 a0, word32 a2, word32 a5, word32 s3, word32 s5, word32 s7, word32 dwArg38, word32 dwArg78, word32 dwArgA4, word32 dwArgC0, word32 dwArgC4, word32 dwArgE8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a2:[0..31] a5:[0..31] ra:[0..31] s1:[0..31] s3:[0..31] s5:[0..31] s7:[0..31] Stack +0038:[0..31] Stack +0078:[0..31] Stack +00A4:[0..31] Stack +00C0:[0..31] Stack +00C4:[0..31] Stack +00E8:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s5 s6 s7 s8 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
gcm_aes_setkey_wrap_entry:
l23062DB6:
l23062DBC_thunk_mbedtls_gcm_setkey:
	mbedtls_gcm_setkey(ra, s1, a0, 2<32>, a2, a5, s3, s5, s7, dwArg38, dwArg78, dwArgA4, dwArgC0, dwArgC4, dwArgE8)
	return
gcm_aes_setkey_wrap_exit:


void aes_ctx_free(word32 a0, word32 mstatus, word32 dwArg10, word32 dwArg0158, word32 dwArg0198)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] mstatus:[0..31] Stack +0010:[0..31] Stack +0158:[0..31] Stack +0198:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 s0 s1 s4 t3 tp
// Preserved: sp
aes_ctx_free_entry:
l23062DC0:
	word32 a5_11 = mbedtls_aes_free(a0)
l23062DD4_thunk_vPortFree:
	word32 s0_34
	word32 s1_35
	word32 a0_36
	word32 a1_37
	word32 a2_38
	word32 a3_39
	word32 a4_40
	word32 a5_41
	word32 a6_42
	word32 s4_43
	word32 t3_44
	vPortFree(a0, dwArg10, a5_11, mstatus, dwArg0158, dwArg0198, out s0_34, out s1_35, out a0_36, out a1_37, out a2_38, out a3_39, out a4_40, out a5_41, out a6_42, out s4_43, out t3_44)
	return
aes_ctx_free_exit:


void aes_ctx_alloc(word32 ra, word32 s1, word32 a3, word32 a4, word32 a5, word32 mstatus, word32 dwArg10, word32 dwArg14, word32 dwArg0108, word32 dwArg0148)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] s1:[0..31] Stack +0010:[0..31] Stack +0014:[0..31] Stack +0108:[0..31] Stack +0148:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 ra s1 s2 s3 s4 s8 t0 t1 t3 tp
// Preserved: s0 sp
aes_ctx_alloc_entry:
l23062DD8:
	word32 s2_79
	word32 a5_78
	word32 a4_77
	word32 a3_76
	word32 a2_75
	word32 a1_74
	word32 s1_73
	word32 s0_72
	word32 s3_80
	word32 s4_81
	word32 s8_82
	word32 ra_21 = mycalloc(ra, s1, 1<32>, 280<i32>, a3, a4, a5, mstatus, dwArg10, dwArg14, dwArg0108, dwArg0148, out s0_72, out s1_73, out a1_74, out a2_75, out a3_76, out a4_77, out a5_78, out s2_79, out s3_80, out s4_81, out s8_82)
	branch false l23062DF0
l23062DEC:
	word32 a1_83
	word32 a4_84
	word32 a5_85
	mbedtls_aes_init(ra_21, 1<32>, out a1_83, out a4_84, out a5_85)
l23062DF0:
	return
aes_ctx_alloc_exit:


void aes_setkey_dec_wrap(word32 ra, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a1 a2 a3 a4 a5 a6 a7 s4 s8 t0 t1 t3 t4 t5 t6
// Preserved: sp
aes_setkey_dec_wrap_entry:
l23062DFA:
l23062DFA_thunk_mbedtls_aes_setkey_dec:
	mbedtls_aes_setkey_dec(ra, a1)
	return
aes_setkey_dec_wrap_exit:


void aes_setkey_enc_wrap(word32 a0, word32 a1, word32 a2, word32 a4, word32 a5, word32 dwArg44, word32 dwArg0128)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a4:[0..31] a5:[0..31] Stack +0044:[0..31] Stack +0128:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 s0 s1 s4 s8 t3
// Preserved: sp
aes_setkey_enc_wrap_entry:
l23062DFE:
l23062DFE_thunk_mbedtls_aes_setkey_enc:
	word32 a0_23
	word32 a1_24
	word32 a3_25
	word32 a4_26
	mbedtls_aes_setkey_enc(a0, a1, a2, a4, a5, dwArg44, dwArg0128, out a0_23, out a1_24, out a3_25, out a4_26)
	return
aes_setkey_enc_wrap_exit:


void aes_crypt_ctr_wrap(word32 s0, word32 a1, word32 a3, word32 a4, word32 a5, word32 a6, word32 dwArg0C, word32 dwArg74, word32 dwArgB4, word32 dwArg0118, word32 dwArg0128)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] a6:[0..31] s0:[0..31] Stack +000C:[0..31] Stack +0074:[0..31] Stack +00B4:[0..31] Stack +0118:[0..31] Stack +0128:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
aes_crypt_ctr_wrap_entry:
l23062E02:
l23062E02_thunk_mbedtls_aes_crypt_ctr:
	mbedtls_aes_crypt_ctr(s0, a1, a3, a4, a5, a6, dwArg0C, dwArg74, dwArgB4, dwArg0118, dwArg0128)
	return
aes_crypt_ctr_wrap_exit:


void aes_crypt_cfb128_wrap(word32 s0, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 a6, word32 dwArg1C, word32 dwArgA8, word32 dwArg0128)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] a6:[0..31] s0:[0..31] Stack +001C:[0..31] Stack +00A8:[0..31] Stack +0128:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
aes_crypt_cfb128_wrap_entry:
l23062E06:
l23062E06_thunk_mbedtls_aes_crypt_cfb128:
	mbedtls_aes_crypt_cfb128(s0, a1, a2, a3, a4, a5, a6, dwArg1C, dwArgA8, dwArg0128)
	return
aes_crypt_cfb128_wrap_exit:


void aes_crypt_cbc_wrap(word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 dwArgF8, word32 dwArg0108, word32 dwArg0198)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] Stack +00F8:[0..31] Stack +0108:[0..31] Stack +0198:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
aes_crypt_cbc_wrap_entry:
l23062E0A:
l23062E0A_thunk_mbedtls_aes_crypt_cbc:
	word32 s1_39
	word32 a1_40
	word32 a4_41
	word32 s7_42
	word32 s9_43
	word32 s10_44
	word32 s11_45
	mbedtls_aes_crypt_cbc(a1, a2, a3, a4, a5, dwArgF8, dwArg0108, dwArg0198, out s1_39, out a1_40, out a4_41, out s7_42, out s9_43, out s10_44, out s11_45)
	return
aes_crypt_cbc_wrap_exit:


void aes_crypt_ecb_wrap(word32 a1, word32 a2, word32 a3, word32 dwArg2C, word32 dwArg0138)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] Stack +002C:[0..31] Stack +0138:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
aes_crypt_ecb_wrap_entry:
l23062E0E:
l23062E0E_thunk_mbedtls_aes_crypt_ecb:
	word32 s1_37
	word32 s2_38
	word32 s3_39
	word32 s4_40
	word32 s5_41
	word32 s6_42
	word32 s7_43
	word32 s8_44
	word32 s9_45
	word32 s10_46
	word32 s11_47
	mbedtls_aes_crypt_ecb(a1, a2, a3, dwArg2C, dwArg0138, out s1_37, out s2_38, out s3_39, out s4_40, out s5_41, out s6_42, out s7_43, out s8_44, out s9_45, out s10_46, out s11_47)
	return
aes_crypt_ecb_wrap_exit:


word32 debug_send_line.isra.0(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_debug_print_msg
//      mbedtls_debug_print_ret
//      mbedtls_debug_print_buf
//      mbedtls_debug_print_mpi
//      mbedtls_debug_print_crt
// MayUse:  a0:[0..31]
// LiveOut: a0
// Trashed: a0 t1
// Preserved: sp
debug_send_line.isra.0_entry:
l23062E12:
	word32 a0_9
	call Mem0[a0 + 16<i32>:int32] (retsize: 0;)
		uses: a0:Mem0[a0 + 20<i32>:word32]
		defs: a0:a0_9
	return a0_9
debug_send_line.isra.0_exit:


word32 mbedtls_debug_print_mpi.part.1(word32 ra, word32 s1, word32 a1, ptr32 & a1Out, ptr32 & a2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_debug_print_mpi
// MayUse:  a1:[0..31] ra:[0..31] s1:[0..31]
// LiveOut: a0 a1 a2
// Trashed: a0 a1 a2 a3 a4 a5 a7 t0 t1 t3 t4
// Preserved: ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 sp
mbedtls_debug_print_mpi.part.1_entry:
l23062E1A:
	word32 a5_32 = Mem29[Mem29[s1 + 4<i32>:word32] + 8<i32>:word32]
	word32 s1_43 = s1 + 0xFFFFFFFF<32>
l23062E64:
	word32 a4_45 = s1_43 << 2<u32>
	branch s1_43 != 0<32> l23062F34
l23062F34:
	branch Mem29[a5_32 + a4_45:word32] != 0<32> l23062E6A
l23062F3C:
	s1_43 = s1_43 + 0xFFFFFFFF<32>
l23062E6A:
	word32 a5_56 = 0x1F<32>
l23062E72:
	branch (a1 >>u a5_56 & 1<32>) != 0<32> l23062E80
l23062E7A:
	a5_56 = a5_56 + 0xFFFFFFFF<32>
	branch a5_56 != 0xFFFFFFFF<32> l23062E72
l23062E80:
	word32 s4_98
	word32 s10_634
	word32 s6_630
	word32 a5_626
	word32 a1_622
	word32 s11_635
	word32 s8_632
	word32 s7_631
	word32 s3_628
	word32 a7_627
	word32 a3_624
	word32 a2_623
	word32 s0_620
	word32 s9_633
	word32 s5_629
	word32 a4_625
	word32 a0_621
	word32 s1_119
	word32 s2_122
	word32 ra_153 = snprintf(ra, fp + -576<i32>, 512<i32>, 0x2308B060<32>, dwLoc0228, dwLoc0208, dwLoc01DC, dwLoc01C0, dwLoc01BC, dwLoc0198, dwLoc0174, out s0_620, out s1_119, out a0_621, out a1_622, out a2_623, out a3_624, out a4_625, out a5_626, out a7_627, out s2_122, out s3_628, out s4_98, out s5_629, out s6_630, out s7_631, out s8_632, out s9_633, out s10_634, out s11_635)
	debug_send_line.isra.0(Mem29[s4_98:int32])
	word32 s0_114 = 0<32>
	word32 a4_115 = 1<32>
	word32 s9_116 = 0<32>
	word32 s8_117 = 512<i32>
l23062EB4:
	branch s1_119 != 0xFFFFFFFF<32> l23062F40
l23062F40:
	word32 s10_120 = s1_119 << 2<u32>
	branch a4_115 == 0<32> l23062F50
l23062F46:
	branch Mem29[Mem29[s2_122 + 8<i32>:int32] + s10_120:word32] == 0<32> l23062FC8
l23062F50:
	word32 s3_127 = 0x18<32>
	word32 s11_128 = 0xFFFFFFF8<32>
l23062F54:
	branch a4_115 == 0<32> l23062F68
l23062F56:
	branch (Mem29[Mem29[s2_122 + 8<i32>:int32] + s10_120:word32] >>u s3_127 & 255<i32>) == 0<32> l23062FC2
l23062F68:
	branch (s9_116 & 15<i32>) != 0<32> l23062F98
l23062F6E:
	branch s9_116 == 0<32> l23062F98
l23062F72:
	word32 s4_169
	word32 s7_682
	word32 s9_683
	word32 s10_684
	word32 s11_685
	word32 s1_670
	word32 a0_671
	word32 s2_678
	word32 s3_679
	word32 s5_680
	word32 s6_681
	word32 a1_672
	word32 a2_673
	word32 a3_674
	word32 a7_677
	word32 a4_675
	word32 a5_676
	word32 s0_669
	ra_153 = snprintf(ra_153, fp + -576<i32> + s0_114, s8_117 - s0_114, 0x2308BA14<32>, dwLoc0228, dwLoc0208, dwLoc01DC, dwLoc01C0, dwLoc01BC, dwLoc0198, dwLoc0174, out s0_669, out s1_670, out a0_671, out a1_672, out a2_673, out a3_674, out a4_675, out a5_676, out a7_677, out s2_678, out s3_679, out s4_169, out s5_680, out s6_681, out s7_682, out s8_117, out s9_683, out s10_684, out s11_685)
	debug_send_line.isra.0(Mem29[s4_169:int32])
	s0_114 = 0<32>
l23062F98:
	word32 a0_206
	word32 s0_214
	word32 s9_225
	word32 s6_694
	word32 s7_695
	word32 a5_690
	word32 a7_691
	word32 s4_692
	word32 s5_693
	word32 a1_686
	word32 a4_689
	word32 a2_687
	word32 a3_688
	ra_153 = snprintf(ra_153, fp + -576<i32> + s0_114, s8_117 - s0_114, 0x2308163C<32>, dwLoc0228, dwLoc0208, dwLoc01DC, dwLoc01C0, dwLoc01BC, dwLoc0198, dwLoc0174, out s0_214, out s1_119, out a0_206, out a1_686, out a2_687, out a3_688, out a4_689, out a5_690, out a7_691, out s2_122, out s3_127, out s4_692, out s5_693, out s6_694, out s7_695, out s8_117, out s9_225, out s10_120, out s11_128)
	s0_114 = s0_214 + a0_206
	s9_116 = s9_225 + 1<32>
	a4_115 = 0<32>
l23062FC2:
	s3_127 = s3_127 + 0xFFFFFFF8<32>
	branch s3_127 != s11_128 l23062F54
l23062FC8:
	s1_119 = s1_119 + 0xFFFFFFFF<32>
l23062EBA:
	branch a4_115 == 0<32> l23062ED4
l23062EBC:
	word32 a2_638
	word32 a7_642
	word32 a0_255
	word32 s0_263
	word32 s3_644
	word32 s2_643
	word32 a4_640
	word32 a3_639
	word32 s1_636
	word32 s5_646
	word32 s6_647
	word32 s7_648
	word32 s8_649
	word32 s9_650
	word32 s10_651
	word32 s11_652
	word32 s4_645
	word32 a5_641
	word32 a1_637
	ra_153 = snprintf(ra_153, fp + -576<i32> + s0_114, 512<i32> - s0_114, 0x2308B080<32>, dwLoc0228, dwLoc0208, dwLoc01DC, dwLoc01C0, dwLoc01BC, dwLoc0198, dwLoc0174, out s0_263, out s1_636, out a0_255, out a1_637, out a2_638, out a3_639, out a4_640, out a5_641, out a7_642, out s2_643, out s3_644, out s4_645, out s5_646, out s6_647, out s7_648, out s8_649, out s9_650, out s10_651, out s11_652)
	s0_114 = s0_263 + a0_255
l23062ED4:
	word32 s4_302
	word32 s5_303
	word32 s6_304
	word32 a3_658
	word32 a4_659
	word32 s9_666
	word32 s10_667
	word32 s11_668
	word32 a5_660
	word32 a7_661
	word32 s2_662
	word32 s8_665
	word32 s3_663
	word32 s7_664
	word32 s1_654
	word32 a0_655
	word32 a1_656
	word32 a2_657
	word32 s0_653
	snprintf(ra_153, fp + -576<i32> + s0_114, 512<i32> - s0_114, 0x2308BA14<32>, dwLoc0228, dwLoc0208, dwLoc01DC, dwLoc01C0, dwLoc01BC, dwLoc0198, dwLoc0174, out s0_653, out s1_654, out a0_655, out a1_656, out a2_657, out a3_658, out a4_659, out a5_660, out a7_661, out s2_662, out s3_663, out s4_302, out s5_303, out s6_304, out s7_664, out s8_665, out s9_666, out s10_667, out s11_668)
	word32 a0_316 = debug_send_line.isra.0(Mem29[s4_302:int32])
	a1Out = s5_303
	a2Out = s6_304
	return a0_316
mbedtls_debug_print_mpi.part.1_exit:


word32 mbedtls_debug_print_msg(word32 ra, word32 a0, word32 a1, word32 a4, word32 a5, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a7Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s9Out, ptr32 & s10Out, ptr32 & s11Out, ptr32 & t4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ssl_swap_epochs
//      ssl_calc_finished_tls_sha256
//      ssl_calc_verify_tls_sha256
//      ssl_set_timer
//      ssl_check_timer
//      mbedtls_ssl_derive_keys
//      mbedtls_ssl_flush_output
//      mbedtls_ssl_send_flight_completed
//      mbedtls_ssl_optimize_checksum
//      mbedtls_ssl_get_record_expansion
//      mbedtls_ssl_handshake
//      ssl_handshake_wrapup_free_hs_transform
//      mbedtls_ssl_handshake_wrapup
//      mbedtls_ssl_setup
//      mbedtls_ssl_free
//      mbedtls_ssl_write_record
//      mbedtls_ssl_resend
//      mbedtls_ssl_fetch_input
//      mbedtls_ssl_prepare_handshake_record
//      mbedtls_ssl_handle_message_type
//      mbedtls_ssl_send_alert_message
//      mbedtls_ssl_close_notify
//      mbedtls_ssl_write_certificate
//      mbedtls_ssl_write_change_cipher_spec
//      mbedtls_ssl_write_finished
//      mbedtls_ssl_write
//      mbedtls_ssl_read_record_layer
//      mbedtls_ssl_read_record
//      mbedtls_ssl_parse_certificate
//      mbedtls_ssl_parse_change_cipher_spec
//      mbedtls_ssl_parse_finished
//      mbedtls_ssl_read
//      mbedtls_ssl_handshake_client_step
//      mbedtls_ssl_handshake_server_step
// MayUse:  a0:[0..31] a1:[0..31] a4:[0..31] a5:[0..31] ra:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 a7 s10 s11 s4 s5 s6 s7 s8 s9 t4
// Trashed: a0 a1 a2 a3 a4 a5 a7 s10 s11 s4 s5 s6 s7 s8 s9 t0 t1 t3 t4
// Preserved: ra s0 s1 s2 s3 sp
mbedtls_debug_print_msg_entry:
l23062FCC:
	branch a0 == 0<32> l23063042
l23062FF2:
	a0 = Mem19[a5:word32]
	branch a5 == 0<32> l23063042
l23062FF6:
	a5 = Mem19[a5 + 16<i32>:word32]
	branch a5 == 0<32> l23063042
l23062FFA:
	a5 = Mem19[0x4200D97C<32>:int32]
	branch a5 < a1 l23063042
l23063006:
	word32 s1_44
	word32 s2_47
	word32 s3_48
	word32 t0_173
	word32 s0_174
	word32 a1_175
	word32 a2_176
	word32 a3_177
	word32 a4_178
	word32 a5_179
	word32 a0_38
	vsnprintf(ra, fp + -560<i32>, 512<i32>, a4, fp + -12<i32>, dwLoc01E8, dwLoc01C8, dwLoc019C, dwLoc0180, dwLoc017C, dwLoc0158, dwLoc0134, out t0_173, out s0_174, out s1_44, out a0_38, out a1_175, out a2_176, out a3_177, out a4_178, out a5_179, out a7, out s2_47, out s3_48, out s4, out s5, out s6, out s7, out s8, out s9, out s10, out s11, out t4)
	a5 = 510<i32>
	branch a0_38 >u 510<i32> l23063034
l23063026:
	a0_38 = a0_38 + (fp + -48<i32>)
	Mem65[a0_38 + 3584<i32>:byte] = 0xA<8>
	Mem66[a0_38 + 3585<i32>:byte] = 0<8>
	a5 = 0xA<32>
l23063034:
	a4 = fp + -560<i32>
	a3 = s3_48
	a2 = s2_47
	a1 = s1_44
	a0 = debug_send_line.isra.0(a0_38)
l23063042:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5
	a7Out = a7
	s4Out = s4
	s5Out = s5
	s6Out = s6
	s7Out = s7
	s8Out = s8
	s9Out = s9
	s10Out = s10
	s11Out = s11
	t4Out = t4
	return a0
mbedtls_debug_print_msg_exit:


word32 mbedtls_debug_print_ret(word32 ra, word32 a1, word32 a3, word32 a5, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s9Out, ptr32 & s10Out, ptr32 & s11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_derive_keys
//      mbedtls_ssl_flush_output
//      mbedtls_ssl_write_record
//      mbedtls_ssl_resend
//      mbedtls_ssl_fetch_input
//      mbedtls_ssl_prepare_handshake_record
//      mbedtls_ssl_send_alert_message
//      mbedtls_ssl_close_notify
//      mbedtls_ssl_write_certificate
//      mbedtls_ssl_write_change_cipher_spec
//      mbedtls_ssl_write_finished
//      mbedtls_ssl_write
//      mbedtls_ssl_read_record_layer
//      mbedtls_ssl_read_record
//      mbedtls_ssl_parse_certificate
//      mbedtls_ssl_parse_change_cipher_spec
//      mbedtls_ssl_parse_finished
//      mbedtls_ssl_read
//      mbedtls_ssl_handshake_client_step
//      mbedtls_ssl_handshake_server_step
// MayUse:  a1:[0..31] a3:[0..31] a5:[0..31] ra:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 s10 s11 s4 s5 s6 s7 s8 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s10 s11 s4 s5 s6 s7 s8 s9 t0 t1 t3 t4
// Preserved: ra s0 s1 s2 s3 sp
mbedtls_debug_print_ret_entry:
l2306305C:
	word32 a0_16 = Mem13[a3:word32]
	branch a3 == 0<32> l230630C4
l2306307A:
	a3 = Mem13[a3 + 16<i32>:word32]
	branch a3 == 0<32> l230630C4
l2306307E:
	a3 = Mem13[0x4200D97C<32>:int32]
	branch a3 < a1 l230630C4
l2306308A:
	a3 = 0xF9000700<32>
	branch a5 == 0xF9000700<32> l230630C4
l23063094:
	word32 a0_37
	word32 s1_46
	word32 s2_49
	word32 s3_50
	word32 s0_139
	word32 a1_140
	word32 a2_141
	word32 a3_142
	word32 a4_143
	word32 a7_144
	snprintf(ra, fp + -544<i32>, 512<i32>, 0x2308B084<32>, dwLoc0208, dwLoc01E8, dwLoc01BC, dwLoc01A0, dwLoc019C, dwLoc0178, dwLoc0154, out s0_139, out s1_46, out a0_37, out a1_140, out a2_141, out a3_142, out a4_143, out a5, out a7_144, out s2_49, out s3_50, out s4, out s5, out s6, out s7, out s8, out s9, out s10, out s11)
	a4 = fp + -544<i32>
	a3 = s3_50
	a2 = s2_49
	a1 = s1_46
	a0_16 = debug_send_line.isra.0(a0_37)
l230630C4:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5
	s4Out = s4
	s5Out = s5
	s6Out = s6
	s7Out = s7
	s8Out = s8
	s9Out = s9
	s10Out = s10
	s11Out = s11
	return a0_16
mbedtls_debug_print_ret_exit:


word32 mbedtls_debug_print_buf(word32 ra, word32 a1, word32 a5, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a7Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ssl_calc_finished_tls_sha256
//      ssl_calc_verify_tls_sha256
//      mbedtls_ssl_derive_keys
//      mbedtls_ssl_write_record
//      mbedtls_ssl_resend
//      mbedtls_ssl_prepare_handshake_record
//      mbedtls_ssl_read_record_layer
//      mbedtls_ssl_handshake_client_step
//      mbedtls_ssl_handshake_server_step
// MayUse:  a1:[0..31] a5:[0..31] ra:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 a7
// Trashed: a0 a1 a2 a3 a4 a5 a7 t0 t1 t3 t4
// Preserved: ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 sp
mbedtls_debug_print_buf_entry:
l230630DE:
	word32 a0_211 = Mem31[a5:word32]
	branch a5 == 0<32> l230631C2
l2306311C:
	a5 = Mem31[a5 + 16<i32>:word32]
	branch a5 == 0<32> l230631C2
l23063120:
	a5 = Mem31[0x4200D97C<32>:int32]
	branch a5 < a1 l230631C2
l2306312E:
	word32 a0_52
	word32 s1_558
	word32 a2_560
	word32 a1_559
	word32 s6_568
	word32 s9_571
	word32 s10_572
	word32 s11_573
	word32 s7_569
	word32 s8_570
	word32 a3_561
	word32 s2_564
	word32 s3_565
	word32 s4_566
	word32 s5_567
	word32 a4_562
	word32 a5_563
	word32 s0_101
	word32 ra_59 = snprintf(ra, fp + -576<i32>, 512<i32>, 0x2308AFE8<32>, dwLoc0258, dwLoc0238, dwLoc020C, dwLoc01F0, dwLoc01EC, dwLoc01C8, dwLoc01A4, out s0_101, out s1_558, out a0_52, out a1_559, out a2_560, out a3_561, out a4_562, out a5_563, out a7, out s2_564, out s3_565, out s4_566, out s5_567, out s6_568, out s7_569, out s8_570, out s9_571, out s10_572, out s11_573)
	debug_send_line.isra.0(a0_52)
	word32 t1_574
	word32 ra_113 = memset(ra_59, fp + -596<i32>, 0<32>, 0x11<32>, out t1_574, out a0_211, out a1, out a2, out a3, out a4, out a5)
	word32 s7_106 = 0<32>
	word32 s8_100 = 0<32>
	word32 s6_108 = 512<i32>
	word32 s9_111 = 0x2308B000<32>
	word32 s10_180 = 0x23081000<32>
l23063178:
	branch s8_100 != s0_101 l230631FC
l230631FC:
	word32 a5_102 = 0x1000000<32>
	branch s8_100 == 0x1000000<32> l23063198
l23063202:
	branch (s8_100 & 15<i32>) != 0<32> l23063256
l2306320A:
	branch s8_100 == 0<32> l2306323C
l2306320E:
	word32 a0_115
	word32 s11_638
	word32 s3_631
	word32 s7_634
	word32 s8_635
	word32 s9_636
	word32 s10_637
	word32 s4_632
	word32 s5_633
	word32 a1_624
	word32 a4_627
	word32 a5_628
	word32 a7_629
	word32 s2_630
	word32 a2_625
	word32 a3_626
	word32 s0_622
	word32 s1_623
	word32 ra_122 = snprintf(ra_113, fp + -576<i32> + s7_106, s6_108 - s7_106, s9_111 + 4<i32>, dwLoc0258, dwLoc0238, dwLoc020C, dwLoc01F0, dwLoc01EC, dwLoc01C8, dwLoc01A4, out s0_622, out s1_623, out a0_115, out a1_624, out a2_625, out a3_626, out a4_627, out a5_628, out a7_629, out s2_630, out s3_631, out s4_632, out s5_633, out s6_108, out s7_634, out s8_635, out s9_636, out s10_637, out s11_638)
	debug_send_line.isra.0(a0_115)
	word32 a5_645
	word32 a1_641
	word32 a2_642
	word32 a3_643
	word32 a4_644
	word32 t1_639
	word32 a0_640
	ra_113 = memset(ra_122, fp + -596<i32>, 0<32>, 0x11<32>, out t1_639, out a0_640, out a1_641, out a2_642, out a3_643, out a4_644, out a5_645)
	s7_106 = 0<32>
l2306323C:
	word32 a0_170
	word32 s7_187
	word32 s3_617
	word32 s9_620
	word32 s11_621
	word32 s4_618
	word32 s5_619
	word32 s1_610
	word32 a3_613
	word32 a4_614
	word32 a7_615
	word32 s2_616
	word32 a1_611
	word32 a2_612
	word32 s0_609
	ra_113 = snprintf(ra_113, fp + -576<i32> + s7_106, s6_108 - s7_106, 0x2308B00C<32>, dwLoc0258, dwLoc0238, dwLoc020C, dwLoc01F0, dwLoc01EC, dwLoc01C8, dwLoc01A4, out s0_609, out s1_610, out a0_170, out a1_611, out a2_612, out a3_613, out a4_614, out a5_102, out a7_615, out s2_616, out s3_617, out s4_618, out s5_619, out s6_108, out s7_187, out s8_100, out s9_620, out s10_180, out s11_621)
	s7_106 = s7_187 + a0_170
l23063256:
	word32 a4_205 = a5_102 + s8_100
	word32 a4_215
	word32 s11_222
	word32 s3_224
	word32 s7_228
	word32 s8_229
	word32 a2_603
	word32 s2_606
	word32 s4_607
	word32 s5_608
	word32 a3_604
	word32 a5_605
	word32 s1_602
	ra_113 = snprintf(ra_113, fp + -576<i32> + s7_106, s6_108 - s7_106, s10_180 + 1596<i32>, dwLoc0258, dwLoc0238, dwLoc020C, dwLoc01F0, a4_205, dwLoc01C8, dwLoc01A4, out s0_101, out s1_602, out a0_211, out a1, out a2_603, out a3_604, out a4_215, out a5_605, out a7, out s2_606, out s3_224, out s4_607, out s5_608, out s6_108, out s7_228, out s8_229, out s9_111, out s10_180, out s11_222)
	a4 = CONVERT(Mem209[a4_215:byte], byte, word32)
	dwLoc01EC = a4_205
	a2 = dwLoc01AC
	s7_106 = s7_228 + a0_211
	a3 = a4 + -32<i32> & 255<i32>
	branch s11_222 >=u a3 l2306328C
l23063288:
	a4 = 46<i32>
l2306328C:
	Mem245[s3_224 + (fp + -64<i32>) + 3564<i32>:byte] = SLICE(a4, byte, 0)
	a5 = fp + -64<i32>
	s8_100 = s8_229 + 1<32>
l2306317C:
	branch s0_101 == 0<32> l230631C2
l2306317E:
	word32 s3_248 = 512<i32>
	word32 s6_249 = 0x23088000<32>
l23063186:
	word32 a0_255 = fp + -576<i32> + s7_106
	word32 a1_257 = s3_248 - s7_106
	branch (s0_101 & 15<i32>) != 0<32> l23063298
l23063298:
	word32 a0_262
	word32 s0_270
	word32 s7_279
	word32 s2_582
	word32 s8_585
	word32 s9_586
	word32 s10_587
	word32 s11_588
	word32 s4_583
	word32 s5_584
	word32 s1_575
	word32 a3_578
	word32 a4_579
	word32 a5_580
	word32 a7_581
	word32 a1_576
	word32 a2_577
	ra_113 = snprintf(ra_113, a0_255, a1_257, s6_249 + -1836<i32>, dwLoc0258, dwLoc0238, dwLoc020C, dwLoc01F0, dwLoc01EC, dwLoc01C8, dwLoc01A4, out s0_270, out s1_575, out a0_262, out a1_576, out a2_577, out a3_578, out a4_579, out a5_580, out a7_581, out s2_582, out s3_248, out s4_583, out s5_584, out s6_249, out s7_279, out s8_585, out s9_586, out s10_587, out s11_588)
	s7_106 = s7_279 + a0_262
	s0_101 = s0_270 + 1<32>
l23063198:
	word32 a0_298
	word32 s2_310
	word32 s4_312
	word32 s5_313
	word32 s6_596
	word32 s9_599
	word32 s10_600
	word32 s11_601
	word32 s7_597
	word32 s8_598
	word32 s0_589
	word32 a2_592
	word32 a3_593
	word32 a4_594
	word32 s3_595
	word32 s1_590
	word32 a1_591
	snprintf(ra_113, fp + -576<i32> + s7_106, 512<i32> - s7_106, 0x2308B004<32>, dwLoc0258, dwLoc0238, dwLoc020C, dwLoc01F0, dwLoc01EC, dwLoc01C8, dwLoc01A4, out s0_589, out s1_590, out a0_298, out a1_591, out a2_592, out a3_593, out a4_594, out a5, out a7, out s2_310, out s3_595, out s4_312, out s5_313, out s6_596, out s7_597, out s8_598, out s9_599, out s10_600, out s11_601)
	a4 = fp + -576<i32>
	a3 = s5_313
	a2 = s4_312
	a1 = s2_310
	a0_211 = debug_send_line.isra.0(a0_298)
l230631C2:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5
	a7Out = a7
	return a0_211
mbedtls_debug_print_buf_exit:


word32 mbedtls_debug_print_mpi(word32 ra, word32 s1, word32 a0, word32 a1, word32 a5, ptr32 & a1Out, ptr32 & a2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_debug_print_ecp
//      mbedtls_debug_print_crt
// MayUse:  a0:[0..31] a1:[0..31] a5:[0..31] ra:[0..31] s1:[0..31]
// LiveOut: a0 a1 a2
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t3 t4
// Preserved: sp
mbedtls_debug_print_mpi_entry:
l230632A6:
	word32 a6_5 = Mem0[a0:int32]
	branch a6_5 == 0<32> l230632C8
l230632AE:
	branch Mem0[a6_5 + 16<i32>:int32] == 0<32> l230632C8
l230632B6:
	branch a5 == 0<32> l230632C8
l230632B8:
	branch Mem0[0x4200D97C<32>:int32] < a1 l230632C8
l230632C8:
	a1Out = a1
	a2Out = a2
	return a0
l230632C4:
l230632C4_thunk_mbedtls_debug_print_mpi.part.1:
	word32 a1_14
	word32 a2_15
	word32 a0_13 = mbedtls_debug_print_mpi.part.1(ra, s1, a1, out a1_14, out a2_15)
	a1Out = a1_14
	a2Out = a2_15
	return a0_13
mbedtls_debug_print_mpi_exit:


word32 mbedtls_debug_print_ecp.part.2(word32 ra, ptr32 & a1Out, ptr32 & a2Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s10Out, ptr32 & s11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_debug_print_ecp
// MayUse:  ra:[0..31]
// LiveOut: a0 a1 a2 s10 s11 s7 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s10 s11 s6 s7 s8 s9 t0 t1 t3 t4
// Preserved: ra s0 s1 s2 s3 s4 s5 sp
mbedtls_debug_print_ecp.part.2_entry:
l230632CA:
	word32 s0_43
	word32 s1_44
	word32 s4_49
	word32 a0_150
	word32 a1_151
	word32 a2_152
	word32 a3_153
	word32 a4_154
	word32 a5_155
	word32 a7_156
	word32 s2_157
	word32 s3_158
	word32 s5_159
	word32 s6_160
	word32 s7_161
	word32 s8_162
	word32 s9_163
	word32 s10_164
	word32 s11_165
	word32 ra_42 = snprintf(ra, fp + -544<i32>, 512<i32>, 0x2308B050<32>, dwLoc0208, dwLoc01E8, dwLoc01BC, dwLoc01A0, dwLoc019C, dwLoc0178, dwLoc0154, out s0_43, out s1_44, out a0_150, out a1_151, out a2_152, out a3_153, out a4_154, out a5_155, out a7_156, out s2_157, out s3_158, out s4_49, out s5_159, out s6_160, out s7_161, out s8_162, out s9_163, out s10_164, out s11_165)
	word32 a1_166
	word32 a2_167
	mbedtls_debug_print_mpi(ra_42, s1_44, s0_43, s1_44, s4_49, out a1_166, out a2_167)
	word32 s0_89
	word32 s1_90
	word32 s10_91
	word32 s11_92
	word32 s4_95
	word32 s7_98
	word32 s8_99
	word32 a1_112
	word32 a2_113
	word32 a0_168
	word32 a1_169
	word32 a2_170
	word32 a3_171
	word32 a4_172
	word32 a5_173
	word32 a7_174
	word32 s2_175
	word32 s3_176
	word32 s5_177
	word32 s6_178
	word32 s9_179
	word32 a0_111 = mbedtls_debug_print_mpi(snprintf(ra_42, fp + -544<i32>, 512<i32>, 0x2308B058<32>, dwLoc0208, dwLoc01E8, dwLoc01BC, dwLoc01A0, dwLoc019C, dwLoc0178, dwLoc0154, out s0_89, out s1_90, out a0_168, out a1_169, out a2_170, out a3_171, out a4_172, out a5_173, out a7_174, out s2_175, out s3_176, out s4_95, out s5_177, out s6_178, out s7_98, out s8_99, out s9_179, out s10_91, out s11_92), s1_90, s0_89, s1_90, s4_95 + 12<i32>, out a1_112, out a2_113)
	a1Out = a1_112
	a2Out = a2_113
	s7Out = s7_98
	s8Out = s8_99
	s10Out = s10_91
	s11Out = s11_92
	return a0_111
mbedtls_debug_print_ecp.part.2_exit:


word32 mbedtls_debug_print_ecp(word32 ra, word32 a0, word32 a1, ptr32 & a1Out, ptr32 & a2Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s10Out, ptr32 & s11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_debug_print_crt
// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31]
// LiveOut: a0 a1 a2 s10 s11 s7 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s10 s11 s6 s7 s8 s9 t0 t1 t3 t4
// Preserved: sp
mbedtls_debug_print_ecp_entry:
l23063362:
	word32 a6_5 = Mem0[a0:int32]
	branch a6_5 == 0<32> l23063382
l2306336A:
	branch Mem0[a6_5 + 16<i32>:int32] == 0<32> l23063382
l23063372:
	branch Mem0[0x4200D97C<32>:int32] < a1 l23063382
l23063382:
	a1Out = a1
	a2Out = a2
	s7Out = s7
	s8Out = s8
	s10Out = s10
	s11Out = s11
	return a0
l2306337E:
l2306337E_thunk_mbedtls_debug_print_ecp.part.2:
	word32 a1_12
	word32 a2_13
	word32 s10_19
	word32 s11_20
	word32 s7_22
	word32 s8_23
	word32 a0_11 = mbedtls_debug_print_ecp.part.2(ra, out a1_12, out a2_13, out s7_22, out s8_23, out s10_19, out s11_20)
	a1Out = a1_12
	a2Out = a2_13
	s7Out = s7_22
	s8Out = s8_23
	s10Out = s10_19
	s11Out = s11_20
	return a0_11
mbedtls_debug_print_ecp_exit:


word32 mbedtls_debug_print_crt(word32 ra, word32 a1, word32 a4, word32 a5, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a5Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s7Out, ptr32 & s9Out, ptr32 & s10Out, ptr32 & s11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_write_certificate
//      mbedtls_ssl_parse_certificate
//      mbedtls_ssl_handshake_server_step
// MayUse:  a1:[0..31] a4:[0..31] a5:[0..31] ra:[0..31]
// LiveOut: a0 a1 a2 a3 a5 ra s0 s1 s10 s11 s3 s4 s7 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s10 s11 s2 s3 s4 s6 s7 s8 s9 t0 t1 t3 t4 t5 t6 tp
// Preserved: s5 sp
mbedtls_debug_print_crt_entry:
l23063384:
	word32 a0_203 = Mem29[a5:word32]
	branch a5 == 0<32> l2306345E
l230633AC:
	a5 = Mem35[a5 + 16<i32>:word32]
	branch a5 == 0<32> l2306345E
l230633B0:
	branch a5 == 0<32> l2306345E
l230633B4:
	a5 = Mem35[0x4200D97C<32>:int32]
	branch a5 < a1 l2306345E
l230633C4:
l230633DC:
	word32 a0_65
	word32 s1_74
	word32 s2_77
	word32 a4_760
	word32 s11_771
	word32 s8_768
	word32 s9_769
	word32 s10_770
	word32 s7_767
	word32 a5_761
	word32 s4_764
	word32 s5_765
	word32 s6_766
	word32 a7_762
	word32 s3_763
	word32 a1_757
	word32 a2_758
	word32 a3_759
	word32 s0_756
	word32 ra_72 = snprintf(ra, fp + -2112<i32>, 512<i32>, 0x2308B014<32>, dwLoc0848, dwLoc0828, dwLoc07FC, dwLoc07E0, a4, dwLoc07B8, dwLoc0794, out s0_756, out s1_74, out a0_65, out a1_757, out a2_758, out a3_759, out a4_760, out a5_761, out a7_762, out s2_77, out s3_763, out s4_764, out s5_765, out s6_766, out s7_767, out s8_768, out s9_769, out s10_770, out s11_771)
	debug_send_line.isra.0(a0_65)
	word32 s1_109
	word32 a3_772
	word32 s5_115
	word32 s2_112
	word32 ra_107 = mbedtls_x509_crt_info(ra_72, s1_74, fp + -1088<i32>, 1023<i32>, s2_77, s2_77, dwLoc0860, dwLoc085C, dwLoc0850, dwLoc0848, dwLoc0840, dwLoc083C, dwLoc0838, dwLoc0828, dwLoc0824, dwLoc0804, dwLoc07F4, dwLoc0798, dwLoc06EC, out s0, out s1_109, out a3_772, out s2_112, out s3, out s4, out s5_115, out s7, out s10)
	word32 a2_126 = fp + -1088<i32>
	word32 a1_127 = fp + -1088<i32>
	s11 = 0xA<32>
l23063424:
	word32 a5_132 = CONVERT(Mem131[a2_126:byte], byte, word32)
	branch a5_132 != 0<32> l23063480
l23063480:
	s10 = a2_126 + 1<i32>
	branch a5_132 != 0xA<32> l230634BE
l23063488:
	word32 a2_136 = a2_126 - a1_127
	word32 s9_137 = a2_136 + 1<i32>
	branch a2_136 <=u -510<i32> l23063496
l23063492:
	s9_137 = 511<i32>
l23063496:
	word32 a5_784
	word32 a6_785
	word32 a7_786
	word32 a4_783
	word32 a1_780
	word32 a2_781
	word32 a3_782
	memcpy(fp + -1600<i32>, a1_127, s9_137, out a1_780, out a2_781, out a3_782, out a4_783, out a5_784, out a6_785, out a7_786)
	Mem176[s9_137 + (fp + 0xFFEFC0<32>) + 2560<i32>:byte] = 0<8>
	debug_send_line.isra.0(fp + -1600<i32>)
	s0 = dwLoc0640
	a1_127 = s10
l230634BE:
	a2_126 = s10
l2306342A:
	a1 = fp + -1600<i32>
	word32 a5_194
	word32 a2_753
	word32 a3_754
	word32 a4_755
	word32 a0_751
	word32 a1_752
	word32 t1_750
	ra = mbedtls_pk_debug(memset(ra_107, fp + -1600<i32>, 0<32>, 36<i32>, out t1_750, out a0_751, out a1_752, out a2_753, out a3_754, out a4_755, out a5_194), s2_112 + 188<i32>, a5_194, dwLoc0850, out a0_203, out a2, out a5)
	branch a0_203 == 0<32> l230634C2
l230634C2:
	word32 s8_211 = fp + -1600<i32>
	s10 = 1<32>
	s11 = 0x2308B000<32>
l230634DA:
	a5 = CONVERT(Mem219[s8_211:byte], byte, word32)
	branch a5 == 0<32> l23063456
l230634E0:
	word32 a0_231
	word32 s1_240
	word32 s9_250
	word32 s6_779
	word32 a4_776
	word32 a5_777
	word32 a7_778
	word32 a3_775
	word32 a1_773
	word32 a2_774
	word32 s8_249
	ra = snprintf(ra, s5_115, 0x10<32>, 0x230812A8<32>, dwLoc0848, dwLoc0828, dwLoc07FC, dwLoc07E0, a4, dwLoc07B8, dwLoc0794, out s0, out s1_240, out a0_231, out a1_773, out a2_774, out a3_775, out a4_776, out a5_777, out a7_778, out s2_112, out s3, out s4, out s5_115, out s6_779, out s7, out s8_249, out s9_250, out s10, out s11)
	word32 a5_254 = CONVERT(Mem219[s8_249:byte], byte, word32)
	Mem255[s9_250 + 2047<i32>:byte] = 0<8>
	branch a5_254 != s10 l23063524
l23063524:
	branch a5_254 != 2<32> l2306353E
l2306353E:
	s0 = Mem255[a0_231:word32]
	a2 = s3
	a1 = s1_240
	a0_203 = debug_send_line.isra.0(a0_231)
l2306352A:
	a0_203 = mbedtls_debug_print_ecp(ra, s0, s1_240, out a1, out a2, out s7, out s8_249, out s10, out s11)
l23063508:
	a0_203 = mbedtls_debug_print_mpi(ra, s1_240, s0, s1_240, Mem255[s8_249 + 8<i32>:int32], out a1, out a2)
l2306351A:
	s8_211 = s8_249 + 0xC<32>
	a5 = fp + -1564<i32>
	branch s8_211 != fp + -1564<i32> l230634DA
l23063522:
l23063442:
	s0 = Mem131[a0_203:word32]
	a2 = s3
	a1 = s1_109
	a0_203 = debug_send_line.isra.0(a0_203)
l23063456:
	branch Mem321[s2_112 + 304<i32>:int32] != 0<32> l230633DC
l2306345E:
	s0Out = s0
	s1Out = dwLoc64
	a0Out = a0_203
	a1Out = a1
	a2Out = a2
	a3Out = dwArg78
	a5Out = a5
	s3Out = s3
	s4Out = s4
	s7Out = s7
	s9Out = dwArg18
	s10Out = s10
	s11Out = s11
	return dwLoc24
mbedtls_debug_print_crt_exit:


word32 ecp_get_type(word32 a5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ecp_check_pubkey
//      mbedtls_ecp_check_privkey
//      mbedtls_ecp_mul
// MayUse:  a5:[0..31]
// LiveOut: a0
// Trashed: a0
// Preserved: sp
ecp_get_type_entry:
l23063550:
	word32 a0_5 = Mem0[a5 + 48<i32>:word32]
	branch a5 == 0<32> l2306355E
l2306355E:
	return 0<32>
l23063554:
	return CONVERT(Mem0[a0_5 + 60<i32>:word32] <u 1<i32>, bool, word32) + 1<32>
ecp_get_type_exit:


word32 ecp_safe_invert_jac(word32 ra, word32 a1, word32 a2, word32 a3, word32 a4, word32 mstatus, word32 dwArg78, word32 dwArg98, word32 dwArgB8, word32 dwArgC8, word32 dwArgD8, word32 dwArgE8, word32 dwArgF8, word32 dwArg0108, word32 dwArg0118, word32 dwArg0128, word32 dwArg0148, word32 dwArg0168, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ecp_select_comb
//      mbedtls_ecp_mul
// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] mstatus:[0..31] ra:[0..31] Stack +0078:[0..31] Stack +0098:[0..31] Stack +00B8:[0..31] Stack +00C8:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +00F8:[0..31] Stack +0108:[0..31] Stack +0118:[0..31] Stack +0128:[0..31] Stack +0148:[0..31] Stack +0168:[0..31]
// LiveOut: a0 a2 a3 a4 a5 ra s0 s1 s2 s3 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
ecp_safe_invert_jac_entry:
l23063562:
	word32 a0_27
	word32 s1_158
	word32 a3_159
	word32 s4_160
	word32 s8_161
	word32 a5_32
	word32 a4_31
	word32 a2_29
	word32 s3_142
	word32 s2_141
	word32 s0_140
	word32 ra_139 = mbedtls_mpi_sub_mpi(ra, a1 + 0xC<32>, fp + 0xFFFFFFE4<32>, a3, a4, mbedtls_mpi_init(fp + 0xFFFFFFE4<32>), a2, mstatus, dwArg78, dwArg98, dwArgB8, dwArgD8, dwArgE8, dwArgF8, dwArg0118, out s0_140, out s1_158, out a0_27, out a2_29, out a3_159, out a4_31, out a5_32, out s2_141, out s3_142, out s4_160, out s8_161)
	branch a0_27 != 0<32> l230635A0
l23063588:
	word32 a3_54
	word32 a4_55
	word32 a1_162
	word32 a2_163
	word32 a5_164
	word32 a6_165
	word32 s1_166
	word32 a0_167
	word32 a3_168
	word32 s4_169
	ra_139 = mbedtls_mpi_safe_cond_assign(ra_139, fp + 0xFFFFFFE4<32>, s2_141 & CONVERT(mbedtls_mpi_cmp_int(0<32>, a2_29, out a1_162, out a2_163, out a3_54, out a4_55, out a5_164, out a6_165) != 0<32>, bool, word32), a3_54, a4_55, mstatus, dwLoc08, dwArgC8, dwArg0108, dwArg0148, out s0_140, out s1_166, out a0_167, out a2_29, out a3_168, out a4_31, out a5_32, out s2_141, out s3_142, out s4_169)
l230635A0:
	word32 a2_95
	word32 a5_96
	word32 a3_98
	word32 a4_99
	word32 a0_170
	word32 a1_171
	word32 a6_172
	word32 s4_173
	word32 s1_101 = mbedtls_mpi_free(fp + 0xFFFFFFE4<32>, a2_29, a4_31, a5_32, mstatus, dwArg0128, dwArg0168, out a0_170, out a1_171, out a2_95, out a3_98, out a4_99, out a5_96, out a6_172, out s4_173)
	s0Out = s0_140
	s1Out = s1_101
	a0Out = s1_101
	a2Out = a2_95
	a3Out = a3_98
	a4Out = a4_99
	a5Out = a5_96
	s2Out = s2_141
	s3Out = s3_142
	s8Out = dwLoc1C
	return ra_139
ecp_safe_invert_jac_exit:


word32 ecp_select_comb(word32 ra, word32 a2, word32 a3, word32 a4, word32 mstatus, word32 dwArg78, word32 dwArg98, word32 dwArgB8, word32 dwArgC8, word32 dwArgD8, word32 dwArgE8, word32 dwArgF8, word32 dwArg0108, word32 dwArg0118, word32 dwArg0128, word32 dwArg0138, word32 dwArg0148, word32 dwArg0168, ptr32 & s0Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ecp_mul
// MayUse:  a2:[0..31] a3:[0..31] a4:[0..31] mstatus:[0..31] ra:[0..31] Stack +0078:[0..31] Stack +0098:[0..31] Stack +00B8:[0..31] Stack +00C8:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +00F8:[0..31] Stack +0108:[0..31] Stack +0118:[0..31] Stack +0128:[0..31] Stack +0138:[0..31] Stack +0148:[0..31] Stack +0168:[0..31]
// LiveOut: a0 a2 a3 a4 a5 ra s0 s2 s3 s5 s6 s7 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s5 s6 s7 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
ecp_select_comb_entry:
l230635B6:
	word32 s4_33 = a4 >>u 1<u32> & 63<i32>
	word32 s1_114 = a2
	word32 s0_113 = 0<32>
	a4_220 = a4
	a3_218 = a3
l230635E4:
	word32 a3_218
	word32 a4_220
	word32 s1_63
	word32 s0_269
	word32 a2_270
	word32 s4_271
	word32 a5_222
	word32 s3_234
	word32 a0_213
	word32 s2_232
	ra = mbedtls_mpi_safe_cond_assign(ra, s1_114, CONVERT(s4_33 - s0_113 <u 1<i32>, bool, word32), a3_218, a4_220, mstatus, dwLoc18, dwArgB8, dwArgF8, dwArg0138, out s0_269, out s1_63, out a0_213, out a2_270, out a3_218, out a4_220, out a5_222, out s2_232, out s3_234, out s4_271)
	branch a0_213 != 0<32> l23063636
l230635F8:
	word32 s0_87
	word32 s1_88
	word32 a2_268
	ra = mbedtls_mpi_safe_cond_assign(ra, s1_63 + 12<i32>, s2_232, a3_218, a4_220, mstatus, dwLoc18, dwArgB8, dwArgF8, dwArg0138, out s0_87, out s1_88, out a0_213, out a2_268, out a3_218, out a4_220, out a5_222, out s2_232, out s3_234, out s4_33)
	branch a0_213 != 0<32> l23063636
l23063636:
	0<32> = dwArg0128
	s0Out = s4
	a0Out = a0_213
	a2Out = dwArgB8
	a3Out = a3_218
	a4Out = a4_220
	a5Out = a5_222
	s2Out = s2_232
	s3Out = s3_234
	s5Out = <invalid>
	s6Out = <invalid>
	s7Out = <invalid>
	s8Out = s5
	return ra
l23063606:
	s0_113 = s0_87 + 1<32> & 255<i32>
	s1_114 = s1_88 + 36<i32>
	branch a3 != s0_113 l230635E4
l23063614:
	0<32> = dwArg0128
l23063632_thunk_ecp_safe_invert_jac:
	word32 a0_131
	word32 a2_133
	word32 a3_134
	word32 a4_135
	word32 a5_136
	word32 s0_140
	word32 s2_142
	word32 s3_143
	word32 s8_145
	word32 s1_272
	word32 ra_139 = ecp_safe_invert_jac(ra, s3_234, a4 >>u 7<u32>, a3_218, a4_220, mstatus, dwArg78, dwArg98, dwArgB8, dwArgC8, dwArgD8, dwArgE8, dwArgF8, dwArg0108, dwArg0118, dwArg0128, dwArg0148, dwArg0168, out s0_140, out s1_272, out a0_131, out a2_133, out a3_134, out a4_135, out a5_136, out s2_142, out s3_143, out s8_145)
	s0Out = s0_140
	a0Out = a0_131
	a2Out = a2_133
	a3Out = a3_134
	a4Out = a4_135
	a5Out = a5_136
	s2Out = s2_142
	s3Out = s3_143
	s5Out = <invalid>
	s6Out = <invalid>
	s7Out = <invalid>
	s8Out = s8_145
	return ra_139
ecp_select_comb_exit:


word32 ecp_modp(word32 ra, word32 a0, word32 a2, word32 a4, word32 a5, word32 s2, word32 s5, word32 s6, word32 s7, word32 s10, word32 s11, word32 mstatus, word32 dwArg08, word32 dwArg10, word32 dwArg14, word32 dwArg28, word32 dwArg38, word32 dwArg44, word32 dwArg48, word32 dwArg58, word32 dwArg68, word32 dwArg78, word32 dwArg88, word32 dwArg98, word32 dwArgA8, word32 dwArgC8, word32 dwArgD8, word32 dwArgE8, word32 dwArgF8, word32 dwArg0108, word32 dwArg0114, word32 dwArg0128, word32 dwArg0134, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s9Out, ptr32 & s10Out, ptr32 & s11Out, ptr32 & mstatusOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ecp_double_jac
//      ecp_normalize_jac
//      ecp_normalize_jac_many
//      ecp_add_mixed
//      mbedtls_ecp_check_pubkey
//      mbedtls_ecp_mul
// MayUse:  a0:[0..31] a2:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] s10:[0..31] s11:[0..31] s2:[0..31] s5:[0..31] s6:[0..31] s7:[0..31] Stack +0008:[0..31] Stack +0010:[0..31] Stack +0014:[0..31] Stack +0028:[0..31] Stack +0038:[0..31] Stack +0044:[0..31] Stack +0048:[0..31] Stack +0058:[0..31] Stack +0068:[0..31] Stack +0078:[0..31] Stack +0088:[0..31] Stack +0098:[0..31] Stack +00A8:[0..31] Stack +00C8:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +00F8:[0..31] Stack +0108:[0..31] Stack +0114:[0..31] Stack +0128:[0..31] Stack +0134:[0..31]
// LiveOut: a0 a2 a3 a4 a5 mstatus ra s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 mstatus ra s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t3 t4 t5 t6 tp
// Preserved: s0 sp
ecp_modp_entry:
l2306364E:
	word32 a1_13 = Mem11[a5 + 100<i32>:word32]
	branch a5 != 0<32> l23063672
l23063672:
	word32 a3_118
	word32 s2_137
	word32 s1_108 = a1_13
	branch a5 < 0<32> l2306369C
l2306369C:
	word32 a1_472
	word32 a6_473
	branch mbedtls_mpi_cmp_int(0<32>, a2, out a1_472, out a2, out a3_118, out a4, out a5, out a6_473) == 0<32> l2306367A
l230636A4:
l2306367A:
	word32 a2_36
	word32 a5_39
	word32 a1_474
	word32 a0_34 = mbedtls_mpi_bitlen(a2, a4, a5, out a1_474, out a2_36, out a3_118, out a4, out a5_39)
	s1_108 = Mem11[a5_39 + 88<i32>:word32]
	a5 = a5_39 << 1<i32>
	branch a5_39 << 1<i32> >=u a0_34 l230636A6
l230636A6:
	word32 t4_225
	word32 t1_224
	word32 t0_223
	word32 sp_49
	word32 a0_56
	word32 a6_61
	word32 t3_62
	word32 a7_219
	word32 t5_226
	word32 t6_227
	word32 a2_114
	call a5_39 << 1<i32> (retsize: 0;)
		uses: a0:a0,a2:a2_36,a4:a4_38,a5:a5_39 << 1<i32>,a6:a6_61,a7:a7_219,mstatus:mstatus,ra:ra,s0:a0,s1:Mem11[(a5_39 << 1<i32>) + 100<i32>:word32] + 4<32>,s10:s10,s11:s11,s2:s2,s3:s3_220,s4:s4_221,s5:s5,s6:s6,s7:s7,s8:s8_222,s9:s9_233,Stack +0018:dwArg08,Stack +0020:dwArg10,Stack +0024:dwArg14,Stack +0038:dwArg28,Stack +0048:dwArg38,Stack +0054:dwArg44,Stack +0058:dwArg48,Stack +0068:dwArg58,Stack +0078:dwArg68,Stack +0088:dwArg78,Stack +0098:dwArg88,Stack +00A8:dwArg98,Stack +00B8:dwArgA8,Stack +00D8:dwArgC8,Stack +00E8:dwArgD8,Stack +00F8:dwArgE8,Stack +0108:dwArgF8,Stack +0118:dwArg0108,Stack +0124:dwArg0114,Stack +0138:dwArg0128,Stack +0144:dwArg0134,t0:t0_223,t1:t1_224,t3:t3_62,t4:t4_225,t5:t5_226,t6:t6_227
		defs: a0:a0_56,a2:a2_57,a3:a3_59,a4:a4_60,a5:a5_55,a6:a6_61,a7:a7_219,mstatus:mstatus_218,ra:ra_51,s1:s1_52,s10:s10_231,s11:s11_232,s3:s3_220,s4:s4_221,s5:s5_229,s6:s6_228,s7:s7_230,s8:s8_222,s9:s9_233,sp:sp_49,t0:t0_223,t1:t1_224,t3:t3_62,t4:t4_225,t5:t5_226,t6:t6_227
	s2_137 = a0_56
	branch a0_56 != 0<32> l2306368E
l230636B2:
	word32 a0_129
	word32 s0_110 = Mem11[a5:word32]
	branch a5 >= 0<32> l230636C2
l230636B8:
	word32 a3_73
	word32 a1_478
	word32 a6_479
	branch mbedtls_mpi_cmp_int(0<32>, a2_114, out a1_478, out a2_114, out a3_73, out a4, out a5, out a6_479) != 0<32> l230636DC
l230636DC:
	word32 a1_481
	word32 s0_480
	word32 a7_482
	ra = mbedtls_mpi_add_mpi(ra, s0_110, s0_110, a3_73, a4, a5, s2_137, mstatus, Mem11[sp_49 + 152<i32>:word32], Mem11[sp_49 + 184<i32>:word32], Mem11[sp_49 + 216<i32>:word32], Mem11[sp_49 + 248<i32>:word32], Mem11[sp_49 + 264<i32>:word32], Mem11[sp_49 + 280<i32>:word32], Mem11[sp_49 + 312<i32>:word32], out s0_480, out s1_108, out a0_129, out a1_481, out a2_114, out a3_118, out a4, out a5, out a7_482, out s2_137, out s3, out s4, out s8)
	branch a0_129 == 0<32> l230636B2
l230636C2:
	word32 a1_475
	word32 a2_476
	word32 a6_477
	branch mbedtls_mpi_cmp_mpi(a2_114, a4, a5, out a1_475, out a2_476, out a3_118, out a4, out a5, out a6_477) < 0<32> l2306368E
l230636CE:
	word32 a1_483
	word32 a7_484
	ra = mbedtls_mpi_sub_abs(ra, s0_110, s0_110, s1_108, a3_118, a4, a5, mstatus, Mem11[sp_49 + 184<i32>:word32], Mem11[sp_49 + 248<i32>:word32], Mem11[sp_49 + 280<i32>:word32], Mem11[sp_49 + 296<i32>:word32], Mem11[sp_49 + 312<i32>:word32], Mem11[sp_49 + 344<i32>:word32], out s0_110, out s1_108, out a0_129, out a1_483, out a2_114, out a3_118, out a4, out a5, out a7_484, out s2_137, out s3, out s4, out s8)
	branch a0_129 == 0<32> l230636C2
l230636DA:
l230636E8:
	s2_137 = a0_129
l23063688:
	s2_137 = 0xFB000080<32>
l2306368E:
	0<32> = dwArg38
	s1Out = s1_108
	a0Out = s2_137
	a2Out = dwArg10
	a3Out = a3_118
	a4Out = a4
	a5Out = a5
	s2Out = s2_137
	s3Out = s3
	s4Out = s4
	s5Out = s5
	s6Out = s6
	s7Out = s7
	s8Out = s8
	s9Out = s9
	s10Out = s10
	s11Out = s11
	mstatusOut = mstatus
	return ra
l2306365E:
	0<32> = dwArg38
l2306366E_thunk_mbedtls_mpi_mod_mpi:
	word32 a0_180
	word32 a2_182
	word32 a3_183
	word32 a4_184
	word32 a5_185
	word32 s1_187
	word32 s2_188
	word32 s10_193
	word32 s11_194
	word32 s3_195
	word32 s4_196
	word32 s5_197
	word32 s6_198
	word32 s7_199
	word32 s8_200
	word32 s9_201
	word32 a7_485
	word32 ra_192 = mbedtls_mpi_mod_mpi(ra, a0, a0, a1_13 + 4<i32>, s5, s6, s7, s10, s11, mstatus, dwArg08, dwArg28, dwArg38, dwArg44, dwArg48, dwArg58, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArgF8, dwArg0108, dwArg0114, dwArg0128, dwArg0134, out s1_187, out a0_180, out a2_182, out a3_183, out a4_184, out a5_185, out a7_485, out s2_188, out s3_195, out s4_196, out s5_197, out s6_198, out s7_199, out s8_200, out s9_201, out s10_193, out s11_194)
	s1Out = s1_187
	a0Out = a0_180
	a2Out = a2_182
	a3Out = a3_183
	a4Out = a4_184
	a5Out = a5_185
	s2Out = s2_188
	s3Out = s3_195
	s4Out = s4_196
	s5Out = s5_197
	s6Out = s6_198
	s7Out = s7_199
	s8Out = s8_200
	s9Out = s9_201
	s10Out = s10_193
	s11Out = s11_194
	mstatusOut = mstatus
	return ra_192
ecp_modp_exit:


word32 ecp_double_jac(word32 ra, word32 s1, word32 a0, word32 a2, word32 a3, word32 a4, word32 s2, word32 s6, word32 s7, word32 s10, word32 s11, word32 mstatus, word32 dwArg08, word32 dwArg18, word32 dwArg28, word32 dwArg38, word32 dwArg58, word32 dwArg68, word32 dwArg78, word32 dwArg84, word32 dwArg88, word32 dwArg98, word32 dwArgA8, word32 dwArgB4, word32 dwArgB8, word32 dwArgC8, word32 dwArgD4, word32 dwArgD8, word32 dwArgE8, word32 dwArgF8, word32 dwArg0108, word32 dwArg0118, word32 dwArg0128, word32 dwArg0138, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s9Out, ptr32 & s10Out, ptr32 & s11Out, ptr32 & mstatusOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ecp_add_mixed
//      mbedtls_ecp_mul
// MayUse:  a0:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] mstatus:[0..31] ra:[0..31] s1:[0..31] s10:[0..31] s11:[0..31] s2:[0..31] s6:[0..31] s7:[0..31] Stack +0008:[0..31] Stack +0018:[0..31] Stack +0028:[0..31] Stack +0038:[0..31] Stack +0058:[0..31] Stack +0068:[0..31] Stack +0078:[0..31] Stack +0084:[0..31] Stack +0088:[0..31] Stack +0098:[0..31] Stack +00A8:[0..31] Stack +00B4:[0..31] Stack +00B8:[0..31] Stack +00C8:[0..31] Stack +00D4:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +00F8:[0..31] Stack +0108:[0..31] Stack +0118:[0..31] Stack +0128:[0..31] Stack +0138:[0..31]
// LiveOut: a0 a2 a3 a4 a5 a6 mstatus ra s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 mstatus ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
ecp_double_jac_entry:
l230636EC:
	word32 s6_1002
	word32 s3_1026
	word32 s2_1025
	word32 s8_1004
	word32 s0_101
	word32 a2_1016
	word32 a4_1018
	word32 a5_1019
	word32 a3_181
	word32 a4_182
	word32 ra_113
	word32 s4_118
	mbedtls_mpi_init(fp + -96<i32>)
	mbedtls_mpi_init(fp + -84<i32>)
	mbedtls_mpi_init(fp + -72<i32>)
	mbedtls_mpi_init(fp + -60<i32>)
	branch Mem28[a0 + 24<i32>:int32] != 0<32> l230639B2
l230639B2:
	word32 s1_53
	word32 s5_57
	word32 a0_66
	word32 s4_2755
	word32 a3_2754
	word32 s0_2753
	word32 ra_51 = mbedtls_mpi_mul_mpi(ra, fp + -84<i32>, a2, a2, a3, a4, a0, a2, s6, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_2753, out s1_53, out a0_66, out a2_1016, out a3_2754, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2755, out s5_57, out s6_1002, out s8_1004)
	s0_101 = a0_66
	branch a0_66 != 0<32> l23063756
l230639C2:
	word32 a0_73
	word32 a3_76
	word32 s1_80
	word32 s4_90
	word32 s9_2792
	word32 s5_2791
	word32 ra_86 = ecp_modp(ra_51, s1_53, a2_1016, a4_1018, a5_1019, s2_1025, s5_57, s6_1002, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_80, out a0_73, out a2_1016, out a3_76, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_90, out s5_2791, out s6_1002, out s7, out s8_1004, out s9_2792, out s10, out s11, out mstatus)
	s0_101 = a0_73
	branch a0_73 != 0<32> l23063756
l230639D0:
	word32 a0_105
	word32 a3_2794
	word32 s0_2793
	word32 s5_2796
	word32 s3_2795
	word32 s1_115
	ra_113 = mbedtls_mpi_mul_int(ra_86, fp + -96<i32>, s1_80, a3_76, a4_1018, s2_1025, s4_90, s6_1002, mstatus, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArgA8, dwArgB8, dwArgC8, dwArg0118, out s0_2793, out s1_115, out a0_105, out a2_1016, out a3_2794, out a4_1018, out a5_1019, out s2_1025, out s3_2795, out s4_118, out s5_2796, out s6_1002, out s8_1004)
	s0_101 = a0_105
	s3_1026 = s2_1025 + 4<i32>
	branch a0_105 != 0<32> l23063756
l230639E4:
	word32 a2_140
	word32 a3_141
	word32 a4_142
	word32 a5_143
	word32 a6_2798
	word32 a1_2797
	branch mbedtls_mpi_cmp_mpi(a2_1016, a4_1018, a5_1019, out a1_2797, out a2_140, out a3_141, out a4_142, out a5_143, out a6_2798) >= 0<32> l23063A84
l23063A84:
	word32 a0_151
	word32 a1_2800
	word32 s0_2799
	word32 a7_2802
	word32 a3_2801
	ra_113 = mbedtls_mpi_sub_abs(ra_113, fp + -96<i32>, fp + -96<i32>, s3_1026, a3_141, a4_142, a5_143, mstatus, dwArg58, dwArg98, dwArgB8, dwArgC8, dwArgD8, dwArgF8, out s0_2799, out s1_115, out a0_151, out a1_2800, out a2_1016, out a3_2801, out a4_1018, out a5_1019, out a7_2802, out s2_1025, out s3_1026, out s4_118, out s8_1004)
	s0_101 = a0_151
	branch a0_151 == 0<32> l230639E4
l23063A92:
l230639F0:
	word32 s6_175 = s2_1025 + 16<i32>
	word32 a2_2804
	word32 a5_2805
	word32 a6_2806
	word32 a1_2803
	branch mbedtls_mpi_cmp_int(0<32>, a2_140, out a1_2803, out a2_2804, out a3_181, out a4_182, out a5_2805, out a6_2806) == 0<32> l230637E8
l23063A00:
	word32 a2_187 = s4_118 + 24<i32>
	word32 s1_200
	word32 s5_204
	word32 a0_213
	word32 a3_2812
	word32 s4_2813
	word32 s0_2811
	word32 ra_198 = mbedtls_mpi_mul_mpi(ra_113, s1_115, a2_187, a2_187, a3_181, a4_182, s2_1025, s4_118, s6_175, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_2811, out s1_200, out a0_213, out a2_1016, out a3_2812, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2813, out s5_204, out s6_1002, out s8_1004)
	s0_101 = a0_213
	branch a0_213 != 0<32> l23063756
l23063A12:
	word32 a0_221
	word32 a3_224
	word32 s1_228
	word32 s4_238
	word32 s5_2814
	word32 s9_2815
	word32 ra_234 = ecp_modp(ra_198, s1_200, a2_1016, a4_1018, a5_1019, s2_1025, s5_204, s6_1002, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_228, out a0_221, out a2_1016, out a3_224, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_238, out s5_2814, out s6_1002, out s7, out s8_1004, out s9_2815, out s10, out s11, out mstatus)
	s0_101 = a0_221
	branch a0_221 != 0<32> l23063756
l23063A20:
	word32 s5_266
	word32 a0_275
	word32 s0_2816
	word32 s1_2817
	word32 a3_2818
	word32 s4_2819
	word32 ra_260 = mbedtls_mpi_mul_mpi(ra_234, fp + -72<i32>, s1_228, s1_228, a3_224, a4_1018, s2_1025, s4_238, s6_1002, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_2816, out s1_2817, out a0_275, out a2_1016, out a3_2818, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2819, out s5_266, out s6_1002, out s8_1004)
	s0_101 = a0_275
	branch a0_275 != 0<32> l23063756
l23063A30:
	word32 a0_280
	word32 a3_283
	word32 s1_287
	word32 s4_297
	word32 s9_2821
	word32 s5_2820
	word32 ra_293 = ecp_modp(ra_260, fp + -72<i32>, a2_1016, a4_1018, a5_1019, s2_1025, s5_266, s6_1002, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_287, out a0_280, out a2_1016, out a3_283, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_297, out s5_2820, out s6_1002, out s7, out s8_1004, out s9_2821, out s10, out s11, out mstatus)
	s0_101 = a0_280
	branch a0_280 != 0<32> l23063756
l23063A3E:
	word32 s1_321
	word32 s5_325
	word32 a0_334
	word32 a3_2823
	word32 s4_2824
	word32 s0_2822
	word32 ra_319 = mbedtls_mpi_mul_mpi(ra_293, s1_287, fp + -72<i32>, s6_1002, a3_283, a4_1018, s2_1025, s4_297, s6_1002, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_2822, out s1_321, out a0_334, out a2_1016, out a3_2823, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2824, out s5_325, out s6_1002, out s8_1004)
	s0_101 = a0_334
	branch a0_334 != 0<32> l23063756
l23063A4E:
	word32 a0_339
	word32 a3_342
	word32 s9_2828
	word32 s1_2825
	word32 s4_2826
	word32 s5_2827
	word32 ra_352 = ecp_modp(ra_319, s1_321, a2_1016, a4_1018, a5_1019, s2_1025, s5_325, s6_1002, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_2825, out a0_339, out a2_1016, out a3_342, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2826, out s5_2827, out s6_1002, out s7, out s8_1004, out s9_2828, out s10, out s11, out mstatus)
	s0_101 = a0_339
	branch a0_339 != 0<32> l23063756
l23063A5C:
	word32 a3_2832
	word32 a7_2833
	word32 s1_2830
	word32 a1_2831
	word32 s0_2829
	word32 a0_371
	ra_113 = mbedtls_mpi_add_mpi(ra_352, a0_339, fp + -96<i32>, a3_342, a4_1018, a5_1019, s2_1025, mstatus, dwArg38, dwArg58, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArgD8, out s0_2829, out s1_2830, out a0_371, out a1_2831, out a2_1016, out a3_2832, out a4_1018, out a5_1019, out a7_2833, out s2_1025, out s3_1026, out s4_118, out s8_1004)
l23063A66:
	s0_101 = a0_371
	branch a0_371 != 0<32> l23063756
l23063A6C:
	word32 a5_407
	word32 a6_2836
	word32 a1_2834
	word32 a2_2835
	branch mbedtls_mpi_cmp_mpi(a2_1016, a4_1018, a5_1019, out a1_2834, out a2_2835, out a3_181, out a4_182, out a5_407, out a6_2836) < 0<32> l230637E8
l23063A78:
	word32 a3_2840
	word32 a7_2841
	word32 s1_2838
	word32 a1_2839
	word32 s0_2837
	ra_113 = mbedtls_mpi_sub_abs(ra_113, fp + -96<i32>, fp + -96<i32>, s3_1026, a3_181, a4_182, a5_407, mstatus, dwArg58, dwArg98, dwArgB8, dwArgC8, dwArgD8, dwArgF8, out s0_2837, out s1_2838, out a0_371, out a1_2839, out a2_1016, out a3_2840, out a4_1018, out a5_1019, out a7_2841, out s2_1025, out s3_1026, out s4_118, out s8_1004)
l23063728:
	word32 s1_449
	word32 s5_453
	word32 a0_462
	word32 s4_2758
	word32 a3_2757
	word32 s0_2756
	word32 ra_447 = mbedtls_mpi_mul_mpi(ra, fp + -84<i32>, a2 + 24<i32>, a2 + 24<i32>, a3, a4, a0, a2, s6, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_2756, out s1_449, out a0_462, out a2_1016, out a3_2757, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2758, out s5_453, out s6_1002, out s8_1004)
	s0_101 = a0_462
	branch a0_462 != 0<32> l23063756
l23063738:
	word32 a0_467
	word32 a3_470
	word32 s9_2780
	word32 s4_2778
	word32 s5_2779
	word32 s1_2777
	word32 ra_480 = ecp_modp(ra_447, s1_449, a2_1016, a4_1018, a5_1019, s2_1025, s5_453, s6_1002, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_2777, out a0_467, out a2_1016, out a3_470, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2778, out s5_2779, out s6_1002, out s7, out s8_1004, out s9_2780, out s10, out s11, out mstatus)
	s0_101 = a0_467
	branch a0_467 != 0<32> l23063756
l23063744:
	word32 a0_499
	word32 s3_2786
	word32 a7_2785
	word32 a3_2784
	word32 a1_2783
	word32 s1_2782
	word32 s0_2781
	word32 s4_2787
	word32 ra_507 = mbedtls_mpi_add_mpi(ra_480, a0_467, fp + -72<i32>, a3_470, a4_1018, a5_1019, s2_1025, mstatus, dwArg38, dwArg58, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArgD8, out s0_2781, out s1_2782, out a0_499, out a1_2783, out a2_1016, out a3_2784, out a4_1018, out a5_1019, out a7_2785, out s2_1025, out s3_2786, out s4_2787, out s8_1004)
	s0_101 = a0_499
	s3_1026 = s2_1025 + 4<i32>
	branch a0_499 == 0<32> l23063794
l23063794:
	word32 a3_533
	word32 a4_534
	word32 a5_535
	word32 a1_2788
	word32 a6_2790
	word32 a2_2789
	branch mbedtls_mpi_cmp_mpi(a2_1016, a4_1018, a5_1019, out a1_2788, out a2_2789, out a3_533, out a4_534, out a5_535, out a6_2790) >= 0<32> l23063786
l23063786:
	word32 a0_543
	word32 a1_2844
	word32 a3_2845
	word32 a7_2846
	word32 s4_2847
	word32 s0_2842
	word32 s1_2843
	ra_507 = mbedtls_mpi_sub_abs(ra_507, fp + -72<i32>, fp + -72<i32>, s3_1026, a3_533, a4_534, a5_535, mstatus, dwArg58, dwArg98, dwArgB8, dwArgC8, dwArgD8, dwArgF8, out s0_2842, out s1_2843, out a0_543, out a1_2844, out a2_1016, out a3_2845, out a4_1018, out a5_1019, out a7_2846, out s2_1025, out s3_1026, out s4_2847, out s8_1004)
	s0_101 = a0_543
	branch a0_543 != 0<32> l23063756
l230637A0:
	word32 s0_2848
	word32 a0_573
	word32 s1_583
	word32 s4_586
	word32 a3_576
	word32 ra_581 = mbedtls_mpi_sub_mpi(ra_507, s0_101, fp + -60<i32>, a3_533, a4_534, a5_535, s2_1025, mstatus, dwArg38, dwArg58, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArgD8, out s0_2848, out s1_583, out a0_573, out a2_1016, out a3_576, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_586, out s8_1004)
l230637AA:
	s0_101 = a0_573
	branch a0_573 != 0<32> l23063756
l230637AE:
	branch a5_1019 < 0<32> l2306398E
l2306398E:
	word32 a5_609
	word32 a6_2851
	word32 a2_2850
	word32 a1_2849
	branch mbedtls_mpi_cmp_int(0<32>, a2_1016, out a1_2849, out a2_2850, out a3_576, out a4_1018, out a5_609, out a6_2851) == 0<32> l230637B4
l2306399A:
	word32 s0_3013
	word32 a1_3014
	word32 a7_3015
	ra_581 = mbedtls_mpi_add_mpi(ra_581, a0_573, fp + -60<i32>, a3_576, a4_1018, a5_609, s2_1025, mstatus, dwArg38, dwArg58, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArgD8, out s0_3013, out s1_583, out a0_573, out a1_3014, out a2_1016, out a3_576, out a4_1018, out a5_1019, out a7_3015, out s2_1025, out s3_1026, out s4_586, out s8_1004)
l230637B4:
	word32 s1_669
	word32 s5_673
	word32 a0_682
	word32 a3_2853
	word32 s4_2854
	word32 s0_2852
	word32 ra_667 = mbedtls_mpi_mul_mpi(ra_581, s1_583, fp + -72<i32>, fp + -60<i32>, a3_576, a4_1018, s2_1025, s4_586, s6_1002, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_2852, out s1_669, out a0_682, out a2_1016, out a3_2853, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2854, out s5_673, out s6_1002, out s8_1004)
	s0_101 = a0_682
	branch a0_682 != 0<32> l23063756
l230637C2:
	word32 a0_696
	word32 a3_699
	word32 s1_703
	word32 s4_713
	word32 s5_2855
	word32 s9_2856
	word32 ra_709 = ecp_modp(ra_667, s1_669, a2_1016, a4_1018, a5_1019, s2_1025, s5_673, s6_1002, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_703, out a0_696, out a2_1016, out a3_699, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_713, out s5_2855, out s6_1002, out s7, out s8_1004, out s9_2856, out s10, out s11, out mstatus)
	s0_101 = a0_696
	branch a0_696 != 0<32> l23063756
l230637CE:
	word32 s5_2860
	word32 a3_2859
	word32 s1_2858
	word32 s0_2857
	word32 a0_728
	ra_113 = mbedtls_mpi_mul_int(ra_709, fp + -96<i32>, s1_703, a3_699, a4_1018, s2_1025, s4_713, s6_1002, mstatus, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArgA8, dwArgB8, dwArgC8, dwArg0118, out s0_2857, out s1_2858, out a0_728, out a2_1016, out a3_2859, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_118, out s5_2860, out s6_1002, out s8_1004)
l230637D8:
	s0_101 = a0_728
	branch a0_728 != 0<32> l23063756
l230637DC:
	word32 a5_766
	word32 a2_2862
	word32 a6_2863
	word32 a1_2861
	branch mbedtls_mpi_cmp_mpi(a2_1016, a4_1018, a5_1019, out a1_2861, out a2_2862, out a3_181, out a4_182, out a5_766, out a6_2863) >= 0<32> l230639A6
l230639A6:
	word32 s0_2864
	word32 s1_2865
	word32 a1_2866
	word32 a3_2867
	word32 a7_2868
	ra_113 = mbedtls_mpi_sub_abs(ra_113, fp + -96<i32>, fp + -96<i32>, s3_1026, a3_181, a4_182, a5_766, mstatus, dwArg58, dwArg98, dwArgB8, dwArgC8, dwArgD8, dwArgF8, out s0_2864, out s1_2865, out a0_728, out a1_2866, out a2_1016, out a3_2867, out a4_1018, out a5_1019, out a7_2868, out s2_1025, out s3_1026, out s4_118, out s8_1004)
l230637E8:
	word32 s6_799 = s4_118 + 12<i32>
	word32 s0_2807
	word32 s1_2808
	word32 a3_2809
	word32 s5_825
	word32 a0_834
	word32 s4_2810
	word32 ra_819 = mbedtls_mpi_mul_mpi(ra_113, fp + -72<i32>, s6_799, s6_799, a3_181, a4_182, s2_1025, s4_118, s6_799, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_2807, out s1_2808, out a0_834, out a2_1016, out a3_2809, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2810, out s5_825, out s6_1002, out s8_1004)
	s0_101 = a0_834
	branch a0_834 != 0<32> l23063756
l230637FA:
	word32 a0_848
	word32 s9_2873
	word32 s5_2872
	word32 s4_2871
	word32 a3_2870
	word32 s1_2869
	word32 ra_861 = ecp_modp(ra_819, fp + -72<i32>, a2_1016, a4_1018, a5_1019, s2_1025, s5_825, s6_1002, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_2869, out a0_848, out a2_1016, out a3_2870, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2871, out s5_2872, out s6_1002, out s7, out s8_1004, out s9_2873, out s10, out s11, out mstatus)
	s0_101 = a0_848
	branch a0_848 != 0<32> l23063756
l23063806:
	word32 a0_879
	word32 a3_2875
	word32 a7_2876
	word32 s3_2877
	word32 s0_2874
	word32 s4_892
	word32 s1_889
	word32 ra_887 = mbedtls_mpi_shift_l(ra_861, 1<32>, a2_1016, a4_1018, a5_1019, mstatus, dwLoc48, dwArg88, dwArgC8, dwArg0108, out s0_2874, out s1_889, out a0_879, out a2_1016, out a3_2875, out a4_1018, out a5_1019, out a7_2876, out s2_1025, out s3_2877, out s4_892, out s8_1004)
	s0_101 = a0_879
	s3_1026 = s2_1025 + 4<i32>
	branch a0_879 != 0<32> l23063756
l23063816:
	word32 a3_913
	word32 a4_914
	word32 a5_915
	word32 a6_2880
	word32 a2_2879
	word32 a1_2878
	branch mbedtls_mpi_cmp_mpi(a2_1016, a4_1018, a5_1019, out a1_2878, out a2_2879, out a3_913, out a4_914, out a5_915, out a6_2880) >= 0<32> l23063A94
l23063A94:
	word32 a0_923
	word32 a7_2884
	word32 a1_2882
	word32 a3_2883
	word32 s0_2881
	ra_887 = mbedtls_mpi_sub_abs(ra_887, fp + -72<i32>, fp + -72<i32>, s3_1026, a3_913, a4_914, a5_915, mstatus, dwArg58, dwArg98, dwArgB8, dwArgC8, dwArgD8, dwArgF8, out s0_2881, out s1_889, out a0_923, out a1_2882, out a2_1016, out a3_2883, out a4_1018, out a5_1019, out a7_2884, out s2_1025, out s3_1026, out s4_892, out s8_1004)
	s0_101 = a0_923
	branch a0_923 == 0<32> l23063816
l23063AA4:
l23063822:
	word32 s1_962
	word32 s5_966
	word32 a0_975
	word32 s0_2885
	word32 a3_2886
	word32 s4_2887
	word32 ra_960 = mbedtls_mpi_mul_mpi(ra_887, s1_889, s4_892, fp + -72<i32>, a3_913, a4_914, s2_1025, s4_892, s6_1002, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_2885, out s1_962, out a0_975, out a2_1016, out a3_2886, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2887, out s5_966, out s6_1002, out s8_1004)
	s0_101 = a0_975
	branch a0_975 != 0<32> l23063756
l23063832:
	word32 a0_983
	word32 s9_2892
	word32 s5_2891
	word32 s4_2890
	word32 s1_2888
	word32 a3_2889
	word32 ra_996 = ecp_modp(ra_960, s1_962, a2_1016, a4_1018, a5_1019, s2_1025, s5_966, s6_1002, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_2888, out a0_983, out a2_1016, out a3_2889, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2890, out s5_2891, out s6_1002, out s7, out s8_1004, out s9_2892, out s10, out s11, out mstatus)
	s0_101 = a0_983
	branch a0_983 != 0<32> l23063756
l23063840:
	word32 a7_2895
	word32 s0_2893
	word32 a3_2894
	word32 a0_1014
	word32 s1_1024
	word32 s4_1027
	word32 ra_1022 = mbedtls_mpi_shift_l(ra_996, 1<32>, a2_1016, a4_1018, a5_1019, mstatus, dwLoc48, dwArg88, dwArgC8, dwArg0108, out s0_2893, out s1_1024, out a0_1014, out a2_1016, out a3_2894, out a4_1018, out a5_1019, out a7_2895, out s2_1025, out s3_1026, out s4_1027, out s8_1004)
l23063848:
	s0_101 = a0_1014
	branch a0_1014 != 0<32> l23063756
l2306384E:
	word32 a3_1048
	word32 a4_1049
	word32 a5_1050
	word32 a6_2898
	word32 a1_2896
	word32 a2_2897
	branch mbedtls_mpi_cmp_mpi(a2_1016, a4_1018, a5_1019, out a1_2896, out a2_2897, out a3_1048, out a4_1049, out a5_1050, out a6_2898) >= 0<32> l23063AA6
l23063AA6:
	word32 a1_2900
	word32 a7_2902
	word32 a3_2901
	word32 s0_2899
	ra_1022 = mbedtls_mpi_sub_abs(ra_1022, s1_1024, s1_1024, s3_1026, a3_1048, a4_1049, a5_1050, mstatus, dwArg58, dwArg98, dwArgB8, dwArgC8, dwArgD8, dwArgF8, out s0_2899, out s1_1024, out a0_1014, out a1_2900, out a2_1016, out a3_2901, out a4_1018, out a5_1019, out a7_2902, out s2_1025, out s3_1026, out s4_1027, out s8_1004)
l2306385A:
	word32 s5_1100
	word32 a0_1109
	word32 s1_2904
	word32 a3_2905
	word32 s4_2906
	word32 s0_2903
	word32 ra_1094 = mbedtls_mpi_mul_mpi(ra_1022, fp + -60<i32>, fp + -72<i32>, fp + -72<i32>, a3_1048, a4_1049, s2_1025, s4_1027, s6_1002, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_2903, out s1_2904, out a0_1109, out a2_1016, out a3_2905, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2906, out s5_1100, out s6_1002, out s8_1004)
	s0_101 = a0_1109
	branch a0_1109 != 0<32> l23063756
l2306386A:
	word32 a0_1117
	word32 s9_2911
	word32 s5_2910
	word32 s1_2907
	word32 a3_2908
	word32 s4_2909
	word32 ra_1130 = ecp_modp(ra_1094, fp + -60<i32>, a2_1016, a4_1018, a5_1019, s2_1025, s5_1100, s6_1002, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_2907, out a0_1117, out a2_1016, out a3_2908, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2909, out s5_2910, out s6_1002, out s7, out s8_1004, out s9_2911, out s10, out s11, out mstatus)
	s0_101 = a0_1117
	branch a0_1117 != 0<32> l23063756
l23063878:
	word32 a7_2915
	word32 s1_2913
	word32 a3_2914
	word32 s0_2912
	word32 a0_1148
	word32 s4_1161
	word32 ra_1156 = mbedtls_mpi_shift_l(ra_1130, 1<32>, a2_1016, a4_1018, a5_1019, mstatus, dwLoc48, dwArg88, dwArgC8, dwArg0108, out s0_2912, out s1_2913, out a0_1148, out a2_1016, out a3_2914, out a4_1018, out a5_1019, out a7_2915, out s2_1025, out s3_1026, out s4_1161, out s8_1004)
l23063880:
	s0_101 = a0_1148
	branch a0_1148 != 0<32> l23063756
l23063886:
	word32 a3_1182
	word32 a4_1183
	word32 a5_1184
	word32 a6_2918
	word32 a1_2916
	word32 a2_2917
	branch mbedtls_mpi_cmp_mpi(a2_1016, a4_1018, a5_1019, out a1_2916, out a2_2917, out a3_1182, out a4_1183, out a5_1184, out a6_2918) >= 0<32> l23063AB2
l23063AB2:
	word32 a7_2923
	word32 a3_2922
	word32 s1_2920
	word32 a1_2921
	word32 s0_2919
	ra_1156 = mbedtls_mpi_sub_abs(ra_1156, fp + -60<i32>, fp + -60<i32>, s3_1026, a3_1182, a4_1183, a5_1184, mstatus, dwArg58, dwArg98, dwArgB8, dwArgC8, dwArgD8, dwArgF8, out s0_2919, out s1_2920, out a0_1148, out a1_2921, out a2_1016, out a3_2922, out a4_1018, out a5_1019, out a7_2923, out s2_1025, out s3_1026, out s4_1161, out s8_1004)
l23063892:
	word32 s5_1233
	word32 a0_1242
	word32 s1_2925
	word32 a3_2926
	word32 s4_2927
	word32 s0_2924
	word32 ra_1227 = mbedtls_mpi_mul_mpi(ra_1156, fp + -72<i32>, fp + -96<i32>, fp + -96<i32>, a3_1182, a4_1183, s2_1025, s4_1161, s6_1002, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_2924, out s1_2925, out a0_1242, out a2_1016, out a3_2926, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2927, out s5_1233, out s6_1002, out s8_1004)
	s0_101 = a0_1242
	branch a0_1242 != 0<32> l23063756
l230638A2:
	word32 a0_1250
	word32 a3_1253
	word32 s1_2928
	word32 s4_2929
	word32 s5_2930
	word32 s9_2931
	word32 ra_1263 = ecp_modp(ra_1227, fp + -72<i32>, a2_1016, a4_1018, a5_1019, s2_1025, s5_1233, s6_1002, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_2928, out a0_1250, out a2_1016, out a3_1253, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2929, out s5_2930, out s6_1002, out s7, out s8_1004, out s9_2931, out s10, out s11, out mstatus)
	s0_101 = a0_1250
	branch a0_1250 != 0<32> l23063756
l230638B0:
	word32 s4_2934
	word32 s0_2932
	word32 s1_2933
	word32 a0_1282
	word32 a3_1285
	word32 ra_1290 = mbedtls_mpi_sub_mpi(ra_1263, a0_1250, fp + -72<i32>, a3_1253, a4_1018, a5_1019, s2_1025, mstatus, dwArg38, dwArg58, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArgD8, out s0_2932, out s1_2933, out a0_1282, out a2_1016, out a3_1285, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2934, out s8_1004)
l230638BA:
	s0_101 = a0_1282
	branch a0_1282 != 0<32> l23063756
l230638C0:
	branch a5_1019 < 0<32> l23063ABE
l23063ABE:
	word32 a1_2935
	word32 a2_2936
	word32 a6_2937
	branch mbedtls_mpi_cmp_int(0<32>, a2_1016, out a1_2935, out a2_2936, out a3_1285, out a4_1018, out a5_1019, out a6_2937) == 0<32> l230638C6
l23063ACA:
	word32 s4_3012
	word32 s0_3008
	word32 s1_3009
	word32 a1_3010
	word32 a7_3011
	ra_1290 = mbedtls_mpi_add_mpi(ra_1290, a0_1282, fp + -72<i32>, a3_1285, a4_1018, a5_1019, s2_1025, mstatus, dwArg38, dwArg58, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArgD8, out s0_3008, out s1_3009, out a0_1282, out a1_3010, out a2_1016, out a3_1285, out a4_1018, out a5_1019, out a7_3011, out s2_1025, out s3_1026, out s4_3012, out s8_1004)
l230638C6:
	word32 s0_2938
	word32 s4_2939
	word32 a0_1366
	word32 s1_1376
	word32 a3_1369
	word32 ra_1374 = mbedtls_mpi_sub_mpi(ra_1290, a0_1282, fp + -72<i32>, a3_1285, a4_1018, a5_1019, s2_1025, mstatus, dwArg38, dwArg58, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArgD8, out s0_2938, out s1_1376, out a0_1366, out a2_1016, out a3_1369, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2939, out s8_1004)
l230638D0:
	s0_101 = a0_1366
	branch a0_1366 != 0<32> l23063756
l230638D6:
	branch a5_1019 < 0<32> l23063AD6
l23063AD6:
	word32 a1_2940
	word32 a2_2941
	word32 a6_2942
	branch mbedtls_mpi_cmp_int(0<32>, a2_1016, out a1_2940, out a2_2941, out a3_1369, out a4_1018, out a5_1019, out a6_2942) == 0<32> l230638DC
l23063AE2:
	word32 a7_3006
	word32 s4_3007
	word32 s0_3004
	word32 a1_3005
	ra_1374 = mbedtls_mpi_add_mpi(ra_1374, a0_1366, fp + -72<i32>, a3_1369, a4_1018, a5_1019, s2_1025, mstatus, dwArg38, dwArg58, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArgD8, out s0_3004, out s1_1376, out a0_1366, out a1_3005, out a2_1016, out a3_1369, out a4_1018, out a5_1019, out a7_3006, out s2_1025, out s3_1026, out s4_3007, out s8_1004)
l230638DC:
	word32 s0_2943
	word32 a0_1450
	word32 s1_1460
	word32 s4_1463
	word32 a3_1453
	word32 ra_1458 = mbedtls_mpi_sub_mpi(ra_1374, a0_1366, s1_1376, a3_1369, a4_1018, a5_1019, s2_1025, mstatus, dwArg38, dwArg58, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArgD8, out s0_2943, out s1_1460, out a0_1450, out a2_1016, out a3_1453, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_1463, out s8_1004)
l230638E6:
	s0_101 = a0_1450
	branch a0_1450 != 0<32> l23063756
l230638EC:
	branch a5_1019 < 0<32> l23063AEE
l23063AEE:
	word32 a5_1486
	word32 a2_2945
	word32 a6_2946
	word32 a1_2944
	branch mbedtls_mpi_cmp_int(0<32>, dwArg84, out a1_2944, out a2_2945, out a3_1453, out a4_1018, out a5_1486, out a6_2946) == 0<32> l230638F2
l23063AFA:
	word32 s0_3001
	word32 a1_3002
	word32 a7_3003
	ra_1458 = mbedtls_mpi_add_mpi(ra_1458, a0_1450, s1_1460, a3_1453, a4_1018, a5_1486, s2_1025, mstatus, dwArg38, dwArg58, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArgD8, out s0_3001, out s1_1460, out a0_1450, out a1_3002, out a2_1016, out a3_1453, out a4_1018, out a5_1019, out a7_3003, out s2_1025, out s3_1026, out s4_1463, out s8_1004)
l230638F2:
	word32 s1_1548
	word32 s5_1552
	word32 a0_1561
	word32 s4_2949
	word32 s0_2947
	word32 a3_2948
	word32 ra_1546 = mbedtls_mpi_mul_mpi(ra_1458, s1_1460, s1_1460, fp + -96<i32>, a3_1453, a4_1018, s2_1025, s4_1463, s6_1002, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_2947, out s1_1548, out a0_1561, out a2_1016, out a3_2948, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2949, out s5_1552, out s6_1002, out s8_1004)
	s0_101 = a0_1561
	branch a0_1561 != 0<32> l23063756
l23063902:
	word32 a0_1584
	word32 a3_1587
	word32 s1_1591
	word32 s5_2951
	word32 s9_2952
	word32 s4_2950
	word32 ra_1597 = ecp_modp(ra_1546, s1_1548, a2_1016, a4_1018, a5_1019, s2_1025, s5_1552, s6_1002, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_1591, out a0_1584, out a2_1016, out a3_1587, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2950, out s5_2951, out s6_1002, out s7, out s8_1004, out s9_2952, out s10, out s11, out mstatus)
	s0_101 = a0_1584
	branch a0_1584 != 0<32> l23063756
l23063910:
	word32 a0_1616
	word32 s1_1626
	word32 s0_2953
	word32 s4_1629
	word32 a3_1619
	word32 ra_1624 = mbedtls_mpi_sub_mpi(ra_1597, a0_1584, s1_1591, a3_1587, a4_1018, a5_1019, s2_1025, mstatus, dwArg38, dwArg58, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArgD8, out s0_2953, out s1_1626, out a0_1616, out a2_1016, out a3_1619, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_1629, out s8_1004)
	s0_101 = a0_1616
	s7 = s1_1626
	branch a0_1616 != 0<32> l23063756
l23063922:
	branch a5_1019 < 0<32> l23063B06
l23063B06:
	word32 a5_1652
	word32 a6_2956
	word32 a2_2955
	word32 a1_2954
	branch mbedtls_mpi_cmp_int(0<32>, dwArg84, out a1_2954, out a2_2955, out a3_1619, out a4_1018, out a5_1652, out a6_2956) == 0<32> l23063928
l23063B12:
	word32 a0_1663
	word32 a7_3000
	word32 s0_2997
	word32 s1_2998
	word32 a1_2999
	ra_1624 = mbedtls_mpi_add_mpi(ra_1624, s0_101, s1_1626, a3_1619, a4_1018, a5_1652, s2_1025, mstatus, dwArg38, dwArg58, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArgD8, out s0_2997, out s1_2998, out a0_1663, out a1_2999, out a2_1016, out a3_1619, out a4_1018, out a5_1019, out a7_3000, out s2_1025, out s3_1026, out s4_1629, out s8_1004)
	s0_101 = a0_1663
	branch a0_1663 == 0<32> l23063922
l23063B22:
l23063928:
	word32 s5_1715
	word32 a0_1724
	word32 a3_2959
	word32 s4_2960
	word32 s0_2957
	word32 s1_2958
	word32 ra_1709 = mbedtls_mpi_mul_mpi(ra_1624, fp + -60<i32>, s6_1002, s4_1629 + 24<i32>, a3_1619, a4_1018, s2_1025, s4_1629, s6_1002, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_2957, out s1_2958, out a0_1724, out a2_1016, out a3_2959, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2960, out s5_1715, out s6_1002, out s8_1004)
	s0_101 = a0_1724
	branch a0_1724 != 0<32> l23063756
l2306393A:
	word32 a0_1734
	word32 s5_1752
	word32 s4_2963
	word32 s9_2964
	word32 s1_2961
	word32 a3_2962
	word32 ra_1747 = ecp_modp(ra_1709, fp + -60<i32>, a2_1016, a4_1018, a5_1019, s2_1025, s5_1715, s6_1002, s1_1626, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_2961, out a0_1734, out a2_1016, out a3_2962, out a4_1018, out a5_1019, out s2_1025, out s3_1026, out s4_2963, out s5_1752, out s6_1002, out s7, out s8_1004, out s9_2964, out s10, out s11, out mstatus)
	s0_101 = a0_1734
	branch a0_1734 != 0<32> l23063756
l23063948:
	word32 s4_2969
	word32 a3_2967
	word32 a7_2968
	word32 s0_2965
	word32 s1_2966
	word32 a0_1765
	word32 ra_1773 = mbedtls_mpi_shift_l(ra_1747, 1<32>, a2_1016, a4_1018, a5_1019, mstatus, dwLoc48, dwArg88, dwArgC8, dwArg0108, out s0_2965, out s1_2966, out a0_1765, out a2_1016, out a3_2967, out a4_1018, out a5_1019, out a7_2968, out s2_1025, out s3_1026, out s4_2969, out s8_1004)
l23063950:
	s0_101 = a0_1765
	branch a0_1765 != 0<32> l23063756
l23063956:
	word32 a2_1798
	word32 a3_1799
	word32 a4_1800
	word32 a5_1801
	word32 a6_2971
	word32 a1_2970
	branch mbedtls_mpi_cmp_mpi(a2_1016, a4_1018, a5_1019, out a1_2970, out a2_1798, out a3_1799, out a4_1800, out a5_1801, out a6_2971) >= 0<32> l23063B24
l23063B24:
	word32 a7_2976
	word32 s4_2977
	word32 a3_2975
	word32 a1_2974
	word32 s1_2973
	word32 s0_2972
	ra_1773 = mbedtls_mpi_sub_abs(ra_1773, fp + -60<i32>, fp + -60<i32>, s3_1026, a3_1799, a4_1800, a5_1801, mstatus, dwArg58, dwArg98, dwArgB8, dwArgC8, dwArgD8, dwArgF8, out s0_2972, out s1_2973, out a0_1765, out a1_2974, out a2_1016, out a3_2975, out a4_1018, out a5_1019, out a7_2976, out s2_1025, out s3_1026, out s4_2977, out s8_1004)
l23063962:
	word32 a0_1834
	word32 a3_1842
	word32 s4_2983
	word32 a6_2981
	word32 a7_2982
	word32 s1_2979
	word32 a1_2980
	word32 s0_2978
	word32 ra_1846 = mbedtls_mpi_copy(ra_1773, s5_1752, fp + -72<i32>, a2_1798, a3_1799, a4_1800, a5_1801, mstatus, dwLoc48, dwArg88, dwArgC8, dwArg0108, out s0_2978, out s1_2979, out a0_1834, out a1_2980, out a2_1016, out a3_1842, out a4_1018, out a5_1019, out a6_2981, out a7_2982, out s2_1025, out s3_1026, out s4_2983, out s8_1004)
	s0_101 = a0_1834
	branch a0_1834 != 0<32> l23063756
l23063970:
	word32 a0_1859
	word32 a3_1867
	word32 a7_2988
	word32 s4_2989
	word32 a6_2987
	word32 s1_2985
	word32 a1_2986
	word32 s0_2984
	word32 ra_1871 = mbedtls_mpi_copy(ra_1846, s5_1752 + 12<i32>, fp + -84<i32>, a2_1016, a3_1842, a4_1018, a5_1019, mstatus, dwLoc48, dwArg88, dwArgC8, dwArg0108, out s0_2984, out s1_2985, out a0_1859, out a1_2986, out a2_1016, out a3_1867, out a4_1018, out a5_1019, out a6_2987, out a7_2988, out s2_1025, out s3_1026, out s4_2989, out s8_1004)
	s0_101 = a0_1859
	branch a0_1859 != 0<32> l23063756
l23063980:
	word32 a0_1884
	word32 a6_2994
	word32 a7_2995
	word32 s4_2996
	word32 s0_2990
	word32 s1_2991
	word32 a1_2992
	word32 a3_2993
	mbedtls_mpi_copy(ra_1871, s5_1752 + 24<i32>, fp + -60<i32>, a2_1016, a3_1867, a4_1018, a5_1019, mstatus, dwLoc48, dwArg88, dwArgC8, dwArg0108, out s0_2990, out s1_2991, out a0_1884, out a1_2992, out a2_1016, out a3_2993, out a4_1018, out a5_1019, out a6_2994, out a7_2995, out s2_1025, out s3_1026, out s4_2996, out s8_1004)
	s0_101 = a0_1884
l23063756:
	word32 a2_1916
	word32 a5_1917
	word32 a4_1920
	word32 a2_1928
	word32 a5_1929
	word32 a4_1932
	word32 s4_2768
	word32 a6_2767
	word32 a3_2766
	word32 a1_2765
	word32 s4_2763
	word32 a3_2761
	word32 a1_2760
	word32 a0_2759
	word32 a0_2764
	word32 a6_2762
	mbedtls_mpi_free(mbedtls_mpi_free(fp + -96<i32>, a2_1016, a4_1018, a5_1019, mstatus, dwArgE8, dwArg0128, out a0_2759, out a1_2760, out a2_1916, out a3_2761, out a4_1920, out a5_1917, out a6_2762, out s4_2763), a2_1916, a4_1920, a5_1917, mstatus, dwArgE8, dwArg0128, out a0_2764, out a1_2765, out a2_1928, out a3_2766, out a4_1932, out a5_1929, out a6_2767, out s4_2768)
	word32 a2_1940
	word32 a5_1941
	word32 a4_1944
	word32 s4_2773
	word32 a1_2770
	word32 a0_2769
	word32 a3_2771
	word32 a6_2772
	mbedtls_mpi_free(fp + -72<i32>, a2_1928, a4_1932, a5_1929, mstatus, dwArgE8, dwArg0128, out a0_2769, out a1_2770, out a2_1940, out a3_2771, out a4_1944, out a5_1941, out a6_2772, out s4_2773)
	word32 a2_1952
	word32 a5_1953
	word32 a4_1956
	word32 a6_1957
	word32 s4_1959
	word32 a3_2776
	word32 a0_2774
	word32 a1_2775
	mbedtls_mpi_free(fp + -60<i32>, a2_1940, a4_1944, a5_1941, mstatus, dwArgE8, dwArg0128, out a0_2774, out a1_2775, out a2_1952, out a3_2776, out a4_1956, out a5_1953, out a6_1957, out s4_1959)
	s1Out = dwArg28
	a0Out = s0_101
	a2Out = a2_1952
	a3Out = dwArg08
	a4Out = a4_1956
	a5Out = a5_1953
	a6Out = a6_1957
	s2Out = s2_1025
	s3Out = s3_1026
	s4Out = s4_1959
	s5Out = s4
	s6Out = s6_1002
	s7Out = s7
	s8Out = s8_1004
	s9Out = dwLoc5C
	s10Out = s10
	s11Out = s11
	mstatusOut = mstatus
	return dwArg68
ecp_double_jac_exit:


word32 ecp_normalize_jac(word32 ra, word32 s1, word32 a0, word32 a1, word32 a2, word32 s5, word32 s6, word32 s7, word32 s10, word32 s11, word32 mstatus, word32 dwArg04, word32 dwArg08, word32 dwArg18, word32 dwArg28, word32 dwArg38, word32 dwArg44, word32 dwArg48, word32 dwArg64, word32 dwArg68, word32 dwArg78, word32 dwArg88, word32 dwArg98, word32 dwArgA8, word32 dwArgB8, word32 dwArgC8, word32 dwArgD4, word32 dwArgE8, word32 dwArgF4, word32 dwArgF8, word32 dwArg0108, word32 dwArg0124, word32 dwArg0138, word32 dwArg0148, word32 dwArg0158, ptr32 & a2Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s9Out, ptr32 & s10Out, ptr32 & s11Out, ptr32 & mstatusOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ecp_normalize_jac_many
//      mbedtls_ecp_mul
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] mstatus:[0..31] ra:[0..31] s1:[0..31] s10:[0..31] s11:[0..31] s5:[0..31] s6:[0..31] s7:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +0018:[0..31] Stack +0028:[0..31] Stack +0038:[0..31] Stack +0044:[0..31] Stack +0048:[0..31] Stack +0064:[0..31] Stack +0068:[0..31] Stack +0078:[0..31] Stack +0088:[0..31] Stack +0098:[0..31] Stack +00A8:[0..31] Stack +00B8:[0..31] Stack +00C8:[0..31] Stack +00D4:[0..31] Stack +00E8:[0..31] Stack +00F4:[0..31] Stack +00F8:[0..31] Stack +0108:[0..31] Stack +0124:[0..31] Stack +0138:[0..31] Stack +0148:[0..31] Stack +0158:[0..31]
// LiveOut: a0 a2 a4 a5 mstatus s10 s11 s2 s3 s4 s6 s7 s8 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 mstatus ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
ecp_normalize_jac_entry:
l23063B30:
	word32 a1_482
	word32 a2_483
	word32 a3_484
	word32 a6_485
	word32 a4_26
	word32 a5_27
	word32 a0_22 = mbedtls_mpi_cmp_int(0<32>, a2, out a1_482, out a2_483, out a3_484, out a4_26, out a5_27, out a6_485)
	word32 s3_119 = a1 + 24<i32>
	word32 s2_111 = a0
	word32 s0_100 = a0_22
	branch a0_22 == 0<32> l23063BEC
l23063B50:
	mbedtls_mpi_init(fp + -56<i32>)
	mbedtls_mpi_init(fp + -44<i32>)
	word32 a0_44
	word32 a3_47
	word32 s4_60
	word32 s1_486
	word32 s5_487
	word32 s8_488
	word32 a5_108
	word32 a4_107
	word32 a2_105
	word32 ra_59 = mbedtls_mpi_inv_mod(ra, a0_22, a1 + 24<i32>, a0 + 4<i32>, s5, s6, s7, s10, s11, mstatus, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, dwArg44, dwArg48, s1, dwArg64, dwArg68, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArg0124, out s1_486, out a0_44, out a2_105, out a3_47, out a4_107, out a5_108, out s2_111, out s3_119, out s4_60, out s5_487, out s6, out s7, out s8_488, out s9, out s10, out s11)
	s0_100 = a0_44
	branch a0_44 != 0<32> l23063BE0
l23063B6C:
	word32 s5_89
	word32 a0_98
	word32 s0_500
	word32 s1_501
	word32 a3_502
	word32 s4_503
	word32 s8_504
	word32 ra_83 = mbedtls_mpi_mul_mpi(ra_59, fp + -44<i32>, fp + -56<i32>, fp + -56<i32>, a3_47, a4_107, s2_111, s4_60, s6, mstatus, dwArg68, dwArg78, dwArg88, dwArgA8, dwArgB8, dwArgC8, dwArgE8, dwArgF8, dwArg0108, dwArg0158, out s0_500, out s1_501, out a0_98, out a2_105, out a3_502, out a4_107, out a5_108, out s2_111, out s3_119, out s4_503, out s5_89, out s6, out s8_504)
	s0_100 = a0_98
	branch a0_98 != 0<32> l23063BE0
l23063B7A:
	word32 a0_103
	word32 a3_106
	word32 s1_110
	word32 s4_120
	word32 s5_505
	word32 s8_506
	word32 ra_116 = ecp_modp(ra_83, fp + -44<i32>, a2_105, a4_107, a5_108, s2_111, s5_89, s6, s7, s10, s11, mstatus, dwLoc38, dwLoc30, dwLoc2C, dwLoc18, dwLoc08, dwArg04, dwArg08, dwArg18, dwArg28, dwArg38, dwArg48, s1, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgB8, dwArgC8, dwArgD4, dwArgE8, dwArgF4, out s1_110, out a0_103, out a2_105, out a3_106, out a4_107, out a5_108, out s2_111, out s3_119, out s4_120, out s5_505, out s6, out s7, out s8_506, out s9, out s10, out s11, out mstatus)
	s0_100 = a0_103
	branch a0_103 != 0<32> l23063BE0
l23063B86:
	word32 s1_144
	word32 s5_148
	word32 a0_157
	word32 s0_507
	word32 a3_508
	word32 s4_509
	word32 s8_510
	word32 ra_142 = mbedtls_mpi_mul_mpi(ra_116, s1_110, s1_110, fp + -44<i32>, a3_106, a4_107, s2_111, s4_120, s6, mstatus, dwArg68, dwArg78, dwArg88, dwArgA8, dwArgB8, dwArgC8, dwArgE8, dwArgF8, dwArg0108, dwArg0158, out s0_507, out s1_144, out a0_157, out a2_105, out a3_508, out a4_107, out a5_108, out s2_111, out s3_119, out s4_509, out s5_148, out s6, out s8_510)
	s0_100 = a0_157
	branch a0_157 != 0<32> l23063BE0
l23063B94:
	word32 a0_162
	word32 a3_165
	word32 s1_169
	word32 s4_179
	word32 s5_511
	word32 s8_512
	word32 ra_175 = ecp_modp(ra_142, s1_144, a2_105, a4_107, a5_108, s2_111, s5_148, s6, s7, s10, s11, mstatus, dwLoc38, dwLoc30, dwLoc2C, dwLoc18, dwLoc08, dwArg04, dwArg08, dwArg18, dwArg28, dwArg38, dwArg48, s1, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgB8, dwArgC8, dwArgD4, dwArgE8, dwArgF4, out s1_169, out a0_162, out a2_105, out a3_165, out a4_107, out a5_108, out s2_111, out s3_119, out s4_179, out s5_511, out s6, out s7, out s8_512, out s9, out s10, out s11, out mstatus)
	s0_100 = a0_162
	branch a0_162 != 0<32> l23063BE0
l23063BA0:
	word32 s1_204
	word32 s5_208
	word32 a0_217
	word32 s0_513
	word32 a3_514
	word32 s4_515
	word32 s8_516
	word32 ra_202 = mbedtls_mpi_mul_mpi(ra_175, s1_169 + 0xC<32>, s1_169 + 0xC<32>, fp + -44<i32>, a3_165, a4_107, s2_111, s4_179, s6, mstatus, dwArg68, dwArg78, dwArg88, dwArgA8, dwArgB8, dwArgC8, dwArgE8, dwArgF8, dwArg0108, dwArg0158, out s0_513, out s1_204, out a0_217, out a2_105, out a3_514, out a4_107, out a5_108, out s2_111, out s3_119, out s4_515, out s5_208, out s6, out s8_516)
	s0_100 = a0_217
	branch a0_217 != 0<32> l23063BE0
l23063BB0:
	word32 a0_222
	word32 a3_225
	word32 s1_229
	word32 s4_239
	word32 s5_517
	word32 s8_518
	word32 ra_235 = ecp_modp(ra_202, s1_204, a2_105, a4_107, a5_108, s2_111, s5_208, s6, s7, s10, s11, mstatus, dwLoc38, dwLoc30, dwLoc2C, dwLoc18, dwLoc08, dwArg04, dwArg08, dwArg18, dwArg28, dwArg38, dwArg48, s1, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgB8, dwArgC8, dwArgD4, dwArgE8, dwArgF4, out s1_229, out a0_222, out a2_105, out a3_225, out a4_107, out a5_108, out s2_111, out s3_119, out s4_239, out s5_517, out s6, out s7, out s8_518, out s9, out s10, out s11, out mstatus)
	s0_100 = a0_222
	branch a0_222 != 0<32> l23063BE0
l23063BBC:
	word32 s1_263
	word32 s5_267
	word32 a0_276
	word32 s0_519
	word32 a3_520
	word32 s4_521
	word32 s8_522
	word32 ra_261 = mbedtls_mpi_mul_mpi(ra_235, s1_229, s1_229, fp + -56<i32>, a3_225, a4_107, s2_111, s4_239, s6, mstatus, dwArg68, dwArg78, dwArg88, dwArgA8, dwArgB8, dwArgC8, dwArgE8, dwArgF8, dwArg0108, dwArg0158, out s0_519, out s1_263, out a0_276, out a2_105, out a3_520, out a4_107, out a5_108, out s2_111, out s3_119, out s4_521, out s5_267, out s6, out s8_522)
	s0_100 = a0_276
	branch a0_276 != 0<32> l23063BE0
l23063BCA:
	word32 a0_281
	word32 a3_284
	word32 s1_523
	word32 s4_524
	word32 s5_525
	word32 s8_526
	word32 ra_294 = ecp_modp(ra_261, s1_263, a2_105, a4_107, a5_108, s2_111, s5_267, s6, s7, s10, s11, mstatus, dwLoc38, dwLoc30, dwLoc2C, dwLoc18, dwLoc08, dwArg04, dwArg08, dwArg18, dwArg28, dwArg38, dwArg48, s1, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgB8, dwArgC8, dwArgD4, dwArgE8, dwArgF4, out s1_523, out a0_281, out a2_105, out a3_284, out a4_107, out a5_108, out s2_111, out s3_119, out s4_524, out s5_525, out s6, out s7, out s8_526, out s9, out s10, out s11, out mstatus)
	s0_100 = a0_281
	branch a0_281 != 0<32> l23063BE0
l23063BD6:
	word32 s1_527
	word32 a1_528
	word32 a3_529
	word32 a7_530
	word32 s4_531
	word32 s8_532
	mbedtls_mpi_lset(ra_294, a3_284, a4_107, mstatus, dwLoc40, dwLoc3C, dwLoc18, dwLoc08, dwArgB8, dwArgF8, dwArg0138, out s1_527, out a1_528, out a2_105, out a3_529, out a4_107, out a5_108, out a7_530, out s2_111, out s3_119, out s4_531, out s8_532)
	s0_100 = s3_119
l23063BE0:
	word32 a2_341
	word32 a5_342
	word32 a4_345
	word32 a0_489
	word32 a1_490
	word32 a3_491
	word32 a6_492
	word32 s4_493
	mbedtls_mpi_free(fp + -56<i32>, a2_105, a4_107, a5_108, mstatus, dwArg0108, dwArg0148, out a0_489, out a1_490, out a2_341, out a3_491, out a4_345, out a5_342, out a6_492, out s4_493)
	word32 a0_494
	word32 a1_495
	word32 a2_496
	word32 a3_497
	word32 a6_498
	word32 s4_499
	mbedtls_mpi_free(fp + -44<i32>, a2_341, a4_345, a5_342, mstatus, dwArg0108, dwArg0148, out a0_494, out a1_495, out a2_496, out a3_497, out a4_26, out a5_27, out a6_498, out s4_499)
l23063BEC:
	a2Out = dwArg0138
	a4Out = a4_26
	a5Out = a5_27
	s2Out = s2_111
	s3Out = s3_119
	s4Out = dwArgF4
	s6Out = s6
	s7Out = s7
	s8Out = dwArgD4
	s9Out = s9
	s10Out = s10
	s11Out = s11
	mstatusOut = mstatus
	return s0_100
ecp_normalize_jac_exit:


word32 ecp_normalize_jac_many(word32 ra, word32 s1, word32 a0, word32 a1, word32 a2, word32 a3, word32 a4, word32 s2, word32 s3, word32 s4, word32 s5, word32 s6, word32 s7, word32 s10, word32 s11, word32 mstatus, word32 dwArg04, word32 dwArg08, word32 dwArg18, word32 dwArg24, word32 dwArg28, word32 dwArg38, word32 dwArg58, word32 dwArg68, word32 dwArg74, word32 dwArg78, word32 dwArg88, word32 dwArg94, word32 dwArg98, word32 dwArgA8, word32 dwArgB4, word32 dwArgB8, word32 dwArgC4, word32 dwArgC8, word32 dwArgD4, word32 dwArgD8, word32 dwArgE8, word32 dwArgF8, word32 dwArg0104, word32 dwArg0108, word32 dwArg0128, word32 dwArg0138, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s9Out, ptr32 & s10Out, ptr32 & s11Out, ptr32 & mstatusOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ecp_mul
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] mstatus:[0..31] ra:[0..31] s1:[0..31] s10:[0..31] s11:[0..31] s2:[0..31] s3:[0..31] s4:[0..31] s5:[0..31] s6:[0..31] s7:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +0018:[0..31] Stack +0024:[0..31] Stack +0028:[0..31] Stack +0038:[0..31] Stack +0058:[0..31] Stack +0068:[0..31] Stack +0074:[0..31] Stack +0078:[0..31] Stack +0088:[0..31] Stack +0094:[0..31] Stack +0098:[0..31] Stack +00A8:[0..31] Stack +00B4:[0..31] Stack +00B8:[0..31] Stack +00C4:[0..31] Stack +00C8:[0..31] Stack +00D4:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +00F8:[0..31] Stack +0104:[0..31] Stack +0108:[0..31] Stack +0128:[0..31] Stack +0138:[0..31]
// LiveOut: a0 a2 a3 a4 a5 mstatus ra s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 mstatus ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
ecp_normalize_jac_many_entry:
l23063BFC:
	word32 s8_1017
	word32 a2_35
	word32 a5_38
	word32 a4_37
	word32 s2_1005
	word32 s3_1006
	word32 s4_1010
	word32 s0_53
	branch a2 >u 1<32> l23063C38
l23063C38:
	word32 a1_34
	word32 a3_36
	word32 s4_1055
	word32 s1_1054
	word32 s0_1053
	word32 ra_40 = mycalloc(ra, a1, a2, 0xC<32>, a3, a4, 1<32>, mstatus, s6, s4, dwArgB8, dwArgF8, out s0_1053, out s1_1054, out a1_34, out a2_35, out a3_36, out a4_37, out a5_38, out s2_1005, out s3_1006, out s4_1055, out s8_1017)
	s4_1010 = a2
	branch a2 == 0<32> l23063DFA
l23063DFA:
	s0_53 = 0xFB000280<32>
l23063C4A:
	mbedtls_mpi_init(fp + -84<i32>)
	mbedtls_mpi_init(fp + -72<i32>)
	word32 a0_63
	word32 a7_1061
	word32 a6_1060
	word32 a1_1059
	word32 s1_1058
	word32 s0_1057
	word32 s4_151
	word32 a3_102
	word32 a5_108
	word32 a4_100
	word32 a2_105
	word32 s2_114
	word32 ra_147 = mbedtls_mpi_copy(ra_40, a2, a1_34 + 0x18<32>, a2_35, a3_36, a4_37, mbedtls_mpi_init(fp + -60<i32>), mstatus, dwLoc48, dwArg88, dwArgC8, dwArg0108, out s0_1057, out s1_1058, out a0_63, out a1_1059, out a2_105, out a3_102, out a4_100, out a5_108, out a6_1060, out a7_1061, out s2_114, out s3_1006, out s4_151, out s8_1017)
	branch a0_63 != 0<32> l23063CE0
l23063C6A:
	word32 s6_164 = s4_151 + 12<i32>
l23063C70:
	word32 s5_117
	word32 a0_126
	word32 s4_1109
	word32 a3_1108
	word32 s0_1106
	word32 s1_1107
	word32 ra_111 = mbedtls_mpi_mul_mpi(ra_147, s6_164, s6_164 + -12<i32>, a2_105 + 0x18<32>, a3_102, a4_100, s2_114, s4_151, s6_164, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_1106, out s1_1107, out a0_126, out a2_105, out a3_1108, out a4_100, out a5_108, out s2_114, out s3_1006, out s4_1109, out s5_117, out s6, out s8_1017)
	branch a0_126 != 0<32> l23063CE0
l23063C88:
	word32 a0_134
	word32 s5_152
	word32 s1_1077
	word32 s9_1078
	ra_147 = ecp_modp(ra_111, s6, a2_105, a4_100, a5_108, s2_114, s5_117, s6, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_1077, out a0_134, out a2_105, out a3_102, out a4_100, out a5_108, out s2_114, out s3_1006, out s4_151, out s5_152, out s6, out s7, out s8_1017, out s9_1078, out s10, out s11, out mstatus)
	branch a0_134 != 0<32> l23063CE0
l23063C94:
	s6_164 = s6 + 0xC<32>
	branch s2_114 != s5_152 + 1<i32> l23063D10
l23063D10:
l23063C9E:
	word32 a0_172
	word32 s9_1080
	word32 s1_1079
	word32 s5_196
	word32 s4_188
	word32 a3_175
	word32 ra_187 = mbedtls_mpi_inv_mod(ra_147, a0_134, s2_114 + s4_151, s3_1006 + 4<i32>, s5_152, s6 + 0xC<32>, s7, s10, s11, mstatus, s2, dwLoc28, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg24, dwArg28, dwArg38, s3, s1, dwArg58, dwArg78, dwArg88, dwArg98, dwArg0104, out s1_1079, out a0_172, out a2_105, out a3_175, out a4_100, out a5_108, out s2_114, out s3_1006, out s4_188, out s5_196, out s6, out s7, out s8_1017, out s9_1080, out s10, out s11)
	branch a0_172 != 0<32> l23063CE0
l23063CB6:
	a5_108 = s2_114 << 2<u32>
	s6 = s4_188 + -12<i32>
	s7 = 0xC<32>
l23063CC2:
	word32 a3_312
	word32 ra_322
	word32 s4_326
	word32 a0_309
	branch s5_196 != 0<32> l23063D14
l23063D14:
	word32 s5_233
	word32 a0_242
	word32 s4_1084
	word32 a3_1083
	word32 s1_1082
	word32 s0_1081
	word32 ra_227 = mbedtls_mpi_mul_mpi(ra_187, fp + -72<i32>, fp + -84<i32>, s5_196 + s7 + s6, a3_175, a4_100, s2_114, s4_188, s6, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_1081, out s1_1082, out a0_242, out a2_105, out a3_1083, out a4_100, out a5_108, out s2_114, out s3_1006, out s4_1084, out s5_233, out s6, out s8_1017)
	branch a0_242 != 0<32> l23063CE0
l23063D26:
	word32 a0_249
	word32 a3_252
	word32 s1_256
	word32 s4_266
	word32 s9_1132
	word32 s5_1131
	word32 ra_262 = ecp_modp(ra_227, fp + -72<i32>, a2_105, a4_100, a5_108, s2_114, s5_233, s6, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_256, out a0_249, out a2_105, out a3_252, out a4_100, out a5_108, out s2_114, out s3_1006, out s4_266, out s5_1131, out s6, out s7, out s8_1017, out s9_1132, out s10, out s11, out mstatus)
	branch a0_249 != 0<32> l23063CE0
l23063D32:
	word32 s5_295
	word32 a0_304
	word32 s4_1136
	word32 a3_1135
	word32 s1_1134
	word32 s0_1133
	word32 ra_289 = mbedtls_mpi_mul_mpi(ra_262, fp + -84<i32>, fp + -84<i32>, Mem21[s1_256 + -4<i32>:int32] + 0x18<32>, a3_252, a4_100, s2_114, s4_266, s6, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_1133, out s1_1134, out a0_304, out a2_105, out a3_1135, out a4_100, out a5_108, out s2_114, out s3_1006, out s4_1136, out s5_295, out s6, out s8_1017)
	branch a0_304 != 0<32> l23063CE0
l23063D44:
	word32 s5_1138
	word32 s1_1137
	word32 s9_1139
	ra_322 = ecp_modp(ra_289, fp + -84<i32>, a2_105, a4_100, a5_108, s2_114, s5_295, s6, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_1137, out a0_309, out a2_105, out a3_312, out a4_100, out a5_108, out s2_114, out s3_1006, out s4_326, out s5_1138, out s6, out s7, out s8_1017, out s9_1139, out s10, out s11, out mstatus)
l23063CC6:
	word32 s0_1085
	word32 s1_1086
	word32 a1_1087
	word32 a6_1088
	word32 a7_1089
	ra_322 = mbedtls_mpi_copy(ra_187, fp + -72<i32>, fp + -84<i32>, a2_105, a3_175, a4_100, a5_108, mstatus, dwLoc48, dwArg88, dwArgC8, dwArg0108, out s0_1085, out s1_1086, out a0_309, out a1_1087, out a2_105, out a3_312, out a4_100, out a5_108, out a6_1088, out a7_1089, out s2_114, out s3_1006, out s4_326, out s8_1017)
l23063CCE:
	branch a0_309 != 0<32> l23063CE0
l23063CD2:
	word32 s5_390
	word32 a0_399
	word32 s1_1091
	word32 a3_1092
	word32 s4_1093
	word32 s0_1090
	word32 ra_384 = mbedtls_mpi_mul_mpi(ra_322, fp + -60<i32>, fp + -72<i32>, fp + -72<i32>, a3_312, a4_100, s2_114, s4_326, s6, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_1090, out s1_1091, out a0_399, out a2_105, out a3_1092, out a4_100, out a5_108, out s2_114, out s3_1006, out s4_1093, out s5_390, out s6, out s8_1017)
	branch a0_399 == 0<32> l23063D4E
l23063D4E:
	word32 a0_407
	word32 a3_410
	word32 s1_414
	word32 s4_424
	word32 s5_1094
	word32 s9_1095
	word32 ra_420 = ecp_modp(ra_384, fp + -60<i32>, a2_105, a4_100, a5_108, s2_114, s5_390, s6, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_414, out a0_407, out a2_105, out a3_410, out a4_100, out a5_108, out s2_114, out s3_1006, out s4_424, out s5_1094, out s6, out s7, out s8_1017, out s9_1095, out s10, out s11, out mstatus)
	branch a0_407 != 0<32> l23063CE0
l23063D5A:
	word32 a1_436 = Mem21[s1_414 + -4<i32>:int32]
	word32 s1_448
	word32 s5_452
	word32 a0_461
	word32 s4_1112
	word32 a3_1111
	word32 s0_1110
	word32 ra_446 = mbedtls_mpi_mul_mpi(ra_420, a1_436, a1_436, fp + -60<i32>, a3_410, a4_100, s2_114, s4_424, s6, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_1110, out s1_448, out a0_461, out a2_105, out a3_1111, out a4_100, out a5_108, out s2_114, out s3_1006, out s4_1112, out s5_452, out s6, out s8_1017)
	branch a0_461 != 0<32> l23063CE0
l23063D6A:
	word32 a0_466
	word32 a3_469
	word32 s1_473
	word32 s4_483
	word32 s9_1114
	word32 s5_1113
	word32 ra_479 = ecp_modp(ra_446, Mem21[s1_448 + -4<i32>:int32], a2_105, a4_100, a5_108, s2_114, s5_452, s6, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_473, out a0_466, out a2_105, out a3_469, out a4_100, out a5_108, out s2_114, out s3_1006, out s4_483, out s5_1113, out s6, out s7, out s8_1017, out s9_1114, out s10, out s11, out mstatus)
	branch a0_466 != 0<32> l23063CE0
l23063D78:
	word32 a1_495 = Mem21[s1_473 + -4<i32>:int32]
	word32 s1_508
	word32 s5_512
	word32 a0_521
	word32 s4_1117
	word32 a3_1116
	word32 s0_1115
	word32 ra_506 = mbedtls_mpi_mul_mpi(ra_479, a1_495 + 0xC<32>, a1_495 + 0xC<32>, fp + -60<i32>, a3_469, a4_100, s2_114, s4_483, s6, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_1115, out s1_508, out a0_521, out a2_105, out a3_1116, out a4_100, out a5_108, out s2_114, out s3_1006, out s4_1117, out s5_512, out s6, out s8_1017)
	branch a0_521 != 0<32> l23063CE0
l23063D8A:
	word32 a0_527
	word32 a3_530
	word32 s1_534
	word32 s4_544
	word32 s9_1119
	word32 s5_1118
	word32 ra_540 = ecp_modp(ra_506, Mem21[s1_508 + -4<i32>:int32] + 0xC<32>, a2_105, a4_100, a5_108, s2_114, s5_512, s6, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_534, out a0_527, out a2_105, out a3_530, out a4_100, out a5_108, out s2_114, out s3_1006, out s4_544, out s5_1118, out s6, out s7, out s8_1017, out s9_1119, out s10, out s11, out mstatus)
	branch a0_527 != 0<32> l23063CE0
l23063D9A:
	word32 a1_556 = Mem21[s1_534 + -4<i32>:int32]
	word32 s1_569
	word32 s5_573
	word32 a0_582
	word32 s4_1122
	word32 a3_1121
	word32 s0_1120
	word32 ra_567 = mbedtls_mpi_mul_mpi(ra_540, a1_556 + 0xC<32>, a1_556 + 0xC<32>, fp + -72<i32>, a3_530, a4_100, s2_114, s4_544, s6, mstatus, s1, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, dwArgD8, dwArgE8, dwArg0138, out s0_1120, out s1_569, out a0_582, out a2_105, out a3_1121, out a4_100, out a5_108, out s2_114, out s3_1006, out s4_1122, out s5_573, out s6, out s8_1017)
	branch a0_582 != 0<32> l23063CE0
l23063DAE:
	word32 a0_588
	word32 a3_591
	word32 s5_606
	word32 s9_1125
	word32 s4_1124
	word32 s1_1123
	word32 ra_601 = ecp_modp(ra_567, Mem21[s1_569 + -4<i32>:int32] + 0xC<32>, a2_105, a4_100, a5_108, s2_114, s5_573, s6, s7, s10, s11, mstatus, dwLoc58, dwLoc50, dwLoc4C, s2, dwLoc28, dwLoc1C, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgC8, dwArgD4, out s1_1123, out a0_588, out a2_105, out a3_591, out a4_100, out a5_108, out s2_114, out s3_1006, out s4_1124, out s5_606, out s6, out s7, out s8_1017, out s9_1125, out s10, out s11, out mstatus)
	branch a0_588 != 0<32> l23063CE0
l23063DC0:
	word32 a0_619
	word32 a3_622
	word32 s1_1126
	word32 ra_626 = mbedtls_mpi_shrink(ra_601, Mem21[s3_1006 + 8<i32>:int32], a3_591, a4_100, mstatus, dwLoc50, dwLoc4C, dwLoc28, dwArgA8, dwArgE8, dwArg0128, out s1_1126, out a0_619, out a2_105, out a3_622, out a4_100, out a5_108, out s2_114, out s3_1006, out s8_1017)
	branch a0_619 != 0<32> l23063CE0
l23063DD2:
	word32 a0_644
	word32 s1_652
	word32 a3_1127
	ra_187 = mbedtls_mpi_shrink(ra_626, Mem21[s3_1006 + 8<i32>:int32], a3_622, a4_100, mstatus, dwLoc50, dwLoc4C, dwLoc28, dwArgA8, dwArgE8, dwArg0128, out s1_652, out a0_644, out a2_105, out a3_1127, out a4_100, out a5_108, out s2_114, out s3_1006, out s8_1017)
	branch a0_644 != 0<32> l23063CE0
l23063DE6:
	word32 a6_1130
	word32 a1_1129
	word32 a0_1128
	mbedtls_mpi_free(Mem21[s1_652 + -4<i32>:int32] + 0x18<32>, a2_105, a4_100, a5_108, mstatus, dwArgE8, dwArg0128, out a0_1128, out a1_1129, out a2_105, out a3_175, out a4_100, out a5_108, out a6_1130, out s4_188)
	branch s5_606 == 0<32> l23063CE0
l23063DF6:
	s5_196 = s5_606 + 0xFFFFFFFF<32>
l23063CE0:
	word32 a2_691
	word32 a5_692
	word32 a4_695
	word32 s4_1066
	word32 a6_1065
	word32 a3_1064
	word32 a1_1063
	word32 a0_1062
	mbedtls_mpi_free(fp + -84<i32>, a2_105, a4_100, a5_108, mstatus, dwArgE8, dwArg0128, out a0_1062, out a1_1063, out a2_691, out a3_1064, out a4_695, out a5_692, out a6_1065, out s4_1066)
	word32 a2_703
	word32 a5_704
	word32 a4_707
	word32 s4_1071
	word32 a6_1070
	word32 a3_1069
	word32 a1_1068
	word32 a0_1067
	mbedtls_mpi_free(fp + -72<i32>, a2_691, a4_695, a5_692, mstatus, dwArgE8, dwArg0128, out a0_1067, out a1_1068, out a2_703, out a3_1069, out a4_707, out a5_704, out a6_1070, out s4_1071)
	word32 s4_722
	word32 a1_1073
	word32 a0_1072
	word32 a3_1074
	word32 a5_1075
	word32 a6_1076
	word32 a4_719
	word32 a2_715
	mbedtls_mpi_free(fp + -60<i32>, a2_703, a4_707, a5_704, mstatus, dwArgE8, dwArg0128, out a0_1072, out a1_1073, out a2_715, out a3_1074, out a4_719, out a5_1075, out a6_1076, out s4_722)
	word32 a5_725 = 0xC<32>
	word32 s1_728 = s4_722
	s2_1005 = s2_114 + 0xC<32> + s4_722
l23063CFC:
	word32 s4_747
	word32 a1_1097
	word32 a3_1098
	word32 a6_1099
	word32 a0_1096
	s1_728 = mbedtls_mpi_free(s1_728, a2_715, a4_719, a5_725, mstatus, dwArgE8, dwArg0128, out a0_1096, out a1_1097, out a2_715, out a3_1098, out a4_719, out a5_725, out a6_1099, out s4_747)
	branch s2_1005 != s1_728 l23063CFC
l23063D08:
	word32 a6_1104
	word32 t3_1105
	word32 a3_1103
	word32 a1_1102
	word32 s1_1100
	word32 a0_1101
	vPortFree(s4_747, a2_715, a5_725, mstatus, dwArgF8, dwArg0138, out s0_53, out s1_1100, out a0_1101, out a1_1102, out a2_35, out a3_1103, out a4_37, out a5_38, out a6_1104, out s4_1010, out t3_1105)
l23063C18:
	word32 s9_1056
	s0_53 = ecp_normalize_jac(ra, a1, a0, Mem21[a1:word32], a2, s5, s6, s7, s10, s11, mstatus, dwLoc5C, dwLoc58, dwLoc48, s2, dwLoc28, dwLoc1C, dwLoc18, dwArg04, dwArg08, dwArg18, dwArg28, dwArg38, s1, dwArg58, dwArg68, dwArg74, dwArg88, dwArg94, dwArg98, dwArgA8, dwArgC4, dwArgD8, dwArgE8, dwArgF8, out a2_35, out a4_37, out a5_38, out s2_1005, out s3_1006, out s4_1010, out s6, out s7, out s8_1017, out s9_1056, out s10, out s11, out mstatus)
l23063C20:
	s1Out = dwArg28
	a0Out = s0_53
	a2Out = a2_35
	a3Out = dwArg08
	a4Out = a4_37
	a5Out = a5_38
	s2Out = s2_1005
	s3Out = s3_1006
	s4Out = s4_1010
	s5Out = s4
	s6Out = s6
	s7Out = s7
	s8Out = s8_1017
	s9Out = dwLoc5C
	s10Out = s10
	s11Out = s11
	mstatusOut = mstatus
	return dwArg68
ecp_normalize_jac_many_exit:


void mbedtls_ecp_point_init.part.2(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ecp_keypair_init
//      mbedtls_ecp_mul
//      mbedtls_ecp_check_pub_priv
// MayUse:  a0:[0..31]
// LiveOut:
// Trashed: a0 a2 a5
// Preserved: s0 sp
mbedtls_ecp_point_init.part.2_entry:
l23063E02:
	mbedtls_mpi_init(a0)
	mbedtls_mpi_init(a0 + 12<i32>)
l23063E20_thunk_mbedtls_mpi_init:
	mbedtls_mpi_init(a0 + 24<i32>)
	return
mbedtls_ecp_point_init.part.2_exit:


word32 mbedtls_ecp_point_free.part.4(word32 a0, word32 a2, word32 a4, word32 a5, word32 mstatus, word32 dwArg10, word32 dwArg0138, word32 dwArg0148, word32 dwArg0178, word32 dwArg0188, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ecp_point_free
//      mbedtls_ecp_mul
//      mbedtls_ecp_check_pub_priv
// MayUse:  a0:[0..31] a2:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] Stack +0010:[0..31] Stack +0138:[0..31] Stack +0148:[0..31] Stack +0178:[0..31] Stack +0188:[0..31]
// LiveOut: a0 a2 a3 a4 a5 s1 s4
// Trashed: a0 a1 a2 a3 a4 a5 a6 s1 s4 t3 tp
// Preserved: s0 sp
mbedtls_ecp_point_free.part.4_entry:
l23063E24:
	word32 a2_15
	word32 a5_16
	word32 a4_19
	word32 a0_65
	word32 a1_66
	word32 a3_67
	word32 a6_68
	word32 s4_69
	mbedtls_mpi_free(a0, a2, a4, a5, mstatus, dwArg0138, dwArg0178, out a0_65, out a1_66, out a2_15, out a3_67, out a4_19, out a5_16, out a6_68, out s4_69)
	word32 a5_28
	word32 a4_31
	word32 a0_70
	word32 a1_71
	word32 a2_72
	word32 a3_73
	word32 a6_74
	word32 s4_75
	mbedtls_mpi_free(a0 + 12<i32>, a2_15, a4_19, a5_16, mstatus, dwArg0138, dwArg0178, out a0_70, out a1_71, out a2_72, out a3_73, out a4_31, out a5_28, out a6_74, out s4_75)
l23063E42_thunk_mbedtls_mpi_free:
	word32 a0_41
	word32 a2_42
	word32 a5_43
	word32 a3_45
	word32 a4_46
	word32 s4_49
	word32 a1_76
	word32 a6_77
	word32 s1_48 = mbedtls_mpi_free(a0 + 24<i32>, dwArg10, a4_31, a5_28, mstatus, dwArg0148, dwArg0188, out a0_41, out a1_76, out a2_42, out a3_45, out a4_46, out a5_43, out a6_77, out s4_49)
	a0Out = a0_41
	a2Out = a2_42
	a3Out = a3_45
	a4Out = a4_46
	a5Out = a5_43
	s4Out = s4_49
	return s1_48
mbedtls_ecp_point_free.part.4_exit:


word32 mbedtls_ecp_grp_id_list(ptr32 & a3Out, ptr32 & a4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_config_defaults
// MayUse: 
// LiveOut: a0 a3 a4
// Trashed: a0 a1 a2 a3 a4 a5 a6
// Preserved: sp
mbedtls_ecp_grp_id_list_entry:
l23063E46:
	word32 a3_21 = Mem0[0x4200E018<32>:int32]
	branch a3_21 == 0<32> l23063E7C
l23063E7C:
	word32 a2_16 = 0<32>
	word32 a5_10 = 0x2308B0A0<32>
l23063E6A:
	word32 a1_14 = CONVERT(Mem13[a5_10:byte], byte, word32)
	branch a1_14 != 0<32> l23063E5E
l23063E5E:
	Mem18[a2_16 + 0x4200E014<32>:byte] = SLICE(a1_14, byte, 0)
	a5_10 = a5_10 + 0xC<32>
	a2_16 = a2_16 + 1<32>
l23063E70:
	a3_21 = a2_16 + 0x4200E014<32>
	Mem23[a3_21:byte] = 0<8>
	Mem25[1<32>:word32] = 0x4200E018<32>
l23063E58:
	a3Out = a3_21
	a4Out = 0x4200E018<32>
	return 0x4200E014<32>
mbedtls_ecp_grp_id_list_exit:


void mbedtls_ecp_point_init(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ecp_keypair_init
// MayUse:  a0:[0..31]
// LiveOut:
// Trashed: a0 a2 a5
// Preserved: sp
mbedtls_ecp_point_init_entry:
l23063E8C:
	branch a0 == 0<32> l23063E92
l23063E92:
	return
l23063E8E:
l23063E8E_thunk_mbedtls_ecp_point_init.part.2:
	mbedtls_ecp_point_init.part.2(a0)
	return
mbedtls_ecp_point_init_exit:


void mbedtls_ecp_group_init(word32 ra, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ecp_keypair_init
// MayUse:  a0:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 ra t0 t1
// Preserved: sp
mbedtls_ecp_group_init_entry:
l23063E94:
	branch a0 == 0<32> l23063EA0
l23063EA0:
	return
l23063E96:
l23063E9C_thunk_memset:
	word32 t1_33
	word32 a0_34
	word32 a1_35
	word32 a2_36
	word32 a3_37
	word32 a4_38
	word32 a5_39
	memset(ra, a0, 0<32>, 124<i32>, out t1_33, out a0_34, out a1_35, out a2_36, out a3_37, out a4_38, out a5_39)
	return
mbedtls_ecp_group_init_exit:


void mbedtls_ecp_keypair_init(word32 ra, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      eckey_alloc_wrap
// MayUse:  a0:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 ra t0 t1
// Preserved: s0 sp
mbedtls_ecp_keypair_init_entry:
l23063EA2:
	branch a0 == 0<32> l23063EC6
l23063EC6:
	return
l23063EA4:
	mbedtls_ecp_group_init(ra, a0)
	mbedtls_mpi_init(a0 + 124<i32>)
l23063EC2_thunk_mbedtls_ecp_point_init:
	mbedtls_ecp_point_init(a0 + 136<i32>)
	return
mbedtls_ecp_keypair_init_exit:


word32 mbedtls_ecp_point_free(word32 a0, word32 a2, word32 a4, word32 a5, word32 mstatus, word32 dwArg10, word32 dwArg0138, word32 dwArg0148, word32 dwArg0178, word32 dwArg0188, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ecp_group_free
//      mbedtls_ecp_keypair_free
//      mbedtls_ecp_mul
// MayUse:  a0:[0..31] a2:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] Stack +0010:[0..31] Stack +0138:[0..31] Stack +0148:[0..31] Stack +0178:[0..31] Stack +0188:[0..31]
// LiveOut: a0 a2 a3 a4 a5 s1 s4
// Trashed: a0 a1 a2 a3 a4 a5 a6 s1 s4 t3 tp
// Preserved: sp
mbedtls_ecp_point_free_entry:
l23063EC8:
	branch a0 == 0<32> l23063ECE
l23063ECE:
	a0Out = a0
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5
	s4Out = s4
	return s1
l23063ECA:
l23063ECA_thunk_mbedtls_ecp_point_free.part.4:
	word32 a0_9
	word32 a2_11
	word32 a3_12
	word32 a4_13
	word32 a5_14
	word32 s4_17
	word32 s1_16 = mbedtls_ecp_point_free.part.4(a0, a2, a4, a5, mstatus, dwArg10, dwArg0138, dwArg0148, dwArg0178, dwArg0188, out a0_9, out a2_11, out a3_12, out a4_13, out a5_14, out s4_17)
	a0Out = a0_9
	a2Out = a2_11
	a3Out = a3_12
	a4Out = a4_13
	a5Out = a5_14
	s4Out = s4_17
	return s1_16
mbedtls_ecp_point_free_exit:


word32 mbedtls_ecp_group_free(word32 a0, word32 a2, word32 a4, word32 mstatus, word32 dwArg00, word32 dwArg38, word32 dwArg0128, word32 dwArg0138, word32 dwArg0148, word32 dwArg0168, word32 dwArg0178, word32 dwArg0188, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ecp_keypair_free
//      mbedtls_ecp_check_pub_priv
//      mbedtls_ecp_group_load
// MayUse:  a0:[0..31] a2:[0..31] a4:[0..31] mstatus:[0..31] Stack +0000:[0..31] Stack +0038:[0..31] Stack +0128:[0..31] Stack +0138:[0..31] Stack +0148:[0..31] Stack +0168:[0..31] Stack +0178:[0..31] Stack +0188:[0..31]
// LiveOut: a1 a2 a3 a4 a5 s1 s2
// Trashed: a0 a1 a2 a3 a4 a5 a6 s1 s2 s4 t3 tp
// Preserved: s0 sp
mbedtls_ecp_group_free_entry:
l23063ED0:
	branch a0 == 0<32> l23063F4C
l23063F4C:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5
	s2Out = s2
	return s1
l23063ED2:
	word32 a0_136 = Mem12[a4 + 96<i32>:word32]
	word32 a5_103 = 1<32>
	branch a4 == 1<32> l23063F0C
l23063EE6:
	word32 a2_21
	word32 a5_22
	word32 a4_25
	word32 a0_234
	word32 a1_235
	word32 a3_236
	word32 a6_237
	word32 s4_238
	mbedtls_mpi_free(a0_136 + 4<32>, a2, a4, 1<32>, mstatus, dwArg0138, dwArg0178, out a0_234, out a1_235, out a2_21, out a3_236, out a4_25, out a5_22, out a6_237, out s4_238)
	word32 a2_33
	word32 a5_34
	word32 a4_37
	word32 a0_239
	word32 a1_240
	word32 a3_241
	word32 a6_242
	word32 s4_243
	mbedtls_mpi_free(a0_136 + 16<i32>, a2_21, a4_25, a5_22, mstatus, dwArg0138, dwArg0178, out a0_239, out a1_240, out a2_33, out a3_241, out a4_37, out a5_34, out a6_242, out s4_243)
	word32 a2_45
	word32 a5_46
	word32 a4_49
	word32 a0_244
	word32 a1_245
	word32 a3_246
	word32 a6_247
	word32 s4_248
	mbedtls_mpi_free(a0_136 + 28<i32>, a2_33, a4_37, a5_34, mstatus, dwArg0138, dwArg0178, out a0_244, out a1_245, out a2_45, out a3_246, out a4_49, out a5_46, out a6_247, out s4_248)
	word32 a2_58
	word32 a4_60
	word32 a5_61
	word32 a0_249
	word32 a3_250
	word32 s4_251
	mbedtls_ecp_point_free(a0_136 + 40<i32>, a2_45, a4_49, a5_46, mstatus, dwArg00, dwArg0128, dwArg0138, dwArg0168, dwArg0178, out a0_249, out a2_58, out a3_250, out a4_60, out a5_61, out s4_251)
	word32 a6_252
	word32 s4_253
	mbedtls_mpi_free(a0_136 + 76<i32>, a2_58, a4_60, a5_61, mstatus, dwArg0138, dwArg0178, out a0_136, out a1, out a2, out a3, out a4, out a5_103, out a6_252, out s4_253)
l23063F0C:
	word32 s0_118 = Mem12[a5_103 + 116<i32>:word32]
	word32 s1_105 = 0<32>
	branch a5_103 != 0<32> l23063F36
l23063F36:
	branch s1_105 <u a5_103 l23063F2A
l23063F2A:
	word32 a5_91 = s1_105 + 36<i32>
	word32 a3_254
	word32 s4_255
	s1_105 = mbedtls_ecp_point_free(a0_136 + a5_91, a2, a4, a5_91, mstatus, dwArg00, dwArg0128, dwArg0138, dwArg0168, dwArg0178, out a0_136, out a2, out a3_254, out a4, out a5_103, out s4_255)
l23063F3E:
	word32 a0_256
	word32 a2_257
	word32 a5_258
	word32 a6_259
	word32 s4_260
	word32 t3_261
	vPortFree(a0_136, a2, a5_103, mstatus, dwArg0148, dwArg0188, out s0_118, out s1_105, out a0_256, out a1, out a2_257, out a3, out a4, out a5_258, out a6_259, out s4_260, out t3_261)
l23063F16:
	word32 a5_122 = s0_118 + 124<i32>
l23063F1A:
	branch s0_118 != a5_122 l23063F44
l23063F44:
	Mem125[s0_118:byte] = 0<8>
	s0_118 = s0_118 + 1<32>
l23063F1E:
	0<32> = dwArg38
	a1Out = a1
	a2Out = dwArg10
	a3Out = a3
	a4Out = a4
	a5Out = a5_122
	s2Out = 36<i32>
	return s1_105
mbedtls_ecp_group_free_exit:


word32 mbedtls_ecp_keypair_free(word32 a0, word32 a2, word32 a4, word32 mstatus, word32 dwArg10, word32 dwArg28, word32 dwArg0118, word32 dwArg0128, word32 dwArg0138, word32 dwArg0148, word32 dwArg0158, word32 dwArg0168, word32 dwArg0178, word32 dwArg0188, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pk_parse_key_sec1_der
//      eckey_free_wrap
// MayUse:  a0:[0..31] a2:[0..31] a4:[0..31] mstatus:[0..31] Stack +0010:[0..31] Stack +0028:[0..31] Stack +0118:[0..31] Stack +0128:[0..31] Stack +0138:[0..31] Stack +0148:[0..31] Stack +0158:[0..31] Stack +0168:[0..31] Stack +0178:[0..31] Stack +0188:[0..31]
// LiveOut: a3 a4 a5 s1 s2
// Trashed: a0 a1 a2 a3 a4 a5 a6 s1 s2 s4 t3 tp
// Preserved: s0 sp
mbedtls_ecp_keypair_free_entry:
l23063F4E:
	branch a0 == 0<32> l23063F72
l23063F72:
	a3Out = a3
	a4Out = a4
	a5Out = a5
	s2Out = s2
	return s1
l23063F50:
	word32 a2_15
	word32 a4_17
	word32 a5_18
	word32 s2_21
	word32 a1_92
	word32 a3_93
	mbedtls_ecp_group_free(a0, a2, a4, mstatus, dwLoc10, dwArg28, dwArg0118, dwArg0128, dwArg0138, dwArg0158, dwArg0168, dwArg0178, out a1_92, out a2_15, out a3_93, out a4_17, out a5_18, out s2_21)
	word32 a5_28
	word32 a4_31
	word32 a0_94
	word32 a1_95
	word32 a2_96
	word32 a3_97
	word32 a6_98
	word32 s4_99
	mbedtls_mpi_free(a0 + 124<i32>, a2_15, a4_17, a5_18, mstatus, dwArg0138, dwArg0178, out a0_94, out a1_95, out a2_96, out a3_97, out a4_31, out a5_28, out a6_98, out s4_99)
l23063F6E_thunk_mbedtls_ecp_point_free:
	word32 a3_44
	word32 a4_45
	word32 a5_46
	word32 a0_100
	word32 a2_101
	word32 s4_102
	word32 s1_48 = mbedtls_ecp_point_free(a0 + 136<i32>, dwArg10, a4_31, a5_28, mstatus, dwArg10, dwArg0138, dwArg0148, dwArg0178, dwArg0188, out a0_100, out a2_101, out a3_44, out a4_45, out a5_46, out s4_102)
	a3Out = a3_44
	a4Out = a4_45
	a5Out = a5_46
	s2Out = s2_21
	return s1_48
mbedtls_ecp_keypair_free_exit:


word32 mbedtls_ecp_copy(word32 ra, word32 a0, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 mstatus, word32 dwArg08, word32 dwArg10, word32 dwArg18, word32 dwArgD8, word32 dwArgE8, word32 dwArg0118, word32 dwArg0128, word32 dwArg0158, word32 dwArg0168, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ecp_add_mixed
//      mbedtls_ecp_mul
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] Stack +0008:[0..31] Stack +0010:[0..31] Stack +0018:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +0118:[0..31] Stack +0128:[0..31] Stack +0158:[0..31] Stack +0168:[0..31]
// LiveOut: a0 a2 a3 a4 a5 a6 ra s1 s2 s3 s4 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_ecp_copy_entry:
l23063F74:
	word32 a2_20
	word32 s0_32
	word32 a1_168
	word32 a7_169
	word32 a0_116
	word32 a3_121
	word32 a4_123
	word32 a5_125
	word32 a6_127
	word32 s1_134
	word32 s2_136
	word32 s3_138
	word32 s4_140
	word32 s8_142
	word32 ra_131 = mbedtls_mpi_copy(ra, a0, a1, a2, a3, a4, a5, mstatus, dwArg08, dwArgD8, dwArg0118, dwArg0158, out s0_32, out s1_134, out a0_116, out a1_168, out a2_20, out a3_121, out a4_123, out a5_125, out a6_127, out a7_169, out s2_136, out s3_138, out s4_140, out s8_142)
	branch a0_116 != 0<32> l23063FA8
l23063F86:
	word32 s0_56
	word32 a1_170
	word32 a2_171
	word32 a7_172
	ra_131 = mbedtls_mpi_copy(ra_131, s0_32 + 12<i32>, s1_134 + 12<i32>, a2_20, a3_121, a4_123, a5_125, mstatus, dwArg08, dwArgD8, dwArg0118, dwArg0158, out s0_56, out s1_134, out a0_116, out a1_170, out a2_171, out a3_121, out a4_123, out a5_125, out a6_127, out a7_172, out s2_136, out s3_138, out s4_140, out s8_142)
	branch a0_116 != 0<32> l23063FA8
l23063FA8:
	s1Out = s1_134
	a0Out = a0_116
	a2Out = dwArg10
	a3Out = a3_121
	a4Out = a4_123
	a5Out = a5_125
	a6Out = a6_127
	s2Out = s2_136
	s3Out = s3_138
	s4Out = s4_140
	s8Out = s8_142
	return ra_131
l23063F94:
l23063FA4_thunk_mbedtls_mpi_copy:
	word32 a0_77
	word32 a2_78
	word32 a6_79
	word32 s3_80
	word32 s4_81
	word32 s8_82
	word32 a3_85
	word32 a4_86
	word32 a5_87
	word32 s1_91
	word32 s2_92
	word32 s0_173
	word32 a1_174
	word32 a7_175
	word32 ra_89 = mbedtls_mpi_copy(ra_131, s0_56 + 24<i32>, s1_134 + 24<i32>, dwArg10, a3_121, a4_123, a5_125, mstatus, dwArg18, dwArgE8, dwArg0128, dwArg0168, out s0_173, out s1_91, out a0_77, out a1_174, out a2_78, out a3_85, out a4_86, out a5_87, out a6_79, out a7_175, out s2_92, out s3_80, out s4_81, out s8_82)
	s1Out = s1_91
	a0Out = a0_77
	a2Out = a2_78
	a3Out = a3_85
	a4Out = a4_86
	a5Out = a5_87
	a6Out = a6_79
	s2Out = s2_92
	s3Out = s3_80
	s4Out = s4_81
	s8Out = s8_82
	return ra_89
mbedtls_ecp_copy_exit:


word32 mbedtls_ecp_group_copy(word32 a0, word32 a2, word32 a4, word32 mstatus, word32 dwArg18, word32 dwArg44, word32 dwArg0108, word32 dwArg0118, word32 dwArg0128, word32 dwArg0148, word32 dwArg0158, word32 dwArg0168, ptr32 & s1Out, ptr32 & s2Out, ptr32 & s4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ecp_check_pub_priv
// MayUse:  a0:[0..31] a2:[0..31] a4:[0..31] mstatus:[0..31] Stack +0018:[0..31] Stack +0044:[0..31] Stack +0108:[0..31] Stack +0118:[0..31] Stack +0128:[0..31] Stack +0148:[0..31] Stack +0158:[0..31] Stack +0168:[0..31]
// LiveOut: s0 s1 s2 s4
// Trashed: a0 a1 a2 a3 a4 a5 a6 s0 s1 s2 s4 s8 t3 tp
// Preserved: sp
mbedtls_ecp_group_copy_entry:
l23063FB2:
l23063FB6_thunk_mbedtls_ecp_group_load:
	word32 s1_18
	word32 s2_19
	word32 s4_20
	word32 a0_35
	word32 a1_36
	word32 a2_37
	word32 a3_38
	word32 a4_39
	word32 a5_40
	word32 s0_17 = mbedtls_ecp_group_load(a0, a2, a4, mstatus, dwArg18, dwArg44, dwArg0108, dwArg0118, dwArg0128, dwArg0148, dwArg0158, dwArg0168, out s1_18, out a0_35, out a1_36, out a2_37, out a3_38, out a4_39, out a5_40, out s2_19, out s4_20)
	s1Out = s1_18
	s2Out = s2_19
	s4Out = s4_20
	return s0_17
mbedtls_ecp_group_copy_exit:


word32 mbedtls_ecp_set_zero(word32 ra, word32 s0, word32 a0, word32 a3, word32 a4, word32 mstatus, word32 dwArg00, word32 dwArg04, word32 dwArg18, word32 dwArg28, word32 dwArg38, word32 dwArgE8, word32 dwArgF8, word32 dwArg0128, word32 dwArg0138, word32 dwArg0168, word32 dwArg0178, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ecp_add_mixed
//      mbedtls_ecp_point_read_binary
// MayUse:  a0:[0..31] a3:[0..31] a4:[0..31] mstatus:[0..31] ra:[0..31] s0:[0..31] Stack +0000:[0..31] Stack +0004:[0..31] Stack +0018:[0..31] Stack +0028:[0..31] Stack +0038:[0..31] Stack +00E8:[0..31] Stack +00F8:[0..31] Stack +0128:[0..31] Stack +0138:[0..31] Stack +0168:[0..31] Stack +0178:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 ra s1 s2 s3 s4 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: s0 sp
mbedtls_ecp_set_zero_entry:
l23063FBA:
	word32 a2_157
	word32 a7_158
	word32 a1_106
	word32 a3_109
	word32 a4_111
	word32 a5_113
	word32 s1_122
	word32 s2_124
	word32 s3_126
	word32 s4_128
	word32 s8_130
	word32 ra_119 = mbedtls_mpi_lset(ra, a3, a4, mstatus, dwLoc10, s0, dwArg18, dwArg28, dwArgE8, dwArg0128, dwArg0168, out s1_122, out a1_106, out a2_157, out a3_109, out a4_111, out a5_113, out a7_158, out s2_124, out s3_126, out s4_128, out s8_130)
	branch a0 != 0<32> l23063FE6
l23063FCA:
	a0 = a0 + 12<i32>
	word32 a2_159
	word32 a7_160
	ra_119 = mbedtls_mpi_lset(ra_119, a3_109, a4_111, mstatus, dwLoc10, s0, dwArg18, dwArg28, dwArgE8, dwArg0128, dwArg0168, out s1_122, out a1_106, out a2_159, out a3_109, out a4_111, out a5_113, out a7_160, out s2_124, out s3_126, out s4_128, out s8_130)
	branch a0 != 0xC<32> l23063FE6
l23063FE6:
	s1Out = s1_122
	a0Out = a0
	a1Out = a1_106
	a2Out = dwArg10
	a3Out = a3_109
	a4Out = a4_111
	a5Out = a5_113
	s2Out = s2_124
	s3Out = s3_126
	s4Out = s4_128
	s8Out = s8_130
	return ra_119
l23063FD6:
l23063FE2_thunk_mbedtls_mpi_lset:
	word32 a1_66
	word32 a2_67
	word32 a3_68
	word32 a4_69
	word32 a5_70
	word32 s1_74
	word32 s2_75
	word32 s3_76
	word32 s4_77
	word32 s8_78
	word32 a7_161
	word32 ra_73 = mbedtls_mpi_lset(ra_119, a3_109, a4_111, mstatus, dwArg00, dwArg04, dwArg28, dwArg38, dwArgF8, dwArg0138, dwArg0178, out s1_74, out a1_66, out a2_67, out a3_68, out a4_69, out a5_70, out a7_161, out s2_75, out s3_76, out s4_77, out s8_78)
	s1Out = s1_74
	a0Out = a0 + 24<i32>
	a1Out = a1_66
	a2Out = a2_67
	a3Out = a3_68
	a4Out = a4_69
	a5Out = a5_70
	s2Out = s2_75
	s3Out = s3_76
	s4Out = s4_77
	s8Out = s8_78
	return ra_73
mbedtls_ecp_set_zero_exit:


word32 ecp_add_mixed(word32 ra, word32 s0, word32 a1, word32 a2, word32 a3, word32 s5, word32 s6, word32 s7, word32 s10, word32 s11, word32 mstatus, word32 dwArg08, word32 dwArg18, word32 dwArg38, word32 dwArg44, word32 dwArg48, word32 dwArg54, word32 dwArg58, word32 dwArg68, word32 dwArg78, word32 dwArg84, word32 dwArg88, word32 dwArg98, word32 dwArgA4, word32 dwArgA8, word32 dwArgB8, word32 dwArgC8, word32 dwArgD8, word32 dwArgE8, word32 dwArgF8, word32 dwArg0108, ptr32 & t1Out, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s9Out, ptr32 & s10Out, ptr32 & s11Out, ptr32 & t4Out, ptr32 & mstatusOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ecp_mul
// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] mstatus:[0..31] ra:[0..31] s0:[0..31] s10:[0..31] s11:[0..31] s5:[0..31] s6:[0..31] s7:[0..31] Stack +0008:[0..31] Stack +0018:[0..31] Stack +0038:[0..31] Stack +0044:[0..31] Stack +0048:[0..31] Stack +0054:[0..31] Stack +0058:[0..31] Stack +0068:[0..31] Stack +0078:[0..31] Stack +0084:[0..31] Stack +0088:[0..31] Stack +0098:[0..31] Stack +00A4:[0..31] Stack +00A8:[0..31] Stack +00B8:[0..31] Stack +00C8:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +00F8:[0..31] Stack +0108:[0..31]
// LiveOut: a0 a2 a3 a4 a5 a6 mstatus ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t1 t4
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 mstatus ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
ecp_add_mixed_entry:
l23063FEE:
	word32 s0_102
	word32 a2_1639
	word32 a5_1640
	word32 a6_1644
	word32 s6_1278 = a2 + 24<i32>
	word32 s1_13 = a0
	word32 s4_15 = a1
	word32 s2_1024 = a2
	word32 a1_41 = a3
	word32 a6_2297
	word32 a1_2296
	word32 a2_35
	word32 a5_38
	word32 a4_126
	word32 a3_128
	branch mbedtls_mpi_cmp_int(0<32>, a2, out a1_2296, out a2_35, out a3_128, out a4_126, out a5_38, out a6_2297) == 0<32> l2306410A
l2306401C:
	branch Mem31[a3 + 32<i32>:int32] != 0<32> l230640FA
l230640FA:
	word32 a6_2301
	word32 a1_2300
	branch mbedtls_mpi_cmp_int(0<32>, a2_35, out a1_2300, out a2_35, out a3_128, out a4_126, out a5_38, out a6_2301) != 0<32> l2306412A
l2306412A:
	branch Mem31[a3 + 32<i32>:int32] == 0<32> l23064024
l23064132:
	word32 a1_2518
	branch mbedtls_mpi_cmp_int(1<32>, a2_35, out a1_2518, out a2_1639, out a3_128, out a4_126, out a5_1640, out a6_1644) == 0<32> l23064024
l2306413E:
	s0_102 = 0xFB000080<32>
l23064108:
	a1_41 = a2
l2306410A:
	word32 a0_80
	word32 a4_2299
	word32 a3_2298
	ra = mbedtls_ecp_copy(ra, a1, a1_41, a2_35, a3_128, a4_126, a5_38, mstatus, dwLoc88, dwLoc80, dwLoc78, dwArg48, dwArg58, dwArg88, dwArg98, dwArgC8, dwArgD8, out s1_13, out a0_80, out a2_1639, out a3_2298, out a4_2299, out a5_1640, out a6_1644, out s2_1024, out s3, out s4_15, out s8)
	s0_102 = a0_80
l23064024:
	mbedtls_mpi_init(fp + -132<i32>)
	mbedtls_mpi_init(fp + -120<i32>)
	mbedtls_mpi_init(fp + -108<i32>)
	mbedtls_mpi_init(fp + -96<i32>)
	mbedtls_mpi_init(fp + -84<i32>)
	mbedtls_mpi_init(fp + -72<i32>)
	mbedtls_mpi_init(fp + -60<i32>)
	word32 s5_143
	word32 a0_152
	word32 s4_2305
	word32 s1_2303
	word32 a3_2304
	word32 s0_2302
	word32 a5_1006
	word32 a4_1005
	word32 a2_1003
	ra = mbedtls_mpi_mul_mpi(ra, fp + -132<i32>, a2 + 24<i32>, a2 + 24<i32>, a3_128, a4_126, a2, a1, a2 + 24<i32>, mstatus, dwArg18, s5, dwArg38, dwArg58, dwArg68, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArg0108, out s0_2302, out s1_2303, out a0_152, out a2_1003, out a3_2304, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_2305, out s5_143, out s6_1278, out s8)
	s0_102 = a0_152
	branch a0_152 != 0<32> l230640CE
l23064060:
	word32 a0_162
	word32 a3_165
	word32 s4_179
	word32 s9_2342
	word32 s1_2340
	word32 s5_2341
	ra = ecp_modp(ra, fp + -132<i32>, a2_1003, a4_1005, a5_1006, s2_1024, s5_143, s6_1278, s7, s10, s11, mstatus, dwLoc88, dwLoc80, dwLoc7C, dwLoc68, s6, s0, dwLoc48, dwLoc38, dwLoc28, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg38, dwArg48, dwArg58, dwArg68, dwArg78, dwArg84, dwArg98, dwArgA4, out s1_2340, out a0_162, out a2_1003, out a3_165, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_179, out s5_2341, out s6_1278, out s7, out s8, out s9_2342, out s10, out s11, out mstatus)
	s0_102 = a0_162
	branch a0_162 != 0<32> l230640CE
l2306406C:
	word32 s5_207
	word32 a0_216
	word32 a3_2345
	word32 s4_2346
	word32 s0_2343
	word32 s1_2344
	ra = mbedtls_mpi_mul_mpi(ra, fp + -120<i32>, fp + -132<i32>, s6_1278, a3_165, a4_1005, s2_1024, s4_179, s6_1278, mstatus, dwArg18, s5, dwArg38, dwArg58, dwArg68, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArg0108, out s0_2343, out s1_2344, out a0_216, out a2_1003, out a3_2345, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_2346, out s5_207, out s6_1278, out s8)
	s0_102 = a0_216
	branch a0_216 != 0<32> l230640CE
l2306407A:
	word32 a0_221
	word32 a3_224
	word32 s4_238
	word32 s5_239
	word32 s9_2348
	word32 s1_2347
	ra = ecp_modp(ra, fp + -120<i32>, a2_1003, a4_1005, a5_1006, s2_1024, s5_207, s6_1278, s7, s10, s11, mstatus, dwLoc88, dwLoc80, dwLoc7C, dwLoc68, s6, s0, dwLoc48, dwLoc38, dwLoc28, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg38, dwArg48, dwArg58, dwArg68, dwArg78, dwArg84, dwArg98, dwArgA4, out s1_2347, out a0_221, out a2_1003, out a3_224, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_238, out s5_239, out s6_1278, out s7, out s8, out s9_2348, out s10, out s11, out mstatus)
	s0_102 = a0_221
	branch a0_221 != 0<32> l230640CE
l23064086:
	word32 s5_266
	word32 a0_275
	word32 s4_2352
	word32 s1_2350
	word32 a3_2351
	word32 s0_2349
	ra = mbedtls_mpi_mul_mpi(ra, fp + -132<i32>, fp + -132<i32>, s5_239, a3_224, a4_1005, s2_1024, s4_238, s6_1278, mstatus, dwArg18, s5, dwArg38, dwArg58, dwArg68, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArg0108, out s0_2349, out s1_2350, out a0_275, out a2_1003, out a3_2351, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_2352, out s5_266, out s6_1278, out s8)
	s0_102 = a0_275
	branch a0_275 != 0<32> l230640CE
l23064094:
	word32 a0_280
	word32 a3_283
	word32 s4_297
	word32 s5_298
	word32 s1_2353
	word32 s9_2354
	ra = ecp_modp(ra, fp + -132<i32>, a2_1003, a4_1005, a5_1006, s2_1024, s5_266, s6_1278, s7, s10, s11, mstatus, dwLoc88, dwLoc80, dwLoc7C, dwLoc68, s6, s0, dwLoc48, dwLoc38, dwLoc28, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg38, dwArg48, dwArg58, dwArg68, dwArg78, dwArg84, dwArg98, dwArgA4, out s1_2353, out a0_280, out a2_1003, out a3_283, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_297, out s5_298, out s6_1278, out s7, out s8, out s9_2354, out s10, out s11, out mstatus)
	s0_102 = a0_280
	branch a0_280 != 0<32> l230640CE
l230640A0:
	word32 s5_325
	word32 a0_334
	word32 s4_2358
	word32 s0_2355
	word32 s1_2356
	word32 a3_2357
	ra = mbedtls_mpi_mul_mpi(ra, fp + -120<i32>, fp + -120<i32>, s5_298 + 12<i32>, a3_283, a4_1005, s2_1024, s4_297, s6_1278, mstatus, dwArg18, s5, dwArg38, dwArg58, dwArg68, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArg0108, out s0_2355, out s1_2356, out a0_334, out a2_1003, out a3_2357, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_2358, out s5_325, out s6_1278, out s8)
	s0_102 = a0_334
	branch a0_334 != 0<32> l230640CE
l230640B0:
	word32 a0_339
	word32 a3_342
	word32 s5_2361
	word32 s9_2362
	word32 s1_2359
	word32 s4_2360
	ra = ecp_modp(ra, fp + -120<i32>, a2_1003, a4_1005, a5_1006, s2_1024, s5_325, s6_1278, s7, s10, s11, mstatus, dwLoc88, dwLoc80, dwLoc7C, dwLoc68, s6, s0, dwLoc48, dwLoc38, dwLoc28, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg38, dwArg48, dwArg58, dwArg68, dwArg78, dwArg84, dwArg98, dwArgA4, out s1_2359, out a0_339, out a2_1003, out a3_342, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_2360, out s5_2361, out s6_1278, out s7, out s8, out s9_2362, out s10, out s11, out mstatus)
	s0_102 = a0_339
	branch a0_339 != 0<32> l230640CE
l230640BC:
	word32 a0_371
	word32 s1_2364
	word32 s4_2365
	word32 s0_2363
	word32 a3_374
	ra = mbedtls_mpi_sub_mpi(ra, a0_339, fp + -132<i32>, a3_342, a4_1005, a5_1006, s2_1024, mstatus, dwArg08, s5, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_2363, out s1_2364, out a0_371, out a2_1003, out a3_374, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_2365, out s8)
	s0_102 = a0_371
	branch a0_371 == 0<32> l2306415E
l2306415E:
	branch a5_1006 < 0<32> l23064146
l23064146:
	word32 a6_2368
	word32 a1_2366
	word32 a2_2367
	branch mbedtls_mpi_cmp_int(0<32>, dwArg54, out a1_2366, out a2_2367, out a3_374, out a4_1005, out a5_1006, out a6_2368) == 0<32> l23064164
l23064150:
	word32 a0_417
	word32 s4_2517
	word32 a7_2516
	word32 a1_2515
	word32 s1_2514
	word32 s0_2513
	ra = mbedtls_mpi_add_mpi(ra, s0_102, fp + -132<i32>, a3_374, a4_1005, a5_1006, s2_1024, mstatus, dwArg08, s5, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_2513, out s1_2514, out a0_417, out a1_2515, out a2_1003, out a3_374, out a4_1005, out a5_1006, out a7_2516, out s2_1024, out s3, out s4_2517, out s8)
	s0_102 = a0_417
	branch a0_417 != 0<32> l230640CE
l23064164:
	s7 = s2_1024 + 12<i32>
	word32 a0_455
	word32 s0_2369
	word32 a3_2370
	word32 s4_468
	word32 s1_465
	ra = mbedtls_mpi_sub_mpi(ra, s0_102, fp + -120<i32>, a3_374, a4_1005, a5_1006, s2_1024, mstatus, dwArg08, s5, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_2369, out s1_465, out a0_455, out a2_1003, out a3_2370, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_468, out s8)
	s0_102 = a0_455
	branch a0_455 != 0<32> l230640CE
l2306417A:
	branch a5_1006 < 0<32> l23064302
l23064302:
	word32 a3_489
	word32 a4_490
	word32 a5_491
	word32 a1_2371
	word32 a6_2372
	branch mbedtls_mpi_cmp_int(0<32>, a2_1003, out a1_2371, out a2_1003, out a3_489, out a4_490, out a5_491, out a6_2372) == 0<32> l23064180
l2306430E:
	word32 a0_502
	word32 a7_2512
	word32 a3_2511
	word32 s0_2509
	word32 a1_2510
	ra = mbedtls_mpi_add_mpi(ra, s0_102, fp + -120<i32>, a3_489, a4_490, a5_491, s2_1024, mstatus, dwArg08, s5, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_2509, out s1_465, out a0_502, out a1_2510, out a2_1003, out a3_2511, out a4_1005, out a5_1006, out a7_2512, out s2_1024, out s3, out s4_468, out s8)
	s0_102 = a0_502
	branch a0_502 == 0<32> l2306417A
l2306431E:
l23064180:
	word32 a0_1524
	word32 a2_531
	word32 a3_532
	word32 a4_533
	word32 a1_2373
	word32 a5_2374
	word32 a6_2375
	branch mbedtls_mpi_cmp_int(0<32>, a2_1003, out a1_2373, out a2_531, out a3_532, out a4_533, out a5_2374, out a6_2375) == 0<32> l23064320
l23064320:
	word32 a3_542
	word32 a4_543
	word32 a2_2377
	word32 a5_2378
	word32 a6_2379
	word32 a1_2376
	branch mbedtls_mpi_cmp_int(0<32>, a2_531, out a1_2376, out a2_2377, out a3_542, out a4_543, out a5_2378, out a6_2379) != 0<32> l23064338
l23064338:
	word32 s1_2499
	word32 a1_2500
	word32 a3_2501
	word32 s4_2502
	ra = mbedtls_ecp_set_zero(ra, s0_102, s4_468, a3_542, a4_543, mstatus, dwLoc90, dwLoc8C, dwLoc78, dwLoc68, s6, dwArg58, dwArg68, dwArg98, dwArgA8, dwArgD8, dwArgE8, out s1_2499, out a0_1524, out a1_2500, out a2_1003, out a3_2501, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_2502, out s8)
l2306432A:
	word32 a6_2505
	word32 s4_2506
	word32 s5_2507
	word32 s9_2508
	word32 s1_2503
	word32 a3_2504
	ra = ecp_double_jac(ra, s1_465, s1_465, s2_1024, a3_542, a4_543, s2_1024, s6_1278, s7, s10, s11, mstatus, dwLoc88, dwLoc78, dwLoc68, s6, dwLoc38, dwLoc28, dwLoc18, dwLoc0C, dwLoc08, dwArg08, dwArg18, s7, s5, dwArg38, dwArg44, dwArg48, dwArg58, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, out s1_2503, out a0_1524, out a2_1003, out a3_2504, out a4_1005, out a5_1006, out a6_2505, out s2_1024, out s3, out s4_2506, out s5_2507, out s6_1278, out s7, out s8, out s9_2508, out s10, out s11, out mstatus)
l2306418C:
	word32 s5_640
	word32 a0_649
	word32 s0_2380
	word32 s1_2381
	word32 a3_2382
	word32 s4_2383
	ra = mbedtls_mpi_mul_mpi(ra, fp + -60<i32>, s6_1278, fp + -132<i32>, a3_532, a4_533, s2_1024, s4_468, s6_1278, mstatus, dwArg18, s5, dwArg38, dwArg58, dwArg68, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArg0108, out s0_2380, out s1_2381, out a0_649, out a2_1003, out a3_2382, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_2383, out s5_640, out s6_1278, out s8)
	s0_102 = a0_649
	branch a0_649 != 0<32> l230640CE
l2306419C:
	word32 a0_654
	word32 a3_657
	word32 s4_671
	word32 s9_2386
	word32 s1_2384
	word32 s5_2385
	ra = ecp_modp(ra, fp + -60<i32>, a2_1003, a4_1005, a5_1006, s2_1024, s5_640, s6_1278, s7, s10, s11, mstatus, dwLoc88, dwLoc80, dwLoc7C, dwLoc68, s6, s0, dwLoc48, dwLoc38, dwLoc28, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg38, dwArg48, dwArg58, dwArg68, dwArg78, dwArg84, dwArg98, dwArgA4, out s1_2384, out a0_654, out a2_1003, out a3_657, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_671, out s5_2385, out s6_1278, out s7, out s8, out s9_2386, out s10, out s11, out mstatus)
	s0_102 = a0_654
	branch a0_654 != 0<32> l230640CE
l230641AA:
	word32 s5_699
	word32 a0_708
	word32 s4_2390
	word32 s1_2388
	word32 a3_2389
	word32 s0_2387
	ra = mbedtls_mpi_mul_mpi(ra, fp + -108<i32>, fp + -132<i32>, fp + -132<i32>, a3_657, a4_1005, s2_1024, s4_671, s6_1278, mstatus, dwArg18, s5, dwArg38, dwArg58, dwArg68, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArg0108, out s0_2387, out s1_2388, out a0_708, out a2_1003, out a3_2389, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_2390, out s5_699, out s6_1278, out s8)
	s0_102 = a0_708
	branch a0_708 != 0<32> l230640CE
l230641BA:
	word32 a0_713
	word32 a3_716
	word32 s4_730
	word32 s1_2391
	word32 s5_2392
	word32 s9_2393
	ra = ecp_modp(ra, fp + -108<i32>, a2_1003, a4_1005, a5_1006, s2_1024, s5_699, s6_1278, s7, s10, s11, mstatus, dwLoc88, dwLoc80, dwLoc7C, dwLoc68, s6, s0, dwLoc48, dwLoc38, dwLoc28, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg38, dwArg48, dwArg58, dwArg68, dwArg78, dwArg84, dwArg98, dwArgA4, out s1_2391, out a0_713, out a2_1003, out a3_716, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_730, out s5_2392, out s6_1278, out s7, out s8, out s9_2393, out s10, out s11, out mstatus)
	s0_102 = a0_713
	branch a0_713 != 0<32> l230640CE
l230641C8:
	word32 s5_758
	word32 a0_767
	word32 s4_2397
	word32 s0_2394
	word32 s1_2395
	word32 a3_2396
	ra = mbedtls_mpi_mul_mpi(ra, fp + -96<i32>, fp + -108<i32>, fp + -132<i32>, a3_716, a4_1005, s2_1024, s4_730, s6_1278, mstatus, dwArg18, s5, dwArg38, dwArg58, dwArg68, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArg0108, out s0_2394, out s1_2395, out a0_767, out a2_1003, out a3_2396, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_2397, out s5_758, out s6_1278, out s8)
	s0_102 = a0_767
	branch a0_767 != 0<32> l230640CE
l230641D8:
	word32 a0_772
	word32 a3_775
	word32 s4_789
	word32 s1_2398
	word32 s5_2399
	word32 s9_2400
	ra = ecp_modp(ra, fp + -96<i32>, a2_1003, a4_1005, a5_1006, s2_1024, s5_758, s6_1278, s7, s10, s11, mstatus, dwLoc88, dwLoc80, dwLoc7C, dwLoc68, s6, s0, dwLoc48, dwLoc38, dwLoc28, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg38, dwArg48, dwArg58, dwArg68, dwArg78, dwArg84, dwArg98, dwArgA4, out s1_2398, out a0_772, out a2_1003, out a3_775, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_789, out s5_2399, out s6_1278, out s7, out s8, out s9_2400, out s10, out s11, out mstatus)
	s0_102 = a0_772
	branch a0_772 != 0<32> l230640CE
l230641E6:
	word32 s5_817
	word32 a0_826
	word32 a3_2403
	word32 s4_2404
	word32 s0_2401
	word32 s1_2402
	ra = mbedtls_mpi_mul_mpi(ra, fp + -108<i32>, fp + -108<i32>, s2_1024, a3_775, a4_1005, s2_1024, s4_789, s6_1278, mstatus, dwArg18, s5, dwArg38, dwArg58, dwArg68, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArg0108, out s0_2401, out s1_2402, out a0_826, out a2_1003, out a3_2403, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_2404, out s5_817, out s6_1278, out s8)
	s0_102 = a0_826
	branch a0_826 != 0<32> l230640CE
l230641F6:
	word32 a0_831
	word32 a3_834
	word32 s4_848
	word32 s1_2405
	word32 s5_2406
	word32 s9_2407
	ra = ecp_modp(ra, fp + -108<i32>, a2_1003, a4_1005, a5_1006, s2_1024, s5_817, s6_1278, s7, s10, s11, mstatus, dwLoc88, dwLoc80, dwLoc7C, dwLoc68, s6, s0, dwLoc48, dwLoc38, dwLoc28, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg38, dwArg48, dwArg58, dwArg68, dwArg78, dwArg84, dwArg98, dwArgA4, out s1_2405, out a0_831, out a2_1003, out a3_834, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_848, out s5_2406, out s6_1278, out s7, out s8, out s9_2407, out s10, out s11, out mstatus)
	s0_102 = a0_831
	branch a0_831 != 0<32> l230640CE
l23064204:
	word32 a0_863
	word32 s1_873
	word32 a3_2409
	word32 s5_2410
	word32 s0_2408
	word32 s4_876
	ra = mbedtls_mpi_mul_int(ra, fp + -132<i32>, fp + -108<i32>, a3_834, a4_1005, s2_1024, s4_848, s6_1278, mstatus, dwLoc08, dwArg08, dwArg18, dwArg38, dwArg48, dwArg58, dwArg78, dwArg88, dwArg98, dwArgE8, out s0_2408, out s1_873, out a0_863, out a2_1003, out a3_2409, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_876, out s5_2410, out s6_1278, out s8)
	s0_102 = a0_863
	branch a0_863 != 0<32> l230640CE
l23064218:
	word32 a3_899
	word32 a4_900
	word32 a5_901
	word32 a1_2411
	word32 a2_2412
	word32 a6_2413
	branch mbedtls_mpi_cmp_mpi(a2_1003, a4_1005, a5_1006, out a1_2411, out a2_2412, out a3_899, out a4_900, out a5_901, out a6_2413) >= 0<32> l23064340
l23064340:
	word32 a0_909
	word32 s1_2415
	word32 a1_2416
	word32 a3_2417
	word32 a7_2418
	word32 s0_2414
	ra = mbedtls_mpi_sub_abs(ra, fp + -132<i32>, fp + -132<i32>, s1_873 + 4<i32>, a3_899, a4_900, a5_901, mstatus, s5, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgC8, out s0_2414, out s1_2415, out a0_909, out a1_2416, out a2_1003, out a3_2417, out a4_1005, out a5_1006, out a7_2418, out s2_1024, out s3, out s4_876, out s8)
	s0_102 = a0_909
	branch a0_909 == 0<32> l23064218
l23064350:
l23064224:
	word32 s5_952
	word32 a0_961
	word32 a3_2421
	word32 s4_2422
	word32 s0_2419
	word32 s1_2420
	ra = mbedtls_mpi_mul_mpi(ra, s3, fp + -120<i32>, fp + -120<i32>, a3_899, a4_900, s2_1024, s4_876, s6_1278, mstatus, dwArg18, s5, dwArg38, dwArg58, dwArg68, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArg0108, out s0_2419, out s1_2420, out a0_961, out a2_1003, out a3_2421, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_2422, out s5_952, out s6_1278, out s8)
	s0_102 = a0_961
	branch a0_961 != 0<32> l230640CE
l23064234:
	word32 a0_969
	word32 a3_972
	word32 s1_2423
	word32 s4_2424
	word32 s5_2425
	word32 s9_2426
	ra = ecp_modp(ra, s3, a2_1003, a4_1005, a5_1006, s2_1024, s5_952, s6_1278, s7, s10, s11, mstatus, dwLoc88, dwLoc80, dwLoc7C, dwLoc68, s6, s0, dwLoc48, dwLoc38, dwLoc28, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg38, dwArg48, dwArg58, dwArg68, dwArg78, dwArg84, dwArg98, dwArgA4, out s1_2423, out a0_969, out a2_1003, out a3_972, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_2424, out s5_2425, out s6_1278, out s7, out s8, out s9_2426, out s10, out s11, out mstatus)
	s0_102 = a0_969
	branch a0_969 != 0<32> l230640CE
l23064242:
	word32 a0_1001
	word32 s2_2429
	word32 s4_2430
	word32 s1_2428
	word32 s0_2427
	word32 a3_1004
	ra = mbedtls_mpi_sub_mpi(ra, a0_969, s3, a3_972, a4_1005, a5_1006, s2_1024, mstatus, dwArg08, s5, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_2427, out s1_2428, out a0_1001, out a2_1003, out a3_1004, out a4_1005, out a5_1006, out s2_2429, out s3, out s4_2430, out s8)
	s0_102 = a0_1001
	s2_1024 = s3
	branch a0_1001 != 0<32> l230640CE
l23064254:
	branch a5_1006 < 0<32> l23064352
l23064352:
	word32 a1_2431
	word32 a2_2432
	word32 a6_2433
	branch mbedtls_mpi_cmp_int(0<32>, a2_1003, out a1_2431, out a2_2432, out a3_1004, out a4_1005, out a5_1006, out a6_2433) == 0<32> l2306425A
l2306435E:
	word32 a0_1048
	word32 s0_2494
	word32 s1_2495
	word32 a1_2496
	word32 a7_2497
	word32 s4_2498
	ra = mbedtls_mpi_add_mpi(ra, s0_102, s2_1024, a3_1004, a4_1005, a5_1006, s2_1024, mstatus, dwArg08, s5, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_2494, out s1_2495, out a0_1048, out a1_2496, out a2_1003, out a3_1004, out a4_1005, out a5_1006, out a7_2497, out s2_1024, out s3, out s4_2498, out s8)
	s0_102 = a0_1048
	branch a0_1048 == 0<32> l23064254
l2306436E:
l2306425A:
	word32 s1_2435
	word32 s4_2436
	word32 s0_2434
	word32 a0_1085
	word32 a3_1088
	ra = mbedtls_mpi_sub_mpi(ra, s0_102, s2_1024, a3_1004, a4_1005, a5_1006, s2_1024, mstatus, dwArg08, s5, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_2434, out s1_2435, out a0_1085, out a2_1003, out a3_1088, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_2436, out s8)
l23064264:
	s0_102 = a0_1085
	branch a0_1085 != 0<32> l230640CE
l2306426A:
	branch a5_1006 < 0<32> l23064370
l23064370:
	word32 a1_2437
	word32 a2_2438
	word32 a6_2439
	branch mbedtls_mpi_cmp_int(0<32>, a2_1003, out a1_2437, out a2_2438, out a3_1088, out a4_1005, out a5_1006, out a6_2439) == 0<32> l23064270
l2306437C:
	word32 s4_2493
	word32 s0_2489
	word32 s1_2490
	word32 a1_2491
	word32 a7_2492
	ra = mbedtls_mpi_add_mpi(ra, a0_1085, s2_1024, a3_1088, a4_1005, a5_1006, s2_1024, mstatus, dwArg08, s5, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_2489, out s1_2490, out a0_1085, out a1_2491, out a2_1003, out a3_1088, out a4_1005, out a5_1006, out a7_2492, out s2_1024, out s3, out s4_2493, out s8)
l23064270:
	word32 s1_2441
	word32 s0_2440
	word32 a0_1167
	word32 s4_1180
	word32 a3_1170
	ra = mbedtls_mpi_sub_mpi(ra, a0_1085, fp + -108<i32>, a3_1088, a4_1005, a5_1006, s2_1024, mstatus, dwArg08, s5, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_2440, out s1_2441, out a0_1167, out a2_1003, out a3_1170, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_1180, out s8)
l2306427A:
	s0_102 = a0_1167
	branch a0_1167 != 0<32> l230640CE
l23064280:
	branch a5_1006 < 0<32> l23064388
l23064388:
	word32 a5_1203
	word32 a1_2442
	word32 a2_2443
	word32 a6_2444
	branch mbedtls_mpi_cmp_int(0<32>, a2_1003, out a1_2442, out a2_2443, out a3_1170, out a4_1005, out a5_1203, out a6_2444) == 0<32> l23064286
l23064394:
	word32 a1_2487
	word32 a7_2488
	word32 s1_2486
	word32 s0_2485
	ra = mbedtls_mpi_add_mpi(ra, a0_1167, fp + -108<i32>, a3_1170, a4_1005, a5_1203, s2_1024, mstatus, dwArg08, s5, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_2485, out s1_2486, out a0_1167, out a1_2487, out a2_1003, out a3_1170, out a4_1005, out a5_1006, out a7_2488, out s2_1024, out s3, out s4_1180, out s8)
l23064286:
	word32 s5_1268
	word32 a0_1277
	word32 a3_2447
	word32 s4_2448
	word32 s0_2445
	word32 s1_2446
	ra = mbedtls_mpi_mul_mpi(ra, fp + -108<i32>, fp + -108<i32>, fp + -120<i32>, a3_1170, a4_1005, s2_1024, s4_1180, s6_1278, mstatus, dwArg18, s5, dwArg38, dwArg58, dwArg68, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArg0108, out s0_2445, out s1_2446, out a0_1277, out a2_1003, out a3_2447, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_2448, out s5_1268, out s6_1278, out s8)
	s0_102 = a0_1277
	branch a0_1277 != 0<32> l230640CE
l23064296:
	word32 a0_1300
	word32 a3_1303
	word32 s4_1317
	word32 s1_2449
	word32 s5_2450
	word32 s9_2451
	ra = ecp_modp(ra, fp + -108<i32>, a2_1003, a4_1005, a5_1006, s2_1024, s5_1268, s6_1278, s7, s10, s11, mstatus, dwLoc88, dwLoc80, dwLoc7C, dwLoc68, s6, s0, dwLoc48, dwLoc38, dwLoc28, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg38, dwArg48, dwArg58, dwArg68, dwArg78, dwArg84, dwArg98, dwArgA4, out s1_2449, out a0_1300, out a2_1003, out a3_1303, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_1317, out s5_2450, out s6_1278, out s7, out s8, out s9_2451, out s10, out s11, out mstatus)
	s0_102 = a0_1300
	branch a0_1300 != 0<32> l230640CE
l230642A4:
	word32 s5_1345
	word32 a0_1354
	word32 s1_2453
	word32 a3_2454
	word32 s4_2455
	word32 s0_2452
	ra = mbedtls_mpi_mul_mpi(ra, fp + -96<i32>, fp + -96<i32>, s7, a3_1303, a4_1005, s2_1024, s4_1317, s6_1278, mstatus, dwArg18, s5, dwArg38, dwArg58, dwArg68, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArg0108, out s0_2452, out s1_2453, out a0_1354, out a2_1003, out a3_2454, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_2455, out s5_1345, out s6_1278, out s8)
	s0_102 = a0_1354
	branch a0_1354 != 0<32> l230640CE
l230642B4:
	word32 a0_1359
	word32 a3_1362
	word32 s9_2459
	word32 s1_2456
	word32 s4_2457
	word32 s5_2458
	ra = ecp_modp(ra, fp + -96<i32>, a2_1003, a4_1005, a5_1006, s2_1024, s5_1345, s6_1278, s7, s10, s11, mstatus, dwLoc88, dwLoc80, dwLoc7C, dwLoc68, s6, s0, dwLoc48, dwLoc38, dwLoc28, dwLoc18, dwLoc08, dwArg08, dwArg18, dwArg38, dwArg48, dwArg58, dwArg68, dwArg78, dwArg84, dwArg98, dwArgA4, out s1_2456, out a0_1359, out a2_1003, out a3_1362, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_2457, out s5_2458, out s6_1278, out s7, out s8, out s9_2459, out s10, out s11, out mstatus)
	s0_102 = a0_1359
	branch a0_1359 != 0<32> l230640CE
l230642C2:
	word32 s0_2460
	word32 s1_2461
	word32 a0_1391
	word32 s4_1404
	word32 a3_1394
	ra = mbedtls_mpi_sub_mpi(ra, a0_1359, fp + -72<i32>, a3_1362, a4_1005, a5_1006, s2_1024, mstatus, dwArg08, s5, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_2460, out s1_2461, out a0_1391, out a2_1003, out a3_1394, out a4_1005, out a5_1006, out s2_1024, out s3, out s4_1404, out s8)
l230642CC:
	s0_102 = a0_1391
	branch a0_1391 != 0<32> l230640CE
l230642D2:
	branch a5_1006 < 0<32> l230643A0
l230643A0:
	word32 a1_2462
	word32 a6_2463
	branch mbedtls_mpi_cmp_int(0<32>, a2_1003, out a1_2462, out a2_1003, out a3_1394, out a4_1005, out a5_1006, out a6_2463) == 0<32> l230642D8
l230643AC:
	word32 s0_2481
	word32 s1_2482
	word32 a1_2483
	word32 a7_2484
	ra = mbedtls_mpi_add_mpi(ra, a0_1391, fp + -72<i32>, a3_1394, a4_1005, a5_1006, s2_1024, mstatus, dwArg08, s5, dwArg48, dwArg68, dwArg78, dwArg88, dwArgA8, out s0_2481, out s1_2482, out a0_1391, out a1_2483, out a2_1003, out a3_1394, out a4_1005, out a5_1006, out a7_2484, out s2_1024, out s3, out s4_1404, out s8)
l230642D8:
	word32 a0_1474
	word32 s4_1478
	word32 a3_1482
	word32 s1_2465
	word32 a1_2466
	word32 a6_2467
	word32 a7_2468
	word32 s0_2464
	ra = mbedtls_mpi_copy(ra, s4_1404, s2_1024, a2_1003, a3_1394, a4_1005, a5_1006, mstatus, dwLoc78, dwArg58, dwArg98, dwArgD8, out s0_2464, out s1_2465, out a0_1474, out a1_2466, out a2_1003, out a3_1482, out a4_1005, out a5_1006, out a6_2467, out a7_2468, out s2_1024, out s3, out s4_1478, out s8)
	s0_102 = a0_1474
	branch a0_1474 != 0<32> l230640CE
l230642E6:
	word32 a0_1499
	word32 s4_1503
	word32 a3_1507
	word32 a1_2471
	word32 a6_2472
	word32 a7_2473
	word32 s0_2469
	word32 s1_2470
	ra = mbedtls_mpi_copy(ra, s4_1478 + 12<i32>, fp + -72<i32>, a2_1003, a3_1482, a4_1005, a5_1006, mstatus, dwLoc78, dwArg58, dwArg98, dwArgD8, out s0_2469, out s1_2470, out a0_1499, out a1_2471, out a2_1003, out a3_1507, out a4_1005, out a5_1006, out a6_2472, out a7_2473, out s2_1024, out s3, out s4_1503, out s8)
	s0_102 = a0_1499
	branch a0_1499 != 0<32> l230640CE
l230642F6:
	word32 s4_2480
	word32 a7_2479
	word32 a6_2478
	word32 a3_2477
	word32 s0_2474
	word32 s1_2475
	word32 a1_2476
	ra = mbedtls_mpi_copy(ra, s4_1503 + 24<i32>, fp + -60<i32>, a2_1003, a3_1507, a4_1005, a5_1006, mstatus, dwLoc78, dwArg58, dwArg98, dwArgD8, out s0_2474, out s1_2475, out a0_1524, out a1_2476, out a2_1003, out a3_2477, out a4_1005, out a5_1006, out a6_2478, out a7_2479, out s2_1024, out s3, out s4_2480, out s8)
l23064334:
	s0_102 = a0_1524
l230640CE:
	word32 a2_1562
	word32 a5_1563
	word32 a4_1566
	word32 a0_2306
	word32 a1_2307
	word32 a3_2308
	word32 a6_2309
	word32 s4_2310
	mbedtls_mpi_free(fp + -132<i32>, a2_1003, a4_1005, a5_1006, mstatus, dwArgB8, dwArgF8, out a0_2306, out a1_2307, out a2_1562, out a3_2308, out a4_1566, out a5_1563, out a6_2309, out s4_2310)
	word32 a2_1574
	word32 a5_1575
	word32 a4_1578
	word32 a6_2314
	word32 s4_2315
	word32 a1_2312
	word32 a3_2313
	word32 a0_2311
	mbedtls_mpi_free(fp + -120<i32>, a2_1562, a4_1566, a5_1563, mstatus, dwArgB8, dwArgF8, out a0_2311, out a1_2312, out a2_1574, out a3_2313, out a4_1578, out a5_1575, out a6_2314, out s4_2315)
	word32 a2_1586
	word32 a5_1587
	word32 a4_1590
	word32 a1_2317
	word32 a6_2319
	word32 s4_2320
	word32 a3_2318
	word32 a0_2316
	mbedtls_mpi_free(fp + -108<i32>, a2_1574, a4_1578, a5_1575, mstatus, dwArgB8, dwArgF8, out a0_2316, out a1_2317, out a2_1586, out a3_2318, out a4_1590, out a5_1587, out a6_2319, out s4_2320)
	word32 a2_1598
	word32 a5_1599
	word32 a4_1602
	word32 a3_2323
	word32 a6_2324
	word32 s4_2325
	word32 a0_2321
	word32 a1_2322
	mbedtls_mpi_free(fp + -96<i32>, a2_1586, a4_1590, a5_1587, mstatus, dwArgB8, dwArgF8, out a0_2321, out a1_2322, out a2_1598, out a3_2323, out a4_1602, out a5_1599, out a6_2324, out s4_2325)
	word32 a2_1615
	word32 a5_1616
	word32 a4_1619
	word32 s4_2330
	word32 a6_2329
	word32 a0_2326
	word32 a1_2327
	word32 a3_2328
	mbedtls_mpi_free(s3, a2_1598, a4_1602, a5_1599, mstatus, dwArgB8, dwArgF8, out a0_2326, out a1_2327, out a2_1615, out a3_2328, out a4_1619, out a5_1616, out a6_2329, out s4_2330)
	word32 a2_1627
	word32 a5_1628
	word32 a4_1631
	word32 a1_2332
	word32 a6_2334
	word32 s4_2335
	word32 a3_2333
	word32 a0_2331
	mbedtls_mpi_free(fp + -72<i32>, a2_1615, a4_1619, a5_1616, mstatus, dwArgB8, dwArgF8, out a0_2331, out a1_2332, out a2_1627, out a3_2333, out a4_1631, out a5_1628, out a6_2334, out s4_2335)
	word32 a0_2336
	word32 a1_2337
	word32 a3_2338
	word32 a4_2339
	s1_13 = mbedtls_mpi_free(fp + -60<i32>, a2_1627, a4_1631, a5_1628, mstatus, dwArgB8, dwArgF8, out a0_2336, out a1_2337, out a2_1639, out a3_2338, out a4_2339, out a5_1640, out a6_1644, out s4_15)
l23064112:
	word32 t4_1655 = Mem31[dwLoc48 + 376<i32>:word32]
	word32 s9_1656 = Mem31[dwLoc48 + 408<i32>:word32]
	word32 s5_1657 = Mem31[dwLoc48 + 440<i32>:word32]
	word32 a3_1659 = Mem31[dwLoc48 + 504<i32>:word32]
	t1Out = dwLoc6C
	s0Out = s0_102
	s1Out = s1_13
	a0Out = dwLoc8C
	a2Out = a2_1639
	a3Out = a3_1659
	a4Out = dwLoc70
	a5Out = a5_1640
	a6Out = a6_1644
	s2Out = s2_1024
	s3Out = s3
	s4Out = s4_15
	s5Out = s5_1657
	s6Out = s6_1278
	s7Out = s7
	s8Out = s8
	s9Out = s9_1656
	s10Out = s10
	s11Out = s11
	t4Out = t4_1655
	mstatusOut = mstatus
	return ra
ecp_add_mixed_exit:


word32 ecp_mul_comb(word32 ra, word32 a0, word32 a2, word32 a4, word32 a5, word32 s3, word32 s11, word32 mstatus, word32 dwArg00, word32 dwArg04, ptr32 & a2Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & mstatusOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ecp_mul
// MayUse:  a0:[0..31] a2:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] s11:[0..31] s3:[0..31] Stack +0000:[0..31] Stack +0004:[0..31]
// LiveOut: a0 a2 a4 a5 mstatus
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 mstatus t0 t1 t3 t4 t5 t6 tp
// Preserved: ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 sp
ecp_mul_comb_entry:
l230643B8:
	word32 s0_1150
	mbedtls_mpi_init(fp + -412<i32>)
	mbedtls_mpi_init(fp + -400<i32>)
	word32 dwLoc014C_1537 = a4
	word32 s10_231 = a2
	word32 dwLoc01C8_1550 = a0 + 76<i32>
	word32 a5_1435 = 1<32>
	word32 a5_2791
	word32 a4_1438
	branch mbedtls_mpi_get_bit(0<32>, a0 + 76<i32>, out a4_1438, out a5_2791) != 1<32> l23064878
l23064878:
	s0_1150 = 0xFB000080<32>
l2306441A:
	word32 s4_60 = CONVERT(Mem49[a0 + 92<i32>:int32] >u 383<i32>, bool, word32)
	word32 a6_2793
	word32 a1_2792
	word32 a4_117
	word32 a3_120
	word32 a5_110
	word32 a2_1192
	word32 a0_61 = mbedtls_mpi_cmp_mpi(a2, a4_1438, 383<i32>, out a1_2792, out a2_1192, out a3_120, out a4_117, out a5_110, out a6_2793)
	word32 s4_68 = s4_60 + 4<32>
	word32 s7_1018 = a0_61
	branch a0_61 != 0<32> l230644C8
l230644C8:
	s7_1018 = 0<32>
l23064438:
	word32 a1_2794
	word32 a6_2795
	branch mbedtls_mpi_cmp_mpi(a2_1192, a4_117, a5_110, out a1_2794, out a2_1192, out a3_120, out a4_117, out a5_110, out a6_2795) != 0<32> l23064448
l23064444:
	s4_68 = s4_60 + 5<32>
	s7_1018 = 1<32>
l23064448:
	word32 s5_84 = Mem49[a0 + 92<i32>:int32]
	branch s4_68 <u s5_84 l23064452
l23064450:
	s4_68 = 2<32>
l23064452:
	word32 s3_1014
	word32 s2_1006
	word32 a4_1194
	word32 s6_228 = 1<32> << s4_68 + -1<i32>
	word32 s9_1020 = s6_228 & 255<i32>
	word32 s5_214 = s5_84 + 0xFFFFFFFF<32> + s4_68 >>u s4_68
	branch s7_1018 == 0<32> l23064474
l2306446C:
	branch Mem49[a0 + 116<i32>:int32] != 0<32> l23064618
l23064474:
	word32 a3_127
	word32 s0_132
	word32 s1_2796
	word32 a1_2797
	word32 s3_2798
	word32 s4_2799
	word32 s8_2800
	word32 ra_131 = mycalloc(ra, a0, s6_228, 36<i32>, a3_120, a4_117, a5_110, mstatus, dwLoc01B0, dwLoc01AC, dwLocB8, dwLoc78, out s0_132, out s1_2796, out a1_2797, out a2_1192, out a3_127, out a4_1194, out a5_110, out s2_1006, out s3_2798, out s4_2799, out s8_2800)
	branch s6_228 == 0<32> l23064870
l23064870:
	s0_1150 = 0xFB000280<32>
l23064484:
	word32 a0_146
	word32 a6_2801
	word32 s8_1492
	word32 s1_155
	word32 s4_158
	word32 a3_149
	word32 ra_154 = mbedtls_ecp_copy(ra_131, s6_228, s0_132, a2_1192, a3_127, a4_1194, a5_110, mstatus, a0 + 76<i32>, dwLoc01C0, dwLoc01B8, dwLocF8, dwLocE8, dwLocB8, dwLocA8, dwLoc78, dwLoc68, out s1_155, out a0_146, out a2_1192, out a3_149, out a4_1194, out a5_110, out a6_2801, out s2_1006, out s3_1014, out s4_158, out s8_1492)
	s0_1150 = a0_146
	branch a0_146 != 0<32> l230644F6
l2306448E:
	word32 s11_169 = 0<32>
	word32 a4_170 = 1<32>
l23064492:
	word32 a6_173 = a4_170 >>u s8_1492
	branch a6_173 == 0<32> l230644CC
l230644CC:
	word32 a3_182 = a4_170 + 36<i32> + s3_1014
	word32 a0_189
	word32 s8_2927
	word32 a6_195
	ra_154 = mbedtls_ecp_copy(ra_154, a3_182, (a4_170 >>u 1<u32>) + 36<i32> + s3_1014, a2_1192, a3_182, a4_170, 36<i32>, mstatus, a0 + 76<i32>, a6_173, dwLoc01B8, dwLocF8, dwLocE8, dwLocB8, dwLocA8, dwLoc78, dwLoc68, out s1_155, out a0_189, out a2_1192, out a3_149, out a4_1194, out a5_110, out a6_195, out s2_1006, out s3_1014, out s4_158, out s8_2927)
	0<32> = dwLocB8
	dwLoc01C0 = a6_173
	s0_1150 = a0_189
	branch a0_189 == 0<32> l23064584
l23064584:
	s8_1492 = dwLoc012C
	branch s5_214 != a6_195 l23064568
l23064568:
	dwLoc01C0 = a6_195
	word32 a6_238
	word32 a0_257
	word32 s8_2928
	ra_154 = ecp_double_jac(ra_154, s1_155, s1_155, a3_149, a3_149, a4_1194, s2_1006, s6_228, s7_1018, s10_231, s11_169, mstatus, a0 + 76<i32>, dwLoc01B8, dwLoc01A8, dwLoc0198, dwLoc0178, dwLoc0168, dwLoc0158, a4, a5, dwLoc0138, dwLoc0128, dwLoc011C, dwLoc0118, dwLoc0108, dwLocFC, dwLocF8, dwLocE8, dwLocD8, dwLocC8, dwLocB8, dwLocA8, dwLoc98, out s1_155, out a0_257, out a2_1192, out a3_149, out a4_1194, out a5_110, out a6_238, out s2_1006, out s3_1014, out s4_158, out s5_214, out s6_228, out s7_1018, out s8_2928, out s9_1020, out s10_231, out s11_169, out mstatus)
	s0_1150 = a0_257
	branch a0_257 != 0<32> l230644F6
l2306457C:
	0<32> = dwLocB8
	a6_195 = a6_238 + 1<32>
l23064588:
	Mem271[(s11_169 << 2<u32>) + (fp + -64<i32>) + 3832<i32>:word32] = a3_149
	a2_1192 = s11_169 + 1<i32>
	a4_170 = a4_1194 << 1<i32> & 255<i32>
	s11_169 = a2_1192 & 255<i32>
l2306449A:
	word32 a0_293
	word32 a3_2802
	word32 s1_1314
	word32 s6_1328
	word32 s5_1329
	word32 s10_1334
	word32 s11_1335
	word32 s8_1480
	word32 s4_1349
	word32 ra_1330 = ecp_normalize_jac_many(ra_154, s1_155, s1_155, fp + -328<i32>, s11_169, a3_149, a4_170, s2_1006, s3_1014, s4_158, s5_214, s6_228, s7_1018, s10_231, s11_169, mstatus, dwLoc01CC, a0 + 76<i32>, dwLoc01B8, dwLoc01AC, dwLoc01A8, dwLoc0198, dwLoc0178, dwLoc0168, dwLoc015C, dwLoc0158, a5, dwLoc013C, dwLoc0138, dwLoc0128, dwLoc011C, dwLoc0118, dwLoc010C, dwLoc0108, dwLocFC, dwLocF8, dwLocE8, dwLocD8, dwLocCC, dwLocC8, dwLocA8, dwLoc98, out s1_1314, out a0_293, out a2_1192, out a3_2802, out a4_1194, out a5_110, out s2_1006, out s3_1014, out s4_1349, out s5_1329, out s6_1328, out s7_1018, out s8_1480, out s9_1020, out s10_1334, out s11_1335, out mstatus)
	s0_1150 = a0_293
	branch a0_293 != 0<32> l230644F6
l230644A8:
	word32 a2_1491 = 0<32>
	a4_1194 = 1<32>
	word32 a7_1300 = 36<i32>
l230644B0:
	word32 a3_1306 = a4_1194
	branch a4_1194 >>u s8_1480 != 0<32> l230645FE
l230645FE:
	word32 a0_346
	word32 s1_356
	word32 s6_373
	word32 s8_2830
	word32 s4_2829
	ra = ecp_normalize_jac_many(ra_1330, s1_1314, s1_1314, fp + -328<i32>, a2_1491, a4_1194, a4_1194, s2_1006, s3_1014, s4_1349, s5_1329, s6_1328, s7_1018, s10_1334, s11_1335, mstatus, dwLoc01CC, a0 + 76<i32>, dwLoc01B8, dwLoc01AC, dwLoc01A8, dwLoc0198, dwLoc0178, dwLoc0168, dwLoc015C, dwLoc0158, a5, dwLoc013C, dwLoc0138, dwLoc0128, dwLoc011C, dwLoc0118, dwLoc010C, dwLoc0108, dwLocFC, dwLocF8, dwLocE8, dwLocD8, dwLocCC, dwLocC8, dwLocA8, dwLoc98, out s1_356, out a0_346, out a2_1192, out a3_120, out a4_1194, out a5_110, out s2_1006, out s3_1014, out s4_2829, out s5_214, out s6_373, out s7_1018, out s8_2830, out s9_1020, out s10_231, out s11, out mstatus)
	s0_1150 = a0_346
	branch a0_346 != 0<32> l230644F6
l2306460C:
	branch s7_1018 == 0<32> l23064618
l23064610:
	Mem376[s1_356 + 116<i32>:word32] = s3_1014
	Mem377[s1_356 + 120<i32>:word32] = s6_373
l23064618:
	word32 a5_383
	word32 a4_384
	mbedtls_mpi_get_bit(0<32>, a5_110, out a4_384, out a5_383)
	word32 a0_396
	word32 a3_404
	word32 s0_2831
	word32 s4_2836
	word32 a7_2835
	word32 s8_2837
	word32 a6_2834
	word32 a1_2833
	word32 s1_2832
	word32 ra_408 = mbedtls_mpi_copy(ra, fp + -412<i32>, s10_231, a2_1192, a3_120, a4_384, a5_383, mstatus, dwLoc01B8, dwLocE8, dwLocA8, dwLoc68, out s0_2831, out s1_2832, out a0_396, out a1_2833, out a2_1192, out a3_404, out a4_1194, out a5_110, out a6_2834, out a7_2835, out s2_1006, out s3_1014, out s4_2836, out s8_2837)
	s0_1150 = a0_396
	branch a0_396 != 0<32> l230644F6
l23064630:
	word32 a0_422
	word32 a3_425
	word32 s8_436
	word32 s4_2840
	word32 s1_2839
	word32 s0_2838
	word32 ra_430 = mbedtls_mpi_sub_mpi(ra_408, a0_396, fp + -400<i32>, a3_404, a4_1194, a5_110, s2_1006, mstatus, dwLoc0138, dwLoc0118, dwLocF8, dwLocD8, dwLocC8, dwLocB8, dwLoc98, out s0_2838, out s1_2839, out a0_422, out a2_1192, out a3_425, out a4_1194, out a5_110, out s2_1006, out s3_1014, out s4_2840, out s8_436)
	s0_1150 = a0_422
	branch a0_422 != 0<32> l230644F6
l23064640:
	word32 a0_450
	word32 s4_463
	word32 a3_2843
	word32 s1_2842
	word32 s0_2841
	word32 ra_458 = mbedtls_mpi_safe_cond_assign(ra_430, fp + -400<i32>, CONVERT(s8_436 != 0xFFFFFFFF<32>, bool, word32), a3_425, a4_1194, mstatus, dwLoc01B8, dwLocE8, dwLocA8, dwLoc68, out s0_2841, out s1_2842, out a0_450, out a2_1192, out a3_2843, out a4_1194, out a5_110, out s2_1006, out s3_1014, out s4_463)
	s0_1150 = a0_450
	branch a0_450 != 0<32> l230644F6
l23064656:
	word32 s0_477 = fp + -328<i32>
	word32 a5_2850
	word32 a2_2847
	word32 a1_2846
	word32 a0_2845
	word32 t1_2844
	word32 a4_2849
	word32 a3_2848
	word32 ra_484 = memset(ra_458, fp + -328<i32>, 0<32>, s5_214 + 1<i32>, out t1_2844, out a0_2845, out a1_2846, out a2_2847, out a3_2848, out a4_2849, out a5_2850)
	word32 s10_1012 = fp + -328<i32>
	word32 s6_488 = 0<32>
l23064668:
	branch s5_214 != s6_488 l23064780
l23064780:
	word32 a5_491 = s6_488
	s11 = 0<32>
l23064784:
	word32 a5_499
	word32 a4_2926
	Mem507[s10_1012:byte] = SLICE(mbedtls_mpi_get_bit(a5_491, a5_491, out a4_2926, out a5_499) << s11 | CONVERT(Mem497[s10_1012:byte], byte, word32), byte, 0)
	dwLoc01C8_1550 = a5_491
	s11 = s11 + 1<32>
	a5_491 = a5_499 + s5_214
	branch s11 <u s4_463 l23064784
l230647A6:
	s6_488 = s6_488 + 1<32>
	s10_1012 = s10_1012 + 1<32>
l2306466C:
	word32 a7_517 = fp + -328<i32> + s6_488
	word32 a1_518 = 0<32>
l23064674:
	branch s0_477 != a7_517 l230647AC
l230647AC:
	word32 a2_522 = CONVERT(Mem521[s0_477 + 1<i32>:byte], byte, word32)
	word32 a4_526 = a2_522 ^ a1_518
	word32 a6_523 = CONVERT(Mem521[s0_477:byte], byte, word32)
	word32 a5_527 = ~a4_526
	s0_477 = s0_477 + 1<32>
	Mem535[s0_477 + 4095<i32>:byte] = SLICE((a5_527 & 1<32>) << 7<i32> | a6_523, byte, 0)
	word32 a4_531 = CONVERT(SLICE(a4_526, byte, 0), byte, int32)
	word32 a3_537 = CONVERT(SLICE(a6_523 + (a5_527 & 1<32>), byte, 0), byte, int32)
	Mem541[s0_477:byte] = SLICE(a4_531 ^ a3_537, byte, 0)
	a1_518 = (a2_522 & a1_518 | a4_531 & a3_537) & 255<i32>
l23064678:
	mbedtls_ecp_point_init.part.2(fp + -364<i32>)
	word32 a0_575
	word32 a3_578
	word32 s0_2851
	word32 a5_1048
	word32 a2_1057
	word32 s8_1019
	word32 s5_1016
	word32 s6_1017
	word32 a4_1051
	word32 ra_1011 = ecp_select_comb(ra_484, s3_1014, s9_1020, CONVERT(Mem521[fp + -64<i32> + s6_488 + -264<i32>:byte], byte, word32), mstatus, dwLoc0158, dwLoc0138, dwLoc0118, dwLoc0108, dwLocF8, dwLocE8, dwLocD8, dwLocC8, dwLocB8, dwLocA8, dwLoc98, dwLoc88, dwLoc68, out s0_2851, out a0_575, out a2_1057, out a3_578, out a4_1051, out a5_1048, out s2_1006, out s3_1014, out s5_1016, out s6_1017, out s7_1018, out s8_1019)
	s0_1150 = a0_575
	branch a0_575 != 0<32> l2306484A
l23064698:
	s5_1016 = s2_1006 + 24<i32>
	word32 a1_2852
	word32 s4_2854
	word32 a7_2853
	word32 s1_1053
	word32 a3_1050
	ra_1011 = mbedtls_mpi_lset(ra_1011, a3_578, a4_1051, mstatus, dwLoc01D0, dwLoc01CC, dwLoc01A8, dwLoc0198, dwLocD8, dwLoc98, dwLoc58, out s1_1053, out a1_2852, out a2_1057, out a3_1050, out a4_1051, out a5_1048, out a7_2853, out s2_1006, out s3_1014, out s4_2854, out s8_1019)
	s0_1150 = s2_1006 + 24<i32>
	branch s2_1006 != 0x18<32> l2306484A
l230646AA:
	branch a5_1048 == 0<32> l23064842
l230646B0:
	mbedtls_mpi_init(fp + -388<i32>)
	mbedtls_mpi_init(fp + -376<i32>)
	s10_1012 = 0xC<32>
	s11 = s1_1053 + 4<i32>
	s1_1502 = s1_1053
l230646CC:
	word32 s1_1502
	word32 a3_2855
	word32 s4_658
	word32 a5_1026
	word32 a4_1002
	word32 a2_1000
	mbedtls_mpi_fill_random(ra_1011, s2_1006 + 24<i32>, s1_1502, fp + -388<i32>, dwLoc012C, a4, a3_1050, a4_1051, mstatus, out a2_1000, out a3_2855, out a4_1002, out a5_1026, out s2_1006, out s3_1014, out s4_658, out s8_1019, out mstatus)
l230646D8:
	word32 a3_2857
	word32 a6_2858
	word32 a1_2856
	branch mbedtls_mpi_cmp_mpi(a2_1000, a4_1002, a5_1026, out a1_2856, out a2_1057, out a3_2857, out a4_1051, out a5_1048, out a6_2858) >= 0<32> l230647EA
l230647EA:
	word32 a0_686
	word32 a3_2924
	word32 a5_2925
	word32 a1_2923
	ra_1011 = mbedtls_mpi_shift_r(ra_1011, 1<32>, a2_1057, a5_1048, mstatus, dwLoc01D0, dwLoc01CC, dwLoc01A8, dwLoc0198, dwLocD8, dwLoc98, dwLoc58, out s1_1502, out a0_686, out a1_2923, out a2_1000, out a3_2924, out a4_1002, out a5_2925, out s2_1006, out s3_1014, out s4_658, out s8_1019)
	a5_1026 = a0_686
	branch a0_686 == 0<32> l230646D8
l230646E4:
	s10_1012 = s10_1012 + 0xFFFFFFFF<32>
	branch s10_1012 == 0<32> l23064880
l23064880:
	s0_1150 = 0xFB000300<32>
l230646EA:
	word32 a6_2862
	word32 a1_2859
	word32 a5_2861
	word32 a2_2860
	branch mbedtls_mpi_cmp_int(1<32>, a2_1057, out a1_2859, out a2_2860, out a3_1050, out a4_1051, out a5_2861, out a6_2862) <= 0<32> l230646CC
l230646F6:
	word32 a0_754
	word32 s4_2866
	word32 a5_2865
	word32 a3_2864
	word32 s1_2863
	ra_1011 = mbedtls_mpi_mul_mpi(ra_1011, s2_1006 + 24<i32>, s2_1006 + 24<i32>, fp + -388<i32>, a3_1050, a4_1051, s2_1006, s4_658, s6_1017, mstatus, dwLoc0128, dwLoc0118, dwLoc0108, dwLocE8, dwLocD8, dwLocC8, dwLocA8, dwLoc98, dwLoc88, dwLoc38, out s0_1150, out s1_2863, out a0_754, out a2_1000, out a3_2864, out a4_1002, out a5_2865, out s2_1006, out s3_1014, out s4_2866, out s5_1016, out s6_1017, out s8_1019)
	a5_1026 = a0_754
	branch a0_754 != 0<32> l230647F8
l23064706:
	word32 a0_761
	word32 a3_764
	word32 s4_778
	word32 s1_2867
	word32 a5_2868
	ra_1011 = ecp_modp(ra_1011, s5_1016, a2_1000, a4_1002, a0_754, s2_1006, s5_1016, s6_1017, s7_1018, s10_1012, s1_1053 + 4<i32>, mstatus, dwLoc01C8_1550, dwLoc01C0, dwLoc01BC, dwLoc01A8, dwLoc0198, dwLoc018C, dwLoc0188, dwLoc0178, dwLoc0168, dwLoc0158, a5, dwLoc0138, dwLoc0128, dwLoc0108, dwLocF8, dwLocE8, dwLocD8, dwLocC8, dwLocBC, dwLocA8, dwLoc9C, out s1_2867, out a0_761, out a2_1000, out a3_764, out a4_1002, out a5_2868, out s2_1006, out s3_1014, out s4_778, out s5_1016, out s6_1017, out s7_1018, out s8_1019, out s9_1020, out s10_1012, out s11, out mstatus)
	a5_1026 = a0_761
	branch a0_761 != 0<32> l230647F8
l23064714:
	word32 a0_815
	word32 s1_2869
	word32 s4_2872
	word32 a3_2870
	word32 a5_2871
	ra_1011 = mbedtls_mpi_mul_mpi(ra_1011, fp + -376<i32>, fp + -388<i32>, fp + -388<i32>, a3_764, a4_1002, s2_1006, s4_778, s6_1017, mstatus, dwLoc0128, dwLoc0118, dwLoc0108, dwLocE8, dwLocD8, dwLocC8, dwLocA8, dwLoc98, dwLoc88, dwLoc38, out s0_1150, out s1_2869, out a0_815, out a2_1000, out a3_2870, out a4_1002, out a5_2871, out s2_1006, out s3_1014, out s4_2872, out s5_1016, out s6_1017, out s8_1019)
	a5_1026 = a0_815
	branch a0_815 != 0<32> l230647F8
l23064722:
	word32 a0_820
	word32 a3_823
	word32 s4_837
	word32 s1_2873
	word32 a5_2874
	ra_1011 = ecp_modp(ra_1011, fp + -376<i32>, a2_1000, a4_1002, a0_815, s2_1006, s5_1016, s6_1017, s7_1018, s10_1012, s11, mstatus, dwLoc01C8_1550, dwLoc01C0, dwLoc01BC, dwLoc01A8, dwLoc0198, dwLoc018C, dwLoc0188, dwLoc0178, dwLoc0168, dwLoc0158, a5, dwLoc0138, dwLoc0128, dwLoc0108, dwLocF8, dwLocE8, dwLocD8, dwLocC8, dwLocBC, dwLocA8, dwLoc9C, out s1_2873, out a0_820, out a2_1000, out a3_823, out a4_1002, out a5_2874, out s2_1006, out s3_1014, out s4_837, out s5_1016, out s6_1017, out s7_1018, out s8_1019, out s9_1020, out s10_1012, out s11, out mstatus)
	a5_1026 = a0_820
	branch a0_820 != 0<32> l230647F8
l2306472E:
	word32 a0_874
	word32 s4_2878
	word32 s1_2875
	word32 a3_2876
	word32 a5_2877
	ra_1011 = mbedtls_mpi_mul_mpi(ra_1011, s2_1006, s2_1006, fp + -376<i32>, a3_823, a4_1002, s2_1006, s4_837, s6_1017, mstatus, dwLoc0128, dwLoc0118, dwLoc0108, dwLocE8, dwLocD8, dwLocC8, dwLocA8, dwLoc98, dwLoc88, dwLoc38, out s0_1150, out s1_2875, out a0_874, out a2_1000, out a3_2876, out a4_1002, out a5_2877, out s2_1006, out s3_1014, out s4_2878, out s5_1016, out s6_1017, out s8_1019)
	a5_1026 = a0_874
	branch a0_874 != 0<32> l230647F8
l2306473C:
	word32 a0_879
	word32 a3_882
	word32 s4_896
	word32 s1_2879
	word32 a5_2880
	ra_1011 = ecp_modp(ra_1011, s2_1006, a2_1000, a4_1002, a0_874, s2_1006, s5_1016, s6_1017, s7_1018, s10_1012, s11, mstatus, dwLoc01C8_1550, dwLoc01C0, dwLoc01BC, dwLoc01A8, dwLoc0198, dwLoc018C, dwLoc0188, dwLoc0178, dwLoc0168, dwLoc0158, a5, dwLoc0138, dwLoc0128, dwLoc0108, dwLocF8, dwLocE8, dwLocD8, dwLocC8, dwLocBC, dwLocA8, dwLoc9C, out s1_2879, out a0_879, out a2_1000, out a3_882, out a4_1002, out a5_2880, out s2_1006, out s3_1014, out s4_896, out s5_1016, out s6_1017, out s7_1018, out s8_1019, out s9_1020, out s10_1012, out s11, out mstatus)
	a5_1026 = a0_879
	branch a0_879 != 0<32> l230647F8
l23064748:
	word32 a0_933
	word32 s4_2884
	word32 s1_2881
	word32 a3_2882
	word32 a5_2883
	ra_1011 = mbedtls_mpi_mul_mpi(ra_1011, fp + -376<i32>, fp + -376<i32>, fp + -388<i32>, a3_882, a4_1002, s2_1006, s4_896, s6_1017, mstatus, dwLoc0128, dwLoc0118, dwLoc0108, dwLocE8, dwLocD8, dwLocC8, dwLocA8, dwLoc98, dwLoc88, dwLoc38, out s0_1150, out s1_2881, out a0_933, out a2_1000, out a3_2882, out a4_1002, out a5_2883, out s2_1006, out s3_1014, out s4_2884, out s5_1016, out s6_1017, out s8_1019)
	a5_1026 = a0_933
	branch a0_933 != 0<32> l230647F8
l23064756:
	word32 a0_938
	word32 a3_941
	word32 s4_2887
	word32 s1_2885
	word32 a5_2886
	ra_1011 = ecp_modp(ra_1011, fp + -376<i32>, a2_1000, a4_1002, a0_933, s2_1006, s5_1016, s6_1017, s7_1018, s10_1012, s11, mstatus, dwLoc01C8_1550, dwLoc01C0, dwLoc01BC, dwLoc01A8, dwLoc0198, dwLoc018C, dwLoc0188, dwLoc0178, dwLoc0168, dwLoc0158, a5, dwLoc0138, dwLoc0128, dwLoc0108, dwLocF8, dwLocE8, dwLocD8, dwLocC8, dwLocBC, dwLocA8, dwLoc9C, out s1_2885, out a0_938, out a2_1000, out a3_941, out a4_1002, out a5_2886, out s2_1006, out s3_1014, out s4_2887, out s5_1016, out s6_1017, out s7_1018, out s8_1019, out s9_1020, out s10_1012, out s11, out mstatus)
	a5_1026 = a0_938
	branch a0_938 != 0<32> l230647F8
l23064762:
	word32 s4_983
	word32 a0_993
	word32 a5_2890
	word32 s1_2888
	word32 a3_2889
	ra_1011 = mbedtls_mpi_mul_mpi(ra_1011, s2_1006 + 12<i32>, s2_1006 + 12<i32>, fp + -376<i32>, a3_941, a4_1002, s2_1006, s2_1006 + 12<i32>, s6_1017, mstatus, dwLoc0128, dwLoc0118, dwLoc0108, dwLocE8, dwLocD8, dwLocC8, dwLocA8, dwLoc98, dwLoc88, dwLoc38, out s0_1150, out s1_2888, out a0_993, out a2_1000, out a3_2889, out a4_1002, out a5_2890, out s2_1006, out s3_1014, out s4_983, out s5_1016, out s6_1017, out s8_1019)
	a5_1026 = a0_993
	branch a0_993 != 0<32> l230647F8
l23064774:
	word32 a0_998
	word32 a5_2893
	word32 s4_2894
	word32 s1_2891
	word32 a3_2892
	ra_1011 = ecp_modp(ra_1011, s4_983, a2_1000, a4_1002, a0_993, s2_1006, s5_1016, s6_1017, s7_1018, s10_1012, s11, mstatus, dwLoc01C8_1550, dwLoc01C0, dwLoc01BC, dwLoc01A8, dwLoc0198, dwLoc018C, dwLoc0188, dwLoc0178, dwLoc0168, dwLoc0158, a5, dwLoc0138, dwLoc0128, dwLoc0108, dwLocF8, dwLocE8, dwLocD8, dwLocC8, dwLocBC, dwLocA8, dwLoc9C, out s1_2891, out a0_998, out a2_1000, out a3_2892, out a4_1002, out a5_2893, out s2_1006, out s3_1014, out s4_2894, out s5_1016, out s6_1017, out s7_1018, out s8_1019, out s9_1020, out s10_1012, out s11, out mstatus)
	a5_1026 = a0_998
l230647F8:
	word32 a2_1035
	word32 a5_1036
	word32 a4_1039
	word32 s4_2899
	word32 a1_2896
	word32 a3_2897
	word32 a6_2898
	word32 a0_2895
	mbedtls_mpi_free(fp + -388<i32>, a2_1000, a4_1002, a5_1026, mstatus, dwLoc88, dwLoc48, out a0_2895, out a1_2896, out a2_1035, out a3_2897, out a4_1039, out a5_1036, out a6_2898, out s4_2899)
	dwLoc014C_1537 = a5_1026
	word32 a2_2902
	word32 a0_2900
	word32 a6_2903
	word32 s4_2904
	word32 a1_2901
	s1_1053 = mbedtls_mpi_free(fp + -376<i32>, a2_1035, a4_1039, a5_1036, mstatus, dwLoc88, dwLoc48, out a0_2900, out a1_2901, out a2_2902, out a3_1050, out a4_1051, out a5_1048, out a6_2903, out s4_2904)
	a2_1057 = dwLocEC
	branch a5_1048 == 0<32> l23064842
l23064842:
	a2_1057 = dwLocEC
	word32 s4_1058 = 0xFFFFFFFF<32>
l23064844:
	s6_1017 = s6_1017 + 0xFFFFFFFF<32>
	branch s6_1017 != s4_1058 l2306480E
l2306480E:
	word32 a3_2916
	word32 s4_2918
	word32 a6_2917
	word32 s1_2915
	word32 a0_1100
	ra_1011 = ecp_double_jac(ra_1011, s1_1053, s1_1053, s2_1006, a3_1050, a4_1051, s2_1006, s6_1017, s7_1018, s10_1012, s11, mstatus, dwLoc01C8_1550, dwLoc01B8, dwLoc01A8, dwLoc0198, dwLoc0178, dwLoc0168, dwLoc0158, dwLoc014C_1537, a5, dwLoc0138, dwLoc0128, dwLoc011C, dwLoc0118, dwLoc0108, dwLocFC, dwLocF8, dwLocE8, dwLocD8, dwLocC8, dwLocB8, dwLocA8, dwLoc98, out s1_2915, out a0_1100, out a2_1057, out a3_2916, out a4_1051, out a5_1048, out a6_2917, out s2_1006, out s3_1014, out s4_2918, out s5_1016, out s6_1017, out s7_1018, out s8_1019, out s9_1020, out s10_1012, out s11, out mstatus)
	branch a0_1100 != 0<32> l2306483E
l2306481A:
	word32 s0_1121
	word32 a3_2919
	ra_1011 = ecp_select_comb(ra_1011, s3_1014, s9_1020, CONVERT(Mem1515[fp + -328<i32> + s6_1017:byte], byte, word32), mstatus, dwLoc0158, dwLoc0138, dwLoc0118, dwLoc0108, dwLocF8, dwLocE8, dwLocD8, dwLocC8, dwLocB8, dwLocA8, dwLoc98, dwLoc88, dwLoc68, out s0_1121, out a0_1100, out a2_1057, out a3_2919, out a4_1051, out a5_1048, out s2_1006, out s3_1014, out s5_1016, out s6_1017, out s7_1018, out s8_1019)
	branch a0_1100 != 0<32> l2306483E
l23064830:
	word32 t1_2920
	word32 a6_2921
	word32 t4_2922
	ra_1011 = ecp_add_mixed(ra_1011, s0_1121, s2_1006, s2_1006, fp + -364<i32>, s5_1016, s6_1017, s7_1018, s10_1012, s11, mstatus, dwLoc01C8_1550, dwLoc01B8, dwLoc0198, dwLoc018C, dwLoc0188, dwLoc017C, dwLoc0178, dwLoc0168, dwLoc0158, dwLoc014C_1537, a5, dwLoc0138, dwLoc012C, dwLoc0128, dwLoc0118, dwLoc0108, dwLocF8, dwLocE8, dwLocD8, dwLocC8, out t1_2920, out s0_1150, out s1_1053, out a0_1100, out a2_1057, out a3_1050, out a4_1051, out a5_1048, out a6_2921, out s2_1006, out s3_1014, out s4_1058, out s5_1016, out s6_1017, out s7_1018, out s8_1019, out s9_1020, out s10_1012, out s11, out t4_2922, out mstatus)
	branch a0_1100 == 0<32> l23064844
l2306483E:
	s0_1150 = a0_1100
l2306480A:
	s0_1150 = a5_1048
l2306484A:
	word32 a3_1193
	word32 s4_2906
	word32 a0_2905
	mbedtls_ecp_point_free.part.4(fp + -364<i32>, a2_1057, a4_1051, a5_1048, mstatus, dwLoc01C0, dwLoc98, dwLoc88, dwLoc58, dwLoc48, out a0_2905, out a2_1192, out a3_1193, out a4_1194, out a5_110, out s4_2906)
	branch s0_1150 != 0<32> l230644F6
l23064854:
	word32 a0_1221
	word32 s1_1231
	word32 a3_2908
	word32 s0_2907
	word32 s8_2909
	word32 ra_1229 = ecp_safe_invert_jac(ra_1011, s2_1006, s8_1019, a3_1193, a4_1194, mstatus, dwLoc0158, dwLoc0138, dwLoc0118, dwLoc0108, dwLocF8, dwLocE8, dwLocD8, dwLocC8, dwLocB8, dwLocA8, dwLoc88, dwLoc68, out s0_2907, out s1_1231, out a0_1221, out a2_1192, out a3_2908, out a4_1194, out a5_110, out s2_1006, out s3_1014, out s8_2909)
	s0_1150 = a0_1221
	branch a0_1221 != 0<32> l230644F6
l23064864:
	word32 s11_2914
	word32 s10_2913
	word32 s4_2910
	word32 s8_2912
	word32 s6_2911
	s0_1150 = ecp_normalize_jac(ra_1229, s1_1231, s1_1231, s2_1006, a2_1192, s5_1016, s6_1017, s7_1018, s10_1012, s11, mstatus, dwLoc01CC, dwLoc01C8_1550, dwLoc01B8, dwLoc01A8, dwLoc0198, dwLoc018C, dwLoc0188, dwLoc016C, dwLoc0168, dwLoc0158, a5, dwLoc0138, dwLoc0128, dwLoc0118, dwLoc0108, dwLocFC, dwLocE8, dwLocDC, dwLocD8, dwLocC8, dwLocAC, dwLoc98, dwLoc88, dwLoc78, out a2_1192, out a4_1194, out a5_110, out s2_1006, out s3_1014, out s4_2910, out s6_2911, out s7_1018, out s8_2912, out s9_1020, out s10_2913, out s11_2914, out mstatus)
l230644BA:
	word32 t4_1303 = a2_1491 + a4_1194 & 255<i32>
	word32 a6_1304 = a4_1194 + a7_1300 + s3_1014
l230645E6:
	word32 a2_1307 = t4_1303 - a3_1306
	word32 t1_1309 = a3_1306 + -1<i32>
	branch a3_1306 != 0<32> l230645A4
l230645A4:
	word32 a2_1311 = t1_1309 + a7_1300
	dwLoc013C = t4_1303
	dwLoc01BC = a4_1194
	dwLoc01C0 = t1_1309
	word32 a0_1336
	word32 t1_1355
	word32 s8_2805
	word32 s0_2803
	word32 a3_2804
	ra_1330 = ecp_add_mixed(ra_1330, s0_1150, a6_1304 + a2_1311, a2_1311 + s3_1014, a6_1304, s5_1329, s6_1328, s7_1018, s10_1334, s11_1335, mstatus, a0 + 76<i32>, dwLoc01B8, dwLoc0198, dwLoc018C, dwLoc0188, dwLoc017C, dwLoc0178, dwLoc0168, dwLoc0158, a4, a5, dwLoc0138, dwLoc012C, dwLoc0128, dwLoc0118, dwLoc0108, dwLocF8, dwLocE8, dwLocD8, dwLocC8, out t1_1355, out s0_2803, out s1_1314, out a0_1336, out a2_1192, out a3_2804, out a4_1194, out a5_110, out a6_1304, out s2_1006, out s3_1014, out s4_1349, out s5_1329, out s6_1328, out s7_1018, out s8_2805, out s9_1020, out s10_1334, out s11_1335, out t4_1303, out mstatus)
	s0_1150 = a0_1336
	branch a0_1336 != 0<32> l230644F6
l230644F6:
	branch s7_1018 != 0<32> l2306451A
l230644FA:
	word32 s1_1368 = 0<32>
	word32 s4_1369 = 36<i32>
l23064500:
	word32 a5_2808
	word32 a3_2807
	word32 a0_2806
	s1_1368 = mbedtls_ecp_point_free(s1_1368 + s4_1369 + s3_1014, a2_1192, a4_1194, a5_110, mstatus, dwLoc01C0, dwLoc98, dwLoc88, dwLoc58, dwLoc48, out a0_2806, out a2_1192, out a3_2807, out a4_1194, out a5_2808, out s4_1369)
	a5_110 = s1_1368 & 255<i32>
	branch (s1_1368 & 255<i32>) <u s9_1020 l23064500
l23064514:
	word32 t3_2815
	word32 s4_2814
	word32 a6_2813
	word32 a3_2812
	word32 a1_2811
	word32 s1_2809
	word32 a0_2810
	vPortFree(s3_1014, a2_1192, s1_1368 & 255<i32>, mstatus, dwLoc78, dwLoc38, out s0_1150, out s1_2809, out a0_2810, out a1_2811, out a2_1192, out a3_2812, out a4_1194, out a5_110, out a6_2813, out s4_2814, out t3_2815)
l2306451A:
	word32 a2_1422
	word32 a5_1423
	word32 a4_1426
	word32 s4_2820
	word32 a0_2816
	word32 a6_2819
	word32 a3_2818
	word32 a1_2817
	mbedtls_mpi_free(fp + -412<i32>, a2_1192, a4_1194, a5_110, mstatus, dwLoc88, dwLoc48, out a0_2816, out a1_2817, out a2_1422, out a3_2818, out a4_1426, out a5_1423, out a6_2819, out s4_2820)
	word32 a0_2821
	word32 s4_2825
	word32 a6_2824
	word32 a3_2823
	word32 a1_2822
	mbedtls_mpi_free(fp + -400<i32>, a2_1422, a4_1426, a5_1423, mstatus, dwLoc88, dwLoc48, out a0_2821, out a1_2822, out a2, out a3_2823, out a4_1438, out a5_1435, out a6_2824, out s4_2825)
	branch s0_1150 == 0<32> l2306452E
l23064528:
	word32 a0_2826
	word32 s4_2828
	word32 a3_2827
	mbedtls_ecp_point_free(s2_1006, a2, a4_1438, a5_1435, mstatus, dwLoc01C0, dwLoc98, dwLoc88, dwLoc58, dwLoc48, out a0_2826, out a2, out a3_2827, out a4_1438, out a5_1435, out s4_2828)
l2306452E:
	a2Out = a2
	a4Out = a4_1438
	a5Out = a5_1435
	mstatusOut = mstatus
	return s0_1150
ecp_mul_comb_exit:
l230645C8:
	0<32> = dwArg00
	Mem1486[s3 + (fp + -64<i32>) + 3832<i32>:word32] = a0 + 76<i32>
	s8_1480 = a6_1304
	s0_1150 = dwArg04
	a3_1306 = t1_1355
	a7_1300 = 36<i32>
l230645F4:
	a4_1194 = a4_1194 << 1<i32> & 255<i32>
	a2_1491 = a2_1307 & 255<i32>


word32 mbedtls_ecp_point_read_binary(word32 ra, word32 s0, word32 a1, word32 a2, word32 a3, word32 a4, word32 s2, word32 mstatus, word32 dwArg00, word32 dwArg04, word32 dwArg18, word32 dwArg28, word32 dwArg38, word32 dwArgB8, word32 dwArgC8, word32 dwArgE8, word32 dwArgF8, word32 dwArg0108, word32 dwArg0128, word32 dwArg0138, word32 dwArg0148, word32 dwArg0168, word32 dwArg0178, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pk_parse_key_sec1_der
//      mbedtls_pk_parse_subpubkey
// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] mstatus:[0..31] ra:[0..31] s0:[0..31] s2:[0..31] Stack +0000:[0..31] Stack +0004:[0..31] Stack +0018:[0..31] Stack +0028:[0..31] Stack +0038:[0..31] Stack +00B8:[0..31] Stack +00C8:[0..31] Stack +00E8:[0..31] Stack +00F8:[0..31] Stack +0108:[0..31] Stack +0128:[0..31] Stack +0138:[0..31] Stack +0148:[0..31] Stack +0168:[0..31] Stack +0178:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 ra s0 s1 s2 s3 s4
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_ecp_point_read_binary_entry:
l23064888:
	branch a3 != 0<32> l230648A6
l230648A6:
	word32 a5_6 = CONVERT(Mem0[a2:byte], byte, word32)
	branch a5_6 != 0<32> l230648B8
l230648B8:
	word32 a0_182
	word32 a5_267
	word32 a4_266
	word32 a1_185
	word32 a3_190
	word32 a0_25 = mbedtls_mpi_size(a2, a4, a5_6, out a1_185, out a3_190, out a4_266, out a5_267)
	word32 s1_18 = a2
	word32 s2_21 = a3
	word32 s0_210 = a1
	word32 a4_193 = CONVERT(Mem20[a2:byte], byte, word32)
	word32 a5_197 = 4<32>
	word32 s3_219 = a0_25
	branch a4_193 != 4<32> l2306491C
l2306491C:
	a0_182 = 0xFB000180<32>
l230648DC:
	a5_197 = (a0_25 << 1<u32>) + 1<32>
	branch a3 != a5_197 l23064892
l23064892:
	a0_182 = 0xFB000080<32>
l230648E6:
	word32 s8_272
	word32 s4_271
	word32 a7_270
	word32 a2_269
	ra = mbedtls_mpi_read_binary(ra, a2 + 1<i32>, a0_25, a3_190, a4_193, mstatus, s2, dwLoc08, dwArgB8, dwArgC8, dwArgF8, dwArg0108, dwArg0138, dwArg0148, out s0_210, out s1_18, out a0_182, out a1_185, out a2_269, out a3_190, out a4_193, out a5_197, out a7_270, out s2_21, out s3_219, out s4_271, out s8_272)
	branch a0_182 != 0<32> l23064898
l230648F4:
	word32 s4_275
	word32 a7_274
	word32 a2_273
	word32 s8_276
	ra = mbedtls_mpi_read_binary(ra, s3_219 + 1<i32> + s1_18, s3_219, a3_190, a4_193, mstatus, s2, dwLoc08, dwArgB8, dwArgC8, dwArgF8, dwArg0108, dwArg0138, dwArg0148, out s0_210, out s1_18, out a0_182, out a1_185, out a2_273, out a3_190, out a4_193, out a5_197, out a7_274, out s2_21, out s3_219, out s4_275, out s8_276)
	branch a0_182 != 0<32> l23064898
l23064898:
	s0Out = s0_210
	s1Out = s1_18
	a0Out = a0_182
	a1Out = a1_185
	a2Out = dwArg48
	a3Out = a3_190
	a4Out = a4_193
	a5Out = a5_197
	s2Out = s2_21
	s3Out = s3_219
	s4Out = dwArg04
	return ra
l23064906:
l23064918_thunk_mbedtls_mpi_lset:
	word32 a1_108
	word32 a2_109
	word32 a3_110
	word32 a4_111
	word32 a5_112
	word32 s1_116
	word32 s2_117
	word32 s3_118
	word32 s4_119
	word32 a7_277
	word32 s8_278
	word32 ra_115 = mbedtls_mpi_lset(ra, a3_190, a4_193, mstatus, dwArg00, dwArg04, dwArg28, dwArg38, dwArgF8, dwArg0138, dwArg0178, out s1_116, out a1_108, out a2_109, out a3_110, out a4_111, out a5_112, out a7_277, out s2_117, out s3_118, out s4_119, out s8_278)
	s0Out = s0_210
	s1Out = s1_116
	a0Out = s0_210 + 24<i32>
	a1Out = a1_108
	a2Out = a2_109
	a3Out = a3_110
	a4Out = a4_111
	a5Out = a5_112
	s2Out = s2_117
	s3Out = s3_118
	s4Out = s4_119
	return ra_115
l230648AC:
	a5 = 1<32>
	branch a3 != 1<32> l2306488A
l230648B2:
l230648B4_thunk_mbedtls_ecp_set_zero:
	word32 a1_130
	word32 a2_131
	word32 a3_132
	word32 a4_133
	word32 a5_134
	word32 s1_138
	word32 s2_139
	word32 s3_140
	word32 s4_141
	word32 a0_150
	word32 s8_268
	word32 ra_137 = mbedtls_ecp_set_zero(ra, s0, a1, a3, a4, mstatus, dwArg00, dwArg04, dwArg18, dwArg28, dwArg38, dwArgE8, dwArgF8, dwArg0128, dwArg0138, dwArg0168, dwArg0178, out s1_138, out a0_150, out a1_130, out a2_131, out a3_132, out a4_133, out a5_134, out s2_139, out s3_140, out s4_141, out s8_268)
	s0Out = s0
	s1Out = s1_138
	a0Out = a0_150
	a1Out = a1_130
	a2Out = a2_131
	a3Out = a3_132
	a4Out = a4_133
	a5Out = a5_134
	s2Out = s2_139
	s3Out = s3_140
	s4Out = s4_141
	return ra_137
l2306488A:
	s0Out = s0
	s1Out = s1
	a0Out = 0xFB000080<32>
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5
	s2Out = s2
	s3Out = s3
	s4Out = s4
	return ra
mbedtls_ecp_point_read_binary_exit:


word32 mbedtls_ecp_check_pubkey(word32 ra, word32 s1, word32 a0, word32 a1, word32 a2, word32 s4, word32 s6, word32 s7, word32 s10, word32 s11, word32 mstatus, word32 dwArg04, word32 dwArg08, word32 dwArg18, word32 dwArg28, word32 dwArg38, word32 dwArg48, word32 dwArg68, word32 dwArg78, word32 dwArg88, word32 dwArg98, word32 dwArgA4, word32 dwArgA8, word32 dwArgB8, word32 dwArgC8, word32 dwArgD4, word32 dwArgD8, word32 dwArgE8, word32 dwArgF4, word32 dwArgF8, word32 dwArg0108, word32 dwArg0118, word32 dwArg0148, word32 dwArg0158, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s10Out, ptr32 & s11Out, ptr32 & mstatusOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pk_parse_key_sec1_der
//      mbedtls_pk_parse_subpubkey
//      mbedtls_ecp_mul
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] mstatus:[0..31] ra:[0..31] s1:[0..31] s10:[0..31] s11:[0..31] s4:[0..31] s6:[0..31] s7:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +0018:[0..31] Stack +0028:[0..31] Stack +0038:[0..31] Stack +0048:[0..31] Stack +0068:[0..31] Stack +0078:[0..31] Stack +0088:[0..31] Stack +0098:[0..31] Stack +00A4:[0..31] Stack +00A8:[0..31] Stack +00B8:[0..31] Stack +00C8:[0..31] Stack +00D4:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +00F4:[0..31] Stack +00F8:[0..31] Stack +0108:[0..31] Stack +0118:[0..31] Stack +0148:[0..31] Stack +0158:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 mstatus ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 mstatus ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_ecp_check_pubkey_entry:
l23064924:
	word32 s0_108
	word32 s3_130 = a1
	word32 s1_12 = a0
	word32 a2_23
	word32 a6_823
	word32 a5_26
	word32 a4_25
	word32 a1_22
	word32 a3_24
	branch mbedtls_mpi_cmp_int(1<32>, a2, out a1_22, out a2_23, out a3_24, out a4_25, out a5_26, out a6_823) != 0<32> l23064958
l23064940:
	a5_26 = 1<32>
	branch ecp_get_type(a5_26) != 1<32> l23064A92
l23064A92:
	s0_108 = 0xFB000080<32>
l2306494C:
	word32 a2_38
	word32 a6_824
	branch mbedtls_mpi_cmp_int(0<32>, a2_23, out a1_22, out a2_38, out a3_24, out a4_25, out a5_26, out a6_824) >= 0<32> l23064960
l23064960:
	word32 a2_49
	word32 a6_825
	branch mbedtls_mpi_cmp_int(0<32>, a2_38, out a1_22, out a2_49, out a3_24, out a4_25, out a5_26, out a6_825) < 0<32> l23064958
l23064970:
	s2 = a0 + 4<i32>
	word32 a2_60
	word32 a6_826
	branch mbedtls_mpi_cmp_mpi(a2_49, a4_25, a5_26, out a1_22, out a2_60, out a3_24, out a4_25, out a5_26, out a6_826) >= 0<32> l23064958
l23064980:
	word32 a2_827
	word32 a6_828
	branch mbedtls_mpi_cmp_mpi(a2_60, a4_25, a5_26, out a1_22, out a2_827, out a3_24, out a4_25, out a5_26, out a6_828) >= 0<32> l23064958
l2306498C:
	mbedtls_mpi_init(fp + -56<i32>)
	mbedtls_mpi_init(fp + -44<i32>)
	word32 a0_106
	word32 s0_829
	word32 a3_831
	word32 s4_832
	word32 s8_833
	word32 s1_830
	word32 a5_119
	word32 a4_118
	word32 a2_116
	ra = mbedtls_mpi_mul_mpi(ra, fp + -56<i32>, a1 + 12<i32>, a1 + 12<i32>, a3_24, a4_25, a0 + 4<i32>, s4, s6, mstatus, dwArg68, dwArg78, dwArg88, dwArgA8, dwArgB8, dwArgC8, dwArgE8, dwArgF8, dwArg0108, dwArg0158, out s0_829, out s1_830, out a0_106, out a2_116, out a3_831, out a4_118, out a5_119, out s2, out s3_130, out s4_832, out s5, out s6, out s8_833)
	s0_108 = a0_106
	branch a0_106 != 0<32> l23064A2C
l230649A6:
	word32 a0_114
	word32 a3_117
	word32 s4_131
	word32 s9_845
	word32 s8_844
	word32 s1_843
	ra = ecp_modp(ra, fp + -56<i32>, a2_116, a4_118, a5_119, s2, s5, s6, s7, s10, s11, mstatus, dwLoc38, dwLoc30, dwLoc2C, dwLoc18, dwLoc08, dwArg04, dwArg08, dwArg18, dwArg28, dwArg38, dwArg48, s1, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgB8, dwArgC8, dwArgD4, dwArgE8, dwArgF4, out s1_843, out a0_114, out a2_116, out a3_117, out a4_118, out a5_119, out s2, out s3_130, out s4_131, out s5, out s6, out s7, out s8_844, out s9_845, out s10, out s11, out mstatus)
	s0_108 = a0_114
	branch a0_114 != 0<32> l23064A2C
l230649B2:
	word32 a0_168
	word32 s8_850
	word32 s4_849
	word32 s0_846
	word32 a3_848
	word32 s1_847
	ra = mbedtls_mpi_mul_mpi(ra, fp + -44<i32>, s3_130, s3_130, a3_117, a4_118, s2, s4_131, s6, mstatus, dwArg68, dwArg78, dwArg88, dwArgA8, dwArgB8, dwArgC8, dwArgE8, dwArgF8, dwArg0108, dwArg0158, out s0_846, out s1_847, out a0_168, out a2_116, out a3_848, out a4_118, out a5_119, out s2, out s3_130, out s4_849, out s5, out s6, out s8_850)
	s0_108 = a0_168
	branch a0_168 != 0<32> l23064A2C
l230649C0:
	word32 a0_173
	word32 a3_176
	word32 s8_853
	word32 s9_854
	word32 s4_852
	word32 s1_851
	ra = ecp_modp(ra, fp + -44<i32>, a2_116, a4_118, a5_119, s2, s5, s6, s7, s10, s11, mstatus, dwLoc38, dwLoc30, dwLoc2C, dwLoc18, dwLoc08, dwArg04, dwArg08, dwArg18, dwArg28, dwArg38, dwArg48, s1, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgB8, dwArgC8, dwArgD4, dwArgE8, dwArgF4, out s1_851, out a0_173, out a2_116, out a3_176, out a4_118, out a5_119, out s2, out s3_130, out s4_852, out s5, out s6, out s7, out s8_853, out s9_854, out s10, out s11, out mstatus)
	s0_108 = a0_173
	branch a0_173 != 0<32> l23064A2C
l230649CC:
	word32 a3_240
	word32 s4_219
	branch a5_119 != 0<32> l23064A5E
l23064A5E:
	word32 s0_855
	word32 s1_856
	word32 a1_857
	word32 a3_858
	word32 a7_859
	word32 s8_860
	word32 a0_206
	ra = mbedtls_mpi_add_mpi(ra, a0_173, fp + -44<i32>, a3_176, a4_118, a5_119, s2, mstatus, s1, dwArg78, dwArg98, dwArgB8, dwArgC8, dwArgD8, dwArgF8, out s0_855, out s1_856, out a0_206, out a1_857, out a2_116, out a3_858, out a4_118, out a5_119, out a7_859, out s2, out s3_130, out s4_219, out s8_860)
l23064A6A:
	s0_108 = a0_206
	branch a0_206 != 0<32> l23064A2C
l23064A6E:
	word32 a5_242
	word32 a1_899
	word32 a2_900
	word32 a6_901
	branch mbedtls_mpi_cmp_mpi(a2_116, a4_118, a5_119, out a1_899, out a2_900, out a3_240, out a4_118, out a5_242, out a6_901) < 0<32> l230649E4
l23064A7A:
	word32 s0_902
	word32 s1_903
	word32 a1_904
	word32 a3_905
	word32 a7_906
	word32 s8_907
	ra = mbedtls_mpi_sub_abs(ra, fp + -44<i32>, fp + -44<i32>, s2, a3_240, a4_118, a5_242, mstatus, dwArg78, dwArgB8, dwArgD8, dwArgE8, dwArgF8, dwArg0118, out s0_902, out s1_903, out a0_206, out a1_904, out a2_116, out a3_905, out a4_118, out a5_119, out a7_906, out s2, out s3_130, out s4_219, out s8_907)
l230649D0:
	word32 s4_861
	word32 a0_275
	ra = mbedtls_mpi_sub_int(ra, a0_173, fp + -44<i32>, 3<32>, a3_176, s2, mstatus, dwArg38, s1, dwArg78, dwArg98, dwArgA8, dwArgB8, dwArgD8, out a0_275, out a2_116, out a3_240, out a4_118, out a5_119, out s2, out s3_130, out s4_861)
l230649DA:
	s0_108 = a0_275
	branch a0_275 != 0<32> l23064A2C
l230649DE:
	s4_219 = dwArgA4
	branch a5_119 < 0<32> l23064A48
l23064A48:
	word32 a5_311
	word32 a1_862
	word32 a2_863
	word32 a6_864
	branch mbedtls_mpi_cmp_int(0<32>, a2_116, out a1_862, out a2_863, out a3_240, out a4_118, out a5_311, out a6_864) == 0<32> l230649E4
l23064A52:
	word32 s0_893
	word32 s1_894
	word32 a1_895
	word32 a7_896
	word32 s4_897
	word32 s8_898
	ra = mbedtls_mpi_add_mpi(ra, a0_275, fp + -44<i32>, a3_240, a4_118, a5_311, s2, mstatus, s1, dwArg78, dwArg98, dwArgB8, dwArgC8, dwArgD8, dwArgF8, out s0_893, out s1_894, out a0_275, out a1_895, out a2_116, out a3_240, out a4_118, out a5_119, out a7_896, out s2, out s3_130, out s4_897, out s8_898)
l230649E4:
	word32 a0_384
	word32 s0_865
	word32 s1_866
	word32 a3_867
	word32 s4_868
	word32 s8_869
	ra = mbedtls_mpi_mul_mpi(ra, fp + -44<i32>, fp + -44<i32>, s3_130, a3_240, a4_118, s2, s4_219, s6, mstatus, dwArg68, dwArg78, dwArg88, dwArgA8, dwArgB8, dwArgC8, dwArgE8, dwArgF8, dwArg0108, dwArg0158, out s0_865, out s1_866, out a0_384, out a2_116, out a3_867, out a4_118, out a5_119, out s2, out s3_130, out s4_868, out s5, out s6, out s8_869)
	s0_108 = a0_384
	branch a0_384 != 0<32> l23064A2C
l230649F2:
	word32 a0_398
	word32 a3_401
	word32 s1_870
	word32 s4_871
	word32 s8_872
	word32 s9_873
	ra = ecp_modp(ra, fp + -44<i32>, a2_116, a4_118, a5_119, s2, s5, s6, s7, s10, s11, mstatus, dwLoc38, dwLoc30, dwLoc2C, dwLoc18, dwLoc08, dwArg04, dwArg08, dwArg18, dwArg28, dwArg38, dwArg48, s1, dwArg68, dwArg88, dwArg98, dwArgA8, dwArgB8, dwArgC8, dwArgD4, dwArgE8, dwArgF4, out s1_870, out a0_398, out a2_116, out a3_401, out a4_118, out a5_119, out s2, out s3_130, out s4_871, out s5, out s6, out s7, out s8_872, out s9_873, out s10, out s11, out mstatus)
	s0_108 = a0_398
	branch a0_398 != 0<32> l23064A2C
l230649FE:
	word32 s0_874
	word32 s1_875
	word32 a1_876
	word32 a3_877
	word32 a7_878
	word32 s4_879
	word32 s8_880
	word32 a0_430
	ra = mbedtls_mpi_add_mpi(ra, a0_398, fp + -44<i32>, a3_401, a4_118, a5_119, s2, mstatus, s1, dwArg78, dwArg98, dwArgB8, dwArgC8, dwArgD8, dwArgF8, out s0_874, out s1_875, out a0_430, out a1_876, out a2_116, out a3_877, out a4_118, out a5_119, out a7_878, out s2, out s3_130, out s4_879, out s8_880)
l23064A0A:
	s0_108 = a0_430
	branch a0_430 != 0<32> l23064A2C
l23064A0E:
	word32 a2_463
	word32 a3_464
	word32 a4_465
	word32 a5_466
	word32 a1_881
	word32 a6_882
	branch mbedtls_mpi_cmp_mpi(a2_116, a4_118, a5_119, out a1_881, out a2_463, out a3_464, out a4_465, out a5_466, out a6_882) >= 0<32> l23064A86
l23064A86:
	word32 s0_883
	word32 s1_884
	word32 a1_885
	word32 a3_886
	word32 a7_887
	word32 s4_888
	word32 s8_889
	ra = mbedtls_mpi_sub_abs(ra, fp + -44<i32>, fp + -44<i32>, s2, a3_464, a4_465, a5_466, mstatus, dwArg78, dwArgB8, dwArgD8, dwArgE8, dwArgF8, dwArg0118, out s0_883, out s1_884, out a0_430, out a1_885, out a2_116, out a3_886, out a4_118, out a5_119, out a7_887, out s2, out s3_130, out s4_888, out s8_889)
l23064A1A:
	word32 a1_890
	word32 a3_891
	word32 a6_892
	word32 a0_498 = mbedtls_mpi_cmp_mpi(a2_463, a4_465, a5_466, out a1_890, out a2_116, out a3_891, out a4_118, out a5_119, out a6_892)
	s0_108 = a0_498
	branch a0_498 == 0<32> l23064A2C
l23064A26:
	s0_108 = 0xFB000380<32>
l23064A2C:
	word32 a2_516
	word32 a5_517
	word32 a4_520
	word32 a3_836
	word32 s4_838
	word32 a6_837
	word32 a1_835
	word32 a0_834
	mbedtls_mpi_free(fp + -56<i32>, a2_116, a4_118, a5_119, mstatus, dwArg0108, dwArg0148, out a0_834, out a1_835, out a2_516, out a3_836, out a4_520, out a5_517, out a6_837, out s4_838)
	word32 s4_842
	word32 a0_839
	word32 a6_841
	word32 a2_840
	s1_12 = mbedtls_mpi_free(fp + -44<i32>, a2_516, a4_520, a5_517, mstatus, dwArg0108, dwArg0148, out a0_839, out a1_22, out a2_840, out a3_24, out a4_25, out a5_26, out a6_841, out s4_842)
l23064958:
	s0_108 = 0xFB000380<32>
l23064A38:
	s0Out = s0_108
	s1Out = s1_12
	a0Out = s0_108
	a1Out = a1_22
	a2Out = dwArg0138
	a3Out = a3_24
	a4Out = a4_25
	a5Out = a5_26
	s2Out = s2
	s3Out = s3_130
	s4Out = dwArgF4
	s5Out = s5
	s6Out = s6
	s7Out = s7
	s10Out = s10
	s11Out = s11
	mstatusOut = mstatus
	return ra
mbedtls_ecp_check_pubkey_exit:


word32 mbedtls_ecp_check_privkey(word32 a2, word32 a5, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pk_parse_key_sec1_der
//      mbedtls_ecp_mul
// MayUse:  a2:[0..31] a5:[0..31]
// LiveOut: a0 a2 a3 a4 a5 s1
// Trashed: a0 a1 a2 a3 a4 a5 a6 s1 t3 tp
// Preserved: s0 sp
mbedtls_ecp_check_privkey_entry:
l23064A9A:
	word32 a5_18
	branch ecp_get_type(a5) != 1<32> l23064ADE
l23064ADE:
	a5_18 = 0xFB000080<32>
l23064AB0:
	word32 a2_24
	word32 a5_27
	word32 a1_84
	word32 a6_85
	branch mbedtls_mpi_cmp_int(1<32>, a2, out a1_84, out a2_24, out a3, out a4, out a5_27, out a6_85) < 0<32> l23064ACC
l23064ABC:
	a5_18 = 0<32>
	word32 a1_86
	word32 a2_87
	word32 a5_88
	word32 a6_89
	branch mbedtls_mpi_cmp_mpi(a2_24, a4, a5_27, out a1_86, out a2_87, out a3, out a4, out a5_88, out a6_89) < 0<32> l23064AD2
l23064ACC:
	a5_18 = 0xFB000380<32>
l23064AD2:
	a0Out = a5_18
	a2Out = dwArg10
	a3Out = a3
	a4Out = a4
	a5Out = a5_18
	return a0
mbedtls_ecp_check_privkey_exit:


word32 mbedtls_ecp_mul(word32 ra, word32 s1, word32 a1, word32 a2, word32 a3, word32 a5, word32 s2, word32 s4, word32 s7, word32 s10, word32 s11, word32 mstatus, word32 dwArg00, word32 dwArg04, word32 dwArg08, word32 dwArg18, word32 dwArg28, word32 dwArg48, word32 dwArg58, word32 dwArg78, word32 dwArg84, word32 dwArg88, word32 dwArg98, word32 dwArgA8, word32 dwArgB4, word32 dwArgB8, word32 dwArgC8, word32 dwArgD4, word32 dwArgD8, word32 dwArgE8, word32 dwArgF8, word32 dwArg0128, word32 dwArg0138, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s10Out, ptr32 & s11Out, ptr32 & mstatusOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pk_parse_key_sec1_der
//      mbedtls_ecp_check_pub_priv
// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] s1:[0..31] s10:[0..31] s11:[0..31] s2:[0..31] s4:[0..31] s7:[0..31] Stack +0000:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +0018:[0..31] Stack +0028:[0..31] Stack +0048:[0..31] Stack +0058:[0..31] Stack +0078:[0..31] Stack +0084:[0..31] Stack +0088:[0..31] Stack +0098:[0..31] Stack +00A8:[0..31] Stack +00B4:[0..31] Stack +00B8:[0..31] Stack +00C8:[0..31] Stack +00D4:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +00F8:[0..31] Stack +0128:[0..31] Stack +0138:[0..31]
// LiveOut: a0 a2 a4 a5 mstatus ra s1 s10 s11 s2 s3 s6 s7
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 mstatus ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_ecp_mul_entry:
l23064AE6:
	word32 s0_43
	word32 s1_195 = a0
	word32 s3_203 = a2
	word32 s2_201 = a3
	word32 s6_208 = a5
	word32 a2_36
	word32 a1_245
	word32 a3_246
	word32 a6_247
	word32 a4_182
	word32 a5_184
	branch mbedtls_mpi_cmp_int(1<32>, a2, out a1_245, out a2_36, out a3_246, out a4_182, out a5_184, out a6_247) != 0<32> l23064B56
l23064B56:
	s0_43 = 0xFB000080<32>
l23064B10:
	word32 a0_46
	word32 a2_47
	word32 a3_248
	s1_195 = mbedtls_ecp_check_privkey(a2_36, a5_184, out a0_46, out a2_47, out a3_248, out a4_182, out a5_184)
	s0_43 = a0_46
	branch a0_46 != 0<32> l23064B5C
l23064B1C:
	word32 a0_63
	word32 s5_79
	word32 s0_249
	word32 a1_250
	word32 a2_251
	word32 a3_252
	word32 s4_253
	ra = mbedtls_ecp_check_pubkey(ra, s1_195, s1_195, a3, a2_47, a1, a5, s7, s10, s11, mstatus, s4, s2, dwLoc08, dwArg08, dwArg18, dwArg28, dwArg48, dwArg58, s1, dwArg78, dwArg84, dwArg88, dwArg98, dwArgA8, dwArgB4, dwArgB8, dwArgC8, dwArgD4, dwArgD8, dwArgE8, dwArgF8, dwArg0128, dwArg0138, out s0_249, out s1_195, out a0_63, out a1_250, out a2_251, out a3_252, out a4_182, out a5_184, out s2_201, out s3_203, out s4_253, out s5_79, out s6_208, out s7, out s10, out s11, out mstatus)
	s0_43 = a0_63
	branch a0_63 != 0<32> l23064B5C
l23064B28:
	a5_184 = 1<32>
	branch ecp_get_type(a5_184) != 1<32> l23064B5C
l23064B5C:
	0<32> = dwArgA8
	s1Out = s1_195
	a0Out = s0_43
	a2Out = dwArg48
	a4Out = a4_182
	a5Out = a5_184
	s2Out = s2_201
	s3Out = s3_203
	s6Out = s6_208
	s7Out = s7
	s10Out = s10
	s11Out = s11
	mstatusOut = mstatus
	return ra
l23064B34:
	0<32> = dwArgA8
l23064B52_thunk_ecp_mul_comb:
	word32 a4_123
	word32 a5_124
	word32 a2_125
	word32 mstatus_136
	word32 a0_121 = ecp_mul_comb(ra, s1_195, dwArg48, s5_79, s6_208, s3_203, s11, mstatus, dwArg00, dwArg04, out a2_125, out a4_123, out a5_124, out mstatus_136)
	s1Out = s1_195
	a0Out = a0_121
	a2Out = a2_125
	a4Out = a4_123
	a5Out = a5_124
	s2Out = s2_201
	s3Out = s3_203
	s6Out = s6_208
	s7Out = s7
	s10Out = s10
	s11Out = s11
	mstatusOut = mstatus_136
	return ra
mbedtls_ecp_mul_exit:


void mbedtls_ecp_check_pub_priv(word32 ra, word32 s1, word32 a0, word32 a1, word32 a2, word32 s2, word32 s3, word32 s7, word32 s10, word32 s11, word32 mstatus, word32 dwArg08, word32 dwArg28, word32 dwArg38, word32 dwArg48, word32 dwArg58, word32 dwArg68, word32 dwArg78, word32 dwArg88, word32 dwArg98, word32 dwArgA8, word32 dwArgB8, word32 dwArgC8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      eckey_check_pair
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] mstatus:[0..31] ra:[0..31] s1:[0..31] s10:[0..31] s11:[0..31] s2:[0..31] s3:[0..31] s7:[0..31] Stack +0008:[0..31] Stack +0028:[0..31] Stack +0038:[0..31] Stack +0048:[0..31] Stack +0058:[0..31] Stack +0068:[0..31] Stack +0078:[0..31] Stack +0088:[0..31] Stack +0098:[0..31] Stack +00A8:[0..31] Stack +00B8:[0..31] Stack +00C8:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 mstatus ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_ecp_check_pub_priv_entry:
l23064B72:
	word32 a5_17 = CONVERT(Mem15[a0:byte], byte, word32)
	branch a5_17 != 0<32> l23064B9E
l23064B9E:
	word32 a4_19 = CONVERT(Mem15[a1:byte], byte, word32)
	branch a4_19 != a5_17 l23064B86
l23064BA6:
	word32 a2_28
	word32 a4_30
	word32 a5_31
	word32 a3_366
	word32 a6_367
	word32 a1_365
	branch mbedtls_mpi_cmp_mpi(a2, a4_19, a5_17, out a1_365, out a2_28, out a3_366, out a4_30, out a5_31, out a6_367) != 0<32> l23064B86
l23064BBA:
	word32 a2_38
	word32 a4_40
	word32 a5_41
	word32 a3_369
	word32 a6_370
	word32 a1_368
	branch mbedtls_mpi_cmp_mpi(a2_28, a4_30, a5_31, out a1_368, out a2_38, out a3_369, out a4_40, out a5_41, out a6_370) != 0<32> l23064B86
l23064BCA:
	word32 a6_376
	word32 a5_375
	word32 a3_373
	word32 a4_374
	word32 a2_372
	word32 a1_371
	branch mbedtls_mpi_cmp_mpi(a2_38, a4_40, a5_41, out a1_371, out a2_372, out a3_373, out a4_374, out a5_375, out a6_376) != 0<32> l23064B86
l23064BDA:
	mbedtls_ecp_point_init.part.2(fp + -192<i32>)
	word32 a2_62
	word32 a4_64
	word32 a5_381
	word32 a1_379
	word32 a3_380
	word32 a0_378
	word32 t1_377
	word32 ra_66 = memset(ra, fp + -156<i32>, 0<32>, 124<i32>, out t1_377, out a0_378, out a1_379, out a2_62, out a3_380, out a4_64, out a5_381)
	word32 s1_80
	word32 s2_81
	word32 s4_82
	word32 s0_79 = mbedtls_ecp_group_copy(fp + -156<i32>, a2_62, a4_64, mstatus, dwLocA8, dwLoc7C, dwArg48, dwArg58, dwArg68, dwArg88, dwArg98, dwArgA8, out s1_80, out s2_81, out s4_82)
	word32 a0_95
	word32 mstatus_113
	word32 s11_388
	word32 s10_387
	word32 s6_385
	word32 s7_386
	word32 s3_384
	word32 s1_382
	word32 s2_383
	word32 a5_100
	word32 a4_131
	word32 a2_129
	mbedtls_ecp_mul(ra_66, s1_80, fp + -192<i32>, s0_79 + 124<i32>, s0_79 + 40<i32>, 0<32>, s2_81, s4_82, s7, s10, s11, mstatus, dwLocC0, dwLocBC, dwLocB8, dwLocA8, dwLoc98, dwLoc78, s2, dwLoc48, dwLoc3C, dwLoc38, dwLoc28, dwLoc18, dwLoc0C, dwLoc08, dwArg08, s3, s1, dwArg28, dwArg38, dwArg68, dwArg78, out s1_382, out a0_95, out a2_129, out a4_131, out a5_100, out s2_383, out s3_384, out s6_385, out s7_386, out s10_387, out s11_388, out mstatus_113)
	branch a0_95 != 0<32> l23064C32
l23064C0C:
	word32 a1_399
	word32 a3_400
	word32 a6_401
	branch mbedtls_mpi_cmp_mpi(a2_129, a4_131, a5_100, out a1_399, out a2_129, out a3_400, out a4_131, out a5_100, out a6_401) != 0<32> l23064C2C
l23064C16:
	word32 a1_402
	word32 a3_403
	word32 a6_404
	branch mbedtls_mpi_cmp_mpi(a2_129, a4_131, a5_100, out a1_402, out a2_129, out a3_403, out a4_131, out a5_100, out a6_404) != 0<32> l23064C2C
l23064C20:
	word32 a1_405
	word32 a3_406
	word32 a6_407
	branch mbedtls_mpi_cmp_mpi(a2_129, a4_131, a5_100, out a1_405, out a2_129, out a3_406, out a4_131, out a5_100, out a6_407) == 0<32> l23064C32
l23064C2C:
l23064C32:
	word32 a2_170
	word32 a4_172
	word32 a3_390
	word32 s4_392
	word32 a5_391
	word32 a0_389
	mbedtls_ecp_point_free.part.4(fp + -192<i32>, a2_129, a4_131, a5_100, mstatus_113, dwLocB0, dwArg78, dwArg88, dwArgB8, dwArgC8, out a0_389, out a2_170, out a3_390, out a4_172, out a5_391, out s4_392)
	word32 a2_394
	word32 a3_395
	word32 a1_393
	word32 a5_397
	word32 a4_396
	word32 s2_398
	mbedtls_ecp_group_free(fp + -156<i32>, a2_170, a4_172, mstatus_113, dwLocC0, dwLoc88, dwArg68, dwArg78, dwArg88, dwArgA8, dwArgB8, dwArgC8, out a1_393, out a2_394, out a3_395, out a4_396, out a5_397, out s2_398)
l23064B86:
l23064B8C:
	return
mbedtls_ecp_check_pub_priv_exit:


void ecp_mod_koblitz.constprop.0(word32 ra, word32 a2, word32 a5, word32 s4, word32 s6, word32 mstatus, word32 dwArg38, word32 dwArg48, word32 dwArg58, word32 dwArg68, word32 dwArg78, word32 dwArg88, word32 dwArg98, word32 dwArgA8, word32 dwArgB8, word32 dwArgC8, word32 dwArgD8, word32 dwArgE8, word32 dwArg0128)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ecp_mod_p224k1
//      ecp_mod_p256k1
// MayUse:  a2:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] s4:[0..31] s6:[0..31] Stack +0038:[0..31] Stack +0048:[0..31] Stack +0058:[0..31] Stack +0068:[0..31] Stack +0078:[0..31] Stack +0088:[0..31] Stack +0098:[0..31] Stack +00A8:[0..31] Stack +00B8:[0..31] Stack +00C8:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +0128:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s5 s6 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
ecp_mod_koblitz.constprop.0_entry:
l23064C40:
	branch a5 <u a2 l23064D34
l23064D34:
	return
l23064C46:
	branch a2 <u a5 - a2 l23064D0C
l23064D0C:
l23064C6E:
l23064C70:
	word32 a1_39
	word32 a2_40
	word32 a5_452
	word32 a3_450
	word32 a4_451
	word32 t1_448
	word32 a0_449
	word32 ra_44 = memset(ra, fp + -76<i32>, 0<32>, 44<i32>, out t1_448, out a0_449, out a1_39, out a2_40, out a3_450, out a4_451, out a5_452)
	word32 a5_57
	word32 a7_456
	word32 a2_454
	word32 a6_455
	word32 a1_453
	word32 a4_56
	word32 a3_61
	memcpy(fp + -76<i32>, a1_39 + (a2 << 2<u32>), a2_40 << 2<i32>, out a1_453, out a2_454, out a3_61, out a4_56, out a5_57, out a6_455, out a7_456)
	word32 a5_71 = a5_57 + a4_56
	word32 a5_73 = a2
l23064C98:
	branch a5_73 <u a4_56 l23064D10
l23064D10:
	a3_61 = a5_73 << 2<u32>
	a4_56 = a4_56 + a3_61
	Mem82[a4_56:word32] = 0<32>
	a5_73 = a5_73 + 1<32>
l23064C9E:
	word32 a3_101
	word32 a4_102
	word32 a5_103
	word32 s0_107
	word32 s1_108
	word32 s2_109
	word32 a0_121
	word32 s6_122
	word32 s5_460
	word32 s8_461
	word32 s3_458
	word32 s4_459
	word32 a2_457
	word32 ra_106 = mbedtls_mpi_mul_mpi(ra_44, fp + -100<i32>, fp + -100<i32>, fp + -88<i32>, a3_61, a4_56, fp + -76<i32>, s4, s6, mstatus, dwArg38, dwArg48, dwArg58, dwArg78, dwArg88, dwArg98, dwArgB8, dwArgC8, dwArgD8, dwArg0128, out s0_107, out s1_108, out a0_121, out a2_457, out a3_101, out a4_102, out a5_103, out s2_109, out s3_458, out s4_459, out s5_460, out s6_122, out s8_461)
	branch a0_121 != 0<32> l23064CFE
l23064CAA:
	word32 a4_465
	word32 a3_464
	word32 a7_466
	word32 a5_130
	word32 s2_136
	word32 s3_137
	word32 s4_138
	word32 a0_147
	word32 s1_462
	word32 a1_463
	word32 s0_134
	word32 ra_133 = mbedtls_mpi_add_abs(ra_106, s0_107, s1_108, s1_108, fp + -100<i32>, a3_101, a4_102, a5_103, s2_109, mstatus, a5_71, dwArg48, dwArg68, dwArg88, dwArgA8, dwArgB8, dwArgC8, dwArgE8, out s0_134, out s1_462, out a0_147, out a1_463, out a3_464, out a4_465, out a5_130, out a7_466, out s2_136, out s3_137, out s4_138)
	branch a0_147 != 0<32> l23064CFE
l23064CB6:
	branch s0_134 <u a5_130 - s0_134 l23064D20
l23064D20:
l23064CBE:
l23064CC0:
	word32 t1_467
	word32 a3_469
	word32 a0_468
	word32 a4_470
	word32 a5_471
	word32 a1_158
	word32 a2_159
	word32 ra_163 = memset(ra_133, s2_136, 0<32>, 44<i32>, out t1_467, out a0_468, out a1_158, out a2_159, out a3_469, out a4_470, out a5_471)
	word32 a1_472
	word32 a2_473
	word32 a6_474
	word32 a5_175
	word32 a3_179
	word32 a7_475
	word32 a4_174
	memcpy(s2_136, a1_158 + s3_137, a2_159 << 2<i32>, out a1_472, out a2_473, out a3_179, out a4_174, out a5_175, out a6_474, out a7_475)
	word32 a5_189 = a5_175 + a4_174
	a5_191 = a5_189
l23064CE2:
	word32 a5_191
	branch s0_134 <u a5_191 l23064D24
l23064D24:
	a4_174 = s0_134 << 2<u32>
	a5_191 = a5_191 + a4_174
	Mem199[a5_191:word32] = 0<32>
	s0_134 = s0_134 + 1<32>
l23064CE8:
	word32 a3_216
	word32 a4_217
	word32 a5_218
	word32 s0_222
	word32 s1_223
	word32 s2_224
	word32 a0_236
	word32 a2_476
	word32 s3_477
	word32 s4_478
	word32 s5_479
	word32 s6_480
	word32 s8_481
	word32 ra_221 = mbedtls_mpi_mul_mpi(ra_163, fp + -100<i32>, fp + -100<i32>, fp + -88<i32>, a3_179, a4_174, s2_136, s4_138, s6_122, mstatus, dwArg38, dwArg48, dwArg58, dwArg78, dwArg88, dwArg98, dwArgB8, dwArgC8, dwArgD8, dwArg0128, out s0_222, out s1_223, out a0_236, out a2_476, out a3_216, out a4_217, out a5_218, out s2_224, out s3_477, out s4_478, out s5_479, out s6_480, out s8_481)
	branch a0_236 != 0<32> l23064CFE
l23064CF4:
	word32 s0_482
	word32 s1_483
	word32 a0_484
	word32 a1_485
	word32 a3_486
	word32 a4_487
	word32 a5_488
	word32 a7_489
	word32 s2_490
	word32 s3_491
	word32 s4_492
	mbedtls_mpi_add_abs(ra_221, s0_222, s1_223, s1_223, fp + -100<i32>, a3_216, a4_217, a5_218, s2_224, mstatus, a5_189, dwArg48, dwArg68, dwArg88, dwArgA8, dwArgB8, dwArgC8, dwArgE8, out s0_482, out s1_483, out a0_484, out a1_485, out a3_486, out a4_487, out a5_488, out a7_489, out s2_490, out s3_491, out s4_492)
l23064CFE:
	return
ecp_mod_koblitz.constprop.0_exit:


void ecp_mod_p224k1(word32 ra, word32 a5, word32 s4, word32 s6, word32 mstatus, word32 dwArg38, word32 dwArg48, word32 dwArg58, word32 dwArg68, word32 dwArg78, word32 dwArg88, word32 dwArg98, word32 dwArgA8, word32 dwArgB8, word32 dwArgC8, word32 dwArgD8, word32 dwArgE8, word32 dwArg0128)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5:[0..31] mstatus:[0..31] ra:[0..31] s4:[0..31] s6:[0..31] Stack +0038:[0..31] Stack +0048:[0..31] Stack +0058:[0..31] Stack +0068:[0..31] Stack +0078:[0..31] Stack +0088:[0..31] Stack +0098:[0..31] Stack +00A8:[0..31] Stack +00B8:[0..31] Stack +00C8:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +0128:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s5 s6 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
ecp_mod_p224k1_entry:
l23064D38:
l23064D42_thunk_ecp_mod_koblitz.constprop.0:
	ecp_mod_koblitz.constprop.0(ra, 7<32>, a5, s4, s6, mstatus, dwArg38, dwArg48, dwArg58, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB8, dwArgC8, dwArgD8, dwArgE8, dwArg0128)
	return
ecp_mod_p224k1_exit:


void ecp_mod_p256k1(word32 ra, word32 a5, word32 s4, word32 s6, word32 mstatus, word32 dwArg38, word32 dwArg48, word32 dwArg58, word32 dwArg68, word32 dwArg78, word32 dwArg88, word32 dwArg98, word32 dwArgA8, word32 dwArgB8, word32 dwArgC8, word32 dwArgD8, word32 dwArgE8, word32 dwArg0128)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5:[0..31] mstatus:[0..31] ra:[0..31] s4:[0..31] s6:[0..31] Stack +0038:[0..31] Stack +0048:[0..31] Stack +0058:[0..31] Stack +0068:[0..31] Stack +0078:[0..31] Stack +0088:[0..31] Stack +0098:[0..31] Stack +00A8:[0..31] Stack +00B8:[0..31] Stack +00C8:[0..31] Stack +00D8:[0..31] Stack +00E8:[0..31] Stack +0128:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s5 s6 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
ecp_mod_p256k1_entry:
l23064D46:
l23064D50_thunk_ecp_mod_koblitz.constprop.0:
	ecp_mod_koblitz.constprop.0(ra, 8<32>, a5, s4, s6, mstatus, dwArg38, dwArg48, dwArg58, dwArg68, dwArg78, dwArg88, dwArg98, dwArgA8, dwArgB8, dwArgC8, dwArgD8, dwArgE8, dwArg0128)
	return
ecp_mod_p256k1_exit:


word32 mbedtls_ecp_group_load(word32 a0, word32 a2, word32 a4, word32 mstatus, word32 dwArg18, word32 dwArg44, word32 dwArg0108, word32 dwArg0118, word32 dwArg0128, word32 dwArg0148, word32 dwArg0158, word32 dwArg0168, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pk_use_ecparams
//      mbedtls_ecp_group_copy
// MayUse:  a0:[0..31] a2:[0..31] a4:[0..31] mstatus:[0..31] Stack +0018:[0..31] Stack +0044:[0..31] Stack +0108:[0..31] Stack +0118:[0..31] Stack +0128:[0..31] Stack +0148:[0..31] Stack +0158:[0..31] Stack +0168:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 s0 s1 s2 s4
// Trashed: a0 a1 a2 a3 a4 a5 a6 s0 s1 s2 s4 s8 t3 tp
// Preserved: sp
mbedtls_ecp_group_load_entry:
l23064D54:
	word32 s1_111
	word32 a1_105
	word32 a0_117
	word32 a3_107
	word32 a2_106
	word32 a5_109
	word32 a4_108
	word32 a4_134
	word32 a5_101
	word32 a1_18
	word32 a4_21
	word32 a2_225
	word32 a3_226
	word32 a5_227
	word32 s2_112
	mbedtls_ecp_group_free(a0, a2, a4, mstatus, dwLoc20, dwArg18, dwArg0108, dwArg0118, dwArg0128, dwArg0148, dwArg0158, dwArg0168, out a1_18, out a2_225, out a3_226, out a4_21, out a5_227, out s2_112)
	Mem31[a0:byte] = SLICE(a1_18, byte, 0)
	branch a1_18 == 0xB<32> l23064DF6
l23064DF6:
	Mem34[0x2308B158<32>:word32] = a0
	Mem37[0x2308DED8<32>:word32] = a0
	Mem40[0x2308DEE8<32>:word32] = a0
	Mem43[0x58<32>:word32] = a0
	Mem47[0x23064D9C<32>:word32] = a0
	Mem48[0x2308B180<32>:word32] = a0
	Mem52[0xF<32>:word32] = a0
	Mem53[0x33<32>:word32] = a0
	Mem55[0x3F<32>:word32] = a0
	Mem57[5<32>:word32] = a0
	Mem58[0x11<32>:word32] = a0
	Mem59[0x15<32>:word32] = a0
	Mem60[0x1D<32>:word32] = a0
	Mem61[0x21<32>:word32] = a0
	Mem62[0x4D<32>:word32] = a0
	Mem63[0x29<32>:word32] = a0
	Mem64[0x2308B124<32>:word32] = a0
	Mem65[0x35<32>:word32] = a0
	a4_134 = 0x2308B0F4<32>
	a5_101 = 0x2308B110<32>
l23064D70:
	branch a1_18 == 0xC<32> l23064E5A
l23064E5A:
	Mem70[0x2308B1D4<32>:word32] = a0
	Mem73[0x2308DEE0<32>:word32] = a0
	Mem77[0x2308DEF0<32>:word32] = a0
	Mem81[0x23064DAA<32>:word32] = a0
	Mem82[0x2308B1FC<32>:word32] = a0
	Mem86[0x10<32>:word32] = a0
	Mem87[0x58<32>:word32] = a0
	Mem88[0x34<32>:word32] = a0
	Mem90[0x40<32>:word32] = a0
	Mem92[5<32>:word32] = a0
	Mem93[0x11<32>:word32] = a0
	Mem94[0x15<32>:word32] = a0
	Mem95[0x1D<32>:word32] = a0
	Mem96[0x21<32>:word32] = a0
	Mem97[0x4D<32>:word32] = a0
	Mem98[0x29<32>:word32] = a0
	Mem99[0x2308B198<32>:word32] = a0
	Mem100[0x35<32>:word32] = a0
	a4_134 = 0x2308B168<32>
	a5_101 = 0x2308B188<32>
l23064D76:
	branch a1_18 != 3<32> l23064EBC
l23064EBC:
	s1_111 = mbedtls_ecp_group_free(a0, dwArg44, a4_21, mstatus, dwLoc20, dwArg18, dwArg0108, dwArg0118, dwArg0128, dwArg0148, dwArg0158, dwArg0168, out a1_105, out a2_106, out a3_107, out a4_108, out a5_109, out s2_112)
	a0_117 = 0xFB000180<32>
l23064D7C:
	Mem120[0x2308B274<32>:word32] = a0
	Mem123[0x2308B20C<32>:word32] = a0
	Mem127[0x2308B29C<32>:word32] = a0
	Mem130[0x10<32>:word32] = a0
	Mem131[0x28<32>:word32] = a0
	Mem132[0x58<32>:word32] = a0
	Mem133[0x34<32>:word32] = a0
	Mem135[0x40<32>:word32] = a0
	Mem137[5<32>:word32] = a0
	Mem138[0x1D<32>:word32] = a0
	Mem139[0x4D<32>:word32] = a0
	Mem140[0x29<32>:word32] = a0
	Mem141[0x2308B238<32>:word32] = a0
	Mem142[0x35<32>:word32] = a0
	a4_134 = 0x2308B208<32>
	a5_101 = 0x2308B228<32>
l23064DC4:
	Mem146[a5_101 + 60<i32>:word32] = a0
	Mem149[0x4200D9D8<32>:word32] = a0
	Mem151[0x41<32>:word32] = a0
	Mem152[0x45<32>:word32] = a0
	word32 a2_158
	word32 a4_160
	word32 a5_161
	word32 a1_228
	word32 a3_229
	Mem162[mbedtls_mpi_bitlen(dwArg44, a4_134, 0x4200D990<32>, out a1_228, out a2_158, out a3_229, out a4_160, out a5_161) + 88<i32>:word32] = a0
	Mem170[mbedtls_mpi_bitlen(a2_158, a4_160, a5_161, out a1_105, out a2_106, out a3_107, out a4_108, out a5_109) + 92<i32>:word32] = a0
	Mem171[0x61<32>:word32] = a0
	s1_111 = 1<32>
	a0_117 = 0<32>
l23064DEC:
	s1Out = s1_111
	a0Out = a0_117
	a1Out = a1_105
	a2Out = a2_106
	a3Out = a3_107
	a4Out = a4_108
	a5Out = a5_109
	s2Out = s2_112
	s4Out = dwArg04
	return a0
mbedtls_ecp_group_load_exit:


word32 gcm_mult(word32 s1, word32 a0, word32 a1, word32 a2, word32 a5, ptr32 & s1Out, ptr32 & a1Out, ptr32 & a5Out, ptr32 & a7Out, ptr32 & s2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_cipher_auth_encrypt
//      mbedtls_gcm_starts
//      mbedtls_gcm_update
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a5:[0..31] s1:[0..31]
// LiveOut: a1 a5 a7 s0 s1 s2
// Trashed: a1 a2 a3 a4 a5 a6 a7 s0 s1 s2 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
gcm_mult_entry:
l23064ECA:
	word32 a3_17 = ((CONVERT(Mem9[a1 + 15<i32>:byte], byte, word32) & 0xF<32>) << 3<i32>) + a0
	word32 t3_13 = 0xF<32>
	word32 t1_18 = Mem9[a3_17 + 192<i32>:int32]
	word32 a4_19 = Mem9[a3_17 + 196<i32>:int32]
	word32 a3_101 = Mem9[Mem9[a5 + 64<i32>:word32] + 68<i32>:word32]
l23064EF6:
	word32 a6_35 = CONVERT(Mem9[a1 + t3_13:byte], byte, word32)
	word32 t5_36 = Mem9[((a5 & 15<i32>) << 3<i32>) + 0x2308B288<32>:int32]
	word32 s0_42 = a5 >>u 4<u32> | a3_101 << 0x1C<u32>
	word32 t4_46 = t1_18 << 0x1C<u32> | a3_101 >>u 4<u32>
	word32 s1_49 = a4_19 << 0x1C<u32> | t1_18 >>u 4<u32>
	word32 s2_52 = a4_19 >>u 4<u32>
	branch t3_13 == 0xF<32> l23064F60
l23064F3E:
	word32 a3_56 = ((a6_35 & 15<i32>) << 3<u32>) + a0
	word32 a5_58 = t5_36 << 16<i32> ^ s2_52
	a4_19 = Mem9[a3_56 + 196<i32>:int32] ^ a5_58
	t1_18 = Mem9[a3_56 + 192<i32>:int32] ^ s1_49
	a5 = a5_58 ^ s0_42
	a3_101 = Mem9[Mem9[a5_58 + 64<i32>:word32] + 68<i32>:word32] ^ t4_46
l23064F60:
	word32 a6_75 = (a6_35 >>u 4<u32> << 3<i32>) + a0
	word32 a7_76 = a3_101 << 0x1C<u32> | a5 >>u 4<u32>
	a4_19 = Mem9[a6_75 + 196<i32>:int32] ^ a4_19 >>u 4<u32> ^ Mem9[((a5 & 0xF<32>) << 3<i32>) + 0x2308B288<32>:word32] << 16<i32>
	t3_13 = t3_13 + 0xFFFFFFFF<32>
	t1_18 = Mem9[a6_75 + 192<i32>:int32] ^ (a4_19 << 0x1C<u32> | t1_18 >>u 4<u32>)
	a5 = Mem9[a6_75 + 64<i32>:int32] ^ a7_76
	a3_101 = Mem9[a6_75 + 68<i32>:int32] ^ (t1_18 << 0x1C<u32> | a3_101 >>u 4<i32>)
	branch t3_13 != 0xFFFFFFFF<32> l23064EF6
l23064FBC:
	Mem108[a2:byte] = SLICE(a4_19 >>u 0x18<u32>, byte, 0)
	Mem110[a2 + 1<i32>:byte] = SLICE(a4_19 >>u 0x10<u32>, byte, 0)
	Mem111[a2 + 3<i32>:byte] = SLICE(a4_19, byte, 0)
	Mem114[a2 + 4<i32>:byte] = SLICE(t1_18 >>u 0x18<u32>, byte, 0)
	Mem116[a2 + 5<i32>:byte] = SLICE(t1_18 >>u 0x10<u32>, byte, 0)
	Mem118[a2 + 6<i32>:byte] = SLICE(t1_18 >>u 8<u32>, byte, 0)
	Mem120[a2 + 8<i32>:byte] = SLICE(a3_101 >>u 0x18<u32>, byte, 0)
	Mem122[a2 + 9<i32>:byte] = SLICE(a3_101 >>u 0x10<u32>, byte, 0)
	Mem124[a2 + 10<i32>:byte] = SLICE(a3_101 >>u 8<u32>, byte, 0)
	Mem126[a2 + 12<i32>:byte] = SLICE(a5 >>u 0x18<u32>, byte, 0)
	Mem131[s1 + 13<i32>:byte] = SLICE(a5 >>u 0x10<u32>, byte, 0)
	Mem133[s1 + 2<i32>:byte] = SLICE(a4_19 >>u 8<u32>, byte, 0)
	Mem134[s1 + 7<i32>:byte] = SLICE(t1_18, byte, 0)
	Mem135[s1 + 11<i32>:byte] = SLICE(a3_101, byte, 0)
	Mem136[s1 + 14<i32>:byte] = SLICE(a5 >>u 8<u32>, byte, 0)
	Mem137[s1 + 15<i32>:byte] = SLICE(a5, byte, 0)
	s1Out = s1_49
	a1Out = a4_19 >>u 8<u32>
	a5Out = a5
	a7Out = a7_76
	s2Out = s2_52
	return dwArg14
gcm_mult_exit:


void mbedtls_gcm_init(word32 ra, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      gcm_ctx_alloc
// MayUse:  a0:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 ra t0 t1
// Preserved: sp
mbedtls_gcm_init_entry:
l23065036:
l2306503C_thunk_memset:
	word32 t1_16
	word32 a0_17
	word32 a1_18
	word32 a2_19
	word32 a3_20
	word32 a4_21
	word32 a5_22
	memset(ra, a0, 0<32>, 392<i32>, out t1_16, out a0_17, out a1_18, out a2_19, out a3_20, out a4_21, out a5_22)
	return
mbedtls_gcm_init_exit:


void mbedtls_gcm_setkey(word32 ra, word32 s1, word32 a0, word32 a1, word32 a3, word32 a5, word32 s3, word32 s5, word32 s7, word32 dwArg38, word32 dwArg78, word32 dwArgA4, word32 dwArgC0, word32 dwArgC4, word32 dwArgE8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      gcm_aes_setkey_wrap
// MayUse:  a0:[0..31] a1:[0..31] a3:[0..31] a5:[0..31] ra:[0..31] s1:[0..31] s3:[0..31] s5:[0..31] s7:[0..31] Stack +0038:[0..31] Stack +0078:[0..31] Stack +00A4:[0..31] Stack +00C0:[0..31] Stack +00C4:[0..31] Stack +00E8:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s5 s6 s7 s8 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_gcm_setkey_entry:
l23065040:
	word32 a4_25
	branch mbedtls_cipher_info_from_values(a1, a3, 1<32>, a3, a5, out a4_25) == 0<32> l23065212
l23065212:
l2306505E:
	branch a4_25 != 0x10<32> l23065206
l2306506A:
	word32 a5_354
	mbedtls_cipher_free(ra, a0, 0x10<32>, out a5_354)
	word32 a0_38
	word32 a4_43
	word32 a5_44
	word32 s1_46
	word32 ra_45 = mbedtls_cipher_setup(ra, a0, a3, out s1_46, out a0_38, out a4_43, out a5_44)
	branch a0_38 != 0<32> l23065206
l2306507C:
	word32 a4_355
	word32 a5_356
	branch mbedtls_cipher_setkey(a0, s1_46, 1<32>, a4_43, a5_44, out a4_355, out a5_356) != 0<32> l23065206
l2306508C:
	word32 a5_68
	word32 a0_80
	word32 s0_83
	word32 s6_372
	word32 s7_373
	word32 s8_374
	word32 s3_369
	word32 s4_370
	word32 s5_371
	word32 a5_366
	word32 a7_367
	word32 s2_368
	word32 s1_363
	word32 a1_364
	word32 a3_365
	word32 a2_360
	word32 a3_361
	word32 a4_362
	word32 t1_357
	word32 a0_358
	word32 a1_359
	mbedtls_cipher_update(memset(ra_45, fp + -32<i32>, 0<32>, 0x10<32>, out t1_357, out a0_358, out a1_359, out a2_360, out a3_361, out a4_362, out a5_68), a0, fp + -32<i32>, 0x10<32>, fp + -32<i32>, fp + -36<i32>, a5_68, s3, s5, s7, dwLoc08, dwArg38, s1, dwArg78, dwArgA4, dwArgC0, dwArgC4, dwArgE8, out s0_83, out s1_363, out a0_80, out a1_364, out a3_365, out a5_366, out a7_367, out s2_368, out s3_369, out s4_370, out s5_371, out s6_372, out s7_373, out s8_374)
	branch a0_80 != 0<32> l23065206
l230650AA:
	Mem139[s0_83 + 196<i32>:word32] = 0<32>
	Mem143[s0_83 + 68<i32>:word32] = 0<32>
	word32 a4_138 = CONVERT(bLoc18, byte, word32) << 24<i32> | CONVERT(bLoc17, byte, word32) << 16<i32> | CONVERT(bLoc15, byte, word32) | CONVERT(bLoc16, byte, word32) << 8<i32>
	Mem144[s0_83 + 132<i32>:word32] = a4_138
	word32 a2_125 = CONVERT(bLoc1C, byte, word32) << 24<i32> | CONVERT(bLoc1B, byte, word32) << 16<i32> | CONVERT(bLoc19, byte, word32) | CONVERT(bLoc1A, byte, word32) << 8<i32>
	Mem147[s0_83 + 256<i32>:word32] = a2_125
	word32 a5_126 = CONVERT(bLoc20, byte, word32) << 24<i32> | CONVERT(bLoc1F, byte, word32) << 16<i32> | CONVERT(bLoc1D, byte, word32) | CONVERT(bLoc1E, byte, word32) << 8<i32>
	Mem148[s0_83 + 260<i32>:word32] = a5_126
	Mem152[s0_83 + 192<i32>:word32] = 0<32>
	Mem153[s0_83 + 64<i32>:word32] = 0<32>
	word32 a3_150 = CONVERT(bLoc14, byte, word32) << 24<i32> | CONVERT(bLoc13, byte, word32) << 16<i32> | CONVERT(bLoc11, byte, word32) | CONVERT(bLoc12, byte, word32) << 8<i32>
	Mem154[s0_83 + 128<i32>:word32] = a3_150
	word32 a6_155 = 3<32>
	word32 a7_156 = 4<32>
l2306514C:
	a3_150 = a4_138 << 0x1F<u32> | a3_150 >>u 1<i32>
	word32 a1_178 = (a7_156 << 3<u32>) + s0_83
	Mem180[a3_150 + 64<i32>:word32] = a1_178
	a4_138 = a2_125 << 0x1F<u32> | a4_138 >>u 1<i32>
	Mem181[a4_138 + 68<i32>:word32] = a1_178
	a2_125 = a5_126 << 0x1F<u32> | a2_125 >>u 1<i32>
	Mem182[a1_178 + 192<i32>:word32] = a2_125
	a5_126 = a5_126 >>u 1<i32> ^ (a3_150 & 1<i32>) + 0xE1000000<32>
	Mem183[a1_178 + 196<i32>:word32] = a5_126
	a6_155 = a6_155 + 0xFFFFFFFF<32>
	a7_156 = a7_156 >> 1<u32>
	branch a6_155 != 0<32> l2306514C
l23065192:
	word32 a3_187 = 3<32>
	word32 a2_188 = 2<32>
l2306519E:
	word32 a1_192 = a2_188 << 3<u32>
	word32 t1_196 = s0_83 + 192<i32> + a1_192
	word32 a7_194 = s0_83 + 64<i32> + a1_192
	word32 s1_198 = Mem197[t1_196:int32]
	word32 t2_199 = Mem197[t1_196 + 4<i32>:int32]
	word32 t0_200 = Mem197[a7_194:int32]
	word32 t6_201 = Mem197[a7_194 + 4<i32>:int32]
	word32 a5_203 = s0_83 + 72<i32> + 128<i32>
	word32 a4_204 = 8<32>
l230651C0:
	word32 t3_210 = t1_196 + a4_204
	Mem214[t3_210:word32] = Mem206[a5_203 + 0<i32>:int32] ^ s1_198
	a5_203 = a5_203 + 8<32>
	Mem218[t3_210 + 4<i32>:word32] = Mem214[a5_203 + 124<i32>:int32] ^ t2_199
	word32 t3_221 = a7_194 + a4_204
	Mem225[t3_221:word32] = Mem218[a5_203 + -8<i32>:int32] ^ t0_200
	Mem229[t3_221 + 4<i32>:word32] = Mem225[a5_203 + -4<i32>:int32] ^ t6_201
	a4_204 = a4_204 + 8<32>
	branch a1_192 != a4_204 l230651C0
l23065200:
	a3_187 = a3_187 + 0xFFFFFFFF<32>
	a2_188 = a2_188 << 1<i32>
	branch a3_187 != 0<32> l2306519E
l23065206:
	return
mbedtls_gcm_setkey_exit:


word32 mbedtls_gcm_starts(word32 ra, word32 a0, word32 a1, word32 a2, word32 a3, word32 a5, word32 s5, word32 dwArg28, word32 dwArg68, word32 dwArg94, word32 dwArgB0, word32 dwArgB4, word32 dwArgD8, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a5Out, ptr32 & a7Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_cipher_auth_encrypt
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a5:[0..31] ra:[0..31] s5:[0..31] Stack +0028:[0..31] Stack +0068:[0..31] Stack +0094:[0..31] Stack +00B0:[0..31] Stack +00B4:[0..31] Stack +00D8:[0..31]
// LiveOut: a0 a5 a7 ra s0 s1 s2 s3 s4 s5 s6
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s5 s6 s7 s8 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_gcm_starts_entry:
l23065216:
	word32 a5_163
	word32 a2_544
	word32 a3_545
	word32 a4_546
	word32 a5_547
	word32 a0_535
	word32 a4_539
	word32 a5_540
	word32 t1_541
	word32 a0_542
	word32 a1_543
	word32 a1_536
	word32 a2_537
	word32 a3_538
	word32 t1_534
	word32 ra_204 = memset(memset(ra, a0 + 352<i32>, 0<32>, 0x10<32>, out t1_534, out a0_535, out a1_536, out a2_537, out a3_538, out a4_539, out a5_540), a0 + 368<i32>, 0<32>, 0x10<32>, out t1_541, out a0_542, out a1_543, out a2_544, out a3_545, out a4_546, out a5_547)
	Mem65[a0 + 320<i32>:word32] = 0<32>
	Mem66[a0 + 328<i32>:word32] = 0<32>
	Mem67[a0 + 384<i32>:word32] = a1
	Mem68[a0 + 324<i32>:word32] = 0<32>
	Mem69[a0 + 332<i32>:word32] = 0<32>
	word32 s1_127 = a0 + 352<i32>
	word32 s0_117 = a0
	word32 s5_138 = a2
	word32 s7_18 = a1
	word32 s2_137 = a3
	branch a3 != 0xC<32> l230652C0
l230652C0:
	word32 a4_553
	word32 a5_554
	word32 t1_548
	word32 a0_549
	word32 a1_550
	word32 a2_551
	word32 a3_552
	ra_204 = memset(ra_204, fp + -64<i32>, 0<32>, 0x10<32>, out t1_548, out a0_549, out a1_550, out a2_551, out a3_552, out a4_553, out a5_554)
l230652EC:
	branch s2_137 != 0<32> l23065316
l23065316:
	s7_18 = s2_137
	branch s2_137 <=u 0x10<32> l2306531E
l2306531C:
	s7_18 = 0x10<32>
l2306531E:
	word32 a4_103 = s1_127
	word32 a5_101 = 0<32>
l23065322:
	a4_103 = a4_103 + 1<32>
	Mem110[a4_103 + 4095<i32>:byte] = SLICE(CONVERT(Mem104[s5_138 + a5_101:byte], byte, word32) ^ CONVERT(Mem104[a4_103:byte], byte, word32), byte, 0)
	a5_101 = a5_101 + 1<32>
	branch s7_18 != a5_101 l23065322
l2306533C:
	word32 s2_128
	word32 a1_572
	word32 a5_573
	word32 a7_574
	s0_117 = gcm_mult(s1_127, s0_117, s1_127, s1_127, a5_101, out s1_127, out a1_572, out a5_573, out a7_574, out s2_128)
	s2_137 = s2_128 - s7_18
	s5_138 = s5_138 + s7_18
l230652F0:
	word32 a4_139 = s1_127
	word32 a5_143 = fp + -64<i32>
l230652F4:
	a4_139 = a4_139 + 1<32>
	Mem152[a4_139 + 4095<i32>:byte] = SLICE(CONVERT(Mem145[a4_139:byte], byte, word32) ^ CONVERT(Mem145[a5_143:byte], byte, word32), byte, 0)
	a5_143 = a5_143 + 1<32>
	branch a0 + 368<i32> != a4_139 l230652F4
l2306530A:
	word32 a1_562
	word32 a7_563
	word32 s2_564
	s0_117 = gcm_mult(s1_127, s0_117, s1_127, s1_127, a5_143, out s1_127, out a1_562, out a5_163, out a7_563, out s2_564)
l23065274:
	word32 a3_557
	word32 a4_558
	word32 a5_559
	word32 a6_560
	word32 a7_561
	word32 a1_555
	word32 a2_556
	memcpy(a0 + 352<i32>, a2, 0xC<32>, out a1_555, out a2_556, out a3_557, out a4_558, out a5_559, out a6_560, out a7_561)
	Mem194[a0 + 367<i32>:byte] = 1<8>
	a5_163 = 1<32>
l23065284:
	word32 a0_222
	word32 s4_226
	word32 a1_566
	word32 a3_567
	word32 s2_568
	word32 s7_569
	word32 s8_570
	word32 s1_565
	word32 s0_225
	word32 s5_230
	word32 s6_235
	word32 a5_232
	word32 a7_238
	word32 s3_240
	mbedtls_cipher_update(ra_204, s0_117, s1_127, 0x10<32>, s0_117 + 336<i32>, fp + -68<i32>, a5_163, a5, s5_138, s7_18, dwLoc18, dwArg28, s5, dwArg68, dwArg94, dwArgB0, dwArgB4, dwArgD8, out s0_225, out s1_565, out a0_222, out a1_566, out a3_567, out a5_232, out a7_238, out s2_568, out s3_240, out s4_226, out s5_230, out s6_235, out s7_569, out s8_570)
	word32 s2_247 = a0_222
	branch a0_222 != 0<32> l230652A6
l23065298:
	Mem248[s0_225 + 328<i32>:word32] = s3_240
	Mem249[s0_225 + 332<i32>:word32] = 0<32>
	s5_230 = 0x10<32>
l230652A2:
	branch s3_240 != 0<32> l2306534E
l2306534E:
	word32 s1_252 = s3_240
	branch s3_240 <=u 0x10<32> l23065356
l23065354:
	s1_252 = 0x10<32>
l23065356:
	word32 a4_257 = s4_226
	word32 a5_258 = 0<32>
l2306535A:
	a4_257 = a4_257 + 1<32>
	Mem269[a4_257 + 4095<i32>:byte] = SLICE(CONVERT(Mem263[s6_235 + a5_258:byte], byte, word32) ^ CONVERT(Mem263[a4_257:byte], byte, word32), byte, 0)
	a5_258 = a5_258 + 1<32>
	branch s1_252 != a5_258 l2306535A
l23065374:
	word32 s1_286
	word32 a1_571
	s0_225 = gcm_mult(s1_252, s0_225, s4_226, s4_226, a5_258, out s1_286, out a1_571, out a5_232, out a7_238, out s2_247)
	s3_240 = s3_240 - s1_286
	s6_235 = s6_235 + s1_286
l230652A6:
	s0Out = dwArgCC
	s1Out = dwLoc4C
	a0Out = s2_247
	a5Out = a5_232
	a7Out = a7_238
	s2Out = s2_247
	s3Out = s3_240
	s4Out = dwArg0168
	s5Out = s5_230
	s6Out = s6_235
	return dwLoc08
mbedtls_gcm_starts_exit:


word32 mbedtls_gcm_update(word32 a0, word32 a1, word32 a2, word32 a3, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a5Out, ptr32 & a7Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_cipher_update
//      mbedtls_cipher_auth_encrypt
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31]
// LiveOut: a0 a1 a3 a5 a7 ra s0 s1 s2 s3 s4 s5 s6 s7 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s5 s6 s7 s8 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_gcm_update_entry:
l23065386:
	word32 a0_125
	word32 a5_129
	word32 s2_120
	word32 s0_193 = a0
	word32 s1_204 = a1
	word32 s6_117 = a2
	word32 s7_118 = a3
	branch a2 >=u a3 l230653B4
l230653AA:
	a5_129 = a3 - a2
	a0_125 = 0xFFFFFFEC<32>
	s2_120 = s2
	branch a5_129 <u a1 l230653FA
l230653B4:
	word32 a2_37 = Mem24[a0 + 320<i32>:int32]
	word32 a4_40 = a1 + a2_37
	word32 a3_38 = Mem24[a0 + 324<i32>:int32]
	a5_129 = CONVERT(a4_40 <u a1, bool, word32) + a3_38
	branch a5_129 <u a3_38 l230654A6
l230653CA:
	branch a3_38 != a5_129 l230653D2
l230653CE:
	branch a4_40 <u a2_37 l230654A6
l230653D2:
	branch a5_129 >u 0xF<32> l230654A6
l230653D8:
	branch a5_129 != 0xF<32> l230653E2
l230653DC:
	branch a4_40 >u 0xFFFFFFE0<32> l230654A6
l230654A6:
	a0_125 = 0xFFFFFFEC<32>
	s2_120 = s2
l230653E2:
	Mem51[a0 + 320<i32>:word32] = a4_40
	Mem53[a0 + 324<i32>:word32] = a5_129
	s2_120 = 0x10<32>
	s3 = a0 + 363<i32>
	word32 s4_122 = a0 + 352<i32>
	s5 = 1<32>
l230653F6:
	branch s1_204 != 0<32> l23065412
l23065412:
	branch s2_120 >=u s1_204 l2306541A
l23065418:
l2306541A:
	word32 a4_64 = s0_193 + 367<i32>
l2306541E:
	word32 a5_69 = CONVERT(Mem66[a4_64:byte], byte, word32) + 1<32> & 255<i32>
	Mem70[a4_64:byte] = SLICE(a5_69, byte, 0)
	branch a5_69 != 0<32> l23065434
l2306542E:
	a4_64 = a4_64 + 0xFFFFFFFF<32>
	branch a4_64 != s3 l2306541E
l23065434:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg56 = <invalid>
	word32 stackArg120 = <invalid>
	word32 stackArg152 = <invalid>
	word32 stackArg184 = <invalid>
	word32 stackArg228 = <invalid>
	word32 stackArg256 = <invalid>
	word32 stackArg260 = <invalid>
	word32 stackArg296 = <invalid>
	word32 s0_115
	word32 s1_116
	word32 s8_124
	word32 a3_507
	ra = mbedtls_cipher_update(ra, s0_193, s4_122, 0x10<32>, fp + -64<i32>, fp + -68<i32>, a5, s3, s5, s7_118, stackArg56, stackArg120, stackArg152, stackArg184, stackArg228, stackArg256, stackArg260, stackArg296, out s0_115, out s1_116, out a0_125, out a1, out a3_507, out a5_129, out a7, out s2_120, out s3, out s4_122, out s5, out s6_117, out s7_118, out s8_124)
	branch a0_125 != 0<32> l230653FA
l23065444:
	word32 a5_134 = s0_115 + 368<i32>
	word32 a4_135 = 0<32>
l2306544C:
	word32 a1_142 = s6_117 + a4_135
	branch Mem138[s0_115 + 384<i32>:int32] != 0<32> l23065464
l23065456:
	Mem147[a5_134:byte] = SLICE(CONVERT(Mem138[a1_142:byte], byte, word32) ^ CONVERT(Mem138[a5_134:byte], byte, word32), byte, 0)
l23065464:
	word32 a3_157 = CONVERT(Mem154[fp + -64<i32> + a4_135:byte], byte, word32) ^ CONVERT(Mem154[a1_142:byte], byte, word32)
	Mem161[s7_118 + a4_135:byte] = SLICE(a3_157, byte, 0)
	branch Mem161[s0_115 + 384<i32>:int32] != s5 l2306548C
l23065482:
	Mem169[a5_134:byte] = SLICE(a3_157 ^ CONVERT(Mem161[a5_134:byte], byte, word32), byte, 0)
l2306548C:
	a4_135 = a4_135 + 1<32>
	a5_134 = a5_134 + 1<32>
	branch s8_124 != a4_135 l2306544C
l23065494:
	word32 s1_194
	s0_193 = gcm_mult(s1_116, s0_115, s0_115 + 368<i32>, s0_115 + 368<i32>, a5_134, out s1_194, out a1, out a5_129, out a7, out s2_120)
	s1_204 = s1_194 - s8_124
	s6_117 = s6_117 + s8_124
	s7_118 = s7_118 + s8_124
l230653F8:
	a0_125 = 0<32>
l230653FA:
	s0Out = dwArgCC
	s1Out = dwLoc4C
	a0Out = a0_125
	a1Out = a1
	a3Out = s2
	a5Out = a5_129
	a7Out = a7
	s2Out = s2_120
	s3Out = s3
	s4Out = dwArg0168
	s5Out = s5
	s6Out = s6_117
	s7Out = s7_118
	s8Out = dwArg0148
	return dwLoc08
mbedtls_gcm_update_exit:


word32 mbedtls_gcm_finish(word32 ra, word32 a0, word32 a1, word32 a2, word32 dwArg0198, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_gcm_crypt_and_tag
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] ra:[0..31] Stack +0198:[0..31]
// LiveOut: a0 a5 ra s0 s1 s2 s3 s4 s5 s6
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s5 s6 s7 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: s8 sp
mbedtls_gcm_finish_entry:
l230654AA:
	word32 a0_159
	word32 s5_100 = Mem23[a0 + 320<i32>:int32]
	word32 s7_27 = Mem23[a0 + 328<i32>:int32]
	word32 s1_136 = Mem23[a0 + 324<i32>:int32] << 3<i32> | s5_100 >>u 0x1D<u32>
	word32 s2_137 = s7_27 >>u 0x1D<u32> | Mem23[a0 + 332<i32>:int32] << 3<i32>
	word32 a5_156 = 0xC<32>
	branch a2 >u 0xFFFFFFF0<32> l230655FC
l230655FC:
	a0_159 = 0xFFFFFFEC<32>
l230654EC:
	word32 a1_321
	word32 a2_322
	word32 a3_323
	word32 a4_324
	word32 a6_326
	word32 a5_325
	word32 a7_327
	memcpy(a1, a0 + 336<i32>, a2, out a1_321, out a2_322, out a3_323, out a4_324, out a5_325, out a6_326, out a7_327)
	s6 = a2
	s3 = s5_100 << 3<u32>
	a5_156 = s5_100 << 3<u32> | s7_27 << 3<u32> | (s1_136 | s2_137)
	branch a5_156 != 0<32> l2306552A
l2306552A:
	word32 t1_328
	word32 a0_329
	word32 a1_330
	word32 a2_331
	word32 a3_332
	word32 a4_333
	word32 a5_334
	ra = memset(ra, fp + -64<i32>, 0<32>, 0x10<32>, out t1_328, out a0_329, out a1_330, out a2_331, out a3_332, out a4_333, out a5_334)
	s5_100 = s5_100 << 11<i32>
	s3 = s5_100 << 11<i32> | (s5_100 << 0x13<32>) >>u 0x18<u32>
	word32 a5_110 = fp + -64<i32>
	word32 a4_112 = a0 + 368<i32>
l230655C0:
	a4_112 = a4_112 + 1<32>
	Mem121[a4_112 + 4095<i32>:byte] = SLICE(CONVERT(Mem114[a4_112:byte], byte, word32) ^ CONVERT(Mem114[a5_110:byte], byte, word32), byte, 0)
	a5_110 = a5_110 + 1<32>
	branch a4_112 != a0 + 384<i32> l230655C0
l230655D6:
	word32 a1_335
	word32 a5_336
	word32 a7_337
	word32 s0_135 = gcm_mult(a0 + 368<i32>, a0, a0 + 368<i32>, a0 + 368<i32>, a5_110, out s1_136, out a1_335, out a5_336, out a7_337, out s2_137)
	word32 a1_146 = s0_135
	s6 = a2 + s0_135
l230655E4:
	a1_146 = a1_146 + 1<32>
	a5_156 = CONVERT(Mem150[a1_146:byte], byte, word32) ^ CONVERT(Mem150[s1_136:byte], byte, word32)
	Mem157[a1_146 + 4095<i32>:byte] = SLICE(a5_156, byte, 0)
	s1_136 = s1_136 + 1<32>
	branch s6 != a1_146 l230655E4
l230655FA:
l23065510:
	a0_159 = 0<32>
l23065512:
	0<32> = dwArg0198
	s0Out = dwArg0158
	s1Out = s1_136
	a0Out = a0_159
	a5Out = a5_156
	s2Out = s2_137
	s3Out = s3
	s4Out = dwArgF4
	s5Out = s5_100
	s6Out = s6
	return ra
mbedtls_gcm_finish_exit:


word32 mbedtls_gcm_crypt_and_tag(word32 ra, word32 a0, word32 a1, word32 a3, word32 a4, word32 a6, word32 s5, word32 dwArg38, word32 dwArg80, word32 dwArg84, word32 dwArgA8, word32 dwArg0128, word32 dwArg0198, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_cipher_auth_encrypt
//      mbedtls_gcm_auth_decrypt
// MayUse:  a0:[0..31] a1:[0..31] a3:[0..31] a4:[0..31] a6:[0..31] ra:[0..31] s5:[0..31] Stack +0038:[0..31] Stack +0080:[0..31] Stack +0084:[0..31] Stack +00A8:[0..31] Stack +0128:[0..31] Stack +0198:[0..31]
// LiveOut: a0 a5 ra s0 s1 s2 s3 s4 s5 s6
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s5 s6 s7 s8 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_gcm_crypt_and_tag_entry:
l23065600:
	word32 a7_41
	word32 s0_43
	word32 a0_160
	word32 a5_169
	word32 s1_178
	word32 s2_180
	word32 s3_182
	word32 s4_184
	word32 s5_186
	word32 s6_188
	word32 ra_175 = mbedtls_gcm_starts(ra, a0, a1, a3, a4, a6, s5, dwLoc08, dwArg38, ra, dwArg80, dwArg84, dwArgA8, out s0_43, out s1_178, out a0_160, out a5_169, out a7_41, out s2_180, out s3_182, out s4_184, out s5_186, out s6_188)
	branch a0_160 != 0<32> l23065650
l23065628:
	word32 s0_74
	word32 a1_216
	word32 a3_217
	word32 a7_218
	word32 s7_219
	word32 s8_220
	ra_175 = mbedtls_gcm_update(s0_43, s3_182, a7_41, s4_184, out s0_74, out s1_178, out a0_160, out a1_216, out a3_217, out a5_169, out a7_218, out s2_180, out s3_182, out s4_184, out s5_186, out s6_188, out s7_219, out s8_220)
	branch a0_160 != 0<32> l23065650
l23065650:
	0<32> = dwArg0128
	s0Out = dwArgE4
	s1Out = s1_178
	a0Out = a0_160
	a5Out = a5_169
	s2Out = s2_180
	s3Out = s3_182
	s4Out = s4_184
	s5Out = s5_186
	s6Out = s6_188
	return ra_175
l23065638:
	0<32> = dwArg0128
l2306564C_thunk_mbedtls_gcm_finish:
	word32 a0_109
	word32 a5_112
	word32 s0_114
	word32 s1_115
	word32 s2_116
	word32 s4_117
	word32 s5_118
	word32 s3_126
	word32 s6_127
	word32 ra_125 = mbedtls_gcm_finish(ra_175, s0_74, s1_178, s2_180, dwArg0198, out s0_114, out s1_115, out a0_109, out a5_112, out s2_116, out s3_126, out s4_117, out s5_118, out s6_127)
	s0Out = s0_114
	s1Out = s1_115
	a0Out = a0_109
	a5Out = a5_112
	s2Out = s2_116
	s3Out = s3_126
	s4Out = s4_117
	s5Out = s5_118
	s6Out = s6_127
	return ra_125
mbedtls_gcm_crypt_and_tag_exit:


word32 mbedtls_gcm_auth_decrypt(word32 a0, word32 a2, word32 a3, word32 a5, word32 a7, word32 s5, word32 dwArg44, word32 dwArg68, word32 dwArgE8, word32 dwArg0158, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & s2Out, ptr32 & s3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_cipher_auth_decrypt
// MayUse:  a0:[0..31] a2:[0..31] a3:[0..31] a5:[0..31] a7:[0..31] s5:[0..31] Stack +0044:[0..31] Stack +0068:[0..31] Stack +00E8:[0..31] Stack +0158:[0..31]
// LiveOut: a0 ra s0 s1 s2 s3
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s2 s3 s4 s5 s6 s7 s8 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_gcm_auth_decrypt_entry:
l23065660:
	word32 s2_50
	word32 s3_51
	word32 s4_52
	word32 s5_197
	word32 s6_198
	word32 a5_196
	word32 s0_48
	word32 a0_138
	word32 s1_156
	word32 ra_47 = mbedtls_gcm_crypt_and_tag(dwLoc18, a0, 0<32>, a2, a3, a5, s5, dwLoc08, a7, dwArg44, dwArg68, dwArgE8, dwArg0158, out s0_48, out s1_156, out a0_138, out a5_196, out s2_50, out s3_51, out s4_52, out s5_197, out s6_198)
	word32 a5_65 = 0<32>
	branch a0_138 == 0<32> l230656BC
l230656BC:
	branch a5_65 != s2_50 l230656A6
l230656A6:
	a5_65 = a5_65 + 1<32>
	a0_138 = a0_138 | CONVERT(Mem36[s4_52 + a5_65:byte], byte, word32) ^ CONVERT(Mem36[s3_51 + a5_65:byte], byte, word32)
l230656C0:
	s1_156 = s1_156 + s0_48
	branch a0_138 == 0<32> l23065696
l230656C4:
	branch s0_48 != s1_156 l230656CC
l230656CC:
	Mem84[s0_48:byte] = 0<8>
	s0_48 = s0_48 + 1<32>
l230656C8:
	a0_138 = 0xFFFFFFEE<32>
l23065696:
	s0Out = dwArg0158
	s1Out = s1_156
	a0Out = a0_138
	s2Out = s2_50
	s3Out = s3_51
	return ra_47
mbedtls_gcm_auth_decrypt_exit:


word32 mbedtls_gcm_free(word32 ra, word32 a0, word32 a5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      gcm_ctx_free
// MayUse:  a0:[0..31] a5:[0..31] ra:[0..31]
// LiveOut: a5
// Trashed: a0 a2 a5
// Preserved: s0 sp
mbedtls_gcm_free_entry:
l230656D4:
	word32 a5_30
	mbedtls_cipher_free(ra, a0, a5, out a5_30)
	word32 s0_15 = a0
l230656E4:
	branch s0_15 != a0 + 392<i32> l230656F0
l230656F0:
	Mem17[s0_15:byte] = 0<8>
	s0_15 = s0_15 + 1<32>
l230656E8:
	return a0 + 392<i32>
mbedtls_gcm_free_exit:


word32 mbedtls_md_info_from_type(word32 a0, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_pk_sign
//      mbedtls_pk_verify_ext
//      mbedtls_rsa_rsaes_oaep_encrypt
//      mbedtls_rsa_rsaes_oaep_decrypt
//      mbedtls_rsa_pkcs1_sign
//      mbedtls_rsa_rsassa_pss_verify_ext
//      mbedtls_rsa_pkcs1_verify
//      tls_prf_sha256
//      mbedtls_ssl_derive_keys
//      x509_crt_verify_top.isra.7
//      x509_crt_verify_child
// MayUse:  a0:[0..31]
// LiveOut: a0 a5
// Trashed: a0 a5
// Preserved: sp
mbedtls_md_info_from_type_entry:
l230656F8:
	word32 a0_5 = a0 + 0xFFFFFFFD<32> & 255<i32>
	branch a0_5 >u 3<32> l23065714
l23065714:
	a5Out = 3<32>
	return 0<32>
l23065704:
	word32 a0_13 = Mem0[(a0_5 << 2<i32>) + 0x2308B308<32>:word32]
	a5Out = 0x2308B308<32>
	return a0_13
mbedtls_md_info_from_type_exit:


word32 mbedtls_md_init(word32 ra, word32 a0, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_rsaes_oaep_encrypt
//      mbedtls_rsa_rsaes_oaep_decrypt
//      mbedtls_rsa_pkcs1_sign
//      mbedtls_rsa_rsassa_pss_verify_ext
//      tls_prf_sha256
//      mbedtls_ssl_setup
// MayUse:  a0:[0..31] ra:[0..31]
// LiveOut: a3 a4 a5 ra
// Trashed: a0 a1 a2 a3 a4 a5 ra t0 t1
// Preserved: sp
mbedtls_md_init_entry:
l23065718:
l2306571C_thunk_memset:
	word32 a3_10
	word32 a4_11
	word32 a5_12
	word32 t1_19
	word32 a0_20
	word32 a1_21
	word32 a2_22
	word32 ra_13 = memset(ra, a0, 0<32>, 0xC<32>, out t1_19, out a0_20, out a1_21, out a2_22, out a3_10, out a4_11, out a5_12)
	a3Out = a3_10
	a4Out = a4_11
	a5Out = a5_12
	return ra_13
mbedtls_md_init_exit:


word32 mbedtls_md_free(word32 ra, word32 a0, word32 a2, word32 a4, word32 a5, word32 mstatus, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_rsaes_oaep_encrypt
//      mbedtls_rsa_rsaes_oaep_decrypt
//      mbedtls_rsa_pkcs1_sign
//      mbedtls_rsa_rsassa_pss_verify_ext
//      tls_prf_sha256
//      mbedtls_ssl_transform_free
// MayUse:  a0:[0..31] a2:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31]
// LiveOut: a2 a5
// Trashed: a0 a2 a5
// Preserved: a1 a3 a4 a6 ra s0 s1 s4 sp t3 tp
mbedtls_md_free_entry:
l23065720:
	branch a0 == 0<32> l2306576C
l2306576C:
	a5Out = a5
	return a2
l23065722:
	word32 sp_14 = fp + 0xFFFFFFF0<32>
	word32 a0_10 = Mem8[a5:word32]
	branch a5 == 0<32> l23065754
l2306572E:
	word32 a0_12 = Mem8[a0_10 + 4<i32>:word32]
	branch a0_12 == 0<32> l23065736
l23065732:
	word32 a5_13 = Mem8[a5 + 36<i32>:word32]
	word32 t3_82
	word32 s4_81
	word32 a1_79
	word32 a6_80
	word32 tp_78
	word32 s1_77
	word32 a3_76
	call a5_13 (retsize: 0;)
		uses: a0:a0_12,a1:a1_79,a2:a2_20,a3:a3_76,a4:a4_19,a5:a5_13,a6:a6_80,mstatus:mstatus,ra:ra,s0:a0_10,s1:s1_77,s4:s4_81,t3:t3_82,tp:tp_78
		defs: a0:a0_15,a1:a1_79,a2:a2_20,a3:a3_76,a4:a4_19,a5:a5_18,a6:a6_80,s1:s1_77,s4:s4_81,sp:sp_14,t3:t3_82,tp:tp_78
l23065736:
	word32 s0_23 = Mem8[a5 + 8<i32>:word32]
	branch a5 == 0<32> l2306574C
l2306573A:
	word32 a4_29 = (Mem8[a4 + 12<i32>:word32] << 1<i32>) + a5
l23065742:
	branch a5 != a4_29 l2306575C
l2306575C:
	Mem32[a5:byte] = 0<8>
	a5 = a5 + 1<32>
l23065746:
	word32 t3_169
	word32 s1_160
	word32 a0_161
	word32 a2_163
	word32 a1_162
	word32 s4_168
	word32 a6_167
	word32 a5_166
	word32 a4_165
	word32 a3_164
	vPortFree(a0_12, a2, a5, mstatus, Mem36[sp_14 + 344<i32>:word32], Mem36[sp_14 + 408<i32>:word32], out s0_23, out s1_160, out a0_161, out a1_162, out a2_163, out a3_164, out a4_165, out a5_166, out a6_167, out s4_168, out t3_169)
l2306574C:
	a5 = s0_23 + 12<i32>
l23065750:
	branch s0_23 != a5 l23065764
l23065764:
	Mem62[s0_23:byte] = 0<8>
	s0_23 = s0_23 + 1<32>
l23065754:
	a5Out = a5
	return dwArg10
mbedtls_md_free_exit:


word32 mbedtls_md_setup(word32 ra, word32 s0, word32 s1, word32 a0, word32 a1, word32 a2, word32 a3, word32 a4, word32 a5, word32 s2, word32 mstatus, word32 dwArg10, word32 dwArg14, word32 dwArg38, word32 dwArg0108, word32 dwArg0148, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s8Out, ptr32 & mstatusOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_rsaes_oaep_encrypt
//      mbedtls_rsa_rsaes_oaep_decrypt
//      mbedtls_rsa_pkcs1_sign
//      mbedtls_rsa_rsassa_pss_verify_ext
//      tls_prf_sha256
//      mbedtls_ssl_derive_keys
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] s0:[0..31] s1:[0..31] s2:[0..31] Stack +0010:[0..31] Stack +0014:[0..31] Stack +0038:[0..31] Stack +0108:[0..31] Stack +0148:[0..31]
// LiveOut: a0 a2 a3 a4 a5 mstatus ra s1 s2 s3 s4 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 mstatus ra s1 s2 s3 s4 s8 t0 t1 t3 tp
// Preserved: s0 sp
mbedtls_md_setup_entry:
l2306576E:
	branch a1 == 0<32> l230657B8
l23065770:
	branch a0 == 0<32> l230657B8
l230657B8:
	s1Out = s1
	a0Out = 0xFAFFFF00<32>
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5
	s2Out = s2
	s3Out = s3
	s4Out = s4
	s8Out = s8
	mstatusOut = mstatus
	return ra
l23065772:
	word32 a0_105
	word32 a1_17 = Mem15[a5 + 32<i32>:word32]
	word32 a1_23
	word32 a0_24
	word32 tp_31
	word32 a6_97
	word32 t0_101
	word32 t1_102
	word32 t3_103
	word32 s0_25
	word32 a5_125
	word32 ra_141
	word32 s1_148
	word32 s2_152
	word32 s3_158
	word32 s4_164
	word32 s8_100
	call a5 (retsize: 0;)
		uses: a0:a0,a1:a1_17,a2:a2,a3:a3,a4:a4,a5:a5,a6:a6_97,mstatus:mstatus,ra:ra,s0:a0,s1:a1_17,s2:a2,s3:s3_98,s4:s4_99,s8:s8_100,Stack +0000:s2,Stack +0004:s0,Stack +0080:s1,Stack +0084:ra,t0:t0_101,t1:t1_102,t3:t3_103,tp:tp_31
		defs: a0:a0_24,a1:a1_23,a3:a3_96,a4:a4_95,a5:a5_29,a6:a6_97,mstatus:mstatus_94,ra:ra_28,s0:s0_25,s1:s1_26,s2:s2_27,s3:s3_98,s4:s4_99,s8:s8_100,t0:t0_101,t1:t1_102,t3:t3_103,tp:tp_31
	Mem32[a0_24 + 4<i32>:word32] = s0_25
	branch a0_24 == 0<32> l230657A0
l2306578A:
	branch s2_152 == 0<32> l230657A8
l2306578E:
	word32 a1_38
	word32 a2_225
	ra_141 = mycalloc(ra_141, Mem32[a1_23 + 12<i32>:word32], 2<32>, a1_23, a3, a4, a5_125, mstatus, dwArg10, dwArg14, dwArg0108, dwArg0148, out s0_25, out s1_148, out a1_38, out a2_225, out a3, out a4, out a5_125, out s2_152, out s3_158, out s4_164, out s8_100)
	Mem55[0xA<32>:word32] = s0_25
	branch true l230657A8
l230657A8:
	Mem58[s1_148:word32] = s0_25
	a0_105 = 0<32>
l2306579A:
	call a5_125 (retsize: 0;)
		uses: a0:2<32>,a1:a1_38,a3:a3_40,a4:a4_41,a5:a5_42,mstatus:mstatus,ra:ra_44,s1:Mem55[a5_42 + 36<i32>:word32],Stack +0020:dwArg10,Stack +0024:dwArg14,Stack +0118:dwArg0108,Stack +0158:dwArg0148
		defs: a3:a3_64,a4:a4_65,a5:a5_66,ra:ra_68,s1:s1_70,s2:s2_71,s3:s3_72,s4:s4_73,s8:s8_74
l230657A0:
	a0_105 = 0xFAFFFE80<32>
l230657AC:
	0<32> = dwArg38
	s1Out = s1_148
	a0Out = a0_105
	a2Out = dwArg10
	a3Out = a3
	a4Out = a4
	a5Out = a5_125
	s2Out = s2_152
	s3Out = s3_158
	s4Out = s4_164
	s8Out = s8_100
	mstatusOut = mstatus
	return ra_141
mbedtls_md_setup_exit:


word32 mbedtls_md_starts(word32 ra, word32 a0, word32 a5, word32 dwArg10, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mgf_mask
//      mbedtls_rsa_pkcs1_sign
//      mbedtls_rsa_rsassa_pss_verify_ext
// MayUse:  a0:[0..31] a5:[0..31] ra:[0..31] Stack +0010:[0..31]
// LiveOut: a5 ra
// Trashed: a0 a2 a5 ra
// Preserved: sp
mbedtls_md_starts_entry:
l230657C0:
	branch a0 == 0<32> l230657D8
l230657C2:
	word32 a0_6 = Mem0[a5:word32]
	branch a5 == 0<32> l230657D8
l230657D8:
	a5Out = a5
	return ra
l230657C6:
	word32 a5_13 = Mem11[a5 + 16<i32>:word32]
	word32 a5_16
	word32 ra_17
	call a5_13 (retsize: 0;)
		uses: a0:Mem11[a0_6 + 4<i32>:word32],a2:dwArg10,a5:a5_13,ra:ra,Stack +0084:ra
		defs: a5:a5_16,ra:ra_17
	a5Out = a5_16
	return ra_17
mbedtls_md_starts_exit:


word32 mbedtls_md_update(word32 ra, word32 a0, word32 a5, word32 dwArg10, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mgf_mask
//      mbedtls_rsa_pkcs1_sign
//      mbedtls_rsa_rsassa_pss_verify_ext
// MayUse:  a0:[0..31] a5:[0..31] ra:[0..31] Stack +0010:[0..31]
// LiveOut: a5 ra
// Trashed: a0 a2 a5 ra
// Preserved: sp
mbedtls_md_update_entry:
l230657E0:
	branch a0 == 0<32> l230657F8
l230657E2:
	word32 a0_6 = Mem0[a5:word32]
	branch a5 == 0<32> l230657F8
l230657F8:
	a5Out = a5
	return ra
l230657E6:
	word32 a5_13 = Mem11[a5 + 20<i32>:word32]
	word32 a5_16
	word32 ra_17
	call a5_13 (retsize: 0;)
		uses: a0:Mem11[a0_6 + 4<i32>:word32],a2:dwArg10,a5:a5_13,ra:ra,Stack +0084:ra
		defs: a5:a5_16,ra:ra_17
	a5Out = a5_16
	return ra_17
mbedtls_md_update_exit:


word32 mbedtls_md_finish(word32 ra, word32 a0, word32 a5, word32 dwArg10, ptr32 & a2Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mgf_mask
//      mbedtls_rsa_pkcs1_sign
//      mbedtls_rsa_rsassa_pss_verify_ext
// MayUse:  a0:[0..31] a5:[0..31] ra:[0..31] Stack +0010:[0..31]
// LiveOut: a2 a5 ra
// Trashed: a0 a2 a5 ra
// Preserved: sp
mbedtls_md_finish_entry:
l23065800:
	branch a0 == 0<32> l23065818
l23065802:
	word32 a0_6 = Mem0[a5:word32]
	branch a5 == 0<32> l23065818
l23065818:
	a2Out = a2
	a5Out = a5
	return ra
l23065806:
	word32 a5_13 = Mem11[a5 + 24<i32>:word32]
	word32 a5_16
	word32 ra_17
	call a5_13 (retsize: 0;)
		uses: a0:Mem11[a0_6 + 4<i32>:word32],a2:dwArg10,a5:a5_13,ra:ra,Stack +0084:ra
		defs: a5:a5_16,ra:ra_17
	a2Out = dwArg10
	a5Out = a5_16
	return ra_17
mbedtls_md_finish_exit:


word32 mbedtls_md(word32 ra, word32 a0, word32 a1, word32 a2, word32 a3, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_rsaes_oaep_encrypt
//      mbedtls_rsa_rsaes_oaep_decrypt
//      x509_crt_verify_top.isra.7
//      x509_crt_verify_child
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] ra:[0..31]
// LiveOut: a1 a5 ra
// Trashed: a0 a1 a2 a3 a5 ra
// Preserved: sp
mbedtls_md_entry:
l23065820:
	branch a0 == 0<32> l2306583A
l2306583A:
	a1Out = a1
	a5Out = a0
	return ra
l23065824:
	word32 a5_19
	word32 ra_20
	word32 a1_21
	call Mem9[a0 + 28<i32>:word32] (retsize: 0;)
		uses: a0:a1,a1:a2,a2:a3,a3:a3,ra:ra,Stack +0084:ra
		defs: a1:a1_21,a5:a5_19,ra:ra_20
	a1Out = a1_21
	a5Out = a5_19
	return ra_20
mbedtls_md_exit:


word32 mbedtls_md_hmac_starts(word32 ra, word32 a0, word32 a1, word32 a2, word32 a4, word32 a5, word32 s2, word32 s4, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a2Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      tls_prf_sha256
//      mbedtls_ssl_derive_keys
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a4:[0..31] a5:[0..31] ra:[0..31] s2:[0..31] s4:[0..31]
// LiveOut: a2 a4 a5 ra s0 s1 s2 s3 s4 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 ra s0 s1 s2 s3 s4 s8 t0 t1 t3
// Preserved: sp
mbedtls_md_hmac_starts_entry:
l23065842:
	branch a0 == 0<32> l23065914
l23065914:
	s0Out = s0
	s1Out = s1
	a2Out = a2
	a4Out = a4
	a5Out = a5
	s2Out = s2
	s3Out = s3
	s4Out = s4
	s8Out = s8
	return ra
l23065844:
	word32 sp_145 = fp + -64<i32>
	word32 a0_20 = Mem18[a5:word32]
	branch a5 == 0<32> l2306591C
l23065858:
	word32 a0_23 = Mem18[a4 + 8<i32>:word32]
	branch a4 == 0<32> l2306591C
l2306591C:
l2306585C:
	word32 a5_26 = Mem18[a4 + 12<i32>:word32]
	word32 s1_221 = a1
	word32 s3_220 = a2
	branch a4 >=u a2 l2306588A
l23065866:
	word32 a5_31 = Mem18[a5_26 + 16<i32>:word32]
	word32 sp_33
	word32 a0_34
	word32 ra_36
	word32 s1_37
	word32 s2_38
	word32 s3_39
	word32 s4_40
	word32 a5_41
	word32 a4_42
	call a5_31 (retsize: 0;)
		uses: a0:Mem18[a0_23 + 4<i32>:word32],a1:a1,a2:a2,a3:a3_90,a4:a4,a5:a5_31,a6:a6_89,ra:ra,s0:a0_20,s1:a1,s2:s2,s3:a2,s4:s4,s8:s8_88,t0:t0_232,t1:t1_233,t3:t3_87
		defs: a0:a0_34,a4:a4_42,a5:a5_41,ra:ra_36,s1:s1_37,s2:s2_38,s3:s3_39,s4:s4_40,sp:sp_33
	word32 a5_52 = Mem18[a5_41 + 20<i32>:word32]
	word32 sp_55
	word32 a0_56
	word32 ra_58
	word32 s1_59
	word32 s2_60
	word32 s3_61
	word32 s4_62
	word32 a5_63
	word32 a4_64
	word32 a2_66
	call a5_52 (retsize: 0;)
		uses: a0:a0_34,a1:s1_37,a2:s3_39,a3:a3_90,a4:a4_42,a5:a5_52,a6:a6_89,ra:ra_36,s0:Mem18[a0_34 + 4<i32>:word32],s1:sp_33,s2:s2_38,s3:s3_39,s4:s4_40,s8:s8_88,t0:t0_232,t1:t1_233,t3:t3_87
		defs: a0:a0_56,a2:a2_66,a4:a4_64,a5:a5_63,ra:ra_58,s1:s1_59,s2:s2_60,s3:s3_61,s4:s4_62,sp:sp_55
	word32 a5_74 = Mem18[a5_63 + 24<i32>:word32]
	word32 t3_87
	word32 s8_88
	word32 a6_89
	word32 a3_90
	word32 t1_233
	word32 t0_232
	call a5_74 (retsize: 0;)
		uses: a0:a0_56,a1:sp_55,a2:a2_66,a3:a3_90,a4:a4_64,a5:a5_74,a6:a6_89,ra:ra_58,s0:Mem18[a0_56 + 4<i32>:word32],s1:s1_59,s2:s2_60,s3:s3_61,s4:s4_62,s8:s8_88,t0:t0_232,t1:t1_233,t3:t3_87
		defs: a2:a2_86,a3:a3_90,a5:a5_83,a6:a6_89,ra:ra_78,s1:s1_79,s8:s8_88,sp:sp_75,t0:t0_232,t1:t1_233,t3:t3_87
	s3_220 = Mem18[a5_26 + 8<i32>:int32]
l2306588A:
	word32 s2_96 = Mem18[Mem18[a5_26:word32] + 8<i32>:int32]
	word32 s4_101 = s2_96 + a2
	word32 a2_105
	word32 a0_116
	word32 t1_330
	word32 a4_332
	word32 a5_333
	word32 a3_331
	word32 a0_325
	word32 a3_327
	word32 a4_328
	word32 a5_329
	word32 a1_326
	word32 t1_324
	word32 a1_117
	word32 a2_118
	word32 ra_122 = memset(memset(ra, s2_96, 54<i32>, a2, out t1_324, out a0_325, out a1_326, out a2_105, out a3_327, out a4_328, out a5_329), s4_101, 92<i32>, a2_105, out t1_330, out a0_116, out a1_117, out a2_118, out a3_331, out a4_332, out a5_333)
	word32 a5_125 = 0<32>
l230658B0:
	branch s3_220 != a5_125 l230658E8
l230658E8:
	word32 a2_131 = s1_221 + a5_125
	word32 a3_129 = s2_96 + a5_125
	a1_117 = CONVERT(Mem132[a2_131:byte], byte, word32)
	Mem136[a3_129:byte] = SLICE(CONVERT(Mem132[a3_129:byte], byte, word32) ^ a1_117, byte, 0)
	word32 a3_138 = s4_101 + a5_125
	a2_118 = CONVERT(Mem136[a2_131:byte], byte, word32)
	Mem143[a3_138:byte] = SLICE(CONVERT(Mem136[a3_138:byte], byte, word32) ^ a2_118, byte, 0)
	a5_125 = a5_125 + 1<32>
l230658B4:
	word32 a5_146 = sp_145
l230658B6:
	Mem148[a5_146:byte] = 0<8>
	word32 a4_150 = sp_145 + 32<i32>
	a5_146 = a5_146 + 1<32>
	branch a5_146 != a4_150 l230658B6
l230658C2:
	word32 a5_156 = Mem148[a5_146 + 16<i32>:word32]
	word32 a0_168
	word32 ra_170
	word32 s1_171
	word32 s2_172
	word32 s3_173
	word32 s4_174
	word32 a4_176
	word32 a2_178
	call a5_156 (retsize: 0;)
		uses: a0:a0_116,a1:a1_164,a2:a2_166,a3:a3_205,a4:a4_150,a5:a5_156,a6:a6_204,ra:ra_122,s0:Mem148[a0_116 + 4<i32>:word32],s1:s1_221,s2:s2_96,s3:s3_220,s4:s4_101,s8:s8_203,t0:t0_206,t1:t1_207,t3:t3_202
		defs: a0:a0_168,a2:a2_178,a4:a4_176,ra:ra_170,s1:s1_171,s2:s2_172,s3:s3_173,s4:s4_174
	word32 t3_202
	word32 s8_203
	word32 a6_204
	word32 a3_205
	word32 t0_206
	word32 t1_207
	call a4_176 (retsize: 0;)
		uses: a0:a0_168,a1:s2_172,a2:a2_178,a3:a3_205,a4:a4_176,a5:Mem148[a2_178 + 12<i32>:word32],a6:a6_204,ra:ra_170,s0:Mem148[a0_168 + 4<i32>:word32],s1:s1_171,s2:s2_172,s3:s3_173,s4:s4_174,s8:s8_203,t0:t0_206,t1:t1_207,t3:t3_202
		defs: a3:a3_205,a4:a4_199,a5:a5_198,a6:a6_204,ra:ra_193,s1:s1_194,s2:s2_195,s3:s3_196,s8:s8_203,t0:t0_206,t1:t1_207,t3:t3_202
l230658D8:
	s0Out = dwArg0158
	s1Out = s1
	a2Out = dwArg0138
	a4Out = a4
	a5Out = a5
	s2Out = s2
	s3Out = s3
	s4Out = dwArgF4
	s8Out = dwArgD4
	return ra
mbedtls_md_hmac_starts_exit:


word32 mbedtls_md_hmac_update(word32 ra, word32 a0, word32 a4, word32 a5, word32 dwArg10, ptr32 & a0Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      tls_prf_sha256
//      mbedtls_ssl_write_record
//      mbedtls_ssl_read_record_layer
// MayUse:  a0:[0..31] a4:[0..31] a5:[0..31] ra:[0..31] Stack +0010:[0..31]
// LiveOut: a0 a4 a5 ra
// Trashed: a0 a2 a4 a5 ra
// Preserved: sp
mbedtls_md_hmac_update_entry:
l23065924:
	branch a0 == 0<32> l23065940
l23065926:
	branch a5 == 0<32> l23065940
l2306592A:
	word32 a0_8 = Mem0[a4 + 8<i32>:word32]
	branch a4 == 0<32> l23065940
l23065940:
	a0Out = 0xFAFFFF00<32>
	a4Out = a4
	a5Out = a5
	return ra
l2306592E:
	word32 a5_15 = Mem13[a5 + 20<i32>:word32]
	word32 a5_18
	word32 a4_19
	word32 ra_20
	call a5_15 (retsize: 0;)
		uses: a0:Mem13[a0_8 + 4<i32>:word32],a2:dwArg10,a4:a4,a5:a5_15,ra:ra,Stack +0084:ra
		defs: a4:a4_19,a5:a5_18,ra:ra_20
	a0Out = 0<32>
	a4Out = a4_19
	a5Out = a5_18
	return ra_20
mbedtls_md_hmac_update_exit:


word32 mbedtls_md_hmac_finish(word32 ra, word32 s0, word32 s1, word32 a0, word32 a1, word32 a4, word32 a5, word32 s2, word32 dwArg0100, word32 dwArg0104, word32 dwArg0128, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      tls_prf_sha256
//      mbedtls_ssl_write_record
//      mbedtls_ssl_read_record_layer
// MayUse:  a0:[0..31] a1:[0..31] a4:[0..31] a5:[0..31] ra:[0..31] s0:[0..31] s1:[0..31] s2:[0..31] Stack +0100:[0..31] Stack +0104:[0..31] Stack +0128:[0..31]
// LiveOut: a0 a1 a2 a4 a5 ra s1 s2
// Trashed: a0 a1 a2 a4 a5 ra s0 s1 s2 tp
// Preserved: sp
mbedtls_md_hmac_finish_entry:
l23065948:
	branch a0 == 0<32> l230659A4
l2306594A:
	branch a4 == 0<32> l230659A4
l2306594E:
	word32 a0_8 = Mem0[a5 + 8<i32>:word32]
	branch a5 == 0<32> l230659A4
l230659A4:
	s1Out = s1
	a0Out = 0xFAFFFF00<32>
	a1Out = a1
	a2Out = a2
	a4Out = a4
	a5Out = a5
	s2Out = s2
	return ra
l23065952:
	word32 a0_29
	word32 a4_30
	word32 a5_31
	word32 ra_32
	word32 s2_34
	word32 s1_35
	word32 a1_36
	call a5 (retsize: 0;)
		uses: a0:Mem19[a0_8 + 4<i32>:word32],a1:fp + -48<i32>,a2:dwArg0100,a4:Mem19[a5 + 24<i32>:word32],a5:a5,ra:ra,s0:a0_8,s1:s1 + a5,s2:a1,Stack +0010:s2,Stack +0014:s0,Stack +0090:s1,Stack +0094:ra,tp:dwArg0104
		defs: a0:a0_29,a1:a1_36,a4:a4_30,a5:a5_31,ra:ra_32,s1:s1_35,s2:s2_34
	word32 a5_41 = Mem19[a5_31 + 16<i32>:word32]
	word32 a0_43
	word32 a4_44
	word32 ra_46
	word32 s2_48
	word32 s1_49
	word32 a2_51
	call a5_41 (retsize: 0;)
		uses: a0:a0_29,a1:a1_36,a2:dwArg0100,a4:a4_30,a5:a5_41,ra:ra_32,s0:Mem19[a0_29 + 4<i32>:word32],s1:s1_35,s2:s2_34,tp:dwArg0104
		defs: a0:a0_43,a2:a2_51,a4:a4_44,ra:ra_46,s1:s1_49,s2:s2_48
	word32 sp_58
	word32 a0_59
	word32 a4_60
	word32 ra_62
	word32 s2_64
	word32 s1_65
	word32 a2_67
	call a4_44 (retsize: 0;)
		uses: a0:a0_43,a1:s1_49,a2:dwArg0100,a4:a4_44,a5:Mem19[a2_51 + 12<i32>:word32],ra:ra_46,s0:Mem19[a0_43 + 4<i32>:word32],s1:s1_49,s2:s2_48,tp:dwArg0104
		defs: a0:a0_59,a2:a2_67,a4:a4_60,ra:ra_62,s1:s1_65,s2:s2_64,sp:sp_58
	word32 a0_75
	word32 a4_76
	word32 a5_77
	word32 ra_78
	word32 s2_80
	word32 s1_81
	call a4_60 (retsize: 0;)
		uses: a0:a0_59,a1:sp_58,a2:dwArg0100,a4:a4_60,a5:Mem19[a2_67 + 8<i32>:word32],ra:ra_62,s0:Mem19[a0_59 + 4<i32>:word32],s1:s1_65,s2:s2_64,tp:dwArg0104
		defs: a0:a0_75,a4:a4_76,a5:a5_77,ra:ra_78,s1:s1_81,s2:s2_80
	word32 a5_88 = Mem19[a5_77 + 24<i32>:word32]
	word32 a4_91
	word32 a5_92
	word32 ra_93
	word32 s2_95
	word32 s1_96
	word32 a1_97
	call a5_88 (retsize: 0;)
		uses: a0:a0_75,a1:s2_80,a2:dwArg0100,a4:a4_76,a5:a5_88,ra:ra_78,s0:Mem19[a0_75 + 4<i32>:word32],s1:s1_81,s2:s2_80,tp:dwArg0104
		defs: a1:a1_97,a4:a4_91,a5:a5_92,ra:ra_93,s1:s1_96,s2:s2_95
	0<32> = dwArg0128
	s1Out = s1_96
	a0Out = 0<32>
	a1Out = a1_97
	a2Out = dwArg0100
	a4Out = a4_91
	a5Out = a5_92
	s2Out = s2_95
	return ra_93
mbedtls_md_hmac_finish_exit:


word32 mbedtls_md_hmac_reset(word32 ra, word32 a0, word32 a1, word32 a5, ptr32 & s0Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      tls_prf_sha256
//      mbedtls_ssl_write_record
//      mbedtls_ssl_read_record_layer
// MayUse:  a0:[0..31] a1:[0..31] a5:[0..31] ra:[0..31]
// LiveOut: a4 a5 ra s0
// Trashed: a0 a1 a2 a4 a5 ra s0 s8 t3
// Preserved: sp
mbedtls_md_hmac_reset_entry:
l230659AC:
	branch a0 == 0<32> l230659DC
l230659AE:
	branch a5 == 0<32> l230659DC
l230659DC:
	s0Out = s0
	a4Out = a4
	a5Out = a5
	return ra
l230659B2:
	word32 a0_15 = Mem13[a1 + 8<i32>:word32]
	branch a1 == 0<32> l230659E4
l230659E4:
l230659BE:
	word32 a5_20 = Mem16[a5 + 16<i32>:word32]
	word32 sp_22
	word32 a0_23
	word32 ra_25
	word32 a1_27
	word32 a4_29
	call a5_20 (retsize: 0;)
		uses: a0:Mem16[a0_15 + 4<i32>:word32],a1:a1,a2:a2_43,a4:a4_44,a5:a5_20,ra:ra,s0:a0_15,s8:s8_46,t3:t3_45
		defs: a0:a0_23,a1:a1_27,a4:a4_29,ra:ra_25,sp:sp_22
	word32 a2_34 = Mem16[sp_22 + 100<i32>:word32]
	word32 a2_43
	word32 t3_45
	word32 s8_46
	call a4_29 (retsize: 0;)
		uses: a0:a0_23,a1:a1_27,a2:a2_34,a4:a4_44,a5:Mem16[a2_34 + 12<i32>:word32],ra:ra_25,s0:Mem16[a0_23 + 4<i32>:word32],s8:s8_46,t3:t3_45
		defs: a2:a2_43,a4:a4_44,a5:a5_39,ra:ra_40,s0:s0_41,s8:s8_46,t3:t3_45
l230659D4:
	s0Out = s0
	a4Out = a4
	a5Out = a5
	return ra
mbedtls_md_hmac_reset_exit:


word32 mbedtls_md_process(word32 ra, word32 a0, word32 a5, word32 dwArg10, ptr32 & a0Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_read_record_layer
// MayUse:  a0:[0..31] a5:[0..31] ra:[0..31] Stack +0010:[0..31]
// LiveOut: a0 a5 ra
// Trashed: a0 a2 a5 ra
// Preserved: sp
mbedtls_md_process_entry:
l230659EC:
	branch a0 == 0<32> l23065A04
l230659EE:
	word32 a0_6 = Mem0[a5:word32]
	branch a5 == 0<32> l23065A04
l23065A04:
	a0Out = 0xFAFFFF00<32>
	a5Out = a5
	return ra
l230659F2:
	word32 a5_13 = Mem11[a5 + 44<i32>:word32]
	word32 a5_16
	word32 ra_17
	call a5_13 (retsize: 0;)
		uses: a0:Mem11[a0_6 + 4<i32>:word32],a2:dwArg10,a5:a5_13,ra:ra,Stack +0084:ra
		defs: a5:a5_16,ra:ra_17
	a0Out = 0<32>
	a5Out = a5_16
	return ra_17
mbedtls_md_process_exit:


word32 mbedtls_md_get_size(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_pk_sign
//      mbedtls_pk_verify_ext
//      mgf_mask
//      mbedtls_rsa_rsaes_oaep_encrypt
//      mbedtls_rsa_rsaes_oaep_decrypt
//      mbedtls_rsa_pkcs1_sign
//      mbedtls_rsa_rsassa_pss_verify_ext
//      mbedtls_rsa_pkcs1_verify
//      tls_prf_sha256
//      mbedtls_ssl_derive_keys
//      x509_crt_verify_top.isra.7
//      x509_crt_verify_child
// MayUse:  a0:[0..31]
// LiveOut: a0
// Trashed: a0
// Preserved: sp
mbedtls_md_get_size_entry:
l23065A0C:
	branch a0 == 0<32> l23065A14
l23065A14:
	return 0<32>
l23065A0E:
	return CONVERT(Mem0[a0 + 8<i32>:byte], byte, word32)
mbedtls_md_get_size_exit:


void md5_process_wrap(word32 a0, word32 a1, word32 dwArg3C, word32 dwArgE4, word32 dwArg0148)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] Stack +003C:[0..31] Stack +00E4:[0..31] Stack +0148:[0..31]
// LiveOut:
// Trashed: a0 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
md5_process_wrap_entry:
l23065A18:
l23065A18_thunk_mbedtls_md5_process:
	word32 s1_36
	word32 s2_37
	word32 s3_38
	word32 s4_39
	word32 s5_40
	word32 s6_41
	mbedtls_md5_process(a0, a1, dwArg3C, dwArgE4, dwArg0148, out s1_36, out s2_37, out s3_38, out s4_39, out s5_40, out s6_41)
	return
md5_process_wrap_exit:


void md5_clone_wrap(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a1 a2 a3 a4 a5 a6 a7 t0 t1 t3 t4 t5 t6
// Preserved: sp
md5_clone_wrap_entry:
l23065A1C:
l23065A1C_thunk_mbedtls_md5_clone:
	mbedtls_md5_clone(a0, a1)
	return
md5_clone_wrap_exit:


void md5_ctx_free(word32 a0, word32 mstatus, word32 dwArg10, word32 dwArg0158, word32 dwArg0198)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] mstatus:[0..31] Stack +0010:[0..31] Stack +0158:[0..31] Stack +0198:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 s0 s1 s4 t3 tp
// Preserved: sp
md5_ctx_free_entry:
l23065A20:
	word32 a5_11 = mbedtls_md5_free(a0)
l23065A34_thunk_vPortFree:
	word32 s0_34
	word32 s1_35
	word32 a0_36
	word32 a1_37
	word32 a2_38
	word32 a3_39
	word32 a4_40
	word32 a5_41
	word32 a6_42
	word32 s4_43
	word32 t3_44
	vPortFree(a0, dwArg10, a5_11, mstatus, dwArg0158, dwArg0198, out s0_34, out s1_35, out a0_36, out a1_37, out a2_38, out a3_39, out a4_40, out a5_41, out a6_42, out s4_43, out t3_44)
	return
md5_ctx_free_exit:


void md5_ctx_alloc(word32 ra, word32 s1, word32 a3, word32 a4, word32 a5, word32 mstatus, word32 dwArg10, word32 dwArg14, word32 dwArg0108, word32 dwArg0148)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] s1:[0..31] Stack +0010:[0..31] Stack +0014:[0..31] Stack +0108:[0..31] Stack +0148:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 ra s1 s2 s3 s4 s8 t0 t1 t3 tp
// Preserved: s0 sp
md5_ctx_alloc_entry:
l23065A38:
	word32 s2_79
	word32 a5_78
	word32 a4_77
	word32 a3_76
	word32 a2_75
	word32 a1_74
	word32 s1_73
	word32 s0_72
	word32 s3_80
	word32 s4_81
	word32 s8_82
	word32 ra_21 = mycalloc(ra, s1, 1<32>, 88<i32>, a3, a4, a5, mstatus, dwArg10, dwArg14, dwArg0108, dwArg0148, out s0_72, out s1_73, out a1_74, out a2_75, out a3_76, out a4_77, out a5_78, out s2_79, out s3_80, out s4_81, out s8_82)
	branch false l23065A50
l23065A4C:
	word32 a1_83
	mbedtls_md5_init(ra_21, 1<32>, out a1_83)
l23065A50:
	return
md5_ctx_alloc_exit:


void md5_finish_wrap(word32 a2, word32 dwArg28, word32 dwArg88, word32 dwArgA4, word32 dwArg0108)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31] Stack +0028:[0..31] Stack +0088:[0..31] Stack +00A4:[0..31] Stack +0108:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
md5_finish_wrap_entry:
l23065A5A:
l23065A5A_thunk_mbedtls_md5_finish:
	word32 s1_37
	word32 s2_38
	word32 s5_39
	word32 s6_40
	mbedtls_md5_finish(a2, dwArg28, dwArg88, dwArgA4, dwArg0108, out s1_37, out s2_38, out s5_39, out s6_40)
	return
md5_finish_wrap_exit:


void md5_update_wrap(word32 a1, word32 a2, word32 a5, word32 dwArg1C, word32 dwArg48, word32 dwArgA8, word32 dwArgC4, word32 dwArg0128)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a2:[0..31] a5:[0..31] Stack +001C:[0..31] Stack +0048:[0..31] Stack +00A8:[0..31] Stack +00C4:[0..31] Stack +0128:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
md5_update_wrap_entry:
l23065A5E:
l23065A5E_thunk_mbedtls_md5_update:
	word32 a5_40
	word32 s2_41
	word32 s3_42
	word32 s4_43
	mbedtls_md5_update(a1, a2, a5, dwArg1C, dwArg48, dwArgA8, dwArgC4, dwArg0128, out a5_40, out s2_41, out s3_42, out s4_43)
	return
md5_update_wrap_exit:


void md5_starts_wrap(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31]
// LiveOut:
// Trashed: a5
// Preserved: sp
md5_starts_wrap_entry:
l23065A62:
l23065A62_thunk_mbedtls_md5_starts:
	mbedtls_md5_starts(a0)
	return
md5_starts_wrap_exit:


void sha1_process_wrap(word32 a0, word32 a1, word32 dwArg3C, word32 dwArg0148)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] Stack +003C:[0..31] Stack +0148:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
sha1_process_wrap_entry:
l23065A66:
l23065A66_thunk_mbedtls_sha1_process:
	word32 s1_36
	word32 s2_37
	word32 s3_38
	word32 s4_39
	word32 s5_40
	word32 s6_41
	mbedtls_sha1_process(a0, a1, dwArg3C, dwArg0148, out s1_36, out s2_37, out s3_38, out s4_39, out s5_40, out s6_41)
	return
sha1_process_wrap_exit:


void sha1_clone_wrap(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a1 a2 a3 a4 a5 a6 a7 t0 t1 t3 t4 t5 t6
// Preserved: sp
sha1_clone_wrap_entry:
l23065A6A:
l23065A6A_thunk_mbedtls_sha1_clone:
	mbedtls_sha1_clone(a0, a1)
	return
sha1_clone_wrap_exit:


void sha1_ctx_free(word32 a0, word32 mstatus, word32 dwArg10, word32 dwArg0158, word32 dwArg0198)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] mstatus:[0..31] Stack +0010:[0..31] Stack +0158:[0..31] Stack +0198:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 s0 s1 s4 t3 tp
// Preserved: sp
sha1_ctx_free_entry:
l23065A6E:
	word32 a5_11 = mbedtls_sha1_free(a0)
l23065A82_thunk_vPortFree:
	word32 s0_34
	word32 s1_35
	word32 a0_36
	word32 a1_37
	word32 a2_38
	word32 a3_39
	word32 a4_40
	word32 a5_41
	word32 a6_42
	word32 s4_43
	word32 t3_44
	vPortFree(a0, dwArg10, a5_11, mstatus, dwArg0158, dwArg0198, out s0_34, out s1_35, out a0_36, out a1_37, out a2_38, out a3_39, out a4_40, out a5_41, out a6_42, out s4_43, out t3_44)
	return
sha1_ctx_free_exit:


void sha1_ctx_alloc(word32 ra, word32 s1, word32 a3, word32 a4, word32 a5, word32 mstatus, word32 dwArg10, word32 dwArg14, word32 dwArg0108, word32 dwArg0148)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] s1:[0..31] Stack +0010:[0..31] Stack +0014:[0..31] Stack +0108:[0..31] Stack +0148:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 ra s1 s2 s3 s4 s8 t0 t1 t3 tp
// Preserved: s0 sp
sha1_ctx_alloc_entry:
l23065A86:
	word32 s2_79
	word32 a5_78
	word32 a4_77
	word32 a3_76
	word32 a2_75
	word32 a1_74
	word32 s1_73
	word32 s0_72
	word32 s3_80
	word32 s4_81
	word32 s8_82
	word32 ra_21 = mycalloc(ra, s1, 1<32>, 92<i32>, a3, a4, a5, mstatus, dwArg10, dwArg14, dwArg0108, dwArg0148, out s0_72, out s1_73, out a1_74, out a2_75, out a3_76, out a4_77, out a5_78, out s2_79, out s3_80, out s4_81, out s8_82)
	branch false l23065A9E
l23065A9A:
	mbedtls_sha1_init(ra_21, 1<32>)
l23065A9E:
	return
sha1_ctx_alloc_exit:


void sha1_finish_wrap(word32 a2, word32 dwArg28, word32 dwArg88, word32 dwArg0108)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31] Stack +0028:[0..31] Stack +0088:[0..31] Stack +0108:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
sha1_finish_wrap_entry:
l23065AA8:
l23065AA8_thunk_mbedtls_sha1_finish:
	mbedtls_sha1_finish(a2, dwArg28, dwArg88, dwArg0108)
	return
sha1_finish_wrap_exit:


void sha1_update_wrap(word32 a1, word32 a2, word32 a5, word32 dwArg1C, word32 dwArg48, word32 dwArgA8, word32 dwArg0128)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a2:[0..31] a5:[0..31] Stack +001C:[0..31] Stack +0048:[0..31] Stack +00A8:[0..31] Stack +0128:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
sha1_update_wrap_entry:
l23065AAC:
l23065AAC_thunk_mbedtls_sha1_update:
	word32 a5_39
	mbedtls_sha1_update(a1, a2, a5, dwArg1C, dwArg48, dwArgA8, dwArg0128, out a5_39)
	return
sha1_update_wrap_exit:


void sha1_starts_wrap(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31]
// LiveOut:
// Trashed: a5
// Preserved: sp
sha1_starts_wrap_entry:
l23065AB0:
l23065AB0_thunk_mbedtls_sha1_starts:
	mbedtls_sha1_starts(a0)
	return
sha1_starts_wrap_exit:


void sha224_process_wrap(word32 a0, word32 a1, word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a3:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
sha224_process_wrap_entry:
l23065AB4:
l23065AB4_thunk_mbedtls_sha256_process:
	mbedtls_sha256_process(a0, a1, a3)
	return
sha224_process_wrap_exit:


void sha224_clone_wrap(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a1 a2 a3 a4 a5 a6 a7 t0 t1 t3 t4 t5 t6
// Preserved: sp
sha224_clone_wrap_entry:
l23065AB8:
l23065AB8_thunk_mbedtls_sha256_clone:
	mbedtls_sha256_clone(a0, a1)
	return
sha224_clone_wrap_exit:


void sha224_ctx_free(word32 a0, word32 mstatus, word32 dwArg10, word32 dwArg0158, word32 dwArg0198)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] mstatus:[0..31] Stack +0010:[0..31] Stack +0158:[0..31] Stack +0198:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 s0 s1 s4 t3 tp
// Preserved: sp
sha224_ctx_free_entry:
l23065ABC:
	word32 a5_11
	mbedtls_sha256_free(a0, out a5_11)
l23065AD0_thunk_vPortFree:
	word32 s0_34
	word32 s1_35
	word32 a0_36
	word32 a1_37
	word32 a2_38
	word32 a3_39
	word32 a4_40
	word32 a5_41
	word32 a6_42
	word32 s4_43
	word32 t3_44
	vPortFree(a0, dwArg10, a5_11, mstatus, dwArg0158, dwArg0198, out s0_34, out s1_35, out a0_36, out a1_37, out a2_38, out a3_39, out a4_40, out a5_41, out a6_42, out s4_43, out t3_44)
	return
sha224_ctx_free_exit:


void sha224_ctx_alloc(word32 ra, word32 s1, word32 a3, word32 a4, word32 a5, word32 mstatus, word32 dwArg10, word32 dwArg14, word32 dwArg0108, word32 dwArg0148)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] a4:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] s1:[0..31] Stack +0010:[0..31] Stack +0014:[0..31] Stack +0108:[0..31] Stack +0148:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 ra s1 s2 s3 s4 s8 t0 t1 t3 tp
// Preserved: s0 sp
sha224_ctx_alloc_entry:
l23065AD4:
	word32 s2_79
	word32 a5_78
	word32 a4_77
	word32 a3_76
	word32 a2_75
	word32 a1_74
	word32 s1_73
	word32 s0_72
	word32 s3_80
	word32 s4_81
	word32 s8_82
	word32 ra_21 = mycalloc(ra, s1, 1<32>, 116<i32>, a3, a4, a5, mstatus, dwArg10, dwArg14, dwArg0108, dwArg0148, out s0_72, out s1_73, out a1_74, out a2_75, out a3_76, out a4_77, out a5_78, out s2_79, out s3_80, out s4_81, out s8_82)
	branch false l23065AEC
l23065AE8:
	word32 a3_83
	word32 a4_84
	word32 a5_85
	mbedtls_sha256_init(ra_21, 1<32>, out a3_83, out a4_84, out a5_85)
l23065AEC:
	return
sha224_ctx_alloc_exit:


void sha224_wrap(word32 ra)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 ra s0 s1 s10 s6 t0 t1 t5
// Preserved: sp
sha224_wrap_entry:
l23065AF6:
l23065AF8_thunk_mbedtls_sha256:
	word32 a5_19
	mbedtls_sha256(ra, out a5_19)
	return
sha224_wrap_exit:


void sha256_wrap(word32 ra)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 ra s0 s1 s10 s6 t0 t1 t5
// Preserved: sp
sha256_wrap_entry:
l23065AFC:
l23065AFE_thunk_mbedtls_sha256:
	word32 a5_19
	mbedtls_sha256(ra, out a5_19)
	return
sha256_wrap_exit:


void sha224_finish_wrap(word32 a2, word32 dwArg28, word32 dwArg88)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31] Stack +0028:[0..31] Stack +0088:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s2 s3 s4 s5 s6 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
sha224_finish_wrap_entry:
l23065B02:
l23065B02_thunk_mbedtls_sha256_finish:
	word32 s1_30
	word32 a5_31
	word32 s2_32
	word32 s3_33
	word32 s4_34
	word32 s5_35
	mbedtls_sha256_finish(a2, dwArg28, dwArg88, out s1_30, out a5_31, out s2_32, out s3_33, out s4_34, out s5_35)
	return
sha224_finish_wrap_exit:


void sha224_update_wrap(word32 a1, word32 a2, word32 a5, word32 dwArg48, word32 dwArgA8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a2:[0..31] a5:[0..31] Stack +0048:[0..31] Stack +00A8:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s2 s3 s4 s5 s6 s8 t0 t1 t3 t4 t5 t6 tp
// Preserved: sp
sha224_update_wrap_entry:
l23065B06:
l23065B06_thunk_mbedtls_sha256_update:
	word32 s1_32
	word32 a1_33
	word32 a4_34
	word32 a5_35
	word32 s2_36
	word32 s3_37
	word32 s4_38
	word32 s5_39
	mbedtls_sha256_update(a1, a2, a5, dwArg48, dwArgA8, out s1_32, out a1_33, out a4_34, out a5_35, out s2_36, out s3_37, out s4_38, out s5_39)
	return
sha224_update_wrap_exit:


void sha224_starts_wrap(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31]
// LiveOut:
// Trashed: a1 a5
// Preserved: sp
sha224_starts_wrap_entry:
l23065B0A:
l23065B0C_thunk_mbedtls_sha256_starts:
	mbedtls_sha256_starts(a0, 1<32>)
	return
sha224_starts_wrap_exit:


void sha256_starts_wrap(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31]
// LiveOut:
// Trashed: a1 a5
// Preserved: sp
sha256_starts_wrap_entry:
l23065B10:
l23065B12_thunk_mbedtls_sha256_starts:
	mbedtls_sha256_starts(a0, 0<32>)
	return
sha256_starts_wrap_exit:


word32 oid_sig_alg_from_asn1.part.0(word32 a0, word32 a1, word32 a2, word32 a5, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_oid_get_sig_alg_desc
//      mbedtls_oid_get_sig_alg
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a5:[0..31]
// LiveOut: a0 a1 a5 s1
// Trashed: a0 a1 a2 a3 a4 a5 s1 tp
// Preserved: s0 sp
oid_sig_alg_from_asn1.part.0_entry:
l23065B16:
	word32 s1_12 = a0
l23065B28:
	word32 s0_20
	branch a0 != 0<32> l23065B30
l23065B30:
	s1_12 = Mem10[a5 + 4<i32>:word32]
	s0_20 = Mem10[a2 + 4<i32>:word32]
	branch a2 == a5 l23065B3C
l23065B3C:
	s1_12 = Mem10[a1 + 8<i32>:word32]
	word32 a3_80
	word32 a4_81
	a0 = memcmp(a0, a1, a2, out a1, out a2, out a3_80, out a4_81, out a5)
	branch a0 != 0<32> l23065B38
l23065B38:
l23065B2C:
	s0_20 = 0<32>
l23065B44:
	a0Out = s0_20
	a1Out = a1
	a5Out = a5
	return s1_12
oid_sig_alg_from_asn1.part.0_exit:


word32 mbedtls_oid_get_attr_short_name(word32 a0, word32 a1, word32 a2, word32 a5, word32 dwArg38, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_dn_gets
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a5:[0..31] Stack +0038:[0..31]
// LiveOut: a0 s1
// Trashed: a0 a1 a2 a3 a4 a5 s1 s2 tp
// Preserved: s0 sp
mbedtls_oid_get_attr_short_name_entry:
l23065B50:
	branch a0 != 0<32> l23065B86
l23065B86:
	word32 s1_16 = a0
	a1_25 = a1
l23065B62:
	word32 a1_25
	branch a0 != 0<32> l23065B58
l23065B58:
	s1_16 = Mem13[a5 + 4<i32>:word32]
	branch a2 == a5 l23065B76
l23065B76:
	s1_16 = Mem13[a1_25 + 8<i32>:word32]
	word32 a3_103
	word32 a4_104
	a0 = memcmp(a0, a1_25, a2, out a1_25, out a2, out a3_103, out a4_104, out a5)
	branch a0 != 0<32> l23065B60
l23065B7E:
	Mem35[a1:word32] = a5
l23065B60:
l23065B66:
	a0 = -46<i32>
l23065B6A:
	0<32> = dwArg38
	a0Out = a0
	return s1_16
l23065B52:
	a0Out = -46<i32>
	return s1
mbedtls_oid_get_attr_short_name_exit:


word32 mbedtls_oid_get_x509_ext_type(word32 a0, word32 a1, word32 a2, word32 a5, word32 dwArg38, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out, ptr32 & s2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_crt_parse_der
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a5:[0..31] Stack +0038:[0..31]
// LiveOut: a0 a1 a5 s1 s2
// Trashed: a0 a1 a2 a3 a4 a5 s1 s2 tp
// Preserved: s0 sp
mbedtls_oid_get_x509_ext_type_entry:
l23065B9E:
	branch a0 != 0<32> l23065BD4
l23065BD4:
	word32 s1_16 = a0
	a1_25 = a1
l23065BB0:
	word32 a1_25
	branch a0 != 0<32> l23065BA6
l23065BA6:
	s1_16 = Mem13[a5 + 4<i32>:word32]
	branch a2 == a5 l23065BC4
l23065BC4:
	s1_16 = Mem13[a1_25 + 8<i32>:word32]
	word32 a3_106
	word32 a4_107
	a0 = memcmp(a0, a1_25, a2, out a1_25, out a2, out a3_106, out a4_107, out a5)
	branch a0 != 0<32> l23065BAE
l23065BCC:
	Mem35[a1:word32] = a5
l23065BAE:
l23065BB4:
	a0 = -46<i32>
l23065BB8:
	0<32> = dwArg38
	a0Out = a0
	a1Out = a1_25
	a5Out = a5
	s2Out = a1
	return s1_16
l23065BA0:
	a0Out = -46<i32>
	a1Out = a1
	a5Out = a5
	s2Out = s2
	return s1
mbedtls_oid_get_x509_ext_type_exit:


word32 mbedtls_oid_get_extended_key_usage(word32 a0, word32 a1, word32 a2, word32 a5, word32 dwArg38, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_crt_info
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a5:[0..31] Stack +0038:[0..31]
// LiveOut: a0 s1
// Trashed: a0 a1 a2 a3 a4 a5 s1 s2 tp
// Preserved: s0 sp
mbedtls_oid_get_extended_key_usage_entry:
l23065BEC:
	branch a0 != 0<32> l23065C22
l23065C22:
	word32 s1_16 = a0
	a1_25 = a1
l23065BFE:
	word32 a1_25
	branch a0 != 0<32> l23065BF4
l23065BF4:
	s1_16 = Mem13[a5 + 4<i32>:word32]
	branch a2 == a5 l23065C12
l23065C12:
	s1_16 = Mem13[a1_25 + 8<i32>:word32]
	word32 a3_103
	word32 a4_104
	a0 = memcmp(a0, a1_25, a2, out a1_25, out a2, out a3_103, out a4_104, out a5)
	branch a0 != 0<32> l23065BFC
l23065C1A:
	Mem35[a1:word32] = a5
l23065BFC:
l23065C02:
	a0 = -46<i32>
l23065C06:
	0<32> = dwArg38
	a0Out = a0
	return s1_16
l23065BEE:
	a0Out = -46<i32>
	return s1
mbedtls_oid_get_extended_key_usage_exit:


word32 mbedtls_oid_get_sig_alg_desc(word32 a0, word32 a1, word32 a2, word32 a5, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_sig_alg_gets
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a5:[0..31]
// LiveOut: a0 s1
// Trashed: a0 a1 a2 a3 a4 a5 s1 tp
// Preserved: s0 sp
mbedtls_oid_get_sig_alg_desc_entry:
l23065C3A:
	branch a0 != 0<32> l23065C4E
l23065C4E:
	word32 a0_21
	word32 a0_13
	word32 a5_18
	word32 a1_58
	word32 s1_19 = oid_sig_alg_from_asn1.part.0(a0, a1, a2, a5, out a0_13, out a1_58, out a5_18)
	branch a0_13 == 0<32> l23065C42
l23065C42:
	a0_21 = -46<i32>
l23065C5C:
	Mem24[a5_18:word32] = a1
	a0_21 = 0<32>
l23065C46:
	a0Out = a0_21
	return s1_19
l23065C3C:
	a0Out = -46<i32>
	return s1
mbedtls_oid_get_sig_alg_desc_exit:


word32 mbedtls_oid_get_sig_alg(word32 a0, word32 a1, word32 a2, word32 a5, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_get_sig_alg
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a5:[0..31]
// LiveOut: a0 a1 a5 s1
// Trashed: a0 a1 a2 a3 a4 a5 s1 tp
// Preserved: s0 sp
mbedtls_oid_get_sig_alg_entry:
l23065C64:
	branch a0 != 0<32> l23065C7A
l23065C7A:
	word32 a0_24
	word32 a0_16
	word32 a1_17
	word32 a5_21
	word32 s1_22 = oid_sig_alg_from_asn1.part.0(a0, a1, a2, a5, out a0_16, out a1_17, out a5_21)
	branch a0_16 == 0<32> l23065C6C
l23065C6C:
	a0_24 = -46<i32>
l23065C8C:
	Mem26[s1_22:byte] = SLICE(CONVERT(Mem10[a0_16 + 16<i32>:byte], byte, word32), byte, 0)
	a5_21 = CONVERT(Mem26[a0_16 + 17<i32>:byte], byte, word32)
	Mem29[a2:byte] = SLICE(a5_21, byte, 0)
	a0_24 = 0<32>
l23065C70:
	a0Out = a0_24
	a1Out = a1_17
	a5Out = a5_21
	return s1_22
l23065C66:
	a0Out = -46<i32>
	a1Out = a1
	a5Out = a5
	return s1
mbedtls_oid_get_sig_alg_exit:


word32 mbedtls_oid_get_pk_alg(word32 a0, word32 a1, word32 a2, word32 a5, word32 dwArg38, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pk_get_pk_alg
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a5:[0..31] Stack +0038:[0..31]
// LiveOut: a0 a1 a3 a4 a5 s1 s2
// Trashed: a0 a1 a2 a3 a4 a5 s1 s2 tp
// Preserved: s0 sp
mbedtls_oid_get_pk_alg_entry:
l23065CA0:
	branch a0 != 0<32> l23065CD8
l23065CD8:
	word32 s1_16 = a0
	a1_25 = a1
l23065CB2:
	word32 a1_25
	branch a0 != 0<32> l23065CA8
l23065CA8:
	s1_16 = Mem13[a5 + 4<i32>:word32]
	word32 s0_24 = Mem13[a2 + 4<i32>:word32]
	branch a2 == a5 l23065CC6
l23065CC6:
	s1_16 = Mem13[a1_25 + 8<i32>:word32]
	a0 = memcmp(a0, a1_25, a2, out a1_25, out a2, out a3, out a4, out a5)
	branch a0 != 0<32> l23065CB0
l23065CCE:
	a5 = CONVERT(Mem13[s0_24 + 16<i32>:byte], byte, word32)
	Mem35[a1:byte] = SLICE(a5, byte, 0)
l23065CB0:
l23065CB6:
	a0 = -46<i32>
l23065CBA:
	0<32> = dwArg38
	a0Out = a0
	a1Out = a1_25
	a3Out = a3
	a4Out = a4
	a5Out = a5
	s2Out = a1
	return s1_16
l23065CA2:
	a0Out = -46<i32>
	a1Out = a1
	a3Out = a3
	a4Out = a4
	a5Out = a5
	s2Out = s2
	return s1
mbedtls_oid_get_pk_alg_exit:


word32 mbedtls_oid_get_ec_grp(word32 a0, word32 a1, word32 a2, word32 a5, word32 dwArg38, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pk_use_ecparams
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a5:[0..31] Stack +0038:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 s1 s2
// Trashed: a0 a1 a2 a3 a4 a5 s1 s2 tp
// Preserved: s0 sp
mbedtls_oid_get_ec_grp_entry:
l23065CF0:
	branch a0 != 0<32> l23065D28
l23065D28:
	word32 s1_16 = a0
	a1_25 = a1
l23065D02:
	word32 a1_25
	branch a0 != 0<32> l23065CF8
l23065CF8:
	s1_16 = Mem13[a5 + 4<i32>:word32]
	word32 s0_24 = Mem13[a2 + 4<i32>:word32]
	branch a2 == a5 l23065D16
l23065D16:
	s1_16 = Mem13[a1_25 + 8<i32>:word32]
	a0 = memcmp(a0, a1_25, a2, out a1_25, out a2, out a3, out a4, out a5)
	branch a0 != 0<32> l23065D00
l23065D1E:
	a5 = CONVERT(Mem13[s0_24 + 16<i32>:byte], byte, word32)
	Mem35[a1:byte] = SLICE(a5, byte, 0)
l23065D00:
l23065D06:
	a0 = -46<i32>
l23065D0A:
	0<32> = dwArg38
	a0Out = a0
	a1Out = a1_25
	a2Out = dwArg10
	a3Out = a3
	a4Out = a4
	a5Out = a5
	s2Out = a1
	return s1_16
l23065CF2:
	a0Out = -46<i32>
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5
	s2Out = s2
	return s1
mbedtls_oid_get_ec_grp_exit:


word32 mbedtls_oid_get_md_alg(word32 a0, word32 a1, word32 a2, word32 a5, word32 dwArg38, ptr32 & a0Out, ptr32 & s2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_pkcs1_verify
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a5:[0..31] Stack +0038:[0..31]
// LiveOut: a0 s1 s2
// Trashed: a0 a1 a2 a3 a4 a5 s1 s2 tp
// Preserved: s0 sp
mbedtls_oid_get_md_alg_entry:
l23065D40:
	branch a0 != 0<32> l23065D78
l23065D78:
	word32 s1_16 = a0
	a1_25 = a1
l23065D52:
	word32 a1_25
	branch a0 != 0<32> l23065D48
l23065D48:
	s1_16 = Mem13[a5 + 4<i32>:word32]
	word32 s0_24 = Mem13[a2 + 4<i32>:word32]
	branch a2 == a5 l23065D66
l23065D66:
	s1_16 = Mem13[a1_25 + 8<i32>:word32]
	word32 a3_104
	word32 a4_105
	a0 = memcmp(a0, a1_25, a2, out a1_25, out a2, out a3_104, out a4_105, out a5)
	branch a0 != 0<32> l23065D50
l23065D6E:
	Mem35[a1:byte] = SLICE(CONVERT(Mem13[s0_24 + 16<i32>:byte], byte, word32), byte, 0)
l23065D50:
l23065D56:
	a0 = -46<i32>
l23065D5A:
	0<32> = dwArg38
	a0Out = a0
	s2Out = a1
	return s1_16
l23065D42:
	a0Out = -46<i32>
	s2Out = s2
	return s1
mbedtls_oid_get_md_alg_exit:


word32 mbedtls_oid_get_oid_by_md(word32 a0, word32 a1, word32 a2, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_rsa_pkcs1_sign
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a4:[0..31]
// LiveOut: a0
// Trashed: a0 a3 a5
// Preserved: sp
mbedtls_oid_get_oid_by_md_entry:
l23065D90:
l23065D98:
	word32 a5_7 = Mem0[a4:word32]
	branch a4 != 0<32> l23065DA2
l23065DA2:
	branch CONVERT(Mem0[a5_7 + 16<i32>:byte], byte, word32) != a0 l23065DB4
l23065DB4:
l23065DAA:
	Mem13[a4:word32] = a1
	Mem18[Mem13[a5_7 + 4<i32>:word32]:word32] = a2
	return 0<32>
l23065D9C:
	return -46<i32>
mbedtls_oid_get_oid_by_md_exit:


word32 pem_aes_decrypt(word32 ra, word32 a4, word32 a5, ptr32 & a4Out, ptr32 & s7Out, ptr32 & s9Out, ptr32 & s10Out, ptr32 & s11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_pem_read_buffer
// MayUse:  a4:[0..31] a5:[0..31] ra:[0..31]
// LiveOut: a1 a4 s10 s11 s7 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s10 s11 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 sp
pem_aes_decrypt_entry:
l23065DB8:
	word32 a1_535
	word32 a1_532
	word32 a5_534
	word32 a4_533
	word32 ra_49 = mbedtls_md5_init(mbedtls_aes_init(ra, fp + -312<i32>, out a1_532, out a4_533, out a5_534), fp + -400<i32>, out a1_535)
	word32 a5_62
	word32 s2_69
	word32 s3_536
	word32 s4_537
	mbedtls_md5_update(a4, a5, mbedtls_md5_starts(fp + -400<i32>), dwLoc01A4, dwLoc0178, dwLoc0118, dwLocFC, dwLoc98, out a5_62, out s2_69, out s3_536, out s4_537)
	word32 s1_127
	word32 s4_541
	word32 s3_540
	word32 s2_539
	word32 a5_538
	word32 s5_133
	word32 s2_130
	word32 s6_134
	mbedtls_md5_finish(mbedtls_md5_update(s2_69, 8<32>, a5_62, dwLoc01A4, dwLoc0178, dwLoc0118, dwLocFC, dwLoc98, out a5_538, out s2_539, out s3_540, out s4_541), dwLoc0198, dwLoc0138, dwLoc011C, dwLocB8, out s1_127, out s2_130, out s5_133, out s6_134)
	word32 s0_146 = fp + -432<i32>
	branch s1_127 != 0x10<32> l23065E80
l23065E80:
	word32 a6_547
	word32 a7_548
	word32 a5_546
	word32 a4_545
	word32 a1_542
	word32 a3_544
	word32 a2_543
	memcpy(fp + -432<i32>, fp + -448<i32>, 0x10<32>, out a1_542, out a2_543, out a3_544, out a4_545, out a5_546, out a6_547, out a7_548)
	word32 a5_174
	word32 s3_182
	word32 s4_183
	word32 s2_549
	mbedtls_md5_update(fp + -448<i32>, 0x10<32>, mbedtls_md5_starts(fp + -400<i32>), dwLoc01A4, dwLoc0178, dwLoc0118, dwLocFC, dwLoc98, out a5_174, out s2_549, out s3_182, out s4_183)
	word32 a5_205
	word32 s2_212
	word32 s4_551
	word32 s3_550
	mbedtls_md5_update(s3_182, s4_183, a5_174, dwLoc01A4, dwLoc0178, dwLoc0118, dwLocFC, dwLoc98, out a5_205, out s2_212, out s3_550, out s4_551)
	word32 s1_270
	word32 a5_552
	word32 s2_553
	word32 s3_554
	word32 s4_555
	s0_146 = mbedtls_md5_finish(mbedtls_md5_update(s2_212, 8<32>, a5_205, dwLoc01A4, dwLoc0178, dwLoc0118, dwLocFC, dwLoc98, out a5_552, out s2_553, out s3_554, out s4_555), dwLoc0198, dwLoc0138, dwLoc011C, dwLocB8, out s1_270, out s2_130, out s5_133, out s6_134)
	word32 a2_290 = 0x10<32>
	branch s1_270 == 32<i32> l23065EBC
l23065EB8:
	a2_290 = s1_270 + -16<i32>
l23065EBC:
	word32 a5_567
	word32 a6_568
	word32 a7_569
	word32 a1_563
	word32 a4_566
	word32 a2_564
	word32 a3_565
	memcpy(fp + -416<i32>, fp + -448<i32>, a2_290, out a1_563, out a2_564, out a3_565, out a4_566, out a5_567, out a6_568, out a7_569)
	mbedtls_md5_free(fp + -400<i32>)
	word32 a5_312 = fp + -448<i32>
l23065ECA:
	Mem314[a5_312:byte] = 0<8>
	a5_312 = a5_312 + 1<32>
	branch a5_312 != s0_146 l23065ECA
l23065ED4:
l23065E1E:
	word32 a7_562
	word32 a2_557
	word32 a3_558
	word32 a6_561
	word32 a4_559
	word32 a5_560
	word32 a1_556
	memcpy(fp + -432<i32>, fp + -448<i32>, 0x10<32>, out a1_556, out a2_557, out a3_558, out a4_559, out a5_560, out a6_561, out a7_562)
	mbedtls_md5_free(fp + -400<i32>)
	word32 a5_333 = fp + -448<i32>
l23065E28:
	Mem335[a5_333:byte] = 0<8>
	a5_333 = a5_333 + 1<32>
	branch a5_333 != fp + -432<i32> l23065E28
l23065E32:
	mbedtls_aes_setkey_dec(ra_49, s0_146)
	word32 a1_394
	word32 a4_396
	word32 s10_400
	word32 s11_401
	word32 s7_406
	word32 s9_407
	word32 s1_399
	word32 s0_390 = mbedtls_aes_crypt_cbc(0<32>, s6_134, s2_130, s5_133, s5_133, dwLocC8, dwLocB8, dwLoc28, out s1_399, out a1_394, out a4_396, out s7_406, out s9_407, out s10_400, out s11_401)
	mbedtls_aes_free(fp + -312<i32>)
l23065E56:
	s1_399 = s1_399 + 0xFFFFFFFF<32>
	branch s1_399 != 0xFFFFFFFF<32> l23065ED6
l23065ED6:
	Mem422[s0_390:byte] = 0<8>
	s0_390 = s0_390 + 1<32>
l23065E5C:
	a4Out = a4_396
	s7Out = s7_406
	s9Out = s9_407
	s10Out = s10_400
	s11Out = s11_401
	return a1_394
pem_aes_decrypt_exit:


word32 mbedtls_pem_init(word32 ra, word32 a0, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_pk_parse_key
//      mbedtls_x509_crt_parse
// MayUse:  a0:[0..31] ra:[0..31]
// LiveOut: a5 ra
// Trashed: a0 a1 a2 a3 a4 a5 ra t0 t1
// Preserved: sp
mbedtls_pem_init_entry:
l23065EDE:
l23065EE2_thunk_memset:
	word32 a5_12
	word32 t1_17
	word32 a0_18
	word32 a1_19
	word32 a2_20
	word32 a3_21
	word32 a4_22
	word32 ra_13 = memset(ra, a0, 0<32>, 0xC<32>, out t1_17, out a0_18, out a1_19, out a2_20, out a3_21, out a4_22, out a5_12)
	a5Out = a5_12
	return ra_13
mbedtls_pem_init_exit:


word32 mbedtls_pem_read_buffer(word32 ra, word32 s0, word32 a0, word32 a1, word32 a2, word32 a3, word32 a6, word32 s2, word32 mstatus, word32 dwArg74, word32 dwArgC8, word32 dwArg0108, word32 dwArg0148, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s9Out, ptr32 & s10Out, ptr32 & s11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_pk_parse_key
//      mbedtls_x509_crt_parse
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a6:[0..31] mstatus:[0..31] ra:[0..31] s0:[0..31] s2:[0..31] Stack +0074:[0..31] Stack +00C8:[0..31] Stack +0108:[0..31] Stack +0148:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_pem_read_buffer_entry:
l23065EE6:
	word32 s2_149
	word32 s0_26
	branch a0 == 0<32> l230661D6
l230661D6:
	s0_26 = 0xFEFFFB80<32>
	s2_149 = s2
l23065F00:
	s7 = a6
	s5 = a5
	s3 = a4
	s2_149 = a3
	s6 = a2
	word32 a3_1241
	word32 a0_42 = strstr(ra, a3, a1, out a1, out a3_1241, out a4, out a5)
	branch a0_42 != 0<32> l23065F38
l23065F38:
	word32 a3_1242
	word32 a0_55 = strstr(ra, a3, a2, out a1, out a3_1242, out a4, out a5)
	branch a0_55 == 0<32> l23065F18
l23065F44:
	branch a0_42 >=u a0_55 l23065F18
l23065F48:
	word32 a2_1243
	word32 a4_1245
	word32 a3_1244
	word32 a5_1246
	word32 s0_72 = a0_42 + strlen(a1, out a1, out a2_1243, out a3_1244, out a4_1245, out a5_1246)
	branch CONVERT(Mem23[s0_72:byte], byte, word32) != 32<i32> l23065F5E
l23065F5C:
	s0_72 = s0_72 + 1<32>
l23065F5E:
	branch CONVERT(Mem23[s0_72:byte], byte, word32) != 0xD<32> l23065F6A
l23065F68:
	s0_72 = s0_72 + 1<32>
l23065F6A:
	a4 = CONVERT(Mem23[s0_72:byte], byte, word32)
	a5 = 0xA<32>
	branch a4 != 0xA<32> l23065F18
l23065F74:
	word32 a3_1248
	word32 a5_1250
	word32 a4_1249
	word32 a2_1247
	word32 a2_100 = a0_55 + strlen(a2, out a1, out a2_1247, out a3_1248, out a4_1249, out a5_1250)
	word32 s8_284 = s0_72 + 1<i32>
	branch CONVERT(Mem23[a2_100:byte], byte, word32) != 32<i32> l23065F90
l23065F8E:
	a2_100 = a2_100 + 1<32>
l23065F90:
	branch CONVERT(Mem23[a2_100:byte], byte, word32) != 0xD<32> l23065F9C
l23065F9A:
	a2_100 = a2_100 + 1<32>
l23065F9C:
	branch CONVERT(Mem23[a2_100:byte], byte, word32) != 0xA<32> l23065FA8
l23065FA6:
	a2_100 = a2_100 + 1<32>
l23065FA8:
	Mem123[a6:word32] = a2_100 - a3
	a5 = a0_55 - s8_284
	a4 = 0x15<32>
	branch a5 <= 0x15<32> l23066148
l23065FBA:
	word32 a3_1252
	word32 a2_1251
	branch memcmp(s8_284, 0x2308BFB4<32>, 0x16<32>, out a1, out a2_1251, out a3_1252, out a4, out a5) != 0<32> l23066148
l23066148:
	s6 = 0<32>
	s7 = 0<32>
l23065FCE:
	a5 = CONVERT(Mem123[s0_72 + 23<i32>:byte], byte, word32)
	s2_149 = s0_72 + 23<i32>
	branch a5 != 0xD<32> l23065FE4
l23065FDC:
	a5 = CONVERT(Mem123[s0_72 + 24<i32>:byte], byte, word32)
	s2_149 = s0_72 + 24<i32>
l23065FE4:
	a4 = 0xA<32>
	branch a5 == 0xA<32> l23065FF2
l23065FF2:
	word32 s0_155 = s2_149 + 1<i32>
	s6 = a0_55 - s0_155
	a5 = 0xD<32>
	branch s6 > 0xD<32> l23066008
l23066008:
	word32 a3_1285
	word32 a2_1284
	branch memcmp(s0_155, 0x2308BFCC<32>, 0xE<32>, out a1, out a2_1284, out a3_1285, out a4, out a5) != 0<32> l23066000
l2306601A:
	a5 = 0x15<32>
	branch s6 <= 0x15<32> l23066000
l23066020:
	s6 = 5<32>
	word32 a3_1287
	word32 a4_1288
	word32 a5_1289
	word32 a2_1286
	branch memcmp(s0_155, 0x2308BFDC<32>, 0x16<32>, out a1, out a2_1286, out a3_1287, out a4_1288, out a5_1289) == 0<32> l2306605C
l23066034:
	s6 = 6<32>
	word32 a5_1293
	word32 a3_1291
	word32 a4_1292
	word32 a2_1290
	branch memcmp(s0_155, 0x2308BFF4<32>, 0x16<32>, out a1, out a2_1290, out a3_1291, out a4_1292, out a5_1293) == 0<32> l2306605C
l23066048:
	word32 a2_1294
	word32 a3_1295
	branch memcmp(s0_155, 0x2308C00C<32>, 0x16<32>, out a1, out a2_1294, out a3_1295, out a4, out a5) != 0<32> l23066000
l2306605A:
	s6 = 7<32>
l2306605C:
	a5 = a0_55 - (s2_149 + 23<i32>)
	a4 = 0x1F<32>
	branch a5 > 0x1F<32> l23066072
l23066072:
	word32 a0_1297
	word32 a1_1298
	word32 a2_1299
	word32 a3_1300
	word32 t1_1296
	word32 a5_1302
	word32 a4_1301
	ra = memset(ra, fp + -64<i32>, 0<32>, 0x10<32>, out t1_1296, out a0_1297, out a1_1298, out a2_1299, out a3_1300, out a4_1301, out a5_1302)
	a5 = 0<32>
	a1 = 32<i32>
l23066086:
	a4 = CONVERT(Mem241[s2_149 + a5 + 23<i32>:byte], byte, word32)
	word32 a3_243 = a4 + -48<i32>
	branch (a4 + -48<i32> & 255<i32>) <=u 9<32> l230660AA
l2306609A:
	branch (a4 + -65<i32> & 255<i32>) >u 5<32> l23066136
l23066136:
	branch (a4 + -97<i32> & 255<i32>) >u 5<32> l2306606A
l23066142:
	a3_243 = a4 + -87<i32>
l230660A6:
	a3_243 = a4 + -55<i32>
l230660AA:
	branch (a5 & 1<i32>) != 0<32> l230660B2
l230660B0:
	a3_243 = a3_243 << 4<i32>
l230660B2:
	word32 a4_263 = (a5 >>u 1<u32>) + (fp + -64<i32>)
	Mem270[a4_263:byte] = SLICE(a3_243 | CONVERT(Mem241[a4_263:byte], byte, word32), byte, 0)
	a5 = a5 + 1<32>
	branch a5 != 32<i32> l23066086
l230660CA:
	word32 a3_278 = s2_149 + 56<i32>
	branch CONVERT(Mem270[s2_149 + 55<i32>:byte], byte, word32) == 0xD<32> l230660DC
l230660D8:
	a3_278 = s2_149 + 55<i32>
l230660DC:
	a4 = CONVERT(Mem270[a3_278:byte], byte, word32)
	a5 = 0xA<32>
	branch a4 != 0xA<32> l23065FEA
l230660E6:
	s8_284 = a3_278 + 1<i32>
	s7 = 1<32>
l230660EC:
	branch s8_284 >=u a0_55 l23065FEA
l230660F0:
	word32 a0_303
	word32 a3_322
	word32 s4_1255
	word32 a2_1253
	word32 a5_1254
	word32 s1_309 = mbedtls_base64_decode(0<32>, 0<32>, fp + -68<i32>, s8_284, a0_55 - s8_284, out a0_303, out a1, out a2_1253, out a3_322, out a4, out a5_1254, out s2_149, out s3, out s4_1255, out s5)
	a5 = -44<i32>
	branch a0_303 == -44<i32> l230661DE
l230661DE:
	s0_26 = 0xFEFFFED4<32>
l2306610A:
	word32 s1_360
	word32 s8_364
	word32 a3_1258
	word32 s2_1259
	word32 s4_1260
	word32 a2_1257
	word32 s0_1256
	word32 ra_358 = mycalloc(ra, s1_309, 1<32>, a1, a3_322, a4, -44<i32>, mstatus, s2, s0, dwArgC8, dwArg0108, out s0_1256, out s1_360, out a1, out a2_1257, out a3_1258, out a4, out a5, out s2_1259, out s3, out s4_1260, out s8_364)
	s2_149 = 1<32>
	branch false l230661E6
l230661E6:
	s0_26 = 0xFEFFFE80<32>
l23066116:
	word32 a3_1261
	word32 a0_376
	word32 a2_377
	word32 s4_385
	mbedtls_base64_decode(1<32>, a1, fp + -68<i32>, s8_364, s1_360, out a0_376, out a1, out a2_377, out a3_1261, out a4, out a5, out s2_149, out s3, out s4_385, out s5)
	s0_26 = a0_376
	branch a0_376 == 0<32> l2306614E
l2306614E:
	branch s7 == 0<32> l230661CA
l23066152:
	branch s3 != 0<32> l23066164
l23066164:
	branch s6 != 5<32> l230661A8
l230661A8:
	branch s6 != 6<32> l230661B8
l230661B8:
	branch s6 != 7<32> l2306617A
l230661BE:
l230661AE:
l2306616C:
l23066174:
	a1 = pem_aes_decrypt(ra_358, s3, s5, out a4, out s7, out s9, out s10, out s11)
l2306617A:
	a5 = 2<32>
	branch a4 <=u 2<32> l2306619A
l23066182:
	a5 = 48<i32>
	branch CONVERT(Mem328[s2_149:byte], byte, word32) != 48<i32> l2306619A
l2306618E:
	a4 = CONVERT(Mem328[s2_149 + 1<i32>:byte], byte, word32)
	a5 = 131<i32>
	branch a4 <=u 131<i32> l230661CA
l230661CA:
	Mem467[s4_385:word32] = s2_149
	Mem469[s4_385 + 4<i32>:word32] = a5
l2306619A:
	word32 a3_1280
	word32 a2_1279
	word32 a0_1278
	word32 a6_1281
	word32 s4_1282
	word32 t3_1283
	word32 s1_1277
	word32 s0_489
	vPortFree(s2_149, dwArg74, a5, mstatus, dwArg0108, dwArg0148, out s0_489, out s1_1277, out a0_1278, out a1, out a2_1279, out a3_1280, out a4, out a5, out a6_1281, out s4_1282, out t3_1283)
	s0_26 = s0_489 + -896<i32>
l23066156:
	word32 a6_1274
	word32 t3_1276
	word32 a3_1273
	word32 s4_1275
	word32 s1_1270
	word32 a0_1271
	word32 a2_1272
	word32 s0_504
	vPortFree(s2_149, a2_377, a5, mstatus, dwArg0108, dwArg0148, out s0_504, out s1_1270, out a0_1271, out a1, out a2_1272, out a3_1273, out a4, out a5, out a6_1274, out s4_1275, out t3_1276)
	s0_26 = s0_504 + -768<i32>
l23066126:
	word32 t3_1269
	word32 a0_1263
	word32 a2_1264
	word32 a5_1266
	word32 s4_1268
	word32 s1_1262
	word32 a6_1267
	word32 a3_1265
	word32 s0_518
	vPortFree(s2_149, a2_377, a5, mstatus, dwArg0108, dwArg0148, out s0_518, out s1_1262, out a0_1263, out a1, out a2_1264, out a3_1265, out a4, out a5_1266, out a6_1267, out s4_1268, out t3_1269)
	a5 = 0xFEFFFF00<32>
	s0_26 = s0_518 + 0xFEFFFF00<32>
l2306606A:
	s0_26 = 0xFEFFFE00<32>
l23066000:
	s0_26 = 0xFEFFFD80<32>
l23065FEA:
	s0_26 = 0xFEFFFF00<32>
l23065F18:
	s0_26 = 0xFEFFFF80<32>
l23065F1E:
	s0Out = dwArgCC
	s1Out = dwLoc4C
	a0Out = s0_26
	a1Out = a1
	a2Out = dwArg01A8
	a3Out = s2
	a4Out = a4
	a5Out = a5
	s2Out = s2_149
	s3Out = s3
	s4Out = dwArg0168
	s5Out = s5
	s6Out = s6
	s7Out = s7
	s8Out = dwArg0148
	s9Out = s9
	s10Out = s10
	s11Out = s11
	return dwLoc08
mbedtls_pem_read_buffer_exit:


word32 mbedtls_pem_free(word32 a0, word32 a2, word32 a5, word32 mstatus, word32 dwArg0148, word32 dwArg0188, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_pk_parse_key
//      mbedtls_x509_crt_parse
// MayUse:  a0:[0..31] a2:[0..31] a5:[0..31] mstatus:[0..31] Stack +0148:[0..31] Stack +0188:[0..31]
// LiveOut: a1 a3 a4 a5 s1 s4
// Trashed: a0 a1 a2 a3 a4 a5 a6 s1 s4 t3 tp
// Preserved: s0 sp
mbedtls_pem_free_entry:
l230661EE:
	word32 a2_14
	word32 a5_17
	word32 a0_20
	word32 a1_72
	word32 a3_73
	word32 s1_71
	word32 s0_70
	word32 a4_74
	word32 a6_75
	word32 s4_76
	word32 t3_77
	vPortFree(Mem7[a0:word32], a2, a5, mstatus, dwArg0148, dwArg0188, out s0_70, out s1_71, out a0_20, out a1_72, out a2_14, out a3_73, out a4_74, out a5_17, out a6_75, out s4_76, out t3_77)
	word32 a3_28
	word32 a4_29
	word32 s1_31
	word32 a1_34
	word32 s0_36
	word32 s4_37
	word32 a0_78
	word32 a2_79
	word32 a5_80
	word32 a6_81
	word32 t3_82
	vPortFree(a0_20, a2_14, a5_17, mstatus, dwArg0148, dwArg0188, out s0_36, out s1_31, out a0_78, out a1_34, out a2_79, out a3_28, out a4_29, out a5_80, out a6_81, out s4_37, out t3_82)
	s0_40 = s0_36
l23066206:
	word32 s0_40
	branch s0_40 != s0_36 + 12<i32> l23066212
l23066212:
	Mem42[s0_40:byte] = 0<8>
	s0_40 = s0_40 + 1<32>
l2306620A:
	a1Out = a1_34
	a3Out = a3_28
	a4Out = a4_29
	a5Out = s0_36 + 12<i32>
	s4Out = s4_37
	return s1_31
mbedtls_pem_free_exit:


word32 mbedtls_md5_init(word32 ra, word32 a0, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      md5_ctx_alloc
//      pem_aes_decrypt
//      mbedtls_md5
// MayUse:  a0:[0..31] ra:[0..31]
// LiveOut: a1 ra
// Trashed: a0 a1 a2 a3 a4 a5 ra t0 t1
// Preserved: sp
mbedtls_md5_init_entry:
l2306621A:
l23066220_thunk_memset:
	word32 a1_8
	word32 t1_17
	word32 a0_18
	word32 a2_19
	word32 a3_20
	word32 a4_21
	word32 a5_22
	word32 ra_13 = memset(ra, a0, 0<32>, 88<i32>, out t1_17, out a0_18, out a1_8, out a2_19, out a3_20, out a4_21, out a5_22)
	a1Out = a1_8
	return ra_13
mbedtls_md5_init_exit:


word32 mbedtls_md5_free(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      md5_ctx_free
//      pem_aes_decrypt
//      mbedtls_md5
// MayUse:  a0:[0..31]
// LiveOut: a5
// Trashed: a0 a5
// Preserved: sp
mbedtls_md5_free_entry:
l23066224:
	a0_5 = a0
	branch a0 != 0<32> l23066232
l23066232:
	word32 a0_5
	branch a0_5 != a0 + 88<i32> l2306622C
l2306622C:
	Mem7[a0_5:byte] = 0<8>
	a0_5 = a0_5 + 1<32>
l23066236:
l2306622A:
	return a0 + 88<i32>
mbedtls_md5_free_exit:


void mbedtls_md5_clone(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      md5_clone_wrap
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a1 a2 a3 a4 a5 a6 a7 t0 t1 t3 t4 t5 t6
// Preserved: sp
mbedtls_md5_clone_entry:
l23066238:
	word32 a1_26
	word32 a2_27
	word32 a3_28
	word32 a4_29
	word32 a5_30
	word32 a6_31
	word32 a7_32
	memcpy(a0, a1, 88<i32>, out a1_26, out a2_27, out a3_28, out a4_29, out a5_30, out a6_31, out a7_32)
	return
mbedtls_md5_clone_exit:


word32 mbedtls_md5_starts(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      md5_starts_wrap
//      pem_aes_decrypt
//      mbedtls_md5
// MayUse:  a0:[0..31]
// LiveOut: a5
// Trashed: a5
// Preserved: sp
mbedtls_md5_starts_entry:
l2306624A:
	Mem6[0x67452309<32>:word32] = a0
	Mem9[0xEFCDAB95<32>:word32] = a0
	Mem12[0x98BADD0E<32>:word32] = a0
	Mem15[a0:word32] = 0<32>
	Mem16[a0 + 4<i32>:word32] = 0<32>
	Mem17[0x1032548A<32>:word32] = a0
	return 0x10325476<32>
mbedtls_md5_starts_exit:


word32 mbedtls_md5_process(word32 a0, word32 a1, word32 dwArg3C, word32 dwArgE4, word32 dwArg0148, ptr32 & s1Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      md5_process_wrap
//      mbedtls_md5_update
// MayUse:  a0:[0..31] a1:[0..31] Stack +003C:[0..31] Stack +00E4:[0..31] Stack +0148:[0..31]
// LiveOut: s0 s1 s2 s3 s4 s5 s6
// Trashed: a0 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_md5_process_entry:
l2306627C:
	word32 s8_43 = CONVERT(Mem27[a1 + 3<i32>:byte], byte, word32) << 24<i32> | (CONVERT(Mem27[a1 + 2<i32>:byte], byte, word32) << 16<i32> | (CONVERT(Mem27[a1 + 1<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem27[a1:byte], byte, word32)))
	word32 t5_172 = Mem27[a0 + 8<i32>:int32]
	word32 a2_200 = CONVERT(Mem27[a1 + 62<i32>:byte], byte, word32) << 16<i32> | (CONVERT(Mem27[a1 + 61<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem27[a1 + 60<i32>:byte], byte, word32))
	word32 a6_176 = Mem27[a0 + 20<i32>:int32]
	word32 a7_210 = ((a1 ^ a6_176) & a2_200 ^ a6_176) + ((t5_172 + 0xD76AA478<32>) + s8_43)
	word32 s3_58 = CONVERT(Mem27[a1 + 7<i32>:byte], byte, word32) << 24<i32> | (CONVERT(Mem27[a1 + 6<i32>:byte], byte, word32) << 16<i32> | (CONVERT(Mem27[a1 + 5<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem27[a1 + 4<i32>:byte], byte, word32)))
	word32 a7_214 = (a7_210 >>u 0x19<u32> | a7_210 << 7<u32>) + a2_200
	word32 t6_219 = ((a2_200 ^ a1) & a7_214 ^ a1) + ((a6_176 + 0xE8C7B756<32>) + s3_58)
	word32 t0_73 = CONVERT(Mem27[a1 + 11<i32>:byte], byte, word32) << 24<i32> | (CONVERT(Mem27[a1 + 10<i32>:byte], byte, word32) << 16<i32> | (CONVERT(Mem27[a1 + 9<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem27[a1 + 8<i32>:byte], byte, word32)))
	word32 t6_223 = (t6_219 >>u 0x14<u32> | t6_219 << 0xC<u32>) + a7_214
	word32 t3_228 = ((a2_200 ^ a7_214) & t6_223 ^ a2_200) + ((a1 + 0x242070DB<32>) + t0_73)
	word32 s4_88 = CONVERT(Mem27[a1 + 15<i32>:byte], byte, word32) << 24<i32> | (CONVERT(Mem27[a1 + 14<i32>:byte], byte, word32) << 16<i32> | (CONVERT(Mem27[a1 + 13<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem27[a1 + 12<i32>:byte], byte, word32)))
	word32 t3_235 = (t3_228 << 17<i32> | t3_228 >>u 0xF<u32>) + t6_223
	word32 t1_240 = ((a7_214 ^ t6_223) & t3_235 ^ a7_214) + ((a2_200 + 0xC1BDCEEE<32>) + s4_88)
	word32 s0_66 = CONVERT(Mem27[a1 + 19<i32>:byte], byte, word32) << 24<i32> | ((CONVERT(Mem27[a1 + 17<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem27[a1 + 16<i32>:byte], byte, word32)) | CONVERT(Mem27[a1 + 18<i32>:byte], byte, word32) << 16<i32>)
	word32 t1_247 = (t1_240 << 22<i32> | t1_240 >>u 0xA<u32>) + t3_235
	word32 a7_252 = ((t6_223 ^ t3_235) & t1_247 ^ t6_223) + ((s0_66 + 0xF57C0FAF<32>) + a7_214)
	word32 s5_103 = CONVERT(Mem27[a1 + 23<i32>:byte], byte, word32) << 24<i32> | (CONVERT(Mem27[a1 + 22<i32>:byte], byte, word32) << 16<i32> | (CONVERT(Mem27[a1 + 21<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem27[a1 + 20<i32>:byte], byte, word32)))
	word32 a7_259 = (a7_252 >>u 0x19<u32> | a7_252 << 7<u32>) + t1_247
	word32 t6_264 = ((t3_235 ^ t1_247) & a7_259 ^ t3_235) + ((s5_103 + 0x4787C62A<32>) + t6_223)
	word32 a3_118 = CONVERT(Mem27[a1 + 27<i32>:byte], byte, word32) << 24<i32> | ((CONVERT(Mem27[a1 + 25<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem27[a1 + 24<i32>:byte], byte, word32)) | CONVERT(Mem27[a1 + 26<i32>:byte], byte, word32) << 16<i32>)
	word32 t6_271 = (t6_264 >>u 0x14<u32> | t6_264 << 0xC<u32>) + a7_259
	word32 t3_276 = ((t1_247 ^ a7_259) & t6_271 ^ t1_247) + ((a3_118 + 0xA8304613<32>) + t3_235)
	word32 s7_133 = CONVERT(Mem27[a1 + 31<i32>:byte], byte, word32) << 24<i32> | (CONVERT(Mem27[a1 + 30<i32>:byte], byte, word32) << 16<i32> | (CONVERT(Mem27[a1 + 29<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem27[a1 + 28<i32>:byte], byte, word32)))
	word32 t3_283 = (t3_276 << 17<i32> | t3_276 >>u 0xF<u32>) + t6_271
	word32 t1_288 = ((a7_259 ^ t6_271) & t3_283 ^ a7_259) + ((s7_133 + 0xFD469501<32>) + t1_247)
	word32 s2_146 = CONVERT(Mem27[a1 + 35<i32>:byte], byte, word32) << 24<i32> | (CONVERT(Mem27[a1 + 34<i32>:byte], byte, word32) << 16<i32> | (CONVERT(Mem27[a1 + 33<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem27[a1 + 32<i32>:byte], byte, word32)))
	word32 t1_295 = (t1_288 << 22<i32> | t1_288 >>u 0xA<u32>) + t3_283
	word32 a7_300 = ((t6_271 ^ t3_283) & t1_295 ^ t6_271) + ((s2_146 + 0x698098D8<32>) + a7_259)
	word32 t4_121 = CONVERT(Mem27[a1 + 39<i32>:byte], byte, word32) << 24<i32> | (CONVERT(Mem27[a1 + 38<i32>:byte], byte, word32) << 16<i32> | (CONVERT(Mem27[a1 + 37<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem27[a1 + 36<i32>:byte], byte, word32)))
	word32 a7_307 = (a7_300 >>u 0x19<u32> | a7_300 << 7<u32>) + t1_295
	word32 t6_312 = ((t3_283 ^ t1_295) & a7_307 ^ t3_283) + ((t4_121 + 0x8B44F7AF<32>) + t6_271)
	word32 a5_158 = CONVERT(Mem27[a1 + 43<i32>:byte], byte, word32) << 24<i32> | ((CONVERT(Mem27[a1 + 41<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem27[a1 + 40<i32>:byte], byte, word32)) | CONVERT(Mem27[a1 + 42<i32>:byte], byte, word32) << 16<i32>)
	word32 t6_319 = (t6_312 >>u 0x14<u32> | t6_312 << 0xC<u32>) + a7_307
	word32 t3_324 = ((t1_295 ^ a7_307) & t6_319 ^ t1_295) + ((a5_158 + 0xF5FFFBB1<32>) + t3_283)
	word32 t2_149 = CONVERT(Mem27[a1 + 47<i32>:byte], byte, word32) << 24<i32> | (CONVERT(Mem27[a1 + 46<i32>:byte], byte, word32) << 16<i32> | (CONVERT(Mem27[a1 + 45<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem27[a1 + 44<i32>:byte], byte, word32)))
	word32 t3_331 = (t3_324 << 17<i32> | t3_324 >>u 0xF<u32>) + t6_319
	word32 t1_336 = ((a7_307 ^ t6_319) & t3_331 ^ a7_307) + ((t2_149 + 0x895CD7BE<32>) + t1_295)
	word32 a4_168 = CONVERT(Mem27[a1 + 51<i32>:byte], byte, word32) << 24<i32> | ((CONVERT(Mem27[a1 + 49<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem27[a1 + 48<i32>:byte], byte, word32)) | CONVERT(Mem27[a1 + 50<i32>:byte], byte, word32) << 16<i32>)
	word32 t1_343 = (t1_336 << 22<i32> | t1_336 >>u 0xA<u32>) + t3_331
	word32 a7_348 = ((t6_319 ^ t3_331) & t1_343 ^ t6_319) + ((a4_168 + 0x6B901122<32>) + a7_307)
	word32 s1_184 = CONVERT(Mem27[a1 + 55<i32>:byte], byte, word32) << 24<i32> | ((CONVERT(Mem27[a1 + 53<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem27[a1 + 52<i32>:byte], byte, word32)) | CONVERT(Mem27[a1 + 54<i32>:byte], byte, word32) << 16<i32>)
	word32 a7_355 = (a7_348 >>u 0x19<u32> | a7_348 << 7<u32>) + t1_343
	word32 t6_360 = ((t3_331 ^ t1_343) & a7_355 ^ t3_331) + ((s1_184 + 0xFD987193<32>) + t6_319)
	word32 s6_194 = CONVERT(Mem27[a1 + 59<i32>:byte], byte, word32) << 24<i32> | (CONVERT(Mem27[a1 + 58<i32>:byte], byte, word32) << 16<i32> | (CONVERT(Mem27[a1 + 57<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem27[a1 + 56<i32>:byte], byte, word32)))
	word32 t6_367 = (t6_360 >>u 0x14<u32> | t6_360 << 0xC<u32>) + a7_355
	word32 t3_372 = ((t1_343 ^ a7_355) & t6_367 ^ t1_343) + ((s6_194 + 0xA679438E<32>) + t3_331)
	word32 s9_204 = CONVERT(Mem27[a1 + 63<i32>:byte], byte, word32) << 24<i32> | a2_200
	word32 t3_379 = (t3_372 << 17<i32> | t3_372 >>u 0xF<u32>) + t6_367
	word32 t1_384 = ((a7_355 ^ t6_367) & t3_379 ^ a7_355) + ((s9_204 + 0x49B40821<32>) + t1_343)
	word32 t1_390 = (t1_384 << 22<i32> | t1_384 >>u 0xA<u32>) + t3_379
	word32 a7_396 = ((t3_379 ^ t1_390) & t6_367 ^ t3_379) + ((s3_58 + 0xF61E2562<32>) + a7_355)
	word32 a7_402 = (a7_396 >>u 0x1B<u32> | a7_396 << 5<u32>) + t1_390
	word32 t6_408 = ((t1_390 ^ a7_402) & t3_379 ^ t1_390) + ((a3_118 + 0xC040B340<32>) + t6_367)
	word32 t6_414 = (t6_408 >>u 0x17<u32> | t6_408 << 9<u32>) + a7_402
	word32 t3_420 = ((a7_402 ^ t6_414) & t1_390 ^ a7_402) + ((t2_149 + 0x265E5A51<32>) + t3_379)
	word32 t3_426 = (t3_420 >>u 0x12<u32> | t3_420 << 0xE<u32>) + t6_414
	word32 t1_432 = ((t6_414 ^ t3_426) & a7_402 ^ t6_414) + ((s8_43 + 0xE9B6C7AA<32>) + t1_390)
	word32 t1_438 = (t1_432 << 20<i32> | t1_432 >>u 0xC<u32>) + t3_426
	word32 a7_444 = ((t3_426 ^ t1_438) & t6_414 ^ t3_426) + ((s5_103 + 0xD62F105D<32>) + a7_402)
	word32 a7_450 = (a7_444 >>u 0x1B<u32> | a7_444 << 5<u32>) + t1_438
	word32 t6_456 = ((t1_438 ^ a7_450) & t3_426 ^ t1_438) + ((a5_158 + 0x2441453<32>) + t6_414)
	word32 t6_462 = (t6_456 >>u 0x17<u32> | t6_456 << 9<u32>) + a7_450
	word32 t3_468 = ((a7_450 ^ t6_462) & t1_438 ^ a7_450) + ((s9_204 + 0xD8A1E681<32>) + t3_426)
	word32 t3_474 = (t3_468 >>u 0x12<u32> | t3_468 << 0xE<u32>) + t6_462
	word32 t1_480 = ((t6_462 ^ t3_474) & a7_450 ^ t6_462) + ((s0_66 + 0xE7D3FBC8<32>) + t1_438)
	word32 t1_486 = (t1_480 << 20<i32> | t1_480 >>u 0xC<u32>) + t3_474
	word32 a7_492 = ((t3_474 ^ t1_486) & t6_462 ^ t3_474) + ((t4_121 + 0x21E1CDE6<32>) + a7_450)
	word32 a7_498 = (a7_492 >>u 0x1B<u32> | a7_492 << 5<u32>) + t1_486
	word32 t6_504 = ((t1_486 ^ a7_498) & t3_474 ^ t1_486) + ((s6_194 + 0xC33707D6<32>) + t6_462)
	word32 t6_510 = (t6_504 >>u 0x17<u32> | t6_504 << 9<u32>) + a7_498
	word32 t3_516 = ((a7_498 ^ t6_510) & t1_486 ^ a7_498) + ((s4_88 + 0xF4D50D87<32>) + t3_474)
	word32 t3_522 = (t3_516 >>u 0x12<u32> | t3_516 << 0xE<u32>) + t6_510
	word32 t1_528 = ((t6_510 ^ t3_522) & a7_498 ^ t6_510) + ((s2_146 + 0x455A14ED<32>) + t1_486)
	word32 t1_534 = (t1_528 << 20<i32> | t1_528 >>u 0xC<u32>) + t3_522
	word32 a7_540 = ((t3_522 ^ t1_534) & t6_510 ^ t3_522) + ((s1_184 + 0xA9E3E905<32>) + a7_498)
	word32 a7_546 = (a7_540 >>u 0x1B<u32> | a7_540 << 5<u32>) + t1_534
	word32 t6_552 = ((t1_534 ^ a7_546) & t3_522 ^ t1_534) + ((t0_73 + 0xFCEFA3F8<32>) + t6_510)
	word32 t6_558 = (t6_552 >>u 0x17<u32> | t6_552 << 9<u32>) + a7_546
	word32 t3_564 = ((a7_546 ^ t6_558) & t1_534 ^ a7_546) + ((s7_133 + 0x676F02D9<32>) + t3_522)
	word32 t3_568 = (t3_564 >>u 0x12<u32> | t3_564 << 0xE<u32>) + t6_558
	word32 s10_569 = t6_558 ^ t3_568
	word32 t1_573 = (s10_569 & a7_546 ^ t6_558) + ((a4_168 + 0x8D2A4C8A<32>) + t1_534)
	word32 t1_579 = (t1_573 << 20<i32> | t1_573 >>u 0xC<u32>) + t3_568
	word32 a7_583 = (s10_569 ^ t1_579) + ((s5_103 + 0xFFFA3942<32>) + a7_546)
	word32 a7_590 = (a7_583 >>u 0x1C<u32> | a7_583 << 4<u32>) + t1_579
	word32 s10_594 = (t3_568 ^ t1_579 ^ a7_590) + (t6_558 + (s2_146 + 0x8771F681<32>))
	word32 s10_601 = (s10_594 >>u 0x15<u32> | s10_594 << 0xB<u32>) + a7_590
	word32 t6_605 = (t1_579 ^ a7_590 ^ s10_601) + (t3_568 + (t2_149 + 0x6D9D6122<32>))
	word32 t6_612 = (t6_605 >>u 0x10<u32> | t6_605 << 0x10<u32>) + s10_601
	word32 t3_616 = (a7_590 ^ s10_601 ^ t6_612) + (t1_579 + (s6_194 + 0xFDE5380C<32>))
	word32 t3_623 = (t3_616 << 23<i32> | t3_616 >>u 9<u32>) + t6_612
	word32 a7_627 = (s10_601 ^ t6_612 ^ t3_623) + ((s3_58 + 0xA4BEEA44<32>) + a7_590)
	word32 a7_634 = (a7_627 >>u 0x1C<u32> | a7_627 << 4<u32>) + t3_623
	word32 t1_638 = (t6_612 ^ t3_623 ^ a7_634) + (s10_601 + (s0_66 + 0x4BDECFA9<32>))
	word32 t1_645 = (t1_638 >>u 0x15<u32> | t1_638 << 0xB<u32>) + a7_634
	word32 t6_649 = (t3_623 ^ a7_634 ^ t1_645) + ((s7_133 + 0xF6BB4B60<32>) + t6_612)
	word32 t6_656 = (t6_649 >>u 0x10<u32> | t6_649 << 0x10<u32>) + t1_645
	word32 s10_660 = (a7_634 ^ t1_645 ^ t6_656) + (t3_623 + (a5_158 + 0xBEBFBC70<32>))
	word32 s10_667 = (s10_660 << 23<i32> | s10_660 >>u 9<u32>) + t6_656
	word32 t3_671 = (t1_645 ^ t6_656 ^ s10_667) + (a7_634 + (s1_184 + 0x289B7EC6<32>))
	word32 t3_678 = (t3_671 >>u 0x1C<u32> | t3_671 << 4<u32>) + s10_667
	word32 t1_682 = (t6_656 ^ s10_667 ^ t3_678) + ((s8_43 + 0xEAA127FA<32>) + t1_645)
	word32 t1_689 = (t1_682 >>u 0x15<u32> | t1_682 << 0xB<u32>) + t3_678
	word32 t6_693 = (s10_667 ^ t3_678 ^ t1_689) + ((s4_88 + 0xD4EF3085<32>) + t6_656)
	word32 t6_700 = (t6_693 >>u 0x10<u32> | t6_693 << 0x10<u32>) + t1_689
	word32 a7_704 = (t3_678 ^ t1_689 ^ t6_700) + (s10_667 + (a3_118 + 0x4881D05<32>))
	word32 a7_711 = (a7_704 << 23<i32> | a7_704 >>u 9<u32>) + t6_700
	word32 t3_715 = (t1_689 ^ t6_700 ^ a7_711) + ((t4_121 + 0xD9D4D039<32>) + t3_678)
	word32 t3_722 = (t3_715 >>u 0x1C<u32> | t3_715 << 4<u32>) + a7_711
	word32 s10_726 = (t6_700 ^ a7_711 ^ t3_722) + (t1_689 + (a4_168 + 0xE6DB99E5<32>))
	word32 s10_733 = (s10_726 >>u 0x15<u32> | s10_726 << 0xB<u32>) + t3_722
	word32 t1_737 = (a7_711 ^ t3_722 ^ s10_733) + (t6_700 + (s9_204 + 0x1FA27CF8<32>))
	word32 t1_744 = (t1_737 >>u 0x10<u32> | t1_737 << 0x10<u32>) + s10_733
	word32 a7_748 = (t3_722 ^ s10_733 ^ t1_744) + ((t0_73 + 0xC4AC5665<32>) + a7_711)
	word32 a7_755 = (a7_748 << 23<i32> | a7_748 >>u 9<u32>) + t1_744
	word32 t6_760 = ((~s10_733 | a7_755) ^ t1_744) + (t3_722 + (s8_43 + 0xF4292244<32>))
	word32 t6_767 = (t6_760 >>u 0x1A<u32> | t6_760 << 6<u32>) + a7_755
	word32 t3_772 = ((~t1_744 | t6_767) ^ a7_755) + (s10_733 + (s7_133 + 0x432AFF97<32>))
	word32 t3_779 = (t3_772 >>u 0x16<u32> | t3_772 << 0xA<u32>) + t6_767
	word32 t1_784 = ((~a7_755 | t3_779) ^ t6_767) + ((s6_194 + 0xAB9423A7<32>) + t1_744)
	word32 t1_791 = (t1_784 >>u 0x11<u32> | t1_784 << 0xF<u32>) + t3_779
	word32 a7_796 = ((~t6_767 | t1_791) ^ t3_779) + ((s5_103 + 0xFC93A039<32>) + a7_755)
	word32 a7_803 = (a7_796 << 21<i32> | a7_796 >>u 0xB<u32>) + t1_791
	word32 t6_808 = ((~t3_779 | a7_803) ^ t1_791) + ((a4_168 + 0x655B59C3<32>) + t6_767)
	word32 t6_815 = (t6_808 >>u 0x1A<u32> | t6_808 << 6<u32>) + a7_803
	word32 a4_820 = ((~t1_791 | t6_815) ^ a7_803) + (t3_779 + (s4_88 + 0x8F0CCC92<32>))
	word32 a4_827 = (a4_820 >>u 22<i32> | a4_820 << 0xA<u32>) + t6_815
	word32 t1_832 = ((~a7_803 | a4_827) ^ t6_815) + ((a5_158 + 0xFFEFF47D<32>) + t1_791)
	word32 t1_839 = (t1_832 >>u 0x11<u32> | t1_832 << 0xF<u32>) + a4_827
	word32 s3_840 = s3_58 + 0x85845DD1<32> + a7_803
	word32 a7_844 = ((~t6_815 | t1_839) ^ a4_827) + s3_840
	word32 a7_851 = (a7_844 << 21<i32> | a7_844 >>u 0xB<u32>) + t1_839
	word32 s2_852 = s2_146 + 0x6FA87E4F<32> + t6_815
	word32 t6_856 = ((~a4_827 | a7_851) ^ t1_839) + s2_852
	word32 t6_863 = (t6_856 >>u 0x1A<u32> | t6_856 << 6<u32>) + a7_851
	word32 t3_868 = ((~t1_839 | t6_863) ^ a7_851) + (a4_827 + (s9_204 + 0xFE2CE6E0<32>))
	word32 t3_875 = (t3_868 >>u 0x16<u32> | t3_868 << 0xA<u32>) + t6_863
	word32 t1_880 = ((~a7_851 | t3_875) ^ t6_863) + ((a3_118 + 0xA3014314<32>) + t1_839)
	word32 t1_887 = (t1_880 >>u 0x11<u32> | t1_880 << 0xF<u32>) + t3_875
	word32 s1_888 = s1_184 + 0x4E0811A1<32> + a7_851
	word32 a7_892 = ((~t6_863 | t1_887) ^ t3_875) + s1_888
	word32 a7_899 = (a7_892 << 21<i32> | a7_892 >>u 0xB<u32>) + t1_887
	word32 a5_904 = ((~t3_875 | a7_899) ^ t1_887) + (t6_863 + (s0_66 + 0xF7537E82<32>))
	word32 a5_911 = (a5_904 >>u 26<i32> | a5_904 << 6<u32>) + a7_899
	word32 a4_916 = ((~t1_887 | a5_911) ^ a7_899) + (t3_875 + (t2_149 + 0xBD3AF235<32>))
	word32 a4_923 = (a4_916 >>u 22<i32> | a4_916 << 0xA<u32>) + a5_911
	word32 a3_928 = ((~a7_899 | a4_923) ^ a5_911) + (t1_887 + (t0_73 + 0x2AD7D2BB<32>))
	word32 a3_933 = (a3_928 >>u 17<i32> | a3_928 << 0xF<u32>) + a4_923
	word32 a0_205 = Mem27[a2_200 + 12<i32>:word32]
	Mem949[a0_205 + 8<i32>:word32] = t5_172 + a5_911
	word32 a5_941 = ((~a5_911 | a3_933) ^ a4_923) + (a7_899 + (t4_121 + 0xEB86D391<32>))
	Mem950[dwArgE4 + (a5_941 >>u 0xB<u32> | a5_941 << 21<i32>) + 12<i32>:word32] = a0_205
	Mem951[a3_933 + a1 + 16<i32>:word32] = a0_205
	Mem952[a4_923 + a6_176 + 20<i32>:word32] = a0_205
	0<32> = dwArg0148
	0<32> = dwArg3C
	s1Out = s1_888
	s2Out = s2_852
	s3Out = s3_840
	s4Out = dwArg98
	s5Out = 0x655B59C3<32>
	s6Out = 0xFC93A039<32>
	return dwLoc04
mbedtls_md5_process_exit:


word32 mbedtls_md5_update.part.0(word32 a1, word32 a2, word32 a5, word32 dwArg1C, word32 dwArg48, word32 dwArgA8, word32 dwArgC4, word32 dwArg0128, ptr32 & a2Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_md5_update
//      mbedtls_md5_finish
// MayUse:  a1:[0..31] a2:[0..31] a5:[0..31] Stack +001C:[0..31] Stack +0048:[0..31] Stack +00A8:[0..31] Stack +00C4:[0..31] Stack +0128:[0..31]
// LiveOut: a2 a5 s1 s2 s3 s4 s5 s6
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_md5_update.part.0_entry:
l23066E56:
	word32 a0_21 = Mem19[a5:word32]
	word32 a5_27 = a5 + a2
	Mem28[a5_27:word32] = a0_21
	word32 s1_100 = a0_21
	word32 s2_115 = a1
	word32 s3_116 = a5 & 63<i32>
	word32 s0_111 = a2
	branch a5_27 >=u a2 l23066E82
l23066E7C:
	Mem32[a5_27 + 5<32>:word32] = Mem28[a5_27 + 4<i32>:word32]
l23066E82:
	branch (a5 & 63<i32>) == 0<32> l23066EB4
l23066E86:
	word32 s4_35 = 64<i32> - (a5 & 63<i32>)
	branch a2 <u s4_35 l23066EB4
l23066E92:
	word32 a7_323
	word32 a6_322
	word32 a5_321
	word32 a3_319
	word32 a4_320
	word32 a1_317
	word32 a2_318
	memcpy(a0_21 + 24<i32> + (a5 & 63<i32>), a1, s4_35, out a1_317, out a2_318, out a3_319, out a4_320, out a5_321, out a6_322, out a7_323)
	word32 s2_73
	word32 s4_75
	word32 s5_325
	word32 s6_326
	word32 s3_324
	s0_111 = mbedtls_md5_process(a0_21, a0_21 + 24<i32>, dwArg1C, dwArgC4, dwArg0128, out s1_100, out s2_73, out s3_324, out s4_75, out s5_325, out s6_326)
	s2_115 = s2_73 + s4_75
	s3_116 = 0<32>
l23066EB4:
	word32 s4_131 = s0_111
	word32 s6_119 = s2_115 + s0_111
	word32 s5_118 = 63<i32>
l23066ECA:
	word32 a1_98 = s6_119 - s4_131
	branch s5_118 <u s4_131 l23066EC0
l23066EC0:
	word32 s4_117
	s0_111 = mbedtls_md5_process(s1_100, a1_98, dwArg1C, dwArgC4, dwArg0128, out s1_100, out s2_115, out s3_116, out s4_117, out s5_118, out s6_119)
	s4_131 = s4_117 + -64<i32>
l23066ED2:
	word32 a2_133 = s0_111 >>u 6<u32>
	word32 a1_138 = (a2_133 << 6<u32>) + s2_115
	branch a2_133 + -64<i32> + s0_111 == 0<32> l23066F04
l23066F04:
	0<32> = dwArgA8
	a2Out = dwArg48
	a5Out = -64<i32>
	s2Out = <invalid>
	s3Out = <invalid>
	s4Out = <invalid>
	s5Out = <invalid>
	s6Out = <invalid>
	return <invalid>
l23066EE8:
	0<32> = dwArgA8
	word32 a0_157 = s1_100 + 24<i32> + s3_116
l23066F00_thunk_memcpy:
	word32 a5_161
	word32 a2_164
	word32 a3_328
	word32 a4_329
	word32 a1_327
	word32 a6_330
	word32 a7_331
	memcpy(a0_157, a1_138, dwArg48, out a1_327, out a2_164, out a3_328, out a4_329, out a5_161, out a6_330, out a7_331)
	a2Out = a2_164
	a5Out = a5_161
	s2Out = <invalid>
	s3Out = <invalid>
	s4Out = <invalid>
	s5Out = <invalid>
	s6Out = <invalid>
	return <invalid>
mbedtls_md5_update.part.0_exit:


word32 mbedtls_md5_update(word32 a1, word32 a2, word32 a5, word32 dwArg1C, word32 dwArg48, word32 dwArgA8, word32 dwArgC4, word32 dwArg0128, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      md5_update_wrap
//      pem_aes_decrypt
//      mbedtls_md5_finish
//      mbedtls_md5
// MayUse:  a1:[0..31] a2:[0..31] a5:[0..31] Stack +001C:[0..31] Stack +0048:[0..31] Stack +00A8:[0..31] Stack +00C4:[0..31] Stack +0128:[0..31]
// LiveOut: a2 a5 s2 s3 s4
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_md5_update_entry:
l23066F18:
	branch a2 == 0<32> l23066F1E
l23066F1E:
	a5Out = a5
	s2Out = s2
	s3Out = s3
	s4Out = s4
	return a2
l23066F1A:
l23066F1A_thunk_mbedtls_md5_update.part.0:
	word32 a2_9
	word32 a5_12
	word32 s2_19
	word32 s3_20
	word32 s4_21
	word32 s5_98
	word32 s6_99
	mbedtls_md5_update.part.0(a1, a2, a5, dwArg1C, dwArg48, dwArgA8, dwArgC4, dwArg0128, out a2_9, out a5_12, out s2_19, out s3_20, out s4_21, out s5_98, out s6_99)
	a5Out = a5_12
	s2Out = s2_19
	s3Out = s3_20
	s4Out = s4_21
	return a2_9
mbedtls_md5_update_exit:


word32 mbedtls_md5_finish(word32 a2, word32 dwArg28, word32 dwArg88, word32 dwArgA4, word32 dwArg0108, ptr32 & s1Out, ptr32 & s2Out, ptr32 & s5Out, ptr32 & s6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      md5_finish_wrap
//      pem_aes_decrypt
//      mbedtls_md5
// MayUse:  a2:[0..31] Stack +0028:[0..31] Stack +0088:[0..31] Stack +00A4:[0..31] Stack +0108:[0..31]
// LiveOut: s0 s1 s2 s5 s6
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_md5_finish_entry:
l23066F20:
	word32 a5_25
	branch (a2 & 63<i32>) >u 55<i32> l23066FEE
l23066FEE:
	a5_25 = 120<i32>
l23066F4C:
	a5_25 = 56<i32>
l23066F50:
	word32 a5_41
	word32 s4_161
	word32 s3_160
	word32 s2_159
	mbedtls_md5_update(0x2308C024<32>, a5_25 - (a2 & 63<i32>), a5_25, dwLoc04, dwArg28, dwArg88, dwArgA4, dwArg0108, out a5_41, out s2_159, out s3_160, out s4_161)
	word32 a5_72
	word32 s2_79
	word32 s5_82
	word32 s6_83
	word32 a2_162
	word32 s3_163
	word32 s4_164
	word32 s1_76 = mbedtls_md5_update.part.0(fp + 0xFFFFFFE8<32>, 8<32>, a5_41, dwLoc04, dwArg28, dwArg88, dwArgA4, dwArg0108, out a2_162, out a5_72, out s2_79, out s3_163, out s4_164, out s5_82, out s6_83)
	Mem96[s1_76:byte] = SLICE(a5_72, byte, 0)
	word32 s0_97 = Mem96[a5_72 + 8<i32>:word32]
	Mem99[s1_76 + 1<i32>:byte] = SLICE(a5_72 >>u 8<i32>, byte, 0)
	Mem101[s1_76 + 2<i32>:byte] = SLICE(CONVERT(Mem99[s0_97 + 10<i32>:uint16], uint16, word32), byte, 0)
	word32 a5_102 = CONVERT(Mem101[s0_97 + 11<i32>:byte], byte, word32)
	Mem103[s1_76 + 3<i32>:byte] = SLICE(a5_102, byte, 0)
	Mem105[s1_76 + 4<i32>:byte] = SLICE(a5_102, byte, 0)
	word32 s0_106 = Mem105[a5_102 + 12<i32>:word32]
	Mem108[s1_76 + 5<i32>:byte] = SLICE(a5_102 >>u 8<i32>, byte, 0)
	Mem110[s1_76 + 6<i32>:byte] = SLICE(CONVERT(Mem108[s0_106 + 14<i32>:uint16], uint16, word32), byte, 0)
	word32 a5_111 = CONVERT(Mem110[s0_106 + 15<i32>:byte], byte, word32)
	Mem112[s1_76 + 7<i32>:byte] = SLICE(a5_111, byte, 0)
	Mem114[s1_76 + 8<i32>:byte] = SLICE(a5_111, byte, 0)
	word32 s0_115 = Mem114[a5_111 + 16<i32>:word32]
	Mem117[s1_76 + 9<i32>:byte] = SLICE(a5_111 >>u 8<i32>, byte, 0)
	Mem119[s1_76 + 10<i32>:byte] = SLICE(CONVERT(Mem117[s0_115 + 18<i32>:uint16], uint16, word32), byte, 0)
	word32 a5_120 = CONVERT(Mem119[s0_115 + 19<i32>:byte], byte, word32)
	Mem121[s1_76 + 11<i32>:byte] = SLICE(a5_120, byte, 0)
	Mem123[s1_76 + 12<i32>:byte] = SLICE(a5_120, byte, 0)
	word32 s0_124 = Mem123[a5_120 + 20<i32>:word32]
	Mem126[s1_76 + 13<i32>:byte] = SLICE(a5_120 >>u 8<i32>, byte, 0)
	Mem128[s1_76 + 14<i32>:byte] = SLICE(CONVERT(Mem126[s0_124 + 22<i32>:uint16], uint16, word32), byte, 0)
	Mem130[s1_76 + 15<i32>:byte] = SLICE(CONVERT(Mem128[s0_124 + 23<i32>:byte], byte, word32), byte, 0)
	s1Out = s1_76
	s2Out = s2_79
	s5Out = s5_82
	s6Out = s6_83
	return s0_124
mbedtls_md5_finish_exit:


void mbedtls_md5(word32 ra, word32 a0, word32 dwArg08, word32 dwArg24, word32 dwArg28, word32 dwArg44, word32 dwArg88, word32 dwArgA8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] ra:[0..31] Stack +0008:[0..31] Stack +0024:[0..31] Stack +0028:[0..31] Stack +0044:[0..31] Stack +0088:[0..31] Stack +00A8:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_md5_entry:
l23066FF4:
	word32 a1_18
	mbedtls_md5_init(ra, fp + -104<i32>, out a1_18)
	word32 a5_114
	word32 s2_115
	word32 s3_116
	word32 s4_117
	word32 s1_118
	word32 s2_119
	word32 s5_120
	word32 s6_121
	mbedtls_md5_finish(mbedtls_md5_update(a0, a1_18, mbedtls_md5_starts(fp + -104<i32>), dwLoc64, dwLoc38, dwArg28, dwArg44, dwArgA8, out a5_114, out s2_115, out s3_116, out s4_117), dwLoc58, dwArg08, dwArg24, dwArg88, out s1_118, out s2_119, out s5_120, out s6_121)
	mbedtls_md5_free(fp + -104<i32>)
	return
mbedtls_md5_exit:


word32 mbedtls_sha1_init(word32 ra, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      sha1_ctx_alloc
//      mbedtls_sha1
// MayUse:  a0:[0..31] ra:[0..31]
// LiveOut: a1
// Trashed: a0 a1 a2 a3 a4 a5 ra t0 t1
// Preserved: sp
mbedtls_sha1_init_entry:
l23067032:
l23067038_thunk_memset:
	word32 a1_8
	word32 t1_16
	word32 a0_17
	word32 a2_18
	word32 a3_19
	word32 a4_20
	word32 a5_21
	memset(ra, a0, 0<32>, 92<i32>, out t1_16, out a0_17, out a1_8, out a2_18, out a3_19, out a4_20, out a5_21)
	return a1_8
mbedtls_sha1_init_exit:


word32 mbedtls_sha1_free(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      sha1_ctx_free
//      mbedtls_sha1
// MayUse:  a0:[0..31]
// LiveOut: a5
// Trashed: a0 a5
// Preserved: sp
mbedtls_sha1_free_entry:
l2306703C:
	a0_5 = a0
	branch a0 != 0<32> l2306704A
l2306704A:
	word32 a0_5
	branch a0_5 != a0 + 92<i32> l23067044
l23067044:
	Mem7[a0_5:byte] = 0<8>
	a0_5 = a0_5 + 1<32>
l2306704E:
l23067042:
	return a0 + 92<i32>
mbedtls_sha1_free_exit:


void mbedtls_sha1_clone(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      sha1_clone_wrap
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a1 a2 a3 a4 a5 a6 a7 t0 t1 t3 t4 t5 t6
// Preserved: sp
mbedtls_sha1_clone_entry:
l23067050:
	word32 a1_26
	word32 a2_27
	word32 a3_28
	word32 a4_29
	word32 a5_30
	word32 a6_31
	word32 a7_32
	memcpy(a0, a1, 92<i32>, out a1_26, out a2_27, out a3_28, out a4_29, out a5_30, out a6_31, out a7_32)
	return
mbedtls_sha1_clone_exit:


word32 mbedtls_sha1_starts(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      sha1_starts_wrap
//      mbedtls_sha1
// MayUse:  a0:[0..31]
// LiveOut: a5
// Trashed: a5
// Preserved: sp
mbedtls_sha1_starts_entry:
l23067062:
	Mem6[0x67452309<32>:word32] = a0
	Mem9[0xEFCDAB95<32>:word32] = a0
	Mem12[0x98BADD0E<32>:word32] = a0
	Mem15[0x1032548A<32>:word32] = a0
	Mem18[a0:word32] = 0<32>
	Mem19[a0 + 4<i32>:word32] = 0<32>
	Mem20[0xC3D2E208<32>:word32] = a0
	return 0xC3D2E1F0<32>
mbedtls_sha1_starts_exit:


word32 mbedtls_sha1_process(word32 a0, word32 a1, word32 dwArg3C, word32 dwArg0148, ptr32 & s1Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      sha1_process_wrap
//      mbedtls_sha1_update
// MayUse:  a0:[0..31] a1:[0..31] Stack +003C:[0..31] Stack +0148:[0..31]
// LiveOut: s0 s1 s2 s3 s4 s5 s6
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_sha1_process_entry:
l2306709E:
	word32 a1_190 = CONVERT(Mem27[a1 + 62<i32>:byte], byte, word32)
	word32 a0_194 = Mem27[(a1_190 << 8<i32>) + 20<i32>:word32]
	word32 s4_169 = Mem27[a0 + 16<i32>:int32]
	word32 s3_173 = Mem27[a0 + 8<i32>:int32]
	word32 a2_43 = CONVERT(Mem27[a1:byte], byte, word32) << 24<i32> | CONVERT(Mem27[a1 + 1<i32>:byte], byte, word32) << 16<i32> | CONVERT(Mem27[a1 + 3<i32>:byte], byte, word32) | CONVERT(Mem27[a1 + 2<i32>:byte], byte, word32) << 8<i32>
	word32 s6_213 = Mem27[a0_194 + 12<i32>:int32] << 30<i32> | Mem27[a0_194 + 12<i32>:int32] >>u 2<u32>
	word32 a4_54 = CONVERT(Mem27[a1 + 4<i32>:byte], byte, word32) << 24<i32> | CONVERT(Mem27[a1 + 5<i32>:byte], byte, word32) << 16<i32> | CONVERT(Mem27[a1 + 7<i32>:byte], byte, word32) | CONVERT(Mem27[a1 + 6<i32>:byte], byte, word32) << 8<i32>
	word32 a1_210 = (s3_173 << 5<u32> | s3_173 >>u 0x1B<u32>) + (Mem27[a0 + 24<i32>:int32] + 0x5A827999<32>) + ((s4_169 ^ a1_190 << 8<i32>) & Mem27[a0_194 + 12<i32>:int32] ^ Mem27[a0_194 + 20<i32>:int32]) + a2_43
	word32 s11_226 = s3_173 << 0x1E<u32> | s3_173 >>u 2<u32>
	word32 a3_62 = CONVERT(Mem27[a1 + 8<i32>:byte], byte, word32) << 24<i32> | CONVERT(Mem27[a1 + 9<i32>:byte], byte, word32) << 16<i32> | CONVERT(Mem27[a1 + 11<i32>:byte], byte, word32) | CONVERT(Mem27[a1 + 10<i32>:byte], byte, word32) << 8<i32>
	word32 s7_224 = (a1_210 << 5<u32> | a1_210 >>u 0x1B<u32>) + ((((s4_169 ^ s6_213) & s3_173 ^ s4_169) + (Mem27[a0_194 + 20<i32>:int32] + 0x5A827999<32>)) + a4_54)
	word32 a1_238 = a1_210 << 30<i32> | a1_210 >>u 2<u32>
	word32 t0_70 = CONVERT(Mem27[a1 + 12<i32>:byte], byte, word32) << 24<i32> | CONVERT(Mem27[a1 + 13<i32>:byte], byte, word32) << 16<i32> | CONVERT(Mem27[a1 + 15<i32>:byte], byte, word32) | CONVERT(Mem27[a1 + 14<i32>:byte], byte, word32) << 8<i32>
	word32 s9_239 = (s7_224 << 5<u32> | s7_224 >>u 0x1B<u32>) + (((s6_213 ^ s11_226) & a1_210 ^ s6_213) + ((s4_169 + 0x5A827999<32>) + a3_62))
	word32 s7_251 = s7_224 << 30<i32> | s7_224 >>u 2<u32>
	word32 t5_80 = CONVERT(Mem27[a1 + 16<i32>:byte], byte, word32) << 24<i32> | CONVERT(Mem27[a1 + 17<i32>:byte], byte, word32) << 16<i32> | CONVERT(Mem27[a1 + 19<i32>:byte], byte, word32) | CONVERT(Mem27[a1 + 18<i32>:byte], byte, word32) << 8<i32>
	word32 s10_252 = (s9_239 << 5<u32> | s9_239 >>u 0x1B<u32>) + (((s11_226 ^ a1_238) & s7_224 ^ s11_226) + ((s6_213 + 0x5A827999<32>) + t0_70))
	word32 s9_264 = s9_239 << 30<i32> | s9_239 >>u 2<u32>
	word32 t3_94 = CONVERT(Mem27[a1 + 20<i32>:byte], byte, word32) << 24<i32> | CONVERT(Mem27[a1 + 21<i32>:byte], byte, word32) << 16<i32> | CONVERT(Mem27[a1 + 23<i32>:byte], byte, word32) | CONVERT(Mem27[a1 + 22<i32>:byte], byte, word32) << 8<i32>
	word32 s6_265 = (s10_252 << 5<u32> | s10_252 >>u 0x1B<u32>) + (((a1_238 ^ s7_251) & s9_239 ^ a1_238) + ((s11_226 + 0x5A827999<32>) + t5_80))
	word32 a1_278 = s10_252 << 0x1E<u32> | s10_252 >>u 2<u32>
	word32 a7_108 = CONVERT(Mem27[a1 + 24<i32>:byte], byte, word32) << 24<i32> | CONVERT(Mem27[a1 + 25<i32>:byte], byte, word32) << 16<i32> | CONVERT(Mem27[a1 + 27<i32>:byte], byte, word32) | CONVERT(Mem27[a1 + 26<i32>:byte], byte, word32) << 8<i32>
	word32 s11_275 = (s6_265 << 5<u32> | s6_265 >>u 0x1B<u32>) + (((s7_251 ^ s9_264) & s10_252 ^ s7_251) + ((t3_94 + 0x5A827999<32>) + a1_238))
	word32 s6_290 = s6_265 << 30<i32> | s6_265 >>u 2<u32>
	word32 s8_118 = CONVERT(Mem27[a1 + 28<i32>:byte], byte, word32) << 24<i32> | CONVERT(Mem27[a1 + 29<i32>:byte], byte, word32) << 16<i32> | CONVERT(Mem27[a1 + 31<i32>:byte], byte, word32) | CONVERT(Mem27[a1 + 30<i32>:byte], byte, word32) << 8<i32>
	word32 s5_293 = (s11_275 << 5<u32> | s11_275 >>u 0x1B<u32>) + (((s9_264 ^ a1_278) & s6_265 ^ s9_264) + ((a7_108 + 0x5A827999<32>) + s7_251))
	word32 s11_303 = s11_275 << 30<i32> | s11_275 >>u 2<u32>
	word32 t6_126 = CONVERT(Mem27[a1 + 32<i32>:byte], byte, word32) << 24<i32> | CONVERT(Mem27[a1 + 33<i32>:byte], byte, word32) << 16<i32> | CONVERT(Mem27[a1 + 35<i32>:byte], byte, word32) | CONVERT(Mem27[a1 + 34<i32>:byte], byte, word32) << 8<i32>
	word32 s9_304 = (s5_293 << 5<u32> | s5_293 >>u 0x1B<u32>) + (((a1_278 ^ s6_290) & s11_275 ^ a1_278) + (s9_264 + (s8_118 + 0x5A827999<32>)))
	word32 s5_316 = s5_293 << 30<i32> | s5_293 >>u 2<u32>
	word32 t4_134 = CONVERT(Mem27[a1 + 36<i32>:byte], byte, word32) << 24<i32> | CONVERT(Mem27[a1 + 37<i32>:byte], byte, word32) << 16<i32> | CONVERT(Mem27[a1 + 39<i32>:byte], byte, word32) | CONVERT(Mem27[a1 + 38<i32>:byte], byte, word32) << 8<i32>
	word32 s10_319 = (s9_304 << 5<u32> | s9_304 >>u 0x1B<u32>) + (((s6_290 ^ s11_303) & s5_293 ^ s6_290) + ((t6_126 + 0x5A827999<32>) + a1_278))
	word32 s9_329 = s9_304 << 30<i32> | s9_304 >>u 2<u32>
	word32 t1_142 = CONVERT(Mem27[a1 + 40<i32>:byte], byte, word32) << 24<i32> | CONVERT(Mem27[a1 + 41<i32>:byte], byte, word32) << 16<i32> | CONVERT(Mem27[a1 + 43<i32>:byte], byte, word32) | CONVERT(Mem27[a1 + 42<i32>:byte], byte, word32) << 8<i32>
	word32 s6_330 = (s10_319 << 5<u32> | s10_319 >>u 0x1B<u32>) + (((s11_303 ^ s5_316) & s9_304 ^ s11_303) + (s6_290 + (t4_134 + 0x5A827999<32>)))
	word32 s10_342 = s10_319 << 30<i32> | s10_319 >>u 2<u32>
	word32 a6_150 = CONVERT(Mem27[a1 + 44<i32>:byte], byte, word32) << 24<i32> | CONVERT(Mem27[a1 + 45<i32>:byte], byte, word32) << 16<i32> | CONVERT(Mem27[a1 + 47<i32>:byte], byte, word32) | CONVERT(Mem27[a1 + 46<i32>:byte], byte, word32) << 8<i32>
	word32 s7_345 = (s6_330 << 5<u32> | s6_330 >>u 0x1B<u32>) + (((s5_316 ^ s9_329) & s10_319 ^ s5_316) + ((t1_142 + 0x5A827999<32>) + s11_303))
	word32 s6_355 = s6_330 << 30<i32> | s6_330 >>u 2<u32>
	word32 a5_160 = CONVERT(Mem27[a1 + 48<i32>:byte], byte, word32) << 24<i32> | CONVERT(Mem27[a1 + 49<i32>:byte], byte, word32) << 16<i32> | CONVERT(Mem27[a1 + 51<i32>:byte], byte, word32) | CONVERT(Mem27[a1 + 50<i32>:byte], byte, word32) << 8<i32>
	word32 s5_358 = (s7_345 << 5<u32> | s7_345 >>u 0x1B<u32>) + (((s9_329 ^ s10_342) & s6_330 ^ s9_329) + (s5_316 + (a6_150 + 0x5A827999<32>)))
	word32 s7_368 = s7_345 << 30<i32> | s7_345 >>u 2<u32>
	word32 s1_175 = CONVERT(Mem27[a1 + 52<i32>:byte], byte, word32) << 24<i32> | CONVERT(Mem27[a1 + 53<i32>:byte], byte, word32) << 16<i32> | CONVERT(Mem27[a1 + 55<i32>:byte], byte, word32) | CONVERT(Mem27[a1 + 54<i32>:byte], byte, word32) << 8<i32>
	word32 a1_371 = (s5_358 << 5<u32> | s5_358 >>u 0x1B<u32>) + (((s10_342 ^ s6_355) & s7_345 ^ s10_342) + ((a5_160 + 0x5A827999<32>) + s9_329))
	word32 s5_381 = s5_358 << 30<i32> | s5_358 >>u 2<u32>
	word32 s0_185 = CONVERT(Mem27[a1 + 56<i32>:byte], byte, word32) << 24<i32> | CONVERT(Mem27[a1 + 57<i32>:byte], byte, word32) << 16<i32> | CONVERT(Mem27[a1 + 59<i32>:byte], byte, word32) | CONVERT(Mem27[a1 + 58<i32>:byte], byte, word32) << 8<i32>
	word32 s10_382 = (a1_371 << 5<u32> | a1_371 >>u 0x1B<u32>) + (((s6_355 ^ s7_368) & s5_358 ^ s6_355) + (s10_342 + (s1_175 + 0x5A827999<32>)))
	word32 a2_410 = a2_43 ^ a3_62 ^ t6_126 ^ s1_175
	word32 a1_394 = a1_371 << 30<i32> | a1_371 >>u 2<u32>
	word32 t2_193 = CONVERT(Mem27[a1 + 60<i32>:byte], byte, word32) << 24<i32> | CONVERT(Mem27[a1 + 61<i32>:byte], byte, word32) << 16<i32> | CONVERT(Mem27[a1 + 63<i32>:byte], byte, word32) | a1_190 << 8<i32>
	word32 s11_397 = (s10_382 << 5<u32> | s10_382 >>u 0x1B<u32>) + (((s7_368 ^ s5_381) & a1_371 ^ s7_368) + ((s0_185 + 0x5A827999<32>) + s6_355))
	word32 a4_425 = a4_54 ^ t0_70 ^ t4_134 ^ s0_185
	word32 s10_409 = s10_382 << 30<i32> | s10_382 >>u 2<u32>
	word32 a2_415 = a2_410 >>u 31<i32> | a2_410 << 1<u32>
	word32 s7_411 = (s11_397 << 5<u32> | s11_397 >>u 0x1B<u32>) + (((s5_381 ^ a1_394) & s10_382 ^ s5_381) + (s7_368 + (t2_193 + 0x5A827999<32>)))
	word32 a3_448 = a3_62 ^ t5_80 ^ t1_142 ^ t2_193
	word32 s11_429 = s11_397 << 30<i32> | s11_397 >>u 2<u32>
	word32 a4_432 = a4_425 >>u 31<i32> | a4_425 << 1<u32>
	word32 s9_435 = (s7_411 << 5<u32> | s7_411 >>u 0x1B<u32>) + (((a1_394 ^ s10_409) & s11_397 ^ a1_394) + ((a2_415 + 0x5A827999<32>) + s5_381))
	word32 t0_463 = t0_70 ^ t3_94 ^ a6_150 ^ a2_415
	word32 s7_447 = s7_411 << 30<i32> | s7_411 >>u 2<u32>
	word32 a3_453 = a3_448 >>u 31<i32> | a3_448 << 1<u32>
	word32 a1_449 = (s9_435 << 5<u32> | s9_435 >>u 0x1B<u32>) + (((s10_409 ^ s11_429) & s7_411 ^ s10_409) + (a1_394 + (a4_432 + 0x5A827999<32>)))
	word32 t5_482 = t5_80 ^ a7_108 ^ a5_160 ^ a4_432
	word32 s9_467 = s9_435 << 30<i32> | s9_435 >>u 2<u32>
	word32 t0_470 = t0_463 >>u 0x1F<u32> | t0_463 << 1<u32>
	word32 s6_474 = (a1_449 << 5<u32> | a1_449 >>u 0x1B<u32>) + (((s11_429 ^ s7_447) & s9_435 ^ s11_429) + ((a3_453 + 0x5A827999<32>) + s10_409))
	word32 t3_502 = t3_94 ^ s8_118 ^ s1_175 ^ a3_453
	word32 a1_486 = a1_449 << 30<i32> | a1_449 >>u 2<u32>
	word32 t5_489 = t5_482 >>u 0x1F<u32> | t5_482 << 1<u32>
	word32 s5_492 = (s6_474 << 5<u32> | s6_474 >>u 0x1B<u32>) + (((s7_447 ^ s9_467) & a1_449 ^ s7_447) + ((t0_470 + 0x5A827999<32>) + s11_429))
	word32 a7_520 = a7_108 ^ t6_126 ^ s0_185 ^ t0_470
	word32 s6_506 = s6_474 << 30<i32> | s6_474 >>u 2<u32>
	word32 t3_509 = t3_502 >>u 0x1F<u32> | t3_502 << 1<u32>
	word32 s7_511 = (s5_492 << 5<u32> | s5_492 >>u 0x1B<u32>) + (((s9_467 ^ a1_486) ^ s6_474) + (s7_447 + (t5_489 + 0x6ED9EBA1<32>)))
	word32 a1_542 = s8_118 ^ t4_134 ^ t2_193 ^ t5_489
	word32 s5_524 = s5_492 << 30<i32> | s5_492 >>u 2<u32>
	word32 a7_528 = a7_520 >>u 0x1F<u32> | a7_520 << 1<u32>
	word32 s10_527 = (s7_511 << 5<u32> | s7_511 >>u 0x1B<u32>) + (((a1_486 ^ s6_506) ^ s5_492) + ((t3_509 + 0x6ED9EBA1<32>) + s9_467))
	word32 t6_556 = t6_126 ^ t1_142 ^ a2_415 ^ t3_509
	word32 s7_539 = s7_511 << 30<i32> | s7_511 >>u 2<u32>
	word32 a1_545 = a1_542 >>u 31<i32> | a1_542 << 1<u32>
	word32 s11_547 = (s10_527 << 5<u32> | s10_527 >>u 0x1B<u32>) + (((s6_506 ^ s5_524) ^ s7_511) + ((a7_528 + 0x6ED9EBA1<32>) + a1_486))
	word32 t4_574 = t4_134 ^ a6_150 ^ a4_432 ^ a7_528
	word32 s10_560 = s10_527 << 30<i32> | s10_527 >>u 2<u32>
	word32 t6_563 = t6_556 >>u 0x1F<u32> | t6_556 << 1<u32>
	word32 s6_565 = (s11_547 << 5<u32> | s11_547 >>u 0x1B<u32>) + (((s5_524 ^ s7_539) ^ s10_527) + (s6_506 + (a1_545 + 0x6ED9EBA1<32>)))
	word32 t1_592 = t1_142 ^ a5_160 ^ a3_453 ^ a1_545
	word32 s11_578 = s11_547 << 30<i32> | s11_547 >>u 2<u32>
	word32 t4_581 = t4_574 >>u 0x1F<u32> | t4_574 << 1<u32>
	word32 s5_583 = (s6_565 << 5<u32> | s6_565 >>u 0x1B<u32>) + (((s7_539 ^ s10_560) ^ s11_547) + (s5_524 + (t6_563 + 0x6ED9EBA1<32>)))
	word32 a6_610 = a6_150 ^ s1_175 ^ t0_470 ^ t6_563
	word32 s6_596 = s6_565 << 30<i32> | s6_565 >>u 2<u32>
	word32 t1_600 = t1_592 >>u 0x1F<u32> | t1_592 << 1<u32>
	word32 s7_599 = (s5_583 << 5<u32> | s5_583 >>u 0x1B<u32>) + (((s10_560 ^ s11_578) ^ s6_565) + (s7_539 + (t4_581 + 0x6ED9EBA1<32>)))
	word32 a5_628 = a5_160 ^ s0_185 ^ t5_489 ^ t4_581
	word32 s5_614 = s5_583 << 30<i32> | s5_583 >>u 2<u32>
	word32 a6_617 = a6_610 >>u 0x1F<u32> | a6_610 << 1<u32>
	word32 s9_619 = (s7_599 << 5<u32> | s7_599 >>u 0x1B<u32>) + (((s11_578 ^ s6_596) ^ s5_583) + ((t1_600 + 0x6ED9EBA1<32>) + s10_560))
	word32 s1_646 = s1_175 ^ t2_193 ^ t3_509 ^ t1_600
	word32 s7_632 = s7_599 << 30<i32> | s7_599 >>u 2<u32>
	word32 a5_635 = a5_628 >>u 31<i32> | a5_628 << 1<u32>
	word32 s8_637 = (s9_619 << 5<u32> | s9_619 >>u 0x1B<u32>) + (((s6_596 ^ s5_614) ^ s7_599) + ((a6_617 + 0x6ED9EBA1<32>) + s11_578))
	word32 s0_664 = s0_185 ^ a2_415 ^ a7_528 ^ a6_617
	word32 s9_650 = s9_619 << 30<i32> | s9_619 >>u 2<u32>
	word32 s1_653 = s1_646 >>u 31<i32> | s1_646 << 1<u32>
	word32 s6_655 = (s8_637 << 5<u32> | s8_637 >>u 0x1B<u32>) + (((s5_614 ^ s7_632) ^ s9_619) + (s6_596 + (a5_635 + 0x6ED9EBA1<32>)))
	word32 t2_682 = t2_193 ^ a4_432 ^ a1_545 ^ a5_635
	word32 s8_668 = s8_637 << 30<i32> | s8_637 >>u 2<u32>
	word32 s0_671 = s0_664 >>u 31<i32> | s0_664 << 1<u32>
	word32 s5_673 = (s6_655 << 5<u32> | s6_655 >>u 0x1B<u32>) + (((s7_632 ^ s9_650) ^ s8_637) + (s5_614 + (s1_653 + 0x6ED9EBA1<32>)))
	word32 a2_700 = a2_415 ^ a3_453 ^ t6_563 ^ s1_653
	word32 s6_686 = s6_655 << 30<i32> | s6_655 >>u 2<u32>
	word32 t2_689 = t2_682 >>u 0x1F<u32> | t2_682 << 1<u32>
	word32 s7_691 = (s5_673 << 5<u32> | s5_673 >>u 0x1B<u32>) + (((s9_650 ^ s8_668) ^ s6_655) + (s7_632 + (s0_671 + 0x6ED9EBA1<32>)))
	word32 a4_718 = a4_432 ^ t0_470 ^ t4_581 ^ s0_671
	word32 s5_704 = s5_673 << 30<i32> | s5_673 >>u 2<u32>
	word32 a2_708 = a2_700 >>u 31<i32> | a2_700 << 1<u32>
	word32 s10_707 = (s7_691 << 5<u32> | s7_691 >>u 0x1B<u32>) + (((s8_668 ^ s6_686) ^ s5_673) + ((t2_689 + 0x6ED9EBA1<32>) + s9_650))
	word32 a3_736 = a3_453 ^ t5_489 ^ t1_600 ^ t2_689
	word32 s7_722 = s7_691 << 30<i32> | s7_691 >>u 2<u32>
	word32 a4_725 = a4_718 >>u 31<i32> | a4_718 << 1<u32>
	word32 s11_727 = (s10_707 << 5<u32> | s10_707 >>u 0x1B<u32>) + (((s6_686 ^ s5_704) ^ s7_691) + ((a2_708 + 0x6ED9EBA1<32>) + s8_668))
	word32 t0_754 = t0_470 ^ t3_509 ^ a6_617 ^ a2_708
	word32 s10_740 = s10_707 << 30<i32> | s10_707 >>u 2<u32>
	word32 a3_743 = a3_736 >>u 31<i32> | a3_736 << 1<u32>
	word32 s6_745 = (s11_727 << 5<u32> | s11_727 >>u 0x1B<u32>) + (((s5_704 ^ s7_722) ^ s10_707) + (s6_686 + (a4_725 + 0x6ED9EBA1<32>)))
	word32 t5_772 = t5_489 ^ a7_528 ^ a5_635 ^ a4_725
	word32 s11_758 = s11_727 << 30<i32> | s11_727 >>u 2<u32>
	word32 t0_762 = t0_754 >>u 0x1F<u32> | t0_754 << 1<u32>
	word32 s5_761 = (s6_745 << 5<u32> | s6_745 >>u 0x1B<u32>) + (((s7_722 ^ s10_740) ^ s11_727) + (s5_704 + (a3_743 + 0x6ED9EBA1<32>)))
	word32 t3_790 = t3_509 ^ a1_545 ^ s1_653 ^ a3_743
	word32 s6_776 = s6_745 << 30<i32> | s6_745 >>u 2<u32>
	word32 t5_780 = t5_772 >>u 0x1F<u32> | t5_772 << 1<u32>
	word32 s9_779 = (s5_761 << 5<u32> | s5_761 >>u 0x1B<u32>) + (((s10_740 ^ s11_758) ^ s6_745) + ((t0_762 + 0x6ED9EBA1<32>) + s7_722))
	word32 a7_808 = a7_528 ^ t6_563 ^ s0_671 ^ t0_762
	word32 s5_794 = s5_761 << 30<i32> | s5_761 >>u 2<u32>
	word32 t3_797 = t3_790 >>u 0x1F<u32> | t3_790 << 1<u32>
	word32 s8_799 = (s9_779 << 5<u32> | s9_779 >>u 0x1B<u32>) + (((s11_758 ^ s6_776) ^ s5_761) + ((t5_780 + 0x6ED9EBA1<32>) + s10_740))
	word32 a1_826 = a1_545 ^ t4_581 ^ t2_689 ^ t5_780
	word32 s9_812 = s9_779 << 30<i32> | s9_779 >>u 2<u32>
	word32 a7_815 = a7_808 >>u 0x1F<u32> | a7_808 << 1<u32>
	word32 s11_817 = (s8_799 << 5<u32> | s8_799 >>u 0x1B<u32>) + (((s6_776 ^ s5_794) ^ s9_779) + (s11_758 + (t3_797 + 0x6ED9EBA1<32>)))
	word32 t6_844 = t6_563 ^ t1_600 ^ a2_708 ^ t3_797
	word32 s8_830 = s8_799 << 30<i32> | s8_799 >>u 2<u32>
	word32 a1_833 = a1_826 >>u 31<i32> | a1_826 << 1<u32>
	word32 s7_834 = (s11_817 << 5<u32> | s11_817 >>u 0x1B<u32>) + (((s5_794 ^ s9_812) ^ s8_799) + ((a7_815 + 0x6ED9EBA1<32>) + s6_776))
	word32 t4_870 = t4_581 ^ a6_617 ^ a4_725 ^ a7_815
	word32 t6_851 = t6_844 >>u 0x1F<u32> | t6_844 << 1<u32>
	word32 s10_854 = (s7_834 << 5<u32> | s7_834 >>u 0x1B<u32>) + (((s9_812 ^ s8_830) ^ s11_817) + ((a1_833 + 0x6ED9EBA1<32>) + s5_794))
	word32 s11_848 = s11_817 << 30<i32> | s11_817 >>u 2<u32>
	word32 t1_886 = t1_600 ^ a5_635 ^ a3_743 ^ a1_833
	word32 s7_869 = s7_834 << 30<i32> | s7_834 >>u 2<u32>
	word32 t4_875 = t4_870 >>u 0x1F<u32> | t4_870 << 1<u32>
	word32 s9_871 = ((s7_834 | s11_848) & s8_830 | s7_834 & s11_848) + (((t6_851 + 0x8F1BBCDC<32>) + s9_812) + (s10_854 << 5<u32> | s10_854 >>u 0x1B<u32>))
	word32 a6_906 = a6_617 ^ s1_653 ^ t0_762 ^ t6_851
	word32 t1_893 = t1_886 >>u 0x1F<u32> | t1_886 << 1<u32>
	word32 s6_894 = (s9_871 << 5<u32> | s9_871 >>u 0x1B<u32>) + (((s10_854 | s7_869) & s11_848 | s10_854 & s7_869) + ((t4_875 + 0x8F1BBCDC<32>) + s8_830))
	word32 s10_890 = s10_854 << 30<i32> | s10_854 >>u 2<u32>
	word32 a5_926 = a5_635 ^ s0_671 ^ t5_780 ^ t4_875
	word32 s9_910 = s9_871 << 30<i32> | s9_871 >>u 2<u32>
	word32 a6_913 = a6_906 >>u 0x1F<u32> | a6_906 << 1<u32>
	word32 s11_915 = ((s9_871 | s10_890) & s7_869 | s9_871 & s10_890) + (((t1_893 + 0x8F1BBCDC<32>) + s11_848) + (s6_894 << 5<u32> | s6_894 >>u 0x1B<u32>))
	word32 s1_950 = s1_653 ^ t2_689 ^ t3_797 ^ t1_893
	word32 a5_933 = a5_926 >>u 31<i32> | a5_926 << 1<u32>
	word32 s5_934 = (s11_915 << 5<u32> | s11_915 >>u 0x1B<u32>) + (((s6_894 | s9_910) & s10_890 | s6_894 & s9_910) + ((a6_913 + 0x8F1BBCDC<32>) + s7_869))
	word32 s6_930 = s6_894 << 30<i32> | s6_894 >>u 2<u32>
	word32 s0_966 = s0_671 ^ a2_708 ^ a7_815 ^ a6_913
	word32 s11_949 = s11_915 << 30<i32> | s11_915 >>u 2<u32>
	word32 s1_955 = s1_950 >>u 31<i32> | s1_950 << 1<u32>
	word32 s10_951 = ((s11_915 | s6_930) & s9_910 | s11_915 & s6_930) + (((a5_933 + 0x8F1BBCDC<32>) + s10_890) + (s5_934 << 5<u32> | s5_934 >>u 0x1B<u32>))
	word32 t2_986 = t2_689 ^ a4_725 ^ a1_833 ^ a5_933
	word32 s0_973 = s0_966 >>u 31<i32> | s0_966 << 1<u32>
	word32 s8_974 = (s10_951 << 5<u32> | s10_951 >>u 0x1B<u32>) + (((s5_934 | s11_949) & s6_930 | s5_934 & s11_949) + ((s1_955 + 0x8F1BBCDC<32>) + s9_910))
	word32 s5_970 = s5_934 << 30<i32> | s5_934 >>u 2<u32>
	word32 a2_1006 = a2_708 ^ a3_743 ^ t6_851 ^ s1_955
	word32 s10_990 = s10_951 << 30<i32> | s10_951 >>u 2<u32>
	word32 t2_993 = t2_986 >>u 0x1F<u32> | t2_986 << 1<u32>
	word32 s6_995 = ((s10_951 | s5_970) & s11_949 | s10_951 & s5_970) + (((s0_973 + 0x8F1BBCDC<32>) + s6_930) + (s8_974 << 5<u32> | s8_974 >>u 0x1B<u32>))
	word32 a4_1026 = a4_725 ^ t0_762 ^ t4_875 ^ s0_973
	word32 a2_1013 = a2_1006 >>u 31<i32> | a2_1006 << 1<u32>
	word32 s7_1014 = (s6_995 << 5<u32> | s6_995 >>u 0x1B<u32>) + (((s8_974 | s10_990) & s5_970 | s8_974 & s10_990) + ((t2_993 + 0x8F1BBCDC<32>) + s11_949))
	word32 s8_1010 = s8_974 << 30<i32> | s8_974 >>u 2<u32>
	word32 a3_1046 = a3_743 ^ t5_780 ^ t1_893 ^ t2_993
	word32 s6_1030 = s6_995 << 30<i32> | s6_995 >>u 2<u32>
	word32 a4_1033 = a4_1026 >>u 31<i32> | a4_1026 << 1<u32>
	word32 s5_1035 = ((s6_995 | s8_1010) & s10_990 | s6_995 & s8_1010) + (((a2_1013 + 0x8F1BBCDC<32>) + s5_970) + (s7_1014 << 5<u32> | s7_1014 >>u 0x1B<u32>))
	word32 t0_1066 = t0_762 ^ t3_797 ^ a6_913 ^ a2_1013
	word32 a3_1053 = a3_1046 >>u 31<i32> | a3_1046 << 1<u32>
	word32 s9_1054 = (s5_1035 << 5<u32> | s5_1035 >>u 0x1B<u32>) + (((s7_1014 | s6_1030) & s8_1010 | s7_1014 & s6_1030) + ((a4_1033 + 0x8F1BBCDC<32>) + s10_990))
	word32 s7_1050 = s7_1014 << 30<i32> | s7_1014 >>u 2<u32>
	word32 t5_1086 = t5_780 ^ a7_815 ^ a5_933 ^ a4_1033
	word32 s5_1070 = s5_1035 << 30<i32> | s5_1035 >>u 2<u32>
	word32 t0_1073 = t0_1066 >>u 0x1F<u32> | t0_1066 << 1<u32>
	word32 s8_1075 = ((s5_1035 | s7_1050) & s6_1030 | s5_1035 & s7_1050) + (((a3_1053 + 0x8F1BBCDC<32>) + s8_1010) + (s9_1054 << 5<u32> | s9_1054 >>u 0x1B<u32>))
	word32 t3_1106 = t3_797 ^ a1_833 ^ s1_955 ^ a3_1053
	word32 t5_1093 = t5_1086 >>u 0x1F<u32> | t5_1086 << 1<u32>
	word32 s6_1094 = (s8_1075 << 5<u32> | s8_1075 >>u 0x1B<u32>) + (((s9_1054 | s5_1070) & s7_1050 | s9_1054 & s5_1070) + (s6_1030 + (t0_1073 + 0x8F1BBCDC<32>)))
	word32 s9_1090 = s9_1054 << 30<i32> | s9_1054 >>u 2<u32>
	word32 a7_1126 = a7_815 ^ t6_851 ^ s0_973 ^ t0_1073
	word32 s8_1110 = s8_1075 << 30<i32> | s8_1075 >>u 2<u32>
	word32 t3_1113 = t3_1106 >>u 0x1F<u32> | t3_1106 << 1<u32>
	word32 s7_1115 = ((s8_1075 | s9_1090) & s5_1070 | s8_1075 & s9_1090) + (((t5_1093 + 0x8F1BBCDC<32>) + s7_1050) + (s6_1094 << 5<u32> | s6_1094 >>u 0x1B<u32>))
	word32 a1_1146 = a1_833 ^ t4_875 ^ t2_993 ^ t5_1093
	word32 a7_1133 = a7_1126 >>u 0x1F<u32> | a7_1126 << 1<u32>
	word32 s5_1134 = (s7_1115 << 5<u32> | s7_1115 >>u 0x1B<u32>) + (((s6_1094 | s8_1110) & s9_1090 | s6_1094 & s8_1110) + (s5_1070 + (t3_1113 + 0x8F1BBCDC<32>)))
	word32 s6_1130 = s6_1094 << 30<i32> | s6_1094 >>u 2<u32>
	word32 t6_1166 = t6_851 ^ t1_893 ^ a2_1013 ^ t3_1113
	word32 s7_1150 = s7_1115 << 30<i32> | s7_1115 >>u 2<u32>
	word32 a1_1153 = a1_1146 >>u 31<i32> | a1_1146 << 1<u32>
	word32 s9_1155 = ((s7_1115 | s6_1130) & s8_1110 | s7_1115 & s6_1130) + (((a7_1133 + 0x8F1BBCDC<32>) + s9_1090) + (s5_1134 << 5<u32> | s5_1134 >>u 0x1B<u32>))
	word32 t4_1186 = t4_875 ^ a6_913 ^ a4_1033 ^ a7_1133
	word32 t6_1173 = t6_1166 >>u 0x1F<u32> | t6_1166 << 1<u32>
	word32 s8_1174 = (s9_1155 << 5<u32> | s9_1155 >>u 0x1B<u32>) + (((s5_1134 | s7_1150) & s6_1130 | s5_1134 & s7_1150) + (s8_1110 + (a1_1153 + 0x8F1BBCDC<32>)))
	word32 s5_1170 = s5_1134 << 30<i32> | s5_1134 >>u 2<u32>
	word32 t1_1206 = t1_893 ^ a5_933 ^ a3_1053 ^ a1_1153
	word32 s9_1190 = s9_1155 << 30<i32> | s9_1155 >>u 2<u32>
	word32 t4_1193 = t4_1186 >>u 0x1F<u32> | t4_1186 << 1<u32>
	word32 s6_1195 = ((s9_1155 | s5_1170) & s7_1150 | s9_1155 & s5_1170) + (((t6_1173 + 0x8F1BBCDC<32>) + s6_1130) + (s8_1174 << 5<u32> | s8_1174 >>u 0x1B<u32>))
	word32 a6_1226 = a6_913 ^ s1_955 ^ t0_1073 ^ t6_1173
	word32 t1_1213 = t1_1206 >>u 0x1F<u32> | t1_1206 << 1<u32>
	word32 s7_1214 = (s6_1195 << 5<u32> | s6_1195 >>u 0x1B<u32>) + (((s8_1174 | s9_1190) & s5_1170 | s8_1174 & s9_1190) + (s7_1150 + (t4_1193 + 0x8F1BBCDC<32>)))
	word32 s8_1210 = s8_1174 << 30<i32> | s8_1174 >>u 2<u32>
	word32 a5_1242 = a5_933 ^ s0_973 ^ t5_1093 ^ t4_1193
	word32 s6_1230 = s6_1195 << 30<i32> | s6_1195 >>u 2<u32>
	word32 a6_1233 = a6_1226 >>u 0x1F<u32> | a6_1226 << 1<u32>
	word32 s5_1238 = ((s6_1195 | s8_1210) & s9_1190 | s6_1195 & s8_1210) + (((t1_1213 + 0x8F1BBCDC<32>) + s5_1170) + (s7_1214 << 5<u32> | s7_1214 >>u 0x1B<u32>))
	word32 s1_1266 = s1_955 ^ t2_993 ^ t3_1113 ^ t1_1213
	word32 s7_1245 = s7_1214 << 30<i32> | s7_1214 >>u 2<u32>
	word32 a5_1249 = a5_1242 >>u 31<i32> | a5_1242 << 1<u32>
	word32 s9_1256 = (s5_1238 << 5<u32> | s5_1238 >>u 0x1B<u32>) + (((s7_1214 | s6_1230) & s8_1210 | s7_1214 & s6_1230) + (s9_1190 + (a6_1233 + 0x8F1BBCDC<32>)))
	word32 s0_1284 = s0_973 ^ a2_1013 ^ a7_1133 ^ a6_1233
	word32 s5_1270 = s5_1238 << 30<i32> | s5_1238 >>u 2<u32>
	word32 s1_1273 = s1_1266 >>u 31<i32> | s1_1266 << 1<u32>
	word32 s8_1275 = (s9_1256 << 5<u32> | s9_1256 >>u 0x1B<u32>) + (((s6_1230 ^ s7_1245) ^ s5_1238) + (s8_1210 + (a5_1249 + 0xCA62C1D6<32>)))
	word32 t2_1302 = t2_993 ^ a4_1033 ^ a1_1153 ^ a5_1249
	word32 s9_1288 = s9_1256 << 30<i32> | s9_1256 >>u 2<u32>
	word32 s0_1291 = s0_1284 >>u 31<i32> | s0_1284 << 1<u32>
	word32 s6_1293 = (s8_1275 << 5<u32> | s8_1275 >>u 0x1B<u32>) + (((s7_1245 ^ s5_1270) ^ s9_1256) + (s6_1230 + (s1_1273 + 0xCA62C1D6<32>)))
	word32 a2_1320 = a2_1013 ^ a3_1053 ^ t6_1173 ^ s1_1273
	word32 s8_1306 = s8_1275 << 30<i32> | s8_1275 >>u 2<u32>
	word32 t2_1309 = t2_1302 >>u 0x1F<u32> | t2_1302 << 1<u32>
	word32 s7_1311 = (s6_1293 << 5<u32> | s6_1293 >>u 0x1B<u32>) + (((s5_1270 ^ s9_1288) ^ s8_1275) + (s7_1245 + (s0_1291 + 0xCA62C1D6<32>)))
	word32 a4_1338 = a4_1033 ^ t0_1073 ^ t4_1193 ^ s0_1291
	word32 s6_1324 = s6_1293 << 30<i32> | s6_1293 >>u 2<u32>
	word32 a2_1327 = a2_1320 >>u 31<i32> | a2_1320 << 1<u32>
	word32 s5_1329 = (s7_1311 << 5<u32> | s7_1311 >>u 0x1B<u32>) + (((s9_1288 ^ s8_1306) ^ s6_1293) + (s5_1270 + (t2_1309 + 0xCA62C1D6<32>)))
	word32 a3_1356 = a3_1053 ^ t5_1093 ^ t1_1213 ^ t2_1309
	word32 s7_1342 = s7_1311 << 30<i32> | s7_1311 >>u 2<u32>
	word32 a4_1345 = a4_1338 >>u 31<i32> | a4_1338 << 1<u32>
	word32 s9_1347 = (s5_1329 << 5<u32> | s5_1329 >>u 0x1B<u32>) + (((s8_1306 ^ s6_1324) ^ s7_1311) + (s9_1288 + (a2_1327 + 0xCA62C1D6<32>)))
	word32 t0_1375 = t0_1073 ^ t3_1113 ^ a6_1233 ^ a2_1327
	word32 s5_1360 = s5_1329 << 30<i32> | s5_1329 >>u 2<u32>
	word32 a3_1363 = a3_1356 >>u 31<i32> | a3_1356 << 1<u32>
	word32 s8_1365 = (s9_1347 << 5<u32> | s9_1347 >>u 0x1B<u32>) + (((s6_1324 ^ s7_1342) ^ s5_1329) + (s8_1306 + (a4_1345 + 0xCA62C1D6<32>)))
	word32 t5_1392 = t5_1093 ^ a7_1133 ^ a5_1249 ^ a4_1345
	word32 s9_1378 = s9_1347 << 30<i32> | s9_1347 >>u 2<u32>
	word32 t0_1381 = t0_1375 >>u 0x1F<u32> | t0_1375 << 1<u32>
	word32 s6_1383 = (s8_1365 << 5<u32> | s8_1365 >>u 0x1B<u32>) + (((s7_1342 ^ s5_1360) ^ s9_1347) + (s6_1324 + (a3_1363 + 0xCA62C1D6<32>)))
	word32 t3_1410 = t3_1113 ^ a1_1153 ^ s1_1273 ^ a3_1363
	word32 s8_1396 = s8_1365 << 30<i32> | s8_1365 >>u 2<u32>
	word32 t5_1399 = t5_1392 >>u 0x1F<u32> | t5_1392 << 1<u32>
	word32 s7_1401 = (s6_1383 << 5<u32> | s6_1383 >>u 0x1B<u32>) + (((s5_1360 ^ s9_1378) ^ s8_1365) + (s7_1342 + (t0_1381 + 0xCA62C1D6<32>)))
	word32 a7_1428 = a7_1133 ^ t6_1173 ^ s0_1291 ^ t0_1381
	word32 s6_1414 = s6_1383 << 30<i32> | s6_1383 >>u 2<u32>
	word32 t3_1417 = t3_1410 >>u 0x1F<u32> | t3_1410 << 1<u32>
	word32 s5_1419 = (s7_1401 << 5<u32> | s7_1401 >>u 0x1B<u32>) + (((s9_1378 ^ s8_1396) ^ s6_1383) + (s5_1360 + (t5_1399 + 0xCA62C1D6<32>)))
	word32 a1_1446 = a1_1153 ^ t4_1193 ^ t2_1309 ^ t5_1399
	word32 s7_1432 = s7_1401 << 30<i32> | s7_1401 >>u 2<u32>
	word32 a7_1435 = a7_1428 >>u 0x1F<u32> | a7_1428 << 1<u32>
	word32 s9_1437 = (s5_1419 << 5<u32> | s5_1419 >>u 0x1B<u32>) + (((s8_1396 ^ s6_1414) ^ s7_1401) + (s9_1378 + (t3_1417 + 0xCA62C1D6<32>)))
	word32 t6_1464 = t6_1173 ^ t1_1213 ^ a2_1327 ^ t3_1417
	word32 s5_1450 = s5_1419 << 30<i32> | s5_1419 >>u 2<u32>
	word32 a1_1453 = a1_1446 >>u 31<i32> | a1_1446 << 1<u32>
	word32 s8_1455 = (s9_1437 << 5<u32> | s9_1437 >>u 0x1B<u32>) + (((s6_1414 ^ s7_1432) ^ s5_1419) + (s8_1396 + (a7_1435 + 0xCA62C1D6<32>)))
	word32 t4_1482 = t4_1193 ^ a6_1233 ^ a4_1345 ^ a7_1435
	word32 s9_1468 = s9_1437 << 30<i32> | s9_1437 >>u 2<u32>
	word32 t6_1471 = t6_1464 >>u 0x1F<u32> | t6_1464 << 1<u32>
	word32 s6_1473 = (s8_1455 << 5<u32> | s8_1455 >>u 0x1B<u32>) + (((s7_1432 ^ s5_1450) ^ s9_1437) + (s6_1414 + (a1_1453 + 0xCA62C1D6<32>)))
	word32 a3_1500 = t1_1213 ^ a5_1249 ^ a3_1363 ^ a1_1453
	word32 s8_1486 = s8_1455 << 30<i32> | s8_1455 >>u 2<u32>
	word32 t4_1489 = t4_1482 >>u 0x1F<u32> | t4_1482 << 1<u32>
	word32 s7_1491 = (s6_1473 << 5<u32> | s6_1473 >>u 0x1B<u32>) + (((s5_1450 ^ s9_1468) ^ s8_1455) + (s7_1432 + (t6_1471 + 0xCA62C1D6<32>)))
	word32 t6_1517 = a6_1233 ^ s1_1273 ^ t0_1381 ^ t6_1471
	word32 s6_1504 = s6_1473 << 30<i32> | s6_1473 >>u 2<u32>
	word32 a3_1507 = a3_1500 >>u 31<i32> | a3_1500 << 1<u32>
	word32 s5_1511 = (s7_1491 << 5<u32> | s7_1491 >>u 0x1B<u32>) + (((s9_1468 ^ s8_1486) ^ s6_1473) + (s5_1450 + (t4_1489 + 0xCA62C1D6<32>)))
	word32 t4_1536 = a5_1249 ^ s0_1291 ^ t5_1399 ^ t4_1489
	word32 s7_1524 = s7_1491 << 30<i32> | s7_1491 >>u 2<u32>
	word32 t6_1525 = t6_1517 >>u 0x1F<u32> | t6_1517 << 1<u32>
	word32 s9_1528 = s9_1468 + (a3_1507 + 0xCA62C1D6<32>) + ((s8_1486 ^ s6_1504) ^ s7_1491) + (s5_1511 << 5<u32> | s5_1511 >>u 0x1B<u32>)
	word32 s1_1547 = s1_1273 ^ t2_1309
	word32 s5_1543 = s5_1511 << 30<i32> | s5_1511 >>u 2<u32>
	word32 t4_1544 = t4_1536 >>u 0x1F<u32> | t4_1536 << 1<u32>
	word32 s8_1538 = (s9_1528 << 5<u32> | s9_1528 >>u 0x1B<u32>) + (((s6_1504 ^ s7_1524) ^ s5_1511) + (s8_1486 + (t6_1525 + 0xCA62C1D6<32>)))
	word32 a3_1554 = s1_1547 ^ t3_1417 ^ a3_1507
	word32 s9_1562 = s9_1528 << 30<i32> | s9_1528 >>u 2<u32>
	word32 s6_1558 = s6_1504 + (t4_1544 + 0xCA62C1D6<32>) + ((s7_1524 ^ s5_1543) ^ s9_1528) + (s8_1538 << 5<u32> | s8_1538 >>u 0x1B<u32>)
	word32 t6_1573 = s0_1291 ^ a2_1327 ^ a7_1435 ^ t6_1525
	word32 s8_1579 = s8_1538 << 30<i32> | s8_1538 >>u 2<u32>
	word32 s7_1574 = s7_1524 + ((a3_1554 << 1<u32> | a3_1554 >>u 31<i32>) + 0xCA62C1D6<32>) + ((s5_1543 ^ s9_1562) ^ s8_1538) + (s6_1558 << 5<u32> | s6_1558 >>u 0x1B<u32>)
	word32 s5_1594 = s5_1543 + ((t6_1573 << 1<u32> | t6_1573 >>u 0x1F<u32>) + 0xCA62C1D6<32>) + ((s9_1562 ^ s8_1579) ^ s6_1558) + (s7_1574 << 5<u32> | s7_1574 >>u 0x1B<u32>)
	word32 t4_1588 = t2_1309 ^ a4_1345 ^ a1_1453 ^ t4_1544
	word32 s6_1599 = s6_1558 << 30<i32> | s6_1558 >>u 2<u32>
	word32 a5_1606 = s5_1594 << 5<u32> | s5_1594 >>u 0x1B<u32>
	Mem1611[Mem27[a5_1606 + 12<i32>:word32] + 8<i32>:word32] = s9_1562 + ((t4_1588 << 1<u32> | t4_1588 >>u 0x1F<u32>) + (s3_173 + 0xCA62C1D6<32>)) + ((s8_1579 ^ s6_1599) ^ s7_1574) + a5_1606
	word32 s5_1612 = s5_1594 + a5_1606
	Mem1618[Mem1611[(s7_1574 >>u 2<u32>) + 20<i32>:word32] + 12<i32>:word32] = s5_1612
	word32 a0_1620 = Mem1618[(s7_1574 >>u 2<u32>) + 24<i32>:word32]
	Mem1621[a0_1620 + 16<i32>:word32] = s4_169 + (s7_1574 >>u 2<u32> | s7_1574 << 30<i32>)
	word32 s6_1619 = s6_1599 + (s7_1574 >>u 2<u32>)
	Mem1622[a0_1620 + 20<i32>:word32] = s6_1619
	Mem1624[a0_1620 + 24<i32>:word32] = s8_1579 + (s7_1574 >>u 2<u32>)
	0<32> = dwArg0148
	0<32> = dwArg3C
	s1Out = s1_1547
	s2Out = 0xCA62C1D6<32>
	s3Out = s3_173 + 0xCA62C1D6<32>
	s4Out = dwArg98
	s5Out = s5_1612
	s6Out = s6_1619
	return dwLoc04
mbedtls_sha1_process_exit:


word32 mbedtls_sha1_update.part.0(word32 a1, word32 a2, word32 a5, word32 dwArg1C, word32 dwArg48, word32 dwArgA8, word32 dwArg0128, ptr32 & s1Out, ptr32 & a2Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_sha1_update
//      mbedtls_sha1_finish
// MayUse:  a1:[0..31] a2:[0..31] a5:[0..31] Stack +001C:[0..31] Stack +0048:[0..31] Stack +00A8:[0..31] Stack +0128:[0..31]
// LiveOut: a2 a5 s0 s1
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_sha1_update.part.0_entry:
l23068676:
	word32 a0_21 = Mem19[a5:word32]
	word32 a5_27 = a5 + a2
	Mem28[a5_27:word32] = a0_21
	word32 s1_101 = a0_21
	word32 s2_117 = a1
	word32 s3_118 = a5 & 63<i32>
	word32 s0_113 = a2
	branch a5_27 >=u a2 l230686A2
l2306869C:
	Mem32[a5_27 + 5<32>:word32] = Mem28[a5_27 + 4<i32>:word32]
l230686A2:
	branch (a5 & 63<i32>) == 0<32> l230686D4
l230686A6:
	word32 s4_35 = 64<i32> - (a5 & 63<i32>)
	branch a2 <u s4_35 l230686D4
l230686B2:
	word32 a7_317
	word32 a5_315
	word32 a6_316
	word32 a4_314
	word32 a3_313
	word32 a1_311
	word32 a2_312
	memcpy(a0_21 + 28<i32> + (a5 & 63<i32>), a1, s4_35, out a1_311, out a2_312, out a3_313, out a4_314, out a5_315, out a6_316, out a7_317)
	word32 s2_74
	word32 s4_76
	word32 s6_320
	word32 s5_319
	word32 s3_318
	s0_113 = mbedtls_sha1_process(a0_21, a0_21 + 28<i32>, dwArg1C, dwArg0128, out s1_101, out s2_74, out s3_318, out s4_76, out s5_319, out s6_320)
	s2_117 = s2_74 + s4_76
	s3_118 = 0<32>
l230686D4:
	word32 s4_133 = s0_113
	word32 s6_121 = s2_117 + s0_113
	word32 s5_100 = 63<i32>
l230686EA:
	word32 a1_99 = s6_121 - s4_133
	branch s5_100 <u s4_133 l230686E0
l230686E0:
	word32 s4_119
	s0_113 = mbedtls_sha1_process(s1_101, a1_99, dwArg1C, dwArg0128, out s1_101, out s2_117, out s3_118, out s4_119, out s5_100, out s6_121)
	s4_133 = s4_119 + -64<i32>
l230686F2:
	word32 a2_135 = s0_113 >>u 6<u32>
	word32 a1_140 = (a2_135 << 6<u32>) + s2_117
	branch a2_135 + -64<i32> + s0_113 == 0<32> l23068724
l23068724:
	0<32> = dwArgA8
	s1Out = <invalid>
	a2Out = dwArg48
	a5Out = -64<i32>
	return <invalid>
l23068708:
	0<32> = dwArgA8
	word32 a0_159 = s1_101 + 28<i32> + s3_118
l23068720_thunk_memcpy:
	word32 a5_163
	word32 a2_166
	word32 a7_325
	word32 a4_323
	word32 a6_324
	word32 a3_322
	word32 a1_321
	memcpy(a0_159, a1_140, dwArg48, out a1_321, out a2_166, out a3_322, out a4_323, out a5_163, out a6_324, out a7_325)
	s1Out = <invalid>
	a2Out = a2_166
	a5Out = a5_163
	return <invalid>
mbedtls_sha1_update.part.0_exit:


word32 mbedtls_sha1_update(word32 a1, word32 a2, word32 a5, word32 dwArg1C, word32 dwArg48, word32 dwArgA8, word32 dwArg0128, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      sha1_update_wrap
//      mbedtls_sha1_finish
//      mbedtls_sha1
// MayUse:  a1:[0..31] a2:[0..31] a5:[0..31] Stack +001C:[0..31] Stack +0048:[0..31] Stack +00A8:[0..31] Stack +0128:[0..31]
// LiveOut: a2 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_sha1_update_entry:
l23068738:
	branch a2 == 0<32> l2306873E
l2306873E:
	a5Out = a5
	return a2
l2306873A:
l2306873A_thunk_mbedtls_sha1_update.part.0:
	word32 a2_9
	word32 a5_12
	word32 s1_94
	mbedtls_sha1_update.part.0(a1, a2, a5, dwArg1C, dwArg48, dwArgA8, dwArg0128, out s1_94, out a2_9, out a5_12)
	a5Out = a5_12
	return a2_9
mbedtls_sha1_update_exit:


void mbedtls_sha1_finish(word32 a2, word32 dwArg28, word32 dwArg88, word32 dwArg0108)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      sha1_finish_wrap
//      mbedtls_sha1
// MayUse:  a2:[0..31] Stack +0028:[0..31] Stack +0088:[0..31] Stack +0108:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_sha1_finish_entry:
l23068740:
	word32 a5_43
	branch (a2 & 63<i32>) >u 55<i32> l23068868
l23068868:
	a5_43 = 120<i32>
l230687A8:
	a5_43 = 56<i32>
l230687AC:
	word32 a5_59
	mbedtls_sha1_update(0x2308C064<32>, a5_43 - (a2 & 63<i32>), a5_43, dwLoc04, dwArg28, dwArg88, dwArg0108, out a5_59)
	word32 s1_94
	word32 a5_186
	word32 a2_185
	word32 s0_93 = mbedtls_sha1_update.part.0(fp + 0xFFFFFFE8<32>, 8<32>, a5_59, dwLoc04, dwArg28, dwArg88, dwArg0108, out s1_94, out a2_185, out a5_186)
	Mem114[s1_94:byte] = SLICE(CONVERT(Mem38[s0_93 + 11<i32>:byte], byte, word32), byte, 0)
	word32 a5_115 = CONVERT(Mem114[s0_93 + 10<i32>:uint16], uint16, word32)
	Mem116[s1_94 + 1<i32>:byte] = SLICE(a5_115, byte, 0)
	Mem119[s1_94 + 2<i32>:byte] = SLICE(a5_115 >>u 8<i32>, byte, 0)
	word32 s0_120 = Mem119[(a5_115 >>u 8<i32>) + 8<i32>:word32]
	Mem121[s1_94 + 3<i32>:byte] = SLICE(a5_115 >>u 8<i32>, byte, 0)
	Mem123[s1_94 + 4<i32>:byte] = SLICE(CONVERT(Mem121[s0_120 + 15<i32>:byte], byte, word32), byte, 0)
	word32 a5_124 = CONVERT(Mem123[s0_120 + 14<i32>:uint16], uint16, word32)
	Mem125[s1_94 + 5<i32>:byte] = SLICE(a5_124, byte, 0)
	Mem128[s1_94 + 6<i32>:byte] = SLICE(a5_124 >>u 8<i32>, byte, 0)
	word32 s0_129 = Mem128[(a5_124 >>u 8<i32>) + 12<i32>:word32]
	Mem130[s1_94 + 7<i32>:byte] = SLICE(a5_124 >>u 8<i32>, byte, 0)
	Mem132[s1_94 + 8<i32>:byte] = SLICE(CONVERT(Mem130[s0_129 + 19<i32>:byte], byte, word32), byte, 0)
	word32 a5_133 = CONVERT(Mem132[s0_129 + 18<i32>:uint16], uint16, word32)
	Mem134[s1_94 + 9<i32>:byte] = SLICE(a5_133, byte, 0)
	Mem137[s1_94 + 10<i32>:byte] = SLICE(a5_133 >>u 8<i32>, byte, 0)
	word32 s0_138 = Mem137[(a5_133 >>u 8<i32>) + 16<i32>:word32]
	Mem139[s1_94 + 11<i32>:byte] = SLICE(a5_133 >>u 8<i32>, byte, 0)
	Mem141[s1_94 + 12<i32>:byte] = SLICE(CONVERT(Mem139[s0_138 + 23<i32>:byte], byte, word32), byte, 0)
	word32 a5_142 = CONVERT(Mem141[s0_138 + 22<i32>:uint16], uint16, word32)
	Mem143[s1_94 + 13<i32>:byte] = SLICE(a5_142, byte, 0)
	Mem146[s1_94 + 14<i32>:byte] = SLICE(a5_142 >>u 8<i32>, byte, 0)
	word32 s0_147 = Mem146[(a5_142 >>u 8<i32>) + 20<i32>:word32]
	Mem148[s1_94 + 15<i32>:byte] = SLICE(a5_142 >>u 8<i32>, byte, 0)
	Mem151[s1_94 + 16<i32>:byte] = SLICE(CONVERT(Mem148[s0_147 + 27<i32>:byte], byte, word32), byte, 0)
	word32 a5_152 = CONVERT(Mem151[s0_147 + 26<i32>:uint16], uint16, word32)
	Mem153[s1_94 + 17<i32>:byte] = SLICE(a5_152, byte, 0)
	Mem156[s1_94 + 18<i32>:byte] = SLICE(a5_152 >>u 8<i32>, byte, 0)
	Mem159[s1_94 + 19<i32>:byte] = SLICE(a5_152 >>u 8<i32>, byte, 0)
	return
mbedtls_sha1_finish_exit:


void mbedtls_sha1(word32 ra, word32 a0, word32 dwArg08, word32 dwArg28, word32 dwArg88, word32 dwArgA8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] ra:[0..31] Stack +0008:[0..31] Stack +0028:[0..31] Stack +0088:[0..31] Stack +00A8:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_sha1_entry:
l2306886E:
	word32 a5_112
	mbedtls_sha1_finish(mbedtls_sha1_update(a0, mbedtls_sha1_init(ra, fp + -108<i32>), mbedtls_sha1_starts(fp + -108<i32>), dwLoc64, dwLoc38, dwArg28, dwArgA8, out a5_112), dwLoc58, dwArg08, dwArg88)
	mbedtls_sha1_free(fp + -108<i32>)
	return
mbedtls_sha1_exit:


word32 mbedtls_ssl_ciphersuite_from_id(word32 a0, word32 a4, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_list_ciphersuites
//      mbedtls_ssl_get_ciphersuite_name
//      mbedtls_ssl_handshake_client_step
//      mbedtls_ssl_handshake_server_step
// MayUse:  a0:[0..31] a4:[0..31]
// LiveOut: a0 a5
// Trashed: a0 a5
// Preserved: sp
mbedtls_ssl_ciphersuite_from_id_entry:
l230688AC:
l230688B4:
	word32 a5_10 = Mem0[a4:word32]
	branch a4 != 0<32> l230688BE
l230688BE:
	branch a4 == a0 l230688BA
l230688C2:
l230688B8:
	a5_10 = 0<32>
l230688BA:
	a5Out = a5_10
	return a5_10
mbedtls_ssl_ciphersuite_from_id_exit:


word32 mbedtls_ssl_list_ciphersuites(ptr32 & a0Out, ptr32 & s2Out, ptr32 & s4Out, ptr32 & s5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_config_defaults
// MayUse: 
// LiveOut: a0 s0 s2 s4 s5
// Trashed: a0 a2 a4 a5 a6 s0 s1 s2 s3 s4 s5 s8 t3 tp
// Preserved: sp
mbedtls_ssl_list_ciphersuites_entry:
l230688C8:
	word32 a4_5 = Mem0[0x4200E01C<32>:int32]
	branch a4_5 == 0<32> l230688FC
l230688FC:
	word32 s0_22 = 0x42018E40<32>
	s2 = 0x4200E01C<32>
	word32 s1_25 = 0x2308C164<32>
	s5 = 0x42018E54<32>
l23068926:
	word32 s3_29 = Mem28[s1_25:int32]
	branch s3_29 != 0<32> l23068912
l23068912:
	branch s0_22 >=u 0x42018E54<32> l2306892E
l23068916:
	word32 a5_123
	branch mbedtls_ssl_ciphersuite_from_id(s3_29, a4_5, out a5_123) == 0<32> l23068924
l2306891E:
	Mem36[s0_22:word32] = s3_29
	s0_22 = s0_22 + 4<32>
l23068924:
	s1_25 = s1_25 + 4<32>
l2306892E:
	Mem42[s0_22:word32] = 0<32>
	Mem46[0x4200E01C<32>:word32] = 1<32>
l230688E6:
	a0Out = 0x42018E40<32>
	s2Out = s2
	s4Out = dwArg04
	s5Out = s5
	return s1
mbedtls_ssl_list_ciphersuites_exit:


word32 mbedtls_ssl_get_ciphersuite_name(word32 a0, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_derive_keys
//      mbedtls_ssl_get_ciphersuite
// MayUse:  a0:[0..31] a4:[0..31]
// LiveOut: a0
// Trashed: a0 a2 a5
// Preserved: sp
mbedtls_ssl_get_ciphersuite_name_entry:
l2306893A:
	word32 a0_11
	word32 a5_22
	word32 a0_8 = mbedtls_ssl_ciphersuite_from_id(a0, a4, out a5_22)
	branch a0_8 == 0<32> l2306894C
l2306894C:
	a0_11 = 0x23089244<32>
l23068944:
	a0_11 = Mem5[a0_8 + 4<i32>:word32]
l23068946:
	return a0_11
mbedtls_ssl_get_ciphersuite_name_exit:


word32 mbedtls_ssl_get_ciphersuite_sig_pk_alg(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_handshake_server_step
// MayUse:  a0:[0..31]
// LiveOut: a0
// Trashed: a0 a4 a5
// Preserved: sp
mbedtls_ssl_get_ciphersuite_sig_pk_alg_entry:
l23068956:
	word32 a0_11
	word32 a0_5 = CONVERT(Mem0[a0 + 10<i32>:byte], byte, word32)
	branch a0_5 >u 0xA<32> l23068980
l23068980:
	a0_11 = 0<32>
l23068960:
	word32 a5_9 = 1<32> << a0_5
	a0_11 = 1<32>
	branch (a5_9 & 142<i32>) != 0<32> l23068982
l2306896E:
	a0_11 = 2<32>
	branch (a5_9 & 1536<i32>) != 0<32> l23068982
l23068982:
	return a0_11
l23068976:
	return CONVERT((a5_9 & 0x10<32>) != 0<32>, bool, word32) << 2<i32>
mbedtls_ssl_get_ciphersuite_sig_pk_alg_exit:


void mbedtls_ssl_own_key(word32 a5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5:[0..31]
// LiveOut:
// Trashed: a0 a5
// Preserved: sp
mbedtls_ssl_own_key_entry:
l23068984:
	branch a5 == 0<32> l2306898C
l23068988:
	a5 = Mem0[a5 + 8<i32>:word32]
	branch a5 != 0<32> l23068992
l2306898C:
	branch Mem0[a5 + 76<i32>:word32] == 0<32> l23068994
l23068992:
l23068994:
	return
mbedtls_ssl_own_key_exit:


void mbedtls_ssl_hs_hdr_len.isra.0(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31]
// LiveOut:
// Trashed: a0 a5
// Preserved: sp
mbedtls_ssl_hs_hdr_len.isra.0_entry:
l23068998:
	branch (CONVERT(Mem0[a0 + 116<i32>:uint16], uint16, word32) & 2<32>) == 0<32> l230689A4
l230689A4:
	return
l230689A0:
	return
mbedtls_ssl_hs_hdr_len.isra.0_exit:


word32 mbedtls_ssl_handshake_client_step(word32 ra, word32 a5, word32 mstatus, word32 dwArg88, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s5Out, ptr32 & mstatusOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_handshake_step
// MayUse:  a5:[0..31] mstatus:[0..31] ra:[0..31] Stack +0088:[0..31]
// LiveOut: a0 a4 a5 mstatus ra s1 s2 s3 s5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 mstatus ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: sp
mbedtls_ssl_handshake_client_step_entry:
l230689A8:
	word32 sp_1690 = fp + -160<i32>
	branch a5 == 0x10<32> l23068AF0
l230689CC:
	word32 a0_33 = Mem29[0x40<32>:word32]
	branch false l23068AF0
l230689D4:
	word32 a5_43
	word32 s11_50
	word32 t4_1844
	word32 s10_1843
	word32 s9_1842
	word32 s8_1841
	word32 s7_1840
	word32 s5_1838
	word32 s6_1839
	word32 a7_1836
	word32 s4_1837
	word32 a4_1835
	word32 a1_1832
	word32 a2_1833
	word32 a3_1834
	mbedtls_debug_print_msg(ra, a0_33, 2<32>, 0x2308C4DC<32>, a5, out a1_1832, out a2_1833, out a3_1834, out a4_1835, out a5_43, out a7_1836, out s4_1837, out s5_1838, out s6_1839, out s7_1840, out s8_1841, out s9_1842, out s10_1843, out s11_50, out t4_1844)
	word32 a0_62
	word32 s2_74
	word32 s10_1854
	word32 s9_1853
	word32 s7_1852
	word32 s6_1851
	word32 s5_1850
	word32 s4_1849
	word32 a3_1847
	word32 a4_1848
	word32 a2_1846
	word32 a1_1845
	word32 s11_108
	mbedtls_ssl_flush_output(ra, s11_50, a5_43, dwArg88, out s1, out a0_62, out a1_1845, out a2_1846, out a3_1847, out a4_1848, out a5, out s2_74, out s3, out s4_1849, out s5_1850, out s6_1851, out s7_1852, out s9_1853, out s10_1854, out s11_108)
	word32 s0_105 = a0_62
	branch a0_62 != 0<32> l23068A62
l230689FA:
	branch (CONVERT(Mem29[Mem29[s11_108:int32] + 116<i32>:uint16], uint16, word32) & 2<32>) != 0<32> l23068A40
l23068A40:
	branch CONVERT(Mem29[Mem29[s11_108 + 48<i32>:int32] + 52<i32>:byte], byte, word32) != 1<32> l23068A06
l23068A4E:
	word32 a0_125
	word32 s10_1891
	word32 s9_1890
	word32 s7_1889
	word32 s6_1888
	word32 s5_1887
	word32 s4_1886
	word32 s2_1885
	word32 a4_1884
	word32 a3_1883
	word32 a2_1882
	word32 a1_1881
	ra = mbedtls_ssl_resend(ra, a0_62, s11_108, 1<32>, s2_74, mstatus, dwArg88, out s0_105, out s1, out a0_125, out a1_1881, out a2_1882, out a3_1883, out a4_1884, out a5, out s2_1885, out s3, out s4_1886, out s5_1887, out s6_1888, out s7_1889, out s9_1890, out s10_1891, out s11_108, out mstatus)
	branch a0_125 == 0<32> l23068A06
l23068A56:
l23068A06:
	branch Mem29[s11_108 + 4<i32>:int32] != 0xC<32> l23068A20
l23068A10:
	branch Mem29[Mem29[s11_108 + 48<i32>:int32] + 344<i32>:int32] == 0<32> l23068A20
l23068A1A:
	Mem134[s11_108 + 4<i32>:word32] = 0x11<32>
l23068A20:
	a5 = Mem136[s11_108 + 4<i32>:int32]
	branch a5 <=u 0x11<32> l23068A2E
l23068A2E:
	switch (Mem136[s11_108 + 4<i32>:int32]) { l23068A5A l23068A82 }
l23068A82:
	word32 a2_157
	word32 a4_159
	word32 s11_162
	word32 t4_1880
	word32 s10_1879
	word32 s9_1878
	word32 s8_1877
	word32 s7_1876
	word32 s6_1875
	word32 s4_1873
	word32 s5_1874
	word32 a5_1871
	word32 a7_1872
	word32 a1_1869
	word32 a3_1870
	mbedtls_debug_print_msg(ra, s11_108, 2<32>, 0x2308C4F0<32>, a5, out a1_1869, out a2_157, out a3_1870, out a4_159, out a5_1871, out a7_1872, out s4_1873, out s5_1874, out s6_1875, out s7_1876, out s8_1877, out s9_1878, out s10_1879, out s11_162, out t4_1880)
	word32 a5_174 = Mem136[a4_159 + 24<i32>:word32]
	branch a4_159 != 0<32> l23068AC2
l23068AC2:
	Mem176[s11_162 + 8<i32>:word32] = CONVERT(Mem136[a5_174 + 114<i32>:byte], byte, word32)
	Mem178[s11_162 + 12<i32>:word32] = CONVERT(Mem176[a5_174 + 115<i32>:byte], byte, word32)
	word32 a0_179 = CONVERT(Mem178[a5_174 + 112<i32>:byte], byte, word32)
	branch a0_179 != 0<32> l23068AF8
l23068AF8:
	word32 a5_1573
	word32 a3_1575
	word32 s5_181 = Mem178[s11_162 + 160<i32>:int32]
	mbedtls_ssl_write_version(a0_179, CONVERT(Mem178[Mem178[a2_157 + 116<i32>:word32] + 113<i32>:byte], byte, word32), a2_157 >>u 1<i32> & 1<32>, s5_181 + 4<i32>)
	word32 t4_1912
	word32 a5_1910
	word32 a7_1911
	word32 a3_1908
	word32 a4_1909
	word32 a1_1906
	word32 a2_1907
	word32 s4_206
	word32 s6_208
	word32 s7_209
	word32 s8_210
	word32 s9_211
	word32 s10_204
	word32 s5_207
	word32 s11_1714
	word32 a0_197 = mbedtls_debug_print_msg(ra, s11_162, 3<32>, 0x2308C570<32>, CONVERT(Mem178[s5_181 + 4<i32>:byte], byte, word32), out a1_1906, out a2_1907, out a3_1908, out a4_1909, out a5_1910, out a7_1911, out s4_206, out s5_207, out s6_208, out s7_209, out s8_210, out s9_211, out s10_204, out s11_1714, out t4_1912)
	word32 a4_218 = CONVERT(Mem178[Mem178[s11_1714:int32] + 116<i32>:uint16], uint16, word32)
	word32 s2_217 = Mem178[s11_1714 + 48<i32>:int32]
	word32 a4_219 = a4_218 & 2<32>
	branch (a4_218 & 2<32>) == 0<32> l23068DE2
l23068B40:
	a4_219 = Mem178[s2_217 + 36<i32>:int32]
	branch a4_219 == 0<32> l23068DE2
l23068DE2:
	word32 s2_255
	word32 s4_257
	word32 s5_258
	word32 s6_259
	word32 s7_260
	word32 s8_261
	word32 s9_262
	word32 s10_263
	word32 s11_264
	word32 a0_265
	word32 a4_267
	word32 a6_275
	word32 t3_276
	word32 t0_277
	word32 tp_278
	word32 t2_280
	word32 t6_281
	call a4_219 (retsize: 0;)
		uses: a1:s2_217 + 216<i32>,a2:4<32>,a5:Mem178[a0_197 + 28<i32>:word32],a6:a6_275,mstatus:mstatus_247,ra:ra_153,s0:s0_232,s1:s1_148,s10:s10_204,s11:s11_205,s2:s2_217,s3:s3_236,s4:s4_206,s5:s5_207,s6:s6_208,s7:s7_209,s8:s8_210,s9:s9_211,Stack +0128:dwArg88,t0:t0_277,t2:t2_280,t3:t3_276,t6:t6_281,tp:tp_278
		defs: a0:a0_265,a4:a4_267,a6:a6_275,mstatus:mstatus_279,ra:ra_252,s1:s1_254,s10:s10_263,s11:s11_264,s2:s2_255,s3:s3_256,s4:s4_257,s5:s5_258,s6:s6_259,s7:s7_260,s8:s8_261,s9:s9_262,sp:sp_251,t0:t0_277,t2:t2_280,t3:t3_276,t6:t6_281,tp:tp_278
	s0_105 = a0_265
	branch a0_265 != 0<32> l23068E08
l23068DF2:
	word32 a0_302
	word32 a6_312
	word32 t3_313
	word32 t0_314
	word32 tp_315
	word32 t2_317
	word32 t6_318
	call a4_267 (retsize: 0;)
		uses: a1:s2_255 + 220<i32>,a2:0x1C<32>,a5:Mem178[a0_265 + 28<i32>:word32],a6:a6_312,mstatus:mstatus_279,ra:ra_252,s0:a0_265,s1:s1_254,s10:s10_263,s11:s11_264,s2:s2_255,s3:s3_256,s4:s4_257,s5:s5_258,s6:s6_259,s7:s7_260,s8:s8_261,s9:s9_262,Stack +0088:dwArg88,t0:t0_314,t2:t2_317,t3:t3_313,t6:t6_318,tp:tp_315
		defs: a0:a0_302,a6:a6_312,mstatus:mstatus_316,ra:ra_289,s1:s1_291,s10:s10_300,s11:s11_301,s2:s2_292,s3:s3_293,s4:s4_294,s5:s5_295,s6:s6_296,s7:s7_297,s8:s8_298,s9:s9_299,sp:sp_288,t0:t0_314,t2:t2_317,t3:t3_313,t6:t6_318,tp:tp_315
	s0_105 = a0_302
	branch a0_302 == 0<32> l23068B48
l23068E08:
	a5_1573 = s0_105
	a3_1575 = 759<i32>
l23068B48:
	word32 a6_375
	word32 a1_327 = Mem178[s11_1714 + 48<i32>:int32]
	word32 a5_329 = s5_207 + 6<i32>
	Mem334[sp_1690 + 140<i32>:word32] = a5_329
	word32 a5_336
	word32 a7_1932
	word32 a4_1930
	word32 a6_1931
	word32 a2_1928
	word32 a3_1929
	word32 a1_1927
	memcpy(a5_329, a1_327 + 216<i32>, 32<i32>, out a1_1927, out a2_1928, out a3_1929, out a4_1930, out a5_336, out a6_1931, out a7_1932)
	word32 a7_1938
	word32 a3_1935
	word32 a4_1936
	word32 a5_1937
	word32 a2_1934
	word32 a1_1933
	word32 a0_358 = mbedtls_debug_print_buf(ra, 3<32>, a5_336, out a1_1933, out a2_1934, out a3_1935, out a4_1936, out a5_1937, out a7_1938)
	word32 a5_370 = 0x10<32>
	word32 a6_371 = Mem334[Mem334[s11_1714 + 44<i32>:int32] + 8<i32>:int32]
	branch a6_371 >u 0xFFFFFFE0<32> l23068B9A
l23068B90:
	a5_370 = Mem334[Mem334[s11_1714 + 48<i32>:int32] + 328<i32>:int32]
	a6_375 = a6_371
	branch a5_370 != 0<32> l23068B9C
l23068B9A:
	a6_375 = 0<32>
l23068B9C:
	branch a5_370 == 0<32> l23068BC8
l23068BA0:
	word32 a1_381 = Mem334[a5_370 + 104<i32>:word32]
	branch a5_370 == 0<32> l23068BC8
l23068BA4:
	word32 a0_445
	word32 a6_455
	word32 t3_456
	word32 t0_457
	word32 tp_458
	word32 t2_460
	word32 t6_461
	call a6_371 + -16<i32> (retsize: 0;)
		uses: a1:a1_381 + 0xC<32>,a2:32<i32>,a5:Mem334[a0_358 + 28<i32>:word32],a6:a6_455,mstatus:mstatus_427,ra:ra_357,s0:s0_396,s1:s1_354,s10:s10_424,s11:s11_325,s2:s2_401,s3:s3_404,s4:s4_407,s5:s5_328,s6:s6_412,s7:s7_415,s8:s8_418,s9:s9_421,Stack +0088:dwArg88,t0:t0_457,t2:t2_460,t3:t3_456,t6:t6_461,tp:tp_458
		defs: a0:a0_445,a5:a5_446,a6:a6_455,mstatus:mstatus_459,ra:ra_432,s1:s1_434,s11:s11_444,s3:s3_436,s5:s5_438,sp:sp_431,t0:t0_457,t2:t2_460,t3:t3_456,t6:t6_461,tp:tp_458
	branch a0_445 != 0<32> l23068A62
l23068BBA:
	Mem466[0x28<32>:word32] = Mem334[s11_1714 + 44<i32>:int32]
	a6_375 = 32<i32>
l23068BC8:
	Mem471[s5_207 + 38<i32>:byte] = SLICE(a6_375, byte, 0)
	word32 s0_468 = s5_207 + 39<i32>
	word32 a5_472 = 0<32>
l23068BD2:
	branch a6_375 != a5_472 l23068E18
l23068E18:
	Mem483[s5_207 + a5_472 + 39<i32>:byte] = SLICE(CONVERT(Mem476[Mem476[s11_1714 + 44<i32>:int32] + a5_472 + 12<i32>:byte], byte, word32), byte, 0)
	a5_472 = a5_472 + 1<32>
l23068BD6:
	Mem497[sp_1690 + 140<i32>:word32] = a6_375
	word32 s8_1960
	word32 s7_1959
	word32 s6_1958
	word32 s5_1957
	word32 a7_1956
	word32 a5_1955
	word32 a4_1954
	word32 a3_1953
	word32 a1_1951
	word32 a2_1952
	word32 s9_1961
	word32 s10_1962
	word32 t4_1963
	word32 s4_509
	word32 s11_1717
	mbedtls_debug_print_msg(ra, s11_1714, 3<32>, 0x2308C5B0<32>, a6_375, out a1_1951, out a2_1952, out a3_1953, out a4_1954, out a5_1955, out a7_1956, out s4_509, out s5_1957, out s6_1958, out s7_1959, out s8_1960, out s9_1961, out s10_1962, out s11_1717, out t4_1963)
	word32 a1_1964
	word32 a2_1965
	word32 a4_1966
	word32 a5_1967
	word32 a7_1968
	word32 a3_1718
	mbedtls_debug_print_buf(ra, 3<32>, s0_468, out a1_1964, out a2_1965, out a3_1718, out a4_1966, out a5_1967, out a7_1968)
	word32 a5_539 = CONVERT(Mem497[Mem497[s11_1717:int32] + 116<i32>:uint16], uint16, word32)
	branch (a5_539 & 2<32>) == 0<32> l23068C4A
l23068C1E:
	branch (a5_539 & 2<32>) != 0<32> l23068E2E
l23068E2E:
	word32 a1_553
	word32 a2_1969
	word32 a3_1970
	word32 a4_1971
	word32 a5_1972
	word32 a7_1973
	mbedtls_debug_print_buf(ra, 3<32>, a5_539 & 2<32>, out a1_553, out a2_1969, out a3_1970, out a4_1971, out a5_1972, out a7_1973)
	Mem565[s4_509:byte] = SLICE(CONVERT(Mem497[Mem497[s11_1717 + 48<i32>:int32] + 40<i32>:byte], byte, word32), byte, 0)
	word32 a1_1974
	word32 a2_1975
	word32 a4_1976
	word32 a5_1977
	word32 a6_1978
	word32 a7_1979
	memcpy(s4_509 + 1<i32>, a1_553, CONVERT(Mem565[Mem565[s11_1717 + 48<i32>:int32] + 40<i32>:byte], byte, word32), out a1_1974, out a2_1975, out a3_1718, out a4_1976, out a5_1977, out a6_1978, out a7_1979)
	s4_509 = CONVERT(Mem565[Mem565[s11_1717 + 48<i32>:int32] + 40<i32>:byte], byte, word32) + (s4_509 + 1<i32>)
l23068C2C:
	word32 s4_600
	word32 a1_1980
	word32 a2_1981
	word32 a4_1982
	word32 a5_1983
	word32 a7_1984
	word32 s5_1985
	word32 s6_1986
	word32 s7_1987
	word32 s8_1988
	word32 s9_1989
	word32 s10_1990
	word32 t4_1991
	mbedtls_debug_print_msg(ra, s11_1717, 3<32>, 0x2308C5F0<32>, a5_539 & 2<32>, out a1_1980, out a2_1981, out a3_1718, out a4_1982, out a5_1983, out a7_1984, out s4_600, out s5_1985, out s6_1986, out s7_1987, out s8_1988, out s9_1989, out s10_1990, out s11_1717, out t4_1991)
	Mem610[s4_600:byte] = 0<8>
	s4_509 = s4_509 + 1<i32>
l23068C4A:
	word32 a4_614 = Mem613[s11_1717 + 12<i32>:int32]
	word32 s3_1726 = s4_509 + 2<i32>
	word32 a4_1716 = a4_614 << 2<i32>
	word32 s2_620 = Mem613[Mem613[s11_1717:int32] + (a4_614 << 2<i32>):int32]
	word32 s0_1725 = 0<32>
	word32 s6_1720 = 0x2308C000<32>
l23068C64:
	word32 a0_625 = Mem624[s2_620:int32]
	branch a0_625 != 0<32> l23068E72
l23068E72:
	word32 a5_1992
	branch mbedtls_ssl_ciphersuite_from_id(a0_625, a4_1716, out a5_1992) == 0<32> l23068ECE
l23068E78:
	word32 a5_630 = Mem624[s11_1717:int32]
	a4_1716 = CONVERT(Mem624[a5_630 + 113<i32>:byte], byte, word32)
	branch a4_1716 < a3_1718 l23068ECE
l23068E86:
	a4_1716 = CONVERT(Mem624[a5_630 + 115<i32>:byte], byte, word32)
	word32 a0_635 = Mem624[a3_1718 + 24<i32>:word32]
	branch a3_1718 < a4_1716 l23068ECE
l23068E90:
	branch (CONVERT(Mem624[a5_630 + 116<i32>:uint16], uint16, word32) & 2<32>) == 0<32> l23068EA0
l23068E98:
	branch (CONVERT(Mem624[a0_635 + 28<i32>:byte], byte, word32) & 4<32>) != 0<32> l23068ECE
l23068EA0:
	word32 a1_2095
	word32 a2_2096
	word32 a5_2097
	word32 a7_2098
	word32 s5_2099
	word32 s7_2100
	word32 s8_2101
	word32 s9_2102
	word32 s10_2103
	word32 t4_2104
	mbedtls_debug_print_msg(ra, s11_1717, 3<32>, s6_1720 + 1572<i32>, Mem624[s2_620:int32], out a1_2095, out a2_2096, out a3_1718, out a4_1716, out a5_2097, out a7_2098, out s4_509, out s5_2099, out s6_1720, out s7_2100, out s8_2101, out s9_2102, out s10_2103, out s11_1717, out t4_2104)
	s3_1726 = s3_1726 + 2<32>
	Mem682[s3_1726 + 4094<i32>:byte] = SLICE(Mem624[s2_620:int32] >> 8<i32>, byte, 0)
	Mem684[s3_1726 + 4095<i32>:byte] = Mem682[s2_620:byte]
	s0_1725 = s0_1725 + 1<32>
l23068ECE:
	s2_620 = s2_620 + 4<32>
l23068C6C:
	Mem688[s3_1726 + 1<i32>:byte] = 0xFF<8>
	Mem691[s3_1726:byte] = 0<8>
	word32 a5_689 = s0_1725 + 1<i32>
	Mem694[s4_509:byte] = SLICE(a5_689 >>u 7<u32>, byte, 0)
	Mem696[s4_509 + 1<i32>:byte] = SLICE(a5_689 << 1<u32>, byte, 0)
	word32 s11_711
	word32 a1_1993
	word32 a2_1994
	word32 a3_1995
	word32 a4_1996
	word32 a5_1997
	word32 a7_1998
	word32 s4_1999
	word32 s5_2000
	word32 s6_2001
	word32 s7_2002
	word32 s8_2003
	word32 s9_2004
	word32 s10_2005
	word32 t4_2006
	mbedtls_debug_print_msg(ra, s11_1717, 3<32>, 0x2308C648<32>, a5_689, out a1_1993, out a2_1994, out a3_1995, out a4_1996, out a5_1997, out a7_1998, out s4_1999, out s5_2000, out s6_2001, out s7_2002, out s8_2003, out s9_2004, out s10_2005, out s11_711, out t4_2006)
	word32 s11_737
	word32 a1_2007
	word32 a2_2008
	word32 a3_2009
	word32 a4_2010
	word32 a5_2011
	word32 a7_2012
	word32 s4_2013
	word32 s5_2014
	word32 s6_2015
	word32 s7_2016
	word32 s8_2017
	word32 s9_2018
	word32 s10_2019
	word32 t4_2020
	mbedtls_debug_print_msg(ra, s11_711, 3<32>, 0x2308C66C<32>, 1<32>, out a1_2007, out a2_2008, out a3_2009, out a4_2010, out a5_2011, out a7_2012, out s4_2013, out s5_2014, out s6_2015, out s7_2016, out s8_2017, out s9_2018, out s10_2019, out s11_737, out t4_2020)
	word32 a1_2021
	word32 a2_2022
	word32 a3_2023
	word32 a4_2024
	word32 a5_2025
	word32 a7_2026
	word32 s4_2027
	word32 s5_2028
	word32 s6_2029
	word32 s7_2030
	word32 s8_2031
	word32 s9_2032
	word32 s10_2033
	word32 t4_2034
	word32 s11_1003
	mbedtls_debug_print_msg(ra, s11_737, 3<32>, 0x2308C68C<32>, 0<32>, out a1_2021, out a2_2022, out a3_2023, out a4_2024, out a5_2025, out a7_2026, out s4_2027, out s5_2028, out s6_2029, out s7_2030, out s8_2031, out s9_2032, out s10_2033, out s11_1003, out t4_2034)
	Mem775[s3_1726 + 2<i32>:byte] = 1<8>
	Mem776[s3_1726 + 3<i32>:byte] = 0<8>
	word32 a5_777 = Mem776[s11_1003 + 180<i32>:int32]
	word32 s4_1015 = s3_1726 + 4<i32>
	word32 s7_780 = 0<32>
	branch a5_777 == 0<32> l23068D44
l23068CF0:
	word32 s0_781 = Mem776[s11_1003 + 160<i32>:int32]
	word32 s6_801
	word32 a1_2035
	word32 a2_2036
	word32 a3_2037
	word32 a4_2038
	word32 a5_2039
	word32 a7_2040
	word32 s5_2041
	word32 s7_2042
	word32 s8_2043
	word32 s9_2044
	word32 s10_2045
	word32 t4_2046
	mbedtls_debug_print_msg(ra, s11_1003, 3<32>, 0x2308C6AC<32>, a5_777, out a1_2035, out a2_2036, out a3_2037, out a4_2038, out a5_2039, out a7_2040, out s4_1015, out s5_2041, out s6_801, out s7_2042, out s8_2043, out s9_2044, out s10_2045, out s11_1003, out t4_2046)
	word32 a5_813
	word32 a1_2047
	word32 a2_2048
	word32 a3_2049
	word32 a4_2050
	word32 a0_810 = strlen(Mem776[s11_1003 + 180<i32>:int32], out a1_2047, out a2_2048, out a3_2049, out a4_2050, out a5_813)
	branch s0_781 + 0x4000000<32> <u s6_801 l23068D2A
l23068D1E:
	s7_780 = a0_810 + 9<i32>
	branch s0_781 + 0x4000000<32> - s6_801 >=u a0_810 + 9<i32> l23068ED2
l23068ED2:
	Mem821[s3_1726 + 8<i32>:byte] = SLICE(a0_810 + 5<i32> >>u 8<i32>, byte, 0)
	Mem824[s3_1726 + 9<i32>:byte] = SLICE((a0_810 & 255<i32>) + 5<i32>, byte, 0)
	Mem827[s3_1726 + 10<i32>:byte] = SLICE(a0_810 + 3<i32> >>u 8<i32>, byte, 0)
	Mem829[s3_1726 + 11<i32>:byte] = SLICE((a0_810 & 255<i32>) + 3<i32>, byte, 0)
	Mem831[s3_1726 + 6<i32>:byte] = 0<8>
	Mem832[s3_1726 + 7<i32>:byte] = 0<8>
	Mem833[s3_1726 + 12<i32>:byte] = 0<8>
	Mem834[s3_1726 + 13<i32>:byte] = SLICE(a0_810 >>u 8<u32>, byte, 0)
	Mem835[s3_1726 + 14<i32>:byte] = SLICE(a0_810 & 255<i32>, byte, 0)
	word32 a1_2064
	word32 a2_2065
	word32 a3_2066
	word32 a4_2067
	word32 a5_2068
	word32 a6_2069
	word32 a7_2070
	memcpy(s3_1726 + 15<i32>, Mem835[s11_1003 + 180<i32>:int32], a0_810, out a1_2064, out a2_2065, out a3_2066, out a4_2067, out a5_2068, out a6_2069, out a7_2070)
l23068D2A:
	word32 a1_2051
	word32 a2_2052
	word32 a3_2053
	word32 a4_2054
	word32 a5_2055
	word32 a7_2056
	word32 s5_2057
	word32 s6_2058
	word32 s7_2059
	word32 s8_2060
	word32 s9_2061
	word32 s10_2062
	word32 t4_2063
	mbedtls_debug_print_msg(ra, s11_1003, 1<32>, 0x2308C6DC<32>, a5_813, out a1_2051, out a2_2052, out a3_2053, out a4_2054, out a5_2055, out a7_2056, out s4_1015, out s5_2057, out s6_2058, out s7_2059, out s8_2060, out s9_2061, out s10_2062, out s11_1003, out t4_2063)
	s7_780 = 0<32>
l23068D44:
	word32 a5_1001 = 0<32>
	branch CONVERT(Mem882[Mem882[s11_1003:int32] + 113<i32>:byte], byte, word32) != 3<32> l23068F3E
l23068D54:
	word32 s2_895 = Mem882[s11_1003 + 160<i32>:int32]
	word32 a1_2071
	word32 a2_2072
	word32 a3_2073
	word32 a4_2074
	word32 a5_2075
	word32 a7_2076
	word32 s5_2077
	word32 s6_2078
	word32 s8_2079
	word32 s9_2080
	word32 s10_2081
	word32 t4_2082
	word32 a0_897 = mbedtls_debug_print_msg(ra, s11_1003, 3<32>, 0x2308C6F0<32>, 0<32>, out a1_2071, out a2_2072, out a3_2073, out a4_2074, out a5_2075, out a7_2076, out s4_1015, out s5_2077, out s6_2078, out s7_780, out s8_2079, out s9_2080, out s10_2081, out s11_1003, out t4_2082)
	word32 s9_917 = Mem882[Mem882[s11_1003:int32] + 88<i32>:int32]
	word32 a5_918 = 0<32>
l23068D7A:
	branch Mem882[(a5_918 << 1<u32>) + s9_917:word32] != 0<32> l23068F20
l23068F20:
	a5_918 = a5_918 + 2<32>
l23068D86:
	word32 s0_930 = s7_780 + 2<i32> + s4_1015
	branch s2_895 + 0x4000000<32> <u s0_930 l23068F24
l23068D94:
	a5_918 = a5_918 + 6<32>
	branch s2_895 + 0x4000000<32> - s0_930 <u a5_918 l23068F24
l23068F24:
	word32 a1_2083
	word32 a2_2084
	word32 a3_2085
	word32 a4_2086
	word32 a5_2087
	word32 a7_2088
	word32 s5_2089
	word32 s6_2090
	word32 s8_2091
	word32 s9_2092
	word32 s10_2093
	word32 t4_2094
	mbedtls_debug_print_msg(ra, s11_1003, 1<32>, 0x2308C6DC<32>, a5_918, out a1_2083, out a2_2084, out a3_2085, out a4_2086, out a5_2087, out a7_2088, out s4_1015, out s5_2089, out s6_2090, out s7_780, out s8_2091, out s9_2092, out s10_2093, out s11_1003, out t4_2094)
	a5_1001 = 0<32>
l23068D9C:
	word32 s8_968 = s0_930 + 6<i32>
	word32 a5_969 = 0<32>
l23068DA4:
	word32 s2_976 = a5_969 + 2<i32>
	branch a0_897 != 0<32> l230690FC
l230690FC:
	a0_897 = mbedtls_ssl_hash_from_md_alg(a0_897)
	Mem980[s8_968:byte] = SLICE(a0_897, byte, 0)
	Mem982[s8_968 + 1<i32>:byte] = 1<8>
	a5_969 = s2_976
	s8_968 = s8_968 + 2<32>
l23068DB4:
	Mem987[s0_930 + 1<i32>:byte] = 0xD<8>
	word32 a4_988 = a5_969 & 255<i32>
	Mem991[s0_930 + 3<i32>:byte] = SLICE(a4_988 + 2<i32>, byte, 0)
	Mem993[s0_930:byte] = 0<8>
	Mem994[s0_930 + 2<i32>:byte] = SLICE(s2_976 >>u 8<u32>, byte, 0)
	Mem995[s0_930 + 4<i32>:byte] = SLICE(a5_969 >>u 8<u32>, byte, 0)
	Mem996[s0_930 + 5<i32>:byte] = SLICE(a4_988, byte, 0)
	a5_1001 = a5_969 + 6<32>
l23068F3E:
	word32 s7_1002 = s7_780 + a5_1001
	word32 a5_1009 = 0<32>
	branch (CONVERT(Mem1005[Mem1005[s11_1003:int32] + 116<i32>:uint16], uint16, word32) & 448<i32>) == 0<32> l23068F9E
l23068F50:
	word32 s2_1011 = Mem1005[s11_1003 + 160<i32>:int32]
	word32 a1_2105
	word32 a2_2106
	word32 a3_2107
	word32 a4_2108
	word32 a7_2109
	word32 s5_2110
	word32 s6_2111
	word32 s8_2112
	word32 s9_2113
	word32 s10_2114
	word32 t4_2115
	word32 a5_1030
	mbedtls_debug_print_msg(ra, s11_1003, 3<32>, 0x2308C724<32>, 0x4000000<32>, out a1_2105, out a2_2106, out a3_2107, out a4_2108, out a5_1030, out a7_2109, out s4_1015, out s5_2110, out s6_2111, out s7_1002, out s8_2112, out s9_2113, out s10_2114, out s11_1003, out t4_2115)
	word32 s0_1018 = s7_1002 + 2<i32> + s4_1015
	branch s2_1011 + 0x4000000<32> <u s0_1018 l23068F84
l23068F7A:
	a5_1030 = 4<32>
	branch s2_1011 + 0x4000000<32> - s0_1018 >u 4<32> l2306910E
l2306910E:
	Mem1051[s0_1018:byte] = 0<8>
	Mem1052[s0_1018 + 1<i32>:byte] = 1<8>
	Mem1053[s0_1018 + 2<i32>:byte] = 0<8>
	Mem1054[s0_1018 + 3<i32>:byte] = 1<8>
	Mem1059[s0_1018 + 4<i32>:byte] = SLICE(Mem1054[Mem1054[s11_1003:int32] + 116<i32>:word32] >>u 6<i32> & 7<32>, byte, 0)
	a5_1009 = 5<32>
l23068F84:
	word32 a1_2116
	word32 a2_2117
	word32 a3_2118
	word32 a4_2119
	word32 a5_2120
	word32 a7_2121
	word32 s5_2122
	word32 s6_2123
	word32 s8_2124
	word32 s9_2125
	word32 s10_2126
	word32 t4_2127
	mbedtls_debug_print_msg(ra, s11_1003, 1<32>, 0x2308C6DC<32>, a5_1030, out a1_2116, out a2_2117, out a3_2118, out a4_2119, out a5_2120, out a7_2121, out s4_1015, out s5_2122, out s6_2123, out s7_1002, out s8_2124, out s9_2125, out s10_2126, out s11_1003, out t4_2127)
	a5_1009 = 0<32>
l23068F9E:
	word32 s7_1093 = s7_1002 + a5_1009
	word32 s0_1098 = 0<32>
	word32 a5_1099 = Mem1095[Mem1095[s11_1003:int32] + 96<i32>:word32]
	branch a5_1099 == 0<32> l23069008
l23068FAA:
	word32 s8_1122
	word32 a1_2128
	word32 a2_2129
	word32 a3_2130
	word32 a4_2131
	word32 a5_2132
	word32 a7_2133
	word32 s5_2134
	word32 s6_2135
	word32 s9_2136
	word32 s10_2137
	word32 t4_2138
	mbedtls_debug_print_msg(ra, s11_1003, 3<32>, 0x2308C758<32>, a5_1099, out a1_2128, out a2_2129, out a3_2130, out a4_2131, out a5_2132, out a7_2133, out s4_1015, out s5_2134, out s6_2135, out s7_1093, out s8_1122, out s9_2136, out s10_2137, out s11_1003, out t4_2138)
	word32 s2_1129 = Mem1095[Mem1095[s11_1003:int32] + 96<i32>:int32]
l23068FCE:
	word32 a0_1132 = Mem1095[s2_1129:int32]
	branch a0_1132 != 0<32> l23069132
l23069132:
	word32 a1_2139
	word32 a2_2140
	word32 a3_2141
	word32 a4_2142
	word32 a5_2143
	s0_1098 = s0_1098 + ((strlen(a0_1132, out a1_2139, out a2_2140, out a3_2141, out a4_2142, out a5_2143) & 255<i32>) + 1<32>)
	s2_1129 = s2_1129 + 4<32>
l23068FD6:
	word32 s2_1148 = s7_1093 + 2<i32> + s4_1015
	word32 a5_1150 = s8_1122 + 0x4000000<32>
	branch s8_1122 + 0x4000000<32> <u s2_1148 l23068FEE
l23068FE4:
	a5_1150 = s8_1122 + 0x4000000<32> - s2_1148
	branch a5_1150 >=u s0_1098 + 6<32> l23069142
l23069142:
	Mem1154[s2_1148:byte] = 0<8>
	Mem1155[s2_1148 + 1<i32>:byte] = 0x10<8>
	word32 s0_1158 = s2_1148 + 6<i32>
	word32 s8_1159 = Mem1155[Mem1155[s11_1003:int32] + 96<i32>:int32]
l23069158:
	word32 a0_1162 = Mem1161[s8_1159:int32]
	branch a0_1162 != 0<32> l2306918A
l2306918A:
	word32 a1_2156
	word32 a2_2157
	word32 a3_2158
	word32 a4_2159
	word32 a5_2160
	word32 a0_1163 = strlen(a0_1162, out a1_2156, out a2_2157, out a3_2158, out a4_2159, out a5_2160)
	Mem1170[s0_1158:byte] = SLICE(a0_1163, byte, 0)
	word32 a1_2161
	word32 a2_2162
	word32 a3_2163
	word32 a4_2164
	word32 a5_2165
	word32 a6_2166
	word32 a7_2167
	memcpy(s0_1158 + 1<i32>, Mem1170[s8_1159:int32], a0_1163 & 255<i32>, out a1_2161, out a2_2162, out a3_2163, out a4_2164, out a5_2165, out a6_2166, out a7_2167)
	s8_1159 = s8_1159 + 4<32>
	s0_1158 = s0_1158 + (CONVERT(Mem1170[s0_1158:byte], byte, word32) + 1<32>)
l2306915E:
	s0_1098 = s0_1158 - s2_1148
	Mem1195[s2_1148 + 4<i32>:byte] = SLICE(s0_1098 + -6<i32> >>u 8<i32>, byte, 0)
	Mem1198[s2_1148 + 5<i32>:byte] = SLICE((s0_1098 & 255<i32>) + -6<i32>, byte, 0)
	Mem1202[s2_1148 + 2<i32>:byte] = SLICE(s0_1098 + -4<i32> >>u 8<i32>, byte, 0)
	Mem1203[s2_1148 + 3<i32>:byte] = SLICE((s0_1098 & 255<i32>) + 0xFFFFFFFC<32>, byte, 0)
l23068FEE:
	word32 a1_2144
	word32 a2_2145
	word32 a3_2146
	word32 a4_2147
	word32 a5_2148
	word32 a7_2149
	word32 s5_2150
	word32 s6_2151
	word32 s8_2152
	word32 s9_2153
	word32 s10_2154
	word32 t4_2155
	mbedtls_debug_print_msg(ra, s11_1003, 1<32>, 0x2308C6DC<32>, a5_1150, out a1_2144, out a2_2145, out a3_2146, out a4_2147, out a5_2148, out a7_2149, out s4_1015, out s5_2150, out s6_2151, out s7_1093, out s8_2152, out s9_2153, out s10_2154, out s11_1003, out t4_2155)
	s0_1098 = 0<32>
l23069008:
	word32 s0_1244 = s0_1098 + s7_1093
	word32 s7_1245 = 0<32>
	branch (CONVERT(Mem1238[Mem1238[s11_1003:int32] + 116<i32>:uint16], uint16, word32) & 512<i32>) == 0<32> l23069072
l2306901A:
	word32 a5_1269
	word32 s8_1281
	word32 s9_1282
	word32 a1_2179
	word32 a2_2180
	word32 a3_2181
	word32 a4_2182
	word32 a7_2183
	word32 s4_2184
	word32 s5_2185
	word32 s6_2186
	word32 s7_2187
	word32 s10_2188
	word32 t4_2189
	mbedtls_debug_print_msg(ra, s11_1003, 3<32>, 0x2308C77C<32>, Mem1238[s11_1003 + 44<i32>:int32], out a1_2179, out a2_2180, out a3_2181, out a4_2182, out a5_1269, out a7_2183, out s4_2184, out s5_2185, out s6_2186, out s7_2187, out s8_1281, out s9_1282, out s10_2188, out s11_1003, out t4_2189)
	word32 s2_1257 = s0_1244 + 2<i32> + s4_1015
	branch s9_1282 <u s2_1257 l23069058
l2306904C:
	branch s9_1282 - s2_1257 >=u s8_1281 + 4<i32> l230691AE
l230691AE:
	Mem1290[s2_1257 + 1<i32>:byte] = 0x23<8>
	Mem1292[s2_1257:byte] = 0<8>
	Mem1293[s2_1257 + 2<i32>:byte] = SLICE(s8_1281 >>u 8<u32>, byte, 0)
	Mem1294[s2_1257 + 3<i32>:byte] = SLICE(s8_1281, byte, 0)
	branch Mem1294[Mem1294[s11_1003 + 44<i32>:int32] + 100<i32>:word32] == 0<32> l230691FE
l230691CE:
	branch s8_1281 == 0<32> l230691FE
l230691FE:
	s7_1245 = 4<32>
l230691D2:
	word32 a1_1307
	word32 s8_1318
	word32 a2_2204
	word32 a3_2205
	word32 a4_2206
	word32 a5_2207
	word32 a7_2208
	word32 s4_2209
	word32 s5_2210
	word32 s6_2211
	word32 s9_2212
	word32 s10_2213
	word32 t4_2214
	mbedtls_debug_print_msg(ra, s11_1003, 3<32>, 0x2308C7AC<32>, s8_1281, out a1_1307, out a2_2204, out a3_2205, out a4_2206, out a5_2207, out a7_2208, out s4_2209, out s5_2210, out s6_2211, out s7_1245, out s8_1318, out s9_2212, out s10_2213, out s11_1003, out t4_2214)
	word32 a1_2215
	word32 a2_2216
	word32 a3_2217
	word32 a4_2218
	word32 a5_2219
	word32 a6_2220
	word32 a7_2221
	memcpy(s2_1257 + 4<i32>, a1_1307, s8_1318, out a1_2215, out a2_2216, out a3_2217, out a4_2218, out a5_2219, out a6_2220, out a7_2221)
l23069058:
	word32 a1_2190
	word32 a2_2191
	word32 a3_2192
	word32 a4_2193
	word32 a5_2194
	word32 a7_2195
	word32 s4_2196
	word32 s5_2197
	word32 s6_2198
	word32 s7_2199
	word32 s8_2200
	word32 s9_2201
	word32 s10_2202
	word32 t4_2203
	mbedtls_debug_print_msg(ra, s11_1003, 1<32>, 0x2308C6DC<32>, a5_1269, out a1_2190, out a2_2191, out a3_2192, out a4_2193, out a5_2194, out a7_2195, out s4_2196, out s5_2197, out s6_2198, out s7_2199, out s8_2200, out s9_2201, out s10_2202, out s11_1003, out t4_2203)
	s7_1245 = 0<32>
l23069072:
	word32 s0_1375 = s0_1244 + s7_1245
	word32 s5_1399
	word32 s6_1400
	word32 a1_2168
	word32 a2_2169
	word32 a3_2170
	word32 a4_2171
	word32 a5_2172
	word32 a7_2173
	word32 s7_2174
	word32 s8_2175
	word32 s9_2176
	word32 s10_2177
	word32 t4_2178
	word32 s4_1398
	word32 s11_1397
	mbedtls_debug_print_msg(ra, s11_1003, 3<32>, 0x2308C7D0<32>, s0_1375, out a1_2168, out a2_2169, out a3_2170, out a4_2171, out a5_2172, out a7_2173, out s4_1398, out s5_1399, out s6_1400, out s7_2174, out s8_2175, out s9_2176, out s10_2177, out s11_1397, out t4_2178)
	branch s0_1375 == 0<32> l230690A0
l23069090:
	Mem1424[s3_1726 + 4<i32>:byte] = SLICE(s0_1375 >>u 8<u32>, byte, 0)
	Mem1425[s3_1726 + 5<i32>:byte] = SLICE(s0_1375, byte, 0)
	s4_1398 = s6_1400 + s0_1375
l230690A0:
	Mem1429[s11_1397 + 164<i32>:word32] = 0x16<32>
	word32 a5_1430 = Mem1429[s11_1397 + 160<i32>:int32]
	Mem1434[s11_1397 + 168<i32>:word32] = s4_1398 - s5_1399
	Mem1436[a5_1430:byte] = 1<8>
	Mem1439[s11_1397 + 4<i32>:word32] = Mem1436[s11_1397 + 4<i32>:int32] + 1<32>
	word32 a5_1441 = CONVERT(Mem1439[Mem1439[s11_1397:int32] + 116<i32>:uint16], uint16, word32)
	word32 a5_1442 = a5_1441 & 2<32>
	branch (a5_1441 & 2<32>) == 0<32> l230690D4
l230690CE:
	ra = mbedtls_ssl_send_flight_completed(ra, 1<32>, a5_1441 & 2<32>, Mem1439[sp_1690:word32], Mem1439[sp_1690 + 4<i32>:word32], out s1, out a5_1442, out s11_1397)
l230690D4:
	word32 a5_1520
	word32 s11_1527
	word32 a0_1541
	word32 s0_2222
	word32 a1_2223
	word32 a2_2224
	word32 a3_2225
	word32 a4_2226
	word32 s2_2227
	word32 s4_2228
	word32 s5_2229
	ra = mbedtls_ssl_write_record(ra, s1, s11_1397, a5_1442, mstatus, out s0_2222, out s1, out a0_1541, out a1_2223, out a2_2224, out a3_2225, out a4_2226, out a5_1520, out s2_2227, out s3, out s4_2228, out s5_2229, out s11_1527, out mstatus)
	branch a0_1541 == 0<32> l23069202
l23069202:
	word32 a1_2230
	word32 a2_2231
	word32 a3_2232
	word32 a4_2233
	word32 a7_2234
	word32 s4_2235
	word32 s5_2236
	word32 s6_2237
	word32 s7_2238
	word32 s8_2239
	word32 s9_2240
	word32 s10_2241
	word32 s11_2242
	word32 t4_2243
	mbedtls_debug_print_msg(ra, s11_1527, 2<32>, 0x2308C7FC<32>, a5_1520, out a1_2230, out a2_2231, out a3_2232, out a4_2233, out a5, out a7_2234, out s4_2235, out s5_2236, out s6_2237, out s7_2238, out s8_2239, out s9_2240, out s10_2241, out s11_2242, out t4_2243)
l230690E0:
	a5_1573 = a0_1541
	a3_1575 = 1045<i32>
l230690EE:
	word32 s11_1950
	word32 s9_1948
	word32 s10_1949
	word32 s8_1947
	word32 s7_1946
	word32 s6_1945
	word32 s5_1944
	word32 s4_1943
	word32 a4_1942
	word32 a3_1941
	word32 a2_1940
	word32 a1_1939
	mbedtls_debug_print_ret(ra, 1<32>, a3_1575, a5_1573, out a1_1939, out a2_1940, out a3_1941, out a4_1942, out a5, out s4_1943, out s5_1944, out s6_1945, out s7_1946, out s8_1947, out s9_1948, out s10_1949, out s11_1950)
l23068AD8:
	word32 t4_1926
	word32 s10_1924
	word32 s11_1925
	word32 s8_1922
	word32 s9_1923
	word32 s6_1920
	word32 s7_1921
	word32 s4_1918
	word32 s5_1919
	word32 a4_1916
	word32 a7_1917
	word32 a2_1914
	word32 a3_1915
	word32 a1_1913
	mbedtls_debug_print_msg(ra, s11_162, 1<32>, 0x2308C518<32>, a5_174, out a1_1913, out a2_1914, out a3_1915, out a4_1916, out a5, out a7_1917, out s4_1918, out s5_1919, out s6_1920, out s7_1921, out s8_1922, out s9_1923, out s10_1924, out s11_1925, out t4_1926)
l23068AA2:
	word32 s11_1904
	word32 t4_1905
	word32 s9_1902
	word32 s10_1903
	word32 s7_1900
	word32 s8_1901
	word32 s5_1898
	word32 s6_1899
	word32 s4_1897
	word32 a7_1896
	word32 a4_1895
	word32 a3_1894
	word32 a2_1893
	word32 a1_1892
	mbedtls_debug_print_msg(ra, s11_162, 1<32>, 0x2308C508<32>, a5_174, out a1_1892, out a2_1893, out a3_1894, out a4_1895, out a5, out a7_1896, out s4_1897, out s5_1898, out s6_1899, out s7_1900, out s8_1901, out s9_1902, out s10_1903, out s11_1904, out t4_1905)
l23068A5A:
	Mem1660[s11_108 + 4<i32>:word32] = 1<32>
l23068A2A:
l2306A3FA:
l2306966A:
	word32 t4_1868
	word32 s11_1867
	word32 s10_1866
	word32 s9_1865
	word32 s8_1864
	word32 s6_1862
	word32 s7_1863
	word32 s4_1860
	word32 s5_1861
	word32 a7_1859
	word32 a4_1858
	word32 a3_1857
	word32 a2_1856
	word32 a1_1855
	mbedtls_debug_print_msg(ra, s11_108, 1<32>, 0x2308CFA0<32>, a5, out a1_1855, out a2_1856, out a3_1857, out a4_1858, out a5, out a7_1859, out s4_1860, out s5_1861, out s6_1862, out s7_1863, out s8_1864, out s9_1865, out s10_1866, out s11_1867, out t4_1868)
l23068AF0:
l23068A62:
	word32 s2_1703 = Mem1695[sp_1690 + 72<i32>:word32]
	word32 a4_1704 = Mem1695[sp_1690 + 104<i32>:word32]
	word32 a0_1705 = Mem1695[sp_1690 + 136<i32>:word32]
	word32 s5_1710 = Mem1695[Mem1695[sp_1690 + 200<i32>:word32] + 316<i32>:word32]
	s1Out = s1
	a0Out = a0_1705
	a4Out = a4_1704
	a5Out = a5
	s2Out = s2_1703
	s3Out = s3
	s5Out = s5_1710
	mstatusOut = mstatus
	return ra
mbedtls_ssl_handshake_client_step_exit:


void mbedtls_ssl_own_key(word32 a5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5:[0..31]
// LiveOut:
// Trashed: a0 a5
// Preserved: sp
mbedtls_ssl_own_key_entry:
l2306A40C:
	branch a5 == 0<32> l2306A414
l2306A410:
	a5 = Mem0[a5 + 8<i32>:word32]
	branch a5 != 0<32> l2306A41A
l2306A414:
	branch Mem0[a5 + 76<i32>:word32] == 0<32> l2306A41C
l2306A41A:
l2306A41C:
	return
mbedtls_ssl_own_key_exit:


word32 mbedtls_ssl_handshake_server_step(word32 ra, word32 a5, word32 s5, word32 mstatus, word32 dwArg18, word32 dwArgC4, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s3Out, ptr32 & s5Out, ptr32 & mstatusOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_ssl_handshake_step
// MayUse:  a5:[0..31] mstatus:[0..31] ra:[0..31] s5:[0..31] Stack +0018:[0..31] Stack +00C4:[0..31]
// LiveOut: a0 a4 a5 mstatus s3 s5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 gp mstatus s10 s11 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6 tp
// Preserved: ra s0 s1 s2 sp
mbedtls_ssl_handshake_server_step_entry:
l2306A420:
	word32 s0_105
	word32 a4_133 = 0x10<32>
	branch a5 != 0x10<32> l2306A450
l2306A450:
	word32 a0_33 = Mem29[0x40<32>:word32]
	branch true l2306A45A
l2306A45A:
	word32 a5_43
	word32 s10_49
	word32 t4_4159
	word32 a2_4148
	word32 s6_4154
	word32 s11_4158
	word32 s9_4157
	word32 s8_4156
	word32 s7_4155
	word32 a3_4149
	word32 s5_4153
	word32 s4_4152
	word32 a7_4151
	word32 a4_4150
	word32 a1_4147
	mbedtls_debug_print_msg(ra, a0_33, 2<32>, 0x2308D014<32>, a5, out a1_4147, out a2_4148, out a3_4149, out a4_4150, out a5_43, out a7_4151, out s4_4152, out s5_4153, out s6_4154, out s7_4155, out s8_4156, out s9_4157, out s10_49, out s11_4158, out t4_4159)
	word32 a0_62
	word32 a1_4161
	word32 a2_4162
	word32 a3_4163
	word32 a5_4164
	word32 s3_4165
	word32 s4_4166
	word32 s11_4170
	word32 s6_4167
	word32 s7_4168
	word32 s9_4169
	word32 s1_4160
	word32 s10_107
	word32 s2_109
	mbedtls_ssl_flush_output(ra, s10_49, a5_43, dwArg18, out s1_4160, out a0_62, out a1_4161, out a2_4162, out a3_4163, out a4_133, out a5_4164, out s2_109, out s3_4165, out s4_4166, out s5, out s6_4167, out s7_4168, out s9_4169, out s10_107, out s11_4170)
	s0_105 = a0_62
	branch a0_62 != 0<32> l2306A4CE
l2306A480:
	branch (CONVERT(Mem29[Mem29[s10_107:int32] + 116<i32>:uint16], uint16, word32) & 2<32>) != 0<32> l2306A4AC
l2306A4AC:
	branch CONVERT(Mem29[Mem29[s10_107 + 48<i32>:int32] + 52<i32>:byte], byte, word32) != 1<32> l2306A48C
l2306A4BA:
	word32 a0_125
	word32 s1_4206
	word32 a5_4210
	word32 s4_4212
	word32 s6_4213
	word32 s11_4216
	word32 s9_4215
	word32 s7_4214
	word32 s3_4211
	word32 a1_4207
	word32 a2_4208
	word32 a3_4209
	ra = mbedtls_ssl_resend(ra, a0_62, s10_107, 1<32>, s2_109, mstatus, dwArg18, out s0_105, out s1_4206, out a0_125, out a1_4207, out a2_4208, out a3_4209, out a4_133, out a5_4210, out s2_109, out s3_4211, out s4_4212, out s5, out s6_4213, out s7_4214, out s9_4215, out s10_107, out s11_4216, out mstatus)
	branch a0_125 == 0<32> l2306A48C
l2306A4C2:
	s0_105 = a0_125
l2306A48C:
	word32 s7_129 = Mem29[s10_107 + 4<i32>:int32]
	branch s7_129 <=u 0x12<32> l2306A49A
l2306A49A:
	a4_133 = 0x2308CFC8<32>
	word32 a5_135 = Mem29[(s7_129 << 2<u32>) + 0x2308CFC8<32>:word32]
	switch (Mem29[s10_107 + 4<i32>:int32]) { l2306A4C6 l2306A4F6 }
l2306A4F6:
	word32 a5_2657
	word32 a3_2659
	word32 a5_145
	word32 s10_151
	word32 t4_4196
	word32 s8_4193
	word32 s9_4194
	word32 s11_4195
	word32 a7_4188
	word32 s4_4189
	word32 s5_4190
	word32 s6_4191
	word32 s7_4192
	word32 a1_4184
	word32 a4_4187
	word32 a2_4185
	word32 a3_4186
	mbedtls_debug_print_msg(ra, s10_107, 2<32>, 0x2308D028<32>, a5_135, out a1_4184, out a2_4185, out a3_4186, out a4_4187, out a5_145, out a7_4188, out s4_4189, out s5_4190, out s6_4191, out s7_4192, out s8_4193, out s9_4194, out s10_151, out s11_4195, out t4_4196)
	word32 a0_169
	word32 s10_179
	word32 s2_181
	word32 s9_4204
	word32 s11_4205
	word32 s5_4200
	word32 s6_4201
	word32 s7_4202
	word32 s8_4203
	word32 s0_4197
	word32 s3_4198
	word32 s4_4199
	word32 ra_1000 = mbedtls_ssl_fetch_input(ra, s0_105, s10_151, 5<32>, a5_145, s2_109, mstatus, s5, dwArg18, out s0_4197, out a0_169, out s2_181, out s3_4198, out s4_4199, out s5_4200, out s6_4201, out s7_4202, out s8_4203, out s9_4204, out s10_179, out s11_4205, out mstatus)
	s0_105 = a0_169
	branch a0_169 == 0<32> l2306A536
l2306A536:
	word32 s0_201 = Mem29[s10_179 + 88<i32>:int32]
	branch (CONVERT(Mem29[Mem29[s10_179:int32] + 116<i32>:uint16], uint16, word32) & 2<32>) == 0<32> l2306A54A
l2306A548:
l2306A54A:
	word32 a2_4218
	word32 a7_4222
	word32 a5_4221
	word32 a4_4220
	word32 a3_4219
	word32 a1_4217
	mbedtls_debug_print_buf(ra_1000, 4<32>, s0_201, out a1_4217, out a2_4218, out a3_4219, out a4_4220, out a5_4221, out a7_4222)
	word32 a3_4225
	word32 a4_4226
	word32 a5_4227
	word32 a7_4228
	word32 s4_4229
	word32 t4_4236
	word32 s5_4230
	word32 s9_4234
	word32 s11_4235
	word32 s6_4231
	word32 s7_4232
	word32 s8_4233
	word32 a1_4223
	word32 a2_4224
	word32 s10_1008
	mbedtls_debug_print_msg(ra_1000, s10_179, 3<32>, 0x2308D050<32>, CONVERT(Mem29[s0_201:byte], byte, word32), out a1_4223, out a2_4224, out a3_4225, out a4_4226, out a5_4227, out a7_4228, out s4_4229, out s5_4230, out s6_4231, out s7_4232, out s8_4233, out s9_4234, out s10_1008, out s11_4235, out t4_4236)
	word32 a5_1029 = 0x16<32>
	branch CONVERT(Mem29[s0_201:byte], byte, word32) == 0x16<32> l2306A5AA
l2306A5AA:
	word32 a3_257 = Mem29[s10_1008 + 92<i32>:int32]
	word32 a4_264 = CONVERT(Mem29[a3_257 + 1<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem29[a3_257:byte], byte, word32)
	word32 s10_280
	word32 a1_4237
	word32 a2_4238
	word32 a4_4240
	word32 a5_4241
	word32 s9_4248
	word32 s11_4249
	word32 t4_4250
	word32 s6_4245
	word32 s7_4246
	word32 s8_4247
	word32 s5_4244
	word32 s4_4243
	word32 a7_4242
	word32 a3_4239
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, 0x2308D090<32>, CONVERT(SLICE(a4_264 << 8<u32> | a4_264 >>u 8<i32>, word16, 0), word16, word32), out a1_4237, out a2_4238, out a3_4239, out a4_4240, out a5_4241, out a7_4242, out s4_4243, out s5_4244, out s6_4245, out s7_4246, out s8_4247, out s9_4248, out s10_280, out s11_4249, out t4_4250)
	word32 a2_303
	word32 s8_4260
	word32 s9_4261
	word32 s11_4262
	word32 t4_4263
	word32 s5_4257
	word32 s6_4258
	word32 s7_4259
	word32 a3_4252
	word32 a4_4253
	word32 a5_4254
	word32 a7_4255
	word32 s4_4256
	word32 a1_4251
	mbedtls_debug_print_msg(ra_1000, s10_280, 3<32>, 0x2308D0B4<32>, CONVERT(Mem29[s0_201 + 1<i32>:byte], byte, word32), out a1_4251, out a2_303, out a3_4252, out a4_4253, out a5_4254, out a7_4255, out s4_4256, out s5_4257, out s6_4258, out s7_4259, out s8_4260, out s9_4261, out s10_1008, out s11_4262, out t4_4263)
	a5_1029 = 2<32>
	word32 a5_4264
	branch mbedtls_ssl_read_version(fp + -232<i32>, fp + -228<i32>, a2_303 >>u 1<i32> & 1<32>, s0_201 + 1<i32>, out a5_4264) > 2<32> l2306A62A
l2306A62A:
	branch (CONVERT(Mem29[Mem29[s10_1008:int32] + 116<i32>:uint16], uint16, word32) & 2<32>) == 0<32> l2306A662
l2306A636:
	word32 a1_334 = Mem29[s10_1008 + 84<i32>:int32]
	a5_1029 = CONVERT(Mem29[a1_334:byte], byte, word32)
	branch a5_1029 != 0<32> l2306A646
l2306A640:
	a5_1029 = CONVERT(Mem29[a1_334 + 1<i32>:byte], byte, word32)
	branch a5_1029 == 0<32> l2306A654
l2306A654:
	word32 a6_4270
	word32 a7_4271
	word32 a4_4268
	word32 a5_4269
	word32 a1_4265
	word32 a2_4266
	word32 a3_4267
	memcpy(Mem29[s10_1008 + 144<i32>:int32] + 2<32>, a1_334 + 2<32>, 6<32>, out a1_4265, out a2_4266, out a3_4267, out a4_4268, out a5_4269, out a6_4270, out a7_4271)
l2306A662:
	word32 a4_356 = Mem29[s10_1008 + 92<i32>:int32]
	word32 a5_360 = CONVERT(Mem29[a4_356 + 1<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem29[a4_356:byte], byte, word32)
	word32 s8_365 = CONVERT(SLICE(a5_360 << 8<u32> | a5_360 >>u 8<i32>, word16, 0), word16, word32)
	a5_1029 = 0x4000000<32>
	branch s8_365 <=u 0x4000000<32> l2306A698
l2306A698:
	word32 a1_368 = 5<32>
	word32 a5_369 = CONVERT(Mem29[Mem29[s10_1008:int32] + 116<i32>:uint16], uint16, word32)
	branch (a5_369 & 2<32>) == 0<32> l2306A6A8
l2306A6A6:
	a1_368 = 0xD<32>
l2306A6A8:
	word32 a0_391
	word32 s10_401
	word32 s11_402
	word32 s2_403
	word32 s3_404
	word32 s4_405
	word32 s5_406
	word32 s6_407
	word32 s7_408
	word32 s8_409
	word32 s9_410
	word32 s0_4272
	ra_1000 = mbedtls_ssl_fetch_input(ra_1000, dwArgC4, s10_1008, a1_368 + s8_365, a5_369 & 2<32>, s2_181, mstatus, s5, dwArg18, out s0_4272, out a0_391, out s2_403, out s3_404, out s4_405, out s5_406, out s6_407, out s7_408, out s8_409, out s9_410, out s10_401, out s11_402, out mstatus)
	s0_105 = a0_391
	branch a0_391 == 0<32> l2306A6C4
l2306A6C4:
	branch (CONVERT(Mem29[Mem29[s10_401:int32] + 116<i32>:uint16], uint16, word32) & 2<32>) == 0<32> l2306A72A
l2306A72A:
	Mem425[s10_401 + 116<i32>:word32] = 0<32>
l2306A6D0:
	Mem427[s10_401 + 124<i32>:word32] = s8_409 + 13<i32>
l2306A6D8:
	word32 s1_430 = Mem429[s10_401 + 100<i32>:int32]
	word32 a4_4301
	word32 a5_4302
	word32 a7_4303
	word32 a3_4300
	word32 a1_4298
	word32 a2_4299
	mbedtls_debug_print_buf(ra_1000, 4<32>, s1_430, out a1_4298, out a2_4299, out a3_4300, out a4_4301, out a5_4302, out a7_4303)
	word32 a5_456 = Mem429[Mem429[s10_401 + 48<i32>:int32] + 196<i32>:int32]
	word32 s1_471
	word32 s8_478
	word32 a3_485
	word32 a6_491
	word32 a7_492
	word32 t3_493
	word32 t0_494
	word32 t1_495
	word32 t4_496
	word32 tp_497
	word32 t5_499
	word32 sp_1097
	call a5_456 (retsize: 0;)
		uses: a0:s10_401,a1:s1_430,a2:s8_409,a3:a3_485,a5:a5_456,a6:a6_491,a7:a7_492,mstatus:mstatus_417,ra:ra_416,s0:a0_391,s1:s1_430,s10:s10_401,s11:s11_402,s2:s2_403,s3:s3_404,s4:s4_405,s5:s5_406,s6:s6_407,s7:s7_408,s8:s8_409,s9:s9_410,Stack +0128:dwArg18,Stack +01D4:dwArgC4,t0:t0_494,t1:t1_495,t3:t3_493,t4:t4_496,t5:t5_499,tp:tp_497
		defs: a3:a3_485,a6:a6_491,a7:a7_492,mstatus:mstatus_498,ra:ra_469,s0:s0_470,s1:s1_471,s10:s10_480,s8:s8_478,sp:sp_468,t0:t0_494,t1:t1_495,t3:t3_493,t4:t4_496,t5:t5_499,tp:tp_497
	word32 a5_502 = CONVERT(Mem429[Mem429[s10_1008:int32] + 116<i32>:uint16], uint16, word32)
	word32 a4_501 = 4<32>
	a5_1029 = a5_502 & 2<32>
	branch (a5_502 & 2<32>) == 0<32> l2306A718
l2306A716:
	a4_501 = 0xC<32>
l2306A718:
	branch s8_478 >=u a4_501 l2306A730
l2306A730:
	word32 a7_4289
	word32 s4_4290
	word32 s5_4291
	word32 s6_4292
	word32 s7_4293
	word32 s8_4294
	word32 s9_4295
	word32 s11_4296
	word32 t4_4297
	word32 a4_4287
	word32 a5_4288
	word32 a3_4286
	word32 a2_4285
	word32 a1_4284
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, 0x2308D0F0<32>, CONVERT(Mem429[s1_471:byte], byte, word32), out a1_4284, out a2_4285, out a3_4286, out a4_4287, out a5_4288, out a7_4289, out s4_4290, out s5_4291, out s6_4292, out s7_4293, out s8_4294, out s9_4295, out s10_1008, out s11_4296, out t4_4297)
	a5_1029 = 1<32>
	branch CONVERT(Mem429[s1_471:byte], byte, word32) == 1<32> l2306A764
l2306A764:
	word32 s8_566
	word32 a1_4304
	word32 t4_4316
	word32 a2_4305
	word32 s6_4312
	word32 s11_4315
	word32 s7_4313
	word32 s9_4314
	word32 a7_4309
	word32 s4_4310
	word32 s5_4311
	word32 a5_4308
	word32 a4_4307
	word32 a3_4306
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, 0x2308D114<32>, CONVERT(Mem429[s1_471 + 1<i32>:byte], byte, word32) << 16<i32> | CONVERT(Mem429[s1_471 + 2<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem429[s1_471 + 3<i32>:byte], byte, word32), out a1_4304, out a2_4305, out a3_4306, out a4_4307, out a5_4308, out a7_4309, out s4_4310, out s5_4311, out s6_4312, out s7_4313, out s8_566, out s9_4314, out s10_1008, out s11_4315, out t4_4316)
	a5_1029 = CONVERT(Mem429[s1_471 + 1<i32>:byte], byte, word32)
	branch a5_1029 != 0<32> l2306A7C4
l2306A796:
	word32 a2_574 = 4<32>
	word32 a3_575 = CONVERT(Mem429[Mem429[s10_1008:int32] + 116<i32>:uint16], uint16, word32)
	branch (a3_575 & 2<32>) == 0<32> l2306A7A6
l2306A7A4:
	a2_574 = 0xC<32>
l2306A7A6:
	word32 a5_583 = CONVERT(Mem429[s1_471 + 3<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem429[s1_471 + 2<i32>:byte], byte, word32)
	a5_1029 = CONVERT(SLICE(a5_583 >>u 8<i32> | a5_583 << 8<u32>, word16, 0), word16, word32) + a2_574
	branch s8_566 == a5_1029 l2306A7D2
l2306A7D2:
	word32 a5_624
	branch (a3_575 & 2<32>) == 0<32> l2306A850
l2306A7D4:
	word32 a3_594 = Mem429[s10_1008 + 100<i32>:int32]
	word32 a4_598 = CONVERT(Mem429[a3_594 + 5<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem429[a3_594 + 4<i32>:byte], byte, word32)
	word32 a5_604 = CONVERT(SLICE(a4_598 << 8<u32> | a4_598 >>u 8<i32>, word16, 0), word16, word32)
	Mem605[a5_604 + 28<i32>:word32] = Mem429[s10_1008 + 48<i32>:int32]
	Mem608[a5_604 + 0x21<32>:word32] = Mem605[s10_1008 + 48<i32>:int32]
	word32 a0_609 = Mem608[s10_1008 + 100<i32>:int32]
	word32 a5_2626 = CONVERT(Mem608[a0_609 + 6<i32>:byte], byte, word32)
	branch a5_2626 == 0<32> l2306A828
l2306A828:
	a5_2626 = CONVERT(Mem608[a0_609 + 7<i32>:byte], byte, word32)
	branch a5_2626 != 0<32> l2306A808
l2306A82E:
	a5_2626 = CONVERT(Mem608[a0_609 + 8<i32>:byte], byte, word32)
	branch a5_2626 != 0<32> l2306A808
l2306A834:
	word32 a1_4357
	word32 a2_4358
	word32 a3_4359
	word32 a4_4360
	branch memcmp(a0_609 + 1<32>, a0_609 + 9<i32>, 3<32>, out a1_4357, out a2_4358, out a3_4359, out a4_4360, out a5_2626) != 0<32> l2306A808
l2306A842:
	a5_624 = 0xC<32>
	branch (CONVERT(Mem608[Mem608[s10_1008:int32] + 116<i32>:uint16], uint16, word32) & 2<32>) != 0<32> l2306A852
l2306A850:
	a5_624 = 4<32>
l2306A852:
	word32 s1_630 = s1_471 + a5_624
	word32 s8_633 = s8_566 - a5_624
	a5_1029 = 37<i32>
	branch s8_633 >u 37<i32> l2306A86E
l2306A86E:
	word32 a2_654
	word32 a7_4334
	word32 a4_4332
	word32 a5_4333
	word32 a1_4330
	word32 a3_4331
	mbedtls_debug_print_buf(ra_1000, 3<32>, s1_630, out a1_4330, out a2_654, out a3_4331, out a4_4332, out a5_4333, out a7_4334)
	word32 a5_4335
	mbedtls_ssl_read_version(s10_1008 + 8<i32>, s10_1008 + 12<i32>, a2_654 >>u 1<i32> & 1<32>, s1_630, out a5_4335)
	Mem675[Mem662[s10_1008 + 48<i32>:int32] + 332<i32>:word32] = Mem662[s10_1008 + 8<i32>:int32]
	word32 a6_677 = Mem675[s10_1008 + 12<i32>:int32]
	Mem678[Mem675[s10_1008 + 48<i32>:int32] + 336<i32>:word32] = a6_677
	word32 a4_679 = Mem678[s10_1008:int32]
	word32 a5_680 = Mem678[s10_1008 + 8<i32>:int32]
	word32 a3_682 = CONVERT(Mem678[a4_679 + 115<i32>:byte], byte, word32)
	branch a5_680 < CONVERT(Mem678[a4_679 + 114<i32>:byte], byte, word32) l2306A8D2
l2306A8CE:
	branch a6_677 >= a3_682 l2306A900
l2306A900:
	word32 a5_684
	word32 a3_683 = CONVERT(Mem678[a4_679 + 112<i32>:byte], byte, word32)
	branch a3_683 >= a5_680 l2306A916
l2306A916:
	a5_684 = CONVERT(Mem678[a4_679 + 113<i32>:byte], byte, word32)
	branch a5_684 < a6_677 l2306A910
l2306A908:
	Mem685[s10_1008 + 8<i32>:word32] = a3_683
	a5_684 = CONVERT(Mem685[a4_679 + 113<i32>:byte], byte, word32)
l2306A910:
	Mem689[s10_1008 + 12<i32>:word32] = a5_684
l2306A91E:
	word32 a5_4365
	word32 a7_4366
	word32 a4_4364
	word32 a2_4362
	word32 a3_4363
	word32 a1_4361
	mbedtls_debug_print_buf(ra_1000, 3<32>, s1_630 + 2<i32>, out a1_4361, out a2_4362, out a3_4363, out a4_4364, out a5_4365, out a7_4366)
	word32 a2_4368
	word32 a3_4369
	word32 a7_4373
	word32 a6_4372
	word32 a5_4371
	word32 a4_4370
	word32 a1_4367
	memcpy(Mem717[s10_1008 + 48<i32>:int32] + 216<i32>, s1_630 + 2<i32>, 32<i32>, out a1_4367, out a2_4368, out a3_4369, out a4_4370, out a5_4371, out a6_4372, out a7_4373)
	word32 s3_735 = CONVERT(Mem717[s1_630 + 34<i32>:byte], byte, word32)
	a5_1029 = 32<i32>
	branch s3_735 >u 32<i32> l2306A966
l2306A95E:
	branch s8_633 >=u s3_735 + 36<i32> l2306A974
l2306A974:
	word32 a3_4376
	word32 a7_4379
	word32 a4_4377
	word32 a5_4378
	word32 a1_4374
	word32 a2_4375
	mbedtls_debug_print_buf(ra_1000, 3<32>, s1_630 + 35<i32>, out a1_4374, out a2_4375, out a3_4376, out a4_4377, out a5_4378, out a7_4379)
	Mem763[Mem717[s10_1008 + 44<i32>:int32] + 8<i32>:word32] = s3_735
	word32 a2_769
	word32 a5_4385
	word32 t1_4380
	word32 a0_4381
	word32 a1_4382
	word32 a3_4383
	word32 a4_4384
	ra_1000 = memset(ra_1000, Mem763[s10_1008 + 44<i32>:int32] + 0xC<32>, 0<32>, 32<i32>, out t1_4380, out a0_4381, out a1_4382, out a2_769, out a3_4383, out a4_4384, out a5_4385)
	word32 a7_4392
	word32 a3_4388
	word32 a4_4389
	word32 a5_4390
	word32 a6_4391
	word32 a1_4386
	word32 a2_4387
	memcpy(Mem763[a2_769 + 8<i32>:word32] + 0xC<32>, s1_630 + 35<i32>, a2_769, out a1_4386, out a2_4387, out a3_4388, out a4_4389, out a5_4390, out a6_4391, out a7_4392)
	word32 s3_765 = s3_735 + 35<i32>
	branch (CONVERT(Mem763[Mem763[s10_1008:int32] + 116<i32>:uint16], uint16, word32) & 2<32>) == 0<32> l2306AA32
l2306A9CA:
	a5_1029 = s1_630 + (s3_735 + 35<i32>)
	word32 s2_797 = CONVERT(Mem763[a5_1029:byte], byte, word32)
	branch s8_633 >=u ((s3_735 + 35<i32>) + s2_797) + 3<32> l2306A9E8
l2306A9E8:
	word32 a4_4396
	word32 a7_4397
	word32 a1_4393
	word32 a2_4394
	word32 a3_4395
	mbedtls_debug_print_buf(ra_1000, 3<32>, s1_630 + (s3_735 + 36<i32>), out a1_4393, out a2_4394, out a3_4395, out a4_4396, out a5_1029, out a7_4397)
	branch s2_797 == 0<32> l2306AA18
l2306AA18:
	word32 s5_835
	word32 a1_4398
	word32 a5_4402
	word32 s4_4404
	word32 s6_4405
	word32 t4_4409
	word32 s11_4408
	word32 s9_4407
	word32 s7_4406
	word32 a7_4403
	word32 a2_4399
	word32 a3_4400
	word32 a4_4401
	mbedtls_debug_print_msg(ra_1000, s10_1008, 2<32>, 0x2308D1B8<32>, a5_1029, out a1_4398, out a2_4399, out a3_4400, out a4_4401, out a5_4402, out a7_4403, out s4_4404, out s5_835, out s6_4405, out s7_4406, out s8_633, out s9_4407, out s10_1008, out s11_4408, out t4_4409)
	s3_765 = s5_835
l2306AA32:
	word32 a5_847 = s1_630 + s3_765
	word32 s6_1089 = CONVERT(Mem763[a5_847:byte], byte, word32) << 8<i32> | CONVERT(Mem763[a5_847 + 1<i32>:byte], byte, word32)
	a5_1029 = 1<32>
	branch s6_1089 <= 1<32> l2306AA5E
l2306AA4A:
	word32 s9_854 = s3_765 + s6_1089
	branch s8_633 <u s9_854 + 3<i32> l2306AA5E
l2306AA56:
	word32 s5_1741 = s6_1089 & 1<i32>
	branch (s6_1089 & 1<i32>) == 0<32> l2306AA6C
l2306AA6C:
	word32 s3_1546 = s3_765 + 2<32> + s1_630
	word32 a7_4415
	word32 a1_4410
	word32 a5_4414
	word32 a4_4413
	word32 a3_4412
	word32 a2_4411
	mbedtls_debug_print_buf(ra_1000, 3<32>, s3_1546, out a1_4410, out a2_4411, out a3_4412, out a4_4413, out a5_4414, out a7_4415)
	word32 a6_884 = CONVERT(Mem763[s1_630 + (s9_854 + 2<32>):byte], byte, word32)
	a5_1029 = 0xF<32>
	word32 s2_1560 = 0x2308A000<32>
	branch a6_884 >u 0xFFFFFFF0<32> l2306AAAE
l2306AAA4:
	word32 s9_888 = s9_854 + 2<32> + a6_884
	branch s8_633 >=u s9_888 + 1<i32> l2306AAC0
l2306AAC0:
	Mem904[sp_1097 + 8<i32>:word32] = s9_888 + 1<i32>
	word32 a7_911
	word32 a2_4417
	word32 a3_4418
	word32 a4_4419
	word32 a5_4420
	word32 a1_4416
	mbedtls_debug_print_buf(ra_1000, 3<32>, s1_630 + (s9_854 + 3<i32>), out a1_4416, out a2_4417, out a3_4418, out a4_4419, out a5_4420, out a7_911)
	Mem918[Mem904[s10_1008 + 44<i32>:int32] + 4<i32>:word32] = 0<32>
	branch (CONVERT(Mem918[Mem918[s10_1008:int32] + 116<i32>:uint16], uint16, word32) & 2<32>) == 0<32> l2306AAFC
l2306AAF4:
	Mem923[Mem918[s10_1008 + 44<i32>:int32] + 4<i32>:word32] = 0<32>
l2306AAFC:
	a5_1029 = s9_888 + 3<i32>
	branch a7_911 >=u s8_633 l2306AB4A
l2306AB04:
	branch s8_633 >=u s9_888 + 3<i32> l2306AB16
l2306AB16:
	s5_1741 = CONVERT(Mem930[s1_630 + a7_911:byte], byte, word32) << 8<i32> | CONVERT(Mem930[(s9_888 + s1_630) + 2<i32>:byte], byte, word32)
	branch s5_1741 <=u 0xFFFFFFFD<32> l2306AB3C
l2306AB34:
	branch s8_633 == s5_1741 + (s9_888 + 3<i32>) l2306AB4A
l2306AB4A:
	word32 s1_1192 = s1_630 + (s9_888 + 3<i32>)
	word32 a4_4437
	word32 a5_4438
	word32 a7_4439
	word32 a3_4436
	word32 a2_4435
	word32 a1_4434
	mbedtls_debug_print_buf(ra_1000, 3<32>, s1_1192, out a1_4434, out a2_4435, out a3_4436, out a4_4437, out a5_4438, out a7_4439)
l2306AB68:
	word32 a4_1363
	word32 a5_1359
	branch s5_1741 != 0<32> l2306ABE4
l2306ABE4:
	word32 a5_976 = CONVERT(Mem971[s1_1192 + 1<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem971[s1_1192:byte], byte, word32)
	word32 a4_984 = CONVERT(Mem971[s1_1192 + 3<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem971[s1_1192 + 2<i32>:byte], byte, word32)
	a5_1029 = CONVERT(SLICE(a5_976 >>u 8<i32> | a5_976 << 8<u32>, word16, 0), word16, word32)
	branch s5_1741 >=u CONVERT(SLICE(a4_984 << 8<u32> | a4_984 >>u 8<i32>, word16, 0), word16, word32) + 4<i32> l2306AC32
l2306AC32:
	word32 s8_1091
	word32 s4_1087
	word32 a4_1062
	word32 a4_1066
	word32 a5_1065
	branch a5_1029 == 0xD<32> l2306AE24
l2306AE24:
	word32 s4_1010
	word32 s8_1014
	word32 s11_4526
	word32 t4_4527
	word32 s7_4524
	word32 s9_4525
	word32 a5_4520
	word32 a7_4521
	word32 s5_4522
	word32 s6_4523
	word32 a1_4516
	word32 a2_4517
	word32 a3_4518
	word32 a4_4519
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, 0x2308D270<32>, 0x2308D000<32>, out a1_4516, out a2_4517, out a3_4518, out a4_4519, out a5_4520, out a7_4521, out s4_1010, out s5_4522, out s6_4523, out s7_4524, out s8_1014, out s9_4525, out s10_1008, out s11_4526, out t4_4527)
	word32 a4_1024 = CONVERT(Mem971[s1_1192 + 5<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem971[s1_1192 + 4<i32>:byte], byte, word32)
	word32 a3_1022 = s1_1192 + s8_1014
	a5_1029 = CONVERT(SLICE(a4_1024 << 8<u32> | a4_1024 >>u 8<i32>, word16, 0), word16, word32)
	branch s4_1010 != a5_1029 + 2<i32> l2306AE64
l2306AE60:
	a5_1029 = a5_1029 & 1<32>
	branch (a5_1029 & 1<32>) == 0<32> l2306AE72
l2306AE72:
	word32 s11_1033 = Mem971[Mem971[s10_1008:int32] + 88<i32>:int32]
l2306AE7A:
	branch Mem1035[s11_1033:int32] != 0<32> l2306AE9A
l2306AE9A:
	word32 s9_1038 = s1_1192 + 6<i32>
l2306AE9E:
	branch s9_1038 <u a3_1022 l2306AEA6
l2306AEA6:
	word32 a5_1043 = Mem1042[s11_1033:int32]
	word32 a0_1044 = CONVERT(Mem1042[s9_1038:byte], byte, word32)
	Mem1046[sp_1097 + 136<i32>:word32] = a3_1022
	Mem1047[sp_1097 + 8<i32>:word32] = a5_1043
	word32 a5_1050
	branch a5_1050 != mbedtls_ssl_md_alg_from_hash(a0_1044, out a5_1050) l2306AEE8
l2306AEE8:
	s9_1038 = s9_1038 + 2<32>
l2306AEBE:
	Mem1059[CONVERT(Mem1047[s9_1038:byte], byte, word32):word32] = Mem1047[s10_1008 + 48<i32>:int32]
	a4_1062 = 0x2308D298<32>
	a5_1029 = Mem1059[Mem1059[s10_1008 + 48<i32>:int32]:word32]
l2306AEA2:
	s11_1033 = s11_1033 + 4<32>
l2306AE80:
	a5_1065 = 0x2308D000<32>
	a4_1066 = 0x2308D2C8<32>
l2306AE64:
l2306AC38:
	word32 a2_1451
	word32 a5_1404
	branch a5_1029 >u 0xD<32> l2306AC52
l2306AC52:
	branch a5_1029 == 35<i32> l2306AF2E
l2306AF2E:
	word32 t4_4654
	word32 s9_4652
	word32 s11_4653
	word32 a4_4648
	word32 a5_4649
	word32 a7_4650
	word32 s7_4651
	word32 a1_4645
	word32 a2_4646
	word32 a3_4647
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, 0x2308D310<32>, 0x2308D000<32>, out a1_4645, out a2_4646, out a3_4647, out a4_4648, out a5_4649, out a7_4650, out s4_1087, out s5, out s6_1089, out s7_4651, out s8_1091, out s9_4652, out s10_1008, out s11_4653, out t4_4654)
	word32 a4_1103
	ra_1000 = mbedtls_ssl_session_init(ra_1000, sp_1097 + 92<i32>, out a4_1103)
	word32 a5_1109 = Mem971[a4_1103 + 64<i32>:word32]
	branch a4_1103 == 0<32> l2306AD3A
l2306AF56:
	branch Mem971[a5_1109 + 60<i32>:word32] == 0<32> l2306AD3A
l2306AF5C:
	Mem1114[Mem971[s10_1008 + 48<i32>:int32] + 344<i32>:word32] = 1<32>
	word32 a4_1126
	word32 s11_4708
	word32 t4_4709
	word32 a7_4705
	word32 s7_4706
	word32 s9_4707
	word32 a1_4701
	word32 a2_4702
	word32 a3_4703
	word32 a5_4704
	word32 a0_1121 = mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, 0x2308CF24<32>, s4_1087, out a1_4701, out a2_4702, out a3_4703, out a4_1126, out a5_4704, out a7_4705, out s4_1087, out s5, out s6_1089, out s7_4706, out s8_1091, out s9_4707, out s10_1008, out s11_4708, out t4_4709)
	branch s4_1087 == 0<32> l2306AD3A
l2306AF84:
	word32 a0_1146
	word32 a5_1147
	word32 a1_1148
	word32 a2_1149
	call a4_1126 (retsize: 0;)
		uses: a0:a0_1121,a1:sp_1097 + 92<i32>,a4:a4_1126,a5:Mem1114[a0_1121 + 68<i32>:word32],ra:ra_1105
		defs: a0:a0_1146,a1:a1_1148,a2:a2_1149,a5:a5_1147,s10:s10_1153
	branch a0_1146 == 0<32> l2306AFEC
l2306AFEC:
	word32 a1_1167 = Mem1114[a2_1149 + 8<i32>:word32]
	Mem1169[sp_1097 + 176<i32>:word32] = a2_1149
	word32 a5_1171
	word32 a1_1173
	word32 a2_1174
	word32 a6_4712
	word32 a7_4713
	word32 a3_4710
	word32 a4_4711
	memcpy(sp_1097 + 104<i32>, a1_1167 + 0xC<32>, a2_1149, out a1_1173, out a2_1174, out a3_4710, out a4_4711, out a5_1171, out a6_4712, out a7_4713)
	word32 a5_4718
	word32 a3_4716
	word32 a4_4717
	word32 a0_4714
	word32 a2_4715
	s1_1192 = mbedtls_ssl_session_free(ra_1000, Mem1169[s10_1008 + 44<i32>:int32], a1_1173, a2_1174, a5_1171, mstatus, Mem1169[sp_1097 + 296<i32>:word32], Mem1169[sp_1097 + 328<i32>:word32], Mem1169[sp_1097 + 360<i32>:word32], Mem1169[sp_1097 + 392<i32>:word32], out a0_4714, out a2_4715, out a3_4716, out a4_4717, out a5_4718)
	word32 a4_4722
	word32 a6_4724
	word32 a7_4725
	word32 a5_4723
	word32 a1_4719
	word32 a2_4720
	word32 a3_4721
	memcpy(Mem1169[s10_1008 + 44<i32>:int32], sp_1097 + 92<i32>, 116<i32>, out a1_4719, out a2_4720, out a3_4721, out a4_4722, out a5_4723, out a6_4724, out a7_4725)
	word32 a5_1212 = sp_1097 + 92<i32>
l2306B014:
	Mem1214[a5_1212:byte] = 0<8>
	a5_1212 = a5_1212 + 1<32>
	branch a5_1212 != sp_1097 + 208<i32> l2306B014
l2306B020:
	word32 a1_4748
	word32 a4_4751
	word32 s7_4754
	word32 s9_4755
	word32 s11_4756
	word32 t4_4757
	word32 a7_4753
	word32 a5_4752
	word32 a2_4749
	word32 a3_4750
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, 0x2308D378<32>, 0x2308D000<32>, out a1_4748, out a2_4749, out a3_4750, out a4_4751, out a5_4752, out a7_4753, out s4_1087, out s5, out s6_1089, out s7_4754, out s8_1091, out s9_4755, out s10_1008, out s11_4756, out t4_4757)
	Mem1248[Mem1214[s10_1008 + 48<i32>:int32] + 328<i32>:word32] = 1<32>
	Mem1250[Mem1248[s10_1008 + 48<i32>:int32] + 344<i32>:word32] = 0<32>
l2306AF98:
	Mem1251[sp_1097 + 8<i32>:word32] = a0_1146
	word32 a4_4729
	word32 a3_4728
	word32 a2_4727
	word32 a0_4726
	s1_1192 = mbedtls_ssl_session_free(ra_1000, sp_1097 + 92<i32>, a1_1148, a2_1149, a5_1147, mstatus, Mem1251[sp_1097 + 296<i32>:word32], Mem1251[sp_1097 + 328<i32>:word32], Mem1251[sp_1097 + 360<i32>:word32], Mem1251[sp_1097 + 392<i32>:word32], out a0_4726, out a2_4727, out a3_4728, out a4_4729, out a5_1065)
	branch a5_1065 != 0xF8FFFE80<32> l2306AFBA
l2306AFBA:
	branch a5_1065 != 0xF9000280<32> l2306AFD2
l2306AFD2:
	word32 a2_4741
	word32 a1_4740
	word32 a3_4742
	word32 s9_4746
	word32 s11_4747
	word32 a4_4743
	word32 a5_4744
	word32 s7_4745
	mbedtls_debug_print_ret(ra_1000, 1<32>, 483<i32>, a5_1065, out a1_4740, out a2_4741, out a3_4742, out a4_4743, out a5_4744, out s4_1087, out s5, out s6_1089, out s7_4745, out s8_1091, out s9_4746, out s10_1008, out s11_4747)
l2306AFC4:
	a4_1066 = 0x2308D348<32>
l2306AFAC:
	a4_1066 = 0x2308D330<32>
l2306AE8C:
	word32 t4_4739
	word32 s11_4738
	word32 s9_4737
	word32 a7_4735
	word32 s7_4736
	word32 a1_4730
	word32 a5_4734
	word32 a4_4733
	word32 a3_4732
	word32 a2_4731
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, a4_1066, a5_1065, out a1_4730, out a2_4731, out a3_4732, out a4_4733, out a5_4734, out a7_4735, out s4_1087, out s5, out s6_1089, out s7_4736, out s8_1091, out s9_4737, out s10_1008, out s11_4738, out t4_4739)
l2306AC5A:
	branch a5_1029 == 0xFFFFF01<32> l2306ADD2
l2306ADD2:
	word32 a4_4658
	word32 a7_4660
	word32 s7_4661
	word32 t4_4664
	word32 s11_4663
	word32 s9_4662
	word32 a5_4659
	word32 a1_4655
	word32 a2_4656
	word32 a3_4657
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, 0x2308CB08<32>, a5_1029, out a1_4655, out a2_4656, out a3_4657, out a4_4658, out a5_4659, out a7_4660, out s4_1087, out s5, out s6_1089, out s7_4661, out s8_1091, out s9_4662, out s10_1008, out s11_4663, out t4_4664)
	a5_1359 = 1<32>
	branch s4_1087 != 1<32> l2306ADF6
l2306ADF0:
	a5_1359 = CONVERT(Mem971[s1_1192 + 4<i32>:byte], byte, word32)
	branch a5_1359 == 0<32> l2306AE1E
l2306AE1E:
	Mem1361[s10_1008 + 188<i32>:word32] = s4_1087
l2306ADF6:
	a4_1363 = 0x2308CB28<32>
l2306AC64:
	branch a5_1029 != 0x10<32> l2306AC44
l2306AC6A:
	word32 t4_4673
	word32 s9_4671
	word32 s11_4672
	word32 a2_4666
	word32 s7_4670
	word32 a7_4669
	word32 a5_4668
	word32 a3_4667
	word32 a1_4665
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, 0x2308CB90<32>, a5_1029, out a1_4665, out a2_4666, out a3_4667, out a4_133, out a5_4668, out a7_4669, out s4_1087, out s5, out s6_1089, out s7_4670, out s8_1091, out s9_4671, out s10_1008, out s11_4672, out t4_4673)
	word32 s11_1392 = Mem971[Mem971[s10_1008:int32] + 96<i32>:int32]
	branch s11_1392 == 0<32> l2306AD3A
l2306AC8E:
	branch s4_1087 <=u 3<32> l2306A5A2
l2306AC94:
	word32 a5_1397 = CONVERT(Mem971[s1_1192 + 5<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem971[s1_1192 + 4<i32>:byte], byte, word32)
	a4_133 = s4_1087 + -2<i32>
	branch CONVERT(SLICE(a5_1397 >>u 8<i32> | a5_1397 << 8<u32>, word16, 0), word16, word32) != s4_1087 + -2<i32> l2306A5A2
l2306ACB4:
	a5_1404 = s1_1192 + 6<i32>
	Mem1405[sp_1097 + 8<i32>:word32] = a5_1404
	word32 s9_1406 = s1_1192 + s8_1091
l2306ACBE:
	word32 a0_1409 = Mem1408[s11_1392:int32]
	branch a0_1409 != 0<32> l2306B04C
l2306B04C:
	word32 a1_4674
	word32 a2_4675
	word32 a3_4676
	word32 a4_4677
	a4_133 = strlen(a0_1409, out a1_4674, out a2_4675, out a3_4676, out a4_4677, out a5_1404)
l2306B054:
	branch s9_1406 != a5_1404 l2306B05C
l2306B05C:
	branch s9_1406 <u a5_1404 l2306A5A2
l2306B060:
	word32 a6_1421 = a5_1404 + 1<i32>
	word32 a5_1423 = CONVERT(Mem1422[a5_1404:byte], byte, word32)
	branch a5_1423 == 0<32> l2306A5A2
l2306B06C:
	branch a4_133 != a5_1423 l2306B094
l2306B070:
	word32 a1_1426 = Mem1422[s11_1392:int32]
	Mem1430[sp_1097 + 140<i32>:word32] = a5_1423
	Mem1431[sp_1097 + 12<i32>:word32] = a4_133
	Mem1432[sp_1097 + 136<i32>:word32] = a6_1421
	word32 a2_4688
	word32 a3_4689
	word32 a1_4687
	word32 a0_1433 = memcmp(a6_1421, a1_1426, a4_133, out a1_4687, out a2_4688, out a3_4689, out a4_133, out a5_1423)
	s4_1087 = Mem1432[sp_1097 + 8<i32>:word32]
	s8_1091 = Mem1432[sp_1097 + 196<i32>:word32]
	branch a0_1433 != 0<32> l2306B094
l2306B094:
	a5_1404 = a5_1423 + a6_1421
l2306B08A:
	Mem1449[s10_1008 + 184<i32>:word32] = Mem1432[s11_1392:int32]
l2306B058:
	s11_1392 = s11_1392 + 4<32>
l2306ACC6:
	a2_1451 = 120<i32>
l2306AC3C:
	branch a5_1029 == 0<32> l2306ACCC
l2306ACCC:
	word32 a3_4530
	word32 a5_4532
	word32 a7_4533
	word32 t4_4537
	word32 s11_4536
	word32 s9_4535
	word32 s7_4534
	word32 a4_4531
	word32 a1_4528
	word32 a2_4529
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, 0x2308D228<32>, a5_1029, out a1_4528, out a2_4529, out a3_4530, out a4_4531, out a5_4532, out a7_4533, out s4_1087, out s5, out s6_1089, out s7_4534, out s8_1091, out s9_4535, out s10_1008, out s11_4536, out t4_4537)
	word32 a5_1478 = Mem971[Mem971[s10_1008:int32] + 44<i32>:word32]
	branch a5_1478 == 0<32> l2306AD3A
l2306ACEC:
	word32 s11_1493
	word32 s7_1497
	word32 s9_1499
	word32 t4_4644
	word32 a4_4641
	word32 a5_4642
	word32 a7_4643
	word32 a1_4638
	word32 a2_4639
	word32 a3_4640
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, 0x2308D244<32>, a5_1478, out a1_4638, out a2_4639, out a3_4640, out a4_4641, out a5_4642, out a7_4643, out s4_1087, out s5, out s6_1089, out s7_1497, out s8_1091, out s9_1499, out s10_1008, out s11_1493, out t4_4644)
	word32 a4_1507 = CONVERT(Mem971[s1_1192 + 5<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem971[s1_1192 + 4<i32>:byte], byte, word32)
	a5_1029 = CONVERT(SLICE(a4_1507 << 8<u32> | a4_1507 >>u 8<i32>, word16, 0), word16, word32)
	branch s4_1087 == a5_1029 + 2<i32> l2306AD32
l2306AD32:
	word32 a2_1514 = s1_1192 + 6<i32>
l2306AD38:
	branch a5_1029 != 0<32> l2306AD5A
l2306AD5A:
	word32 a4_1522 = CONVERT(Mem971[a2_1514 + 2<i32>:byte], byte, word32) << 8<i32> | CONVERT(Mem971[a2_1514 + 1<i32>:byte], byte, word32)
	word32 a3_1527 = CONVERT(SLICE(a4_1522 << 8<u32> | a4_1522 >>u 8<i32>, word16, 0), word16, word32)
	branch a5_1029 >=u a3_1527 + 3<i32> l2306AD88
l2306AD88:
	word32 a0_1529 = CONVERT(Mem971[a2_1514:byte], byte, word32)
	branch a0_1529 != 0<32> l2306ADC8
l2306ADC8:
	a5_1029 = a5_1029 + (0xFFFFFFFD<32> - a3_1527)
	a2_1514 = a2_1514 + (a3_1527 + 3<i32>)
l2306AD8E:
	word32 a0_1570
	word32 a3_1573
	word32 a6_1579
	word32 a7_1580
	word32 t3_1581
	word32 t0_1582
	word32 t1_1583
	word32 t4_1584
	word32 tp_1585
	word32 t5_1587
	call a3_1527 + 3<i32> (retsize: 0;)
		uses: a1:s10_1492,a2:a2_1517 + 3<32>,a3:a3_1573,a5:Mem971[a0_1529 + 48<i32>:word32],a6:a6_1579,a7:a7_1580,mstatus:mstatus_1184,ra:ra_1000,s0:s0_1542,s1:s1_970,s10:s10_1492,s11:s11_1493,s2:s2_995,s3:s3_1546,s4:s4_1494,s5:s5_1495,s6:s6_1496,s7:s7_1497,s8:s8_1498,s9:s9_1499,Stack +0018:dwArg18,Stack +00C4:dwArgC4,t0:t0_1582,t1:t1_1583,t3:t3_1581,t4:t4_1584,t5:t5_1587,tp:tp_1585
		defs: a0:a0_1570,a3:a3_1573,a6:a6_1579,a7:a7_1580,mstatus:mstatus_1586,ra:ra_1557,s0:s0_1558,s1:s1_1559,s10:s10_1568,s2:s2_1560,s3:s3_1561,s4:s4_1562,s5:s5_1563,s6:s6_1564,s8:s8_1566,sp:sp_1556,t0:t0_1582,t1:t1_1583,t3:t3_1581,t4:t4_1584,t5:t5_1587,tp:tp_1585
	branch a0_1570 == 0<32> l2306AD3A
l2306ADA0:
	word32 s11_4700
	word32 s6_4696
	word32 s9_4699
	word32 s7_4697
	word32 s8_4698
	word32 a4_4693
	word32 s4_4694
	word32 s5_4695
	word32 a3_4692
	word32 a2_4691
	word32 a1_4690
	mbedtls_debug_print_ret(ra_1000, 1<32>, 123<i32>, a0_1570, out a1_4690, out a2_4691, out a3_4692, out a4_4693, out a5_1404, out s4_4694, out s5_4695, out s6_4696, out s7_4697, out s8_4698, out s9_4699, out s10_1008, out s11_4700)
	a2_1451 = 112<i32>
l2306ADBC:
	word32 s9_4685
	word32 s10_4686
	word32 s8_4684
	word32 s0_4678
	word32 s2_4682
	word32 s3_4683
	word32 s1_4679
	word32 a0_4680
	word32 a5_4681
	mbedtls_ssl_send_alert_message(ra_1000, s10_1008, a2_1451, a5_1404, mstatus, out s0_4678, out s1_4679, out a0_4680, out a4_133, out a5_4681, out s2_4682, out s3_4683, out s5, out s8_4684, out s9_4685, out s10_4686, out mstatus)
l2306AD7A:
l2306AD24:
l2306AC3E:
	branch a5_1029 == 1<32> l2306AEEC
l2306AEEC:
	Mem1673[sp_1097 + 8<i32>:word32] = a5_1029
	word32 s11_4545
	word32 t4_4546
	word32 s7_4543
	word32 s9_4544
	word32 a1_4538
	word32 a7_4542
	word32 a4_4541
	word32 a3_4540
	word32 a2_4539
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, 0x2308D2EC<32>, a5_1029, out a1_4538, out a2_4539, out a3_4540, out a4_4541, out a5_1029, out a7_4542, out s4_1087, out s5, out s6_1089, out s7_4543, out s8_1091, out s9_4544, out s10_1008, out s11_4545, out t4_4546)
	branch s4_1087 != a5_1029 l2306AF16
l2306AF0C:
	a5_1029 = CONVERT(Mem1673[s1_1192 + 4<i32>:byte], byte, word32)
	branch a5_1029 <=u 4<32> l2306AF24
l2306AF24:
	Mem1697[Mem1673[s10_1008 + 44<i32>:int32] + 112<i32>:byte] = SLICE(a5_1029, byte, 0)
l2306AF16:
l2306AC44:
	a4_1062 = 0x2308CBA8<32>
l2306AEDA:
	word32 a1_4547
	word32 a2_4548
	word32 a3_4549
	word32 t4_4556
	word32 a4_4550
	word32 s9_4554
	word32 s11_4555
	word32 a5_4551
	word32 a7_4552
	word32 s7_4553
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, a4_1062, a5_1029, out a1_4547, out a2_4548, out a3_4549, out a4_4550, out a5_4551, out a7_4552, out s4_1087, out s5, out s6_1089, out s7_4553, out s8_1091, out s9_4554, out s10_1008, out s11_4555, out t4_4556)
l2306AD3A:
	word32 s4_1740 = s5 - s4_1087
	s5_1741 = s4_1740 + -4<i32>
	a5_1029 = 2<32>
	s1_1192 = s1_1192 + s8_1091
	branch s4_1740 >u 0xFFFFFFF9<32> l2306AB68
l2306AD4C:
l2306AC24:
l2306AB6C:
	word32 a5_1761 = s3_1546
l2306AB72:
	branch CONVERT(Mem971[a5_1761:byte], byte, word32) != 0<32> l2306B098
l2306AB7A:
	branch CONVERT(Mem971[a5_1761 + 1<i32>:byte], byte, word32) != 255<i32> l2306B098
l2306B098:
	a5_1761 = a5_1761 + 2<32>
	branch a5_1761 - s3_1546 <u s6_1089 l2306AB72
l2306B0A2:
	word32 a5_1780 = Mem971[s10_1008:int32]
	branch Mem971[s10_1008 + 188<i32>:int32] == 1<32> l2306ABA0
l2306B0B0:
	word32 a5_1781 = CONVERT(Mem971[a5_1780 + 116<i32>:uint16], uint16, word32)
	a5_1359 = a5_1781 & 48<i32>
	branch (a5_1781 & 48<i32>) != 32<i32> l2306ABA0
l2306B0C0:
	a4_1363 = 0x2308CBD0<32>
l2306AE02:
	word32 a5_1804
	word32 s10_1810
	word32 s9_4513
	word32 s11_4514
	word32 t4_4515
	word32 s4_4508
	word32 s5_4509
	word32 s6_4510
	word32 s7_4511
	word32 s8_4512
	word32 a2_4504
	word32 a7_4507
	word32 a3_4505
	word32 a4_4506
	word32 a1_4503
	mbedtls_debug_print_msg(ra_1000, s10_1008, 1<32>, a4_1363, a5_1359, out a1_4503, out a2_4504, out a3_4505, out a4_4506, out a5_1804, out a7_4507, out s4_4508, out s5_4509, out s6_4510, out s7_4511, out s8_4512, out s9_4513, out s10_1810, out s11_4514, out t4_4515)
	word32 a0_1827
	mbedtls_ssl_send_fatal_handshake_failure(ra_1000, s10_1810, a5_1804, mstatus, out a0_1827, out a4_133, out s5, out mstatus)
	s0_105 = a0_1827
	branch a0_1827 != 0<32> l2306A4CE
l2306AE1A:
l2306AB82:
	word32 t4_4452
	word32 s8_4449
	word32 s9_4450
	word32 s11_4451
	word32 a5_4444
	word32 a7_4445
	word32 s4_4446
	word32 s5_4447
	word32 s7_4448
	word32 a1_4440
	word32 a4_4443
	word32 a2_4441
	word32 a3_4442
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, 0x2308D3A4<32>, a5_1761, out a1_4440, out a2_4441, out a3_4442, out a4_4443, out a5_4444, out a7_4445, out s4_4446, out s5_4447, out s6_1089, out s7_4448, out s8_4449, out s9_4450, out s10_1008, out s11_4451, out t4_4452)
	Mem1884[s10_1008 + 188<i32>:word32] = 1<32>
l2306ABA0:
	word32 s5_1891 = Mem1886[Mem1886[s10_1008:int32] + (Mem1886[s10_1008 + 12<i32>:int32] << 2<i32>):int32]
	word32 a5_1892 = 0<32>
l2306ABB2:
	branch Mem1886[s5_1891:int32] != 0<32> l2306B0CE
l2306B0CE:
	word32 s4_1897 = s3_1546
l2306B0D0:
	word32 a0_1900 = Mem1886[s5_1891:int32]
	branch CONVERT(Mem1886[s4_1897:byte], byte, word32) != (a0_1900 >> 8<u32> & 255<i32>) l2306B15A
l2306B0E4:
	branch CONVERT(Mem1886[s4_1897 + 1<i32>:byte], byte, word32) != (a0_1900 & 255<i32>) l2306B15A
l2306B0F0:
	word32 a5_1908
	branch mbedtls_ssl_ciphersuite_from_id(a0_1900, a0_1900 & 255<i32>, out a5_1908) != 0<32> l2306B116
l2306B116:
	word32 a4_2285
	word32 a5_2083
	word32 a4_1925
	word32 a1_4481
	word32 a2_4482
	word32 a3_4483
	word32 a5_4484
	word32 a7_4485
	word32 s8_4486
	word32 s9_4487
	word32 s11_4488
	word32 t4_4489
	word32 s7_1932
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, 0x2308D3CC<32>, a5_1908, out a1_4481, out a2_4482, out a3_4483, out a4_1925, out a5_4484, out a7_4485, out s4_1897, out s5_1891, out s6_1089, out s7_1932, out s8_4486, out s9_4487, out s10_1008, out s11_4488, out t4_4489)
	word32 a5_1939 = Mem1886[s10_1008 + 12<i32>:int32]
	branch a5_1939 < a4_1925 l2306B140
l2306B13A:
	word32 s1_1941 = Mem1886[a4_1925 + 24<i32>:word32]
	branch a4_1925 >= a5_1939 l2306B168
l2306B168:
	branch (CONVERT(Mem1886[Mem1886[s10_1008:int32] + 116<i32>:uint16], uint16, word32) & 2<32>) == 0<32> l2306B17C
l2306B174:
	branch (CONVERT(Mem1886[s1_1941 + 28<i32>:byte], byte, word32) & 4<32>) != 0<32> l2306B158
l2306B17C:
	word32 a0_1949 = mbedtls_ssl_get_ciphersuite_sig_pk_alg(s1_1941)
	word32 a5_1954 = Mem1886[s10_1008 + 48<i32>:int32]
	branch Mem1886[a5_1954 + 16<i32>:int32] != 0<32> l2306B198
l2306B190:
	a5_1954 = Mem1886[s10_1008:int32]
l2306B198:
	branch a0_1949 == 0<32> l2306B256
l2306B19C:
	word32 a5_1973
	word32 s10_1979
	word32 t4_4580
	word32 s7_4577
	word32 s8_4578
	word32 s9_4579
	word32 a4_4572
	word32 a7_4573
	word32 s4_4574
	word32 s5_4575
	word32 s6_4576
	word32 a3_4571
	word32 a1_4569
	word32 a2_4570
	word32 s11_1980
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, 0x2308D404<32>, a5_1954, out a1_4569, out a2_4570, out a3_4571, out a4_4572, out a5_1973, out a7_4573, out s4_4574, out s5_4575, out s6_4576, out s7_4577, out s8_4578, out s9_4579, out s10_1979, out s11_1980, out t4_4580)
	branch s11_1980 != 0<32> l2306B1E0
l2306B1E0:
	word32 a4_2063
	word32 s1_2008
	word32 s9_2010
	word32 a5_2014
	word32 a3_4584
	word32 s4_4585
	word32 s7_4586
	word32 a0_4581
	word32 a1_4582
	word32 a2_4583
	word32 s11_2022
	ra_1000 = mbedtls_debug_print_crt(ra_1000, 3<32>, 0x2308D444<32>, Mem1886[s11_1980:int32], out s0_105, out s1_2008, out a0_4581, out a1_4582, out a2_4583, out a3_4584, out a5_2014, out s3_1546, out s4_4585, out s7_4586, out s9_2010, out s10_1008, out s11_2022)
	word32 a5_4587
	branch mbedtls_pk_can_do(Mem1886[s11_2022 + 4<i32>:int32], s9_2010, a5_2014, out a5_4587) != 0<32> l2306B2B8
l2306B2B8:
	word32 a0_2042
	word32 s8_2054
	word32 s1_4611
	word32 a5_4612
	word32 s4_4613
	s0_105 = mbedtls_ssl_check_cert_usage(Mem1886[s11_2022:int32], s1_2008, 1<32>, out s1_4611, out a0_2042, out a5_4612, out s3_1546, out s4_4613, out s8_2054)
	branch a0_2042 == 0<32> l2306B2D6
l2306B2D6:
	branch Mem1886[s10_1008 + 12<i32>:int32] > 2<32> l2306B22E
l2306B2E0:
	branch CONVERT(Mem1886[Mem1886[s11_2022:int32] + 296<i32>:byte], byte, word32) == 4<32> l2306B22E
l2306B2EE:
	branch s8_2054 != 0<32> l2306B2F4
l2306B2F2:
l2306B2F4:
	a4_2063 = 0x2308D4C8<32>
l2306B2C8:
	a4_2063 = 0x2308D490<32>
l2306B208:
	a4_2063 = 0x2308D470<32>
l2306B214:
	word32 s11_2090
	word32 s8_2095
	word32 s6_4621
	word32 s7_4622
	word32 t4_4624
	word32 s9_4623
	word32 s5_4620
	word32 a1_4614
	word32 a7_4618
	word32 s4_4619
	word32 a2_4615
	word32 a3_4616
	word32 a4_4617
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, a4_2063, 0x2308D000<32>, out a1_4614, out a2_4615, out a3_4616, out a4_4617, out a5_2083, out a7_4618, out s4_4619, out s5_4620, out s6_4621, out s7_4622, out s8_2095, out s9_4623, out s10_1008, out s11_2090, out t4_4624)
	s11_1980 = Mem1886[s11_2090 + 8<i32>:int32]
	branch s11_1980 != 0<32> l2306B1E0
l2306B228:
	branch s8_2095 == 0<32> l2306B1D2
l2306B22C:
	s11_2022 = s8_2095
l2306B22E:
	Mem2111[Mem1886[s10_1008 + 48<i32>:int32] + 8<i32>:word32] = s11_2022
	word32 a0_4759
	word32 s1_4758
	word32 a2_4761
	word32 a3_4762
	word32 a1_4760
	word32 s3_4763
	word32 s11_4767
	word32 s9_4766
	word32 s4_4764
	word32 s7_4765
	ra_1000 = mbedtls_debug_print_crt(ra_1000, 3<32>, 0x2308D504<32>, Mem2111[Mem2111[Mem2111[s10_1008 + 48<i32>:int32] + 8<i32>:word32]:word32], out s0_105, out s1_4758, out a0_4759, out a1_4760, out a2_4761, out a3_4762, out a5_1954, out s3_4763, out s4_4764, out s7_4765, out s9_4766, out s10_1008, out s11_4767)
l2306B256:
	word32 s1_2151 = Mem2149[a5_1954 + 4<i32>:word32]
	word32 a2_2164
	word32 s5_2171
	word32 a1_4557
	word32 a3_4558
	word32 a5_4560
	word32 a7_4561
	word32 t4_4568
	word32 s8_4565
	word32 s9_4566
	word32 s11_4567
	word32 s7_4564
	word32 s6_4563
	word32 s4_4562
	word32 a4_4559
	word32 s10_2168
	mbedtls_debug_print_msg(ra_1000, s10_1008, 2<32>, 0x2308D52C<32>, a5_1954, out a1_4557, out a2_2164, out a3_4558, out a4_4559, out a5_4560, out a7_4561, out s4_4562, out s5_2171, out s6_4563, out s7_4564, out s8_4565, out s9_4566, out s10_2168, out s11_4567, out t4_4568)
	Mem2182[Mem2149[s5_2171:int32]:word32] = Mem2149[s10_2168 + 44<i32>:int32]
	Mem2184[s1_2151:word32] = Mem2182[s10_2168 + 64<i32>:int32]
	Mem2187[s10_2168 + 4<i32>:word32] = Mem2184[s10_2168 + 4<i32>:int32] + 1<32>
	word32 a5_2189 = CONVERT(Mem2187[Mem2187[s10_2168:int32] + 116<i32>:uint16], uint16, word32)
	word32 a5_2190 = a5_2189 & 2<32>
	branch (a5_2189 & 2<32>) == 0<32> l2306B29C
l2306B296:
	ra_1000 = mbedtls_ssl_recv_flight_completed(ra_1000, a2_2164, a5_2189 & 2<32>, mstatus, Mem2187[sp_1097:word32], Mem2187[sp_1097 + 4<i32>:word32], Mem2187[sp_1097 + 312<i32>:word32], Mem2187[sp_1097 + 376<i32>:word32], out a5_2190, out s10_2168)
l2306B29C:
	word32 s11_4636
	word32 t4_4637
	word32 a1_4625
	word32 s7_4632
	word32 s10_4635
	word32 s8_4633
	word32 s9_4634
	word32 a7_4629
	word32 s4_4630
	word32 s6_4631
	word32 a5_4628
	word32 a3_4627
	word32 a2_4626
	mbedtls_debug_print_msg(ra_1000, s10_2168, 2<32>, 0x2308D5CC<32>, a5_2190, out a1_4625, out a2_4626, out a3_4627, out a4_133, out a5_4628, out a7_4629, out s4_4630, out s5, out s6_4631, out s7_4632, out s8_4633, out s9_4634, out s10_4635, out s11_4636, out t4_4637)
l2306B1BA:
	word32 a3_4590
	word32 s5_4594
	word32 s7_4596
	word32 s8_4597
	word32 t4_4600
	word32 s11_4599
	word32 s9_4598
	word32 s6_4595
	word32 a4_4591
	word32 a7_4592
	word32 s4_4593
	word32 a1_4588
	word32 a2_4589
	mbedtls_debug_print_msg(ra_1000, s10_1979, 3<32>, 0x2308D428<32>, a5_1973, out a1_4588, out a2_4589, out a3_4590, out a4_4591, out a5_2083, out a7_4592, out s4_4593, out s5_4594, out s6_4595, out s7_4596, out s8_4597, out s9_4598, out s10_1008, out s11_4599, out t4_4600)
l2306B1D2:
	a4_2285 = 0x2308D548<32>
l2306B140:
	a5_2083 = 0x2308D000<32>
	a4_2285 = 0x2308D3E4<32>
l2306B14C:
	word32 s11_4609
	word32 t4_4610
	word32 s8_4607
	word32 s9_4608
	word32 a2_4602
	word32 a7_4606
	word32 a5_4605
	word32 a4_4604
	word32 a3_4603
	word32 a1_4601
	mbedtls_debug_print_msg(ra_1000, s10_1008, 3<32>, a4_2285, a5_2083, out a1_4601, out a2_4602, out a3_4603, out a4_4604, out a5_4605, out a7_4606, out s4_1897, out s5_1891, out s6_1089, out s7_1932, out s8_4607, out s9_4608, out s10_1008, out s11_4609, out t4_4610)
l2306B158:
	a5_1892 = s7_1932
l2306B15A:
	s4_1897 = s4_1897 + 2<32>
	branch s4_1897 - s3_1546 <u s6_1089 l2306B0D0
l2306B164:
	s5_1891 = s5_1891 + 4<32>
l2306B0F8:
	word32 a5_4493
	word32 a7_4494
	word32 s6_4496
	word32 s7_4497
	word32 s11_4501
	word32 t4_4502
	word32 s10_4500
	word32 s9_4499
	word32 s8_4498
	word32 s4_4495
	word32 a3_4492
	word32 a1_4490
	word32 a2_4491
	mbedtls_debug_print_msg(ra_1000, s10_1008, 1<32>, 0x23088F14<32>, a5_1908, out a1_4490, out a2_4491, out a3_4492, out a4_133, out a5_4493, out a7_4494, out s4_4495, out s5, out s6_4496, out s7_4497, out s8_4498, out s9_4499, out s10_4500, out s11_4501, out t4_4502)
l2306BAEC:
	s0_105 = 0xF9000400<32>
l2306ABBA:
	branch a5_1892 == 0<32> l2306B302
l2306B302:
	word32 a5_2394
	word32 s10_2400
	word32 s8_4462
	word32 s9_4463
	word32 s11_4464
	word32 t4_4465
	word32 s6_4460
	word32 s7_4461
	word32 a4_4456
	word32 a7_4457
	word32 s4_4458
	word32 s5_4459
	word32 a1_4453
	word32 a2_4454
	word32 a3_4455
	mbedtls_debug_print_msg(ra_1000, s10_1008, 1<32>, 0x2308D5AC<32>, a5_1892, out a1_4453, out a2_4454, out a3_4455, out a4_4456, out a5_2394, out a7_4457, out s4_4458, out s5_4459, out s6_4460, out s7_4461, out s8_4462, out s9_4463, out s10_2400, out s11_4464, out t4_4465)
	word32 a0_4466
	s0_105 = mbedtls_ssl_send_fatal_handshake_failure(ra_1000, s10_2400, a5_2394, mstatus, out a0_4466, out a4_133, out s5, out mstatus) + -896<i32>
l2306ABBE:
	word32 a5_2459
	word32 s10_2465
	word32 t4_4479
	word32 a2_4468
	word32 s6_4474
	word32 s11_4478
	word32 s9_4477
	word32 s8_4476
	word32 s7_4475
	word32 a3_4469
	word32 s5_4473
	word32 s4_4472
	word32 a7_4471
	word32 a4_4470
	word32 a1_4467
	mbedtls_debug_print_msg(ra_1000, s10_1008, 1<32>, 0x2308D578<32>, a5_1892, out a1_4467, out a2_4468, out a3_4469, out a4_4470, out a5_2459, out a7_4471, out s4_4472, out s5_4473, out s6_4474, out s7_4475, out s8_4476, out s9_4477, out s10_2465, out s11_4478, out t4_4479)
	word32 a0_4480
	s0_105 = mbedtls_ssl_send_fatal_handshake_failure(ra_1000, s10_2465, a5_2459, mstatus, out a0_4480, out a4_133, out s5, out mstatus) + 1664<i32>
l2306AB3C:
l2306AB08:
l2306AAAE:
l2306AABA:
l2306AA5E:
l2306AA0A:
l2306A9DA:
l2306A966:
l2306A8D2:
	Mem2544[sp_1097:word32] = a3_682
	word32 a5_2555
	word32 s10_2561
	word32 a3_4338
	word32 a7_4340
	word32 s9_4346
	word32 t4_4348
	word32 s11_4347
	word32 s4_4341
	word32 s8_4345
	word32 s7_4344
	word32 s6_4343
	word32 s5_4342
	word32 a4_4339
	word32 a1_4336
	word32 a2_4337
	mbedtls_debug_print_msg(ra_1000, s10_1008, 1<32>, 0x2308D178<32>, a5_680, out a1_4336, out a2_4337, out a3_4338, out a4_4339, out a5_2555, out a7_4340, out s4_4341, out s5_4342, out s6_4343, out s7_4344, out s8_4345, out s9_4346, out s10_2561, out s11_4347, out t4_4348)
	word32 s0_2585
	word32 s3_4353
	word32 s8_4354
	word32 s9_4355
	word32 s10_4356
	word32 a5_4351
	word32 s2_4352
	word32 a0_4350
	word32 s1_4349
	mbedtls_ssl_send_alert_message(ra_1000, s10_2561, 70<i32>, a5_2555, mstatus, out s0_2585, out s1_4349, out a0_4350, out a4_133, out a5_4351, out s2_4352, out s3_4353, out s5, out s8_4354, out s9_4355, out s10_4356, out mstatus)
	s0_105 = s0_2585 + 384<i32>
l2306A860:
l2306A808:
	word32 s11_4328
	word32 t4_4329
	word32 s7_4324
	word32 s8_4325
	word32 s9_4326
	word32 s10_4327
	word32 a7_4321
	word32 s4_4322
	word32 s6_4323
	word32 a1_4317
	word32 a2_4318
	word32 a3_4319
	word32 a5_4320
	mbedtls_debug_print_msg(ra_1000, s10_1008, 1<32>, 0x2308D138<32>, a5_2626, out a1_4317, out a2_4318, out a3_4319, out a4_133, out a5_4320, out a7_4321, out s4_4322, out s5, out s6_4323, out s7_4324, out s8_4325, out s9_4326, out s10_4327, out s11_4328, out t4_4329)
	s0_105 = 0xF8FFFF80<32>
l2306A7C4:
l2306A756:
l2306A71C:
l2306A6B4:
	a5_2657 = a0_391
	a3_2659 = 1209<i32>
l2306A68A:
l2306A646:
l2306A61C:
l2306A58A:
l2306A596:
l2306A59A:
	word32 s8_4429
	word32 s9_4430
	word32 s11_4432
	word32 t4_4433
	word32 s10_4431
	word32 a1_4421
	word32 s7_4428
	word32 a2_4422
	word32 s4_4426
	word32 s6_4427
	word32 a3_4423
	word32 a5_4424
	word32 a7_4425
	mbedtls_debug_print_msg(ra_1000, s10_1008, 1<32>, 0x2308D074<32>, a5_1029, out a1_4421, out a2_4422, out a3_4423, out a4_133, out a5_4424, out a7_4425, out s4_4426, out s5, out s6_4427, out s7_4428, out s8_4429, out s9_4430, out s10_4431, out s11_4432, out t4_4433)
l2306A5A2:
	s0_105 = 0xF8000700<32>
l2306A51A:
	a5_2657 = a0_169
	a3_2659 = 1104<i32>
l2306A528:
	word32 a2_4274
	word32 a5_4276
	word32 s10_4282
	word32 s11_4283
	word32 s4_4277
	word32 s9_4281
	word32 s8_4280
	word32 s7_4279
	word32 s6_4278
	word32 a3_4275
	word32 a1_4273
	mbedtls_debug_print_ret(ra_1000, 1<32>, a3_2659, a5_2657, out a1_4273, out a2_4274, out a3_4275, out a4_133, out a5_4276, out s4_4277, out s5, out s6_4278, out s7_4279, out s8_4280, out s9_4281, out s10_4282, out s11_4283)
l2306A4C6:
	Mem2774[s10_107 + 4<i32>:word32] = 1<32>
	s0_105 = s7_129
l2306A496:
l2306C064:
	word32 a3_4173
	word32 a5_4174
	word32 s4_4176
	word32 s6_4177
	word32 s10_4181
	word32 s11_4182
	word32 t4_4183
	word32 s9_4180
	word32 s8_4179
	word32 s7_4178
	word32 a7_4175
	word32 a2_4172
	word32 a1_4171
	mbedtls_debug_print_msg(ra, s10_107, 1<32>, 0x2308CFA0<32>, s7_129, out a1_4171, out a2_4172, out a3_4173, out a4_133, out a5_4174, out a7_4175, out s4_4176, out s5, out s6_4177, out s7_4178, out s8_4179, out s9_4180, out s10_4181, out s11_4182, out t4_4183)
l2306A456:
l2306A44C:
l2306C080:
	s0_105 = 0xF8FFFF00<32>
l2306A4CE:
	a4Out = a4_133
	a5Out = dwArgE8
	s3Out = dwArgC8
	s5Out = s5
	mstatusOut = mstatus
	return s0_105
mbedtls_ssl_handshake_server_step_exit:


word32 mbedtls_x509_get_serial(word32 a1, word32 a2, word32 a5, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_crt_parse_der
// MayUse:  a1:[0..31] a2:[0..31] a5:[0..31]
// LiveOut: a0 a1 a5 s1
// Trashed: a0 a1 a2 a3 a4 a5 a6 s1 tp
// Preserved: s0 sp
mbedtls_x509_get_serial_entry:
l2306C094:
	word32 a0_5 = Mem0[a5:word32]
	branch a1 - a5 <= 0<32> l2306C0EC
l2306C0EC:
	a0Out = 0xFDFFFD20<32>
	a1Out = a1
	a5Out = a5
	return s1
l2306C09E:
	branch (CONVERT(Mem0[a5:byte], byte, word32) & 127<i32>) != 2<32> l2306C0F4
l2306C0F4:
	a0Out = 0xFDFFFD1E<32>
	a1Out = a1
	a5Out = a5
	return s1
l2306C0AC:
	word32 a5_40
	Mem23[a5 + 1<i32>:word32] = a0_5
	word32 a5_24 = CONVERT(Mem23[a5:byte], byte, word32)
	Mem28[a2 + 0x1000<32>:word32] = a5_24
	word32 s1_26 = a2
	word32 a1_32
	word32 a4_34
	word32 a5_35
	word32 a2_83
	word32 a3_84
	word32 a0_30 = mbedtls_asn1_get_len(a1, a2 + 4<32>, a5_24, out a1_32, out a2_83, out a3_84, out a4_34, out a5_35)
	branch a0_30 == 0<32> l2306C0E0
l2306C0E0:
	word32 s0_37 = Mem28[a5_35:word32]
	s1_26 = Mem28[a4_34 + 4<i32>:word32]
	Mem39[a5_35 + 8<i32>:word32] = s1_26
	a5_40 = a5_35 + a4_34
	Mem41[a5_40:word32] = s0_37
l2306C0CE:
	a5_40 = 0xFDFFFD80<32>
	a0_30 = a0_30 + 0xFDFFFD80<32>
l2306C0D6:
	a0Out = a0_30
	a1Out = a1_32
	a5Out = a5_40
	return s1_26
mbedtls_x509_get_serial_exit:


word32 mbedtls_x509_get_alg(word32 a1, word32 a2, word32 a3, word32 a5, word32 dwArgA4, word32 dwArg0118, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_crt_parse_der
// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a5:[0..31] Stack +00A4:[0..31] Stack +0118:[0..31]
// LiveOut: a0 a1 a2 a5 s1 s2 s3
// Trashed: a0 a1 a2 a3 a4 a5 a6 s0 s1 s2 s3 s4 s8 t3 tp
// Preserved: sp
mbedtls_x509_get_alg_entry:
l2306C0FC:
	word32 a1_10
	word32 s2_18
	word32 s3_19
	word32 s4_60
	word32 a4_59
	word32 a3_58
	word32 a2_57
	word32 a0_24
	word32 a5_14
	word32 s1_17 = mbedtls_asn1_get_alg(a1, a2, a3, a5, dwArgA4, dwArg0118, out a0_24, out a1_10, out a2_57, out a3_58, out a4_59, out a5_14, out s2_18, out s3_19, out s4_60)
	branch a0_24 == 0<32> l2306C10E
l2306C106:
	a5_14 = 0xFDFFFD00<32>
	a0_24 = a0_24 + 0xFDFFFD00<32>
l2306C10E:
	a0Out = a0_24
	a1Out = a1_10
	a2Out = dwArg10
	a5Out = a5_14
	s2Out = s2_18
	s3Out = s3_19
	return s1_17
mbedtls_x509_get_alg_exit:


word32 mbedtls_x509_get_name(word32 ra, word32 a0, word32 a1, word32 a2, word32 a5, word32 mstatus, word32 dwArgD8, word32 dwArg0118, word32 dwArg0198, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_crt_parse_der
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a5:[0..31] mstatus:[0..31] ra:[0..31] Stack +00D8:[0..31] Stack +0118:[0..31] Stack +0198:[0..31]
// LiveOut: a0 a1 a4 a5 ra s1 s2 s5 s6 s7
// Trashed: a0 a1 a2 a3 a4 a5 a6 ra s0 s1 s2 s3 s4 s5 s6 s7 s8 t0 t1 t3 tp
// Preserved: sp
mbedtls_x509_get_name_entry:
l2306C114:
	word32 s1_130 = a0
	word32 s6_169 = a2
	word32 s4_162 = 0x50581008<32>
	word32 s3_124 = 0xFDFFFC80<32>
l2306C13A:
	word32 a0_121
	word32 a2_424
	word32 a3_425
	word32 a4_111
	word32 a1_109
	word32 a0_40 = mbedtls_asn1_get_tag(a1, fp + -56<i32>, 49<i32>, a5, out a1_109, out a2_424, out a3_425, out a4_111, out a5)
	branch a0_40 == 0<32> l2306C168
l2306C168:
	word32 s0_115 = s6_169
	s7 = 0x1E<32>
	s2 = Mem47[s1_130:int32] + a5
	s6_169 = 1<32>
l2306C176:
	word32 a2_418
	word32 a3_108
	word32 a0_107 = mbedtls_asn1_get_tag(s2, fp + -52<i32>, 48<i32>, a5, out a1_109, out a2_418, out a3_108, out a4_111, out a5)
	branch a0_107 == 0<32> l2306C1AC
l2306C1AC:
	s1_130 = Mem70[a5:word32]
	a4_111 = s2 - a5
	branch a4_111 > 0<32> l2306C1BE
l2306C1BE:
	word32 a5_73 = CONVERT(Mem70[a5:byte], byte, word32)
	Mem77[a5_73:word32] = s0_115
	word32 a2_419
	a0_107 = mbedtls_asn1_get_tag(s2, s0_115 + 4<i32>, 6<32>, a5_73, out a1_109, out a2_419, out a3_108, out a4_111, out a5)
	branch a0_107 != 0<32> l2306C186
l2306C1D4:
	s1_130 = Mem77[a5:word32]
	s0_115 = Mem77[a4_111 + 4<i32>:word32]
	Mem89[a5 + 8<i32>:word32] = s0_115
	a5 = a5 + a4_111
	Mem91[a5:word32] = s1_130
	a4_111 = s2 - a5
	branch a4_111 <= 0<32> l2306C1B6
l2306C1E6:
	a4_111 = CONVERT(Mem91[a5:byte], byte, word32)
	branch a4_111 >u 0x1E<32> l2306C220
l2306C1EE:
	word32 a4_96 = s4_162 >>u a4_111
	a4_111 = a4_96 & 1<32>
	branch (a4_96 & 1<32>) == 0<32> l2306C220
l2306C220:
	a0_121 = 0xFDFFFC1E<32>
l2306C1F6:
	Mem101[a5 + 1<i32>:word32] = s1_130
	word32 a5_102 = CONVERT(Mem101[a5:byte], byte, word32)
	Mem105[a5_102 + 12<i32>:word32] = s0_115
	word32 a2_420
	a0_107 = mbedtls_asn1_get_len(s2, s0_115 + 16<i32>, a5_102, out a1_109, out a2_420, out a3_108, out a4_111, out a5)
	branch a0_107 != 0<32> l2306C186
l2306C210:
	word32 s1_114 = Mem105[a5:word32]
	s0_115 = Mem105[a4_111 + 16<i32>:word32]
	Mem116[a5 + 20<i32>:word32] = s0_115
	a5 = a5 + a4_111
	Mem118[a5:word32] = s1_114
	Mem119[s0_115 + 24<i32>:word32] = 0<32>
l2306C1B6:
	a0_121 = 0xFDFFFC20<32>
l2306C186:
	a0_121 = a0_107 + s3_124
	branch a0_121 != 0<32> l2306C152
l2306C18A:
	s1_130 = Mem128[a5:word32]
	branch a5 == s2 l2306C228
l2306C228:
	branch a1 == s2 l2306C240
l2306C240:
	a0_121 = 0<32>
l2306C22C:
	word32 s0_158
	word32 s8_423
	word32 a2_421
	word32 a3_422
	ra = mycalloc(ra, s1_130, 1<32>, 32<i32>, a3_108, a4_111, a5, mstatus, dwLoc20, dwLoc1C, dwArgD8, dwArg0118, out s0_158, out s1_130, out a1_109, out a2_421, out a3_422, out a4_111, out a5, out s2, out s3_124, out s4_162, out s8_423)
	Mem168[0x19<32>:word32] = s0_158
	s6_169 = 1<32>
	branch true l2306C13A
l2306C23E:
l2306C190:
	Mem175[s0_115 + 28<i32>:byte] = 1<8>
	word32 s0_185
	word32 s8_417
	word32 a2_415
	word32 a3_416
	ra = mycalloc(ra, s1_130, 1<32>, 32<i32>, a3_108, a4_111, a5, mstatus, dwLoc20, dwLoc1C, dwArgD8, dwArg0118, out s0_185, out s1_130, out a1_109, out a2_415, out a3_416, out a4_111, out a5, out s2, out s3_124, out s4_162, out s8_417)
	Mem195[0x19<32>:word32] = s0_185
	s0_115 = 1<32>
	branch true l2306C176
l2306C1A4:
	s6_169 = 1<32>
	a0_121 = 0xFD000780<32>
l2306C14A:
	a5 = 0xFDFFFC80<32>
	a0_121 = a0_40 + 0xFDFFFC80<32>
l2306C152:
	0<32> = dwArg0198
	s1Out = s1_130
	a0Out = a0_121
	a1Out = a1_109
	a4Out = a4_111
	a5Out = a5
	s2Out = s2
	s5Out = a1
	s6Out = s6_169
	s7Out = s7
	return ra
mbedtls_x509_get_name_exit:


word32 mbedtls_x509_get_sig(word32 a1, word32 a5, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_crt_parse_der
// MayUse:  a1:[0..31] a5:[0..31]
// LiveOut: a0 a1 a2 a5 s1 s2 s8
// Trashed: a0 a1 a2 a3 a4 a5 a6 s0 s1 s2 s4 s8 t3 tp
// Preserved: sp
mbedtls_x509_get_sig_entry:
l2306C244:
	branch a1 - a5 <= 0<32> l2306C28E
l2306C28E:
	a0Out = 0xFDFFFB20<32>
	a1Out = a1
	a2Out = a2
	a5Out = a5
	s2Out = s2
	s8Out = s8
	return s1
l2306C24E:
	word32 a5_38
	word32 s2_23 = CONVERT(Mem18[a5:byte], byte, word32)
	word32 a1_25
	word32 a4_28
	word32 a5_29
	word32 a3_100
	word32 a0_24
	word32 a2_26
	word32 s1_31 = mbedtls_asn1_get_bitstring_null(a1, fp + 0xFFFFFFEC<32>, a5, out a0_24, out a1_25, out a2_26, out a3_100, out a4_28, out a5_29)
	branch a0_24 == 0<32> l2306C27C
l2306C27C:
	Mem34[s1_31:word32] = s2_23
	Mem35[a4_28 + 4<i32>:word32] = s1_31
	word32 s0_36 = Mem35[a5_29:word32]
	Mem37[a5_29 + 8<i32>:word32] = s1_31
	a5_38 = a5_29 + a4_28
	Mem39[a5_38:word32] = s0_36
	a2_26 = dwArgA4
l2306C268:
	a5_38 = 0xFDFFFB80<32>
	a0_24 = a0_24 + 0xFDFFFB80<32>
l2306C270:
	a0Out = a0_24
	a1Out = a1_25
	a2Out = a2_26
	a5Out = a5_38
	s2Out = s2_23
	s8Out = dwLoc1C
	return s1_31
mbedtls_x509_get_sig_exit:


word32 mbedtls_x509_get_sig_alg(word32 a0, word32 a2, word32 a3, word32 a5, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_crt_parse_der
// MayUse:  a0:[0..31] a2:[0..31] a3:[0..31] a5:[0..31]
// LiveOut: a0 a1 a5 s1
// Trashed: a0 a1 a2 a3 a4 a5 s1 tp
// Preserved: s0 sp
mbedtls_x509_get_sig_alg_entry:
l2306C296:
	branch a5 != 0<32> l2306C2D2
l2306C2D2:
	a0Out = 0xFDFFF800<32>
	a1Out = a1
	a5Out = a5
	return s1
l2306C29A:
	word32 a1_21
	word32 a0_20
	word32 a5_25
	word32 s1_26 = mbedtls_oid_get_sig_alg(a0, a2, a3, a5, out a0_20, out a1_21, out a5_25)
	branch a0_20 == 0<32> l2306C2BC
l2306C2BC:
	branch a5_25 == 5<32> l2306C2C6
l2306C2C4:
	branch a5_25 != 0<32> l2306C2CA
l2306C2C6:
	branch a5_25 == 0<32> l2306C2B4
l2306C2CA:
	a0_20 = 0xFDFFFD00<32>
l2306C2AC:
	a5_25 = 0xFDFFFA00<32>
	a0_20 = a0_20 + 0xFDFFFA00<32>
l2306C2B4:
	a0Out = a0_20
	a1Out = a1_21
	a5Out = a5_25
	return s1_26
mbedtls_x509_get_sig_alg_exit:


word32 mbedtls_x509_get_ext(word32 a1, word32 a2, word32 a3, word32 a5, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_crt_parse_der
// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31] a5:[0..31]
// LiveOut: a0 a1 a5 s1
// Trashed: a0 a1 a2 a3 a4 a5 a6 s0 s1 s4 s8 t3
// Preserved: sp
mbedtls_x509_get_ext_entry:
l2306C2DA:
	branch a5 != a1 l2306C2E4
l2306C2E4:
	word32 a5_14 = CONVERT(Mem13[a5:byte], byte, word32)
	Mem19[a5_14:word32] = a2
	word32 s1_16 = a2
	word32 a2_100
	word32 a3_101
	word32 a4_102
	word32 a1_24
	word32 a5_28
	word32 a0_22 = mbedtls_asn1_get_tag(a1, a2 + 4<32>, a3 | 160<i32>, a5_14, out a1_24, out a2_100, out a3_101, out a4_102, out a5_28)
	branch a0_22 != 0<32> l2306C322
l2306C302:
	Mem32[a5_28 + 8<i32>:word32] = a2
	s1_16 = Mem32[a2 + 4<i32>:word32] + a5_28
	word32 a4_42
	word32 a5_43
	word32 a2_103
	word32 a3_104
	word32 a0_37 = mbedtls_asn1_get_tag(s1_16, fp + 0xFFFFFFEC<32>, 48<i32>, a5_28, out a1_24, out a2_103, out a3_104, out a4_42, out a5_43)
	branch a0_37 == 0<32> l2306C32C
l2306C32C:
	a0_22 = 0<32>
	a5_28 = a5_43 + a4_42
	branch s1_16 == a5_28 l2306C322
l2306C338:
	a0_22 = 0xFDFFFA9A<32>
l2306C31A:
	a5_28 = 0xFDFFFB00<32>
	a0_22 = a0_37 + 0xFDFFFB00<32>
l2306C322:
	a0Out = a0_22
	a1Out = a1_24
	a5Out = a5_28
	return s1_16
l2306C2E0:
	a0Out = 0<32>
	a1Out = a1
	a5Out = a5
	return s1
mbedtls_x509_get_ext_exit:


word32 mbedtls_x509_dn_gets(word32 ra, word32 a0, word32 a1, word32 a2, ptr32 & s10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_crt_info
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] ra:[0..31]
// LiveOut: a0 s10
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s10 s11 t0 t1 t3 t4 tp
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp
mbedtls_x509_dn_gets_entry:
l2306C340:
	word32 s3_11 = a1
	word32 s6_13 = a2
	word32 s1_15 = a0
	word32 t1_613
	word32 a1_615
	word32 a3_616
	word32 a0_614
	word32 a4_617
	word32 a5_618
	word32 a2_106
	word32 ra_124 = memset(ra, fp + -304<i32>, 0<32>, 256<i32>, out t1_613, out a0_614, out a1_615, out a2_106, out a3_616, out a4_617, out a5_618)
	word32 s2_103 = a2
	word32 s0_121 = a1
	word32 a5_105 = 0<32>
	word32 s8_118 = 0x2308E000<32>
	word32 s9_149 = 0x2308E000<32>
	word32 s4_252 = 0x2308DA4C<32>
	word32 s5_253 = 0x23080648<32>
l2306C3A4:
	word32 a0_265
	branch s2_103 != 0<32> l2306C3AE
l2306C3AE:
	branch Mem56[s2_103 + 8<i32>:int32] != 0<32> l2306C3BA
l2306C3BA:
	branch s2_103 == s6_13 l2306C40E
l2306C3BE:
	word32 a2_60 = s4_252
	branch a5_105 != 0<32> l2306C3C4
l2306C3C2:
	a2_60 = s5_253
l2306C3C4:
	word32 a0_76
	word32 s0_84
	word32 a3_621
	word32 a4_622
	word32 a7_623
	word32 s5_626
	word32 s3_624
	word32 s4_625
	word32 s1_619
	word32 s6_627
	word32 s7_628
	word32 a1_620
	word32 s11_629
	ra_124 = snprintf(ra_124, s1_15, s0_121, a2_60, dwLoc0128, dwLoc0108, dwLocDC, dwLocC0, 0<32>, dwLoc98, dwLoc74, out s0_84, out s1_619, out a0_76, out a1_620, out a2_106, out a3_621, out a4_622, out a5_105, out a7_623, out s2_103, out s3_624, out s4_625, out s5_626, out s6_627, out s7_628, out s8_118, out s9_149, out s10, out s11_629)
	branch a0_76 >= 0<32> l2306C406
l2306C406:
	branch a0_76 >=u s0_84 l2306C3D0
l2306C40A:
	s0_121 = s0_84 - a0_76
l2306C40E:
	word32 s2_137
	word32 ra_132
	word32 s7_142
	word32 s1_134
	word32 s0_133
	word32 a0_125
	word32 a0_109
	word32 s1_115 = mbedtls_oid_get_attr_short_name(s2_103, fp + -308<i32>, a2_106, a5_105, dwLoc0108, out a0_109)
	branch a0_109 != 0<32> l2306C470
l2306C470:
	word32 a5_634
	word32 a7_635
	word32 s3_636
	word32 s4_637
	word32 s8_640
	word32 s9_641
	word32 s11_642
	word32 s5_638
	word32 s6_639
	word32 a4_633
	word32 a3_632
	word32 a1_630
	word32 a2_631
	ra_132 = snprintf(ra_124, s1_115, s0_121, s8_118 + -1452<i32>, dwLoc0128, dwLoc0108, dwLocDC, dwLocC0, 0<32>, dwLoc98, dwLoc74, out s0_133, out s1_134, out a0_125, out a1_630, out a2_631, out a3_632, out a4_633, out a5_634, out a7_635, out s2_137, out s3_636, out s4_637, out s5_638, out s6_639, out s7_142, out s8_640, out s9_641, out s10, out s11_642)
l2306C418:
	word32 s9_654
	word32 s11_655
	word32 a1_643
	word32 a3_645
	word32 a4_646
	word32 a5_647
	word32 a7_648
	word32 s5_651
	word32 s6_652
	word32 s8_653
	word32 s3_649
	word32 s4_650
	word32 a2_644
	ra_132 = snprintf(ra_124, s1_115, s0_121, s9_149 + -1456<i32>, dwLoc0128, dwLoc0108, dwLocDC, dwLocC0, 0<32>, dwLoc98, dwLoc74, out s0_133, out s1_134, out a0_125, out a1_643, out a2_644, out a3_645, out a4_646, out a5_647, out a7_648, out s2_137, out s3_649, out s4_650, out s5_651, out s6_652, out s7_142, out s8_653, out s9_654, out s10, out s11_655)
l2306C426:
	branch a0_125 < 0<32> l2306C3D0
l2306C42A:
	branch a0_125 >=u s0_133 l2306C3D0
l2306C42E:
	word32 s0_179 = s0_133 - a0_125
	word32 s1_181 = s1_134 + a0_125
	word32 a5_182 = 0<32>
l2306C440:
	branch a5_182 <u Mem188[s2_137 + 16<i32>:int32] l2306C47E
l2306C47E:
	branch a5_182 == 255<i32> l2306C448
l2306C482:
	word32 a4_194 = CONVERT(Mem188[Mem188[s2_137 + 20<i32>:int32] + a5_182:byte], byte, word32)
	branch a4_194 <=u 0x1F<32> l2306C4A0
l2306C490:
	branch a4_194 == 127<i32> l2306C4A0
l2306C494:
	branch (a4_194 + 127<i32> & 255<i32>) >u 0x1E<32> l2306C4A4
l2306C4A0:
	a4_194 = 63<i32>
l2306C4A4:
	Mem209[fp + -304<i32> + a5_182:byte] = SLICE(a4_194, byte, 0)
	a5_182 = a5_182 + 1<32>
l2306C448:
	Mem232[a5_182 + (fp + -48<i32>) + 3840<i32>:byte] = 0<8>
	word32 a0_238
	word32 s0_246
	word32 s1_247
	word32 a1_656
	word32 a3_657
	word32 a4_658
	word32 a5_659
	word32 s11_662
	word32 a7_660
	word32 s7_661
	ra_124 = snprintf(ra_132, s1_181, s0_179, s7_142 + -808<i32>, dwLoc0128, dwLoc0108, dwLocDC, dwLocC0, 0<32>, dwLoc98, dwLoc74, out s0_246, out s1_247, out a0_238, out a1_656, out a2_106, out a3_657, out a4_658, out a5_659, out a7_660, out s2_103, out s3_11, out s4_252, out s5_253, out s6_13, out s7_661, out s8_118, out s9_149, out s10, out s11_662)
	branch a0_238 < 0<32> l2306C3D0
l2306C462:
	branch a0_238 >=u s0_246 l2306C3D0
l2306C466:
	s0_121 = s0_246 - a0_238
	s1_15 = s1_247 + a0_238
	a5_105 = CONVERT(Mem232[s2_103 + 28<i32>:byte], byte, word32)
l2306C3D0:
	a0_265 = 0xFD000680<32>
l2306C3B4:
	s2_103 = Mem267[s2_103 + 24<i32>:int32]
l2306C3A8:
	a0_265 = s3_11 - s0_121
l2306C3D6:
	s10Out = s10
	return a0_265
mbedtls_x509_dn_gets_exit:


word32 mbedtls_x509_serial_gets(word32 ra, word32 a0, word32 a1, word32 a2, word32 s7, word32 s9, word32 dwArg08, word32 dwArg1C, word32 dwArg34, word32 dwArg78, word32 dwArg9C, word32 dwArg0128, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s7Out, ptr32 & s10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_crt_info
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] ra:[0..31] s7:[0..31] s9:[0..31] Stack +0008:[0..31] Stack +001C:[0..31] Stack +0034:[0..31] Stack +0078:[0..31] Stack +009C:[0..31] Stack +0128:[0..31]
// LiveOut: a0 ra s0 s1 s10 s2 s3 s4 s7
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t3 t4 tp
// Preserved: sp
mbedtls_x509_serial_gets_entry:
l2306C4B0:
	word32 s3_100 = Mem27[a2 + 4<i32>:int32]
	word32 s4_111 = a0
	word32 s1_128 = a1
	word32 s5_102 = a2
	branch s3_100 <=u 32<i32> l2306C4DE
l2306C4DC:
	s3_100 = 0x1C<32>
l2306C4DE:
	word32 s0_110 = a1
	word32 s2_112 = 0<32>
	word32 s8_105 = s3_100 + -1<i32>
	word32 s9_106 = 0x2308E000<32>
	word32 s7_104 = 0x23088E60<32>
	word32 s10_129 = 1<32>
l2306C4FC:
	word32 a0_143
	branch s2_112 != s3_100 l2306C528
l2306C528:
	word32 a5_52 = Mem27[s5_102 + 8<i32>:int32]
	branch s2_112 != 0<32> l2306C53A
l2306C530:
	branch s3_100 == s10_129 l2306C53A
l2306C534:
	branch CONVERT(Mem27[a5_52:byte], byte, word32) == 0<32> l2306C582
l2306C53A:
	branch s2_112 <u s8_105 l2306C548
l2306C546:
l2306C548:
	word32 a0_87
	word32 s0_95
	word32 s4_101
	word32 a7_439
	word32 s11_441
	word32 s6_440
	word32 a1_434
	word32 a5_438
	word32 a2_435
	word32 a3_436
	word32 a4_437
	ra = snprintf(ra, s4_111, s0_110, s9_106 + -1436<i32>, dwLoc18, dwArg08, dwArg34, s9, s7, dwArg78, dwArg9C, out s0_95, out s1_128, out a0_87, out a1_434, out a2_435, out a3_436, out a4_437, out a5_438, out a7_439, out s2_112, out s3_100, out s4_101, out s5_102, out s6_440, out s7_104, out s8_105, out s9_106, out s10_129, out s11_441)
	branch a0_87 >= 0<32> l2306C57A
l2306C57A:
	branch a0_87 >=u s0_95 l2306C558
l2306C57E:
	s0_110 = s0_95 - a0_87
	s4_111 = s4_101 + a0_87
l2306C582:
	s2_112 = s2_112 + 1<32>
l2306C500:
	branch Mem27[s5_102 + 4<i32>:int32] == s2_112 l2306C522
l2306C508:
	word32 a0_119
	word32 s0_127
	word32 s8_431
	word32 s11_433
	word32 s9_432
	word32 a2_423
	word32 a4_425
	word32 a5_426
	word32 s6_430
	word32 a7_427
	word32 s4_428
	word32 s5_429
	word32 a3_424
	word32 a1_422
	ra = snprintf(ra, s4_111, s0_110, 0x2308DA6C<32>, dwLoc18, dwArg08, dwArg34, s9, s7, dwArg78, dwArg9C, out s0_127, out s1_128, out a0_119, out a1_422, out a2_423, out a3_424, out a4_425, out a5_426, out a7_427, out s2_112, out s3_100, out s4_428, out s5_429, out s6_430, out s7_104, out s8_431, out s9_432, out s10_129, out s11_433)
	branch a0_119 < 0<32> l2306C558
l2306C51C:
	branch a0_119 >=u s0_127 l2306C558
l2306C558:
	a0_143 = 0xFD000680<32>
l2306C520:
	s0_110 = s0_127 - a0_119
l2306C522:
	a0_143 = s1_128 - s0_110
l2306C55E:
	0<32> = dwArg0128
	0<32> = dwArg1C
	s0Out = s4
	s1Out = s1_128
	a0Out = a0_143
	s2Out = s2_112
	s3Out = s3_100
	s4Out = dwArg78
	s7Out = s7_104
	s10Out = s10_129
	return ra
mbedtls_x509_serial_gets_exit:


word32 mbedtls_x509_sig_alg_gets(word32 ra, word32 a1, word32 a2, word32 a5, word32 dwArg18, word32 dwArg44, word32 dwArg60, word32 dwArg88, word32 dwArgAC, ptr32 & s0Out, ptr32 & a0Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s7Out, ptr32 & s10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_crt_info
// MayUse:  a1:[0..31] a2:[0..31] a5:[0..31] ra:[0..31] Stack +0018:[0..31] Stack +0044:[0..31] Stack +0060:[0..31] Stack +0088:[0..31] Stack +00AC:[0..31]
// LiveOut: a0 a5 ra s0 s10 s2 s3 s4 s7
// Trashed: a0 a1 a2 a3 a4 a5 a7 ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t3 t4 tp
// Preserved: sp
mbedtls_x509_sig_alg_gets_entry:
l2306C586:
	word32 s7_165
	word32 s3_156
	word32 s2_153
	word32 s10_147
	word32 ra_139
	word32 a5_133
	word32 a0_119
	word32 s0_40
	word32 a0_19
	word32 s1_25 = mbedtls_oid_get_sig_alg_desc(a2, fp + 0xFFFFFFEC<32>, a2, a5, out a0_19)
	branch a0_19 == 0<32> l2306C5C6
l2306C5C6:
	word32 s11_198
	word32 s8_196
	word32 s9_197
	word32 s5_194
	word32 s6_195
	word32 a7_192
	word32 s4_193
	word32 a3_190
	word32 a4_191
	word32 a1_188
	word32 a2_189
	word32 s1_187
	ra_139 = snprintf(ra, s1_25, a1, 0x23085CD8<32>, dwLoc08, dwArg18, dwArg44, dwArg60, 0<32>, dwArg88, dwArgAC, out s0_40, out s1_187, out a0_119, out a1_188, out a2_189, out a3_190, out a4_191, out a5_133, out a7_192, out s2_153, out s3_156, out s4_193, out s5_194, out s6_195, out s7_165, out s8_196, out s9_197, out s10_147, out s11_198)
l2306C59E:
	word32 s11_210
	word32 s8_208
	word32 s9_209
	word32 s5_206
	word32 s6_207
	word32 a7_204
	word32 s4_205
	word32 a3_202
	word32 a4_203
	word32 a1_200
	word32 a2_201
	word32 s1_199
	ra_139 = snprintf(ra, s1_25, a1, 0x2307F0C4<32>, dwLoc08, dwArg18, dwArg44, dwArg60, 0<32>, dwArg88, dwArgAC, out s0_40, out s1_199, out a0_119, out a1_200, out a2_201, out a3_202, out a4_203, out a5_133, out a7_204, out s2_153, out s3_156, out s4_205, out s5_206, out s6_207, out s7_165, out s8_208, out s9_209, out s10_147, out s11_210)
l2306C5AE:
	branch a0_119 < 0<32> l2306C5B6
l2306C5B2:
	branch a0_119 <u s0_40 l2306C5BC
l2306C5B6:
	a0_119 = 0xFD000680<32>
l2306C5BC:
	s0Out = s0_40
	a0Out = a0_119
	a5Out = a5_133
	s2Out = s2_153
	s3Out = s3_156
	s4Out = dwArg04
	s7Out = s7_165
	s10Out = s10_147
	return ra_139
mbedtls_x509_sig_alg_gets_exit:


word32 mbedtls_x509_key_size_helper(word32 ra, word32 a0, word32 a1, word32 dwArg08, word32 dwArg28, word32 dwArg54, word32 dwArg70, word32 dwArg98, word32 dwArgBC, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s10Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_x509_crt_info
// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31] Stack +0008:[0..31] Stack +0028:[0..31] Stack +0054:[0..31] Stack +0070:[0..31] Stack +0098:[0..31] Stack +00BC:[0..31]
// LiveOut: a0 a5 ra s1 s10 s2 s3 s4 s5 s6 s7
// Trashed: a0 a1 a2 a3 a4 a5 a7 ra s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t3 t4
// Preserved: s0 sp
mbedtls_x509_key_size_helper_entry:
l2306C5DA:
	word32 a0_39
	word32 a0_15
	word32 a5_20
	word32 s0_23
	word32 s1_24
	word32 s10_25
	word32 s2_27
	word32 s3_28
	word32 s4_29
	word32 s5_30
	word32 s6_31
	word32 s7_32
	word32 s9_118
	word32 s11_119
	word32 a7_116
	word32 s8_117
	word32 a3_114
	word32 a4_115
	word32 a1_112
	word32 a2_113
	word32 ra_22 = snprintf(ra, a0, a1, 0x2308DA58<32>, dwArg08, dwArg28, dwArg54, dwArg70, ra, dwArg98, dwArgBC, out s0_23, out s1_24, out a0_15, out a1_112, out a2_113, out a3_114, out a4_115, out a5_20, out a7_116, out s2_27, out s3_28, out s4_29, out s5_30, out s6_31, out s7_32, out s8_117, out s9_118, out s10_25, out s11_119)
	branch a0_15 < 0<32> l2306C602
l2306C5F4:
	branch a0_15 >=u s0_23 l2306C602
l2306C602:
	a0_39 = 0xFD000680<32>
l2306C5F8:
	a0_39 = 0<32>
l2306C5FA:
	s1Out = s1_24
	a0Out = a0_39
	a5Out = a5_20
	s2Out = s2_27
	s3Out = s3_28
	s4Out = s4_29
	s5Out = s5_30
	s6Out = s6_31
	s7Out = s7_32
	s10Out = s10_25
	return ra_22
mbedtls_x509_key_size_helper_exit:


word32 mbedtls_x509_time_is_past()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      x509_crt_verify_top.isra.7
//      x509_crt_verify_child
// MayUse: 
// LiveOut: a0
// Trashed: a0
// Preserved: sp
mbedtls_x509_time_is_past_entry:
l2306C60A:
	return 0<32>
mbedtls_x509_time_is_past_exit:


word32 mbedtls_x509_time_is_future()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      x509_crt_verify_top.isra.7
//      x509_crt_verify_child
// MayUse: 
// LiveOut: a0
// Trashed: a0
// Preserved: sp
mbedtls_x509_time_is_future_entry:
l2306C60E:
	return 0<32>
mbedtls_x509_time_is_future_exit:


word32 mbedtls_base64_decode(word32 a0, word32 a1, word32 a2, word32 a3, word32 a4, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mbedtls_pem_read_buffer
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a4:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 s1 s2 s3 s4 s5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s2 s3 s4 s5 s8 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
mbedtls_base64_decode_entry:
l2306C612:
	word32 a5_17 = 0<32>
	word32 a6_18 = 0<32>
	word32 a7_105 = 0<32>
l2306C646:
	word32 a0_148
	branch a7_105 <u a4 l2306C662
l2306C662:
	word32 t4_31 = 0<32>
l2306C664:
	word32 t6_34 = a3 + a7_105
	word32 t1_36 = CONVERT(Mem16[t6_34:byte], byte, word32)
	branch t1_36 == 32<i32> l2306C64E
l2306C64E:
	a7_105 = a7_105 + 1<32>
	t4_31 = t4_31 + 1<32>
	branch a4 != a7_105 l2306C664
l2306C670:
	branch a4 == a7_105 l2306C656
l2306C674:
	s5 = a4 - a7_105
	branch s5 <=u 1<32> l2306C68C
l2306C67C:
	branch t1_36 != 0xD<32> l2306C68C
l2306C68C:
	branch t1_36 == 0xA<32> l2306C688
l2306C680:
	branch CONVERT(Mem16[t6_34 + 1<i32>:byte], byte, word32) != 0xA<32> l2306C690
l2306C690:
	branch t4_31 != 0<32> l2306C69E
l2306C694:
	branch t1_36 != 61<i32> l2306C6A4
l2306C6A4:
	branch CONVERT(SLICE(t1_36, byte, 0), byte, int32) < 0<32> l2306C69E
l2306C698:
	a5_17 = a5_17 + 1<32>
	branch a5_17 <=u 2<32> l2306C6B0
l2306C6B0:
	word32 t1_80 = CONVERT(Mem16[t1_36 + 0x2308DA74<32>:byte], byte, word32)
	branch t1_80 == 127<i32> l2306C69E
l2306C6BA:
	branch t1_80 >u 63<i32> l2306C6C0
l2306C6BE:
	branch a5_17 != 0<32> l2306C69E
l2306C6C0:
	a6_18 = a6_18 + 1<32>
l2306C69E:
	a0_148 = -44<i32>
l2306C688:
	a7_105 = a7_105 + 1<32>
l2306C64A:
	a4 = a7_105
l2306C656:
	branch a6_18 != 0<32> l2306C6C4
l2306C6C4:
	word32 a6_117 = (a6_18 >>u 3<u32>) + 6<32> - a5_17 + ((a6_18 & 7<i32>) + 0xD<32> >>u 3<u32>)
	branch a0 == 0<32> l2306C712
l2306C6E4:
	branch a1 <u a6_117 l2306C712
l2306C712:
	Mem147[a2:word32] = a6_117
	a0_148 = -42<i32>
l2306C6E8:
	a4 = a4 + a3
	word32 a5_161 = a0
	word32 a6_162 = 0<32>
	word32 a7_163 = 3<32>
	word32 t1_164 = 0<32>
l2306C708:
	branch a4 != a3 l2306C72A
l2306C72A:
	word32 t3_174 = CONVERT(Mem173[a3:byte], byte, word32)
	word32 a1_176 = t3_174 + -10<i32> & 255<i32>
	branch a1_176 >u 0x16<32> l2306C742
l2306C73A:
	word32 a1_179 = 0x400009<32> >>u a1_176
	a1 = a1_179 & 1<32>
	branch (a1_179 & 1<32>) != 0<32> l2306C778
l2306C742:
	word32 a1_186 = CONVERT(Mem173[t3_174 + 0x2308DA74<32>:byte], byte, word32)
	t1_164 = t1_164 + 1<32>
	a1 = a1_186 & 63<i32>
	a7_163 = a7_163 - CONVERT(a1_186 <u -65<i32>, bool, word32)
	a6_162 = a1_186 & 63<i32> | a6_162 << 6<i32>
	branch t1_164 != 4<32> l2306C778
l2306C764:
	t1_164 = 0<32>
	branch a7_163 == 0<32> l2306C778
l2306C76A:
	Mem206[a5_161:byte] = SLICE(a6_162 >>u 0x10<u32>, byte, 0)
	a1 = a6_162 >>u 0x10<u32>
	branch a7_163 != 1<32> l2306C77C
l2306C77C:
	Mem210[a5_161 + 1<i32>:byte] = SLICE(a6_162 >>u 8<u32>, byte, 0)
	a1 = a6_162 >>u 8<u32>
	branch a7_163 != 2<32> l2306C78C
l2306C78C:
	Mem213[a5_161 + 2<i32>:byte] = SLICE(a6_162, byte, 0)
	a5_161 = a5_161 + 3<32>
l2306C788:
	a5_161 = a5_161 + 2<32>
l2306C776:
	a5_161 = a5_161 + 1<32>
l2306C778:
	a3 = a3 + 1<32>
l2306C70C:
	a5_17 = a5_161 - a0
	Mem227[a5_17:word32] = a2
l2306C65A:
	Mem228[a2:word32] = 0<32>
l2306C65E:
	a0_148 = 0<32>
l2306C71A:
	a0Out = a0_148
	a1Out = a1
	a2Out = s2
	a3Out = a3
	a4Out = a4
	a5Out = a5_17
	s2Out = 63<i32>
	s3Out = 2<32>
	s4Out = dwArg28
	s5Out = s5
	return 127<i32>
mbedtls_base64_decode_exit:


void modf(word32 ra, word32 a0, word32 a1, word32 a2, word32 fflags, word32 frm)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ecvtbuf
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1 t3
// Preserved: ra sp
modf_entry:
l2306C794:
	word32 a6_22
	word32 t1_21
	word32 a4_6 = a1 >> 0x14<u32> & 2047<i32>
	word32 a5_11 = a1
	branch a4_6 > -1042<i32> l2306C7FC
l2306C7FC:
	branch a4_6 > -1074<i32> l2306C7D4
l2306C804:
	word32 a4_17 = -1<i32> >>u a4_6 + -1043<i32>
	branch (a4_17 & a0) == 0<32> l2306C7D4
l2306C818:
	word32 a3_20 = ~a4_17 & a0
	t1_21 = a3_20
	a6_22 = a3_20
l2306C7B8:
	branch a4_6 < 0xFFFFFC01<32> l2306C860
l2306C860:
	Mem28[a2:word32] = 0<i32>
	Mem29[a2 + 4<i32>:word32] = a1 & 0x80000000<32>
	return
l2306C7BC:
	word32 a6_35 = 0xFFFFF<32> >> a4_6 + -1023<i32>
	branch (a6_35 & a1 | a0) != 0<32> l2306C82C
l2306C82C:
	a5_11 = ~a6_35 & a1
	t1_21 = 0<i32>
	a6_22 = 0<i32>
l2306C840:
	Mem45[a2:word32] = t1_21
	Mem47[a2 + 4<i32>:word32] = a5_11
	__subdf3(ra, a0, a1, a6_22, a5_11, fflags, frm)
	return
l2306C7D4:
	Mem78[a2 + 4<i32>:word32] = a1
	Mem81[a2:word32] = a0
	return
modf_exit:


word32 __lshrdi3(word32 a0, word32 a1, word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      EF_Ctrl_Read_PowerOffset_Opt
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a0
// Trashed: a0 a1 a4 a5
// Preserved: sp
__lshrdi3_entry:
l2306C888:
	branch a2 == 0<32> l2306C8A8
l2306C88C:
	word32 a5_5 = 32<i32> - a2
	branch a5_5 > 0<32> l2306C8AC
l2306C8AC:
	a0 = a0 >>u a2 | a1 << a5_5
l2306C898:
	a0 = a1 >>u a2 + -32<i32>
l2306C8A4:
l2306C8A8:
	return a0
__lshrdi3_exit:


word32 __clzsi2(word32 a0, ptr32 & a4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      txl_payload_handle
//      txl_transmit_trigger
//      rc_get_initial_rate_config
//      ke_evt_schedule
//      rxu_mgt_ind_handler
//      apm_start_req_handler
//      vTaskSwitchContext
//      bloop_run
//      __adddf3
//      __divdf3
//      __muldf3
//      __subdf3
//      __floatsidf
//      __floatunsidf
//      __extendsfdf2
// MayUse:  a0:[0..31]
// LiveOut: a0 a4
// Trashed: a0 a4 a5
// Preserved: sp
__clzsi2_entry:
l2306C8C0:
	word32 a5_10
	branch a0 >=u 0x10000<32> l2306C8F8
l2306C8F8:
	a5_10 = 16<i32>
	branch a0 <u 0x1000000<32> l2306C8D4
l2306C904:
	a5_10 = 24<i32>
l2306C8C8:
	a5_10 = CONVERT(a0 >u 255<i32>, bool, word32) << 3<u32>
l2306C8D4:
	word32 a4_13 = 32<i32> - a5_10
	word32 a0_22 = a4_13 - CONVERT(Mem0[0x2308DB6C<p32> + (a0 >>u a5_10):byte], byte, word32)
	a4Out = a4_13
	return a0_22
__clzsi2_exit:


word32 __floatundisf(word32 ra, word32 a0, word32 a1, word32 fflags, word32 frm, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a5Out, ptr32 & s2Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s9Out, ptr32 & fa0Out, ptr32 & fflagsOut, ptr32 & frmOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      iperf_server_udp_recv_fn
//      iperf_client_udp
//      iperf_server
//      iperf_client_tcp
// MayUse:  a0:[0..31] a1:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut: a0 a1 a3 a5 fa0 fflags frm s1 s2 s4 s5 s6 s7 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 fa0 fflags frm s1 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6
// Preserved: ra s0 sp
__floatundisf_entry:
l2306C90C:
	branch a1 <u 0x200000<32> l2306C93C
l2306C924:
	branch a0 << 0x15<u32> == 0<32> l2306C93C
l2306C92C:
l2306C93C:
	word32 a1_19
	word32 a0_34
	word32 a1_35
	word32 fflags_49
	word32 frm_50
	word32 s0_52
	word32 s1_53
	word32 s2_54
	word32 s4_56
	word32 s5_57
	word32 s6_58
	word32 s7_59
	word32 s9_61
	word32 a4_113
	word32 a5_114
	word32 a7_115
	word32 s3_116
	word32 s8_117
	word32 ra_51 = __muldf3(ra, __floatunsidf(a1, out a1_19), a1_19, Mem7[0x4200D9B8<p32>:int32], Mem7[0x4200D9BC<p32>:int32], fflags, frm, out s0_52, out s1_53, out a0_34, out a1_35, out a4_113, out a5_114, out a7_115, out s2_54, out s3_116, out s4_56, out s5_57, out s6_58, out s7_59, out s8_117, out s9_61, out fflags_49, out frm_50)
	word32 a1_66
	word32 a1_74
	word32 a0_73 = __adddf3(ra_51, __floatunsidf(s0_52, out a1_66), a1_66, a0_34, a1_35, fflags_49, frm_50, out a1_74)
	word32 a3_84
	word32 a5_86
	word32 fa0_89
	word32 a2_118
	word32 a4_119
	word32 a1_82 = __truncdfsf2(ra_51, a0_73, a1_74, fflags_49, frm_50, out a2_118, out a3_84, out a4_119, out a5_86, out fa0_89)
	a0Out = a0_73
	a1Out = a1_82
	a3Out = a3_84
	a5Out = a5_86
	s2Out = s2_54
	s4Out = s4_56
	s5Out = s5_57
	s6Out = s6_58
	s7Out = s7_59
	s9Out = s9_61
	fa0Out = fa0_89
	fflagsOut = fflags_49
	frmOut = frm_50
	return s1_53
__floatundisf_exit:


word32 __divdi3(word32 a0, word32 a1, word32 a2, word32 a3, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      uptime_cmd
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31]
// LiveOut: a0 a1
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1 t3 t4 t5 t6
// Preserved: sp
__divdi3_entry:
l2306C988:
	word32 a7_10 = 0<i32>
	branch a1 >= 0<32> l2306C9A4
l2306C990:
	a0 = 0<32> - a0
	a1 = 0<32> - a1 - CONVERT(a0 != 0<32>, bool, word32)
	a7_10 = -1<i32>
l2306C9A4:
	branch a3 >= 0<32> l2306C9BC
l2306C9A8:
	a2 = 0<32> - a2
	a7_10 = ~a7_10
	a3 = 0<32> - a3 - CONVERT(a2 != 0<32>, bool, word32)
l2306C9BC:
	word32 t3_141
	word32 a5_106
	word32 a6_151 = a2
	word32 a4_155 = a3
	word32 t1_178 = a0
	word32 t3_292 = a1
	branch a3 != 0<32> l2306CC70
l2306CC70:
	branch a1 <u a3 l2306CDFC
l2306CDFC:
	t3_141 = 0<i32>
	a5_106 = 0<i32>
l2306CC74:
	word32 a4_35
	branch a3 >=u 0x10000<32> l2306CCC0
l2306CCC0:
	a4_35 = 16<i32>
	branch a3 <u 0x1000000<32> l2306CC88
l2306CCCC:
	a4_35 = 24<i32>
l2306CC7C:
	a4_35 = CONVERT(a3 >u 255<i32>, bool, word32) << 3<u32>
l2306CC88:
	word32 a6_52 = CONVERT(Mem0[0x2308DB6C<p32> + (a3 >>u a4_35):byte], byte, word32) + a4_35
	t3_141 = 32<i32> - a6_52
	branch t3_141 != 0<32> l2306CCD4
l2306CCD4:
	word32 a3_57 = a2 >>u a6_52 | a3 << t3_141
	word32 a5_60 = a1 >>u a6_52
	word32 a1_64 = a0 >>u a6_52 | a1 << t3_141
	word32 t5_67 = CONVERT(SLICE(a3_57, word16, 0), word16, word32)
	word32 a5_70 = a5_60 >>u (a3_57 >>u 0x10<u32>)
	word32 a2_69 = a2 << t3_141
	word32 a4_72 = (a5_60 & a3_57 >>u 0x10<u32>) << 0x10<u32> | a1_64 >>u 0x10<u32>
	word32 t1_73 = t5_67 + a5_70
	word32 t4_74 = a5_70
	branch a4_72 >=u t1_73 l2306CD38
l2306CD20:
	a4_72 = a4_72 + a3_57
	t4_74 = a5_70 + -1<i32>
	branch a4_72 <u a3_57 l2306CD38
l2306CD2C:
	branch a4_72 >=u t1_73 l2306CD38
l2306CD30:
	t4_74 = a5_70 + -2<i32>
	a4_72 = a4_72 + a3_57
l2306CD38:
	word32 a4_81 = a4_72 - t1_73
	word32 a4_87 = a4_81 >>u (a3_57 >>u 0x10<u32>)
	word32 a6_101 = (a4_81 & a3_57 >>u 0x10<u32>) << 0x10<u32> | CONVERT(SLICE(a1_64, word16, 0), word16, word32)
	word32 t5_91 = t5_67 + a4_87
	word32 a5_105 = a4_87
	branch a6_101 >=u t5_91 l2306CD78
l2306CD60:
	a6_101 = a6_101 + a3_57
	a5_105 = a4_87 + -1<i32>
	branch a6_101 <u a3_57 l2306CD78
l2306CD6C:
	branch a6_101 >=u t5_91 l2306CD78
l2306CD70:
	a5_105 = a4_87 + -2<i32>
	a6_101 = a6_101 + a3_57
l2306CD78:
	a5_106 = t4_74 << 0x10<u32> | a5_105
	word32 a3_115 = (a5_106 >>u 0x10<u32>) + (a2_69 & 0xFFFF<32>)
	word32 t4_114 = (a5_106 & 0xFFFF<32>) + (a2_69 & 0xFFFF<32>)
	word32 a6_103 = a6_101 - t5_91
	word32 a4_119 = (t4_114 >>u 0x10<u32>) + (((a5_106 & 0xFFFF<32>) + (a2_69 >>u 0x10<u32>)) + a3_115)
	word32 a1_120 = (a5_106 >>u 0x10<u32>) + (a2_69 >>u 0x10<u32>)
	branch a4_119 >=u a3_115 l2306CDC0
l2306CDBC:
	a1_120 = a1_120 + 0x10000<32>
l2306CDC0:
	word32 a1_125 = (a4_119 >>u 0x10<u32>) + a1_120
	branch a6_103 <u a1_125 l2306CDF4
l2306CDCC:
	branch a6_103 != a1_125 l2306CAA8
l2306CDD0:
	t3_141 = 0<i32>
	branch a0 << t3_141 >=u ((a4_119 & 0xFFFF<32>) << 0x10<u32>) + (t4_114 & 0xFFFF<32>) l2306CB90
l2306CDF4:
	a5_106 = a5_106 + -1<i32>
l2306CCAC:
	a5_106 = 1<i32>
	branch a3 <u a1 l2306CB90
l2306CCB4:
	a5_106 = CONVERT(a0 <u a2, bool, word32) ^ 1<i32>
l2306C9D0:
	branch a1 >=u a2 l2306CAC4
l2306CAC4:
	branch a2 != 0<32> l2306CAD0
l2306CAC8:
	a6_151 = 1<i32> >>u a3
l2306CAD0:
	branch a6_151 >=u 0x10000<32> l2306CBB0
l2306CBB0:
	a4_155 = 16<i32>
	branch a6_151 <u 0x1000000<32> l2306CAE4
l2306CBBC:
	a4_155 = 24<i32>
l2306CAD8:
	branch a6_151 <=u 255<i32> l2306CAE4
l2306CAE0:
	a4_155 = 8<i32>
l2306CAE4:
	word32 a1_220
	word32 a5_170 = CONVERT(Mem0[0x2308DB6C<p32> + (a6_151 >>u a4_155):byte], byte, word32) + a4_155
	word32 a3_171 = 32<i32> - a5_170
	branch a3_171 != 0<32> l2306CBC4
l2306CBC4:
	a6_151 = a6_151 << a3_171
	word32 a4_175 = a1 >>u a5_170
	word32 a2_182 = a0 >>u a5_170 | a1 << a3_171
	word32 a1_185 = CONVERT(SLICE(a6_151, word16, 0), word16, word32)
	word32 a4_187 = a4_175 >>u (a6_151 >>u 0x10<u32>)
	t1_178 = a0 << a3_171
	word32 a5_189 = (a4_175 & a6_151 >>u 0x10<u32>) << 0x10<u32> | a2_182 >>u 0x10<u32>
	word32 a3_190 = a1_185 + a4_187
	word32 t3_191 = a4_187
	branch a5_189 >=u a3_190 l2306CC20
l2306CC08:
	a5_189 = a5_189 + a6_151
	t3_191 = a4_187 + -1<i32>
	branch a5_189 <u a6_151 l2306CC20
l2306CC14:
	branch a5_189 >=u a3_190 l2306CC20
l2306CC18:
	t3_191 = a4_187 + -2<i32>
	a5_189 = a5_189 + a6_151
l2306CC20:
	word32 a3_198 = a5_189 - a3_190
	word32 a3_204 = a3_198 >>u (a6_151 >>u 0x10<u32>)
	word32 a4_207 = a1_185 + a3_204
	word32 a1_208 = (a3_198 & a6_151 >>u 0x10<u32>) << 0x10<u32> | CONVERT(SLICE(a2_182, word16, 0), word16, word32)
	word32 a5_209 = a3_204
	branch a1_208 >=u a4_207 l2306CC60
l2306CC48:
	a1_208 = a1_208 + a6_151
	a5_209 = a3_204 + -1<i32>
	branch a1_208 <u a6_151 l2306CC60
l2306CC54:
	branch a1_208 >=u a4_207 l2306CC60
l2306CC58:
	a5_209 = a3_204 + -2<i32>
	a1_208 = a1_208 + a6_151
l2306CC60:
	a1_220 = a1_208 - a4_207
	t3_141 = t3_191 << 0x10<u32> | a5_209
l2306CB00:
	a1_220 = a1 - a6_151
	t3_141 = 1<i32>
l2306CB08:
	word32 a0_227 = a6_151 >>u 0x10<u32>
	word32 a2_228 = a6_151 << 0x10<u32>
	word32 a4_237 = a1_220 >>u a0_227
	word32 a1_239 = (a2_228 >>u 0x10<u32>) + a4_237
	word32 a3_241 = (a1_220 & a0_227) << 0x10<u32> | t1_178 >>u 0x10<u32>
	word32 a5_242 = a4_237
	branch a3_241 >=u a1_239 l2306CB4C
l2306CB34:
	a3_241 = a3_241 + a6_151
	a5_242 = a4_237 + -1<i32>
	branch a3_241 <u a6_151 l2306CB4C
l2306CB40:
	branch a3_241 >=u a1_239 l2306CB4C
l2306CB44:
	a5_242 = a4_237 + -2<i32>
	a3_241 = a3_241 + a6_151
l2306CB4C:
	word32 a3_249 = a3_241 - a1_239
	word32 a3_255 = a3_249 >>u a0_227
	word32 t1_257 = (a3_249 & a0_227) << 0x10<u32> | CONVERT(SLICE(t1_178, word16, 0), word16, word32)
	word32 a1_259 = (a2_228 >>u 0x10<u32>) + a3_255
	word32 a0_260 = a3_255
	branch t1_257 >=u a1_259 l2306CB88
l2306CB74:
	word32 t1_262 = a6_151 + t1_257
	a0_260 = a3_255 + -1<i32>
	branch t1_262 <u a6_151 l2306CB88
l2306CB80:
	branch t1_262 >=u a1_259 l2306CB88
l2306CB84:
	a0_260 = a3_255 + -2<i32>
l2306CB88:
	a5_106 = a5_242 << 0x10<u32> | a0_260
l2306C9DC:
	word32 a5_272
	branch a2 >=u 0x10000<32> l2306CAB0
l2306CAB0:
	a5_272 = 16<i32>
	branch a2 <u 0x1000000<32> l2306C9F0
l2306CABC:
	a5_272 = 24<i32>
l2306C9E4:
	a5_272 = CONVERT(a2 >u 255<i32>, bool, word32) << 3<u32>
l2306C9F0:
	word32 a5_284 = CONVERT(Mem0[0x2308DB6C<p32> + (a2 >>u a5_272):byte], byte, word32) + a5_272
	word32 a4_286 = 32<i32> - a5_284
	branch a4_286 == 0<32> l2306CA20
l2306CA0C:
	a6_151 = a2 << a4_286
	t3_292 = a0 >>u a5_284 | a1 << a4_286
	t1_178 = a0 << a4_286
l2306CA20:
	word32 a2_296 = a6_151 >>u 0x10<u32>
	word32 a1_300 = a6_151 << 0x10<u32>
	word32 t3_305 = t3_292 >>u a2_296
	word32 a4_307 = (t3_292 & a2_296) << 0x10<u32> | t1_178 >>u 0x10<u32>
	word32 a3_308 = (a1_300 >>u 0x10<u32>) + t3_305
	word32 a5_309 = t3_305
	branch a4_307 >=u a3_308 l2306CA64
l2306CA4C:
	a4_307 = a4_307 + a6_151
	a5_309 = t3_305 + -1<i32>
	branch a4_307 <u a6_151 l2306CA64
l2306CA58:
	branch a4_307 >=u a3_308 l2306CA64
l2306CA5C:
	a5_309 = t3_305 + -2<i32>
	a4_307 = a4_307 + a6_151
l2306CA64:
	word32 a4_316 = a4_307 - a3_308
	word32 a4_322 = a4_316 >>u a2_296
	word32 t1_324 = (a4_316 & a2_296) << 0x10<u32> | CONVERT(SLICE(t1_178, word16, 0), word16, word32)
	word32 a1_326 = (a1_300 >>u 0x10<u32>) + a4_322
	word32 a0_327 = a4_322
	branch t1_324 >=u a1_326 l2306CAA0
l2306CA8C:
	word32 t1_329 = a6_151 + t1_324
	a0_327 = a4_322 + -1<i32>
	branch t1_329 <u a6_151 l2306CAA0
l2306CA98:
	branch t1_329 >=u a1_326 l2306CAA0
l2306CA9C:
	a0_327 = a4_322 + -2<i32>
l2306CAA0:
	a5_106 = a5_309 << 0x10<u32> | a0_327
l2306CAA8:
	t3_141 = 0<i32>
l2306CB90:
	word32 a0_340 = a5_106
	word32 a1_345 = t3_141
	branch a7_10 == 0<32> l2306CBAC
l2306CB9C:
	a0_340 = 0<32> - a5_106
	a1_345 = 0<32> - t3_141 - CONVERT(a0_340 != 0<32>, bool, word32)
l2306CBAC:
	a1Out = a1_345
	return a0_340
__divdi3_exit:


void __moddi3(word32 a0, word32 a1, word32 a2, word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      uptime_cmd
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31]
// LiveOut:
// Trashed: a0 a1 a4 a5 a6 a7 t1
// Preserved: a2 a3 sp t3 t4 t5 t6
__moddi3_entry:
l2306CE08:
	word32 a7_10 = 0<i32>
	branch a1 >= 0<32> l2306CE24
l2306CE10:
	a0 = 0<32> - a0
	a1 = 0<32> - a1 - CONVERT(a0 != 0<32>, bool, word32)
	a7_10 = -1<i32>
l2306CE24:
	branch a3 >= 0<32> l2306CE38
l2306CE28:
	a2 = 0<32> - a2
	a3 = 0<32> - a3 - CONVERT(a2 != 0<32>, bool, word32)
l2306CE38:
	word32 t1_187 = a2
	word32 a4_191 = a3
	word32 a5_214 = a0
	word32 a6_28 = a1
	branch a3 != 0<32> l2306D098
l2306D098:
	branch a1 <u a3 l2306CF14
l2306D09C:
	word32 a4_31
	branch a3 >=u 0x10000<32> l2306D0F8
l2306D0F8:
	a4_31 = 16<i32>
	branch a3 <u 0x1000000<32> l2306D0B0
l2306D104:
	a4_31 = 24<i32>
l2306D0A4:
	a4_31 = CONVERT(a3 >u 255<i32>, bool, word32) << 3<u32>
l2306D0B0:
	word32 t5_48 = CONVERT(Mem0[0x2308DB6C<p32> + (a3 >>u a4_31):byte], byte, word32) + a4_31
	word32 t4_49 = 32<i32> - t5_48
	branch t4_49 != 0<32> l2306D10C
l2306D10C:
	word32 a3_53 = a2 >>u t5_48 | a3 << t4_49
	word32 a4_56 = a1 >>u t5_48
	word32 a5_61 = a0 >>u t5_48 | a1 << t4_49
	word32 a1_63 = CONVERT(SLICE(a3_53, word16, 0), word16, word32)
	word32 a4_67 = a4_56 >>u (a3_53 >>u 0x10<u32>)
	word32 a2_65 = a2 << t4_49
	word32 a0_66 = a0 << t4_49
	word32 t1_69 = (a4_56 & a3_53 >>u 0x10<u32>) << 0x10<u32> | a5_61 >>u 0x10<u32>
	word32 t6_70 = a1_63 + a4_67
	word32 t3_71 = a4_67
	branch t1_69 >=u t6_70 l2306D174
l2306D15C:
	t1_69 = t1_69 + a3_53
	t3_71 = a4_67 + -1<i32>
	branch t1_69 <u a3_53 l2306D174
l2306D168:
	branch t1_69 >=u t6_70 l2306D174
l2306D16C:
	t3_71 = a4_67 + -2<i32>
	t1_69 = t1_69 + a3_53
l2306D174:
	word32 t1_78 = t1_69 - t6_70
	word32 t1_84 = t1_78 >>u (a3_53 >>u 0x10<u32>)
	word32 t6_86 = (t1_78 & a3_53 >>u 0x10<u32>) << 0x10<u32> | CONVERT(SLICE(a5_61, word16, 0), word16, word32)
	word32 a1_88 = a1_63 + t1_84
	word32 a5_102 = t1_84
	branch t6_86 >=u a1_88 l2306D1B4
l2306D19C:
	t6_86 = t6_86 + a3_53
	a5_102 = t1_84 + -1<i32>
	branch t6_86 <u a3_53 l2306D1B4
l2306D1A8:
	branch t6_86 >=u a1_88 l2306D1B4
l2306D1AC:
	a5_102 = t1_84 + -2<i32>
	t6_86 = t6_86 + a3_53
l2306D1B4:
	word32 t3_103 = t3_71 << 0x10<u32> | a5_102
	word32 a5_112 = (t3_103 >>u 0x10<u32>) + (a2_65 & 0xFFFF<32>)
	word32 a4_111 = (t3_103 & 0xFFFF<32>) + (a2_65 & 0xFFFF<32>)
	word32 a1_97 = t6_86 - a1_88
	word32 t3_114 = (t3_103 >>u 0x10<u32>) + (a2_65 >>u 0x10<u32>)
	word32 a6_117 = (a4_111 >>u 0x10<u32>) + (((t3_103 & 0xFFFF<32>) + (a2_65 >>u 0x10<u32>)) + a5_112)
	branch a6_117 >=u a5_112 l2306D1FC
l2306D1F8:
	t3_114 = t3_114 + 0x10000<32>
l2306D1FC:
	word32 t3_122 = (a6_117 >>u 0x10<u32>) + t3_114
	word32 a4_129 = ((a6_117 & 0xFFFF<32>) << 0x10<u32>) + (a4_111 & 0xFFFF<32>)
	branch a1_97 <u t3_122 l2306D228
l2306D220:
	branch a1_97 != t3_122 l2306D23C
l2306D224:
	branch a0_66 >=u a4_129 l2306D23C
l2306D228:
l2306D23C:
l2306D0D4:
	branch a3 <u a1 l2306D0DC
l2306D0D8:
	branch a0 <u a2 l2306D0EC
l2306D0DC:
l2306D0EC:
l2306CE4C:
	branch a1 >=u a2 l2306CF44
l2306CF44:
	branch a2 != 0<32> l2306CF50
l2306CF48:
	t1_187 = 1<i32> >>u a3
l2306CF50:
	branch t1_187 >=u 0x10000<32> l2306CFF8
l2306CFF8:
	a4_191 = 16<i32>
	branch t1_187 <u 0x1000000<32> l2306CF64
l2306D004:
	a4_191 = 24<i32>
l2306CF58:
	branch t1_187 <=u 255<i32> l2306CF64
l2306CF60:
	a4_191 = 8<i32>
l2306CF64:
	word32 a1_247
	word32 a6_206 = CONVERT(Mem0[0x2308DB6C<p32> + (t1_187 >>u a4_191):byte], byte, word32) + a4_191
	word32 t3_207 = 32<i32> - a6_206
	branch t3_207 != 0<32> l2306D00C
l2306D00C:
	t1_187 = t1_187 << t3_207
	word32 a2_211 = a1 >>u a6_206
	word32 a6_219 = a0 >>u a6_206 | a1 << t3_207
	word32 a1_221 = CONVERT(SLICE(t1_187, word16, 0), word16, word32)
	a5_214 = a0 << t3_207
	word32 a4_225 = (a2_211 & t1_187 >>u 0x10<u32>) << 0x10<u32> | a6_219 >>u 0x10<u32>
	word32 a2_226 = a1_221 + (a2_211 >>u (t1_187 >>u 0x10<u32>))
	branch a4_225 >=u a2_226 l2306D05C
l2306D04C:
	a4_225 = a4_225 + t1_187
	branch a4_225 <u t1_187 l2306D05C
l2306D054:
	branch a4_225 >=u a2_226 l2306D05C
l2306D058:
	a4_225 = a4_225 + t1_187
l2306D05C:
	word32 a3_231 = a4_225 - a2_226
	word32 a3_240 = a1_221 + (a3_231 >>u (t1_187 >>u 0x10<u32>))
	word32 a1_241 = (a3_231 & t1_187 >>u 0x10<u32>) << 0x10<u32> | CONVERT(SLICE(a6_219, word16, 0), word16, word32)
	branch a1_241 >=u a3_240 l2306D090
l2306D080:
	a1_241 = a1_241 + t1_187
	branch a1_241 <u t1_187 l2306D090
l2306D088:
	branch a1_241 >=u a3_240 l2306D090
l2306D08C:
	a1_241 = a1_241 + t1_187
l2306D090:
	a1_247 = a1_241 - a3_240
l2306CF80:
	a1_247 = a1 - t1_187
l2306CF84:
	word32 a3_251 = t1_187 >>u 0x10<u32>
	word32 a0_252 = t1_187 << 0x10<u32>
	word32 a4_264 = (a1_247 & a3_251) << 0x10<u32> | a5_214 >>u 0x10<u32>
	word32 a1_265 = (a0_252 >>u 0x10<u32>) + (a1_247 >>u a3_251)
	branch a4_264 >=u a1_265 l2306CFBC
l2306CFAC:
	a4_264 = a4_264 + t1_187
	branch a4_264 <u t1_187 l2306CFBC
l2306CFB4:
	branch a4_264 >=u a1_265 l2306CFBC
l2306CFB8:
	a4_264 = a4_264 + t1_187
l2306CFBC:
	word32 a1_270 = a4_264 - a1_265
	word32 a1_278 = (a0_252 >>u 0x10<u32>) + (a1_270 >>u a3_251)
	word32 a5_280 = (a1_270 & a3_251) << 0x10<u32> | CONVERT(SLICE(a5_214, word16, 0), word16, word32)
	branch a5_280 >=u a1_278 l2306CFF0
l2306CFE0:
	word32 a5_282 = a5_280 + t1_187
	branch a5_282 <u t1_187 l2306CFF0
l2306CFE8:
	branch a5_282 >=u a1_278 l2306CFF0
l2306CFEC:
l2306CFF0:
l2306CE58:
	branch a2 >=u 0x10000<32> l2306CF30
l2306CF30:
	a4_191 = 16<i32>
	branch a2 <u 0x1000000<32> l2306CE6C
l2306CF3C:
	a4_191 = 24<i32>
l2306CE60:
	branch a2 <=u 255<i32> l2306CE6C
l2306CE68:
	a4_191 = 8<i32>
l2306CE6C:
	word32 a4_301 = CONVERT(Mem0[0x2308DB6C<p32> + (a2 >>u a4_191):byte], byte, word32) + a4_191
	word32 t3_302 = 32<i32> - a4_301
	branch t3_302 == 0<32> l2306CE9C
l2306CE88:
	t1_187 = a2 << t3_302
	a6_28 = a0 >>u a4_301 | a1 << t3_302
	a5_214 = a0 << t3_302
l2306CE9C:
	word32 a2_312 = t1_187 >>u 0x10<u32>
	word32 a0_316 = t1_187 << 0x10<u32>
	word32 a1_322 = (a0_316 >>u 0x10<u32>) + (a6_28 >>u a2_312)
	word32 a4_324 = (a6_28 & a2_312) << 0x10<u32> | a5_214 >>u 0x10<u32>
	branch a4_324 >=u a1_322 l2306CED4
l2306CEC4:
	a4_324 = a4_324 + t1_187
	branch a4_324 <u t1_187 l2306CED4
l2306CECC:
	branch a4_324 >=u a1_322 l2306CED4
l2306CED0:
	a4_324 = a4_324 + t1_187
l2306CED4:
	word32 a4_329 = a4_324 - a1_322
	word32 a4_337 = (a0_316 >>u 0x10<u32>) + (a4_329 >>u a2_312)
	word32 a5_339 = (a4_329 & a2_312) << 0x10<u32> | CONVERT(SLICE(a5_214, word16, 0), word16, word32)
	branch a5_339 >=u a4_337 l2306CF08
l2306CEF8:
	word32 a5_341 = a5_339 + t1_187
	branch a5_341 <u t1_187 l2306CF08
l2306CF00:
	branch a5_341 >=u a4_337 l2306CF08
l2306CF04:
l2306CF08:
l2306CF0C:
l2306CF14:
	branch a7_10 == 0<32> l2306CF2C
l2306CF18:
l2306CF2C:
	return
__moddi3_exit:


word32 __udivdi3(word32 a0, word32 a1, word32 a2, word32 a3, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mm_check_beacon
//      InitGroupKey
//      cmd_sys_time_now
//      bl_timer_now_us
//      format_int
//      mbedtls_mpi_div_mpi
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31]
// LiveOut: a0 a1 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1 t3 t4 t5
// Preserved: sp
__udivdi3_entry:
l2306D260:
	word32 a4_12
	word32 a1_11
	word32 a5_106 = a1
	word32 a6_129 = a2
	word32 a4_133 = a3
	word32 t1_10 = a0
	branch a3 != 0<32> l2306D4FC
l2306D4FC:
	branch a1 <u a3 l2306D688
l2306D688:
	a1_11 = 0<i32>
	a4_12 = 0<i32>
l2306D500:
	word32 a4_15
	branch a3 >=u 0x10000<32> l2306D54C
l2306D54C:
	a4_15 = 16<i32>
	branch a3 <u 0x1000000<32> l2306D514
l2306D558:
	a4_15 = 24<i32>
l2306D508:
	a4_15 = CONVERT(a3 >u 255<i32>, bool, word32) << 3<u32>
l2306D514:
	word32 a6_30 = CONVERT(Mem0[0x2308DB6C<p32> + (a3 >>u a4_15):byte], byte, word32) + a4_15
	a1_11 = 32<i32> - a6_30
	branch a1_11 != 0<32> l2306D560
l2306D560:
	word32 a3_35 = a2 >>u a6_30 | a3 << a1_11
	word32 a4_38 = a1 >>u a6_30
	word32 t1_43 = a0 >>u a6_30 | a1 << a1_11
	word32 a5_45 = CONVERT(SLICE(a3_35, word16, 0), word16, word32)
	word32 a4_48 = a4_38 >>u (a3_35 >>u 0x10<u32>)
	word32 a2_47 = a2 << a1_11
	word32 a6_50 = (a4_38 & a3_35 >>u 0x10<u32>) << 0x10<u32> | t1_43 >>u 0x10<u32>
	word32 t5_51 = a5_45 + a4_48
	word32 t3_52 = a4_48
	branch a6_50 >=u t5_51 l2306D5C4
l2306D5AC:
	a6_50 = a6_50 + a3_35
	t3_52 = a4_48 + -1<i32>
	branch a6_50 <u a3_35 l2306D5C4
l2306D5B8:
	branch a6_50 >=u t5_51 l2306D5C4
l2306D5BC:
	t3_52 = a4_48 + -2<i32>
	a6_50 = a6_50 + a3_35
l2306D5C4:
	word32 a6_59 = a6_50 - t5_51
	word32 a6_62 = a6_59 >>u (a3_35 >>u 0x10<u32>)
	word32 t4_65 = a5_45 + a6_62
	word32 a5_69 = (a6_59 & a3_35 >>u 0x10<u32>) << 0x10<u32> | CONVERT(SLICE(t1_43, word16, 0), word16, word32)
	word32 a4_70 = a6_62
	branch a5_69 >=u t4_65 l2306D604
l2306D5EC:
	a5_69 = a5_69 + a3_35
	a4_70 = a6_62 + -1<i32>
	branch a5_69 <u a3_35 l2306D604
l2306D5F8:
	branch a5_69 >=u t4_65 l2306D604
l2306D5FC:
	a4_70 = a6_62 + -2<i32>
	a5_69 = a5_69 + a3_35
l2306D604:
	a4_12 = t3_52 << 0x10<u32> | a4_70
	word32 a6_93 = (a4_12 >>u 0x10<u32>) + (a2_47 & 0xFFFF<32>)
	word32 t3_92 = (a4_12 & 0xFFFF<32>) + (a2_47 & 0xFFFF<32>)
	a5_106 = a5_69 - t4_65
	a3 = (t3_92 >>u 0x10<u32>) + (((a4_12 & 0xFFFF<32>) + (a2_47 >>u 0x10<u32>)) + a6_93)
	word32 a7_102 = (a4_12 >>u 0x10<u32>) + (a2_47 >>u 0x10<u32>)
	branch a3 >=u a6_93 l2306D64C
l2306D648:
	a7_102 = a7_102 + 0x10000<32>
l2306D64C:
	word32 a7_103 = (a3 >>u 0x10<u32>) + a7_102
	branch a5_106 <u a7_103 l2306D680
l2306D658:
	branch a5_106 != a7_103 l2306D34C
l2306D65C:
	a5_106 = 0xFFFF<32>
	a3 = ((a3 & 0xFFFF<32>) << 0x10<u32>) + (t3_92 & 0xFFFF<32>)
	a1_11 = 0<i32>
	branch a0 << a1_11 >=u a3 l2306D434
l2306D680:
	a4_12 = a4_12 + -1<i32>
l2306D538:
	a4_12 = 1<i32>
	branch a3 <u a1 l2306D434
l2306D540:
	a4_12 = CONVERT(a0 <u a2, bool, word32) ^ 1<i32>
l2306D274:
	branch a1 >=u a2 l2306D368
l2306D368:
	branch a2 != 0<32> l2306D374
l2306D36C:
	a6_129 = 1<i32> >>u a2
l2306D374:
	branch a6_129 >=u 0x10000<32> l2306D43C
l2306D43C:
	a4_133 = 16<i32>
	branch a6_129 <u 0x1000000<32> l2306D388
l2306D448:
	a4_133 = 24<i32>
l2306D37C:
	branch a6_129 <=u 255<i32> l2306D388
l2306D384:
	a4_133 = 8<i32>
l2306D388:
	word32 a5_195
	word32 a3_147 = CONVERT(Mem0[0x2308DB6C<p32> + (a6_129 >>u a4_133):byte], byte, word32) + a4_133
	word32 a4_149 = 32<i32> - a3_147
	branch a4_149 != 0<32> l2306D450
l2306D450:
	a6_129 = a6_129 << a4_149
	word32 a1_153 = a1 >>u a3_147
	word32 a7_161 = a0 >>u a3_147 | a1 << a4_149
	word32 a5_163 = CONVERT(SLICE(a6_129, word16, 0), word16, word32)
	word32 a1_165 = a1_153 >>u (a6_129 >>u 0x10<u32>)
	t1_10 = a0 << a4_149
	word32 a4_167 = (a1_153 & a6_129 >>u 0x10<u32>) << 0x10<u32> | a7_161 >>u 0x10<u32>
	word32 a3_168 = a5_163 + a1_165
	word32 a2_169 = a1_165
	branch a4_167 >=u a3_168 l2306D4AC
l2306D494:
	a4_167 = a4_167 + a6_129
	a2_169 = a1_165 + -1<i32>
	branch a4_167 <u a6_129 l2306D4AC
l2306D4A0:
	branch a4_167 >=u a3_168 l2306D4AC
l2306D4A4:
	a2_169 = a1_165 + -2<i32>
	a4_167 = a4_167 + a6_129
l2306D4AC:
	word32 a3_176 = a4_167 - a3_168
	word32 a3_182 = a3_176 >>u (a6_129 >>u 0x10<u32>)
	word32 a1_185 = a5_163 + a3_182
	word32 a5_186 = (a3_176 & a6_129 >>u 0x10<u32>) << 0x10<u32> | CONVERT(SLICE(a7_161, word16, 0), word16, word32)
	word32 a4_187 = a3_182
	branch a5_186 >=u a1_185 l2306D4EC
l2306D4D4:
	a5_186 = a5_186 + a6_129
	a4_187 = a3_182 + -1<i32>
	branch a5_186 <u a6_129 l2306D4EC
l2306D4E0:
	branch a5_186 >=u a1_185 l2306D4EC
l2306D4E4:
	a4_187 = a3_182 + -2<i32>
	a5_186 = a5_186 + a6_129
l2306D4EC:
	a5_195 = a5_186 - a1_185
	a1_11 = a2_169 << 0x10<u32> | a4_187
l2306D3A4:
	a5_195 = a1 - a6_129
	a1_11 = 1<i32>
l2306D3AC:
	word32 a2_205 = a6_129 >>u 0x10<u32>
	word32 a7_206 = a6_129 << 0x10<u32>
	word32 a5_216 = a5_195 >>u a2_205
	word32 a3_218 = (a5_195 & a2_205) << 0x10<u32> | t1_10 >>u 0x10<u32>
	word32 a0_219 = (a7_206 >>u 0x10<u32>) + a5_216
	word32 a4_220 = a5_216
	branch a3_218 >=u a0_219 l2306D3F0
l2306D3D8:
	a3_218 = a3_218 + a6_129
	a4_220 = a5_216 + -1<i32>
	branch a3_218 <u a6_129 l2306D3F0
l2306D3E4:
	branch a3_218 >=u a0_219 l2306D3F0
l2306D3E8:
	a4_220 = a5_216 + -2<i32>
	a3_218 = a3_218 + a6_129
l2306D3F0:
	word32 a3_227 = a3_218 - a0_219
	word32 a5_229 = a3_227 & a2_205
	a3 = a3_227 >>u a2_205
	a5_106 = a5_229 << 0x10<u32>
	word32 t1_235 = a5_229 << 0x10<u32> | CONVERT(SLICE(t1_10, word16, 0), word16, word32)
	word32 a7_237 = (a7_206 >>u 0x10<u32>) + a3
	word32 a0_238 = a3
	branch t1_235 >=u a7_237 l2306D42C
l2306D418:
	word32 t1_240 = a6_129 + t1_235
	a0_238 = a3 + -1<i32>
	branch t1_240 <u a6_129 l2306D42C
l2306D424:
	branch t1_240 >=u a7_237 l2306D42C
l2306D428:
	a0_238 = a3 + -2<i32>
l2306D42C:
	a4_12 = a4_220 << 0x10<u32> | a0_238
l2306D280:
	word32 a4_250
	branch a2 >=u 0x10000<32> l2306D354
l2306D354:
	a4_250 = 16<i32>
	branch a2 <u 0x1000000<32> l2306D294
l2306D360:
	a4_250 = 24<i32>
l2306D288:
	a4_250 = CONVERT(a2 >u 255<i32>, bool, word32) << 3<u32>
l2306D294:
	word32 a4_262 = CONVERT(Mem0[0x2308DB6C<p32> + (a2 >>u a4_250):byte], byte, word32) + a4_250
	word32 a3_264 = 32<i32> - a4_262
	branch a3_264 == 0<32> l2306D2C4
l2306D2B0:
	a6_129 = a2 << a3_264
	a1 = a0 >>u a4_262 | a1 << a3_264
	t1_10 = a0 << a3_264
l2306D2C4:
	word32 a0_274 = a6_129 >>u 0x10<u32>
	word32 a2_278 = a6_129 << 0x10<u32>
	word32 a1_283 = a1 >>u a0_274
	word32 a3_285 = (a1 & a0_274) << 0x10<u32> | t1_10 >>u 0x10<u32>
	word32 a5_286 = (a2_278 >>u 0x10<u32>) + a1_283
	word32 a4_287 = a1_283
	branch a3_285 >=u a5_286 l2306D308
l2306D2F0:
	a3_285 = a3_285 + a6_129
	a4_287 = a1_283 + -1<i32>
	branch a3_285 <u a6_129 l2306D308
l2306D2FC:
	branch a3_285 >=u a5_286 l2306D308
l2306D300:
	a4_287 = a1_283 + -2<i32>
	a3_285 = a3_285 + a6_129
l2306D308:
	word32 a3_294 = a3_285 - a5_286
	word32 a5_296 = a3_294 & a0_274
	a3 = a3_294 >>u a0_274
	a5_106 = a5_296 << 0x10<u32>
	word32 t1_302 = a5_296 << 0x10<u32> | CONVERT(SLICE(t1_10, word16, 0), word16, word32)
	word32 a1_304 = (a2_278 >>u 0x10<u32>) + a3
	word32 a0_305 = a3
	branch t1_302 >=u a1_304 l2306D344
l2306D330:
	word32 t1_307 = a6_129 + t1_302
	a0_305 = a3 + -1<i32>
	branch t1_307 <u a6_129 l2306D344
l2306D33C:
	branch t1_307 >=u a1_304 l2306D344
l2306D340:
	a0_305 = a3 + -2<i32>
l2306D344:
	a4_12 = a4_287 << 0x10<u32> | a0_305
l2306D34C:
	a1_11 = 0<i32>
l2306D434:
	a1Out = a1_11
	a3Out = a3
	a4Out = a4_12
	a5Out = a5_106
	return a4_12
__udivdi3_exit:


word32 __umoddi3(word32 a0, word32 a1, word32 a2, word32 a3, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      format_int
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31]
// LiveOut: a0 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1 t3 t4 t5
// Preserved: sp
__umoddi3_entry:
l2306D694:
	word32 a7_167 = a2
	word32 a4_171 = a3
	word32 a5_141 = a0
	word32 a6_10 = a1
	branch a3 != 0<32> l2306D8DC
l2306D8DC:
	branch a1 <u a3 l2306D770
l2306D8E0:
	word32 a4_13
	branch a3 >=u 0x10000<32> l2306D93C
l2306D93C:
	a4_13 = 16<i32>
	branch a3 <u 0x1000000<32> l2306D8F4
l2306D948:
	a4_13 = 24<i32>
l2306D8E8:
	a4_13 = CONVERT(a3 >u 255<i32>, bool, word32) << 3<u32>
l2306D8F4:
	word32 t4_28 = CONVERT(Mem0[0x2308DB6C<p32> + (a3 >>u a4_13):byte], byte, word32) + a4_13
	word32 t3_29 = 32<i32> - t4_28
	branch t3_29 != 0<32> l2306D950
l2306D950:
	word32 a3_33 = a2 >>u t4_28 | a3 << t3_29
	word32 a4_36 = a1 >>u t4_28
	word32 a5_41 = a0 >>u t4_28 | a1 << t3_29
	word32 a1_43 = CONVERT(SLICE(a3_33, word16, 0), word16, word32)
	word32 a4_47 = a4_36 >>u (a3_33 >>u 0x10<u32>)
	word32 a2_45 = a2 << t3_29
	word32 a0_46 = a0 << t3_29
	word32 a7_49 = (a4_36 & a3_33 >>u 0x10<u32>) << 0x10<u32> | a5_41 >>u 0x10<u32>
	word32 t5_50 = a1_43 + a4_47
	word32 t1_51 = a4_47
	branch a7_49 >=u t5_50 l2306D9B8
l2306D9A0:
	a7_49 = a7_49 + a3_33
	t1_51 = a4_47 + -1<i32>
	branch a7_49 <u a3_33 l2306D9B8
l2306D9AC:
	branch a7_49 >=u t5_50 l2306D9B8
l2306D9B0:
	t1_51 = a4_47 + -2<i32>
	a7_49 = a7_49 + a3_33
l2306D9B8:
	word32 a7_58 = a7_49 - t5_50
	word32 a7_61 = a7_58 >>u (a3_33 >>u 0x10<u32>)
	word32 a6_64 = a1_43 + a7_61
	word32 a1_68 = (a7_58 & a3_33 >>u 0x10<u32>) << 0x10<u32> | CONVERT(SLICE(a5_41, word16, 0), word16, word32)
	word32 a5_69 = a7_61
	branch a1_68 >=u a6_64 l2306D9F8
l2306D9E0:
	a1_68 = a1_68 + a3_33
	a5_69 = a7_61 + -1<i32>
	branch a1_68 <u a3_33 l2306D9F8
l2306D9EC:
	branch a1_68 >=u a6_64 l2306D9F8
l2306D9F0:
	a5_69 = a7_61 + -2<i32>
	a1_68 = a1_68 + a3_33
l2306D9F8:
	word32 t1_80 = t1_51 << 0x10<u32> | a5_69
	word32 a5_92 = (t1_80 >>u 0x10<u32>) + (a2_45 & 0xFFFF<32>)
	word32 a4_91 = (t1_80 & 0xFFFF<32>) + (a2_45 & 0xFFFF<32>)
	word32 a1_85 = a1_68 - a6_64
	word32 t1_101 = (t1_80 >>u 0x10<u32>) + (a2_45 >>u 0x10<u32>)
	word32 a6_97 = (a4_91 >>u 0x10<u32>) + (((t1_80 & 0xFFFF<32>) + (a2_45 >>u 0x10<u32>)) + a5_92)
	branch a6_97 >=u a5_92 l2306DA40
l2306DA3C:
	t1_101 = t1_101 + 0x10000<32>
l2306DA40:
	word32 t1_102 = (a6_97 >>u 0x10<u32>) + t1_101
	word32 a4_109 = ((a6_97 & 0xFFFF<32>) << 0x10<u32>) + (a4_91 & 0xFFFF<32>)
	branch a1_85 <u t1_102 l2306DA6C
l2306DA64:
	branch a1_85 != t1_102 l2306DA80
l2306DA68:
	branch a0_46 >=u a4_109 l2306DA80
l2306DA6C:
	word32 a2_117 = a4_109 - a2_45
	t1_102 = t1_102 - (CONVERT(a4_109 <u a2_117, bool, word32) + a3_33)
	a4_109 = a2_117
l2306DA80:
	word32 a4_129 = a0_46 - a4_109
	a5_141 = a1_85 - t1_102 - CONVERT(a0_46 <u a4_129, bool, word32) << t4_28
	a0 = a5_141 | a4_129 >>u t3_29
l2306D918:
	branch a3 <u a1 l2306D920
l2306D91C:
	branch a0 <u a2 l2306D930
l2306D920:
	a5_141 = a0 - a2
l2306D930:
	a0 = a5_141
l2306D6A8:
	word32 t1_187
	branch a1 >=u a2 l2306D788
l2306D788:
	branch a2 != 0<32> l2306D794
l2306D78C:
	a7_167 = 1<i32> >>u a2
l2306D794:
	branch a7_167 >=u 0x10000<32> l2306D83C
l2306D83C:
	a4_171 = 16<i32>
	branch a7_167 <u 0x1000000<32> l2306D7A8
l2306D848:
	a4_171 = 24<i32>
l2306D79C:
	branch a7_167 <=u 255<i32> l2306D7A8
l2306D7A4:
	a4_171 = 8<i32>
l2306D7A8:
	word32 a1_227
	word32 t3_186 = CONVERT(Mem0[0x2308DB6C<p32> + (a7_167 >>u a4_171):byte], byte, word32) + a4_171
	t1_187 = 32<i32> - t3_186
	branch t1_187 != 0<32> l2306D850
l2306D850:
	a7_167 = a7_167 << t1_187
	word32 a4_191 = a1 >>u t3_186
	word32 t3_199 = a0 >>u t3_186 | a1 << t1_187
	word32 a1_201 = CONVERT(SLICE(a7_167, word16, 0), word16, word32)
	a5_141 = a0 << t1_187
	word32 a3_205 = (a4_191 & a7_167 >>u 0x10<u32>) << 0x10<u32> | t3_199 >>u 0x10<u32>
	word32 a4_206 = a1_201 + (a4_191 >>u (a7_167 >>u 0x10<u32>))
	branch a3_205 >=u a4_206 l2306D8A0
l2306D890:
	a3_205 = a3_205 + a7_167
	branch a3_205 <u a7_167 l2306D8A0
l2306D898:
	branch a3_205 >=u a4_206 l2306D8A0
l2306D89C:
	a3_205 = a3_205 + a7_167
l2306D8A0:
	word32 a2_211 = a3_205 - a4_206
	word32 a2_220 = a1_201 + (a2_211 >>u (a7_167 >>u 0x10<u32>))
	word32 a1_221 = (a2_211 & a7_167 >>u 0x10<u32>) << 0x10<u32> | CONVERT(SLICE(t3_199, word16, 0), word16, word32)
	branch a1_221 >=u a2_220 l2306D8D4
l2306D8C4:
	a1_221 = a1_221 + a7_167
	branch a1_221 <u a7_167 l2306D8D4
l2306D8CC:
	branch a1_221 >=u a2_220 l2306D8D4
l2306D8D0:
	a1_221 = a1_221 + a7_167
l2306D8D4:
	a1_227 = a1_221 - a2_220
l2306D7C4:
	a1_227 = a1 - a7_167
l2306D7C8:
	word32 a4_231 = a7_167 >>u 0x10<u32>
	word32 a0_232 = a7_167 << 0x10<u32>
	word32 a3_244 = (a1_227 & a4_231) << 0x10<u32> | a5_141 >>u 0x10<u32>
	word32 a1_245 = (a0_232 >>u 0x10<u32>) + (a1_227 >>u a4_231)
	branch a3_244 >=u a1_245 l2306D800
l2306D7F0:
	a3_244 = a3_244 + a7_167
	branch a3_244 <u a7_167 l2306D800
l2306D7F8:
	branch a3_244 >=u a1_245 l2306D800
l2306D7FC:
	a3_244 = a3_244 + a7_167
l2306D800:
	word32 a1_250 = a3_244 - a1_245
	word32 a1_258 = (a0_232 >>u 0x10<u32>) + (a1_250 >>u a4_231)
	word32 a5_260 = (a1_250 & a4_231) << 0x10<u32> | CONVERT(SLICE(a5_141, word16, 0), word16, word32)
	branch a5_260 >=u a1_258 l2306D834
l2306D824:
	a5_260 = a5_260 + a7_167
	branch a5_260 <u a7_167 l2306D834
l2306D82C:
	branch a5_260 >=u a1_258 l2306D834
l2306D830:
	a5_260 = a5_260 + a7_167
l2306D834:
	a5_141 = a5_260 - a1_258
l2306D6B4:
	branch a2 >=u 0x10000<32> l2306D774
l2306D774:
	a4_171 = 16<i32>
	branch a2 <u 0x1000000<32> l2306D6C8
l2306D780:
	a4_171 = 24<i32>
l2306D6BC:
	branch a2 <=u 255<i32> l2306D6C8
l2306D6C4:
	a4_171 = 8<i32>
l2306D6C8:
	word32 t3_281 = CONVERT(Mem0[0x2308DB6C<p32> + (a2 >>u a4_171):byte], byte, word32) + a4_171
	t1_187 = 32<i32> - t3_281
	branch t1_187 == 0<32> l2306D6F8
l2306D6E4:
	a7_167 = a2 << t1_187
	a6_10 = a0 >>u t3_281 | a1 << t1_187
	a5_141 = a0 << t1_187
l2306D6F8:
	word32 a2_292 = a7_167 >>u 0x10<u32>
	word32 a0_296 = a7_167 << 0x10<u32>
	word32 a3_303 = (a6_10 & a2_292) << 0x10<u32> | a5_141 >>u 0x10<u32>
	word32 a6_304 = (a0_296 >>u 0x10<u32>) + (a6_10 >>u a2_292)
	branch a3_303 >=u a6_304 l2306D730
l2306D720:
	a3_303 = a3_303 + a7_167
	branch a3_303 <u a7_167 l2306D730
l2306D728:
	branch a3_303 >=u a6_304 l2306D730
l2306D72C:
	a3_303 = a3_303 + a7_167
l2306D730:
	word32 a3_309 = a3_303 - a6_304
	word32 a3_317 = (a0_296 >>u 0x10<u32>) + (a3_309 >>u a2_292)
	word32 a5_319 = (a3_309 & a2_292) << 0x10<u32> | CONVERT(SLICE(a5_141, word16, 0), word16, word32)
	branch a5_319 >=u a3_317 l2306D764
l2306D754:
	a5_319 = a5_319 + a7_167
	branch a5_319 <u a7_167 l2306D764
l2306D75C:
	branch a5_319 >=u a3_317 l2306D764
l2306D760:
	a5_319 = a5_319 + a7_167
l2306D764:
	a5_141 = a5_319 - a3_317
l2306D768:
	a0 = a5_141 >>u t1_187
l2306D770:
	a5Out = a5_141
	return a0
__umoddi3_exit:


word32 __adddf3(word32 ra, word32 a0, word32 a1, word32 a2, word32 a3, word32 fflags, word32 frm, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      rf_set_channel
//      pa_adapt
//      trpc_get_default_power_idx
//      rfc_init
//      rf_pri_get_vco_freq_cw
//      rf_pri_get_vco_idac_cw
//      ecvtbuf
//      __floatundisf
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut: a0 a1
// Trashed: a0 a1 a3 a4 a5 a6 a7 t1 t3
// Preserved: a2 ra s0 s1 s2 s3 s4 sp
__adddf3_entry:
l2306DAA4:
	word32 a4_200
	word32 s3_284 = a1 >>u 0x14<u32> & 2047<i32>
	word32 a4_100 = a3 >>u 0x14<u32> & 2047<i32>
	word32 a0_33 = (a3 & 0xFFFFF<32>) << 3<u32>
	word32 a3_217 = s3_284 - a4_100
	word32 s1_17 = __csrrs(frm, fp + -32<i32>)
	word32 t1_106 = a0 << 3<u32>
	word32 s2_111 = a1 >>u 0x1F<u32>
	word32 a1_107 = a0 >>u 0x1D<u32> | (a1 & 0xFFFFF<32>) << 3<u32>
	word32 a5_183 = a2 >>u 0x1D<u32> | a0_33
	word32 a7_184 = a2 << 3<u32>
	word32 a6_124 = a3_217
	branch a1 >>u 0x1F<u32> != a3 >>u 0x1F<u32> l2306DF30
l2306DF30:
	word32 s4_282
	word32 s0_279
	branch a3_217 <= 0<32> l2306E024
l2306E024:
	branch a3_217 == 0<32> l2306E164
l2306E164:
	branch (s3_284 + 1<i32> & 2046<i32>) != 0<32> l2306E2BC
l2306E2BC:
	s4_282 = (a0 << 3<u32>) - (a2 << 3<u32>)
	s0_279 = a1_107 - a5_183 - CONVERT(a0 << 3<u32> <u s4_282, bool, word32)
	branch s0_279 << 8<u32> >= 0<32> l2306E354
l2306E354:
	t1_106 = s4_282 | s0_279
	branch t1_106 != 0<32> l2306E2E8
l2306E35C:
l2306E2D4:
	s4_282 = (a2 << 3<u32>) - (a0 << 3<u32>)
	s0_279 = a5_183 - a1_107 - CONVERT(a2 << 3<u32> <u s4_282, bool, word32)
	s2_111 = a3 >>u 0x1F<u32>
l2306E170:
	word32 a0_55 = a1_107 | a0 << 3<u32>
	word32 a2_56 = a5_183 | a2 << 3<u32>
	branch s3_284 != 0<32> l2306E250
l2306E250:
	branch s3_284 != 2047<i32> l2306E278
l2306E278:
	branch a4_100 != 2047<i32> l2306E2B4
l2306E2B4:
	a4_100 = 0<i32>
l2306E258:
	branch a0_55 == 0<32> l2306E520
l2306E520:
	branch a4_100 == s3_284 l2306E27C
l2306E27C:
	a4_100 = 0<i32>
l2306E524:
	a4_100 = 0<i32>
l2306E25C:
	word32 a3_63 = CONVERT((a1_107 & 0x400000<32>) <u 1<i32>, bool, word32)
	branch a4_100 != s3_284 l2306E52C
l2306E52C:
	a4_100 = a3_63 << 4<u32>
l2306E270:
	a4_100 = a3_63 << 4<u32>
l2306E280:
	branch a2_56 == 0<32> l2306E290
l2306E284:
	branch a5_183 << 9<u32> < 0<32> l2306E290
l2306E28C:
	a4_100 = 16<i32>
l2306E290:
	branch a0_55 != 0<32> l2306E530
l2306E530:
	branch a2_56 == 0<32> l2306E4A8
l2306E4A8:
	a5_183 = a1_107
	a7_184 = a0 << 3<u32>
l2306E534:
l2306E294:
	s2_111 = a3 >>u 0x1F<u32>
	branch a2_56 != 0<32> l2306E4B0
l2306E4B0:
l2306E29C:
	a7_184 = 0<i32>
	s2_111 = 0<i32>
	a5_183 = 0x400000<32>
	a6_124 = 2047<i32>
	a4_100 = 16<i32>
l2306E17C:
	branch a0_55 != 0<32> l2306E204
l2306E204:
	branch a2_56 == 0<32> l2306E194
l2306E208:
	word32 a3_101 = (a0 << 3<u32>) - (a2 << 3<u32>)
	word32 a4_104 = a1_107 - a5_183 - CONVERT(a0 << 3<u32> <u a3_101, bool, word32)
	branch a4_104 << 8<u32> >= 0<32> l2306E238
l2306E238:
	t1_106 = a3_101 | a4_104
	branch t1_106 != 0<32> l2306E3DC
l2306E3DC:
	a1_107 = a4_104
	t1_106 = a3_101
l2306E240:
	s2_111 = CONVERT(s1_17 <u -3<i32>, bool, word32)
l2306E220:
	t1_106 = (a2 << 3<u32>) - (a0 << 3<u32>)
	a1_107 = a5_183 - a1_107 - CONVERT(a2 << 3<u32> <u t1_106, bool, word32)
l2306E180:
	branch a2_56 != 0<32> l2306E3D0
l2306E3D0:
	a1_107 = a5_183
	t1_106 = a2 << 3<u32>
l2306E230:
	s2_111 = a3 >>u 0x1F<u32>
l2306E184:
	s2_111 = CONVERT(s1_17 <u -3<i32>, bool, word32)
	a1_107 = 0<i32>
	t1_106 = 0<i32>
l2306E028:
	word32 s0_128
	a6_124 = a4_100 - s3_284
	branch s3_284 != 0<32> l2306E0A4
l2306E0A4:
	branch a4_100 != 2047<i32> l2306E0C4
l2306E0C4:
	a1_107 = a1_107 | 0x800000<32>
	s0_128 = a6_124
l2306E0AC:
	branch (a5_183 | a2 << 3<u32>) == 0<32> l2306E498
l2306E498:
	a6_124 = 2047<i32>
l2306E0B4:
	s2_111 = a3 >>u 0x1F<u32>
l2306E030:
	branch (a1_107 | a0 << 3<u32>) != 0<32> l2306E05C
l2306E05C:
	s0_128 = a6_124 + -1<i32>
	branch a6_124 != 0xFFFFFFFF<32> l2306E080
l2306E080:
	branch a6_124 != 2047<i32> l2306E0D0
l2306E0D0:
	word32 a3_159
	word32 t1_144
	branch s0_128 > 56<i32> l2306E158
l2306E158:
	t1_144 = CONVERT((a1_107 | a0 << 3<u32>) != 0<32>, bool, word32)
l2306E0D8:
	branch s0_128 > 31<i32> l2306E124
l2306E124:
	word32 a2_148 = a1_107 >>u s0_128 + -32<i32>
	word32 a0_149 = 0<i32>
	branch s0_128 == 32<i32> l2306E144
l2306E138:
	a0_149 = a1_107 << 64<i32> - s0_128
l2306E144:
	t1_144 = a2_148 | CONVERT((a0_149 | a0 << 3<u32>) != 0<32>, bool, word32)
l2306E150:
	a3_159 = 0<i32>
l2306E0E0:
	word32 a0_161 = 32<i32> - s0_128
	t1_144 = a1_107 << a0_161 | (a0 << 3<u32>) >>u s0_128 | CONVERT((a0 << 3<u32>) << a0_161 != 0<32>, bool, word32)
	a3_159 = a1_107 >>u s0_128
l2306E104:
	word32 t1_175 = (a2 << 3<u32>) - t1_144
	a5_183 = a5_183 - a3_159 - CONVERT(a2 << 3<u32> <u t1_175, bool, word32)
	a7_184 = t1_175
	a6_124 = a4_100
	s2_111 = a3 >>u 0x1F<u32>
l2306E088:
	branch (a5_183 | a2 << 3<u32>) == 0<32> l2306E488
l2306E488:
l2306E490:
	a7_184 = 0<i32>
	s2_111 = a3 >>u 0x1F<u32>
l2306E090:
	a4_200 = a5_183 << 9<u32>
	s2_111 = a3 >>u 0x1F<u32>
l2306E064:
	word32 t1_202 = (a2 << 3<u32>) - (a0 << 3<u32>)
	a5_183 = a5_183 - a1_107 - CONVERT(a2 << 3<u32> <u t1_202, bool, word32)
	s2_111 = a3 >>u 0x1F<u32>
	a7_184 = t1_202
l2306E038:
	s2_111 = a3 >>u 0x1F<u32>
	branch a6_124 != 2047<i32> l2306E3C0
l2306E044:
	branch (a5_183 | a2 << 3<u32>) == 0<32> l2306E47C
l2306E04C:
	a4_100 = 0<i32>
	branch a5_183 << 9<u32> < 0<32> l2306DCB4
l2306E058:
l2306DF34:
	branch a4_100 != 0<32> l2306DFD0
l2306DFD0:
	branch s3_284 == 2047<i32> l2306DB8C
l2306DFD8:
	a5_183 = a5_183 | 0x800000<32>
l2306DF38:
	branch (a5_183 | a2 << 3<u32>) == 0<32> l2306DB28
l2306DF40:
	a3_217 = a3_217 + -1<i32>
	branch a3_217 != 0xFFFFFFFF<32> l2306DF60
l2306DF60:
	branch a3_217 == 2047<i32> l2306DB64
l2306DF68:
	word32 a3_239
	word32 a7_224
	branch a3_217 > 56<i32> l2306E018
l2306E018:
	a7_224 = CONVERT((a5_183 | a2 << 3<u32>) != 0<32>, bool, word32)
l2306DF70:
	branch a3_217 > 31<i32> l2306DFE4
l2306DFE4:
	word32 a4_228 = a5_183 >>u a3_217 + -32<i32>
	word32 s0_229 = 0<i32>
	branch a3_217 == 32<i32> l2306E004
l2306DFF8:
	s0_229 = a5_183 << 64<i32> - a3_217
l2306E004:
	a7_224 = a4_228 | CONVERT((s0_229 | a2 << 3<u32>) != 0<32>, bool, word32)
l2306E010:
	a3_239 = 0<i32>
l2306DF78:
	word32 s0_241 = 32<i32> - a3_217
	a7_224 = a5_183 << s0_241 | (a2 << 3<u32>) >>u a3_217 | CONVERT((a2 << 3<u32>) << s0_241 != 0<32>, bool, word32)
	a3_239 = a5_183 >>u a3_217
l2306DF9C:
	a7_184 = (a0 << 3<u32>) - a7_224
	a5_183 = a1_107 - a3_239 - CONVERT(a0 << 3<u32> <u a7_184, bool, word32)
	a6_124 = s3_284
l2306DF48:
	a7_184 = (a0 << 3<u32>) - (a2 << 3<u32>)
	a5_183 = a1_107 - a5_183 - CONVERT(a0 << 3<u32> <u a7_184, bool, word32)
l2306DF58:
	a6_124 = 1<i32>
l2306DFB0:
	branch a5_183 << 8<u32> >= 0<32> l2306E3C0
l2306DFB8:
	s0_279 = a5_183 & 0x7FFFFF<32>
	s4_282 = a7_184
	s3_284 = a6_124
l2306E2E8:
	word32 a0_291
	branch s0_279 == 0<32> l2306E360
l2306E360:
	word32 a4_1933
	a0_291 = __clzsi2(s4_282, out a4_1933) + 32<i32>
l2306E2EC:
	word32 a4_1934
	a0_291 = __clzsi2(s0_279, out a4_1934)
l2306E2F4:
	word32 s0_301
	word32 a6_297 = a0_291 + -8<i32>
	branch a6_297 > 31<i32> l2306E370
l2306E370:
	s0_301 = s4_282 << a0_291 + -40<i32>
	a7_184 = 0<i32>
l2306E300:
	s0_301 = s4_282 >>u 32<i32> - a6_297 | s0_279 << a6_297
	a7_184 = s4_282 << a6_297
l2306E318:
	branch a6_297 < s3_284 l2306E3B0
l2306E3B0:
	a6_124 = s3_284 - a6_297
	a5_183 = s0_301 & 0xFF7FFFFF<32>
l2306E31C:
	word32 a6_319 = a6_297 - s3_284
	branch a6_319 > -30<i32> l2306E380
l2306E380:
	word32 a6_324 = s0_301 >>u a6_319 + -31<i32>
	word32 a4_325 = 0<i32>
	branch a6_319 == -31<i32> l2306E3A0
l2306E394:
	a4_325 = s0_301 << 64<i32> - (a6_319 + 1<i32>)
l2306E3A0:
	t1_106 = a6_324 | CONVERT((a7_184 | a4_325) != 0<32>, bool, word32)
l2306E248:
	a1_107 = 0<i32>
l2306E32C:
	word32 a2_338 = 32<i32> - (a6_319 + 1<i32>)
	t1_106 = s0_301 << a2_338 | a7_184 >>u a6_319 + 1<i32> | CONVERT(a7_184 << a2_338 != 0<32>, bool, word32)
	a1_107 = s0_301 >>u a6_319 + 1<i32>
l2306DB18:
	branch a3_217 <= 0<32> l2306DC80
l2306DC80:
	branch a3_217 == 0<32> l2306DDB8
l2306DDB8:
	a6_124 = s3_284 + 1<i32>
	branch (s3_284 + 1<i32> & 2046<i32>) != 0<32> l2306DE68
l2306DE68:
	branch s3_284 == -2046<i32> l2306DE98
l2306DE98:
	branch s1_17 == 0<32> l2306DEA8
l2306DE9C:
	branch s1_17 != 3<i32> l2306DEB0
l2306DEB0:
	branch s1_17 != 2<i32> l2306DEBC
l2306DEB8:
	branch a1 >>u 0x1F<u32> != 0<32> l2306DEA8
l2306DEA4:
	branch a1 >>u 0x1F<u32> != 0<32> l2306DEBC
l2306DEA8:
	a6_124 = 2047<i32>
l2306DE70:
	word32 a7_352 = (a0 << 3<u32>) + (a2 << 3<u32>)
	word32 t1_355 = a1_107 + a5_183 + CONVERT(a7_352 <u a0 << 3<u32>, bool, word32)
	a7_184 = t1_355 << 0x1F<u32> | a7_352 >>u 1<u32>
	a5_183 = t1_355 >>u 1<u32>
l2306DDC4:
	word32 a3_360 = a1_107 | a0 << 3<u32>
	branch s3_284 != 0<32> l2306DE08
l2306DE08:
	word32 a6_362
	branch s3_284 != 2047<i32> l2306DE40
l2306DE40:
	a6_362 = 0<i32>
	branch a4_100 == 2047<i32> l2306DE28
l2306DE10:
	branch a3_360 == 0<32> l2306E5E8
l2306E5E8:
	branch a4_100 != s3_284 l2306E474
l2306E5EC:
	a6_362 = 0<i32>
l2306DE14:
	a6_362 = CONVERT((a1_107 & 0x400000<32>) <u 1<i32>, bool, word32) << 4<u32>
	branch a4_100 != s3_284 l2306DE4C
l2306DE28:
	branch (a5_183 | a2 << 3<u32>) == 0<32> l2306E5E0
l2306E5E0:
	branch a3_360 == 0<32> l2306DE5C
l2306E5E4:
l2306DE30:
	branch a5_183 << 9<u32> < 0<32> l2306DE48
l2306DE38:
	a6_362 = 16<i32>
l2306DE48:
	branch a3_360 == 0<32> l2306DE5C
l2306DE4C:
	branch (a5_183 | a2 << 3<u32>) != 0<32> l2306E434
l2306E434:
	a4_100 = a6_362
l2306E538:
	s2_111 = 0<i32>
	a5_183 = 0x400000<32>
	a7_184 = 0<i32>
	a6_124 = 2047<i32>
l2306DE54:
	a5_183 = a1_107
	a7_184 = a0 << 3<u32>
l2306DE5C:
	a4_100 = a6_362
l2306E4B4:
	s3_284 = 0<i32>
	a6_124 = 2047<i32>
l2306DDCC:
	branch a3_360 == 0<32> l2306E3C4
l2306DDD0:
	branch (a5_183 | a2 << 3<u32>) == 0<32> l2306E194
l2306DDD8:
	a7_184 = (a2 << 3<u32>) + (a0 << 3<u32>)
	a1_107 = a1_107 + a5_183 + CONVERT(a7_184 <u a0 << 3<u32>, bool, word32)
	branch a1_107 << 8<u32> >= 0<32> l2306E3C8
l2306DDF0:
	a5_183 = a1_107 & 0xFF7FFFFF<32>
	a4_100 = 0<i32>
	a6_124 = 1<i32>
l2306DC84:
	word32 a3_418
	a6_124 = a4_100 - s3_284
	branch s3_284 != 0<32> l2306DD48
l2306DD48:
	branch a4_100 != 2047<i32> l2306DD68
l2306DD68:
	a1_107 = a1_107 | 0x800000<32>
	a3_418 = a6_124
l2306DD50:
	branch (a5_183 | a2 << 3<u32>) == 0<32> l2306E420
l2306E420:
	a7_184 = 0<i32>
l2306DD58:
l2306DD60:
	a6_124 = 2047<i32>
	a4_200 = (a2 >>u 0x1D<u32> | a0_33) << 9<u32>
	s3_284 = 0<i32>
l2306E098:
	branch a4_200 >= 0<32> l2306DBAC
l2306DC8C:
	branch (a1_107 | a0 << 3<u32>) != 0<32> l2306DCD0
l2306DCD0:
	a3_418 = a6_124 + -1<i32>
	branch a6_124 != 0xFFFFFFFF<32> l2306DCF0
l2306DCF0:
	branch a6_124 == 2047<i32> l2306DC9C
l2306DCF8:
	word32 a3_450
	word32 t1_435
	branch a3_418 > 56<i32> l2306DDAC
l2306DDAC:
	t1_435 = CONVERT((a1_107 | a0 << 3<u32>) != 0<32>, bool, word32)
l2306DD00:
	branch a3_418 > 31<i32> l2306DD78
l2306DD78:
	word32 a2_439 = a1_107 >>u a3_418 + -32<i32>
	word32 a0_440 = 0<i32>
	branch a3_418 == 32<i32> l2306DD98
l2306DD8C:
	a0_440 = a1_107 << 64<i32> - a3_418
l2306DD98:
	t1_435 = a2_439 | CONVERT((a0_440 | a0 << 3<u32>) != 0<32>, bool, word32)
l2306DDA4:
	a3_450 = 0<i32>
l2306DD08:
	word32 a0_452 = 32<i32> - a3_418
	t1_435 = a1_107 << a0_452 | (a0 << 3<u32>) >>u a3_418 | CONVERT((a0 << 3<u32>) << a0_452 != 0<32>, bool, word32)
	a3_450 = a1_107 >>u a3_418
l2306DD2C:
	word32 t1_466 = t1_435 + (a2 << 3<u32>)
	a5_183 = a3_450 + a5_183 + CONVERT(t1_466 <u a2 << 3<u32>, bool, word32)
	a7_184 = t1_466
	a6_124 = a4_100
l2306DCD8:
	word32 t1_481 = (a0 << 3<u32>) + (a2 << 3<u32>)
	a5_183 = a1_107 + a5_183 + CONVERT(t1_481 <u a2 << 3<u32>, bool, word32)
	a7_184 = t1_481
l2306DC94:
	branch a6_124 != 2047<i32> l2306E3C0
l2306DC9C:
	branch (a5_183 | a2 << 3<u32>) == 0<32> l2306E47C
l2306E47C:
	a7_184 = 0<i32>
l2306DCA4:
	a4_100 = CONVERT((a5_183 & 0x400000<32>) <u 1<i32>, bool, word32) << 4<u32>
l2306DB1C:
	branch a4_100 != 0<32> l2306DB84
l2306DB84:
	branch s3_284 != 2047<i32> l2306DBB4
l2306DBB4:
	a5_183 = a5_183 | 0x800000<32>
l2306DB8C:
	a7_184 = a1_107 | a0 << 3<u32>
	branch a7_184 == 0<32> l2306E464
l2306E464:
l2306E428:
	a6_124 = 2047<i32>
l2306DB94:
	branch a1_107 << 9<u32> < 0<32> l2306E46C
l2306E46C:
	a5_183 = a1_107
	a7_184 = a0 << 3<u32>
l2306E474:
	a6_124 = 2047<i32>
l2306DB9C:
	a6_124 = 2047<i32>
l2306DB20:
	branch (a5_183 | a2 << 3<u32>) != 0<32> l2306DB3C
l2306DB3C:
	a3_217 = a3_217 + -1<i32>
	branch a3_217 != 0xFFFFFFFF<32> l2306DB5C
l2306DB5C:
	branch a3_217 != 2047<i32> l2306DBBC
l2306DBBC:
	word32 a3_534
	word32 a7_519
	branch a3_217 > 56<i32> l2306DC74
l2306DC74:
	a7_519 = CONVERT((a5_183 | a2 << 3<u32>) != 0<32>, bool, word32)
l2306DBC4:
	branch a3_217 > 31<i32> l2306DC40
l2306DC40:
	word32 a4_523 = a5_183 >>u a3_217 + -32<i32>
	word32 s0_524 = 0<i32>
	branch a3_217 == 32<i32> l2306DC60
l2306DC54:
	s0_524 = a5_183 << 64<i32> - a3_217
l2306DC60:
	a7_519 = a4_523 | CONVERT((s0_524 | a2 << 3<u32>) != 0<32>, bool, word32)
l2306DC6C:
	a3_534 = 0<i32>
l2306DBCC:
	word32 s0_536 = 32<i32> - a3_217
	a7_519 = a5_183 << s0_536 | (a2 << 3<u32>) >>u a3_217 | CONVERT((a2 << 3<u32>) << s0_536 != 0<32>, bool, word32)
	a3_534 = a5_183 >>u a3_217
l2306DBF0:
	a7_184 = a7_519 + (a0 << 3<u32>)
	a5_183 = a3_534 + a1_107 + CONVERT(a7_184 <u a0 << 3<u32>, bool, word32)
	a6_124 = s3_284
l2306DB44:
	a7_184 = (a2 << 3<u32>) + (a0 << 3<u32>)
	a5_183 = a1_107 + a5_183 + CONVERT(a7_184 <u a0 << 3<u32>, bool, word32)
l2306DB54:
	a6_124 = 1<i32>
l2306DC04:
	branch a5_183 << 8<u32> >= 0<32> l2306E3C0
l2306E3C0:
	branch a6_124 != 0<32> l2306DE90
l2306E3C4:
	a1_107 = a5_183
l2306E3C8:
	t1_106 = a7_184
l2306E194:
	a7_184 = t1_106 | a1_107
	branch a7_184 == 0<32> l2306E4BC
l2306E4BC:
	a6_124 = 0<i32>
l2306E42C:
	a5_183 = 0<i32>
	a4_100 = 0<i32>
l2306E19C:
	word32 s3_596 = (a1_107 << 1<u32>) + (t1_106 >>u 0x1F<u32>)
	word32 a5_597 = t1_106 << 1<u32>
	a4_100 = 0<i32>
	branch (a5_597 & 7<i32>) == 0<32> l2306E1E8
l2306E1B8:
	branch s1_17 == 2<i32> l2306E404
l2306E404:
	a4_100 = 1<i32>
	branch s2_111 == 0<32> l2306E1E8
l2306E40C:
	s3_596 = s3_596 + (CONVERT(a5_597 <u -8<i32>, bool, word32) ^ 1<i32>)
	a4_100 = s2_111
l2306E1C0:
	branch s1_17 == 3<i32> l2306E3E8
l2306E3E8:
	a4_100 = s2_111
	branch s2_111 != 0<32> l2306E1E8
l2306E3F0:
	s3_596 = s3_596 + (CONVERT(a5_597 <u -8<i32>, bool, word32) ^ 1<i32>)
	a4_100 = 1<i32>
l2306E1C8:
	a4_100 = 1<i32>
	branch s1_17 != 0<32> l2306E1E8
l2306E1D0:
	branch (a5_597 & 15<i32>) == 4<i32> l2306E1E8
l2306E1DC:
	s3_596 = s3_596 + (CONVERT(a5_597 <u -4<i32>, bool, word32) ^ 1<i32>)
l2306E1E8:
	s3_284 = (s3_596 >>u 0x18<u32> ^ 1<i32>) & 1<i32>
	a5_183 = a1_107
	a7_184 = t1_106
	a6_124 = 0<i32>
l2306DC0C:
	a6_124 = a6_124 + 1<i32>
	branch a6_124 == 2047<i32> l2306DF00
l2306DF00:
	branch s1_17 == 0<32> l2306DF10
l2306DF04:
	branch s1_17 != 3<i32> l2306DF20
l2306DF20:
	branch s1_17 != 2<i32> l2306E440
l2306DF28:
	branch a1 >>u 0x1F<u32> != 0<32> l2306DF10
l2306DF2C:
l2306DEBC:
l2306DF0C:
	branch a1 >>u 0x1F<u32> != 0<32> l2306E440
l2306E440:
l2306DECC:
	a6_124 = 2046<i32>
	s3_284 = 0<i32>
	a5_183 = -1<i32>
	a7_184 = -1<i32>
	a4_100 = 5<i32>
l2306DF10:
	a5_183 = 0<i32>
	a7_184 = 0<i32>
	a4_100 = 5<i32>
l2306DC18:
	word32 a0_700 = a5_183 & 0xFF7FFFFF<32>
	a7_184 = a0_700 << 0x1F<u32> | (a7_184 >>u 1<u32> | a7_184 & 1<i32>)
	a5_183 = a0_700 >>u 1<u32>
l2306DB28:
	branch a3_217 == 2047<i32> l2306DB64
l2306DB64:
	a7_184 = a1_107 | a0 << 3<u32>
	a5_183 = 0<i32>
	branch a7_184 == 0<32> l2306E544
l2306DB70:
	branch a1_107 << 9<u32> < 0<32> l2306E454
l2306E454:
	a5_183 = a1_107
	a7_184 = a0 << 3<u32>
	s3_284 = 0<i32>
l2306DB78:
l2306DBA8:
	a5_183 = a1_107
	a7_184 = a0 << 3<u32>
	s3_284 = 0<i32>
l2306DBAC:
	a4_100 = 16<i32>
l2306DB30:
	a5_183 = a1_107
	a7_184 = a0 << 3<u32>
l2306DE90:
	s3_284 = 0<i32>
l2306E09C:
	a4_100 = 0<i32>
l2306DCB4:
	branch (a7_184 & 7<i32>) != 0<32> l2306DED0
l2306DED0:
	word32 a1_817
	a4_100 = a4_100 | 1<i32>
	branch s1_17 == 2<i32> l2306E4E0
l2306E4E0:
	branch s2_111 == 0<32> l2306DEF8
l2306E4E4:
l2306DEDC:
	branch s1_17 == 3<i32> l2306E4C8
l2306E4C8:
	branch s2_111 != 0<32> l2306DEF8
l2306E4CC:
	a1_817 = a7_184 + 8<i32>
l2306DEE4:
	branch s1_17 != 0<32> l2306DEF8
l2306DEE8:
	a1_817 = a7_184 + 4<i32>
	branch (a7_184 & 15<i32>) != 4<i32> l2306E4D0
l2306E4D0:
	a5_183 = a5_183 + CONVERT(a1_817 <u a7_184, bool, word32)
	a7_184 = a1_817
l2306DEF8:
	branch s3_284 != 0<32> l2306DCC8
l2306DEFC:
l2306DCBC:
	branch s3_284 == 0<32> l2306E544
l2306DCC0:
	branch (a4_100 & 1<i32>) == 0<32> l2306E544
l2306DCC8:
	a4_100 = a4_100 | 2<i32>
l2306E544:
	branch a5_183 << 8<u32> >= 0<32> l2306E564
l2306E54C:
	a6_124 = a6_124 + 1<i32>
	branch a6_124 == 2047<i32> l2306E4E8
l2306E4E8:
	a7_184 = 0<i32>
	branch s1_17 == 0<32> l2306E514
l2306E4F0:
	branch s1_17 != 3<i32> l2306E508
l2306E508:
	branch s1_17 != 2<i32> l2306E4FC
l2306E510:
	branch s2_111 == 0<32> l2306E4FC
l2306E4F8:
	branch s2_111 == 0<32> l2306E514
l2306E4FC:
	a7_184 = -1<i32>
	a6_124 = 2046<i32>
l2306E514:
	a4_100 = a4_100 | 5<i32>
	a5_183 = a7_184
l2306E558:
	a5_183 = a5_183 & 0xFF7FFFFF<32>
l2306E564:
	word32 a7_938 = a5_183 << 0x1D<u32> | a7_184 >>u 3<u32>
	word32 a5_939 = a5_183 >>u 3<u32>
	branch a6_124 != 2047<i32> l2306E594
l2306E57C:
	a7_938 = a7_938 | a5_939
	a5_939 = 0<i32>
	branch a7_938 == 0<32> l2306E594
l2306E588:
	a5_939 = 0x80000<32>
	a7_938 = 0<i32>
	s2_111 = 0<i32>
l2306E594:
	word32 a1_962 = CONVERT(SLICE(a5_939, word20, 0), word20, word32) | (a6_124 & 2047<i32>) << 0x14<u32> | s2_111 << 0x1F<u32>
	branch a4_100 == 0<32> l2306E5C0
l2306E5BC:
	__csrrs(fflags, ra)
l2306E5C0:
	a1Out = a1_962
	return a7_938
__adddf3_exit:


word32 __divdf3(word32 ra, word32 a0, word32 a1, word32 a2, word32 a3, word32 fflags, word32 frm, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a3Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s9Out, ptr32 & fflagsOut, ptr32 & frmOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      rf_set_channel
//      pa_input
//      ecvtbuf
//      TSEN_Get_Temp
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut: a0 a1 a3 fflags frm ra s0 s1 s2 s3 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 fflags frm ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
__divdf3_entry:
l2306E5F4:
	word32 s1_149
	word32 s3_205
	word32 s6_184
	word32 s8_159
	word32 s2_33 = __csrrs(frm, fp + -48<i32>)
	word32 a6_37 = a1 >>u 0x14<u32> & 2047<i32>
	word32 s7_197 = CONVERT(SLICE(a1, word20, 0), word20, word32)
	branch a6_37 == 0<32> l2306E67C
l2306E67C:
	branch (s7_197 | a0) == 0<32> l2306E77C
l2306E77C:
	s7_197 = 0<i32>
	s3_205 = 0<i32>
	s6_184 = 0<i32>
	s8_159 = 1<i32>
l2306E684:
	word32 a0_48
	branch s7_197 == 0<32> l2306E6C4
l2306E6C4:
	word32 a4_2001
	a0_48 = __clzsi2(a0, out a4_2001) + 32<i32>
l2306E688:
	word32 a4_2002
	a0_48 = __clzsi2(s7_197, out a4_2002)
l2306E690:
	word32 a3_54 = a0_48 + -11<i32>
	branch a3_54 > 28<i32> l2306E6D0
l2306E6D0:
	s7_197 = a0 << a0_48 + -40<i32>
	s3_205 = 0<i32>
l2306E69C:
	word32 s3_61 = a0_48 + -8<i32>
	s7_197 = a0 >>u 29<i32> - a3_54 | s7_197 << s3_61
	s3_205 = a0 << s3_61
l2306E6B8:
	s6_184 = -1011<i32> - a0_48
l2306E64C:
	branch a6_37 == 2047<i32> l2306E6E0
l2306E6E0:
	branch (s7_197 | a0) == 0<32> l2306E790
l2306E790:
	s7_197 = 0<i32>
	s3_205 = 0<i32>
	s6_184 = 2047<i32>
	s8_159 = 2<i32>
l2306E6E8:
	s3_205 = a0
	s6_184 = 2047<i32>
	s8_159 = 3<i32>
	s1_149 = 16<i32>
	branch s7_197 << 0xC<u32> < 0<32> l2306E674
l2306E654:
	s7_197 = a0 >>u 0x1D<u32> | s7_197 << 3<u32> | 0x800000<32>
	s3_205 = a0 << 3<u32>
	s6_184 = a6_37 + -1023<i32>
l2306E670:
	s8_159 = 0<i32>
l2306E674:
	s1_149 = 0<i32>
l2306E700:
	word32 a0_110
	word32 a4_111
	word32 a6_98 = a3 >>u 0x14<u32> & 2047<i32>
	word32 a5_104 = a2
	word32 s0_105 = CONVERT(SLICE(a3, word20, 0), word20, word32)
	branch a6_98 == 0<32> l2306E7A4
l2306E7A4:
	branch (s0_105 | a2) == 0<32> l2306E82C
l2306E82C:
	s0_105 = 0<i32>
	a5_104 = 0<i32>
	a0_110 = 0<i32>
	a4_111 = 1<i32>
l2306E7AC:
	word32 a0_116
	branch s0_105 == 0<32> l2306E7EC
l2306E7EC:
	word32 a4_2003
	a0_116 = __clzsi2(a2, out a4_2003) + 32<i32>
l2306E7B0:
	word32 a4_2004
	a0_116 = __clzsi2(s0_105, out a4_2004)
l2306E7B8:
	word32 a3_122 = a0_116 + -11<i32>
	branch a3_122 > 28<i32> l2306E7FC
l2306E7FC:
	s0_105 = a2 << a0_116 + -40<i32>
	a5_104 = 0<i32>
l2306E7C4:
	word32 a5_129 = a0_116 + -8<i32>
	s0_105 = a2 >>u 29<i32> - a3_122 | s0_105 << a5_129
	a5_104 = a2 << a5_129
l2306E7E0:
	a0_110 = -1011<i32> - a0_116
l2306E71C:
	branch a6_98 == 2047<i32> l2306E80C
l2306E80C:
	branch (s0_105 | a2) == 0<32> l2306E840
l2306E840:
	s0_105 = 0<i32>
	a5_104 = 0<i32>
	a0_110 = 2047<i32>
	a4_111 = 2<i32>
l2306E814:
	a0_110 = 2047<i32>
	branch s0_105 << 0xC<u32> < 0<32> l2306E854
l2306E854:
	a4_111 = 3<i32>
l2306E820:
	a4_111 = 3<i32>
	s1_149 = 16<i32>
l2306E724:
	s0_105 = a2 >>u 0x1D<u32> | s0_105 << 3<u32> | 0x800000<32>
	a5_104 = a2 << 3<u32>
	a0_110 = a6_98 + -1023<i32>
l2306E740:
	a4_111 = 0<i32>
l2306E744:
	word32 a3_166 = s8_159 << 2<u32> | a4_111
	word32 a2_182 = a1 >>u 0x1F<u32> ^ a3 >>u 0x1F<u32>
	word32 a6_192 = s6_184 - a0_110
	branch a3_166 >u -15<i32> l2306E85C
l2306E85C:
	word32 a3_217
	branch s0_105 <u s7_197 l2306E868
l2306E860:
	branch s7_197 != s0_105 l2306EB4C
l2306E864:
	branch s3_205 <u a5_104 l2306EB4C
l2306EB4C:
	a6_192 = a6_192 + -1<i32>
	a3_217 = 0<i32>
l2306E868:
	a3_217 = s3_205 << 0x1F<u32>
	s7_197 = s7_197 >>u 1<u32>
	s3_205 = s7_197 << 0x1F<u32> | s3_205 >>u 1<u32>
l2306E87C:
	word32 a0_233 = a5_104 >>u 0x18<u32> | s0_105 << 8<u32>
	word32 t1_237 = s7_197 >>u (a0_233 >>u 0x10<u32>)
	word32 t4_239 = CONVERT(SLICE(a0_233, word16, 0), word16, word32)
	word32 a1_240 = a5_104 << 8<u32>
	word32 a7_245 = t1_237
	word32 a4_246 = t4_239 + t1_237
	word32 a5_248 = s3_205 >>u 0x10<u32> | (s7_197 & a0_233 >>u 0x10<u32>) << 0x10<u32>
	branch a5_248 >=u a4_246 l2306E8D0
l2306E8B8:
	a5_248 = a5_248 + a0_233
	a7_245 = t1_237 + -1<i32>
	branch a5_248 <u a0_233 l2306E8D0
l2306E8C4:
	branch a5_248 >=u a4_246 l2306E8D0
l2306E8C8:
	a7_245 = t1_237 + -2<i32>
	a5_248 = a5_248 + a0_233
l2306E8D0:
	word32 a5_255 = a5_248 - a4_246
	word32 t3_257 = a5_255 >>u (a0_233 >>u 0x10<u32>)
	word32 s3_262 = t3_257
	word32 t1_264 = CONVERT(SLICE(a0_233, word16, 0), word16, word32) + t3_257
	word32 a4_266 = CONVERT(SLICE(s3_205, word16, 0), word16, word32) | (a5_255 & a0_233 >>u 0x10<u32>) << 0x10<u32>
	branch a4_266 >=u t1_264 l2306E910
l2306E8F8:
	a4_266 = a4_266 + a0_233
	s3_262 = t3_257 + -1<i32>
	branch a4_266 <u a0_233 l2306E910
l2306E904:
	branch a4_266 >=u t1_264 l2306E910
l2306E908:
	s3_262 = t3_257 + -2<i32>
	a4_266 = a4_266 + a0_233
l2306E910:
	word32 s3_276 = a7_245 << 0x10<u32> | s3_262
	word32 s0_289 = (s3_276 >>u 0x10<u32>) + (a1_240 & 0xFFFF<32>)
	word32 a5_288 = (a1_240 & 0xFFFF<32>) + (s3_276 & 0xFFFF<32>)
	word32 a4_285 = a4_266 - t1_264
	word32 t1_293 = (a5_288 >>u 0x10<u32>) + (((a1_240 >>u 0x10<u32>) + (s3_276 & 0xFFFF<32>)) + s0_289)
	word32 t0_294 = (s3_276 >>u 0x10<u32>) + (a1_240 >>u 0x10<u32>)
	branch t1_293 >=u s0_289 l2306E958
l2306E954:
	t0_294 = t0_294 + 0x10000<32>
l2306E958:
	word32 s0_309
	word32 t0_301 = (t1_293 >>u 0x10<u32>) + t0_294
	word32 a7_306 = ((t1_293 & 0xFFFF<32>) << 0x10<u32>) + (a5_288 & 0xFFFF<32>)
	branch a4_285 <u t0_301 l2306E988
l2306E97C:
	s0_309 = s3_276
	branch a4_285 != t0_301 l2306E9C8
l2306E984:
	branch a3_217 >=u a7_306 l2306E9C8
l2306E988:
	a3_217 = a3_217 + a1_240
	a4_285 = a4_285 + (CONVERT(a3_217 <u a1_240, bool, word32) + a0_233)
	s0_309 = s3_276 + -1<i32>
	branch a0_233 <u a4_285 l2306E9A8
l2306E9A0:
	branch a0_233 != a4_285 l2306E9C8
l2306E9A4:
	branch a3_217 <u a1_240 l2306E9C8
l2306E9A8:
	branch a4_285 <u t0_301 l2306E9B4
l2306E9AC:
	branch t0_301 != a4_285 l2306E9C8
l2306E9B0:
	branch a3_217 >=u a7_306 l2306E9C8
l2306E9B4:
	a3_217 = a3_217 + a1_240
	s0_309 = s3_276 + -2<i32>
	a4_285 = a4_285 + (CONVERT(a3_217 <u a1_240, bool, word32) + a0_233)
l2306E9C8:
	word32 a7_349 = a3_217 - a7_306
	word32 a4_355 = a4_285 - t0_301 - CONVERT(a3_217 <u a7_349, bool, word32)
	word32 a5_356 = -1<i32>
	branch a0_233 == a4_355 l2306EB04
l2306E9E0:
	word32 t0_364 = a4_355 >>u (a0_233 >>u 0x10<u32>)
	word32 a3_367 = t0_364
	word32 t1_374 = t4_239 + t0_364
	word32 a4_376 = a7_349 >>u 0x10<u32> | (a4_355 & a0_233 >>u 0x10<u32>) << 0x10<u32>
	branch a4_376 >=u t1_374 l2306EA18
l2306EA00:
	a4_376 = a4_376 + a0_233
	a3_367 = t0_364 + -1<i32>
	branch a4_376 <u a0_233 l2306EA18
l2306EA0C:
	branch a4_376 >=u t1_374 l2306EA18
l2306EA10:
	a3_367 = t0_364 + -2<i32>
	a4_376 = a4_376 + a0_233
l2306EA18:
	word32 a4_383 = a4_376 - t1_374
	word32 t1_385 = a4_383 >>u (a0_233 >>u 0x10<u32>)
	word32 t4_391 = t4_239 + t1_385
	word32 a4_393 = CONVERT(SLICE(a7_349, word16, 0), word16, word32) | (a4_383 & a0_233 >>u 0x10<u32>) << 0x10<u32>
	word32 a5_394 = t1_385
	branch a4_393 >=u t4_391 l2306EA58
l2306EA40:
	a4_393 = a4_393 + a0_233
	a5_394 = t1_385 + -1<i32>
	branch a4_393 <u a0_233 l2306EA58
l2306EA4C:
	branch a4_393 >=u t4_391 l2306EA58
l2306EA50:
	a5_394 = t1_385 + -2<i32>
	a4_393 = a4_393 + a0_233
l2306EA58:
	word32 a3_404 = a3_367 << 0x10<u32> | a5_394
	word32 a5_406 = CONVERT(SLICE(a3_404, word16, 0), word16, word32)
	word32 t3_419 = (a3_404 >>u 0x10<u32>) + (a1_240 & 0xFFFF<32>)
	word32 t5_415 = a5_406 + (a1_240 & 0xFFFF<32>)
	word32 a4_418 = a4_393 - t4_391
	word32 t4_427 = (a1_240 >>u 0x10<u32>) + (a3_404 >>u 0x10<u32>)
	word32 a5_431 = (t5_415 >>u 0x10<u32>) + (((a1_240 >>u 0x10<u32>) + a5_406) + t3_419)
	branch a5_431 >=u t3_419 l2306EA98
l2306EA90:
	t4_427 = t4_427 + 0x10000<32>
l2306EA98:
	word32 t1_443 = (a5_431 >>u 0x10<u32>) + t4_427
	word32 a7_444 = ((a5_431 & 0xFFFF<32>) << 0x10<u32>) + (t5_415 & 0xFFFF<32>)
	branch a4_418 <u t1_443 l2306EAC8
l2306EABC:
	branch a4_418 != t1_443 l2306EE98
l2306EAC0:
	a5_356 = a3_404
	branch a7_444 == 0<32> l2306EB04
l2306EAC8:
	word32 a4_452 = a0_233 + a4_418
	a5_356 = a3_404 + -1<i32>
	branch a4_452 <u a0_233 l2306EAF8
l2306EAD4:
	branch a4_452 <u t1_443 l2306EAE0
l2306EAD8:
	branch a4_452 != t1_443 l2306EE94
l2306EE94:
	a3_404 = a3_404 + -1<i32>
l2306EE98:
	a5_356 = a3_404
l2306EADC:
	branch a1_240 >=u a7_444 l2306EAFC
l2306EAE0:
	a5_356 = a3_404 + -2<i32>
	a4_452 = a4_452 + (CONVERT(a1_240 << 1<u32> <u a1_240, bool, word32) + a0_233)
	a1_240 = a1_240 << 1<u32>
l2306EAF8:
	branch a4_452 != t1_443 l2306EB00
l2306EAFC:
	branch a1_240 == a7_444 l2306EB04
l2306EB00:
	a5_356 = a5_356 | 1<i32>
l2306EB04:
	word32 a5_629
	word32 a4_507
	word32 a0_655
	word32 a1_506 = a6_192 + 1023<i32>
	branch a1_506 <= 0<32> l2306ECA0
l2306ECA0:
	a4_507 = 1<i32>
	branch a1_506 != 0<32> l2306ED10
l2306ECA8:
	word32 a4_522 = s0_309
	branch (a5_356 & 7<i32>) == 0<32> l2306ED04
l2306ECB4:
	word32 a4_603
	s1_149 = s1_149 | 1<i32>
	branch s2_33 == 2<i32> l2306ECFC
l2306ECFC:
	a4_522 = s0_309
	branch a2_182 != 0<32> l2306ECF4
l2306ECC0:
	branch s2_33 == 3<i32> l2306ECEC
l2306ECEC:
	a4_522 = s0_309
	branch a2_182 != 0<32> l2306ED04
l2306ECF4:
	a4_603 = CONVERT(a5_356 <u -8<i32>, bool, word32)
l2306ECC8:
	a4_522 = s0_309
	branch s2_33 != 0<32> l2306ED04
l2306ECD0:
	branch (a5_356 & 15<i32>) == 4<i32> l2306ED04
l2306ECDC:
	a4_603 = CONVERT(a5_356 <u -4<i32>, bool, word32)
l2306ECE0:
	a4_522 = (a4_603 ^ 1<i32>) + s0_309
l2306ED04:
	a4_507 = (a4_522 >>u 0x18<u32> ^ 1<i32>) & 1<i32>
l2306ED10:
	word32 a0_622 = 1<i32> - a1_506
	branch a0_622 > 56<i32> l2306EE14
l2306EE14:
	a5_629 = a5_356 | s0_309
	branch a5_629 == 0<32> l2306EE4C
l2306EE1C:
	word32 a5_640
	s1_149 = s1_149 | 1<i32>
	branch s2_33 == 2<i32> l2306EE5C
l2306EE5C:
	a5_640 = 9<i32>
	branch a2_182 != 0<32> l2306EE48
l2306EE64:
l2306EE28:
	branch s2_33 == 3<i32> l2306EE40
l2306EE40:
	a5_640 = 9<i32>
	branch a2_182 != 0<32> l2306EE38
l2306EE30:
	a5_640 = 5<i32>
	branch s2_33 == 0<32> l2306EE48
l2306EE38:
	a5_640 = 1<i32>
l2306EE48:
	a5_629 = a5_640 >>u 3<u32>
l2306EE4C:
	s1_149 = s1_149 | 2<i32>
	a0_655 = 0<i32>
	a4_507 = 0<i32>
l2306ED20:
	word32 a5_674
	word32 a0_675
	branch a0_622 > 31<i32> l2306ED88
l2306ED88:
	word32 a3_661 = s0_309 >>u -31<i32> - a1_506
	word32 a1_662 = 0<i32>
	branch a0_622 == 32<i32> l2306EDA8
l2306EDA0:
	a1_662 = s0_309 << a6_192 + 1086<i32>
l2306EDA8:
	a5_674 = a3_661 | CONVERT((a1_662 | a5_356) != 0<32>, bool, word32)
	a0_675 = 0<i32>
l2306ED28:
	word32 a6_676 = a6_192 + 1054<i32>
	a5_674 = s0_309 << a6_676 | a5_356 >>u a0_622 | CONVERT(a5_356 << a6_676 != 0<32>, bool, word32)
	a0_675 = s0_309 >>u a0_622
l2306ED48:
	branch (a5_674 & 7<i32>) == 0<32> l2306EDCC
l2306ED50:
	word32 a3_696
	s1_149 = s1_149 | 1<i32>
	branch s2_33 == 2<i32> l2306EDC8
l2306EDC8:
	branch a2_182 != 0<32> l2306EDC0
l2306ED5C:
	branch s2_33 == 3<i32> l2306EDBC
l2306EDBC:
	branch a2_182 != 0<32> l2306EDCC
l2306EDC0:
	a3_696 = a5_674 + 8<i32>
l2306ED64:
	branch s2_33 != 0<32> l2306EDCC
l2306ED68:
	branch (a5_674 & 15<i32>) == 4<i32> l2306EDCC
l2306ED74:
	a3_696 = a5_674 + 4<i32>
l2306ED78:
	a0_675 = a0_675 + CONVERT(a3_696 <u a5_674, bool, word32)
	a5_674 = a3_696
l2306EDCC:
	branch a0_675 << 8<u32> >= 0<32> l2306EDEC
l2306EDEC:
	a5_629 = a0_675 << 0x1D<u32> | a5_674 >>u 3<u32>
	a0_655 = a0_675 >>u 3<u32>
	branch a4_507 == 0<32> l2306EC00
l2306EE00:
	a4_507 = s1_149 & 1<i32>
	branch a4_507 == 0<32> l2306EC00
l2306EE08:
	a4_507 = 0<i32>
l2306EDD4:
	s1_149 = s1_149 | 1<i32>
	a0_655 = 0<i32>
	a5_629 = 0<i32>
	branch a4_507 != 0<32> l2306EE0C
l2306EE0C:
	s1_149 = s1_149 | 2<i32>
l2306EDE4:
	a4_507 = 1<i32>
l2306EB0C:
	branch (a5_356 & 7<i32>) == 0<32> l2306EBCC
l2306EB14:
	word32 a4_737
	s1_149 = s1_149 | 1<i32>
	branch s2_33 == 2<i32> l2306EBC8
l2306EBC8:
	branch a2_182 != 0<32> l2306EBC0
l2306EB20:
	branch s2_33 == 3<i32> l2306EBBC
l2306EBBC:
	branch a2_182 != 0<32> l2306EBCC
l2306EBC0:
	a4_737 = a5_356 + 8<i32>
l2306EB28:
	branch s2_33 != 0<32> l2306EBCC
l2306EB2C:
	branch (a5_356 & 15<i32>) == 4<i32> l2306EBCC
l2306EB38:
	a4_737 = a5_356 + 4<i32>
l2306EB3C:
	s0_309 = s0_309 + CONVERT(a4_737 <u a5_356, bool, word32)
	a5_356 = a4_737
l2306EBCC:
	branch s0_309 << 7<u32> >= 0<32> l2306EBE4
l2306EBD4:
	s0_309 = s0_309 & 0xFEFFFFFF<32>
	a1_506 = a6_192 + 1024<i32>
l2306EBE4:
	branch a1_506 > 2046<i32> l2306EC60
l2306EC60:
	branch s2_33 == 2<i32> l2306EC98
l2306EC98:
	branch a2_182 != 0<32> l2306EC8C
l2306EC9C:
l2306EC68:
	branch s2_33 == 3<i32> l2306EC88
l2306EC88:
	branch a2_182 != 0<32> l2306EC74
l2306EC70:
	branch s2_33 == 0<32> l2306EC8C
l2306EC8C:
	a5_629 = 0<i32>
	a4_507 = 2047<i32>
l2306EC74:
	a5_629 = -1<i32>
	a4_507 = 2046<i32>
l2306EC7C:
	s1_149 = s1_149 | 5<i32>
	a0_655 = a5_629
l2306EBEC:
	a5_629 = s0_309 << 0x1D<u32> | a5_356 >>u 3<u32>
	a0_655 = s0_309 >>u 3<u32>
	a4_507 = a1_506
l2306EC00:
	word32 a3_816 = CONVERT(SLICE(a0_655, word20, 0), word20, word32) | (a4_507 & 2047<i32>) << 0x14<u32> | a2_182 << 0x1F<u32>
	branch s1_149 == 0<32> l2306EC2C
l2306EC28:
	__csrrs(fflags, ra)
l2306EC2C:
	s0Out = s0
	s1Out = s1
	a0Out = a5_629
	a1Out = a3_816
	a3Out = a3_816
	s2Out = s2
	s3Out = s3
	s9Out = s9
	fflagsOut = fflags
	frmOut = frm
	return ra
l2306E760:
	word32 a3_1043 = Mem25[(a3_166 + -1<i32> << 2<u32>) + 0x2308DAF4<p32>:int32] + 0x2308DAF4<p32>
	word32 s0_1057
	word32 s9_1059
	word32 ra_1060
	word32 s1_1061
	word32 s2_1062
	word32 s3_1063
	word32 a0_1068
	word32 a3_1070
	word32 frm_1071
	word32 a1_1073
	word32 fflags_1084
	call a3_1043 (retsize: 0;)
		uses: a0:a0_190,a1:0x2308DAF4<p32>,a2:a2_182,a3:a3_1043,fflags:fflags,frm:frm,ra:ra,s0:s0_193,s1:s1_531,s2:s2_33,s3:s3_205,s4:a1 >>u 0x1F<u32>,s5:a3 >>u 0x1F<u32>,s6:s6_184,s7:s7_197,s8:s8_159,s9:a2
		defs: a0:a0_1068,a1:a1_1073,a3:a3_1070,fflags:fflags_1084,frm:frm_1071,ra:ra_1060,s0:s0_1057,s1:s1_1061,s2:s2_1062,s3:s3_1063,s9:s9_1059
	s0Out = s0_1057
	s1Out = s1_1061
	a0Out = a0_1068
	a1Out = a1_1073
	a3Out = a3_1070
	s2Out = s2_1062
	s3Out = s3_1063
	s9Out = s9_1059
	fflagsOut = fflags_1084
	frmOut = frm_1071
	return ra_1060
__divdf3_exit:


word32 __eqdf2(word32 a0, word32 a1, word32 a2, word32 a3, word32 fflags, word32 frm)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ecvtbuf
//      flt
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] fflags:[0..31] frm:[0..31]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1 t3 t4
// Preserved: sp
__eqdf2_entry:
l2306EEA0:
	__csrrs(frm, fp)
	word32 a4_11 = a1 >>u 0x14<u32> & 2047<i32>
	word32 a7_20 = a3 >>u 0x14<u32> & 2047<i32>
	branch a4_11 != 2047<i32> l2306EEEC
l2306EEEC:
	branch a7_20 != 2047<i32> l2306EEF8
l2306EEDC:
	branch (a1 & 0xFFFFF<32> | a0) != 0<32> l2306EF3C
l2306EEE4:
	branch a7_20 != a4_11 l2306EF60
l2306EEE8:
l2306EEF0:
	branch (a3 & 0xFFFFF<32> | a2) != 0<32> l2306EF2C
l2306EF2C:
	branch a4_11 != 2047<i32> l2306EF58
l2306EF34:
	branch (a1 & 0xFFFFF<32> | a0) == 0<32> l2306EF58
l2306EF3C:
	branch (a1 & 0xFFFFF<32>) << 0xC<u32> >= 0<32> l2306EF1C
l2306EF44:
	branch a7_20 != 2047<i32> l2306EF64
l2306EF50:
	branch (a3 & 0xFFFFF<32> | a2) == 0<32> l2306EF64
l2306EF58:
	branch (a3 & 0xFFFFF<32>) << 0xC<u32> >= 0<32> l2306EF1C
l2306EF1C:
	__csrrs(fflags, 0x10<32>)
l2306EF60:
l2306EEF8:
	branch a4_11 != a7_20 l2306EF64
l2306EF00:
	branch (a1 & 0xFFFFF<32>) != (a3 & 0xFFFFF<32>) l2306EF64
l2306EF04:
	branch a2 != a0 l2306EF64
l2306EF08:
	branch a1 >>u 0x1F<u32> == a3 >>u 0x1F<u32> l2306EF24
l2306EF24:
	return 0<i32>
l2306EF0C:
	branch a4_11 != 0<32> l2306EF64
l2306EF64:
	return 1<i32>
l2306EF10:
	return CONVERT((a1 & 0xFFFFF<32> | a2) != 0<32>, bool, word32)
__eqdf2_exit:


void __gedf2(word32 a0, word32 a1, word32 a2, word32 a3, word32 fflags, word32 frm)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ecvtbuf
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] fflags:[0..31] frm:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1 t3 t4
// Preserved: sp
__gedf2_entry:
l2306EF68:
	word32 a0_33
	__csrrs(frm, fp)
	word32 a6_11 = a1 >>u 0x14<u32> & 2047<i32>
	word32 a4_20 = a3 >>u 0x14<u32> & 2047<i32>
	branch a6_11 != 2047<i32> l2306EFB8
l2306EFB8:
	branch a4_20 != 2047<i32> l2306EFC4
l2306EFA4:
	branch (a1 & 0xFFFFF<32> | a0) == 0<32> l2306F044
l2306F044:
	branch a4_20 == a6_11 l2306EFBC
l2306EFBC:
	branch (a3 & 0xFFFFF<32> | a2) != 0<32> l2306EFAC
l2306EFC4:
	branch a6_11 != 0<32> l2306F048
l2306EFC8:
	a0_33 = CONVERT((a1 & 0xFFFFF<32> | a0) <u 1<i32>, bool, word32)
	branch a4_20 != 0<32> l2306EFDC
l2306F048:
	branch a4_20 != 0<32> l2306EFE0
l2306F04C:
	a0_33 = 0<i32>
l2306EFD4:
	branch (a3 & 0xFFFFF<32> | a2) == 0<32> l2306F034
l2306F034:
	branch a0_33 != 0<32> l2306F024
l2306F038:
l2306EFDC:
	branch a0_33 != 0<32> l2306EFF4
l2306EFF4:
	branch a3 >>u 0x1F<u32> == 0<32> l2306F000
l2306EFFC:
l2306EFE0:
	branch a1 >>u 0x1F<u32> != a3 >>u 0x1F<u32> l2306EFE8
l2306EFE4:
	branch a4_20 >= a6_11 l2306F008
l2306F008:
	branch a6_11 >= a4_20 l2306F014
l2306F014:
	branch (a3 & 0xFFFFF<32>) <u (a1 & 0xFFFFF<32>) l2306EFE8
l2306F018:
	branch (a1 & 0xFFFFF<32>) != (a3 & 0xFFFFF<32>) l2306F03C
l2306F03C:
	branch (a1 & 0xFFFFF<32>) <u (a3 & 0xFFFFF<32>) l2306F00C
l2306F040:
l2306F01C:
	branch a2 <u a0 l2306EFE8
l2306F020:
	branch a0 <u a2 l2306F00C
l2306F024:
l2306F00C:
	branch a1 >>u 0x1F<u32> != 0<32> l2306F000
l2306F010:
l2306EFE8:
	branch a1 >>u 0x1F<u32> == 0<32> l2306F02C
l2306F02C:
l2306EFEC:
l2306EFAC:
	__csrrs(fflags, 0x10<32>)
l2306F000:
	return
__gedf2_exit:


word32 __ledf2(word32 a0, word32 a1, word32 a2, word32 a3, word32 fflags, word32 frm)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      ecvtbuf
//      flt
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] fflags:[0..31] frm:[0..31]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1 t3 t4
// Preserved: sp
__ledf2_entry:
l2306F054:
	word32 a0_33
	__csrrs(frm, fp)
	word32 a6_11 = a1 >>u 0x14<u32> & 2047<i32>
	word32 a1_17 = a1 >>u 0x1F<u32>
	word32 a4_20 = a3 >>u 0x14<u32> & 2047<i32>
	branch a6_11 != 2047<i32> l2306F0A4
l2306F0A4:
	branch a4_20 != 2047<i32> l2306F0B0
l2306F090:
	branch (a1 & 0xFFFFF<32> | a0) == 0<32> l2306F130
l2306F130:
	branch a4_20 == a6_11 l2306F0A8
l2306F0A8:
	branch (a3 & 0xFFFFF<32> | a2) != 0<32> l2306F098
l2306F0B0:
	branch a6_11 != 0<32> l2306F134
l2306F0B4:
	a0_33 = CONVERT((a1 & 0xFFFFF<32> | a0) <u 1<i32>, bool, word32)
	branch a4_20 != 0<32> l2306F0C8
l2306F134:
	branch a4_20 != 0<32> l2306F0CC
l2306F138:
	a0_33 = 0<i32>
l2306F0C0:
	branch (a3 & 0xFFFFF<32> | a2) == 0<32> l2306F120
l2306F120:
	branch a0_33 != 0<32> l2306F110
l2306F124:
l2306F0C8:
	branch a0_33 != 0<32> l2306F0E0
l2306F0E0:
	a1_17 = -1<i32>
	branch a3 >>u 0x1F<u32> == 0<32> l2306F0EC
l2306F0E8:
	a1_17 = a3 >>u 0x1F<u32>
l2306F0CC:
	branch a1 >>u 0x1F<u32> != a3 >>u 0x1F<u32> l2306F0D4
l2306F0D0:
	branch a4_20 >= a6_11 l2306F0F4
l2306F0F4:
	branch a6_11 >= a4_20 l2306F100
l2306F100:
	branch (a3 & 0xFFFFF<32>) <u (a1 & 0xFFFFF<32>) l2306F0D4
l2306F104:
	branch (a1 & 0xFFFFF<32>) != (a3 & 0xFFFFF<32>) l2306F128
l2306F128:
	branch (a1 & 0xFFFFF<32>) <u (a3 & 0xFFFFF<32>) l2306F0F8
l2306F12C:
l2306F108:
	branch a2 <u a0 l2306F0D4
l2306F10C:
	branch a0 <u a2 l2306F0F8
l2306F110:
	a1_17 = 0<i32>
l2306F0F8:
	branch a1 >>u 0x1F<u32> != 0<32> l2306F0EC
l2306F0FC:
l2306F0D4:
	branch a1 >>u 0x1F<u32> == 0<32> l2306F118
l2306F118:
	a1_17 = 1<i32>
l2306F0D8:
	a1_17 = -1<i32>
l2306F098:
	__csrrs(fflags, 0x10<32>)
	a1_17 = 2<i32>
l2306F0EC:
	return a1_17
__ledf2_exit:


word32 __muldf3(word32 ra, word32 a0, word32 a1, word32 a2, word32 a3, word32 fflags, word32 frm, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a7Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s9Out, ptr32 & fflagsOut, ptr32 & frmOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      rf_set_channel
//      pa_input
//      pa_adapt
//      rf_pri_rccal_iq
//      phyif_utils_decode
//      tcpip_stack_input
//      ecvtbuf
//      ADC_Parse_Result
//      __floatundisf
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut: a0 a1 a4 a5 a7 fflags frm ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 fflags frm ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
__muldf3_entry:
l2306F140:
	word32 s1_149
	word32 s4_197
	word32 s7_168
	word32 s8_159
	word32 s2_33 = __csrrs(frm, fp + -48<i32>)
	word32 s7_37 = a1 >>u 0x14<u32> & 2047<i32>
	word32 s3_253 = CONVERT(SLICE(a1, word20, 0), word20, word32)
	branch s7_37 == 0<32> l2306F1C8
l2306F1C8:
	branch (s3_253 | a0) == 0<32> l2306F2CC
l2306F2CC:
	s3_253 = 0<i32>
	s4_197 = 0<i32>
	s7_168 = 0<i32>
	s8_159 = 1<i32>
l2306F1D0:
	word32 a0_48
	branch s3_253 == 0<32> l2306F210
l2306F210:
	word32 a4_1542
	a0_48 = __clzsi2(a0, out a4_1542) + 32<i32>
l2306F1D4:
	word32 a4_1543
	a0_48 = __clzsi2(s3_253, out a4_1543)
l2306F1DC:
	word32 a4_54 = a0_48 + -11<i32>
	branch a4_54 > 28<i32> l2306F21C
l2306F21C:
	s3_253 = a0 << a0_48 + -40<i32>
	s4_197 = 0<i32>
l2306F1E8:
	word32 s4_61 = a0_48 + -8<i32>
	s3_253 = a0 >>u 29<i32> - a4_54 | s3_253 << s4_61
	s4_197 = a0 << s4_61
l2306F204:
	s7_168 = -1011<i32> - a0_48
l2306F198:
	branch s7_37 == 2047<i32> l2306F22C
l2306F22C:
	branch (s3_253 | a0) == 0<32> l2306F2E0
l2306F2E0:
	s3_253 = 0<i32>
	s4_197 = 0<i32>
	s7_168 = 2047<i32>
	s8_159 = 2<i32>
l2306F234:
	s4_197 = a0
	s7_168 = 2047<i32>
	s8_159 = 3<i32>
	s1_149 = 16<i32>
	branch s3_253 << 0xC<u32> < 0<32> l2306F1C0
l2306F1A0:
	s3_253 = a0 >>u 0x1D<u32> | s3_253 << 3<u32> | 0x800000<32>
	s4_197 = a0 << 3<u32>
	s7_168 = s7_37 + -1023<i32>
l2306F1BC:
	s8_159 = 0<i32>
l2306F1C0:
	s1_149 = 0<i32>
l2306F24C:
	word32 a0_110
	word32 a4_111
	word32 a0_98 = a3 >>u 0x14<u32> & 2047<i32>
	word32 a5_104 = a2
	word32 s0_105 = CONVERT(SLICE(a3, word20, 0), word20, word32)
	branch a0_98 == 0<32> l2306F2F4
l2306F2F4:
	branch (s0_105 | a2) == 0<32> l2306F37C
l2306F37C:
	s0_105 = 0<i32>
	a5_104 = 0<i32>
	a0_110 = 0<i32>
	a4_111 = 1<i32>
l2306F2FC:
	word32 a0_116
	branch s0_105 == 0<32> l2306F33C
l2306F33C:
	word32 a4_1544
	a0_116 = __clzsi2(a2, out a4_1544) + 32<i32>
l2306F300:
	word32 a4_1545
	a0_116 = __clzsi2(s0_105, out a4_1545)
l2306F308:
	word32 a3_122 = a0_116 + -11<i32>
	branch a3_122 > 28<i32> l2306F34C
l2306F34C:
	s0_105 = a2 << a0_116 + -40<i32>
	a5_104 = 0<i32>
l2306F314:
	word32 a5_129 = a0_116 + -8<i32>
	s0_105 = a2 >>u 29<i32> - a3_122 | s0_105 << a5_129
	a5_104 = a2 << a5_129
l2306F330:
	a0_110 = -1011<i32> - a0_116
l2306F268:
	branch a0_98 == 2047<i32> l2306F35C
l2306F35C:
	branch (s0_105 | a2) == 0<32> l2306F390
l2306F390:
	s0_105 = 0<i32>
	a5_104 = 0<i32>
	a0_110 = 2047<i32>
	a4_111 = 2<i32>
l2306F364:
	a0_110 = 2047<i32>
	branch s0_105 << 0xC<u32> < 0<32> l2306F3A4
l2306F3A4:
	a4_111 = 3<i32>
l2306F370:
	a4_111 = 3<i32>
	s1_149 = 16<i32>
l2306F270:
	s0_105 = a2 >>u 0x1D<u32> | s0_105 << 3<u32> | 0x800000<32>
	a0_110 = a0_98 + -1023<i32>
	a5_104 = a2 << 3<u32>
l2306F28C:
	a4_111 = 0<i32>
l2306F290:
	word32 a0_176 = s7_168 + a0_110
	word32 a3_166 = s8_159 << 2<u32> | a4_111
	word32 a6_192 = a1 >>u 0x1F<u32> ^ a3 >>u 0x1F<u32>
	word32 a7_1300 = a0_176 + 1<i32>
	branch a3_166 >u -15<i32> l2306F420
l2306F420:
	word32 t5_210 = a5_104 & 0xFFFF<32>
	word32 a4_204 = s4_197 >>u 0x10<u32>
	word32 s4_209 = s4_197 & 0xFFFF<32>
	word32 a3_208 = a5_104 >>u 0x10<u32>
	word32 t4_213 = a4_204 + t5_210
	word32 a5_212 = t5_210 + s4_209
	word32 a2_216 = (a5_212 >>u 0x10<u32>) + ((a3_208 + s4_209) + t4_213)
	word32 t3_217 = a4_204 + a3_208
	branch a2_216 >=u t4_213 l2306F45C
l2306F458:
	t3_217 = t3_217 + 0x10000<32>
l2306F45C:
	word32 t6_230 = s0_105 & 0xFFFF<32>
	word32 t4_229 = s0_105 >>u 0x10<u32>
	word32 a5_236 = a4_204 + t6_230
	word32 a1_234 = s4_209 + t6_230
	word32 a2_232 = ((a2_216 & 0xFFFF<32>) << 0x10<u32>) + (a5_212 & 0xFFFF<32>)
	word32 s4_240 = (a1_234 >>u 0x10<u32>) + ((t4_229 + s4_209) + a5_236)
	word32 a4_241 = a4_204 + t4_229
	branch s4_240 >=u a5_236 l2306F4A0
l2306F498:
	a4_241 = a4_241 + 0x10000<32>
l2306F4A0:
	word32 s0_260 = s3_253 >>u 0x10<u32>
	word32 s3_261 = s3_253 & 0xFFFF<32>
	word32 s4_269 = ((s4_240 & 0xFFFF<32>) << 0x10<u32>) + (a1_234 & 0xFFFF<32>)
	word32 a4_272 = s0_260 + t5_210
	word32 t2_267 = t5_210 + s3_261
	word32 t1_248 = (s4_240 >>u 0x10<u32>) + a4_241
	word32 t0_271 = (a2_216 >>u 0x10<u32>) + s4_269
	word32 t5_275 = a3_208 + s0_260
	word32 a3_279 = (t2_267 >>u 0x10<u32>) + ((a3_208 + s3_261) + a4_272)
	branch a3_279 >=u a4_272 l2306F4F0
l2306F4EC:
	t5_275 = t5_275 + 0x10000<32>
l2306F4F0:
	word32 a5_294 = s0_260 + t6_230
	word32 t2_297 = s3_261 + t6_230
	word32 t5_285 = (a3_279 >>u 0x10<u32>) + t5_275
	word32 a3_295 = ((a3_279 & 0xFFFF<32>) << 0x10<u32>) + (t2_267 & 0xFFFF<32>)
	word32 a1_301 = t4_229 + s0_260
	word32 s3_304 = (t2_297 >>u 0x10<u32>) + ((t4_229 + s3_261) + a5_294)
	branch s3_304 >=u a5_294 l2306F534
l2306F530:
	a1_301 = a1_301 + 0x10000<32>
l2306F534:
	word32 t3_319 = t3_217 + t0_271
	word32 s4_323 = CONVERT(t3_319 <u s4_269, bool, word32)
	word32 a4_326 = ((s3_304 & 0xFFFF<32>) << 0x10<u32>) + (t2_297 & 0xFFFF<32>) + t1_248
	word32 t3_329 = t3_319 + a3_295
	word32 s0_327 = a4_326 + s4_323
	word32 a3_330 = CONVERT(t3_329 <u a3_295, bool, word32)
	word32 t4_332 = s0_327 + t5_285
	word32 t6_333 = t4_332 + a3_330
	word32 s0_347 = (CONVERT(a4_326 <u t1_248, bool, word32) | CONVERT(s0_327 <u s4_323, bool, word32)) + (s3_304 >>u 0x10<u32>) + (CONVERT(t4_332 <u t5_285, bool, word32) | CONVERT(t6_333 <u a3_330, bool, word32)) + a1_301 << 9<u32> | t6_333 >>u 0x17<u32>
	word32 a5_358 = CONVERT((t3_329 << 9<u32> | a2_232) != 0<32>, bool, word32) | t3_329 >>u 0x17<u32> | t6_333 << 9<u32>
	branch s0_347 << 7<u32> >= 0<32> l2306F660
l2306F660:
	a7_1300 = a0_176
l2306F5C4:
	a5_358 = a5_358 >>u 1<u32> | a5_358 & 1<i32> | s0_347 << 0x1F<u32>
	s0_347 = s0_347 >>u 1<u32>
l2306F5DC:
	word32 a5_442
	word32 a4_376
	word32 s0_468
	word32 a1_375 = a7_1300 + 1023<i32>
	branch a1_375 <= 0<32> l2306F6F0
l2306F6F0:
	a4_376 = 1<i32>
	branch a1_375 != 0<32> l2306F760
l2306F6F8:
	word32 a4_380 = s0_347
	branch (a5_358 & 7<i32>) == 0<32> l2306F754
l2306F704:
	word32 a4_416
	s1_149 = s1_149 | 1<i32>
	branch s2_33 == 2<i32> l2306F74C
l2306F74C:
	a4_380 = s0_347
	branch a6_192 != 0<32> l2306F744
l2306F710:
	branch s2_33 == 3<i32> l2306F73C
l2306F73C:
	a4_380 = s0_347
	branch a6_192 != 0<32> l2306F754
l2306F744:
	a4_416 = CONVERT(a5_358 <u -8<i32>, bool, word32)
l2306F718:
	a4_380 = s0_347
	branch s2_33 != 0<32> l2306F754
l2306F720:
	branch (a5_358 & 15<i32>) == 4<i32> l2306F754
l2306F72C:
	a4_416 = CONVERT(a5_358 <u -4<i32>, bool, word32)
l2306F730:
	a4_380 = (a4_416 ^ 1<i32>) + s0_347
l2306F754:
	a4_376 = (a4_380 >>u 0x18<u32> ^ 1<i32>) & 1<i32>
l2306F760:
	word32 a3_435 = 1<i32> - a1_375
	branch a3_435 > 56<i32> l2306F864
l2306F864:
	a5_442 = a5_358 | s0_347
	branch a5_442 == 0<32> l2306F89C
l2306F86C:
	word32 a5_453
	s1_149 = s1_149 | 1<i32>
	branch s2_33 == 2<i32> l2306F8AC
l2306F8AC:
	a5_453 = 9<i32>
	branch a6_192 != 0<32> l2306F898
l2306F8B4:
l2306F878:
	branch s2_33 == 3<i32> l2306F890
l2306F890:
	a5_453 = 9<i32>
	branch a6_192 != 0<32> l2306F888
l2306F880:
	a5_453 = 5<i32>
	branch s2_33 == 0<32> l2306F898
l2306F888:
	a5_453 = 1<i32>
l2306F898:
	a5_442 = a5_453 >>u 3<u32>
l2306F89C:
	s1_149 = s1_149 | 2<i32>
	s0_468 = 0<i32>
	a4_376 = 0<i32>
l2306F770:
	word32 a5_487
	word32 s0_488
	branch a3_435 > 31<i32> l2306F7D8
l2306F7D8:
	word32 a2_474 = s0_347 >>u -31<i32> - a1_375
	word32 a1_475 = 0<i32>
	branch a3_435 == 32<i32> l2306F7F8
l2306F7F0:
	a7_1300 = a7_1300 + 1086<i32>
	a1_475 = s0_347 << a7_1300
l2306F7F8:
	a5_487 = a2_474 | CONVERT((a1_475 | a5_358) != 0<32>, bool, word32)
	s0_488 = 0<i32>
l2306F778:
	a7_1300 = a7_1300 + 1054<i32>
	a5_487 = s0_347 << a7_1300 | a5_358 >>u a3_435 | CONVERT(a5_358 << a7_1300 != 0<32>, bool, word32)
	s0_488 = s0_347 >>u a3_435
l2306F798:
	branch (a5_487 & 7<i32>) == 0<32> l2306F81C
l2306F7A0:
	word32 a3_509
	s1_149 = s1_149 | 1<i32>
	branch s2_33 == 2<i32> l2306F818
l2306F818:
	branch a6_192 != 0<32> l2306F810
l2306F7AC:
	branch s2_33 == 3<i32> l2306F80C
l2306F80C:
	branch a6_192 != 0<32> l2306F81C
l2306F810:
	a3_509 = a5_487 + 8<i32>
l2306F7B4:
	branch s2_33 != 0<32> l2306F81C
l2306F7B8:
	branch (a5_487 & 15<i32>) == 4<i32> l2306F81C
l2306F7C4:
	a3_509 = a5_487 + 4<i32>
l2306F7C8:
	s0_488 = s0_488 + CONVERT(a3_509 <u a5_487, bool, word32)
	a5_487 = a3_509
l2306F81C:
	branch s0_488 << 8<u32> >= 0<32> l2306F83C
l2306F83C:
	a5_442 = s0_488 << 0x1D<u32> | a5_487 >>u 3<u32>
	s0_468 = s0_488 >>u 3<u32>
	branch a4_376 == 0<32> l2306F3C0
l2306F850:
	a4_376 = s1_149 & 1<i32>
	branch a4_376 == 0<32> l2306F3C0
l2306F858:
	a4_376 = 0<i32>
l2306F824:
	s1_149 = s1_149 | 1<i32>
	s0_468 = 0<i32>
	a5_442 = 0<i32>
	branch a4_376 != 0<32> l2306F85C
l2306F85C:
	s1_149 = s1_149 | 2<i32>
l2306F834:
	a4_376 = 1<i32>
l2306F5E4:
	branch (a5_358 & 7<i32>) == 0<32> l2306F678
l2306F5EC:
	word32 a4_550
	s1_149 = s1_149 | 1<i32>
	branch s2_33 == 2<i32> l2306F674
l2306F674:
	branch a6_192 != 0<32> l2306F66C
l2306F5F8:
	branch s2_33 == 3<i32> l2306F668
l2306F668:
	branch a6_192 != 0<32> l2306F678
l2306F66C:
	a4_550 = a5_358 + 8<i32>
l2306F600:
	branch s2_33 != 0<32> l2306F678
l2306F604:
	branch (a5_358 & 15<i32>) == 4<i32> l2306F678
l2306F610:
	a4_550 = a5_358 + 4<i32>
l2306F614:
	s0_347 = s0_347 + CONVERT(a4_550 <u a5_358, bool, word32)
	a5_358 = a4_550
l2306F678:
	branch s0_347 << 7<u32> >= 0<32> l2306F690
l2306F680:
	s0_347 = s0_347 & 0xFEFFFFFF<32>
	a1_375 = a7_1300 + 1024<i32>
l2306F690:
	branch a1_375 > 2046<i32> l2306F6B0
l2306F6B0:
	branch s2_33 == 2<i32> l2306F6E8
l2306F6E8:
	branch a6_192 != 0<32> l2306F6DC
l2306F6EC:
l2306F6B8:
	branch s2_33 == 3<i32> l2306F6D8
l2306F6D8:
	branch a6_192 != 0<32> l2306F6C4
l2306F6C0:
	branch s2_33 == 0<32> l2306F6DC
l2306F6DC:
	a5_442 = 0<i32>
	a4_376 = 2047<i32>
l2306F6C4:
	a5_442 = -1<i32>
	a4_376 = 2046<i32>
l2306F6CC:
	s1_149 = s1_149 | 5<i32>
	s0_468 = a5_442
l2306F698:
	a5_442 = s0_347 << 0x1D<u32> | a5_358 >>u 3<u32>
	s0_468 = s0_347 >>u 3<u32>
	a4_376 = a1_375
l2306F3C0:
	word32 a4_629 = CONVERT(SLICE(s0_468, word20, 0), word20, word32) | (a4_376 & 2047<i32>) << 0x14<u32> | a6_192 << 0x1F<u32>
	branch s1_149 == 0<32> l2306F3EC
l2306F3E8:
	__csrrs(fflags, ra)
l2306F3EC:
	s0Out = s0
	s1Out = s1
	a0Out = a5_442
	a1Out = a4_629
	a4Out = a4_629
	a5Out = a5_442
	a7Out = a7_1300
	s2Out = s2
	s3Out = s3
	s4Out = s4
	s5Out = s5
	s6Out = s6
	s7Out = s7
	s8Out = s8
	s9Out = s9
	fflagsOut = fflags
	frmOut = frm
	return ra
l2306F2B0:
	word32 a3_796 = Mem25[(a3_166 + -1<i32> << 2<u32>) + 0x2308DB30<p32>:int32] + 0x2308DB30<p32>
	word32 s0_819
	word32 s6_820
	word32 s9_821
	word32 ra_822
	word32 s1_823
	word32 s2_824
	word32 s3_825
	word32 s4_826
	word32 s5_827
	word32 s7_828
	word32 s8_829
	word32 a0_830
	word32 frm_833
	word32 a1_834
	word32 a5_835
	word32 a4_836
	word32 a7_838
	word32 fflags_846
	call a3_796 (retsize: 0;)
		uses: a0:a0_176,a1:a1,a2:0x2308DB30<p32>,a3:a3_796,fflags:fflags,frm:frm,ra:ra,s0:s0_226,s1:s1_387,s2:s2_33,s3:s3_253,s4:s4_197,s5:a1 >>u 0x1F<u32>,s6:a3 >>u 0x1F<u32>,s7:s7_168,s8:s8_159,s9:a2
		defs: a0:a0_830,a1:a1_834,a4:a4_836,a5:a5_835,a7:a7_838,fflags:fflags_846,frm:frm_833,ra:ra_822,s0:s0_819,s1:s1_823,s2:s2_824,s3:s3_825,s4:s4_826,s5:s5_827,s6:s6_820,s7:s7_828,s8:s8_829,s9:s9_821
	s0Out = s0_819
	s1Out = s1_823
	a0Out = a0_830
	a1Out = a1_834
	a4Out = a4_836
	a5Out = a5_835
	a7Out = a7_838
	s2Out = s2_824
	s3Out = s3_825
	s4Out = s4_826
	s5Out = s5_827
	s6Out = s6_820
	s7Out = s7_828
	s8Out = s8_829
	s9Out = s9_821
	fflagsOut = fflags_846
	frmOut = frm_833
	return ra_822
__muldf3_exit:


void __subdf3(word32 ra, word32 a0, word32 a1, word32 a2, word32 a3, word32 fflags, word32 frm)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      modf
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1 t3
// Preserved: ra s0 s1 s2 s3 s4 sp
__subdf3_entry:
l2306F8DC:
	word32 s3_17 = __csrrs(frm, fp + -32<i32>)
	word32 a5_136 = a2 >>u 0x1D<u32> | (a3 & 0xFFFFF<32>) << 3<u32>
	word32 a6_210 = a3 >>u 0x14<u32> & 2047<i32>
	word32 s1_291 = a1 >>u 0x14<u32> & 2047<i32>
	word32 s2_104 = a1 >>u 0x1F<u32>
	word32 t3_111 = a0 >>u 0x1D<u32> | (a1 & 0xFFFFF<32>) << 3<u32>
	word32 a7_100 = a0 << 3<u32>
	word32 a3_39 = a3 >>u 0x1F<u32>
	word32 t1_193 = a2 << 3<u32>
	branch a6_210 != 2047<i32> l2306F954
l2306F94C:
	branch (a5_136 | a2 << 3<u32>) != 0<32> l2306F958
l2306F954:
	a3_39 = a3 >>u 0x1F<u32> ^ 1<i32>
l2306F958:
	word32 a4_130 = s1_291 - a6_210
	branch a3_39 != a1 >>u 0x1F<u32> l2306FD78
l2306FD78:
	word32 s4_289
	word32 s0_286
	branch a4_130 <= 0<32> l2306FE70
l2306FE70:
	branch a4_130 == 0<32> l2306FFB4
l2306FFB4:
	branch (s1_291 + 1<i32> & 2046<i32>) != 0<32> l230701AC
l230701AC:
	s4_289 = (a0 << 3<u32>) - (a2 << 3<u32>)
	s0_286 = t3_111 - a5_136 - CONVERT(a0 << 3<u32> <u s4_289, bool, word32)
	branch s0_286 << 8<u32> >= 0<32> l23070244
l23070244:
	a7_100 = s4_289 | s0_286
	branch a7_100 != 0<32> l230701D8
l2307024C:
l230701C4:
	s4_289 = (a2 << 3<u32>) - (a0 << 3<u32>)
	s0_286 = a5_136 - t3_111 - CONVERT(a2 << 3<u32> <u s4_289, bool, word32)
	s2_104 = a3_39
l2306FFC0:
	word32 a1_73 = t3_111 | a0 << 3<u32>
	word32 a2_74 = a5_136 | a2 << 3<u32>
	branch s1_291 != 0<32> l2307009C
l2307009C:
	branch s1_291 != 2047<i32> l230700D0
l230700D0:
	s1_291 = 0<i32>
	branch a6_210 == 2047<i32> l230700BC
l230700A4:
	branch a1_73 == 0<32> l230703F0
l230703F0:
	branch a6_210 == s1_291 l230700F4
l230700F4:
	s1_291 = 0<i32>
l230703F4:
	s1_291 = 0<i32>
l230700A8:
	s1_291 = CONVERT((t3_111 & 0x400000<32>) <u 1<i32>, bool, word32) << 4<u32>
	branch a6_210 != 2047<i32> l230700FC
l230700BC:
	branch a2_74 == 0<32> l230700D8
l230700C0:
	branch a5_136 << 9<u32> < 0<32> l230700D8
l230700C8:
	s1_291 = 16<i32>
l230700D8:
	branch a1_73 != 0<32> l230700FC
l230700FC:
	branch a2_74 == 0<32> l2306FC98
l230700DC:
	branch a2_74 == 0<32> l23070374
l23070374:
	a7_100 = 0<i32>
	s2_104 = 0<i32>
	a5_136 = 0x400000<32>
	a4_130 = 2047<i32>
	s1_291 = 16<i32>
l230700E0:
	a7_100 = a2 << 3<u32>
	s2_104 = a3_39
l2306FFCC:
	branch a1_73 != 0<32> l23070050
l23070050:
	branch a2_74 == 0<32> l2306FFE4
l23070054:
	word32 a2_105 = (a0 << 3<u32>) - (a2 << 3<u32>)
	word32 a4_108 = t3_111 - a5_136 - CONVERT(a0 << 3<u32> <u a2_105, bool, word32)
	branch a4_108 << 8<u32> >= 0<32> l23070084
l23070084:
	a7_100 = a2_105 | a4_108
	branch a7_100 != 0<32> l230702C0
l230702C0:
	t3_111 = a4_108
	a7_100 = a2_105
l2307008C:
	s2_104 = CONVERT(s3_17 <u -3<i32>, bool, word32)
l2307006C:
	a7_100 = (a2 << 3<u32>) - (a0 << 3<u32>)
	t3_111 = a5_136 - t3_111 - CONVERT(a2 << 3<u32> <u a7_100, bool, word32)
l2306FFD0:
	branch a2_74 != 0<32> l230702B4
l230702B4:
	t3_111 = a5_136
	a7_100 = a2 << 3<u32>
l2307007C:
	s2_104 = a3_39
l2306FFD4:
	s2_104 = CONVERT(s3_17 <u -3<i32>, bool, word32)
	t3_111 = 0<i32>
	a7_100 = 0<i32>
l2306FE74:
	word32 s0_134
	a4_130 = a6_210 - s1_291
	branch s1_291 != 0<32> l2306FEEC
l2306FEEC:
	branch a6_210 != 2047<i32> l2306FF14
l2306FF14:
	t3_111 = t3_111 | 0x800000<32>
	s0_134 = a4_130
l2306FEF4:
	a7_100 = a5_136 | a2 << 3<u32>
	branch a7_100 == 0<32> l23070358
l23070358:
	a5_136 = 0<i32>
	a4_130 = 2047<i32>
	s2_104 = a3_39
l2306FEFC:
	a7_100 = a2 << 3<u32>
	branch a5_136 << 9<u32> < 0<32> l23070368
l23070368:
	a4_130 = 2047<i32>
	s2_104 = a3_39
l2306FF08:
	s2_104 = a3_39
l2306FE7C:
	branch (t3_111 | a0 << 3<u32>) != 0<32> l2306FEA0
l2306FEA0:
	s0_134 = a4_130 + -1<i32>
	branch a4_130 != 0xFFFFFFFF<32> l2306FEC4
l2306FEC4:
	branch a4_130 != 2047<i32> l2306FF20
l2306FF20:
	word32 s0_168
	word32 a7_153
	branch s0_134 > 56<i32> l2306FFA8
l2306FFA8:
	a7_153 = CONVERT((t3_111 | a0 << 3<u32>) != 0<32>, bool, word32)
l2306FF28:
	branch s0_134 > 31<i32> l2306FF74
l2306FF74:
	word32 a4_157 = t3_111 >>u s0_134 + -32<i32>
	word32 a0_158 = 0<i32>
	branch s0_134 == 32<i32> l2306FF94
l2306FF88:
	a0_158 = t3_111 << 64<i32> - s0_134
l2306FF94:
	a7_153 = a4_157 | CONVERT((a0_158 | a0 << 3<u32>) != 0<32>, bool, word32)
l2306FFA0:
	s0_168 = 0<i32>
l2306FF30:
	word32 a0_170 = 32<i32> - s0_134
	a7_153 = t3_111 << a0_170 | (a0 << 3<u32>) >>u s0_134 | CONVERT((a0 << 3<u32>) << a0_170 != 0<32>, bool, word32)
	s0_168 = t3_111 >>u s0_134
l2306FF54:
	word32 a7_184 = (a2 << 3<u32>) - a7_153
	a5_136 = a5_136 - s0_168 - CONVERT(a2 << 3<u32> <u a7_184, bool, word32)
	t1_193 = a7_184
	a4_130 = a6_210
	s2_104 = a3_39
l2306FECC:
	a7_100 = a5_136 | a2 << 3<u32>
	branch a7_100 == 0<32> l2307034C
l2307034C:
	a5_136 = 0<i32>
	s2_104 = a3_39
l2306FED4:
	a7_100 = a2 << 3<u32>
	s2_104 = a3_39
	a6_210 = 0<i32>
	branch a5_136 << 9<u32> < 0<32> l2306FC30
l2306FEE8:
l2306FEA8:
	word32 a7_211 = (a2 << 3<u32>) - (a0 << 3<u32>)
	a5_136 = a5_136 - t3_111 - CONVERT(a2 << 3<u32> <u a7_211, bool, word32)
	s2_104 = a3_39
	t1_193 = a7_211
l2306FE84:
	s2_104 = a3_39
	branch a4_130 == 2047<i32> l2306FAD4
l2306FD7C:
	word32 a3_222
	branch a6_210 != 0<32> l2306FE18
l2306FE18:
	branch s1_291 == 2047<i32> l2306F9D0
l2306FE20:
	a5_136 = a5_136 | 0x800000<32>
	a3_222 = a4_130
l2306FD80:
	branch (a5_136 | a2 << 3<u32>) == 0<32> l2306F970
l2306FD88:
	a3_222 = a4_130 + -1<i32>
	branch a4_130 != 0xFFFFFFFF<32> l2306FDA8
l2306FDA8:
	branch a4_130 == 2047<i32> l2306F9AC
l2306FDB0:
	word32 a3_246
	word32 t1_231
	branch a3_222 > 56<i32> l2306FE64
l2306FE64:
	t1_231 = CONVERT((a5_136 | a2 << 3<u32>) != 0<32>, bool, word32)
l2306FDB8:
	branch a3_222 > 31<i32> l2306FE30
l2306FE30:
	word32 a4_235 = a5_136 >>u a3_222 + -32<i32>
	word32 a2_236 = 0<i32>
	branch a3_222 == 32<i32> l2306FE50
l2306FE44:
	a2_236 = a5_136 << 64<i32> - a3_222
l2306FE50:
	t1_231 = a4_235 | CONVERT((a2_236 | a2 << 3<u32>) != 0<32>, bool, word32)
l2306FE5C:
	a3_246 = 0<i32>
l2306FDC0:
	word32 a2_248 = 32<i32> - a3_222
	t1_231 = a5_136 << a2_248 | (a2 << 3<u32>) >>u a3_222 | CONVERT((a2 << 3<u32>) << a2_248 != 0<32>, bool, word32)
	a3_246 = a5_136 >>u a3_222
l2306FDE4:
	t1_193 = (a0 << 3<u32>) - t1_231
	a5_136 = t3_111 - a3_246 - CONVERT(a0 << 3<u32> <u t1_193, bool, word32)
	a4_130 = s1_291
l2306FD90:
	t1_193 = (a0 << 3<u32>) - (a2 << 3<u32>)
	a5_136 = t3_111 - a5_136 - CONVERT(a0 << 3<u32> <u t1_193, bool, word32)
l2306FDA0:
	a4_130 = 1<i32>
l2306FDF8:
	branch a5_136 << 8<u32> >= 0<32> l2306FE90
l2306FE00:
	s0_286 = a5_136 & 0x7FFFFF<32>
	s4_289 = t1_193
	s1_291 = a4_130
l230701D8:
	word32 a0_298
	branch s0_286 == 0<32> l23070250
l23070250:
	word32 a4_1909
	a0_298 = __clzsi2(s4_289, out a4_1909) + 32<i32>
l230701DC:
	word32 a4_1910
	a0_298 = __clzsi2(s0_286, out a4_1910)
l230701E4:
	word32 s0_308
	word32 a4_304 = a0_298 + -8<i32>
	branch a4_304 > 31<i32> l23070260
l23070260:
	s0_308 = s4_289 << a0_298 + -40<i32>
	t1_193 = 0<i32>
l230701F0:
	s0_308 = s4_289 >>u 32<i32> - a4_304 | s0_286 << a4_304
	t1_193 = s4_289 << a4_304
l23070208:
	branch a4_304 < s1_291 l230702A0
l230702A0:
	a4_130 = s1_291 - a4_304
	a5_136 = s0_308 & 0xFF7FFFFF<32>
l2307020C:
	word32 a4_326 = a4_304 - s1_291
	branch a4_326 > -30<i32> l23070270
l23070270:
	word32 a4_331 = s0_308 >>u a4_326 + -31<i32>
	word32 a3_332 = 0<i32>
	branch a4_326 == -31<i32> l23070290
l23070284:
	a3_332 = s0_308 << 64<i32> - (a4_326 + 1<i32>)
l23070290:
	a7_100 = a4_331 | CONVERT((t1_193 | a3_332) != 0<32>, bool, word32)
l23070094:
	t3_111 = 0<i32>
l2307021C:
	word32 a4_345 = 32<i32> - (a4_326 + 1<i32>)
	a7_100 = s0_308 << a4_345 | t1_193 >>u a4_326 + 1<i32> | CONVERT(t1_193 << a4_345 != 0<32>, bool, word32)
	t3_111 = s0_308 >>u a4_326 + 1<i32>
l2306F960:
	branch a4_130 <= 0<32> l2306FAB8
l2306FAB8:
	branch a4_130 == 0<32> l2306FBE0
l2306FBE0:
	a4_130 = s1_291 + 1<i32>
	branch (s1_291 + 1<i32> & 2046<i32>) != 0<32> l2306FCA8
l2306FCA8:
	branch s1_291 == -2046<i32> l2306FCD8
l2306FCD8:
	branch s3_17 == 0<32> l2306FCE8
l2306FCDC:
	branch s3_17 != 3<i32> l2306FCF0
l2306FCF0:
	branch s3_17 != 2<i32> l2306FCFC
l2306FCF8:
	branch a1 >>u 0x1F<u32> != 0<32> l2306FCE8
l2306FCE4:
	branch a1 >>u 0x1F<u32> != 0<32> l2306FCFC
l2306FCE8:
	a4_130 = 2047<i32>
l2306FCB0:
	word32 t1_359 = (a0 << 3<u32>) + (a2 << 3<u32>)
	word32 t3_362 = t3_111 + a5_136 + CONVERT(t1_359 <u a0 << 3<u32>, bool, word32)
	a7_100 = t3_362 << 0x1F<u32> | t1_359 >>u 1<u32>
	a5_136 = t3_362 >>u 1<u32>
l2306FBEC:
	word32 a3_367 = t3_111 | a0 << 3<u32>
	branch s1_291 != 0<32> l2306FC4C
l2306FC4C:
	branch s1_291 != 2047<i32> l2306FC84
l2306FC84:
	s1_291 = 0<i32>
	branch a6_210 == 2047<i32> l2306FC6C
l2306FC54:
	branch a3_367 == 0<32> l23070408
l23070408:
	branch a6_210 == s1_291 l2306FCA0
l2306FCA0:
	s1_291 = 0<i32>
l2307040C:
	a7_100 = a2 << 3<u32>
l2306FC58:
	s1_291 = CONVERT((t3_111 & 0x400000<32>) <u 1<i32>, bool, word32) << 4<u32>
	branch a6_210 != 2047<i32> l2306FC90
l2306FC6C:
	branch (a5_136 | a2 << 3<u32>) == 0<32> l230703FC
l230703FC:
	branch a3_367 != 0<32> l2306FC98
l2306FC74:
	branch a5_136 << 9<u32> < 0<32> l2306FC8C
l2306FC7C:
	s1_291 = 16<i32>
l2306FC8C:
	branch a3_367 == 0<32> l23070400
l23070400:
	a7_100 = a2 << 3<u32>
l2306FC90:
	branch (a5_136 | a2 << 3<u32>) != 0<32> l23070100
l23070100:
	s2_104 = 0<i32>
	a5_136 = 0x400000<32>
	a7_100 = 0<i32>
	a4_130 = 2047<i32>
l2306FC98:
	a5_136 = t3_111
l230700E8:
	a6_210 = 0<i32>
	a4_130 = 2047<i32>
l2306FBF4:
	branch a3_367 == 0<32> l2306FE94
l2306FBF8:
	branch (a5_136 | a2 << 3<u32>) == 0<32> l2306FFE4
l2306FC00:
	t1_193 = (a0 << 3<u32>) + (a2 << 3<u32>)
	t3_111 = t3_111 + a5_136 + CONVERT(t1_193 <u a0 << 3<u32>, bool, word32)
	branch t3_111 << 8<u32> >= 0<32> l2306FE98
l2306FC18:
	a5_136 = t3_111 & 0xFF7FFFFF<32>
	a7_100 = t1_193
	a6_210 = 0<i32>
	a4_130 = 1<i32>
l2306FABC:
	word32 s0_420
	a4_130 = a6_210 - s1_291
	branch s1_291 != 0<32> l2306FB68
l2306FB68:
	branch a6_210 != 2047<i32> l2306FB90
l2306FB90:
	t3_111 = t3_111 | 0x800000<32>
	s0_420 = a4_130
l2306FB70:
	a7_100 = a5_136 | a2 << 3<u32>
	branch a7_100 == 0<32> l23070304
l23070304:
	a5_136 = 0<i32>
l2306FB78:
	a7_100 = a2 << 3<u32>
	branch a5_136 << 9<u32> < 0<32> l2307033C
l2306FAC4:
	branch (t3_111 | a0 << 3<u32>) != 0<32> l2306FAF0
l2306FAF0:
	s0_420 = a4_130 + -1<i32>
	branch a4_130 != 0xFFFFFFFF<32> l2306FB10
l2306FB10:
	branch a4_130 == 2047<i32> l2306FAD4
l2306FB18:
	word32 s0_448
	word32 a7_433
	branch s0_420 > 56<i32> l2306FBD4
l2306FBD4:
	a7_433 = CONVERT((t3_111 | a0 << 3<u32>) != 0<32>, bool, word32)
l2306FB20:
	branch s0_420 > 31<i32> l2306FBA0
l2306FBA0:
	word32 a4_437 = t3_111 >>u s0_420 + -32<i32>
	word32 a0_438 = 0<i32>
	branch s0_420 == 32<i32> l2306FBC0
l2306FBB4:
	a0_438 = t3_111 << 64<i32> - s0_420
l2306FBC0:
	a7_433 = a4_437 | CONVERT((a0_438 | a0 << 3<u32>) != 0<32>, bool, word32)
l2306FBCC:
	s0_448 = 0<i32>
l2306FB28:
	word32 a0_450 = 32<i32> - s0_420
	a7_433 = t3_111 << a0_450 | (a0 << 3<u32>) >>u s0_420 | CONVERT((a0 << 3<u32>) << a0_450 != 0<32>, bool, word32)
	s0_448 = t3_111 >>u s0_420
l2306FB4C:
	word32 a7_464 = a7_433 + (a2 << 3<u32>)
	a5_136 = s0_448 + a5_136 + CONVERT(a7_464 <u a2 << 3<u32>, bool, word32)
	t1_193 = a7_464
	a4_130 = a6_210
l2306FAF8:
	word32 a7_479 = (a0 << 3<u32>) + (a2 << 3<u32>)
	a5_136 = t3_111 + a5_136 + CONVERT(a7_479 <u a2 << 3<u32>, bool, word32)
	t1_193 = a7_479
l2306FACC:
	branch a4_130 != 2047<i32> l2306FE90
l2306FAD4:
	a7_100 = a5_136 | a2 << 3<u32>
	branch a7_100 == 0<32> l23070344
l23070344:
	a5_136 = 0<i32>
l2306FADC:
	a7_100 = a2 << 3<u32>
	a6_210 = 0<i32>
	branch a5_136 << 9<u32> < 0<32> l2306FC30
l2306FAEC:
l2306F964:
	word32 a3_495
	branch a6_210 != 0<32> l2306F9C8
l2306F9C8:
	branch s1_291 != 2047<i32> l2306F9E8
l2306F9E8:
	a5_136 = a5_136 | 0x800000<32>
	a3_495 = a4_130
l2306F9D0:
	a5_136 = t3_111 | a0 << 3<u32>
	branch a5_136 == 0<32> l23070330
l23070330:
	a7_100 = 0<i32>
l23070308:
	a4_130 = 2047<i32>
l2306F9D8:
	branch t3_111 << 9<u32> < 0<32> l23070338
l23070338:
	a5_136 = t3_111
l2307033C:
	a4_130 = 2047<i32>
l2306F9E0:
	a5_136 = t3_111
l2306FB84:
l2306FB88:
	a4_130 = 2047<i32>
	a6_210 = 0<i32>
l2306F968:
	branch (a5_136 | a2 << 3<u32>) != 0<32> l2306F984
l2306F984:
	a3_495 = a4_130 + -1<i32>
	branch a4_130 != 0xFFFFFFFF<32> l2306F9A4
l2306F9A4:
	branch a4_130 != 2047<i32> l2306F9F4
l2306F9F4:
	word32 a3_530
	word32 t1_515
	branch a3_495 > 56<i32> l2306FAAC
l2306FAAC:
	t1_515 = CONVERT((a5_136 | a2 << 3<u32>) != 0<32>, bool, word32)
l2306F9FC:
	branch a3_495 > 31<i32> l2306FA78
l2306FA78:
	word32 a4_519 = a5_136 >>u a3_495 + -32<i32>
	word32 a2_520 = 0<i32>
	branch a3_495 == 32<i32> l2306FA98
l2306FA8C:
	a2_520 = a5_136 << 64<i32> - a3_495
l2306FA98:
	t1_515 = a4_519 | CONVERT((a2_520 | a2 << 3<u32>) != 0<32>, bool, word32)
l2306FAA4:
	a3_530 = 0<i32>
l2306FA04:
	word32 a2_532 = 32<i32> - a3_495
	t1_515 = a5_136 << a2_532 | (a2 << 3<u32>) >>u a3_495 | CONVERT((a2 << 3<u32>) << a2_532 != 0<32>, bool, word32)
	a3_530 = a5_136 >>u a3_495
l2306FA28:
	t1_193 = t1_515 + (a0 << 3<u32>)
	a5_136 = a3_530 + t3_111 + CONVERT(t1_193 <u a0 << 3<u32>, bool, word32)
	a4_130 = s1_291
l2306F98C:
	t1_193 = (a2 << 3<u32>) + (a0 << 3<u32>)
	a5_136 = t3_111 + a5_136 + CONVERT(t1_193 <u a0 << 3<u32>, bool, word32)
l2306F99C:
	a4_130 = 1<i32>
l2306FA3C:
	branch a5_136 << 8<u32> >= 0<32> l2306FE90
l2306FE90:
	branch a4_130 != 0<32> l2307038C
l2307038C:
	a7_100 = t1_193
l2306FE94:
	t3_111 = a5_136
l2306FE98:
	a7_100 = t1_193
l2306FFE4:
	a5_136 = a7_100 | t3_111
	branch a5_136 == 0<32> l23070394
l23070394:
	a7_100 = 0<i32>
	a4_130 = 0<i32>
l2306FFEC:
	word32 a6_592 = (t3_111 << 1<u32>) + (a7_100 >>u 0x1F<u32>)
	word32 a5_593 = a7_100 << 1<u32>
	s1_291 = 0<i32>
	branch (a5_593 & 7<i32>) == 0<32> l23070038
l23070008:
	branch s3_17 == 2<i32> l230702E8
l230702E8:
	s1_291 = 1<i32>
	branch s2_104 == 0<32> l23070038
l230702F0:
	a6_592 = a6_592 + (CONVERT(a5_593 <u -8<i32>, bool, word32) ^ 1<i32>)
	s1_291 = s2_104
l23070010:
	branch s3_17 == 3<i32> l230702CC
l230702CC:
	s1_291 = s2_104
	branch s2_104 != 0<32> l23070038
l230702D4:
	a6_592 = a6_592 + (CONVERT(a5_593 <u -8<i32>, bool, word32) ^ 1<i32>)
	s1_291 = 1<i32>
l23070018:
	s1_291 = 1<i32>
	branch s3_17 != 0<32> l23070038
l23070020:
	branch (a5_593 & 15<i32>) == 4<i32> l23070038
l2307002C:
	a6_592 = a6_592 + (CONVERT(a5_593 <u -4<i32>, bool, word32) ^ 1<i32>)
l23070038:
	a6_210 = (a6_592 >>u 0x18<u32> ^ 1<i32>) & 1<i32>
	a5_136 = t3_111
	a4_130 = 0<i32>
l2306FA44:
	a4_130 = a4_130 + 1<i32>
	branch a4_130 == 2047<i32> l2306FD48
l2306FD48:
	branch s3_17 == 0<32> l2306FD58
l2306FD4C:
	branch s3_17 != 3<i32> l2306FD68
l2306FD68:
	branch s3_17 != 2<i32> l23070310
l2306FD70:
	branch a1 >>u 0x1F<u32> != 0<32> l2306FD58
l2306FD74:
l2306FCFC:
l2306FD54:
	branch a1 >>u 0x1F<u32> != 0<32> l23070310
l23070310:
l2306FD0C:
	a4_130 = 2046<i32>
	a6_210 = 0<i32>
	a5_136 = -1<i32>
	a7_100 = -1<i32>
	s1_291 = 5<i32>
l2306FD58:
	a5_136 = 0<i32>
	a7_100 = 0<i32>
	s1_291 = 5<i32>
l2306FA50:
	word32 a3_695 = a5_136 & 0xFF7FFFFF<32>
	a7_100 = a3_695 << 0x1F<u32> | (t1_193 >>u 1<u32> | t1_193 & 1<i32>)
	a5_136 = a3_695 >>u 1<u32>
l2306FCD0:
	a6_210 = 0<i32>
l2306F970:
	branch a4_130 == 2047<i32> l2306F9AC
l2306F9AC:
	a5_136 = t3_111 | a0 << 3<u32>
	branch a5_136 == 0<32> l23070324
l23070324:
	a7_100 = 0<i32>
l23070328:
	s1_291 = 0<i32>
l2306F9B4:
	branch t3_111 << 9<u32> < 0<32> l2306F978
l2306F9BC:
	a5_136 = t3_111
l2306F9C0:
	s1_291 = 16<i32>
l2306F978:
	a5_136 = t3_111
l2306F97C:
	s1_291 = 0<i32>
l2306FC30:
	branch (a7_100 & 7<i32>) != 0<32> l2306FD10
l2306FD10:
	word32 a3_808
	s1_291 = s1_291 | 1<i32>
	branch s3_17 == 2<i32> l230703AC
l230703AC:
	branch s2_104 != 0<32> l230703A4
l2306FD1C:
	branch s3_17 == 3<i32> l230703A0
l230703A0:
	branch s2_104 != 0<32> l230703B0
l230703A4:
	a3_808 = a7_100 + 8<i32>
l2306FD24:
	branch s3_17 != 0<32> l230703B0
l2306FD28:
	branch (a7_100 & 15<i32>) == 4<i32> l230703B0
l2306FD34:
	a3_808 = a7_100 + 4<i32>
l2306FD38:
	a5_136 = a5_136 + CONVERT(a3_808 <u a7_100, bool, word32)
	a7_100 = a3_808
l230703B0:
	branch a6_210 != 0<32> l2306FC44
l230703B4:
l2306FC38:
	branch a6_210 == 0<32> l23070110
l2306FC3C:
	branch (s1_291 & 1<i32>) == 0<32> l23070110
l2306FC44:
	s1_291 = s1_291 | 2<i32>
l23070110:
	branch a5_136 << 8<u32> >= 0<32> l23070130
l23070118:
	a4_130 = a4_130 + 1<i32>
	branch a4_130 == 2047<i32> l230703B8
l230703B8:
	a7_100 = 0<i32>
	branch s3_17 == 0<32> l230703E4
l230703C0:
	branch s3_17 != 3<i32> l230703D8
l230703D8:
	branch s3_17 != 2<i32> l230703CC
l230703E0:
	branch s2_104 == 0<32> l230703CC
l230703C8:
	branch s2_104 == 0<32> l230703E4
l230703CC:
	a7_100 = -1<i32>
	a4_130 = 2046<i32>
l230703E4:
	s1_291 = s1_291 | 5<i32>
	a5_136 = a7_100
l23070124:
	a5_136 = a5_136 & 0xFF7FFFFF<32>
l23070130:
	word32 a7_917 = a5_136 << 0x1D<u32> | a7_100 >>u 3<u32>
	word32 a5_919 = a5_136 >>u 3<u32>
	branch a4_130 != 2047<i32> l23070160
l23070148:
	branch (a7_917 | a5_919) == 0<32> l23070160
l23070154:
l23070160:
	branch s1_291 == 0<32> l2307018C
l23070188:
	__csrrs(fflags, ra)
l2307018C:
	return
__subdf3_exit:


