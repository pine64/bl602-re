word32 __adddf3(word32 ra, word32 a0, word32 a1, word32 a2, word32 a3, word32 fflags, word32 frm, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pa_adapt
//      rfc_init
//      rf_pri_get_vco_freq_cw
//      rf_pri_get_vco_idac_cw
//      tpc_get_vif_tx_power_vs_rate
//      rf_set_channel
//      parse_value
//      ecvtbuf
//      floor
//      __ieee754_pow
//      __ieee754_sqrt
//      rint
//      scalbn
//      __floatundisf
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut: a0 a1
// Trashed: a0 a1 a3 a4 a5 a6 a7 t1 t3
// Preserved: a2 ra s0 s1 s2 s3 s4 sp
__adddf3_entry:
l230A04B4:
	word32 a4_200
	word32 s3_284 = a1 >>u 0x14<u32> & 2047<i32>
	word32 a4_100 = a3 >>u 0x14<u32> & 2047<i32>
	word32 a0_33 = (a3 & 0xFFFFF<32>) << 3<u32>
	word32 a3_217 = s3_284 - a4_100
	word32 s1_17 = __csrrs(frm, fp + -32<i32>)
	word32 t1_106 = a0 << 3<u32>
	word32 s2_111 = a1 >>u 0x1F<u32>
	word32 a1_107 = a0 >>u 0x1D<u32> | (a1 & 0xFFFFF<32>) << 3<u32>
	word32 a5_183 = a2 >>u 0x1D<u32> | a0_33
	word32 a7_184 = a2 << 3<u32>
	word32 a6_124 = a3_217
	branch a1 >>u 0x1F<u32> != a3 >>u 0x1F<u32> l230A0940
l230A0940:
	word32 s4_282
	word32 s0_279
	branch a3_217 <= 0<32> l230A0A34
l230A0A34:
	branch a3_217 == 0<32> l230A0B74
l230A0B74:
	branch (s3_284 + 1<i32> & 2046<i32>) != 0<32> l230A0CCC
l230A0CCC:
	s4_282 = (a0 << 3<u32>) - (a2 << 3<u32>)
	s0_279 = a1_107 - a5_183 - CONVERT(a0 << 3<u32> <u s4_282, bool, word32)
	branch s0_279 << 8<u32> >= 0<32> l230A0D64
l230A0D64:
	t1_106 = s4_282 | s0_279
	branch t1_106 != 0<32> l230A0CF8
l230A0D6C:
l230A0CE4:
	s4_282 = (a2 << 3<u32>) - (a0 << 3<u32>)
	s0_279 = a5_183 - a1_107 - CONVERT(a2 << 3<u32> <u s4_282, bool, word32)
	s2_111 = a3 >>u 0x1F<u32>
l230A0B80:
	word32 a0_55 = a1_107 | a0 << 3<u32>
	word32 a2_56 = a5_183 | a2 << 3<u32>
	branch s3_284 != 0<32> l230A0C60
l230A0C60:
	branch s3_284 != 2047<i32> l230A0C88
l230A0C88:
	branch a4_100 != 2047<i32> l230A0CC4
l230A0CC4:
	a4_100 = 0<i32>
l230A0C68:
	branch a0_55 == 0<32> l230A0F30
l230A0F30:
	branch a4_100 == s3_284 l230A0C8C
l230A0C8C:
	a4_100 = 0<i32>
l230A0F34:
	a4_100 = 0<i32>
l230A0C6C:
	word32 a3_63 = CONVERT((a1_107 & 0x400000<32>) <u 1<i32>, bool, word32)
	branch a4_100 != s3_284 l230A0F3C
l230A0F3C:
	a4_100 = a3_63 << 4<u32>
l230A0C80:
	a4_100 = a3_63 << 4<u32>
l230A0C90:
	branch a2_56 == 0<32> l230A0CA0
l230A0C94:
	branch a5_183 << 9<u32> < 0<32> l230A0CA0
l230A0C9C:
	a4_100 = 16<i32>
l230A0CA0:
	branch a0_55 != 0<32> l230A0F40
l230A0F40:
	branch a2_56 == 0<32> l230A0EB8
l230A0EB8:
	a5_183 = a1_107
	a7_184 = a0 << 3<u32>
l230A0F44:
l230A0CA4:
	s2_111 = a3 >>u 0x1F<u32>
	branch a2_56 != 0<32> l230A0EC0
l230A0EC0:
l230A0CAC:
	a7_184 = 0<i32>
	s2_111 = 0<i32>
	a5_183 = 0x400000<32>
	a6_124 = 2047<i32>
	a4_100 = 16<i32>
l230A0B8C:
	branch a0_55 != 0<32> l230A0C14
l230A0C14:
	branch a2_56 == 0<32> l230A0BA4
l230A0C18:
	word32 a3_101 = (a0 << 3<u32>) - (a2 << 3<u32>)
	word32 a4_104 = a1_107 - a5_183 - CONVERT(a0 << 3<u32> <u a3_101, bool, word32)
	branch a4_104 << 8<u32> >= 0<32> l230A0C48
l230A0C48:
	t1_106 = a3_101 | a4_104
	branch t1_106 != 0<32> l230A0DEC
l230A0DEC:
	a1_107 = a4_104
	t1_106 = a3_101
l230A0C50:
	s2_111 = CONVERT(s1_17 <u -3<i32>, bool, word32)
l230A0C30:
	t1_106 = (a2 << 3<u32>) - (a0 << 3<u32>)
	a1_107 = a5_183 - a1_107 - CONVERT(a2 << 3<u32> <u t1_106, bool, word32)
l230A0B90:
	branch a2_56 != 0<32> l230A0DE0
l230A0DE0:
	a1_107 = a5_183
	t1_106 = a2 << 3<u32>
l230A0C40:
	s2_111 = a3 >>u 0x1F<u32>
l230A0B94:
	s2_111 = CONVERT(s1_17 <u -3<i32>, bool, word32)
	a1_107 = 0<i32>
	t1_106 = 0<i32>
l230A0A38:
	word32 s0_128
	a6_124 = a4_100 - s3_284
	branch s3_284 != 0<32> l230A0AB4
l230A0AB4:
	branch a4_100 != 2047<i32> l230A0AD4
l230A0AD4:
	a1_107 = a1_107 | 0x800000<32>
	s0_128 = a6_124
l230A0ABC:
	branch (a5_183 | a2 << 3<u32>) == 0<32> l230A0EA8
l230A0EA8:
	a6_124 = 2047<i32>
l230A0AC4:
	s2_111 = a3 >>u 0x1F<u32>
l230A0A40:
	branch (a1_107 | a0 << 3<u32>) != 0<32> l230A0A6C
l230A0A6C:
	s0_128 = a6_124 + -1<i32>
	branch a6_124 != 0xFFFFFFFF<32> l230A0A90
l230A0A90:
	branch a6_124 != 2047<i32> l230A0AE0
l230A0AE0:
	word32 a3_159
	word32 t1_144
	branch s0_128 > 56<i32> l230A0B68
l230A0B68:
	t1_144 = CONVERT((a1_107 | a0 << 3<u32>) != 0<32>, bool, word32)
l230A0AE8:
	branch s0_128 > 31<i32> l230A0B34
l230A0B34:
	word32 a2_148 = a1_107 >>u s0_128 + -32<i32>
	word32 a0_149 = 0<i32>
	branch s0_128 == 32<i32> l230A0B54
l230A0B48:
	a0_149 = a1_107 << 64<i32> - s0_128
l230A0B54:
	t1_144 = a2_148 | CONVERT((a0_149 | a0 << 3<u32>) != 0<32>, bool, word32)
l230A0B60:
	a3_159 = 0<i32>
l230A0AF0:
	word32 a0_161 = 32<i32> - s0_128
	t1_144 = a1_107 << a0_161 | (a0 << 3<u32>) >>u s0_128 | CONVERT((a0 << 3<u32>) << a0_161 != 0<32>, bool, word32)
	a3_159 = a1_107 >>u s0_128
l230A0B14:
	word32 t1_175 = (a2 << 3<u32>) - t1_144
	a5_183 = a5_183 - a3_159 - CONVERT(a2 << 3<u32> <u t1_175, bool, word32)
	a7_184 = t1_175
	a6_124 = a4_100
	s2_111 = a3 >>u 0x1F<u32>
l230A0A98:
	branch (a5_183 | a2 << 3<u32>) == 0<32> l230A0E98
l230A0E98:
l230A0EA0:
	a7_184 = 0<i32>
	s2_111 = a3 >>u 0x1F<u32>
l230A0AA0:
	a4_200 = a5_183 << 9<u32>
	s2_111 = a3 >>u 0x1F<u32>
l230A0A74:
	word32 t1_202 = (a2 << 3<u32>) - (a0 << 3<u32>)
	a5_183 = a5_183 - a1_107 - CONVERT(a2 << 3<u32> <u t1_202, bool, word32)
	s2_111 = a3 >>u 0x1F<u32>
	a7_184 = t1_202
l230A0A48:
	s2_111 = a3 >>u 0x1F<u32>
	branch a6_124 != 2047<i32> l230A0DD0
l230A0A54:
	branch (a5_183 | a2 << 3<u32>) == 0<32> l230A0E8C
l230A0A5C:
	a4_100 = 0<i32>
	branch a5_183 << 9<u32> < 0<32> l230A06C4
l230A0A68:
l230A0944:
	branch a4_100 != 0<32> l230A09E0
l230A09E0:
	branch s3_284 == 2047<i32> l230A059C
l230A09E8:
	a5_183 = a5_183 | 0x800000<32>
l230A0948:
	branch (a5_183 | a2 << 3<u32>) == 0<32> l230A0538
l230A0950:
	a3_217 = a3_217 + -1<i32>
	branch a3_217 != 0xFFFFFFFF<32> l230A0970
l230A0970:
	branch a3_217 == 2047<i32> l230A0574
l230A0978:
	word32 a3_239
	word32 a7_224
	branch a3_217 > 56<i32> l230A0A28
l230A0A28:
	a7_224 = CONVERT((a5_183 | a2 << 3<u32>) != 0<32>, bool, word32)
l230A0980:
	branch a3_217 > 31<i32> l230A09F4
l230A09F4:
	word32 a4_228 = a5_183 >>u a3_217 + -32<i32>
	word32 s0_229 = 0<i32>
	branch a3_217 == 32<i32> l230A0A14
l230A0A08:
	s0_229 = a5_183 << 64<i32> - a3_217
l230A0A14:
	a7_224 = a4_228 | CONVERT((s0_229 | a2 << 3<u32>) != 0<32>, bool, word32)
l230A0A20:
	a3_239 = 0<i32>
l230A0988:
	word32 s0_241 = 32<i32> - a3_217
	a7_224 = a5_183 << s0_241 | (a2 << 3<u32>) >>u a3_217 | CONVERT((a2 << 3<u32>) << s0_241 != 0<32>, bool, word32)
	a3_239 = a5_183 >>u a3_217
l230A09AC:
	a7_184 = (a0 << 3<u32>) - a7_224
	a5_183 = a1_107 - a3_239 - CONVERT(a0 << 3<u32> <u a7_184, bool, word32)
	a6_124 = s3_284
l230A0958:
	a7_184 = (a0 << 3<u32>) - (a2 << 3<u32>)
	a5_183 = a1_107 - a5_183 - CONVERT(a0 << 3<u32> <u a7_184, bool, word32)
l230A0968:
	a6_124 = 1<i32>
l230A09C0:
	branch a5_183 << 8<u32> >= 0<32> l230A0DD0
l230A09C8:
	s0_279 = a5_183 & 0x7FFFFF<32>
	s4_282 = a7_184
	s3_284 = a6_124
l230A0CF8:
	word32 a0_291
	branch s0_279 == 0<32> l230A0D70
l230A0D70:
	word32 a4_1933
	word32 a5_1934
	a0_291 = __clzsi2(s4_282, out a4_1933, out a5_1934) + 32<i32>
l230A0CFC:
	word32 a4_1935
	word32 a5_1936
	a0_291 = __clzsi2(s0_279, out a4_1935, out a5_1936)
l230A0D04:
	word32 s0_301
	word32 a6_297 = a0_291 + -8<i32>
	branch a6_297 > 31<i32> l230A0D80
l230A0D80:
	s0_301 = s4_282 << a0_291 + -40<i32>
	a7_184 = 0<i32>
l230A0D10:
	s0_301 = s4_282 >>u 32<i32> - a6_297 | s0_279 << a6_297
	a7_184 = s4_282 << a6_297
l230A0D28:
	branch a6_297 < s3_284 l230A0DC0
l230A0DC0:
	a6_124 = s3_284 - a6_297
	a5_183 = s0_301 & 0xFF7FFFFF<32>
l230A0D2C:
	word32 a6_319 = a6_297 - s3_284
	branch a6_319 > -30<i32> l230A0D90
l230A0D90:
	word32 a6_324 = s0_301 >>u a6_319 + -31<i32>
	word32 a4_325 = 0<i32>
	branch a6_319 == -31<i32> l230A0DB0
l230A0DA4:
	a4_325 = s0_301 << 64<i32> - (a6_319 + 1<i32>)
l230A0DB0:
	t1_106 = a6_324 | CONVERT((a7_184 | a4_325) != 0<32>, bool, word32)
l230A0C58:
	a1_107 = 0<i32>
l230A0D3C:
	word32 a2_338 = 32<i32> - (a6_319 + 1<i32>)
	t1_106 = s0_301 << a2_338 | a7_184 >>u a6_319 + 1<i32> | CONVERT(a7_184 << a2_338 != 0<32>, bool, word32)
	a1_107 = s0_301 >>u a6_319 + 1<i32>
l230A0528:
	branch a3_217 <= 0<32> l230A0690
l230A0690:
	branch a3_217 == 0<32> l230A07C8
l230A07C8:
	a6_124 = s3_284 + 1<i32>
	branch (s3_284 + 1<i32> & 2046<i32>) != 0<32> l230A0878
l230A0878:
	branch s3_284 == -2046<i32> l230A08A8
l230A08A8:
	branch s1_17 == 0<32> l230A08B8
l230A08AC:
	branch s1_17 != 3<i32> l230A08C0
l230A08C0:
	branch s1_17 != 2<i32> l230A08CC
l230A08C8:
	branch a1 >>u 0x1F<u32> != 0<32> l230A08B8
l230A08B4:
	branch a1 >>u 0x1F<u32> != 0<32> l230A08CC
l230A08B8:
	a6_124 = 2047<i32>
l230A0880:
	word32 a7_352 = (a0 << 3<u32>) + (a2 << 3<u32>)
	word32 t1_355 = a1_107 + a5_183 + CONVERT(a7_352 <u a0 << 3<u32>, bool, word32)
	a7_184 = t1_355 << 0x1F<u32> | a7_352 >>u 1<u32>
	a5_183 = t1_355 >>u 1<u32>
l230A07D4:
	word32 a3_360 = a1_107 | a0 << 3<u32>
	branch s3_284 != 0<32> l230A0818
l230A0818:
	word32 a6_362
	branch s3_284 != 2047<i32> l230A0850
l230A0850:
	a6_362 = 0<i32>
	branch a4_100 == 2047<i32> l230A0838
l230A0820:
	branch a3_360 == 0<32> l230A0FF8
l230A0FF8:
	branch a4_100 != s3_284 l230A0E84
l230A0FFC:
	a6_362 = 0<i32>
l230A0824:
	a6_362 = CONVERT((a1_107 & 0x400000<32>) <u 1<i32>, bool, word32) << 4<u32>
	branch a4_100 != s3_284 l230A085C
l230A0838:
	branch (a5_183 | a2 << 3<u32>) == 0<32> l230A0FF0
l230A0FF0:
	branch a3_360 == 0<32> l230A086C
l230A0FF4:
l230A0840:
	branch a5_183 << 9<u32> < 0<32> l230A0858
l230A0848:
	a6_362 = 16<i32>
l230A0858:
	branch a3_360 == 0<32> l230A086C
l230A085C:
	branch (a5_183 | a2 << 3<u32>) != 0<32> l230A0E44
l230A0E44:
	a4_100 = a6_362
l230A0F48:
	s2_111 = 0<i32>
	a5_183 = 0x400000<32>
	a7_184 = 0<i32>
	a6_124 = 2047<i32>
l230A0864:
	a5_183 = a1_107
	a7_184 = a0 << 3<u32>
l230A086C:
	a4_100 = a6_362
l230A0EC4:
	s3_284 = 0<i32>
	a6_124 = 2047<i32>
l230A07DC:
	branch a3_360 == 0<32> l230A0DD4
l230A07E0:
	branch (a5_183 | a2 << 3<u32>) == 0<32> l230A0BA4
l230A07E8:
	a7_184 = (a2 << 3<u32>) + (a0 << 3<u32>)
	a1_107 = a1_107 + a5_183 + CONVERT(a7_184 <u a0 << 3<u32>, bool, word32)
	branch a1_107 << 8<u32> >= 0<32> l230A0DD8
l230A0800:
	a5_183 = a1_107 & 0xFF7FFFFF<32>
	a4_100 = 0<i32>
	a6_124 = 1<i32>
l230A0694:
	word32 a3_418
	a6_124 = a4_100 - s3_284
	branch s3_284 != 0<32> l230A0758
l230A0758:
	branch a4_100 != 2047<i32> l230A0778
l230A0778:
	a1_107 = a1_107 | 0x800000<32>
	a3_418 = a6_124
l230A0760:
	branch (a5_183 | a2 << 3<u32>) == 0<32> l230A0E30
l230A0E30:
	a7_184 = 0<i32>
l230A0768:
l230A0770:
	a6_124 = 2047<i32>
	a4_200 = (a2 >>u 0x1D<u32> | a0_33) << 9<u32>
	s3_284 = 0<i32>
l230A0AA8:
	branch a4_200 >= 0<32> l230A05BC
l230A069C:
	branch (a1_107 | a0 << 3<u32>) != 0<32> l230A06E0
l230A06E0:
	a3_418 = a6_124 + -1<i32>
	branch a6_124 != 0xFFFFFFFF<32> l230A0700
l230A0700:
	branch a6_124 == 2047<i32> l230A06AC
l230A0708:
	word32 a3_450
	word32 t1_435
	branch a3_418 > 56<i32> l230A07BC
l230A07BC:
	t1_435 = CONVERT((a1_107 | a0 << 3<u32>) != 0<32>, bool, word32)
l230A0710:
	branch a3_418 > 31<i32> l230A0788
l230A0788:
	word32 a2_439 = a1_107 >>u a3_418 + -32<i32>
	word32 a0_440 = 0<i32>
	branch a3_418 == 32<i32> l230A07A8
l230A079C:
	a0_440 = a1_107 << 64<i32> - a3_418
l230A07A8:
	t1_435 = a2_439 | CONVERT((a0_440 | a0 << 3<u32>) != 0<32>, bool, word32)
l230A07B4:
	a3_450 = 0<i32>
l230A0718:
	word32 a0_452 = 32<i32> - a3_418
	t1_435 = a1_107 << a0_452 | (a0 << 3<u32>) >>u a3_418 | CONVERT((a0 << 3<u32>) << a0_452 != 0<32>, bool, word32)
	a3_450 = a1_107 >>u a3_418
l230A073C:
	word32 t1_466 = t1_435 + (a2 << 3<u32>)
	a5_183 = a3_450 + a5_183 + CONVERT(t1_466 <u a2 << 3<u32>, bool, word32)
	a7_184 = t1_466
	a6_124 = a4_100
l230A06E8:
	word32 t1_481 = (a0 << 3<u32>) + (a2 << 3<u32>)
	a5_183 = a1_107 + a5_183 + CONVERT(t1_481 <u a2 << 3<u32>, bool, word32)
	a7_184 = t1_481
l230A06A4:
	branch a6_124 != 2047<i32> l230A0DD0
l230A06AC:
	branch (a5_183 | a2 << 3<u32>) == 0<32> l230A0E8C
l230A0E8C:
	a7_184 = 0<i32>
l230A06B4:
	a4_100 = CONVERT((a5_183 & 0x400000<32>) <u 1<i32>, bool, word32) << 4<u32>
l230A052C:
	branch a4_100 != 0<32> l230A0594
l230A0594:
	branch s3_284 != 2047<i32> l230A05C4
l230A05C4:
	a5_183 = a5_183 | 0x800000<32>
l230A059C:
	a7_184 = a1_107 | a0 << 3<u32>
	branch a7_184 == 0<32> l230A0E74
l230A0E74:
l230A0E38:
	a6_124 = 2047<i32>
l230A05A4:
	branch a1_107 << 9<u32> < 0<32> l230A0E7C
l230A0E7C:
	a5_183 = a1_107
	a7_184 = a0 << 3<u32>
l230A0E84:
	a6_124 = 2047<i32>
l230A05AC:
	a6_124 = 2047<i32>
l230A0530:
	branch (a5_183 | a2 << 3<u32>) != 0<32> l230A054C
l230A054C:
	a3_217 = a3_217 + -1<i32>
	branch a3_217 != 0xFFFFFFFF<32> l230A056C
l230A056C:
	branch a3_217 != 2047<i32> l230A05CC
l230A05CC:
	word32 a3_534
	word32 a7_519
	branch a3_217 > 56<i32> l230A0684
l230A0684:
	a7_519 = CONVERT((a5_183 | a2 << 3<u32>) != 0<32>, bool, word32)
l230A05D4:
	branch a3_217 > 31<i32> l230A0650
l230A0650:
	word32 a4_523 = a5_183 >>u a3_217 + -32<i32>
	word32 s0_524 = 0<i32>
	branch a3_217 == 32<i32> l230A0670
l230A0664:
	s0_524 = a5_183 << 64<i32> - a3_217
l230A0670:
	a7_519 = a4_523 | CONVERT((s0_524 | a2 << 3<u32>) != 0<32>, bool, word32)
l230A067C:
	a3_534 = 0<i32>
l230A05DC:
	word32 s0_536 = 32<i32> - a3_217
	a7_519 = a5_183 << s0_536 | (a2 << 3<u32>) >>u a3_217 | CONVERT((a2 << 3<u32>) << s0_536 != 0<32>, bool, word32)
	a3_534 = a5_183 >>u a3_217
l230A0600:
	a7_184 = a7_519 + (a0 << 3<u32>)
	a5_183 = a3_534 + a1_107 + CONVERT(a7_184 <u a0 << 3<u32>, bool, word32)
	a6_124 = s3_284
l230A0554:
	a7_184 = (a2 << 3<u32>) + (a0 << 3<u32>)
	a5_183 = a1_107 + a5_183 + CONVERT(a7_184 <u a0 << 3<u32>, bool, word32)
l230A0564:
	a6_124 = 1<i32>
l230A0614:
	branch a5_183 << 8<u32> >= 0<32> l230A0DD0
l230A0DD0:
	branch a6_124 != 0<32> l230A08A0
l230A0DD4:
	a1_107 = a5_183
l230A0DD8:
	t1_106 = a7_184
l230A0BA4:
	a7_184 = t1_106 | a1_107
	branch a7_184 == 0<32> l230A0ECC
l230A0ECC:
	a6_124 = 0<i32>
l230A0E3C:
	a5_183 = 0<i32>
	a4_100 = 0<i32>
l230A0BAC:
	word32 s3_596 = (a1_107 << 1<u32>) + (t1_106 >>u 0x1F<u32>)
	word32 a5_597 = t1_106 << 1<u32>
	a4_100 = 0<i32>
	branch (a5_597 & 7<i32>) == 0<32> l230A0BF8
l230A0BC8:
	branch s1_17 == 2<i32> l230A0E14
l230A0E14:
	a4_100 = 1<i32>
	branch s2_111 == 0<32> l230A0BF8
l230A0E1C:
	s3_596 = s3_596 + (CONVERT(a5_597 <u -8<i32>, bool, word32) ^ 1<i32>)
	a4_100 = s2_111
l230A0BD0:
	branch s1_17 == 3<i32> l230A0DF8
l230A0DF8:
	a4_100 = s2_111
	branch s2_111 != 0<32> l230A0BF8
l230A0E00:
	s3_596 = s3_596 + (CONVERT(a5_597 <u -8<i32>, bool, word32) ^ 1<i32>)
	a4_100 = 1<i32>
l230A0BD8:
	a4_100 = 1<i32>
	branch s1_17 != 0<32> l230A0BF8
l230A0BE0:
	branch (a5_597 & 15<i32>) == 4<i32> l230A0BF8
l230A0BEC:
	s3_596 = s3_596 + (CONVERT(a5_597 <u -4<i32>, bool, word32) ^ 1<i32>)
l230A0BF8:
	s3_284 = (s3_596 >>u 0x18<u32> ^ 1<i32>) & 1<i32>
	a5_183 = a1_107
	a7_184 = t1_106
	a6_124 = 0<i32>
l230A061C:
	a6_124 = a6_124 + 1<i32>
	branch a6_124 == 2047<i32> l230A0910
l230A0910:
	branch s1_17 == 0<32> l230A0920
l230A0914:
	branch s1_17 != 3<i32> l230A0930
l230A0930:
	branch s1_17 != 2<i32> l230A0E50
l230A0938:
	branch a1 >>u 0x1F<u32> != 0<32> l230A0920
l230A093C:
l230A08CC:
l230A091C:
	branch a1 >>u 0x1F<u32> != 0<32> l230A0E50
l230A0E50:
l230A08DC:
	a6_124 = 2046<i32>
	s3_284 = 0<i32>
	a5_183 = -1<i32>
	a7_184 = -1<i32>
	a4_100 = 5<i32>
l230A0920:
	a5_183 = 0<i32>
	a7_184 = 0<i32>
	a4_100 = 5<i32>
l230A0628:
	word32 a0_700 = a5_183 & 0xFF7FFFFF<32>
	a7_184 = a0_700 << 0x1F<u32> | (a7_184 >>u 1<u32> | a7_184 & 1<i32>)
	a5_183 = a0_700 >>u 1<u32>
l230A0538:
	branch a3_217 == 2047<i32> l230A0574
l230A0574:
	a7_184 = a1_107 | a0 << 3<u32>
	a5_183 = 0<i32>
	branch a7_184 == 0<32> l230A0F54
l230A0580:
	branch a1_107 << 9<u32> < 0<32> l230A0E64
l230A0E64:
	a5_183 = a1_107
	a7_184 = a0 << 3<u32>
	s3_284 = 0<i32>
l230A0588:
l230A05B8:
	a5_183 = a1_107
	a7_184 = a0 << 3<u32>
	s3_284 = 0<i32>
l230A05BC:
	a4_100 = 16<i32>
l230A0540:
	a5_183 = a1_107
	a7_184 = a0 << 3<u32>
l230A08A0:
	s3_284 = 0<i32>
l230A0AAC:
	a4_100 = 0<i32>
l230A06C4:
	branch (a7_184 & 7<i32>) != 0<32> l230A08E0
l230A08E0:
	word32 a1_817
	a4_100 = a4_100 | 1<i32>
	branch s1_17 == 2<i32> l230A0EF0
l230A0EF0:
	branch s2_111 == 0<32> l230A0908
l230A0EF4:
l230A08EC:
	branch s1_17 == 3<i32> l230A0ED8
l230A0ED8:
	branch s2_111 != 0<32> l230A0908
l230A0EDC:
	a1_817 = a7_184 + 8<i32>
l230A08F4:
	branch s1_17 != 0<32> l230A0908
l230A08F8:
	a1_817 = a7_184 + 4<i32>
	branch (a7_184 & 15<i32>) != 4<i32> l230A0EE0
l230A0EE0:
	a5_183 = a5_183 + CONVERT(a1_817 <u a7_184, bool, word32)
	a7_184 = a1_817
l230A0908:
	branch s3_284 != 0<32> l230A06D8
l230A090C:
l230A06CC:
	branch s3_284 == 0<32> l230A0F54
l230A06D0:
	branch (a4_100 & 1<i32>) == 0<32> l230A0F54
l230A06D8:
	a4_100 = a4_100 | 2<i32>
l230A0F54:
	branch a5_183 << 8<u32> >= 0<32> l230A0F74
l230A0F5C:
	a6_124 = a6_124 + 1<i32>
	branch a6_124 == 2047<i32> l230A0EF8
l230A0EF8:
	a7_184 = 0<i32>
	branch s1_17 == 0<32> l230A0F24
l230A0F00:
	branch s1_17 != 3<i32> l230A0F18
l230A0F18:
	branch s1_17 != 2<i32> l230A0F0C
l230A0F20:
	branch s2_111 == 0<32> l230A0F0C
l230A0F08:
	branch s2_111 == 0<32> l230A0F24
l230A0F0C:
	a7_184 = -1<i32>
	a6_124 = 2046<i32>
l230A0F24:
	a4_100 = a4_100 | 5<i32>
	a5_183 = a7_184
l230A0F68:
	a5_183 = a5_183 & 0xFF7FFFFF<32>
l230A0F74:
	word32 a7_938 = a5_183 << 0x1D<u32> | a7_184 >>u 3<u32>
	word32 a5_939 = a5_183 >>u 3<u32>
	branch a6_124 != 2047<i32> l230A0FA4
l230A0F8C:
	a7_938 = a7_938 | a5_939
	a5_939 = 0<i32>
	branch a7_938 == 0<32> l230A0FA4
l230A0F98:
	a5_939 = 0x80000<32>
	a7_938 = 0<i32>
	s2_111 = 0<i32>
l230A0FA4:
	word32 a1_962 = CONVERT(SLICE(a5_939, word20, 0), word20, word32) | (a6_124 & 2047<i32>) << 0x14<u32> | s2_111 << 0x1F<u32>
	branch a4_100 == 0<32> l230A0FD0
l230A0FCC:
	__csrrs(fflags, ra)
l230A0FD0:
	a1Out = a1_962
	return a7_938
__adddf3_exit:


word32 __divdf3(word32 ra, word32 a0, word32 a1, word32 a2, word32 a3, word32 fflags, word32 frm, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a3Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s9Out, ptr32 & fflagsOut, ptr32 & frmOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pa_input
//      rf_set_channel
//      ecvtbuf
//      TSEN_Get_Temp
//      pow
//      __ieee754_pow
//      __ieee754_sqrt
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut: a0 a1 a3 fflags frm ra s0 s1 s2 s3 s5 s6 s7 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 fflags frm ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
__divdf3_entry:
l230A1004:
	word32 s1_149
	word32 s3_205
	word32 s6_184
	word32 s8_159
	word32 s2_33 = __csrrs(frm, fp + -48<i32>)
	word32 a6_37 = a1 >>u 0x14<u32> & 2047<i32>
	word32 s7_197 = CONVERT(SLICE(a1, word20, 0), word20, word32)
	branch a6_37 == 0<32> l230A108C
l230A108C:
	branch (s7_197 | a0) == 0<32> l230A118C
l230A118C:
	s7_197 = 0<i32>
	s3_205 = 0<i32>
	s6_184 = 0<i32>
	s8_159 = 1<i32>
l230A1094:
	word32 a0_48
	branch s7_197 == 0<32> l230A10D4
l230A10D4:
	word32 a5_2005
	word32 a4_2004
	a0_48 = __clzsi2(a0, out a4_2004, out a5_2005) + 32<i32>
l230A1098:
	word32 a4_2006
	word32 a5_2007
	a0_48 = __clzsi2(s7_197, out a4_2006, out a5_2007)
l230A10A0:
	word32 a3_54 = a0_48 + -11<i32>
	branch a3_54 > 28<i32> l230A10E0
l230A10E0:
	s7_197 = a0 << a0_48 + -40<i32>
	s3_205 = 0<i32>
l230A10AC:
	word32 s3_61 = a0_48 + -8<i32>
	s7_197 = a0 >>u 29<i32> - a3_54 | s7_197 << s3_61
	s3_205 = a0 << s3_61
l230A10C8:
	s6_184 = -1011<i32> - a0_48
l230A105C:
	branch a6_37 == 2047<i32> l230A10F0
l230A10F0:
	branch (s7_197 | a0) == 0<32> l230A11A0
l230A11A0:
	s7_197 = 0<i32>
	s3_205 = 0<i32>
	s6_184 = 2047<i32>
	s8_159 = 2<i32>
l230A10F8:
	s3_205 = a0
	s6_184 = 2047<i32>
	s8_159 = 3<i32>
	s1_149 = 16<i32>
	branch s7_197 << 0xC<u32> < 0<32> l230A1084
l230A1064:
	s7_197 = a0 >>u 0x1D<u32> | s7_197 << 3<u32> | 0x800000<32>
	s3_205 = a0 << 3<u32>
	s6_184 = a6_37 + -1023<i32>
l230A1080:
	s8_159 = 0<i32>
l230A1084:
	s1_149 = 0<i32>
l230A1110:
	word32 a0_110
	word32 a4_111
	word32 a6_98 = a3 >>u 0x14<u32> & 2047<i32>
	word32 a5_104 = a2
	word32 s0_105 = CONVERT(SLICE(a3, word20, 0), word20, word32)
	branch a6_98 == 0<32> l230A11B4
l230A11B4:
	branch (s0_105 | a2) == 0<32> l230A123C
l230A123C:
	s0_105 = 0<i32>
	a5_104 = 0<i32>
	a0_110 = 0<i32>
	a4_111 = 1<i32>
l230A11BC:
	word32 a0_116
	branch s0_105 == 0<32> l230A11FC
l230A11FC:
	word32 a4_2008
	word32 a5_2009
	a0_116 = __clzsi2(a2, out a4_2008, out a5_2009) + 32<i32>
l230A11C0:
	word32 a5_2011
	word32 a4_2010
	a0_116 = __clzsi2(s0_105, out a4_2010, out a5_2011)
l230A11C8:
	word32 a3_122 = a0_116 + -11<i32>
	branch a3_122 > 28<i32> l230A120C
l230A120C:
	s0_105 = a2 << a0_116 + -40<i32>
	a5_104 = 0<i32>
l230A11D4:
	word32 a5_129 = a0_116 + -8<i32>
	s0_105 = a2 >>u 29<i32> - a3_122 | s0_105 << a5_129
	a5_104 = a2 << a5_129
l230A11F0:
	a0_110 = -1011<i32> - a0_116
l230A112C:
	branch a6_98 == 2047<i32> l230A121C
l230A121C:
	branch (s0_105 | a2) == 0<32> l230A1250
l230A1250:
	s0_105 = 0<i32>
	a5_104 = 0<i32>
	a0_110 = 2047<i32>
	a4_111 = 2<i32>
l230A1224:
	a0_110 = 2047<i32>
	branch s0_105 << 0xC<u32> < 0<32> l230A1264
l230A1264:
	a4_111 = 3<i32>
l230A1230:
	a4_111 = 3<i32>
	s1_149 = 16<i32>
l230A1134:
	s0_105 = a2 >>u 0x1D<u32> | s0_105 << 3<u32> | 0x800000<32>
	a5_104 = a2 << 3<u32>
	a0_110 = a6_98 + -1023<i32>
l230A1150:
	a4_111 = 0<i32>
l230A1154:
	word32 a3_166 = s8_159 << 2<u32> | a4_111
	word32 a2_182 = a1 >>u 0x1F<u32> ^ a3 >>u 0x1F<u32>
	word32 a6_192 = s6_184 - a0_110
	branch a3_166 >u -15<i32> l230A126C
l230A126C:
	word32 a3_217
	branch s0_105 <u s7_197 l230A1278
l230A1270:
	branch s7_197 != s0_105 l230A155C
l230A1274:
	branch s3_205 <u a5_104 l230A155C
l230A155C:
	a6_192 = a6_192 + -1<i32>
	a3_217 = 0<i32>
l230A1278:
	a3_217 = s3_205 << 0x1F<u32>
	s7_197 = s7_197 >>u 1<u32>
	s3_205 = s7_197 << 0x1F<u32> | s3_205 >>u 1<u32>
l230A128C:
	word32 a0_233 = a5_104 >>u 0x18<u32> | s0_105 << 8<u32>
	word32 t1_237 = s7_197 >>u (a0_233 >>u 0x10<u32>)
	word32 t4_239 = CONVERT(SLICE(a0_233, word16, 0), word16, word32)
	word32 a1_240 = a5_104 << 8<u32>
	word32 a7_245 = t1_237
	word32 a4_246 = t4_239 + t1_237
	word32 a5_248 = s3_205 >>u 0x10<u32> | (s7_197 & a0_233 >>u 0x10<u32>) << 0x10<u32>
	branch a5_248 >=u a4_246 l230A12E0
l230A12C8:
	a5_248 = a5_248 + a0_233
	a7_245 = t1_237 + -1<i32>
	branch a5_248 <u a0_233 l230A12E0
l230A12D4:
	branch a5_248 >=u a4_246 l230A12E0
l230A12D8:
	a7_245 = t1_237 + -2<i32>
	a5_248 = a5_248 + a0_233
l230A12E0:
	word32 a5_255 = a5_248 - a4_246
	word32 t3_257 = a5_255 >>u (a0_233 >>u 0x10<u32>)
	word32 s3_262 = t3_257
	word32 t1_264 = CONVERT(SLICE(a0_233, word16, 0), word16, word32) + t3_257
	word32 a4_266 = CONVERT(SLICE(s3_205, word16, 0), word16, word32) | (a5_255 & a0_233 >>u 0x10<u32>) << 0x10<u32>
	branch a4_266 >=u t1_264 l230A1320
l230A1308:
	a4_266 = a4_266 + a0_233
	s3_262 = t3_257 + -1<i32>
	branch a4_266 <u a0_233 l230A1320
l230A1314:
	branch a4_266 >=u t1_264 l230A1320
l230A1318:
	s3_262 = t3_257 + -2<i32>
	a4_266 = a4_266 + a0_233
l230A1320:
	word32 s3_276 = a7_245 << 0x10<u32> | s3_262
	word32 s0_289 = (s3_276 >>u 0x10<u32>) + (a1_240 & 0xFFFF<32>)
	word32 a5_288 = (a1_240 & 0xFFFF<32>) + (s3_276 & 0xFFFF<32>)
	word32 a4_285 = a4_266 - t1_264
	word32 t1_293 = (a5_288 >>u 0x10<u32>) + (((a1_240 >>u 0x10<u32>) + (s3_276 & 0xFFFF<32>)) + s0_289)
	word32 t0_294 = (s3_276 >>u 0x10<u32>) + (a1_240 >>u 0x10<u32>)
	branch t1_293 >=u s0_289 l230A1368
l230A1364:
	t0_294 = t0_294 + 0x10000<32>
l230A1368:
	word32 s0_309
	word32 t0_301 = (t1_293 >>u 0x10<u32>) + t0_294
	word32 a7_306 = ((t1_293 & 0xFFFF<32>) << 0x10<u32>) + (a5_288 & 0xFFFF<32>)
	branch a4_285 <u t0_301 l230A1398
l230A138C:
	s0_309 = s3_276
	branch a4_285 != t0_301 l230A13D8
l230A1394:
	branch a3_217 >=u a7_306 l230A13D8
l230A1398:
	a3_217 = a3_217 + a1_240
	a4_285 = a4_285 + (CONVERT(a3_217 <u a1_240, bool, word32) + a0_233)
	s0_309 = s3_276 + -1<i32>
	branch a0_233 <u a4_285 l230A13B8
l230A13B0:
	branch a0_233 != a4_285 l230A13D8
l230A13B4:
	branch a3_217 <u a1_240 l230A13D8
l230A13B8:
	branch a4_285 <u t0_301 l230A13C4
l230A13BC:
	branch t0_301 != a4_285 l230A13D8
l230A13C0:
	branch a3_217 >=u a7_306 l230A13D8
l230A13C4:
	a3_217 = a3_217 + a1_240
	s0_309 = s3_276 + -2<i32>
	a4_285 = a4_285 + (CONVERT(a3_217 <u a1_240, bool, word32) + a0_233)
l230A13D8:
	word32 a7_349 = a3_217 - a7_306
	word32 a4_355 = a4_285 - t0_301 - CONVERT(a3_217 <u a7_349, bool, word32)
	word32 a5_356 = -1<i32>
	branch a0_233 == a4_355 l230A1514
l230A13F0:
	word32 t0_364 = a4_355 >>u (a0_233 >>u 0x10<u32>)
	word32 a3_367 = t0_364
	word32 t1_374 = t4_239 + t0_364
	word32 a4_376 = a7_349 >>u 0x10<u32> | (a4_355 & a0_233 >>u 0x10<u32>) << 0x10<u32>
	branch a4_376 >=u t1_374 l230A1428
l230A1410:
	a4_376 = a4_376 + a0_233
	a3_367 = t0_364 + -1<i32>
	branch a4_376 <u a0_233 l230A1428
l230A141C:
	branch a4_376 >=u t1_374 l230A1428
l230A1420:
	a3_367 = t0_364 + -2<i32>
	a4_376 = a4_376 + a0_233
l230A1428:
	word32 a4_383 = a4_376 - t1_374
	word32 t1_385 = a4_383 >>u (a0_233 >>u 0x10<u32>)
	word32 t4_391 = t4_239 + t1_385
	word32 a4_393 = CONVERT(SLICE(a7_349, word16, 0), word16, word32) | (a4_383 & a0_233 >>u 0x10<u32>) << 0x10<u32>
	word32 a5_394 = t1_385
	branch a4_393 >=u t4_391 l230A1468
l230A1450:
	a4_393 = a4_393 + a0_233
	a5_394 = t1_385 + -1<i32>
	branch a4_393 <u a0_233 l230A1468
l230A145C:
	branch a4_393 >=u t4_391 l230A1468
l230A1460:
	a5_394 = t1_385 + -2<i32>
	a4_393 = a4_393 + a0_233
l230A1468:
	word32 a3_404 = a3_367 << 0x10<u32> | a5_394
	word32 a5_406 = CONVERT(SLICE(a3_404, word16, 0), word16, word32)
	word32 t3_419 = (a3_404 >>u 0x10<u32>) + (a1_240 & 0xFFFF<32>)
	word32 t5_415 = a5_406 + (a1_240 & 0xFFFF<32>)
	word32 a4_418 = a4_393 - t4_391
	word32 t4_427 = (a1_240 >>u 0x10<u32>) + (a3_404 >>u 0x10<u32>)
	word32 a5_431 = (t5_415 >>u 0x10<u32>) + (((a1_240 >>u 0x10<u32>) + a5_406) + t3_419)
	branch a5_431 >=u t3_419 l230A14A8
l230A14A0:
	t4_427 = t4_427 + 0x10000<32>
l230A14A8:
	word32 t1_443 = (a5_431 >>u 0x10<u32>) + t4_427
	word32 a7_444 = ((a5_431 & 0xFFFF<32>) << 0x10<u32>) + (t5_415 & 0xFFFF<32>)
	branch a4_418 <u t1_443 l230A14D8
l230A14CC:
	branch a4_418 != t1_443 l230A18A8
l230A14D0:
	a5_356 = a3_404
	branch a7_444 == 0<32> l230A1514
l230A14D8:
	word32 a4_452 = a0_233 + a4_418
	a5_356 = a3_404 + -1<i32>
	branch a4_452 <u a0_233 l230A1508
l230A14E4:
	branch a4_452 <u t1_443 l230A14F0
l230A14E8:
	branch a4_452 != t1_443 l230A18A4
l230A18A4:
	a3_404 = a3_404 + -1<i32>
l230A18A8:
	a5_356 = a3_404
l230A14EC:
	branch a1_240 >=u a7_444 l230A150C
l230A14F0:
	a5_356 = a3_404 + -2<i32>
	a4_452 = a4_452 + (CONVERT(a1_240 << 1<u32> <u a1_240, bool, word32) + a0_233)
	a1_240 = a1_240 << 1<u32>
l230A1508:
	branch a4_452 != t1_443 l230A1510
l230A150C:
	branch a1_240 == a7_444 l230A1514
l230A1510:
	a5_356 = a5_356 | 1<i32>
l230A1514:
	word32 a5_629
	word32 a4_507
	word32 a0_655
	word32 a1_506 = a6_192 + 1023<i32>
	branch a1_506 <= 0<32> l230A16B0
l230A16B0:
	a4_507 = 1<i32>
	branch a1_506 != 0<32> l230A1720
l230A16B8:
	word32 a4_522 = s0_309
	branch (a5_356 & 7<i32>) == 0<32> l230A1714
l230A16C4:
	word32 a4_603
	s1_149 = s1_149 | 1<i32>
	branch s2_33 == 2<i32> l230A170C
l230A170C:
	a4_522 = s0_309
	branch a2_182 != 0<32> l230A1704
l230A16D0:
	branch s2_33 == 3<i32> l230A16FC
l230A16FC:
	a4_522 = s0_309
	branch a2_182 != 0<32> l230A1714
l230A1704:
	a4_603 = CONVERT(a5_356 <u -8<i32>, bool, word32)
l230A16D8:
	a4_522 = s0_309
	branch s2_33 != 0<32> l230A1714
l230A16E0:
	branch (a5_356 & 15<i32>) == 4<i32> l230A1714
l230A16EC:
	a4_603 = CONVERT(a5_356 <u -4<i32>, bool, word32)
l230A16F0:
	a4_522 = (a4_603 ^ 1<i32>) + s0_309
l230A1714:
	a4_507 = (a4_522 >>u 0x18<u32> ^ 1<i32>) & 1<i32>
l230A1720:
	word32 a0_622 = 1<i32> - a1_506
	branch a0_622 > 56<i32> l230A1824
l230A1824:
	a5_629 = a5_356 | s0_309
	branch a5_629 == 0<32> l230A185C
l230A182C:
	word32 a5_640
	s1_149 = s1_149 | 1<i32>
	branch s2_33 == 2<i32> l230A186C
l230A186C:
	a5_640 = 9<i32>
	branch a2_182 != 0<32> l230A1858
l230A1874:
l230A1838:
	branch s2_33 == 3<i32> l230A1850
l230A1850:
	a5_640 = 9<i32>
	branch a2_182 != 0<32> l230A1848
l230A1840:
	a5_640 = 5<i32>
	branch s2_33 == 0<32> l230A1858
l230A1848:
	a5_640 = 1<i32>
l230A1858:
	a5_629 = a5_640 >>u 3<u32>
l230A185C:
	s1_149 = s1_149 | 2<i32>
	a0_655 = 0<i32>
	a4_507 = 0<i32>
l230A1730:
	word32 a5_674
	word32 a0_675
	branch a0_622 > 31<i32> l230A1798
l230A1798:
	word32 a3_661 = s0_309 >>u -31<i32> - a1_506
	word32 a1_662 = 0<i32>
	branch a0_622 == 32<i32> l230A17B8
l230A17B0:
	a1_662 = s0_309 << a6_192 + 1086<i32>
l230A17B8:
	a5_674 = a3_661 | CONVERT((a1_662 | a5_356) != 0<32>, bool, word32)
	a0_675 = 0<i32>
l230A1738:
	word32 a6_676 = a6_192 + 1054<i32>
	a5_674 = s0_309 << a6_676 | a5_356 >>u a0_622 | CONVERT(a5_356 << a6_676 != 0<32>, bool, word32)
	a0_675 = s0_309 >>u a0_622
l230A1758:
	branch (a5_674 & 7<i32>) == 0<32> l230A17DC
l230A1760:
	word32 a3_696
	s1_149 = s1_149 | 1<i32>
	branch s2_33 == 2<i32> l230A17D8
l230A17D8:
	branch a2_182 != 0<32> l230A17D0
l230A176C:
	branch s2_33 == 3<i32> l230A17CC
l230A17CC:
	branch a2_182 != 0<32> l230A17DC
l230A17D0:
	a3_696 = a5_674 + 8<i32>
l230A1774:
	branch s2_33 != 0<32> l230A17DC
l230A1778:
	branch (a5_674 & 15<i32>) == 4<i32> l230A17DC
l230A1784:
	a3_696 = a5_674 + 4<i32>
l230A1788:
	a0_675 = a0_675 + CONVERT(a3_696 <u a5_674, bool, word32)
	a5_674 = a3_696
l230A17DC:
	branch a0_675 << 8<u32> >= 0<32> l230A17FC
l230A17FC:
	a5_629 = a0_675 << 0x1D<u32> | a5_674 >>u 3<u32>
	a0_655 = a0_675 >>u 3<u32>
	branch a4_507 == 0<32> l230A1610
l230A1810:
	a4_507 = s1_149 & 1<i32>
	branch a4_507 == 0<32> l230A1610
l230A1818:
	a4_507 = 0<i32>
l230A17E4:
	s1_149 = s1_149 | 1<i32>
	a0_655 = 0<i32>
	a5_629 = 0<i32>
	branch a4_507 != 0<32> l230A181C
l230A181C:
	s1_149 = s1_149 | 2<i32>
l230A17F4:
	a4_507 = 1<i32>
l230A151C:
	branch (a5_356 & 7<i32>) == 0<32> l230A15DC
l230A1524:
	word32 a4_737
	s1_149 = s1_149 | 1<i32>
	branch s2_33 == 2<i32> l230A15D8
l230A15D8:
	branch a2_182 != 0<32> l230A15D0
l230A1530:
	branch s2_33 == 3<i32> l230A15CC
l230A15CC:
	branch a2_182 != 0<32> l230A15DC
l230A15D0:
	a4_737 = a5_356 + 8<i32>
l230A1538:
	branch s2_33 != 0<32> l230A15DC
l230A153C:
	branch (a5_356 & 15<i32>) == 4<i32> l230A15DC
l230A1548:
	a4_737 = a5_356 + 4<i32>
l230A154C:
	s0_309 = s0_309 + CONVERT(a4_737 <u a5_356, bool, word32)
	a5_356 = a4_737
l230A15DC:
	branch s0_309 << 7<u32> >= 0<32> l230A15F4
l230A15E4:
	s0_309 = s0_309 & 0xFEFFFFFF<32>
	a1_506 = a6_192 + 1024<i32>
l230A15F4:
	branch a1_506 > 2046<i32> l230A1670
l230A1670:
	branch s2_33 == 2<i32> l230A16A8
l230A16A8:
	branch a2_182 != 0<32> l230A169C
l230A16AC:
l230A1678:
	branch s2_33 == 3<i32> l230A1698
l230A1698:
	branch a2_182 != 0<32> l230A1684
l230A1680:
	branch s2_33 == 0<32> l230A169C
l230A169C:
	a5_629 = 0<i32>
	a4_507 = 2047<i32>
l230A1684:
	a5_629 = -1<i32>
	a4_507 = 2046<i32>
l230A168C:
	s1_149 = s1_149 | 5<i32>
	a0_655 = a5_629
l230A15FC:
	a5_629 = s0_309 << 0x1D<u32> | a5_356 >>u 3<u32>
	a0_655 = s0_309 >>u 3<u32>
	a4_507 = a1_506
l230A1610:
	word32 a3_816 = CONVERT(SLICE(a0_655, word20, 0), word20, word32) | (a4_507 & 2047<i32>) << 0x14<u32> | a2_182 << 0x1F<u32>
	branch s1_149 == 0<32> l230A163C
l230A1638:
	__csrrs(fflags, ra)
l230A163C:
	s0Out = s0
	s1Out = s1
	a0Out = a5_629
	a1Out = a3_816
	a3Out = a3_816
	s2Out = s2
	s3Out = s3
	s5Out = s5
	s6Out = s6
	s7Out = s7
	s9Out = s9
	fflagsOut = fflags
	frmOut = frm
	return ra
l230A1170:
	word32 a3_1043 = Mem25[(a3_166 + -1<i32> << 2<u32>) + 0x230CB3F8<p32>:int32] + 0x230CB3F8<p32>
	word32 s0_1057
	word32 s5_1058
	word32 s9_1059
	word32 ra_1060
	word32 s1_1061
	word32 s2_1062
	word32 s3_1063
	word32 s6_1065
	word32 s7_1066
	word32 a0_1068
	word32 a3_1070
	word32 frm_1071
	word32 a1_1073
	word32 fflags_1084
	call a3_1043 (retsize: 0;)
		uses: a0:a0_190,a1:0x230CB3F8<p32>,a2:a2_182,a3:a3_1043,fflags:fflags,frm:frm,ra:ra,s0:s0_193,s1:s1_531,s2:s2_33,s3:s3_205,s4:a1 >>u 0x1F<u32>,s5:a3 >>u 0x1F<u32>,s6:s6_184,s7:s7_197,s8:s8_159,s9:a2
		defs: a0:a0_1068,a1:a1_1073,a3:a3_1070,fflags:fflags_1084,frm:frm_1071,ra:ra_1060,s0:s0_1057,s1:s1_1061,s2:s2_1062,s3:s3_1063,s5:s5_1058,s6:s6_1065,s7:s7_1066,s9:s9_1059
	s0Out = s0_1057
	s1Out = s1_1061
	a0Out = a0_1068
	a1Out = a1_1073
	a3Out = a3_1070
	s2Out = s2_1062
	s3Out = s3_1063
	s5Out = s5_1058
	s6Out = s6_1065
	s7Out = s7_1066
	s9Out = s9_1059
	fflagsOut = fflags_1084
	frmOut = frm_1071
	return ra_1060
__divdf3_exit:


word32 __eqdf2(word32 a0, word32 a1, word32 a2, word32 a3, word32 fflags, word32 frm, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      print_number
//      ecvtbuf
//      flt
//      pow
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] fflags:[0..31] frm:[0..31]
// LiveOut: a0 a1 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1 t3 t4
// Preserved: sp
__eqdf2_entry:
l230A18B0:
	__csrrs(frm, fp)
	word32 a4_11 = a1 >>u 0x14<u32> & 2047<i32>
	word32 a7_20 = a3 >>u 0x14<u32> & 2047<i32>
	branch a4_11 != 2047<i32> l230A18FC
l230A18FC:
	branch a7_20 != 2047<i32> l230A1908
l230A18EC:
	branch (a1 & 0xFFFFF<32> | a0) != 0<32> l230A194C
l230A18F4:
	branch a7_20 != a4_11 l230A1970
l230A18F8:
l230A1900:
	branch (a3 & 0xFFFFF<32> | a2) != 0<32> l230A193C
l230A193C:
	branch a4_11 != 2047<i32> l230A1968
l230A1944:
	branch (a1 & 0xFFFFF<32> | a0) == 0<32> l230A1968
l230A194C:
	a4_11 = (a1 & 0xFFFFF<32>) << 0xC<u32>
	branch a4_11 >= 0<32> l230A192C
l230A1954:
	a4_11 = 2047<i32>
	branch a7_20 != 2047<i32> l230A1974
l230A1960:
	branch (a3 & 0xFFFFF<32> | a2) == 0<32> l230A1974
l230A1968:
	a4_11 = (a3 & 0xFFFFF<32>) << 0xC<u32>
	branch a4_11 >= 0<32> l230A192C
l230A192C:
	__csrrs(fflags, 0x10<32>)
l230A1970:
l230A1908:
	branch a4_11 != a7_20 l230A1974
l230A1910:
	branch (a1 & 0xFFFFF<32>) != (a3 & 0xFFFFF<32>) l230A1974
l230A1914:
	branch a2 != a0 l230A1974
l230A1918:
	branch a1 >>u 0x1F<u32> == a3 >>u 0x1F<u32> l230A1934
l230A1934:
	a1Out = <invalid>
	a4Out = a4_11
	a5Out = <invalid>
	return 0<i32>
l230A191C:
	branch a4_11 != 0<32> l230A1974
l230A1974:
	a1Out = <invalid>
	a4Out = a4_11
	a5Out = <invalid>
	return 1<i32>
l230A1920:
	a1Out = <invalid>
	a4Out = a4_11
	a5Out = <invalid>
	return CONVERT((a1 & 0xFFFFF<32> | a2) != 0<32>, bool, word32)
__eqdf2_exit:


word32 __gedf2(word32 a0, word32 a1, word32 a2, word32 a3, word32 fflags, word32 frm, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      print_number
//      ecvtbuf
//      floor
//      __ieee754_pow
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] fflags:[0..31] frm:[0..31]
// LiveOut: a0 a1 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1 t3 t4
// Preserved: sp
__gedf2_entry:
l230A1978:
	word32 a0_33
	__csrrs(frm, fp)
	word32 a6_11 = a1 >>u 0x14<u32> & 2047<i32>
	word32 a1_17 = a1 >>u 0x1F<u32>
	word32 a4_20 = a3 >>u 0x14<u32> & 2047<i32>
	branch a6_11 != 2047<i32> l230A19C8
l230A19C8:
	branch a4_20 != 2047<i32> l230A19D4
l230A19B4:
	branch (a1 & 0xFFFFF<32> | a0) == 0<32> l230A1A54
l230A1A54:
	branch a4_20 == a6_11 l230A19CC
l230A19CC:
	branch (a3 & 0xFFFFF<32> | a2) != 0<32> l230A19BC
l230A19D4:
	branch a6_11 != 0<32> l230A1A58
l230A19D8:
	a0_33 = CONVERT((a1 & 0xFFFFF<32> | a0) <u 1<i32>, bool, word32)
	branch a4_20 != 0<32> l230A19EC
l230A1A58:
	branch a4_20 != 0<32> l230A19F0
l230A1A5C:
	a0_33 = 0<i32>
l230A19E4:
	branch (a3 & 0xFFFFF<32> | a2) == 0<32> l230A1A44
l230A1A44:
	branch a0_33 != 0<32> l230A1A34
l230A1A48:
l230A19EC:
	branch a0_33 != 0<32> l230A1A04
l230A1A04:
	a1_17 = -1<i32>
	branch a3 >>u 0x1F<u32> == 0<32> l230A1A10
l230A1A0C:
	a1_17 = a3 >>u 0x1F<u32>
l230A19F0:
	branch a1 >>u 0x1F<u32> != a3 >>u 0x1F<u32> l230A19F8
l230A19F4:
	branch a4_20 >= a6_11 l230A1A18
l230A1A18:
	branch a6_11 >= a4_20 l230A1A24
l230A1A24:
	branch (a3 & 0xFFFFF<32>) <u (a1 & 0xFFFFF<32>) l230A19F8
l230A1A28:
	branch (a1 & 0xFFFFF<32>) != (a3 & 0xFFFFF<32>) l230A1A4C
l230A1A4C:
	branch (a1 & 0xFFFFF<32>) <u (a3 & 0xFFFFF<32>) l230A1A1C
l230A1A50:
l230A1A2C:
	branch a2 <u a0 l230A19F8
l230A1A30:
	branch a0 <u a2 l230A1A1C
l230A1A34:
	a1_17 = 0<i32>
l230A1A1C:
	branch a1 >>u 0x1F<u32> != 0<32> l230A1A10
l230A1A20:
l230A19F8:
	branch a1 >>u 0x1F<u32> == 0<32> l230A1A3C
l230A1A3C:
	a1_17 = 1<i32>
l230A19FC:
	a1_17 = -1<i32>
l230A19BC:
	__csrrs(fflags, 0x10<32>)
	a1_17 = -2<i32>
l230A1A10:
	a1Out = a1_17
	a4Out = a4_20
	a5Out = a3 & 0xFFFFF<32>
	return a1_17
__gedf2_exit:


word32 __ledf2(word32 a0, word32 a1, word32 a2, word32 a3, word32 fflags, word32 frm, ptr32 & a1Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a7Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      print_number
//      ecvtbuf
//      flt
//      pow
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] fflags:[0..31] frm:[0..31]
// LiveOut: a0 a1 a4 a5 a7
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1 t3 t4
// Preserved: sp
__ledf2_entry:
l230A1A64:
	word32 a0_33
	__csrrs(frm, fp)
	word32 a6_11 = a1 >>u 0x14<u32> & 2047<i32>
	word32 a1_17 = a1 >>u 0x1F<u32>
	word32 a4_20 = a3 >>u 0x14<u32> & 2047<i32>
	branch a6_11 != 2047<i32> l230A1AB4
l230A1AB4:
	branch a4_20 != 2047<i32> l230A1AC0
l230A1AA0:
	branch (a1 & 0xFFFFF<32> | a0) == 0<32> l230A1B40
l230A1B40:
	branch a4_20 == a6_11 l230A1AB8
l230A1AB8:
	branch (a3 & 0xFFFFF<32> | a2) != 0<32> l230A1AA8
l230A1AC0:
	branch a6_11 != 0<32> l230A1B44
l230A1AC4:
	a0_33 = CONVERT((a1 & 0xFFFFF<32> | a0) <u 1<i32>, bool, word32)
	branch a4_20 != 0<32> l230A1AD8
l230A1B44:
	branch a4_20 != 0<32> l230A1ADC
l230A1B48:
	a0_33 = 0<i32>
l230A1AD0:
	branch (a3 & 0xFFFFF<32> | a2) == 0<32> l230A1B30
l230A1B30:
	branch a0_33 != 0<32> l230A1B20
l230A1B34:
l230A1AD8:
	branch a0_33 != 0<32> l230A1AF0
l230A1AF0:
	a1_17 = -1<i32>
	branch a3 >>u 0x1F<u32> == 0<32> l230A1AFC
l230A1AF8:
	a1_17 = a3 >>u 0x1F<u32>
l230A1ADC:
	branch a1 >>u 0x1F<u32> != a3 >>u 0x1F<u32> l230A1AE4
l230A1AE0:
	branch a4_20 >= a6_11 l230A1B04
l230A1B04:
	branch a6_11 >= a4_20 l230A1B10
l230A1B10:
	branch (a3 & 0xFFFFF<32>) <u (a1 & 0xFFFFF<32>) l230A1AE4
l230A1B14:
	branch (a1 & 0xFFFFF<32>) != (a3 & 0xFFFFF<32>) l230A1B38
l230A1B38:
	branch (a1 & 0xFFFFF<32>) <u (a3 & 0xFFFFF<32>) l230A1B08
l230A1B3C:
l230A1B18:
	branch a2 <u a0 l230A1AE4
l230A1B1C:
	branch a0 <u a2 l230A1B08
l230A1B20:
	a1_17 = 0<i32>
l230A1B08:
	branch a1 >>u 0x1F<u32> != 0<32> l230A1AFC
l230A1B0C:
l230A1AE4:
	branch a1 >>u 0x1F<u32> == 0<32> l230A1B28
l230A1B28:
	a1_17 = 1<i32>
l230A1AE8:
	a1_17 = -1<i32>
l230A1AA8:
	__csrrs(fflags, 0x10<32>)
	a1_17 = 2<i32>
l230A1AFC:
	a1Out = a1_17
	a4Out = a4_20
	a5Out = a3 & 0xFFFFF<32>
	a7Out = a1 & 0xFFFFF<32>
	return a1_17
__ledf2_exit:


word32 __muldf3(word32 ra, word32 a0, word32 a1, word32 a2, word32 a3, word32 fflags, word32 frm, ptr32 & s0Out, ptr32 & s1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a3Out, ptr32 & s2Out, ptr32 & s3Out, ptr32 & s4Out, ptr32 & s5Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s9Out, ptr32 & fflagsOut, ptr32 & frmOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pa_input
//      pa_adapt
//      rf_pri_rccal_iq
//      rf_set_channel
//      phyif_utils_decode
//      tcpip_stack_input
//      parse_value
//      ecvtbuf
//      ADC_Parse_Result
//      __ieee754_pow
//      __ieee754_sqrt
//      scalbn
//      __floatundisf
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut: a0 a1 a3 fflags frm ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 fflags frm ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
__muldf3_entry:
l230A1B50:
	word32 s1_149
	word32 s4_197
	word32 s7_168
	word32 s8_159
	word32 s2_33 = __csrrs(frm, fp + -48<i32>)
	word32 s7_37 = a1 >>u 0x14<u32> & 2047<i32>
	word32 s3_253 = CONVERT(SLICE(a1, word20, 0), word20, word32)
	branch s7_37 == 0<32> l230A1BD8
l230A1BD8:
	branch (s3_253 | a0) == 0<32> l230A1CDC
l230A1CDC:
	s3_253 = 0<i32>
	s4_197 = 0<i32>
	s7_168 = 0<i32>
	s8_159 = 1<i32>
l230A1BE0:
	word32 a0_48
	branch s3_253 == 0<32> l230A1C20
l230A1C20:
	word32 a5_1541
	word32 a4_1540
	a0_48 = __clzsi2(a0, out a4_1540, out a5_1541) + 32<i32>
l230A1BE4:
	word32 a5_1543
	word32 a4_1542
	a0_48 = __clzsi2(s3_253, out a4_1542, out a5_1543)
l230A1BEC:
	word32 a4_54 = a0_48 + -11<i32>
	branch a4_54 > 28<i32> l230A1C2C
l230A1C2C:
	s3_253 = a0 << a0_48 + -40<i32>
	s4_197 = 0<i32>
l230A1BF8:
	word32 s4_61 = a0_48 + -8<i32>
	s3_253 = a0 >>u 29<i32> - a4_54 | s3_253 << s4_61
	s4_197 = a0 << s4_61
l230A1C14:
	s7_168 = -1011<i32> - a0_48
l230A1BA8:
	branch s7_37 == 2047<i32> l230A1C3C
l230A1C3C:
	branch (s3_253 | a0) == 0<32> l230A1CF0
l230A1CF0:
	s3_253 = 0<i32>
	s4_197 = 0<i32>
	s7_168 = 2047<i32>
	s8_159 = 2<i32>
l230A1C44:
	s4_197 = a0
	s7_168 = 2047<i32>
	s8_159 = 3<i32>
	s1_149 = 16<i32>
	branch s3_253 << 0xC<u32> < 0<32> l230A1BD0
l230A1BB0:
	s3_253 = a0 >>u 0x1D<u32> | s3_253 << 3<u32> | 0x800000<32>
	s4_197 = a0 << 3<u32>
	s7_168 = s7_37 + -1023<i32>
l230A1BCC:
	s8_159 = 0<i32>
l230A1BD0:
	s1_149 = 0<i32>
l230A1C5C:
	word32 a0_110
	word32 a4_111
	word32 a0_98 = a3 >>u 0x14<u32> & 2047<i32>
	word32 a5_104 = a2
	word32 s0_105 = CONVERT(SLICE(a3, word20, 0), word20, word32)
	branch a0_98 == 0<32> l230A1D04
l230A1D04:
	branch (s0_105 | a2) == 0<32> l230A1D8C
l230A1D8C:
	s0_105 = 0<i32>
	a5_104 = 0<i32>
	a0_110 = 0<i32>
	a4_111 = 1<i32>
l230A1D0C:
	word32 a0_116
	branch s0_105 == 0<32> l230A1D4C
l230A1D4C:
	word32 a4_1544
	word32 a5_1545
	a0_116 = __clzsi2(a2, out a4_1544, out a5_1545) + 32<i32>
l230A1D10:
	word32 a5_1547
	word32 a4_1546
	a0_116 = __clzsi2(s0_105, out a4_1546, out a5_1547)
l230A1D18:
	word32 a3_122 = a0_116 + -11<i32>
	branch a3_122 > 28<i32> l230A1D5C
l230A1D5C:
	s0_105 = a2 << a0_116 + -40<i32>
	a5_104 = 0<i32>
l230A1D24:
	word32 a5_129 = a0_116 + -8<i32>
	s0_105 = a2 >>u 29<i32> - a3_122 | s0_105 << a5_129
	a5_104 = a2 << a5_129
l230A1D40:
	a0_110 = -1011<i32> - a0_116
l230A1C78:
	branch a0_98 == 2047<i32> l230A1D6C
l230A1D6C:
	branch (s0_105 | a2) == 0<32> l230A1DA0
l230A1DA0:
	s0_105 = 0<i32>
	a5_104 = 0<i32>
	a0_110 = 2047<i32>
	a4_111 = 2<i32>
l230A1D74:
	a0_110 = 2047<i32>
	branch s0_105 << 0xC<u32> < 0<32> l230A1DB4
l230A1DB4:
	a4_111 = 3<i32>
l230A1D80:
	a4_111 = 3<i32>
	s1_149 = 16<i32>
l230A1C80:
	s0_105 = a2 >>u 0x1D<u32> | s0_105 << 3<u32> | 0x800000<32>
	a0_110 = a0_98 + -1023<i32>
	a5_104 = a2 << 3<u32>
l230A1C9C:
	a4_111 = 0<i32>
l230A1CA0:
	word32 a0_176 = s7_168 + a0_110
	word32 a3_166 = s8_159 << 2<u32> | a4_111
	word32 a6_192 = a1 >>u 0x1F<u32> ^ a3 >>u 0x1F<u32>
	word32 a7_193 = a0_176 + 1<i32>
	branch a3_166 >u -15<i32> l230A1E30
l230A1E30:
	word32 t5_210 = a5_104 & 0xFFFF<32>
	word32 a4_204 = s4_197 >>u 0x10<u32>
	word32 s4_209 = s4_197 & 0xFFFF<32>
	word32 a3_208 = a5_104 >>u 0x10<u32>
	word32 t4_213 = a4_204 + t5_210
	word32 a5_212 = t5_210 + s4_209
	word32 a2_216 = (a5_212 >>u 0x10<u32>) + ((a3_208 + s4_209) + t4_213)
	word32 t3_217 = a4_204 + a3_208
	branch a2_216 >=u t4_213 l230A1E6C
l230A1E68:
	t3_217 = t3_217 + 0x10000<32>
l230A1E6C:
	word32 t6_230 = s0_105 & 0xFFFF<32>
	word32 t4_229 = s0_105 >>u 0x10<u32>
	word32 a5_236 = a4_204 + t6_230
	word32 a1_234 = s4_209 + t6_230
	word32 a2_232 = ((a2_216 & 0xFFFF<32>) << 0x10<u32>) + (a5_212 & 0xFFFF<32>)
	word32 s4_240 = (a1_234 >>u 0x10<u32>) + ((t4_229 + s4_209) + a5_236)
	word32 a4_241 = a4_204 + t4_229
	branch s4_240 >=u a5_236 l230A1EB0
l230A1EA8:
	a4_241 = a4_241 + 0x10000<32>
l230A1EB0:
	word32 s0_260 = s3_253 >>u 0x10<u32>
	word32 s3_261 = s3_253 & 0xFFFF<32>
	word32 s4_269 = ((s4_240 & 0xFFFF<32>) << 0x10<u32>) + (a1_234 & 0xFFFF<32>)
	word32 a4_272 = s0_260 + t5_210
	word32 t2_267 = t5_210 + s3_261
	word32 t1_248 = (s4_240 >>u 0x10<u32>) + a4_241
	word32 t0_271 = (a2_216 >>u 0x10<u32>) + s4_269
	word32 t5_275 = a3_208 + s0_260
	word32 a3_279 = (t2_267 >>u 0x10<u32>) + ((a3_208 + s3_261) + a4_272)
	branch a3_279 >=u a4_272 l230A1F00
l230A1EFC:
	t5_275 = t5_275 + 0x10000<32>
l230A1F00:
	word32 a5_294 = s0_260 + t6_230
	word32 t2_297 = s3_261 + t6_230
	word32 t5_285 = (a3_279 >>u 0x10<u32>) + t5_275
	word32 a3_295 = ((a3_279 & 0xFFFF<32>) << 0x10<u32>) + (t2_267 & 0xFFFF<32>)
	word32 a1_301 = t4_229 + s0_260
	word32 s3_304 = (t2_297 >>u 0x10<u32>) + ((t4_229 + s3_261) + a5_294)
	branch s3_304 >=u a5_294 l230A1F44
l230A1F40:
	a1_301 = a1_301 + 0x10000<32>
l230A1F44:
	word32 t3_319 = t3_217 + t0_271
	word32 s4_323 = CONVERT(t3_319 <u s4_269, bool, word32)
	word32 a4_326 = ((s3_304 & 0xFFFF<32>) << 0x10<u32>) + (t2_297 & 0xFFFF<32>) + t1_248
	word32 t3_329 = t3_319 + a3_295
	word32 s0_327 = a4_326 + s4_323
	word32 a3_330 = CONVERT(t3_329 <u a3_295, bool, word32)
	word32 t4_332 = s0_327 + t5_285
	word32 t6_333 = t4_332 + a3_330
	word32 a3_1279 = CONVERT(t4_332 <u t5_285, bool, word32) | CONVERT(t6_333 <u a3_330, bool, word32)
	word32 s0_347 = (CONVERT(a4_326 <u t1_248, bool, word32) | CONVERT(s0_327 <u s4_323, bool, word32)) + (s3_304 >>u 0x10<u32>) + a3_1279 + a1_301 << 9<u32> | t6_333 >>u 0x17<u32>
	word32 a5_358 = CONVERT((t3_329 << 9<u32> | a2_232) != 0<32>, bool, word32) | t3_329 >>u 0x17<u32> | t6_333 << 9<u32>
	branch s0_347 << 7<u32> >= 0<32> l230A2070
l230A2070:
	a7_193 = a0_176
l230A1FD4:
	a5_358 = a5_358 >>u 1<u32> | a5_358 & 1<i32> | s0_347 << 0x1F<u32>
	s0_347 = s0_347 >>u 1<u32>
l230A1FEC:
	word32 a5_442
	word32 a4_376
	word32 s0_468
	word32 a1_375 = a7_193 + 1023<i32>
	branch a1_375 <= 0<32> l230A2100
l230A2100:
	a4_376 = 1<i32>
	branch a1_375 != 0<32> l230A2170
l230A2108:
	word32 a4_380 = s0_347
	branch (a5_358 & 7<i32>) == 0<32> l230A2164
l230A2114:
	word32 a4_416
	s1_149 = s1_149 | 1<i32>
	branch s2_33 == 2<i32> l230A215C
l230A215C:
	a4_380 = s0_347
	branch a6_192 != 0<32> l230A2154
l230A2120:
	branch s2_33 == 3<i32> l230A214C
l230A214C:
	a4_380 = s0_347
	branch a6_192 != 0<32> l230A2164
l230A2154:
	a4_416 = CONVERT(a5_358 <u -8<i32>, bool, word32)
l230A2128:
	a4_380 = s0_347
	branch s2_33 != 0<32> l230A2164
l230A2130:
	branch (a5_358 & 15<i32>) == 4<i32> l230A2164
l230A213C:
	a4_416 = CONVERT(a5_358 <u -4<i32>, bool, word32)
l230A2140:
	a4_380 = (a4_416 ^ 1<i32>) + s0_347
l230A2164:
	a4_376 = (a4_380 >>u 0x18<u32> ^ 1<i32>) & 1<i32>
l230A2170:
	a3_1279 = 1<i32> - a1_375
	branch a3_1279 > 56<i32> l230A2274
l230A2274:
	a5_442 = a5_358 | s0_347
	branch a5_442 == 0<32> l230A22AC
l230A227C:
	word32 a5_453
	s1_149 = s1_149 | 1<i32>
	branch s2_33 == 2<i32> l230A22BC
l230A22BC:
	a5_453 = 9<i32>
	branch a6_192 != 0<32> l230A22A8
l230A22C4:
l230A2288:
	branch s2_33 == 3<i32> l230A22A0
l230A22A0:
	a5_453 = 9<i32>
	branch a6_192 != 0<32> l230A2298
l230A2290:
	a5_453 = 5<i32>
	branch s2_33 == 0<32> l230A22A8
l230A2298:
	a5_453 = 1<i32>
l230A22A8:
	a5_442 = a5_453 >>u 3<u32>
l230A22AC:
	s1_149 = s1_149 | 2<i32>
	s0_468 = 0<i32>
	a4_376 = 0<i32>
l230A2180:
	word32 a5_487
	word32 s0_488
	branch a3_1279 > 31<i32> l230A21E8
l230A21E8:
	word32 a2_474 = s0_347 >>u -31<i32> - a1_375
	word32 a1_475 = 0<i32>
	branch a3_1279 == 32<i32> l230A2208
l230A2200:
	a1_475 = s0_347 << a7_193 + 1086<i32>
l230A2208:
	a5_487 = a2_474 | CONVERT((a1_475 | a5_358) != 0<32>, bool, word32)
	s0_488 = 0<i32>
l230A2188:
	word32 a7_489 = a7_193 + 1054<i32>
	a5_487 = s0_347 << a7_489 | a5_358 >>u a3_1279 | CONVERT(a5_358 << a7_489 != 0<32>, bool, word32)
	s0_488 = s0_347 >>u a3_1279
l230A21A8:
	branch (a5_487 & 7<i32>) == 0<32> l230A222C
l230A21B0:
	word32 a3_509
	s1_149 = s1_149 | 1<i32>
	branch s2_33 == 2<i32> l230A2228
l230A2228:
	branch a6_192 != 0<32> l230A2220
l230A21BC:
	branch s2_33 == 3<i32> l230A221C
l230A221C:
	branch a6_192 != 0<32> l230A222C
l230A2220:
	a3_509 = a5_487 + 8<i32>
l230A21C4:
	branch s2_33 != 0<32> l230A222C
l230A21C8:
	branch (a5_487 & 15<i32>) == 4<i32> l230A222C
l230A21D4:
	a3_509 = a5_487 + 4<i32>
l230A21D8:
	s0_488 = s0_488 + CONVERT(a3_509 <u a5_487, bool, word32)
	a5_487 = a3_509
l230A222C:
	a3_1279 = s0_488 << 8<u32>
	branch a3_1279 >= 0<32> l230A224C
l230A224C:
	a3_1279 = a5_487 >>u 3<u32>
	a5_442 = s0_488 << 0x1D<u32> | a3_1279
	s0_468 = s0_488 >>u 3<u32>
	branch a4_376 == 0<32> l230A1DD0
l230A2260:
	a4_376 = s1_149 & 1<i32>
	branch a4_376 == 0<32> l230A1DD0
l230A2268:
	a4_376 = 0<i32>
l230A2234:
	s1_149 = s1_149 | 1<i32>
	s0_468 = 0<i32>
	a5_442 = 0<i32>
	branch a4_376 != 0<32> l230A226C
l230A226C:
	s1_149 = s1_149 | 2<i32>
l230A2244:
	a4_376 = 1<i32>
l230A1FF4:
	branch (a5_358 & 7<i32>) == 0<32> l230A2088
l230A1FFC:
	word32 a4_550
	s1_149 = s1_149 | 1<i32>
	branch s2_33 == 2<i32> l230A2084
l230A2084:
	branch a6_192 != 0<32> l230A207C
l230A2008:
	branch s2_33 == 3<i32> l230A2078
l230A2078:
	branch a6_192 != 0<32> l230A2088
l230A207C:
	a4_550 = a5_358 + 8<i32>
l230A2010:
	branch s2_33 != 0<32> l230A2088
l230A2014:
	a3_1279 = 4<i32>
	branch (a5_358 & 15<i32>) == 4<i32> l230A2088
l230A2020:
	a4_550 = a5_358 + 4<i32>
l230A2024:
	s0_347 = s0_347 + CONVERT(a4_550 <u a5_358, bool, word32)
	a5_358 = a4_550
l230A2088:
	branch s0_347 << 7<u32> >= 0<32> l230A20A0
l230A2090:
	s0_347 = s0_347 & 0xFEFFFFFF<32>
	a1_375 = a7_193 + 1024<i32>
l230A20A0:
	branch a1_375 > 2046<i32> l230A20C0
l230A20C0:
	branch s2_33 == 2<i32> l230A20F8
l230A20F8:
	branch a6_192 != 0<32> l230A20EC
l230A20FC:
l230A20C8:
	branch s2_33 == 3<i32> l230A20E8
l230A20E8:
	branch a6_192 != 0<32> l230A20D4
l230A20D0:
	branch s2_33 == 0<32> l230A20EC
l230A20EC:
	a5_442 = 0<i32>
	a4_376 = 2047<i32>
l230A20D4:
	a5_442 = -1<i32>
	a4_376 = 2046<i32>
l230A20DC:
	s1_149 = s1_149 | 5<i32>
	s0_468 = a5_442
l230A20A8:
	a5_442 = s0_347 << 0x1D<u32> | a5_358 >>u 3<u32>
	s0_468 = s0_347 >>u 3<u32>
	a4_376 = a1_375
l230A1DD0:
	word32 a1_634 = CONVERT(SLICE(s0_468, word20, 0), word20, word32) | (a4_376 & 2047<i32>) << 0x14<u32> | a6_192 << 0x1F<u32>
	branch s1_149 == 0<32> l230A1DFC
l230A1DF8:
	__csrrs(fflags, ra)
l230A1DFC:
	s0Out = s0
	s1Out = s1
	a0Out = a5_442
	a1Out = a1_634
	a3Out = a3_1279
	s2Out = s2
	s3Out = s3
	s4Out = s4
	s5Out = s5
	s6Out = s6
	s7Out = s7
	s8Out = s8
	s9Out = s9
	fflagsOut = fflags
	frmOut = frm
	return ra
l230A1CC0:
	word32 a3_796 = Mem25[(a3_166 + -1<i32> << 2<u32>) + 0x230CB434<p32>:int32] + 0x230CB434<p32>
	word32 s0_819
	word32 s6_820
	word32 s9_821
	word32 ra_822
	word32 s1_823
	word32 s2_824
	word32 s3_825
	word32 s4_826
	word32 s5_827
	word32 s7_828
	word32 s8_829
	word32 a0_830
	word32 a3_832
	word32 frm_833
	word32 a1_834
	word32 fflags_846
	call a3_796 (retsize: 0;)
		uses: a0:a0_176,a1:a1,a2:0x230CB434<p32>,a3:a3_796,fflags:fflags,frm:frm,ra:ra,s0:s0_226,s1:s1_387,s2:s2_33,s3:s3_253,s4:s4_197,s5:a1 >>u 0x1F<u32>,s6:a3 >>u 0x1F<u32>,s7:s7_168,s8:s8_159,s9:a2
		defs: a0:a0_830,a1:a1_834,a3:a3_832,fflags:fflags_846,frm:frm_833,ra:ra_822,s0:s0_819,s1:s1_823,s2:s2_824,s3:s3_825,s4:s4_826,s5:s5_827,s6:s6_820,s7:s7_828,s8:s8_829,s9:s9_821
	s0Out = s0_819
	s1Out = s1_823
	a0Out = a0_830
	a1Out = a1_834
	a3Out = a3_832
	s2Out = s2_824
	s3Out = s3_825
	s4Out = s4_826
	s5Out = s5_827
	s6Out = s6_820
	s7Out = s7_828
	s8Out = s8_829
	s9Out = s9_821
	fflagsOut = fflags_846
	frmOut = frm_833
	return ra_822
__muldf3_exit:


word32 __subdf3(word32 ra, word32 a0, word32 a1, word32 a2, word32 a3, word32 fflags, word32 frm, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      print_number
//      parse_value
//      modf
//      __ieee754_pow
//      __ieee754_sqrt
//      rint
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut: a0 a1
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1 t3
// Preserved: ra s0 s1 s2 s3 s4 sp
__subdf3_entry:
l230A22EC:
	word32 s3_17 = __csrrs(frm, fp + -32<i32>)
	word32 a5_136 = a2 >>u 0x1D<u32> | (a3 & 0xFFFFF<32>) << 3<u32>
	word32 a6_210 = a3 >>u 0x14<u32> & 2047<i32>
	word32 s1_291 = a1 >>u 0x14<u32> & 2047<i32>
	word32 s2_104 = a1 >>u 0x1F<u32>
	word32 t3_111 = a0 >>u 0x1D<u32> | (a1 & 0xFFFFF<32>) << 3<u32>
	word32 a7_100 = a0 << 3<u32>
	word32 a3_39 = a3 >>u 0x1F<u32>
	word32 t1_193 = a2 << 3<u32>
	branch a6_210 != 2047<i32> l230A2364
l230A235C:
	branch (a5_136 | a2 << 3<u32>) != 0<32> l230A2368
l230A2364:
	a3_39 = a3 >>u 0x1F<u32> ^ 1<i32>
l230A2368:
	word32 a4_130 = s1_291 - a6_210
	branch a3_39 != a1 >>u 0x1F<u32> l230A2788
l230A2788:
	word32 s4_289
	word32 s0_286
	branch a4_130 <= 0<32> l230A2880
l230A2880:
	branch a4_130 == 0<32> l230A29C4
l230A29C4:
	branch (s1_291 + 1<i32> & 2046<i32>) != 0<32> l230A2BBC
l230A2BBC:
	s4_289 = (a0 << 3<u32>) - (a2 << 3<u32>)
	s0_286 = t3_111 - a5_136 - CONVERT(a0 << 3<u32> <u s4_289, bool, word32)
	branch s0_286 << 8<u32> >= 0<32> l230A2C54
l230A2C54:
	a7_100 = s4_289 | s0_286
	branch a7_100 != 0<32> l230A2BE8
l230A2C5C:
l230A2BD4:
	s4_289 = (a2 << 3<u32>) - (a0 << 3<u32>)
	s0_286 = a5_136 - t3_111 - CONVERT(a2 << 3<u32> <u s4_289, bool, word32)
	s2_104 = a3_39
l230A29D0:
	word32 a1_73 = t3_111 | a0 << 3<u32>
	word32 a2_74 = a5_136 | a2 << 3<u32>
	branch s1_291 != 0<32> l230A2AAC
l230A2AAC:
	branch s1_291 != 2047<i32> l230A2AE0
l230A2AE0:
	s1_291 = 0<i32>
	branch a6_210 == 2047<i32> l230A2ACC
l230A2AB4:
	branch a1_73 == 0<32> l230A2E00
l230A2E00:
	branch a6_210 == s1_291 l230A2B04
l230A2B04:
	s1_291 = 0<i32>
l230A2E04:
	s1_291 = 0<i32>
l230A2AB8:
	s1_291 = CONVERT((t3_111 & 0x400000<32>) <u 1<i32>, bool, word32) << 4<u32>
	branch a6_210 != 2047<i32> l230A2B0C
l230A2ACC:
	branch a2_74 == 0<32> l230A2AE8
l230A2AD0:
	branch a5_136 << 9<u32> < 0<32> l230A2AE8
l230A2AD8:
	s1_291 = 16<i32>
l230A2AE8:
	branch a1_73 != 0<32> l230A2B0C
l230A2B0C:
	branch a2_74 == 0<32> l230A26A8
l230A2AEC:
	branch a2_74 == 0<32> l230A2D84
l230A2D84:
	a7_100 = 0<i32>
	s2_104 = 0<i32>
	a5_136 = 0x400000<32>
	a4_130 = 2047<i32>
	s1_291 = 16<i32>
l230A2AF0:
	a7_100 = a2 << 3<u32>
	s2_104 = a3_39
l230A29DC:
	branch a1_73 != 0<32> l230A2A60
l230A2A60:
	branch a2_74 == 0<32> l230A29F4
l230A2A64:
	word32 a2_105 = (a0 << 3<u32>) - (a2 << 3<u32>)
	word32 a4_108 = t3_111 - a5_136 - CONVERT(a0 << 3<u32> <u a2_105, bool, word32)
	branch a4_108 << 8<u32> >= 0<32> l230A2A94
l230A2A94:
	a7_100 = a2_105 | a4_108
	branch a7_100 != 0<32> l230A2CD0
l230A2CD0:
	t3_111 = a4_108
	a7_100 = a2_105
l230A2A9C:
	s2_104 = CONVERT(s3_17 <u -3<i32>, bool, word32)
l230A2A7C:
	a7_100 = (a2 << 3<u32>) - (a0 << 3<u32>)
	t3_111 = a5_136 - t3_111 - CONVERT(a2 << 3<u32> <u a7_100, bool, word32)
l230A29E0:
	branch a2_74 != 0<32> l230A2CC4
l230A2CC4:
	t3_111 = a5_136
	a7_100 = a2 << 3<u32>
l230A2A8C:
	s2_104 = a3_39
l230A29E4:
	s2_104 = CONVERT(s3_17 <u -3<i32>, bool, word32)
	t3_111 = 0<i32>
	a7_100 = 0<i32>
l230A2884:
	word32 s0_134
	a4_130 = a6_210 - s1_291
	branch s1_291 != 0<32> l230A28FC
l230A28FC:
	branch a6_210 != 2047<i32> l230A2924
l230A2924:
	t3_111 = t3_111 | 0x800000<32>
	s0_134 = a4_130
l230A2904:
	a7_100 = a5_136 | a2 << 3<u32>
	branch a7_100 == 0<32> l230A2D68
l230A2D68:
	a5_136 = 0<i32>
	a4_130 = 2047<i32>
	s2_104 = a3_39
l230A290C:
	a7_100 = a2 << 3<u32>
	branch a5_136 << 9<u32> < 0<32> l230A2D78
l230A2D78:
	a4_130 = 2047<i32>
	s2_104 = a3_39
l230A2918:
	s2_104 = a3_39
l230A288C:
	branch (t3_111 | a0 << 3<u32>) != 0<32> l230A28B0
l230A28B0:
	s0_134 = a4_130 + -1<i32>
	branch a4_130 != 0xFFFFFFFF<32> l230A28D4
l230A28D4:
	branch a4_130 != 2047<i32> l230A2930
l230A2930:
	word32 s0_168
	word32 a7_153
	branch s0_134 > 56<i32> l230A29B8
l230A29B8:
	a7_153 = CONVERT((t3_111 | a0 << 3<u32>) != 0<32>, bool, word32)
l230A2938:
	branch s0_134 > 31<i32> l230A2984
l230A2984:
	word32 a4_157 = t3_111 >>u s0_134 + -32<i32>
	word32 a0_158 = 0<i32>
	branch s0_134 == 32<i32> l230A29A4
l230A2998:
	a0_158 = t3_111 << 64<i32> - s0_134
l230A29A4:
	a7_153 = a4_157 | CONVERT((a0_158 | a0 << 3<u32>) != 0<32>, bool, word32)
l230A29B0:
	s0_168 = 0<i32>
l230A2940:
	word32 a0_170 = 32<i32> - s0_134
	a7_153 = t3_111 << a0_170 | (a0 << 3<u32>) >>u s0_134 | CONVERT((a0 << 3<u32>) << a0_170 != 0<32>, bool, word32)
	s0_168 = t3_111 >>u s0_134
l230A2964:
	word32 a7_184 = (a2 << 3<u32>) - a7_153
	a5_136 = a5_136 - s0_168 - CONVERT(a2 << 3<u32> <u a7_184, bool, word32)
	t1_193 = a7_184
	a4_130 = a6_210
	s2_104 = a3_39
l230A28DC:
	a7_100 = a5_136 | a2 << 3<u32>
	branch a7_100 == 0<32> l230A2D5C
l230A2D5C:
	a5_136 = 0<i32>
	s2_104 = a3_39
l230A28E4:
	a7_100 = a2 << 3<u32>
	s2_104 = a3_39
	a6_210 = 0<i32>
	branch a5_136 << 9<u32> < 0<32> l230A2640
l230A28F8:
l230A28B8:
	word32 a7_211 = (a2 << 3<u32>) - (a0 << 3<u32>)
	a5_136 = a5_136 - t3_111 - CONVERT(a2 << 3<u32> <u a7_211, bool, word32)
	s2_104 = a3_39
	t1_193 = a7_211
l230A2894:
	s2_104 = a3_39
	branch a4_130 == 2047<i32> l230A24E4
l230A278C:
	word32 a3_222
	branch a6_210 != 0<32> l230A2828
l230A2828:
	branch s1_291 == 2047<i32> l230A23E0
l230A2830:
	a5_136 = a5_136 | 0x800000<32>
	a3_222 = a4_130
l230A2790:
	branch (a5_136 | a2 << 3<u32>) == 0<32> l230A2380
l230A2798:
	a3_222 = a4_130 + -1<i32>
	branch a4_130 != 0xFFFFFFFF<32> l230A27B8
l230A27B8:
	branch a4_130 == 2047<i32> l230A23BC
l230A27C0:
	word32 a3_246
	word32 t1_231
	branch a3_222 > 56<i32> l230A2874
l230A2874:
	t1_231 = CONVERT((a5_136 | a2 << 3<u32>) != 0<32>, bool, word32)
l230A27C8:
	branch a3_222 > 31<i32> l230A2840
l230A2840:
	word32 a4_235 = a5_136 >>u a3_222 + -32<i32>
	word32 a2_236 = 0<i32>
	branch a3_222 == 32<i32> l230A2860
l230A2854:
	a2_236 = a5_136 << 64<i32> - a3_222
l230A2860:
	t1_231 = a4_235 | CONVERT((a2_236 | a2 << 3<u32>) != 0<32>, bool, word32)
l230A286C:
	a3_246 = 0<i32>
l230A27D0:
	word32 a2_248 = 32<i32> - a3_222
	t1_231 = a5_136 << a2_248 | (a2 << 3<u32>) >>u a3_222 | CONVERT((a2 << 3<u32>) << a2_248 != 0<32>, bool, word32)
	a3_246 = a5_136 >>u a3_222
l230A27F4:
	t1_193 = (a0 << 3<u32>) - t1_231
	a5_136 = t3_111 - a3_246 - CONVERT(a0 << 3<u32> <u t1_193, bool, word32)
	a4_130 = s1_291
l230A27A0:
	t1_193 = (a0 << 3<u32>) - (a2 << 3<u32>)
	a5_136 = t3_111 - a5_136 - CONVERT(a0 << 3<u32> <u t1_193, bool, word32)
l230A27B0:
	a4_130 = 1<i32>
l230A2808:
	branch a5_136 << 8<u32> >= 0<32> l230A28A0
l230A2810:
	s0_286 = a5_136 & 0x7FFFFF<32>
	s4_289 = t1_193
	s1_291 = a4_130
l230A2BE8:
	word32 a0_298
	branch s0_286 == 0<32> l230A2C60
l230A2C60:
	word32 a4_1910
	word32 a5_1911
	a0_298 = __clzsi2(s4_289, out a4_1910, out a5_1911) + 32<i32>
l230A2BEC:
	word32 a5_1913
	word32 a4_1912
	a0_298 = __clzsi2(s0_286, out a4_1912, out a5_1913)
l230A2BF4:
	word32 s0_308
	word32 a4_304 = a0_298 + -8<i32>
	branch a4_304 > 31<i32> l230A2C70
l230A2C70:
	s0_308 = s4_289 << a0_298 + -40<i32>
	t1_193 = 0<i32>
l230A2C00:
	s0_308 = s4_289 >>u 32<i32> - a4_304 | s0_286 << a4_304
	t1_193 = s4_289 << a4_304
l230A2C18:
	branch a4_304 < s1_291 l230A2CB0
l230A2CB0:
	a4_130 = s1_291 - a4_304
	a5_136 = s0_308 & 0xFF7FFFFF<32>
l230A2C1C:
	word32 a4_326 = a4_304 - s1_291
	branch a4_326 > -30<i32> l230A2C80
l230A2C80:
	word32 a4_331 = s0_308 >>u a4_326 + -31<i32>
	word32 a3_332 = 0<i32>
	branch a4_326 == -31<i32> l230A2CA0
l230A2C94:
	a3_332 = s0_308 << 64<i32> - (a4_326 + 1<i32>)
l230A2CA0:
	a7_100 = a4_331 | CONVERT((t1_193 | a3_332) != 0<32>, bool, word32)
l230A2AA4:
	t3_111 = 0<i32>
l230A2C2C:
	word32 a4_345 = 32<i32> - (a4_326 + 1<i32>)
	a7_100 = s0_308 << a4_345 | t1_193 >>u a4_326 + 1<i32> | CONVERT(t1_193 << a4_345 != 0<32>, bool, word32)
	t3_111 = s0_308 >>u a4_326 + 1<i32>
l230A2370:
	branch a4_130 <= 0<32> l230A24C8
l230A24C8:
	branch a4_130 == 0<32> l230A25F0
l230A25F0:
	a4_130 = s1_291 + 1<i32>
	branch (s1_291 + 1<i32> & 2046<i32>) != 0<32> l230A26B8
l230A26B8:
	branch s1_291 == -2046<i32> l230A26E8
l230A26E8:
	branch s3_17 == 0<32> l230A26F8
l230A26EC:
	branch s3_17 != 3<i32> l230A2700
l230A2700:
	branch s3_17 != 2<i32> l230A270C
l230A2708:
	branch a1 >>u 0x1F<u32> != 0<32> l230A26F8
l230A26F4:
	branch a1 >>u 0x1F<u32> != 0<32> l230A270C
l230A26F8:
	a4_130 = 2047<i32>
l230A26C0:
	word32 t1_359 = (a0 << 3<u32>) + (a2 << 3<u32>)
	word32 t3_362 = t3_111 + a5_136 + CONVERT(t1_359 <u a0 << 3<u32>, bool, word32)
	a7_100 = t3_362 << 0x1F<u32> | t1_359 >>u 1<u32>
	a5_136 = t3_362 >>u 1<u32>
l230A25FC:
	word32 a3_367 = t3_111 | a0 << 3<u32>
	branch s1_291 != 0<32> l230A265C
l230A265C:
	branch s1_291 != 2047<i32> l230A2694
l230A2694:
	s1_291 = 0<i32>
	branch a6_210 == 2047<i32> l230A267C
l230A2664:
	branch a3_367 == 0<32> l230A2E18
l230A2E18:
	branch a6_210 == s1_291 l230A26B0
l230A26B0:
	s1_291 = 0<i32>
l230A2E1C:
	a7_100 = a2 << 3<u32>
l230A2668:
	s1_291 = CONVERT((t3_111 & 0x400000<32>) <u 1<i32>, bool, word32) << 4<u32>
	branch a6_210 != 2047<i32> l230A26A0
l230A267C:
	branch (a5_136 | a2 << 3<u32>) == 0<32> l230A2E0C
l230A2E0C:
	branch a3_367 != 0<32> l230A26A8
l230A2684:
	branch a5_136 << 9<u32> < 0<32> l230A269C
l230A268C:
	s1_291 = 16<i32>
l230A269C:
	branch a3_367 == 0<32> l230A2E10
l230A2E10:
	a7_100 = a2 << 3<u32>
l230A26A0:
	branch (a5_136 | a2 << 3<u32>) != 0<32> l230A2B10
l230A2B10:
	s2_104 = 0<i32>
	a5_136 = 0x400000<32>
	a7_100 = 0<i32>
	a4_130 = 2047<i32>
l230A26A8:
	a5_136 = t3_111
l230A2AF8:
	a6_210 = 0<i32>
	a4_130 = 2047<i32>
l230A2604:
	branch a3_367 == 0<32> l230A28A4
l230A2608:
	branch (a5_136 | a2 << 3<u32>) == 0<32> l230A29F4
l230A2610:
	t1_193 = (a0 << 3<u32>) + (a2 << 3<u32>)
	t3_111 = t3_111 + a5_136 + CONVERT(t1_193 <u a0 << 3<u32>, bool, word32)
	branch t3_111 << 8<u32> >= 0<32> l230A28A8
l230A2628:
	a5_136 = t3_111 & 0xFF7FFFFF<32>
	a7_100 = t1_193
	a6_210 = 0<i32>
	a4_130 = 1<i32>
l230A24CC:
	word32 s0_420
	a4_130 = a6_210 - s1_291
	branch s1_291 != 0<32> l230A2578
l230A2578:
	branch a6_210 != 2047<i32> l230A25A0
l230A25A0:
	t3_111 = t3_111 | 0x800000<32>
	s0_420 = a4_130
l230A2580:
	a7_100 = a5_136 | a2 << 3<u32>
	branch a7_100 == 0<32> l230A2D14
l230A2D14:
	a5_136 = 0<i32>
l230A2588:
	a7_100 = a2 << 3<u32>
	branch a5_136 << 9<u32> < 0<32> l230A2D4C
l230A24D4:
	branch (t3_111 | a0 << 3<u32>) != 0<32> l230A2500
l230A2500:
	s0_420 = a4_130 + -1<i32>
	branch a4_130 != 0xFFFFFFFF<32> l230A2520
l230A2520:
	branch a4_130 == 2047<i32> l230A24E4
l230A2528:
	word32 s0_448
	word32 a7_433
	branch s0_420 > 56<i32> l230A25E4
l230A25E4:
	a7_433 = CONVERT((t3_111 | a0 << 3<u32>) != 0<32>, bool, word32)
l230A2530:
	branch s0_420 > 31<i32> l230A25B0
l230A25B0:
	word32 a4_437 = t3_111 >>u s0_420 + -32<i32>
	word32 a0_438 = 0<i32>
	branch s0_420 == 32<i32> l230A25D0
l230A25C4:
	a0_438 = t3_111 << 64<i32> - s0_420
l230A25D0:
	a7_433 = a4_437 | CONVERT((a0_438 | a0 << 3<u32>) != 0<32>, bool, word32)
l230A25DC:
	s0_448 = 0<i32>
l230A2538:
	word32 a0_450 = 32<i32> - s0_420
	a7_433 = t3_111 << a0_450 | (a0 << 3<u32>) >>u s0_420 | CONVERT((a0 << 3<u32>) << a0_450 != 0<32>, bool, word32)
	s0_448 = t3_111 >>u s0_420
l230A255C:
	word32 a7_464 = a7_433 + (a2 << 3<u32>)
	a5_136 = s0_448 + a5_136 + CONVERT(a7_464 <u a2 << 3<u32>, bool, word32)
	t1_193 = a7_464
	a4_130 = a6_210
l230A2508:
	word32 a7_479 = (a0 << 3<u32>) + (a2 << 3<u32>)
	a5_136 = t3_111 + a5_136 + CONVERT(a7_479 <u a2 << 3<u32>, bool, word32)
	t1_193 = a7_479
l230A24DC:
	branch a4_130 != 2047<i32> l230A28A0
l230A24E4:
	a7_100 = a5_136 | a2 << 3<u32>
	branch a7_100 == 0<32> l230A2D54
l230A2D54:
	a5_136 = 0<i32>
l230A24EC:
	a7_100 = a2 << 3<u32>
	a6_210 = 0<i32>
	branch a5_136 << 9<u32> < 0<32> l230A2640
l230A24FC:
l230A2374:
	word32 a3_495
	branch a6_210 != 0<32> l230A23D8
l230A23D8:
	branch s1_291 != 2047<i32> l230A23F8
l230A23F8:
	a5_136 = a5_136 | 0x800000<32>
	a3_495 = a4_130
l230A23E0:
	a5_136 = t3_111 | a0 << 3<u32>
	branch a5_136 == 0<32> l230A2D40
l230A2D40:
	a7_100 = 0<i32>
l230A2D18:
	a4_130 = 2047<i32>
l230A23E8:
	branch t3_111 << 9<u32> < 0<32> l230A2D48
l230A2D48:
	a5_136 = t3_111
l230A2D4C:
	a4_130 = 2047<i32>
l230A23F0:
	a5_136 = t3_111
l230A2594:
l230A2598:
	a4_130 = 2047<i32>
	a6_210 = 0<i32>
l230A2378:
	branch (a5_136 | a2 << 3<u32>) != 0<32> l230A2394
l230A2394:
	a3_495 = a4_130 + -1<i32>
	branch a4_130 != 0xFFFFFFFF<32> l230A23B4
l230A23B4:
	branch a4_130 != 2047<i32> l230A2404
l230A2404:
	word32 a3_530
	word32 t1_515
	branch a3_495 > 56<i32> l230A24BC
l230A24BC:
	t1_515 = CONVERT((a5_136 | a2 << 3<u32>) != 0<32>, bool, word32)
l230A240C:
	branch a3_495 > 31<i32> l230A2488
l230A2488:
	word32 a4_519 = a5_136 >>u a3_495 + -32<i32>
	word32 a2_520 = 0<i32>
	branch a3_495 == 32<i32> l230A24A8
l230A249C:
	a2_520 = a5_136 << 64<i32> - a3_495
l230A24A8:
	t1_515 = a4_519 | CONVERT((a2_520 | a2 << 3<u32>) != 0<32>, bool, word32)
l230A24B4:
	a3_530 = 0<i32>
l230A2414:
	word32 a2_532 = 32<i32> - a3_495
	t1_515 = a5_136 << a2_532 | (a2 << 3<u32>) >>u a3_495 | CONVERT((a2 << 3<u32>) << a2_532 != 0<32>, bool, word32)
	a3_530 = a5_136 >>u a3_495
l230A2438:
	t1_193 = t1_515 + (a0 << 3<u32>)
	a5_136 = a3_530 + t3_111 + CONVERT(t1_193 <u a0 << 3<u32>, bool, word32)
	a4_130 = s1_291
l230A239C:
	t1_193 = (a2 << 3<u32>) + (a0 << 3<u32>)
	a5_136 = t3_111 + a5_136 + CONVERT(t1_193 <u a0 << 3<u32>, bool, word32)
l230A23AC:
	a4_130 = 1<i32>
l230A244C:
	branch a5_136 << 8<u32> >= 0<32> l230A28A0
l230A28A0:
	branch a4_130 != 0<32> l230A2D9C
l230A2D9C:
	a7_100 = t1_193
l230A28A4:
	t3_111 = a5_136
l230A28A8:
	a7_100 = t1_193
l230A29F4:
	a5_136 = a7_100 | t3_111
	branch a5_136 == 0<32> l230A2DA4
l230A2DA4:
	a7_100 = 0<i32>
	a4_130 = 0<i32>
l230A29FC:
	word32 a6_592 = (t3_111 << 1<u32>) + (a7_100 >>u 0x1F<u32>)
	word32 a5_593 = a7_100 << 1<u32>
	s1_291 = 0<i32>
	branch (a5_593 & 7<i32>) == 0<32> l230A2A48
l230A2A18:
	branch s3_17 == 2<i32> l230A2CF8
l230A2CF8:
	s1_291 = 1<i32>
	branch s2_104 == 0<32> l230A2A48
l230A2D00:
	a6_592 = a6_592 + (CONVERT(a5_593 <u -8<i32>, bool, word32) ^ 1<i32>)
	s1_291 = s2_104
l230A2A20:
	branch s3_17 == 3<i32> l230A2CDC
l230A2CDC:
	s1_291 = s2_104
	branch s2_104 != 0<32> l230A2A48
l230A2CE4:
	a6_592 = a6_592 + (CONVERT(a5_593 <u -8<i32>, bool, word32) ^ 1<i32>)
	s1_291 = 1<i32>
l230A2A28:
	s1_291 = 1<i32>
	branch s3_17 != 0<32> l230A2A48
l230A2A30:
	branch (a5_593 & 15<i32>) == 4<i32> l230A2A48
l230A2A3C:
	a6_592 = a6_592 + (CONVERT(a5_593 <u -4<i32>, bool, word32) ^ 1<i32>)
l230A2A48:
	a6_210 = (a6_592 >>u 0x18<u32> ^ 1<i32>) & 1<i32>
	a5_136 = t3_111
	a4_130 = 0<i32>
l230A2454:
	a4_130 = a4_130 + 1<i32>
	branch a4_130 == 2047<i32> l230A2758
l230A2758:
	branch s3_17 == 0<32> l230A2768
l230A275C:
	branch s3_17 != 3<i32> l230A2778
l230A2778:
	branch s3_17 != 2<i32> l230A2D20
l230A2780:
	branch a1 >>u 0x1F<u32> != 0<32> l230A2768
l230A2784:
l230A270C:
l230A2764:
	branch a1 >>u 0x1F<u32> != 0<32> l230A2D20
l230A2D20:
l230A271C:
	a4_130 = 2046<i32>
	a6_210 = 0<i32>
	a5_136 = -1<i32>
	a7_100 = -1<i32>
	s1_291 = 5<i32>
l230A2768:
	a5_136 = 0<i32>
	a7_100 = 0<i32>
	s1_291 = 5<i32>
l230A2460:
	word32 a3_695 = a5_136 & 0xFF7FFFFF<32>
	a7_100 = a3_695 << 0x1F<u32> | (t1_193 >>u 1<u32> | t1_193 & 1<i32>)
	a5_136 = a3_695 >>u 1<u32>
l230A26E0:
	a6_210 = 0<i32>
l230A2380:
	branch a4_130 == 2047<i32> l230A23BC
l230A23BC:
	a5_136 = t3_111 | a0 << 3<u32>
	branch a5_136 == 0<32> l230A2D34
l230A2D34:
	a7_100 = 0<i32>
l230A2D38:
	s1_291 = 0<i32>
l230A23C4:
	branch t3_111 << 9<u32> < 0<32> l230A2388
l230A23CC:
	a5_136 = t3_111
l230A23D0:
	s1_291 = 16<i32>
l230A2388:
	a5_136 = t3_111
l230A238C:
	s1_291 = 0<i32>
l230A2640:
	branch (a7_100 & 7<i32>) != 0<32> l230A2720
l230A2720:
	word32 a3_808
	s1_291 = s1_291 | 1<i32>
	branch s3_17 == 2<i32> l230A2DBC
l230A2DBC:
	branch s2_104 != 0<32> l230A2DB4
l230A272C:
	branch s3_17 == 3<i32> l230A2DB0
l230A2DB0:
	branch s2_104 != 0<32> l230A2DC0
l230A2DB4:
	a3_808 = a7_100 + 8<i32>
l230A2734:
	branch s3_17 != 0<32> l230A2DC0
l230A2738:
	branch (a7_100 & 15<i32>) == 4<i32> l230A2DC0
l230A2744:
	a3_808 = a7_100 + 4<i32>
l230A2748:
	a5_136 = a5_136 + CONVERT(a3_808 <u a7_100, bool, word32)
	a7_100 = a3_808
l230A2DC0:
	branch a6_210 != 0<32> l230A2654
l230A2DC4:
l230A2648:
	branch a6_210 == 0<32> l230A2B20
l230A264C:
	branch (s1_291 & 1<i32>) == 0<32> l230A2B20
l230A2654:
	s1_291 = s1_291 | 2<i32>
l230A2B20:
	branch a5_136 << 8<u32> >= 0<32> l230A2B40
l230A2B28:
	a4_130 = a4_130 + 1<i32>
	branch a4_130 == 2047<i32> l230A2DC8
l230A2DC8:
	a7_100 = 0<i32>
	branch s3_17 == 0<32> l230A2DF4
l230A2DD0:
	branch s3_17 != 3<i32> l230A2DE8
l230A2DE8:
	branch s3_17 != 2<i32> l230A2DDC
l230A2DF0:
	branch s2_104 == 0<32> l230A2DDC
l230A2DD8:
	branch s2_104 == 0<32> l230A2DF4
l230A2DDC:
	a7_100 = -1<i32>
	a4_130 = 2046<i32>
l230A2DF4:
	s1_291 = s1_291 | 5<i32>
	a5_136 = a7_100
l230A2B34:
	a5_136 = a5_136 & 0xFF7FFFFF<32>
l230A2B40:
	word32 a7_917 = a5_136 << 0x1D<u32> | a7_100 >>u 3<u32>
	word32 a5_919 = a5_136 >>u 3<u32>
	branch a4_130 != 2047<i32> l230A2B70
l230A2B58:
	a7_917 = a7_917 | a5_919
	a5_919 = 0<i32>
	branch a7_917 == 0<32> l230A2B70
l230A2B64:
	a5_919 = 0x80000<32>
	a7_917 = 0<i32>
	s2_104 = 0<i32>
l230A2B70:
	word32 a1_942 = CONVERT(SLICE(a5_919, word20, 0), word20, word32) | (a4_130 & 2047<i32>) << 0x14<u32> | s2_104 << 0x1F<u32>
	branch s1_291 == 0<32> l230A2B9C
l230A2B98:
	__csrrs(fflags, ra)
l230A2B9C:
	a1Out = a1_942
	return a7_917
__subdf3_exit:


word32 __unorddf2(word32 a0, word32 a1, word32 a2, word32 a3, word32 fflags, word32 frm)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pow
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] fflags:[0..31] frm:[0..31]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7
// Preserved: sp
__unorddf2_entry:
l230A2E24:
	word32 a4_19
	__csrrs(frm, fp)
	word32 a1_12 = a1 >>u 0x14<u32> & 2047<i32>
	word32 a3_15 = a3 >>u 0x14<u32> & 2047<i32>
	branch a1_12 != 2047<i32> l230A2E58
l230A2E50:
	branch (a1 & 0xFFFFF<32> | a0) != 0<32> l230A2E80
l230A2E58:
	a4_19 = 0<i32>
	branch a3_15 != 2047<i32> l230A2E6C
l230A2E64:
	branch (a3 & 0xFFFFF<32> | a2) != 0<32> l230A2E74
l230A2E74:
	branch a1_12 != a3_15 l230A2EA0
l230A2E78:
	branch (a1 & 0xFFFFF<32> | a0) == 0<32> l230A2E94
l230A2E80:
	branch (a1 & 0xFFFFF<32>) << 0xC<u32> >= 0<32> l230A2EAC
l230A2E88:
	a4_19 = 1<i32>
	branch a3_15 != 2047<i32> l230A2E6C
l230A2E94:
	a4_19 = 1<i32>
	branch (a3 & 0xFFFFF<32> | a2) == 0<32> l230A2E6C
l230A2EA0:
	a4_19 = 1<i32>
	branch (a3 & 0xFFFFF<32>) << 0xC<u32> < 0<32> l230A2E6C
l230A2EAC:
	__csrrs(fflags, 0x10<32>)
	a4_19 = 1<i32>
l230A2E6C:
	return a4_19
__unorddf2_exit:


word32 __fixdfsi(word32 ra, word32 a0, word32 a1, word32 fflags, word32 frm, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      rf_pri_get_vco_freq_cw
//      rf_pri_get_vco_idac_cw
//      tpc_get_vif_tx_power_vs_rate
//      rf_set_channel
//      phyif_utils_decode
//      tcpip_stack_input
//      parse_value
//      cJSON_CreateNumber
//      ecvtbuf
// MayUse:  a0:[0..31] a1:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut: a0 a1 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6
// Preserved: sp
__fixdfsi_entry:
l230A2EB8:
	word32 a5_31
	__csrrs(frm, fp)
	word32 a3_28 = a1 >>u 0x14<u32> & 2047<i32>
	word32 a4_10 = 1022<i32>
	branch a3_28 > 1022<i32> l230A2EF0
l230A2EF0:
	branch a3_28 <= 1053<i32> l230A2F34
l230A2F34:
	word32 a5_14 = a1 & 0xFFFFF<32> | 0x100000<32>
	word32 a2_16 = 1075<i32> - a3_28
	branch a2_16 > 31<i32> l230A2F74
l230A2F74:
	word32 a4_19 = 0<i32>
	branch a2_16 == 32<i32> l230A2F88
l230A2F80:
	a4_19 = a5_14 << a3_28 + -1011<i32>
l230A2F88:
	a3_28 = 1043<i32> - a3_28
	a4_10 = CONVERT((a4_19 | a0) != 0<32>, bool, word32)
	a5_31 = a5_14 >>u a3_28
l230A2F48:
	a3_28 = a3_28 + -1043<i32>
	a4_10 = CONVERT(a0 << a3_28 + -1043<i32> != 0<32>, bool, word32)
	a5_31 = a5_14 << a3_28 + -1043<i32> | a0 >>u a2_16
l230A2F60:
	branch a1 >>u 0x1F<u32> == 0<32> l230A2F68
l230A2F64:
	a5_31 = 0<32> - a5_31
l230A2F68:
	branch a4_10 == 0<32> l230A2EE8
l230A2EF8:
	a5_31 = (a1 >>u 0x1F<u32>) + 0x7FFFFFFF<32>
	branch a1 >>u 0x1F<u32> == 0<32> l230A2FAC
l230A2FAC:
	a4_10 = 16<i32>
l230A2F08:
	a4_10 = 16<i32>
	branch a3_28 != 1054<i32> l230A2F6C
l230A2F14:
	a3_28 = a0 >>u 0x15<u32>
	branch ((a1 & 0xFFFFF<32>) << 0xB<u32> | a0 >>u 0x15<u32>) != 0<32> l230A2F6C
l230A2F24:
	a4_10 = a0 << 0xB<u32>
	branch a0 << 0xB<u32> == 0<32> l230A2EE8
l230A2F2C:
	a4_10 = a1 >>u 0x1F<u32>
l230A2EDC:
	branch a3_28 != 0<32> l230A2FA0
l230A2EE0:
	a5_31 = a1 & 0xFFFFF<32> | a0
	branch a5_31 != 0<32> l230A2FA0
l230A2FA0:
	a5_31 = 0<i32>
	a4_10 = 1<i32>
l230A2F6C:
	__csrrs(fflags, ra)
l230A2EE8:
	a1Out = a1 >>u 0x1F<u32>
	a3Out = a3_28
	a4Out = a4_10
	a5Out = a5_31
	return a5_31
__fixdfsi_exit:


word32 __fixunsdfsi(word32 ra, word32 a0, word32 a1, word32 fflags, word32 frm, ptr32 & a4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      rfc_init
//      rf_pri_rccal_iq
// MayUse:  a0:[0..31] a1:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut: a0 a4
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: sp
__fixunsdfsi_entry:
l230A2FB4:
	word32 a4_16
	word32 a0_13
	__csrrs(frm, fp)
	word32 a3_9 = a1 >>u 0x14<u32> & 2047<i32>
	branch a3_9 > 1022<i32> l230A2FE8
l230A2FE8:
	branch a1 >>u 0x1F<u32> != 0<32> l230A3064
l230A3064:
	a0_13 = 0<i32>
l230A2FEC:
	branch a3_9 > 1054<i32> l230A3070
l230A3070:
	a0_13 = -1<i32>
l230A3068:
	a4_16 = 16<i32>
l230A2FF4:
	word32 a5_18 = a1 & 0xFFFFF<32> | 0x100000<32>
	word32 a2_19 = 1075<i32> - a3_9
	branch a2_19 > 31<i32> l230A302C
l230A302C:
	word32 a4_22 = 0<i32>
	branch a2_19 == 32<i32> l230A3040
l230A3038:
	a4_22 = a5_18 << a3_9 + -1011<i32>
l230A3040:
	a4_16 = CONVERT((a4_22 | a0) != 0<32>, bool, word32)
	a0_13 = a5_18 >>u 1043<i32> - a3_9
l230A3008:
	a4_16 = CONVERT(a0 << a3_9 + -1043<i32> != 0<32>, bool, word32)
	a0_13 = a5_18 << a3_9 + -1043<i32> | a0 >>u a2_19
l230A3020:
	branch a4_16 == 0<32> l230A3078
l230A3078:
	a4Out = a4_16
	return a0_13
l230A2FD8:
	branch a3_9 != 0<32> l230A3058
l230A2FDC:
	word32 a0_42 = a1 & 0xFFFFF<32> | a0
	branch a0_42 != 0<32> l230A3058
l230A3058:
	a0_13 = 0<i32>
	a4_16 = 1<i32>
l230A3024:
	__csrrs(fflags, ra)
	a4Out = a4_16
	return a0_13
l230A2FE4:
	a4Out = 0x100000<32>
	return a0_42
__fixunsdfsi_exit:


word32 __floatsidf(word32 a0, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pa_input
//      tpc_get_vif_tx_power_vs_rate
//      rf_set_channel
//      phyif_utils_decode
//      tcpip_stack_input
//      print_number
//      parse_value
//      ADC_Parse_Result
//      __ieee754_pow
// MayUse:  a0:[0..31]
// LiveOut: a0 a1
// Trashed: a0 a1 a4 a5
// Preserved: ra s0 s1 sp
__floatsidf_entry:
l230A307C:
	word32 s0_27
	word32 a4_11
	word32 a5_12
	branch a0 == 0<32> l230A311C
l230A311C:
	a4_11 = 0<i32>
	a5_12 = 0<i32>
l230A3090:
	word32 s0_15 = (a0 >> 0x1F<u32> ^ a0) - (a0 >> 0x1F<u32>)
	word32 a5_69
	word32 a4_68
	word32 a0_18 = __clzsi2(s0_15, out a4_68, out a5_69)
	a4_11 = 1054<i32> - a0_18
	branch a0_18 > 10<i32> l230A3108
l230A3108:
	a5_12 = s0_15 << a0_18 + -11<i32>
	a0 = a0 >>u 0x1F<u32>
l230A3114:
	s0_27 = 0<i32>
l230A30B8:
	a5_12 = s0_15 >>u 11<i32> - a0_18
	s0_27 = s0_15 << a0_18 + 21<i32>
	a0 = a0 >>u 0x1F<u32>
l230A30D0:
	a1Out = CONVERT(SLICE(a5_12, word20, 0), word20, word32) | (a4_11 & 2047<i32>) << 0x14<u32> | a0 << 0x1F<u32>
	return s0_27
__floatsidf_exit:


word32 __floatunsidf(word32 a0, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      rfc_init
//      rf_pri_rccal_iq
//      rf_pri_get_vco_freq_cw
//      rf_pri_get_vco_idac_cw
//      __floatundisf
// MayUse:  a0:[0..31]
// LiveOut: a0 a1
// Trashed: a0 a1 a3 a4 a5
// Preserved: ra s0 sp
__floatunsidf_entry:
l230A3128:
	word32 a4_11
	word32 a5_10
	word32 s0_20 = a0
	branch a0 == 0<32> l230A31A0
l230A31A0:
	a5_10 = 0<i32>
	a4_11 = 0<i32>
l230A313C:
	word32 a4_46
	word32 a5_47
	word32 a0_12 = __clzsi2(a0, out a4_46, out a5_47)
	a4_11 = 1054<i32> - a0_12
	branch a0_12 > 10<i32> l230A3190
l230A3190:
	a5_10 = a0 << a0_12 + -11<i32>
	s0_20 = 0<i32>
l230A3150:
	a5_10 = a0 >>u 11<i32> - a0_12
	s0_20 = a0 << a0_12 + 21<i32>
l230A3164:
	a1Out = CONVERT(SLICE(a5_10, word20, 0), word20, word32) | (a4_11 & 2047<i32>) << 0x14<u32>
	return s0_20
__floatunsidf_exit:


word32 __extendsfdf2(word32 ra, word32 fa0, word32 fflags, word32 frm, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pa_adapt
//      rfc_init
//      tcpip_stack_input
//      bl_tsen_adc_get
//      iperf_server_udp_recv_fn
//      iperf_client_udp
//      iperf_server
//      iperf_client_tcp
//      ADC_Parse_Result
//      TSEN_Get_Temp
// MayUse:  fa0:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut: a0 a1
// Trashed: a0 a1 a4 a5
// Preserved: ra s0 s1 s2 sp
__extendsfdf2_entry:
l230A31AC:
	word32 a0_31
	word32 a5_23
	__csrrs(frm, fp + -16<i32>)
	word32 a0_17 = fa0 >>u 0x17<u32> & 255<i32>
	word32 s1_20 = a0_17 + 1<i32> & 254<i32>
	word32 s0_21 = CONVERT(SLICE(fa0, word23, 0), word23, word32)
	branch s1_20 == 0<32> l230A323C
l230A323C:
	branch a0_17 != 0<32> l230A3284
l230A3284:
	a5_23 = 0<i32>
	branch s0_21 == 0<32> l230A32A8
l230A328C:
	branch s0_21 << 9<u32> < 0<32> l230A3298
l230A3294:
	s1_20 = 16<i32>
l230A3298:
	s0_21 = s0_21 << 0x1D<u32>
	a5_23 = s0_21 >>u 3<u32> | 0x80000<32>
l230A32A8:
	a0_31 = 2047<i32>
l230A3240:
	branch s0_21 == 0<32> l230A32B0
l230A32B0:
	a5_23 = 0<i32>
	a0_31 = 0<i32>
l230A3244:
	word32 a4_131
	word32 a5_132
	word32 a0_35 = __clzsi2(s0_21, out a4_131, out a5_132)
	branch a0_35 > 10<i32> l230A3274
l230A3274:
	a5_23 = s0_21 << a0_35 + -11<i32>
	s0_21 = 0<i32>
l230A3254:
	a5_23 = s0_21 >>u 11<i32> - a0_35
	s0_21 = s0_21 << a0_35 + 21<i32>
l230A3268:
	a0_31 = 905<i32> - a0_35
l230A31E8:
	a5_23 = s0_21 >>u 3<u32>
	a0_31 = a0_17 + 896<i32>
	s0_21 = s0_21 << 0x1D<u32>
	s1_20 = 0<i32>
l230A31F8:
	word32 a1_73 = CONVERT(SLICE(a5_23, word20, 0), word20, word32) | (a0_31 & 2047<i32>) << 0x14<u32> | (fa0 >>u 0x1F<u32>) << 0x1F<u32>
	branch s1_20 == 0<32> l230A3224
l230A3220:
	__csrrs(fflags, ra)
l230A3224:
	a1Out = a1_73
	return s0_21
__extendsfdf2_exit:


word32 __truncdfsf2(word32 ra, word32 a0, word32 a1, word32 fflags, word32 frm, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & fa0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      pa_input
//      pa_adapt
//      ADC_Parse_Result
//      TSEN_Get_Temp
//      __floatundisf
// MayUse:  a0:[0..31] a1:[0..31] fflags:[0..31] frm:[0..31] ra:[0..31]
// LiveOut: a1 a2 a3 a4 a5 fa0
// Trashed: a1 a2 a3 a4 a5 a6 a7 fa0 t1
// Preserved: a0 sp
__truncdfsf2_entry:
l230A32BC:
	word32 a2_105
	word32 a6_112
	word32 a5_100
	word32 t1_10 = a1 >>u 0x14<u32> & 2047<i32>
	word32 a7_4 = __csrrs(frm, fp)
	word32 a3_102 = a0 >>u 0x1D<u32> | CONVERT(SLICE(a1, word20, 0), word20, word32) << 3<u32>
	word32 a4_103 = t1_10 + 1<i32> & 2046<i32>
	word32 a1_16 = a1 >>u 0x1F<u32>
	branch a4_103 == 0<32> l230A34C0
l230A34C0:
	a5_100 = a3_102 | a0 << 3<u32>
	branch t1_10 != 0<32> l230A34D0
l230A34D0:
	branch a5_100 == 0<32> l230A3534
l230A3534:
	a2_105 = 0<i32>
	a6_112 = 255<i32>
l230A34D4:
	a2_105 = 0<i32>
	branch t1_10 != 2047<i32> l230A34F0
l230A34E0:
	a2_105 = CONVERT((a3_102 & 0x400000<32>) <u 1<i32>, bool, word32) << 4<u32>
l230A34F0:
	a5_100 = a3_102 << 3<u32> | 0x2000000<32>
	a6_112 = 255<i32>
l230A34C8:
	a5_100 = CONVERT(a5_100 != 0<32>, bool, word32)
l230A32F0:
	a6_112 = t1_10 + -896<i32>
	branch t1_10 <= -1150<i32> l230A33CC
l230A33CC:
	branch t1_10 > 0xFFFFFC80<32> l230A348C
l230A348C:
	a5_100 = CONVERT(a0 << 6<u32> != 0<32>, bool, word32) | a3_102 << 3<u32> | (a0 << 3<u32>) >>u 0x1D<u32>
	a4_103 = 0<i32>
	a2_105 = 0<i32>
l230A33D0:
	branch t1_10 < -873<i32> l230A3504
l230A3504:
	a5_100 = 1<i32>
l230A33D8:
	a3_102 = a3_102 | 0x800000<32>
	word32 a2_48 = 30<i32> - (t1_10 + -896<i32>)
	branch a2_48 > 31<i32> l230A345C
l230A345C:
	word32 a6_53 = (a3_102 | 0x800000<32>) >>u -2<i32> - (t1_10 + -896<i32>)
	word32 a4_54 = 0<i32>
	branch a2_48 == 32<i32> l230A347C
l230A3474:
	a4_54 = (a3_102 | 0x800000<32>) << t1_10 + -862<i32>
l230A347C:
	a5_100 = a6_53 | CONVERT((a4_54 | a0 << 3<u32>) != 0<32>, bool, word32)
l230A33F0:
	a3_102 = CONVERT(a0 << 3<u32> << t1_10 + -894<i32> != 0<32>, bool, word32) | (a3_102 | 0x800000<32>) << t1_10 + -894<i32>
	a5_100 = a0 << 3<u32> >>u a2_48 | a3_102
l230A340C:
	branch a5_100 == 0<32> l230A3540
l230A3540:
	a6_112 = 0<i32>
	a2_105 = 0<i32>
l230A3410:
	word32 a4_74 = a5_100 << 1<u32>
	a2_105 = 0<i32>
	branch (a4_74 & 7<i32>) == 0<32> l230A3448
l230A3420:
	branch a7_4 == 2<i32> l230A3520
l230A3520:
	a2_105 = 1<i32>
	branch a1 >>u 0x1F<u32> == 0<32> l230A3448
l230A3528:
	a4_74 = a4_74 + 8<i32>
	a2_105 = a1 >>u 0x1F<u32>
l230A3428:
	branch a7_4 == 3<i32> l230A350C
l230A350C:
	a2_105 = a1 >>u 0x1F<u32>
	branch a1 >>u 0x1F<u32> != 0<32> l230A3448
l230A3514:
	a4_74 = a4_74 + 8<i32>
	a2_105 = 1<i32>
l230A3430:
	a2_105 = 1<i32>
	branch a7_4 != 0<32> l230A3448
l230A3438:
	branch (a4_74 & 15<i32>) == 4<i32> l230A3448
l230A3444:
	a4_74 = a4_74 + 4<i32>
l230A3448:
	a4_103 = (a4_74 >>u 0x1B<u32> ^ 1<i32>) & 1<i32>
	a6_112 = 0<i32>
l230A34AC:
	a3_102 = a5_100 & 7<i32>
	branch a3_102 != 0<32> l230A331C
l230A34B4:
	branch a4_103 == 0<32> l230A3368
l230A34B8:
	a4_103 = a2_105 & 1<i32>
l230A32FC:
	branch a7_4 == 0<32> l230A335C
l230A3300:
	branch a7_4 != 3<i32> l230A3350
l230A3350:
	branch a7_4 != 2<i32> l230A330C
l230A3358:
	branch a1 >>u 0x1F<u32> == 0<32> l230A330C
l230A3308:
	branch a1 >>u 0x1F<u32> == 0<32> l230A335C
l230A335C:
	a5_100 = 0<i32>
	a6_112 = 255<i32>
	a2_105 = 5<i32>
l230A330C:
	a5_100 = -1<i32>
	a6_112 = 254<i32>
	a4_103 = 0<i32>
	a2_105 = 5<i32>
l230A331C:
	a3_102 = 2<i32>
	a2_105 = a2_105 | 1<i32>
	branch a7_4 == 2<i32> l230A3558
l230A3558:
	branch a1 >>u 0x1F<u32> == 0<32> l230A3344
l230A355C:
l230A3328:
	a3_102 = 3<i32>
	branch a7_4 == 3<i32> l230A354C
l230A354C:
	branch a1 >>u 0x1F<u32> != 0<32> l230A3344
l230A3550:
	a5_100 = a5_100 + 8<i32>
l230A3330:
	branch a7_4 != 0<32> l230A3344
l230A3334:
	a3_102 = a5_100 & 15<i32>
	branch a3_102 == 4<i32> l230A3344
l230A3340:
	a5_100 = a5_100 + 4<i32>
l230A3344:
	branch a4_103 == 0<32> l230A3368
l230A3348:
	a2_105 = a2_105 | 2<i32>
l230A3368:
	branch a5_100 << 5<u32> >= 0<32> l230A3388
l230A3370:
	a6_112 = a6_112 + 1<i32>
	branch a6_112 == 255<i32> l230A3560
l230A3560:
	a5_100 = 0<i32>
	branch a7_4 == 0<32> l230A358C
l230A3568:
	branch a7_4 != 3<i32> l230A3580
l230A3580:
	branch a7_4 != 2<i32> l230A3574
l230A3588:
	branch a1 >>u 0x1F<u32> == 0<32> l230A3574
l230A3570:
	branch a1 >>u 0x1F<u32> == 0<32> l230A358C
l230A3574:
	a5_100 = -1<i32>
	a6_112 = 254<i32>
l230A358C:
	a2_105 = a2_105 | 5<i32>
l230A337C:
	a5_100 = a5_100 & 0xFBFFFFFF<32>
l230A3388:
	word32 a5_177 = a5_100 >>u 3<u32>
	branch a6_112 != 255<i32> l230A33A0
l230A3394:
	branch a5_177 == 0<32> l230A33A0
l230A3398:
	a5_177 = 0x400000<32>
	a1_16 = 0<i32>
l230A33A0:
	word32 a1_192 = a1_16 << 0x1F<u32>
	word32 a5_194 = CONVERT(SLICE(a5_177, word23, 0), word23, word32) | (a6_112 & 255<i32>) << 0x17<u32> | a1_192
	branch a2_105 == 0<32> l230A33C4
l230A33C0:
	__csrrs(fflags, ra)
l230A33C4:
	a2Out = a2_105
	a3Out = a3_102
	a4Out = 255<i32>
	a5Out = a5_194
	fa0Out = a5_194
	return a1_192
__truncdfsf2_exit:


word32 abort(word32 ra, ptr32 & a0Out, ptr32 & s2Out, ptr32 & s6Out, ptr32 & s7Out, ptr32 & s8Out, ptr32 & s9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      at_cmd_init
//      __assert_func
// MayUse:  ra:[0..31]
// LiveOut: a0 ra s2 s6 s7 s8 s9
// Trashed:
// Preserved: sp
// Terminates process
abort_exit:
abort_entry:
l230A3594:
	raise(ra, 6<i32>)
	_exit(1<i32>)


void __assert_func(word32 ra, word32 a2, word32 s2, word32 s6, word32 s7, word32 s8, word32 s9)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      tcp_sent_callback
//      tcp_connected_callback
//      tcp_receive_callback
//      udp_send_data
//      tcp_err_callback
//      tcp_send_data
//      bl_cipstart
//      abort
//      __assert
// MayUse:  a2:[0..31] ra:[0..31] s2:[0..31] s6:[0..31] s7:[0..31] s8:[0..31] s9:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
// Terminates process
__assert_func_exit:
__assert_func_entry:
l230A35AC:
	word32 a0_16 = Mem11[Mem0[0x4200ECFC<p32>:int32] + 12<i32>:int32]
	branch a2 == 0<32> l230A35F4
l230A35E0:
	fiprintf(ra, a0_16, 0x230CB580<p32>, s2, s6, s7, s8, s9)
	ra = abort(ra, out a0_16, out s2, out s6, out s7, out s8, out s9)
l230A35F4:


void __assert(word32 ra, word32 s2, word32 s6, word32 s7, word32 s8, word32 s9)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ra:[0..31] s2:[0..31] s6:[0..31] s7:[0..31] s8:[0..31] s9:[0..31]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__assert_exit:
__assert_entry:
l230A3604:
	__assert_func(ra, 0<i32>, s2, s6, s7, s8, s9)


word32 atoi(word32 a0, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      cmd_wifi_cfg
//      cmd_wifi_ap_start
//      cmd_wifi_ap_conf_max_sta
//      wifi_rc_fixed_enable
//      wifi_capcode_cmd
//      ble_auth_passkey
//      cmd_gpio_get
//      cmd_gpio_set
//      cmd_gpio_func
//      cmd_wdt_init
//      netif_find
//      at_key_value_get
//      at_server_init
//      http_url_req
//      get_di_para
//      get_ip_para
//      httpc_tcp_recv
//      __assert
// MayUse:  a0:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
atoi_entry:
l230A3618:
l230A3620_thunk_strtol:
	word32 a1_7
	word32 a2_8
	word32 a3_9
	word32 a4_10
	word32 a5_11
	word32 a0_6 = strtol(a0, 0<i32>, 10<i32>, out a1_7, out a2_8, out a3_9, out a4_10, out a5_11)
	a1Out = a1_7
	a2Out = a2_8
	a3Out = a3_9
	a4Out = a4_10
	a5Out = a5_11
	return a0_6
atoi_exit:


void _atoi_r(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
_atoi_r_entry:
l230A3624:
l230A362C_thunk__strtol_r:
	_strtol_r(a0, a1, 0<i32>, 10<i32>)
	return
_atoi_r_exit:


word32 __errno(ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      aos_loop_run
//      pow
//      _close
//      _exit
//      _fstat
//      _kill
//      _lseek
//      _read
//      _sbrk
//      _stat
//      _write
// MayUse: 
// LiveOut: a0 a5
// Trashed: a0 a5
// Preserved: sp
__errno_entry:
l230A3630:
	word32 a0_6 = Mem0[0x4200ECFC<p32>:int32]
	a5Out = 0x4200ECFC<p32>
	return a0_6
__errno_exit:


void _fiprintf_r(word32 ra, word32 a0, word32 a1, word32 a2, word32 s2, word32 s6, word32 s7, word32 s8, word32 s9)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] ra:[0..31] s2:[0..31] s6:[0..31] s7:[0..31] s8:[0..31] s9:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6
// Preserved: ra sp
_fiprintf_r_entry:
l230A3640:
	word32 s0_64
	word32 a0_65
	word32 s2_66
	_vfiprintf_r(ra, a0, a1, a2, s2, s6, s7, s8, s9, out s0_64, out a0_65, out s2_66)
	return
_fiprintf_r_exit:


void fiprintf(word32 ra, word32 a0, word32 a1, word32 s2, word32 s6, word32 s7, word32 s8, word32 s9)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __assert_func
// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31] s2:[0..31] s6:[0..31] s7:[0..31] s8:[0..31] s9:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6
// Preserved: ra sp
fiprintf_entry:
l230A3678:
	word32 s0_71
	word32 a0_72
	word32 s2_73
	_vfiprintf_r(ra, Mem5[0x4200ECFC<p32>:int32], a0, a1, s2, s6, s7, s8, s9, out s0_71, out a0_72, out s2_73)
	return
fiprintf_exit:


word32 memchr(word32 a0, word32 a1, word32 a2, ptr32 & a3Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fdt_get_string
//      fdt_subnode_offset_namelen
//      tc_blfdtdump
//      __sfvwrite_r
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a0 a3 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: sp
memchr_entry:
l230A36C8:
	word32 a5_100
	branch (a0 & 3<i32>) == 0<32> l230A379C
l230A379C:
	a5_100 = a2
l230A36D4:
	a5_100 = a2 + -1<i32>
	branch a2 == 0<32> l230A3734
l230A36DC:
	branch CONVERT(Mem0[a0:byte], byte, word32) == (a1 & 255<i32>) l230A3738
l230A36E4:
	a3 = -1<i32>
l230A36FC:
	a0 = a0 + 1<i32>
	branch (a0 & 3<i32>) != 0<32> l230A36EC
l230A36EC:
	a5_100 = a5_100 + -1<i32>
	branch a5_100 == -1<i32> l230A3734
l230A36F4:
	branch CONVERT(Mem0[a0:byte], byte, word32) == (a1 & 255<i32>) l230A3738
l230A3708:
	branch a5_100 >u 3<i32> l230A373C
l230A373C:
	word32 a1_31 = a1 << 8<u32> & 0xFFFF<32> | a1 & 255<i32>
	word32 a7_33 = a1_31 << 0x10<u32> | a1_31
l230A3770:
	word32 a4_43 = a7_33 ^ Mem0[a0:int32]
	a3 = a4_43 + 0xFEFEFEFF<32>
	branch (a4_43 + 0xFEFEFEFF<32> & ~a4_43 & 0x80808080<32>) != 0<32> l230A3714
l230A378C:
	a5_100 = a5_100 + -4<i32>
	a0 = a0 + 4<i32>
	branch a5_100 >u 3<i32> l230A3770
l230A3798:
l230A3710:
	branch a5_100 == 0<32> l230A3734
l230A3714:
	branch CONVERT(Mem0[a0:byte], byte, word32) == (a1 & 255<i32>) l230A3738
l230A371C:
	a5_100 = a0 + a5_100
l230A372C:
	a0 = a0 + 1<i32>
	branch a5_100 != a0 l230A3724
l230A3724:
	branch CONVERT(Mem0[a0:byte], byte, word32) == (a1 & 255<i32>) l230A3738
l230A3734:
	a0 = 0<i32>
l230A3738:
	a3Out = a3
	a5Out = a5_100
	return a0
memchr_exit:


word32 memcmp(word32 a0, word32 a1, word32 a2, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      rxu_cntrl_frame_handle
//      scanu_search_by_ssid
//      scanu_rm_exist_ssid
//      _aid_list_delete
//      apm_probe_req_handler
//      apm_assoc_req_handler
//      process_rsn_ie
//      process_wpa_ie
//      IsEAPOL_MICValid
//      parseKeyKDE
//      KeyMgmtSta_IsRxEAPOLValid
//      supplicantAkmIsWpaWpa2
//      supplicantAkmIsWpa2
//      supplicantConstructContext
//      pmkCacheFindPSKElement
//      chan_ctxt_add
//      rxu_mgt_ind_handler
//      bl_utils_idx_lookup
//      stateGlobalGuard_scan_beacon
//      bt_mesh_beacon_recv
//      net_key_update
//      net_key_add
//      mod_sub_va_del
//      va_add
//      app_key_set
//      mod_reset
//      bt_mesh_ccm_decrypt
//      auth_match
//      prov_random
//      gen_prov_ctl
//      bl_find_valid_queued_entry
//      bt_conn_addr_le_cmp
//      find_ccc_cfg
//      find_sc_cfg
//      notify_cb
//      id_find
//      set_random_address
//      bt_unpair
//      id_create.isra.25
//      bt_setup_id_addr
//      init_work
//      bt_le_adv_start
//      bt_uuid_cmp
//      smp_public_key
//      smp_pairing_random
//      bt_smp_request_ltk
//      bt_smp_sign_verify
//      bt_keys_find.part.1
//      bt_keys_get_addr
//      bt_keys_find_irk
//      bt_keys_find_addr
//      bt_rpa_irk_matches
//      find_type_cb
//      fdt_subnode_offset_namelen
//      fdt_get_property_namelen_
//      ota_tcp_cmd
//      ls_cmd
//      psm_test_cmd
//      vfs_uart_init
//      hal_gpio_init_from_dts
//      ethernet_input
//      dhcp_server_recv
//      file_info
//      dirent_file
//      romfs_register
//      mbedtls_rsa_rsassa_pss_verify_ext
//      mbedtls_rsa_pkcs1_verify
//      mbedtls_ssl_prepare_handshake_record
//      mbedtls_ssl_parse_certificate
//      x509_name_cmp
//      x509_crt_check_parent
//      x509_crt_verify_top.isra.7
//      mbedtls_x509_crt_check_extended_key_usage
//      mbedtls_x509_crt_verify_with_profile
//      mbedtls_x509_crt_parse_der
//      oid_sig_alg_from_asn1.part.0
//      mbedtls_oid_get_attr_short_name
//      mbedtls_oid_get_x509_ext_type
//      mbedtls_oid_get_extended_key_usage
//      mbedtls_oid_get_pk_alg
//      mbedtls_oid_get_ec_grp
//      mbedtls_oid_get_md_alg
//      mbedtls_pem_read_buffer
//      mbedtls_ssl_handshake_server_step
//      two_way_long_needle
//      strstr
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: sp
memcmp_entry:
l230A37A4:
	word32 a5_17
	branch a2 <=u 3<i32> l230A37D8
l230A37AC:
	a3 = 3<i32>
	branch ((a0 | a1) & 3<i32>) != 0<32> l230A381C
l230A37BC:
	a4 = Mem0[a0:int32]
	branch a4 != Mem0[a1:int32] l230A381C
l230A381C:
	a5_17 = a2 + -1<i32>
l230A37C8:
	a2 = a2 + -4<i32>
	a0 = a0 + 4<i32>
	a1 = a1 + 4<i32>
	branch a2 >u 3<i32> l230A37BC
l230A37D8:
	a5_17 = a2 + -1<i32>
	branch a2 == 0<32> l230A3814
l230A37E0:
	a4 = CONVERT(Mem0[a0:byte], byte, word32)
	a3 = CONVERT(Mem0[a1:byte], byte, word32)
	branch a4 != a3 l230A3824
l230A37EC:
	a4 = a5_17 + 1<i32>
	a5_17 = a0 + 1<i32>
	word32 a0_39 = a0 + a4
l230A380C:
	a1 = a1 + 1<i32>
	branch a5_17 != a0_39 l230A37FC
l230A37FC:
	a4 = CONVERT(Mem0[a5_17:byte], byte, word32)
	a3 = CONVERT(Mem0[a1:byte], byte, word32)
	a5_17 = a5_17 + 1<i32>
	branch a4 != a3 l230A3824
l230A3824:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5_17
	return a4 - a3
l230A3814:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a5Out = a5_17
	return 0<i32>
memcmp_exit:


word32 memcpy(word32 a0, word32 a1, word32 a2, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out, ptr32 & a6Out, ptr32 & a7Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      scan_item_cb
//      wifiprov_wifi_state_get
//      trpc_power_get
//      rf_pri_update_tx_power_offset
//      mm_sta_add
//      mm_bcn_change
//      ps_send_pspoll
//      scan_probe_req_tx
//      sta_mgmt_register
//      txl_frame_get
//      txl_frame_send_null_frame
//      txl_frame_send_qosnull_frame
//      txl_frame_send_eapol_frame
//      vif_mgmt_register
//      rc_update_stats
//      rc_init
//      rxu_cntrl_frame_handle
//      scanu_scan_next
//      scanu_start
//      sm_scan_bss
//      sm_join_bss
//      sm_set_bss_param
//      sm_disconnect
//      sm_connect_ind
//      sm_auth_send
//      sm_assoc_req_send
//      sm_handle_supplicant_result
//      txu_cntrl_sechdr_len_compute
//      apm_start_cfm
//      apm_set_bss_param
//      apm_sta_add
//      apm_send_mlme
//      apm_bcn_set
//      apm_assoc_req_handler
//      keyMgmtSta_StartSession
//      supplicantInitSession
//      supplicantEnable
//      keyMgmtFormatWpaRsnIe
//      add_key_to_mac
//      add_mfp_key_to_mac
//      keyMgmtPlumbPairwiseKey
//      process_rsn_ie
//      process_wpa_ie
//      isApReplayCounterFresh
//      updateApReplayCounter
//      formEAPOLEthHdr
//      IsEAPOL_MICValid
//      parseKeyDataGTK
//      KeyMgmtSta_PrepareEAPOLFrame
//      supplicantConstructContext
//      KeyMgmtSta_DeriveKeys
//      GetKeyMsgNonceFromEAPOL
//      ProcessRxEAPOL_GrpMsg1
//      bl_sha256_crypto_kdf
//      pmkCacheSetPassphrase
//      pmkCacheAddPSK
//      RC4_Encrypt
//      sha256_compress
//      sha256_vector
//      hmac_sha256_vector
//      ProcessKeyMgmtDataAp
//      GenerateGTK_internal
//      PopulateKeyMsg
//      prepareKDE
//      Encrypt_keyData
//      KeyMgmtAp_DerivePTK
//      KeyData_CopyWPAWP2
//      InitKeyMgmtInfo
//      cm_InitConnection
//      cm_SetPeerAddr
//      cm_SetComData
//      mm_hw_config_handler
//      me_build_beacon
//      me_rc_stats_req_handler
//      me_chan_config_req_handler
//      me_config_req_handler
//      me_sta_add_req_handler
//      scanu_raw_send_req_handler
//      rxu_mgt_ind_handler
//      scanu_join_cfm_handler
//      sm_connect_req_handler
//      mm_sta_add_cfm_handler
//      apm_start_req_handler
//      Bl_hmac_md5
//      Bl_hmac_sha1
//      Bl_PRF
//      wpa_MD5Update
//      wpa_MD5Final
//      ap_setpsk
//      InitializeAp
//      ipc_host_init
//      bl_main_apm_sta_info_get
//      bl_send_start
//      bl_send_add_if
//      bl_send_sm_connect_req
//      bl_send_apm_start_req
//      bl_rx_apm_sta_add_ind
//      bl_rx_scanu_result_ind
//      bl_output
//      stateGlobalGuard_scan_beacon
//      wifi_mgmr_ap_sta_info_get_internal
//      wifi_mgmr_api_scan_item_beacon
//      wifi_mgmr_api_ap_start
//      cmd_wifi_power_table_update
//      cb_scan_item_parse
//      wifi_mgmr_sta_enable
//      wifi_mgmr_sta_connect_ind_stat_get
//      wifi_mgmr_sta_ssid_set
//      wifi_mgmr_sta_psk_set
//      wifi_mgmr_sta_connect
//      wifi_mgmr_ap_enable
//      wifi_mgmr_ap_mac_get
//      wifi_mgmr_ap_sta_info_get
//      wifi_mgmr_cfg_req
//      wifi_mgmr_scan_ap_all
//      wifi_mgmr_profile_add
//      wifi_mgmr_profile_get
//      cmd_mgr_msgind
//      llc_map_update_ind
//      llm_init
//      llcp_channel_map_ind_handler
//      hci_le_set_host_ch_class_cmd_handler
//      blemesh_init
//      bt_mesh_beacon_recv
//      send_mod_sub_status
//      create_mod_app_status.isra.5
//      send_mod_pub_status.isra.7
//      va_add
//      app_key_set
//      heartbeat_pub_set
//      bt_mesh_ccm_encrypt
//      bt_mesh_ccm_decrypt
//      bt_mesh_k2
//      bt_mesh_k3
//      bt_mesh_net_obfuscate
//      health_fault_status
//      bt_mesh_provision
//      bt_mesh_prov_enable
//      net_decrypt.isra.1
//      bt_mesh_net_keys_create
//      friend_cred_refresh
//      bt_mesh_net_beacon_update
//      bt_mesh_net_revoke_keys
//      prov_confirm
//      prov_invite
//      prov_data
//      prov_pub_key
//      prov_start
//      gen_prov_cont
//      gen_prov_start
//      send_pub_key
//      bt_mesh_proxy_adv_start
//      bt_mesh_trans_recv
//      net_buf_simple_add_mem
//      _copy
//      bl_onchiphci_rx_packet_handler
//      bt_conn_le_start_encryption
//      bt_conn_add_le
//      bt_conn_create_le
//      gatt_notify
//      gatt_indicate
//      disconnected_cb
//      read_appearance
//      read_ppcp
//      read_name
//      bt_gatt_attr_read_ccc
//      bt_gatt_attr_read_service
//      sc_save
//      bt_gatt_attr_write_ccc
//      bt_gatt_attr_read
//      bt_gatt_attr_read_chrc
//      bt_gatt_foreach_attr
//      gatt_read_group_rsp
//      gatt_read_type_rsp
//      read_included_uuid_cb
//      gatt_find_info_rsp
//      bt_gatt_write_without_response_cb
//      bt_gatt_write
//      bt_gatt_subscribe
//      bt_gatt_disconnected
//      bt_addr_le_copy
//      le_pkey_complete
//      le_remote_feat_complete
//      set_random_address
//      hci_id_add
//      set_ad
//      le_ltk_request
//      enh_conn_complete
//      le_legacy_conn_complete
//      init_work
//      bt_dh_key_gen
//      l2cap_chan_le_send_sdu
//      l2cap_chan_le_recv_seg
//      uuid_to_uuid128
//      bt_uuid_create
//      bt_uuid_to_str
//      smp_sign_buf
//      smp_f6
//      smp_g2
//      smp_ident_info
//      smp_encrypt_info
//      sc_smp_send_dhkey_check
//      smp_dhkey_check
//      smp_send_pairing_random
//      sc_send_public_key
//      send_pairing_rsp
//      bt_smp_distribute_keys
//      smp_signing_info
//      smp_master_ident
//      smp_pairing_req
//      bt_smp_dhkey_ready
//      smp_c1
//      smp_pairing_confirm
//      smp_pairing_rsp
//      smp_ident_addr_info
//      smp_public_key
//      smp_pairing_random
//      bt_smp_request_ltk
//      bt_smp_sign_verify
//      bt_smp_sign
//      bt_smp_auth_passkey_entry
//      bt_smp_start_security
//      bt_smp_update_keys
//      bt_keys_get_addr
//      bt_keys_find_irk
//      read_func
//      data_cb
//      bt_rpa_irk_matches
//      tc_aes128_set_encrypt_key
//      find_info_cb
//      tc_fdt_wifi_module
//      ota_tcp_cmd
//      scan_complete_cb
//      __recv_event
//      wifi_state_get_cb
//      write_data
//      __ble_bytes_send
//      __protocol_send
//      pro_trans_read
//      pro_trans_layer_ack_read
//      __payload_write
//      __payload_read
//      ensure
//      cJSON_strdup
//      print_array.isra.4
//      print_object.isra.3
//      aos_cli_input_direct
//      psm_test_cmd
//      prvCopyDataToQueue
//      prvCopyDataFromQueue
//      prvWriteBytesToBuffer
//      prvReadBytesFromBuffer
//      bl_uart_init
//      bl_chip_info
//      bl_rand_stream
//      bl_wifi_sta_mac_addr_set
//      bl_wifi_ap_mac_addr_set
//      bl_wifi_mac_addr_get
//      bl_wifi_ap_info_set
//      bl_wifi_sta_info_set
//      vfs_uart_init
//      hal_uart_setconfig
//      hal_board_cfg
//      bl_tsen_adc_get
//      PtTable_Update_Entry
//      PtTable_Get_Active_Entries
//      bl_timer_tick_enable
//      lwip_sock_make_addr.isra.3
//      lwip_accept
//      lwip_sendto
//      dns_gethostbyname
//      lwip_chksum_copy
//      etharp_input
//      etharp_request
//      ip4_output_if_opt
//      pbuf_copy
//      pbuf_copy_partial
//      pbuf_take
//      pbuf_take_at
//      tcp_seg_copy
//      ethernet_output
//      icmp_input
//      icmp_dest_unreach
//      dhcp_client_find_by_ip.isra.0
//      dhcp_server_recv
//      dhcpd_start
//      romfs_read
//      dirent_file
//      utils_sha256_update
//      Bl_F_fast.constprop.0
//      utils_wifi_psk_cal_fast_bin
//      utils_hmac_sha1_fast
//      inode_reserve
//      aos_poll_read_fd
//      event_write
//      event_read
//      at_serial_cfg_set
//      at_server_notify_with_ctx
//      cwjap_cur
//      at_parse
//      at_set_ap
//      at_http_request
//      get_text_para
//      get_tdata_para
//      get_ip_para
//      get_hex_para
//      send_data_handler
//      client_ssl_set_alpn
//      udp_send_data
//      mfg_media_read_macaddr
//      bl_mtd_write
//      hal_hbn_init
//      bl_hbn_enter
//      block_cipher_df
//      ctr_drbg_update_internal
//      mbedtls_ctr_drbg_reseed
//      mbedtls_ctr_drbg_random
//      mbedtls_rsa_rsaes_oaep_encrypt
//      mbedtls_rsa_pkcs1_encrypt
//      mbedtls_rsa_rsaes_oaep_decrypt
//      mbedtls_rsa_pkcs1_decrypt
//      mbedtls_rsa_pkcs1_sign
//      ssl_swap_epochs
//      tls_prf_sha256
//      mbedtls_ssl_derive_keys
//      mbedtls_ssl_set_hostname
//      mbedtls_ssl_write_record
//      mbedtls_ssl_resend
//      mbedtls_ssl_prepare_handshake_record
//      mbedtls_ssl_write_certificate
//      mbedtls_ssl_write_finished
//      mbedtls_ssl_write
//      mbedtls_ssl_read_record_layer
//      mbedtls_ssl_read
//      mbedtls_x509_crt_parse_der
//      mbedtls_aes_crypt_cbc
//      mbedtls_mpi_grow
//      mbedtls_mpi_shrink
//      mbedtls_mpi_copy
//      mpi_montmul
//      mbedtls_mpi_exp_mod
//      mbedtls_cipher_set_iv
//      mbedtls_cipher_update
//      mbedtls_cipher_auth_encrypt
//      mbedtls_debug_print_crt
//      ecp_mod_p256k1
//      mbedtls_gcm_starts
//      sha224_clone_wrap
//      sha224_update_wrap
//      pem_aes_decrypt
//      mbedtls_md5_clone
//      mbedtls_md5_update
//      mbedtls_sha1_clone
//      mbedtls_sha1_update
//      mbedtls_ssl_handshake_client_step
//      mbedtls_ssl_handshake_server_step
//      __sfvwrite_r
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a1 a2 a3 a4 a5 a6 a7 t1
// Trashed: a1 a2 a3 a4 a5 a6 a7 t0 t1 t3 t4 t5 t6
// Preserved: sp
memcpy_entry:
l230A382C:
	word32 a4_11
	word32 a5_5 = a1 ^ a0
	word32 a5_118 = a5_5 & 3<i32>
	word32 a7_8 = a0 + a2
	branch (a5_5 & 3<i32>) != 0<32> l230A389C
l230A383C:
	a5_118 = 3<i32>
	branch a2 <=u 3<i32> l230A389C
l230A389C:
	a4_11 = a0
	branch a0 >=u a7_8 l230A3898
l230A3844:
	a4_11 = a0 + 1<i32>
	branch (a0 & 3<i32>) != 0<32> l230A38BC
l230A38BC:
	a3 = CONVERT(Mem16[a1:byte], byte, word32)
	a4_11 = a4_11 + 0<i32>
	Mem21[a4_11 + 4095<i32>:byte] = SLICE(a3, byte, 0)
	a1 = a1 + 1<i32>
	branch (a4_11 & 3<i32>) == 0<32> l230A3850
l230A38D4:
	a3 = CONVERT(Mem21[a1:byte], byte, word32)
	Mem26[a4_11 + 4096<i32>:byte] = SLICE(a3, byte, 0)
	a4_11 = a4_11 + 1<i32>
	a1 = a1 + 1<i32>
	branch (a4_11 + 1<i32> & 3<i32>) != 0<32> l230A38BC
l230A38EC:
l230A3850:
	a2 = a7_8 & -4<i32>
	a5_118 = (a7_8 & -4<i32>) + -32<i32>
	branch a4_11 <u a5_118 l230A38F0
l230A38F0:
	word32 t0_36 = Mem34[a1 + 4<i32>:int32]
	word32 t6_37 = Mem34[a1 + 8<i32>:int32]
	word32 t5_38 = Mem34[a1 + 12<i32>:int32]
	word32 t4_39 = Mem34[a1 + 16<i32>:int32]
	word32 t3_40 = Mem34[a1 + 20<i32>:int32]
	t1 = Mem34[a1 + 24<i32>:int32]
	a6 = Mem34[a1 + 28<i32>:int32]
	Mem45[a4_11:word32] = Mem34[a1:int32]
	a1 = a1 + 36<i32>
	a3 = Mem45[a1 + -4<i32>:int32]
	Mem47[a4_11 + 4<i32>:word32] = t0_36
	Mem48[a4_11 + 8<i32>:word32] = t6_37
	Mem49[a4_11 + 12<i32>:word32] = t5_38
	Mem50[a4_11 + 16<i32>:word32] = t4_39
	Mem51[a4_11 + 20<i32>:word32] = t3_40
	Mem52[a4_11 + 24<i32>:word32] = t1
	Mem53[a4_11 + 28<i32>:word32] = a6
	a4_11 = a4_11 + 36<i32>
	Mem55[a4_11 + 4092<i32>:word32] = a3
	branch a4_11 <u a5_118 l230A38F0
l230A3944:
l230A385C:
	branch a4_11 >=u (a7_8 & -4<i32>) l230A3894
l230A3860:
	a3 = a1
	word32 a5_63 = a4_11
l230A3868:
	a6 = Mem65[a3:int32]
	a5_63 = a5_63 + 4<i32>
	Mem70[a5_63 + 4092<i32>:word32] = a6
	a3 = a3 + 4<i32>
	branch a5_63 <u (a7_8 & -4<i32>) l230A3868
l230A387C:
	a5_118 = ((a7_8 & -4<i32>) + -1<i32> - a4_11 & -4<i32>) + 4<i32>
	a4_11 = a4_11 + a5_118
	a1 = a1 + a5_118
l230A3894:
	branch a4_11 <u a7_8 l230A38A4
l230A38A4:
	word32 a5_87 = CONVERT(Mem86[a1:byte], byte, word32)
	a4_11 = a4_11 + 1<i32>
	Mem91[a4_11 + 4095<i32>:byte] = SLICE(a5_87, byte, 0)
	a1 = a1 + 1<i32>
	branch a4_11 <u a7_8 l230A38A4
l230A38B8:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4_11
	a5Out = a5_87
	a6Out = a6
	a7Out = <invalid>
	return t1
l230A3898:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4_11
	a5Out = a5_118
	a6Out = a6
	a7Out = <invalid>
	return t1
memcpy_exit:


word32 memmove(word32 a0, word32 a1, word32 a2, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      rc_sort_samples_tp
//      mbedtls_ssl_write_record
//      mbedtls_ssl_fetch_input
//      mbedtls_ssl_prepare_handshake_record
//      mbedtls_ssl_read_record_layer
//      __sfvwrite_r
//      _realloc_r
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a1 a3 a4 a5
// Trashed: a1 a3 a4 a5
// Preserved: a2 a6 a7 sp t1 t3
memmove_entry:
l230A3948:
	branch a1 >=u a0 l230A3974
l230A394C:
	word32 a5_6 = a1 + a2
	branch a0 >=u a5_6 l230A3974
l230A3974:
	word32 a5_14
	word32 a3_13
	branch a2 >u 15<i32> l230A39A8
l230A39A8:
	branch ((a1 | a0) & 3<i32>) != 0<32> l230A3A50
l230A3A50:
	a3_13 = a2 + -1<i32>
	a5_14 = a0
l230A39B4:
	word32 a7_16 = a2 + -16<i32> & -16<i32>
	word32 a6_18 = a0 + (a7_16 + 16<i32>)
	word32 a4_19 = a1
	a5_14 = a0
l230A39CC:
	a5_14 = a5_14 + 16<i32>
	Mem27[a5_14 + 4080<i32>:word32] = Mem22[a4_19:int32]
	a4_19 = a4_19 + 16<i32>
	Mem29[a5_14 + 4084<i32>:word32] = Mem27[a4_19 + -12<i32>:int32]
	Mem31[a5_14 + 4088<i32>:word32] = Mem29[a4_19 + -8<i32>:int32]
	Mem33[a5_14 + 4092<i32>:word32] = Mem31[a4_19 + -4<i32>:int32]
	branch a6_18 != a5_14 l230A39CC
l230A39F8:
	a4 = a2 & 12<i32>
	a1 = a1 + (a7_16 + 16<i32>)
	branch (a2 & 12<i32>) == 0<32> l230A3A60
l230A3A60:
	a2 = a2 & 15<i32>
l230A3A08:
	word32 a4_42 = a1
	word32 a7_43 = a5_14
l230A3A14:
	a4_42 = a4_42 + 4<i32>
	a7_43 = a7_43 + 4<i32>
	Mem53[a7_43 + 4092<i32>:word32] = Mem47[a4_42 + -4<i32>:int32]
	branch a1 + ((a2 & 15<i32>) - a4_42) >u 3<i32> l230A3A14
l230A3A30:
	a4 = ((a2 & 15<i32>) + -4<i32> & -4<i32>) + 4<i32>
	a2 = a2 & 3<i32>
	a5_14 = a5_14 + a4
	a1 = a1 + a4
l230A397C:
	a5_14 = a0
l230A3980:
	a3_13 = a2 + -1<i32>
	branch a2 == 0<32> l230A3A5C
l230A3A5C:
	a3Out = a3_13
	a4Out = a4
	a5Out = a5_14
	return a1
l230A3988:
	word32 a3_72 = a5_14 + (a3_13 + 1<i32>)
l230A3990:
	a1 = a1 + 1<i32>
	word32 a4_76 = CONVERT(Mem75[a1 + -1<i32>:byte], byte, word32)
	a5_14 = a5_14 + 1<i32>
	Mem79[a5_14 + 4095<i32>:byte] = SLICE(a4_76, byte, 0)
	branch a5_14 != a3_72 l230A3990
l230A39A4:
	a3Out = a3_72
	a4Out = a4_76
	a5Out = a5_14
	return a1
l230A3954:
	word32 a4_81 = a0 + a2
	branch a2 == 0<32> l230A3A4C
l230A3A4C:
	a3Out = a3
	a4Out = a4_81
	a5Out = a5_6
	return a1
l230A395C:
	a5_6 = a5_6 + -1<i32>
	word32 a3_85 = CONVERT(Mem84[a5_6:byte], byte, word32)
	a4_81 = a4_81 + -1<i32>
	Mem88[a4_81:byte] = SLICE(a3_85, byte, 0)
	branch a1 != a5_6 l230A395C
l230A3970:
	a3Out = a3_85
	a4Out = a4_81
	a5Out = a5_6
	return a1
memmove_exit:


word32 memset(word32 ra, word32 a0, word32 a1, word32 a2, ptr32 & t1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      wifiprov_wifi_state_get
//      event_cb_wifi_event
//      __usr_at_cmd_demo
//      ipc_emb_init
//      ipc_emb_tx_evt
//      phy_tcal_reset
//      mm_env_init
//      mm_init
//      mm_sta_add
//      mm_sta_del
//      mm_bcn_init_vif
//      ps_init
//      bl_init
//      scan_init
//      sta_mgmt_entry_init
//      sta_mgmt_add_key
//      td_reset
//      txl_cfm_init
//      txl_cntrl_init
//      txl_reset
//      txl_frame_init_desc
//      txl_frame_init
//      vif_mgmt_init
//      vif_mgmt_unregister
//      vif_mgmt_add_key
//      me_init
//      rc_update_stats
//      rc_init
//      rxu_swdesc_upload_evt
//      scanu_init
//      scanu_rm_exist_ssid
//      _aid_list_delete
//      apm_init
//      apm_assoc_req_handler
//      dbg_init
//      ke_msg_alloc
//      GetTxEAPOLBuffer
//      init_customApp_mibs
//      supplicantInit
//      add_key_to_mac
//      add_mfp_key_to_mac
//      IsEAPOL_MICValid
//      KeyMgmtSta_PrepareEAPOLFrame
//      set_psk
//      pmkCacheInit
//      pmkCacheNewElement
//      pmkCacheDeletePSK
//      hmac_sha256_vector
//      PrepDefaultEapolMsg
//      InitStaKeyInfo
//      prepareKDE
//      cm_InitConnection
//      chan_init
//      chan_ctxt_del
//      mm_monitor_enable_req_handler
//      me_build_associate_req
//      me_build_beacon
//      me_build_probe_rsp
//      me_build_associate_rsp
//      rxu_mgt_ind_handler
//      generate_subkey
//      bl_aes_cmac
//      Bl_hmac_md5
//      Bl_hmac_sha1
//      Bl_PRF
//      wpa_MD5Transform
//      wpa_MD5Final
//      Bl_SHA1Final
//      InitializeAp
//      ipc_host_init
//      bl_main_monitor
//      bl_main_apm_start
//      bl_main_apm_sta_delete
//      bl_main_connect
//      bl_send_msg
//      bl_msg_zalloc.constprop.3
//      notify_event_scan_done
//      bl_rx_chan_switch_ind
//      bl_rx_sm_connect_ind
//      bl_rx_sm_disconnect_ind
//      bl_rx_scanu_result_ind
//      bl_output
//      tcpip_stack_input
//      bl_ipc_init
//      stateGlobalGuard_scan_beacon
//      wifi_mgmr_ap_sta_info_get_internal
//      wifi_mgmr_api_ip_update
//      wifi_mgmr_api_reconnect
//      wifi_mgmr_api_disable_autoreconnect
//      wifi_mgmr_api_enable_autoreconnect
//      wifi_mgmr_api_disconnect
//      wifi_mgmr_api_ifaceup
//      wifi_mgmr_api_sniffer_enable
//      wifi_mgmr_api_scan_item_beacon
//      wifi_mgmr_api_fw_disconnect
//      wifi_mgmr_api_fw_tsen_reload
//      wifi_mgmr_api_fw_scan
//      wifi_mgmr_api_fw_powersaving
//      wifi_mgmr_api_ap_start
//      wifi_mgmr_api_ap_stop
//      wifi_mgmr_api_idle
//      wifi_mgmr_api_raw_send
//      wifi_ap_sta_list_get_cmd
//      wifi_ap_sta_delete_cmd
//      cmd_wifi_ap_start
//      wifi_denoise_disable_cmd
//      wifi_denoise_enable_cmd
//      wifi_mgmr_sta_connect
//      wifi_mgmr_ap_sta_info_get
//      wifi_mgmr_rate_config
//      wifi_mgmr_conf_max_sta
//      wifi_mgmr_cfg_req
//      wifi_mgmr_all_ap_scan
//      wifi_mgmr_profile_add
//      wifi_mgmr_profile_get
//      cb_disconnect_ind
//      cb_connect_ind
//      netif_status_callback
//      bl606a0_wifi_init
//      blemesh_rpl_clr
//      fault_clear
//      blemesh_seg_send
//      blemesh_net_send
//      blemesh_fault_set
//      send_friend_poll
//      clear_friendship
//      sub_update
//      send_friend_req.constprop.8
//      bt_mesh_model_publish
//      mod_publish
//      bt_mesh_adv_create_from_pool
//      send_mod_pub_status.isra.7
//      bt_mesh_app_key_del
//      bt_mesh_subnet_del
//      bt_mesh_cfg_reset
//      bt_mesh_reset
//      friend_cred_clear
//      bt_mesh_net_create
//      bt_mesh_rpl_reset
//      bt_mesh_net_iv_update
//      bt_mesh_net_recv
//      prov_start
//      bt_mesh_pb_gatt_close
//      proxy_connected
//      proxy_send
//      proxy_complete_pdu
//      bt_mesh_proxy_adv_start
//      send_ack
//      bt_mesh_rx_reset
//      bt_mesh_heartbeat_send
//      send_friend_clear
//      friend_clear
//      net_buf_unref
//      _set
//      bl_find_valid_queued_entry
//      bl_onchiphci_interface_init
//      bt_conn_le_start_encryption
//      bt_conn_add_le
//      bt_conn_le_conn_update
//      sc_ccc_cfg_write
//      update_ccc
//      hci_id_add
//      set_ad
//      bt_le_scan_update
//      le_adv_report
//      le_conn_param_req
//      bt_le_adv_start
//      bt_set_tx_pwr
//      l2cap_chan_tx_init
//      bt_uuid_to_str
//      smp_f5
//      bt_smp_disconnected
//      compute_and_send_master_dhcheck
//      compute_and_check_and_send_slave_dhcheck
//      smp_dhkey_check
//      bt_smp_distribute_keys
//      smp_init
//      smp_c1
//      smp_pairing_random
//      bt_smp_request_ltk
//      bt_smp_update_keys
//      bt_keys_clear
//      write_func
//      ble_connect
//      discover_func
//      read_func
//      device_found
//      ble_tp_notify_task
//      bt_rpa_irk_matches
//      bt_att_accept
//      att_read_group_req
//      att_read_mult_req
//      att_read_req
//      att_read_type_req
//      att_find_type_req
//      att_find_info_req
//      att_signed_write_cmd
//      bt_att_req_cancel
//      cmd_blog_info_dump
//      ota_tcp_cmd
//      __recv_event
//      bl_ble_sync_start
//      pro_trans_init
//      cJSON_New_Item
//      print_array.isra.4
//      print_object.isra.3
//      hexdump_cmd
//      aos_cli_init
//      aos_cli_printf
//      proc_onecmd
//      ls_cmd
//      cli_getchar
//      aos_cli_input_direct
//      get_dns_request
//      dns_server_init
//      write_status
//      format_sector.constprop.16
//      move_env
//      create_env_blob
//      ef_port_init
//      psm_test_cmd
//      prvInitialiseNewStreamBuffer
//      vStreamBufferDelete
//      prvInitialiseNewTask.isra.2
//      bl_wifi_ap_info_set
//      bl_wifi_sta_info_set
//      dev_uart_init
//      hal_gpio_init_from_dts
//      hal_board_cfg
//      loopset_led_trigger
//      lwip_sock_make_addr.isra.3
//      lwip_accept
//      dns_check_entry
//      dhcp_create_msg
//      dhcp_recv
//      dhcp_start
//      ip4_output_if_opt
//      netif_add
//      raw_new_ip_type
//      tcp_new_ip_type
//      udp_new_ip_type
//      dhcp_server_recv
//      dhcp_server_start
//      iperf_server_udp
//      iperf_server_udp_recv_fn
//      iperf_client_udp
//      iperf_server
//      iperf_client_tcp
//      dirent_file
//      romfs_opendir
//      romfs_register
//      sntp_dns_found
//      utils_sha256_init
//      utils_hmac_sha1_fast
//      inode_init
//      aos_register_driver
//      aos_register_fs
//      aos_loop_init
//      aos_task_new
//      event_open
//      at_key_value_set
//      at_server_init
//      at_server_notify_with_ctx
//      http_url_req
//      cwjap_info
//      __wifimode_set
//      cwjap_cur
//      domain_name_resolution
//      uart_config_handler
//      at_init
//      at_parse
//      ble_sync_mode
//      ap_cfg_handler
//      join_ap_handler
//      at_join_ap
//      at_set_ap
//      get_ip_para
//      get_hex_para
//      at_queue_init
//      create_tcp_udp_handler
//      close_network_handler
//      send_data_handler
//      client_ssl_config_path
//      client_ssl_set_sni
//      client_ssl_set_alpn
//      tcp_accept_callback
//      bl_tcpserver
//      Sec_Eng_SHA256_Init
//      mfg_media_read_poweroffset
//      bl_mtd_open
//      bloop_init
//      bloop_timer_init
//      httpc_tcp_recv
//      httpc_init_connection_common.constprop.5
//      altcp_alloc
//      altcp_mbedtls_alloc_config
//      block_cipher_df
//      ctr_drbg_update_internal
//      mbedtls_ctr_drbg_init
//      mbedtls_ctr_drbg_reseed
//      mbedtls_ctr_drbg_seed
//      mbedtls_ctr_drbg_random
//      mbedtls_entropy_init
//      pk_get_pk_alg
//      mgf_mask
//      mbedtls_rsa_init
//      mbedtls_rsa_rsaes_oaep_encrypt
//      mbedtls_rsa_pkcs1_sign
//      mbedtls_rsa_rsassa_pss_verify_ext
//      mbedtls_sha256_init
//      mbedtls_ssl_session_init
//      mbedtls_ssl_init
//      mbedtls_ssl_setup
//      mbedtls_ssl_config_init
//      mbedtls_ssl_write_record
//      mbedtls_ssl_prepare_handshake_record
//      mbedtls_ssl_write_finished
//      mbedtls_ssl_parse_change_cipher_spec
//      mbedtls_x509_crt_init
//      mbedtls_x509_crt_parse_der
//      mycalloc
//      mbedtls_aes_init
//      mbedtls_mpi_copy
//      mbedtls_mpi_lset
//      mbedtls_mpi_write_binary
//      mpi_montmul
//      mbedtls_mpi_exp_mod
//      mbedtls_cipher_init
//      mbedtls_cipher_setup
//      mbedtls_cipher_auth_encrypt
//      mbedtls_debug_print_buf
//      mbedtls_debug_print_crt
//      mbedtls_ecp_group_init
//      mbedtls_ecp_mul
//      mbedtls_ecp_check_pub_priv
//      ecp_mod_p256k1
//      mbedtls_gcm_init
//      mbedtls_gcm_setkey
//      mbedtls_gcm_starts
//      mbedtls_md_init
//      mbedtls_md_hmac_starts
//      mbedtls_pem_init
//      mbedtls_pem_read_buffer
//      mbedtls_md5_init
//      mbedtls_sha1_init
//      mbedtls_ssl_handshake_server_step
//      mbedtls_x509_dn_gets
//      strstr
//      __sfmoreglue
//      __sfp
//      __sinit
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] ra:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5 ra t1
// Trashed: a0 a1 a2 a3 a4 a5 ra t0 t1
// Preserved: sp
memset_entry:
l230A3A68:
	word32 t1_14 = 15<i32>
	word32 a4_25 = a0
	branch a2 <=u 15<i32> l230A3AAC
l230A3A74:
	word32 a5_24 = a0 & 15<i32>
	branch (a0 & 15<i32>) != 0<32> l230A3B18
l230A3B18:
	word32 a3_10 = ((a0 & 15<i32>) << 2<u32>) + 0x230A3B1C<p32>
	word32 a4_16
	word32 a2_17
	word32 a5_18
	word32 t0_22
	call a3_10 + -96<i32> (retsize: 0;)
		uses: a0:a0,a1:a1_19,a2:a2,a3:a3_10,ra:ra,t0:ra
		defs: a0:a0_15,a1:a1_19,a2:a2_17,a4:a4_16,a5:a5_18,t0:t0_22,t1:t1_14
	ra = t0_22
	a5_24 = a5_18 + -16<i32>
	a4_25 = a4_16 - (a5_18 + -16<i32>)
	a2 = a2_17 + (a5_18 + -16<i32>)
	branch t1_14 >=u a2 l230A3AAC
l230A3B40:
l230A3A7C:
	branch a1 != 0<32> l230A3B00
l230A3B00:
	word32 a1_29 = a1 & 255<i32>
	word32 a1_31 = a1_29 | a1_29 << 8<u32>
	a1 = a1_31 | a1_31 << 0x10<u32>
l230A3A80:
	a2 = a2 & 15<i32>
	word32 a3_40 = (a2 & -16<i32>) + a4_25
l230A3A8C:
	Mem43[a4_25:word32] = a1
	Mem44[a4_25 + 4<i32>:word32] = a1
	Mem45[a4_25 + 8<i32>:word32] = a1
	Mem46[a4_25 + 12<i32>:word32] = a1
	a4_25 = a4_25 + 16<i32>
	branch a4_25 <u a3_40 l230A3A8C
l230A3AA4:
	branch a2 != 0<32> l230A3AAC
l230A3AAC:
	word32 a3_58 = (t1_14 - a2 << 2<u32>) + 0x230A3AB4<p32>
	word32 t1_73
	word32 a0_74
	word32 a4_75
	word32 a2_76
	word32 a5_77
	word32 a1_78
	word32 a3_79
	word32 ra_80
	call a3_58 + 12<i32> (retsize: 0;)
		uses: a0:a0_59,a1:a1_67,a2:a2_54,a3:a3_58,ra:ra_63,t0:0x230A3AB4<p32>
		defs: a0:a0_74,a1:a1_78,a2:a2_76,a3:a3_79,a4:a4_75,a5:a5_77,ra:ra_80,t1:t1_73
	t1Out = t1_73
	a0Out = a0_74
	a1Out = a1_78
	a2Out = a2_76
	a3Out = a3_79
	a4Out = a4_75
	a5Out = a5_77
	return ra_80
l230A3AA8:
	t1Out = t1_14
	a0Out = a0
	a1Out = a1
	a2Out = a2
	a3Out = a3_40
	a4Out = a4_25
	a5Out = a5_24
	return ra
memset_exit:


void fn230A3ABC(word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a3:[0..31]
// LiveOut:
// Trashed: a3
// Preserved: sp
fn230A3ABC_entry:
l230A3ABC:
	call a3 + 12<i32> (retsize: 0;)
		uses: a3:a3
	return
fn230A3ABC_exit:


void fn230A3AC0(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn230A3AC0_entry:
l230A3AC0:
	Mem5[a4 + 14<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 13<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 12<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 11<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 10<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 9<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4 + 8<i32>:byte] = SLICE(a1, byte, 0)
	Mem12[a4 + 7<i32>:byte] = SLICE(a1, byte, 0)
	Mem13[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem14[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem15[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem16[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem17[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem18[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem19[a4:byte] = SLICE(a1, byte, 0)
	return
fn230A3AC0_exit:


void fn230A3AC4(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn230A3AC4_entry:
l230A3AC4:
	Mem5[a4 + 13<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 12<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 11<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 10<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 9<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 8<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4 + 7<i32>:byte] = SLICE(a1, byte, 0)
	Mem12[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem13[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem14[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem15[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem16[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem17[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem18[a4:byte] = SLICE(a1, byte, 0)
	return
fn230A3AC4_exit:


void fn230A3AC8(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn230A3AC8_entry:
l230A3AC8:
	Mem5[a4 + 12<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 11<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 10<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 9<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 8<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 7<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem12[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem13[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem14[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem15[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem16[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem17[a4:byte] = SLICE(a1, byte, 0)
	return
fn230A3AC8_exit:


void fn230A3ACC(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn230A3ACC_entry:
l230A3ACC:
	Mem5[a4 + 11<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 10<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 9<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 8<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 7<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem12[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem13[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem14[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem15[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem16[a4:byte] = SLICE(a1, byte, 0)
	return
fn230A3ACC_exit:


void fn230A3AD0(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn230A3AD0_entry:
l230A3AD0:
	Mem5[a4 + 10<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 9<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 8<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 7<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem12[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem13[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem14[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem15[a4:byte] = SLICE(a1, byte, 0)
	return
fn230A3AD0_exit:


void fn230A3AD4(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn230A3AD4_entry:
l230A3AD4:
	Mem5[a4 + 9<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 8<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 7<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem12[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem13[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem14[a4:byte] = SLICE(a1, byte, 0)
	return
fn230A3AD4_exit:


void fn230A3AD8(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn230A3AD8_entry:
l230A3AD8:
	Mem5[a4 + 8<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 7<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem12[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem13[a4:byte] = SLICE(a1, byte, 0)
	return
fn230A3AD8_exit:


void fn230A3ADC(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn230A3ADC_entry:
l230A3ADC:
	Mem5[a4 + 7<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem12[a4:byte] = SLICE(a1, byte, 0)
	return
fn230A3ADC_exit:


void fn230A3AE0(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn230A3AE0_entry:
l230A3AE0:
	Mem5[a4 + 6<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem11[a4:byte] = SLICE(a1, byte, 0)
	return
fn230A3AE0_exit:


void fn230A3AE4(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn230A3AE4_entry:
l230A3AE4:
	Mem5[a4 + 5<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem10[a4:byte] = SLICE(a1, byte, 0)
	return
fn230A3AE4_exit:


void fn230A3AE8(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn230A3AE8_entry:
l230A3AE8:
	Mem5[a4 + 4<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem9[a4:byte] = SLICE(a1, byte, 0)
	return
fn230A3AE8_exit:


void fn230A3AEC(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn230A3AEC_entry:
l230A3AEC:
	Mem5[a4 + 3<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem8[a4:byte] = SLICE(a1, byte, 0)
	return
fn230A3AEC_exit:


void fn230A3AF0(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn230A3AF0_entry:
l230A3AF0:
	Mem5[a4 + 2<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem7[a4:byte] = SLICE(a1, byte, 0)
	return
fn230A3AF0_exit:


void fn230A3AF4(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn230A3AF4_entry:
l230A3AF4:
	Mem5[a4 + 1<i32>:byte] = SLICE(a1, byte, 0)
	Mem6[a4:byte] = SLICE(a1, byte, 0)
	return
fn230A3AF4_exit:


void fn230A3AF8(word32 a1, word32 a4)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      memset
// MayUse:  a1:[0..7] a4:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
fn230A3AF8_entry:
l230A3AF8:
	Mem5[a4:byte] = SLICE(a1, byte, 0)
	return
fn230A3AF8_exit:


word32 _init_signal_r.part.0(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _init_signal_r
//      signal
//      _init_signal
//      __sigtramp
// MayUse:  a0:[0..31]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: ra s0 sp
_init_signal_r.part.0_entry:
l230A3B44:
	word32 a0_21
	word32 a3_56
	word32 a0_11 = _malloc_r(a0, 128<i32>, out a3_56)
	Mem20[a0 + 732<i32>:word32] = a0_11
	branch a0_11 == 0<32> l230A3B88
l230A3B88:
	a0_21 = -1<i32>
l230A3B64:
	a0_23 = a0_11
l230A3B68:
	word32 a0_23
	Mem24[a0_23:word32] = 0<32>
	a0_23 = a0_23 + 4<i32>
	branch a0_23 != a0_11 + 128<i32> l230A3B68
l230A3B74:
	a0_21 = 0<i32>
l230A3B78:
	return a0_21
_init_signal_r.part.0_exit:


void _init_signal_r(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: sp
_init_signal_r_entry:
l230A3B90:
	branch Mem0[a0 + 732<i32>:int32] == 0<32> l230A3BA0
l230A3BA0:
l230A3BA0_thunk__init_signal_r.part.0:
	_init_signal_r.part.0(a0)
	return
l230A3B98:
	return
_init_signal_r_exit:


void _signal_r(word32 a0, word32 a1, word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      signal
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: ra s0 sp
_signal_r_entry:
l230A3BA4:
	branch a1 >u 31<i32> l230A3BE8
l230A3BE8:
	Mem15[a0:word32] = 22<i32>
	return
l230A3BBC:
	word32 a5_19 = Mem7[a0 + 732<i32>:int32]
	branch a5_19 == 0<32> l230A3C08
l230A3C08:
	branch _init_signal_r.part.0(a0) != 0<32> l230A3BD4
l230A3C1C:
	a5_19 = Mem22[a0 + 732<i32>:int32]
l230A3BC4:
	Mem43[a5_19 + (a1 << 2<u32>):word32] = a2
l230A3BD4:
	return
_signal_r_exit:


void _raise_r(word32 ra, word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      raise
// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: ra s0 s1 sp
_raise_r_entry:
l230A3C2C:
	branch a1 >u 31<i32> l230A3CF8
l230A3CF8:
	Mem7[a0:word32] = 22<i32>
	return
l230A3C34:
	word32 a5_10 = Mem0[a0 + 732<i32>:int32]
	branch a5_10 == 0<32> l230A3C98
l230A3C54:
	word32 a5_21 = a5_10 + (a1 << 2<u32>)
	word32 a4_22 = Mem17[a5_21:int32]
	branch a4_22 == 0<32> l230A3C98
l230A3C98:
	_getpid_r()
l230A3CBC_thunk__kill_r:
	_kill_r(a0)
	return
l230A3C64:
	branch a4_22 == 1<i32> l230A3CE0
l230A3CE0:
	return
l230A3C6C:
	branch a4_22 == -1<i32> l230A3CC0
l230A3CC0:
	Mem49[a0:word32] = 22<i32>
	return
l230A3C74:
	Mem54[a5_21:word32] = 0<32>
	word32 a4_62
	word32 a3_63
	word32 a2_64
	call a4_22 (retsize: 0;)
		uses: a0:a1,a1:a1,a2:a2_64,a3:a3_63,a4:a4_62,ra:ra,s0:a1,s1:a0
		defs: a2:a2_64,a3:a3_63,a4:a4_62
	return
_raise_r_exit:


void __sigtramp_r(word32 ra, word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __sigtramp
// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: ra s0 sp
__sigtramp_r_entry:
l230A3D08:
	branch a1 >u 31<i32> l230A3DB8
l230A3DB8:
	return
l230A3D10:
	word32 a5_26 = Mem0[a0 + 732<i32>:int32]
	branch a5_26 == 0<32> l230A3D7C
l230A3D7C:
	branch _init_signal_r.part.0(a0) != 0<32> l230A3DB0
l230A3DB0:
l230A3D88:
	a5_26 = Mem15[a0 + 732<i32>:int32]
l230A3D28:
	word32 a5_31 = a5_26 + (a1 << 2<u32>)
	word32 a4_33 = Mem32[a5_31:int32]
	branch a4_33 == 0<32> l230A3D68
l230A3D68:
	return
l230A3D38:
	branch a4_33 == -1<i32> l230A3DA8
l230A3DA8:
l230A3D40:
	branch a4_33 == 1<i32> l230A3D94
l230A3D94:
	return
l230A3D48:
	Mem47[a5_31:word32] = 0<32>
	word32 a4_56
	word32 a3_57
	word32 a2_58
	word32 a6_59
	word32 a7_60
	word32 t1_61
	call a4_33 (retsize: 0;)
		uses: a0:a1,a1:a1,a2:a2_58,a3:a3_57,a4:a4_56,a6:a6_59,a7:a7_60,ra:ra,s0:a0,t1:t1_61
		defs: a2:a2_58,a3:a3_57,a4:a4_56,a6:a6_59,a7:a7_60,t1:t1_61
l230A3D58:
	return
__sigtramp_r_exit:


void raise(word32 ra, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      abort
// MayUse:  a0:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: sp
raise_entry:
l230A3DC0:
	word32 a0_8 = Mem0[0x4200ECFC<p32>:int32]
l230A3DD0_thunk__raise_r:
	_raise_r(ra, a0_8, a0)
	return
raise_exit:


void signal(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: sp
signal_entry:
l230A3DD4:
	word32 a0_10 = Mem0[0x4200ECFC<p32>:int32]
l230A3DE8_thunk__signal_r:
	_signal_r(a0_10, a0, a1)
	return
signal_exit:


void _init_signal()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: sp
_init_signal_entry:
l230A3DEC:
	word32 a0_6 = Mem0[0x4200ECFC<p32>:int32]
	branch Mem0[a0_6 + 732<i32>:int32] == 0<32> l230A3E08
l230A3E08:
l230A3E08_thunk__init_signal_r.part.0:
	_init_signal_r.part.0(a0_6)
	return
l230A3E00:
	return
_init_signal_exit:


void __sigtramp(word32 ra, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: sp
__sigtramp_entry:
l230A3E0C:
	word32 a0_8 = Mem0[0x4200ECFC<p32>:int32]
l230A3E1C_thunk___sigtramp_r:
	__sigtramp_r(ra, a0_8, a0)
	return
__sigtramp_exit:


void _kill_r(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      raise
// MayUse:  a0:[0..31]
// LiveOut:
// Trashed: a0 a1 a5
// Preserved: ra s0 sp
_kill_r_entry:
l230A3E20:
	Mem16[0x420277A8<p32>:word32] = 0<32>
	branch _kill() == -1<i32> l230A3E60
l230A3E60:
	word32 a5_22 = Mem16[0x420267A8<p32>:int32]
	branch a5_22 == 0<32> l230A3E50
l230A3E70:
	Mem23[a0:word32] = a5_22
	return
l230A3E50:
	return
_kill_r_exit:


void _getpid_r()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      raise
// MayUse: 
// LiveOut:
// Trashed: a0
// Preserved: sp
_getpid_r_entry:
l230A3E84:
l230A3E84_thunk__getpid:
	_getpid()
	return
_getpid_r_exit:


word32 strchr(word32 a0, word32 a1, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      event_cb_wifi_event
//      print_string_ptr
//      proc_onecmd
//      dhcpd_start
//      dirent_file
//      strrchr
//      strstr
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: sp
strchr_entry:
l230A3E88:
	word32 a5_13
	word32 a3_123 = a1 & 255<i32>
	branch (a1 & 255<i32>) == 0<32> l230A3F68
l230A3F68:
	branch (a0 & 3<i32>) == 0<32> l230A3F8C
l230A3F6C:
	word32 a5_8 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5_8 != 0<32> l230A3F80
l230A3F80:
	a0 = a0 + 1<i32>
	branch (a0 & 3<i32>) != 0<32> l230A3F78
l230A3F78:
	a5_13 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5_13 == 0<32> l230A3F64
l230A3F8C:
	word32 a4_16 = Mem0[a0:int32]
	a4 = ~a4_16
	a2 = 0xFEFEFEFF<32>
	a3_123 = 0x80808080<32>
	branch (a4_16 + 0xFEFEFEFF<32> & a4 & 0x80808080<32>) != 0<32> l230A3FD0
l230A3FB4:
	a0 = a0 + 4<i32>
	word32 a4_28 = Mem0[a0:int32]
	a4 = ~a4_28
	branch (a4_28 + 0xFEFEFEFF<32> & a4 & 0x80808080<32>) == 0<32> l230A3FB4
l230A3FD0:
	a5_13 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5_13 == 0<32> l230A3F64
l230A3FD8:
	a0 = a0 + 1<i32>
	word32 a5_41 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5_41 != 0<32> l230A3FD8
l230A3FE4:
	a1Out = a1
	a2Out = 0xFEFEFEFF<32>
	a3Out = 0x80808080<32>
	a4Out = a4
	a5Out = a5_41
	return a0
l230A3F74:
l230A3FEC:
	a1Out = a1
	a2Out = a2
	a3Out = a1 & 255<i32>
	a4Out = a4
	a5Out = a5_8
	return a0
l230A3E94:
	branch (a0 & 3<i32>) == 0<32> l230A3EC0
l230A3E98:
	a5_13 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5_13 == 0<32> l230A3F60
l230A3EA0:
	branch (a1 & 255<i32>) != a5_13 l230A3EB4
l230A3EB4:
	a0 = a0 + 1<i32>
	branch (a0 & 3<i32>) != 0<32> l230A3EA8
l230A3EA8:
	a5_13 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5_13 == 0<32> l230A3F60
l230A3EB0:
	branch a5_13 == (a1 & 255<i32>) l230A3F64
l230A3EC0:
	word32 a1_53 = a1 & 255<i32> | (a1 & 255<i32>) << 8<u32>
	word32 a4_56 = Mem0[a0:int32]
	word32 t1_58 = a1_53 << 0x10<u32> | a1_53
	word32 a2_60 = t1_58 ^ a4_56
	a1 = ~a2_60
	a2 = a1 & a2_60 + 0xFEFEFEFF<32>
	a4 = a4_56 + 0xFEFEFEFF<32>
	branch ((~a4_56 & a4_56 + 0xFEFEFEFF<32> | a2) & 0x80808080<32>) != 0<32> l230A3F40
l230A3F10:
	a0 = a0 + 4<i32>
	word32 a4_75 = Mem0[a0:int32]
	word32 a2_77 = a4_75 ^ t1_58
	a4 = ~a4_75
	a2 = a2_77 + 0xFEFEFEFF<32> & ~a2_77
	a1 = a2_77 + 0xFEFEFEFF<32>
	branch ((a4_75 + 0xFEFEFEFF<32> & a4 | a2) & 0x80808080<32>) == 0<32> l230A3F10
l230A3F40:
	a5_13 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5_13 == 0<32> l230A3F60
l230A3F48:
	branch (a1 & 255<i32>) != a5_13 l230A3F54
l230A3F54:
	a0 = a0 + 1<i32>
	a5_13 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5_13 != 0<32> l230A3F50
l230A3F50:
	branch a5_13 == (a1 & 255<i32>) l230A3FE8
l230A3FE8:
	a1Out = a1
	a2Out = a2
	a3Out = a1 & 255<i32>
	a4Out = a4
	a5Out = a5_13
	return a0
l230A3F60:
	a0 = 0<i32>
l230A3F4C:
l230A3F64:
	a1Out = a1
	a2Out = a2
	a3Out = a3_123
	a4Out = a4
	a5Out = a5_13
	return a0
l230A3EA4:
l230A3FF0:
	a1Out = a1
	a2Out = a2
	a3Out = a1 & 255<i32>
	a4Out = a4
	a5Out = a5_13
	return a0
strchr_exit:


word32 strcmp(word32 a0, word32 a1, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      bl_msg_update_channel_cfg
//      stateGlobalGuard_scan_beacon
//      cmd_wifi_cfg
//      bt_set_name
//      cmd_blog_info_dump
//      cmd_blog_set_level
//      proc_onecmd
//      ls_cmd
//      echo_cmd
//      hal_boot2_partition_bus_addr
//      hal_boot2_partition_addr
//      inode_open
//      at_key_value_set
//      at_key_value_get
//      scan_handler
//      at_parse
//      ble_sync_mode
//      create_tcp_udp_handler
//      at_scan
//      bl_cipstart
//      setlocale
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 t0 t1 t2
// Preserved: sp
strcmp_entry:
l230A3FF4:
	word32 a4_5 = a0 | a1
	branch (a4_5 & 3<i32>) != 0<32> l230A4100
l230A4004:
	a5 = 0x7F7F7F7F<32>
l230A400C:
	word32 a2_12 = Mem0[a0:int32]
	word32 a3_14 = Mem0[a1:int32]
	branch ((a2_12 & 0x7F7F7F7F<32>) + 0x7F7F7F7F<32> | (a2_12 | 0x7F7F7F7F<32>)) != -1<i32> l230A4128
l230A4028:
	branch a2_12 != a3_14 l230A40B4
l230A402C:
	a2_12 = Mem0[a0 + 4<i32>:int32]
	a3_14 = Mem0[a1 + 4<i32>:int32]
	branch ((a2_12 & 0x7F7F7F7F<32>) + 0x7F7F7F7F<32> | (a2_12 | 0x7F7F7F7F<32>)) != -1<i32> l230A4120
l230A4120:
	a0 = a0 + 4<i32>
	a1 = a1 + 4<i32>
l230A4128:
	branch a2_12 != a3_14 l230A4100
l230A412C:
	a1Out = a1
	a2Out = a2_12
	a3Out = a3_14
	a4Out = a4_5 & 3<i32>
	a5Out = 0x7F7F7F7F<32>
	return 0<i32>
l230A4048:
	branch a2_12 != a3_14 l230A40B4
l230A404C:
	a2_12 = Mem0[a0 + 8<i32>:int32]
	a3_14 = Mem0[a1 + 8<i32>:int32]
	branch ((a2_12 & 0x7F7F7F7F<32>) + 0x7F7F7F7F<32> | (a2_12 | 0x7F7F7F7F<32>)) != -1<i32> l230A4134
l230A4134:
	a0 = a0 + 8<i32>
	a1 = a1 + 8<i32>
	branch a2_12 != a3_14 l230A4100
l230A4140:
	a1Out = a1
	a2Out = a2_12
	a3Out = a3_14
	a4Out = a4_5 & 3<i32>
	a5Out = 0x7F7F7F7F<32>
	return 0<i32>
l230A4068:
	branch a2_12 != a3_14 l230A40B4
l230A406C:
	a2_12 = Mem0[a0 + 12<i32>:int32]
	a3_14 = Mem0[a1 + 12<i32>:int32]
	branch ((a2_12 & 0x7F7F7F7F<32>) + 0x7F7F7F7F<32> | (a2_12 | 0x7F7F7F7F<32>)) != -1<i32> l230A4148
l230A4148:
	a0 = a0 + 12<i32>
	a1 = a1 + 12<i32>
	branch a2_12 != a3_14 l230A4100
l230A4154:
	a1Out = a1
	a2Out = a2_12
	a3Out = a3_14
	a4Out = a4_5 & 3<i32>
	a5Out = 0x7F7F7F7F<32>
	return 0<i32>
l230A4088:
	branch a2_12 != a3_14 l230A40B4
l230A408C:
	a2_12 = Mem0[a0 + 16<i32>:int32]
	a3_14 = Mem0[a1 + 16<i32>:int32]
	branch ((a2_12 & 0x7F7F7F7F<32>) + 0x7F7F7F7F<32> | (a2_12 | 0x7F7F7F7F<32>)) != -1<i32> l230A415C
l230A415C:
	a0 = a0 + 16<i32>
	a1 = a1 + 16<i32>
	branch a2_12 != a3_14 l230A4100
l230A4100:
	word32 a2_60 = CONVERT(Mem0[a0:byte], byte, word32)
	word32 a3_62 = CONVERT(Mem0[a1:byte], byte, word32)
	a0 = a0 + 1<i32>
	a1 = a1 + 1<i32>
	branch a2_60 != a3_62 l230A4118
l230A4114:
	branch a2_60 != 0<32> l230A4100
l230A4118:
	a1Out = a1
	a2Out = a2_60
	a3Out = a3_62
	a4Out = a4_5 & 3<i32>
	a5Out = a5
	return a2_60 - a3_62
l230A4168:
	a1Out = a1
	a2Out = a2_12
	a3Out = a3_14
	a4Out = a4_5 & 3<i32>
	a5Out = 0x7F7F7F7F<32>
	return 0<i32>
l230A40A8:
	a0 = a0 + 20<i32>
	a1 = a1 + 20<i32>
	branch a2_12 == a3_14 l230A400C
l230A40B4:
	word32 a5_76
	word32 a4_75
	word32 a1_78
	word32 a4_72 = a2_12 << 0x10<u32>
	word32 a5_74 = a3_14 << 0x10<u32>
	branch a4_72 != a5_74 l230A40D8
l230A40D8:
	word32 a0_77 = (a4_72 >>u 0x10<u32>) - (a5_74 >>u 0x10<u32>)
	a4_75 = a4_72 >>u 0x10<u32>
	a5_76 = a5_74 >>u 0x10<u32>
	a1_78 = a0_77 & 255<i32>
	branch (a0_77 & 255<i32>) != 0<32> l230A40F0
l230A40EC:
	a1Out = a0_77 & 255<i32>
	a2Out = a2_12
	a3Out = a3_14
	a4Out = a4_72 >>u 0x10<u32>
	a5Out = a5_74 >>u 0x10<u32>
	return a0_77
l230A40C0:
	a4_75 = a2_12 >>u 0x10<u32>
	a5_76 = a3_14 >>u 0x10<u32>
	word32 a0_81 = a4_75 - a5_76
	a1_78 = a0_81 & 255<i32>
	branch (a0_81 & 255<i32>) != 0<32> l230A40F0
l230A40F0:
	a1Out = a1_78
	a2Out = a2_12
	a3Out = a3_14
	word32 a4_84 = a4_75 & 255<i32>
	a4Out = a4_84
	word32 a5_86 = a5_76 & 255<i32>
	a5Out = a5_86
	return a4_84 - a5_86
l230A40D4:
	a1Out = a0_81 & 255<i32>
	a2Out = a2_12
	a3Out = a3_14
	a4Out = a4_75
	a5Out = a5_76
	return a0_81
strcmp_exit:


word32 strcpy(word32 a0, word32 a1, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      wifiprov_wifi_state_get
//      bt_addr_le_str_real
//      bt_addr_le_to_str.constprop.14
//      cmd_blog_info_dump
//      print_number
//      print_string_ptr
//      print_array.isra.4
//      print_object.isra.3
//      ps_cmd
//      aos_cli_printf
//      vTaskList
//      bl_chip_memory_ram
//      ipus_test_cmd
//      ipu_test_cmd
//      ipc_test_cmd
//      ips_test_cmd
//      at_key_value_get
//      cipsta_ip_get
//      http_url_req
//      cb_altcp_recv_fn
//      set_apcfg
//      at_join_ap
//      bl_cipsslcsni
//      bl_mtd_info
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a1 a4 a5
// Trashed: a1 a4 a5
// Preserved: a2 a3 a6 sp
strcpy_entry:
l230A4170:
	branch ((a0 | a1) & 3<i32>) != 0<32> l230A41FC
l230A41FC:
	word32 a5_11 = a0
l230A4200:
	word32 a4_10 = CONVERT(Mem9[a1:byte], byte, word32)
	a5_11 = a5_11 + 1<i32>
	Mem14[a5_11 + 4095<i32>:byte] = SLICE(a4_10, byte, 0)
	a1 = a1 + 1<i32>
	branch a4_10 != 0<32> l230A4200
l230A4214:
	a4Out = a4_10
	a5Out = a5_11
	return a1
l230A417C:
	word32 a2_24
	word32 a4_16 = Mem0[a1:int32]
	branch ((a4_16 & 0x7F7F7F7F<32>) + 0x7F7F7F7F<32> | a4_16 | 0x7F7F7F7F<32>) != -1<i32> l230A4218
l230A4218:
	a2_24 = a0
l230A41A0:
	a2_24 = a0
l230A41A8:
	a2_24 = a2_24 + 4<i32>
	Mem32[a2_24 + 4092<i32>:word32] = a4_16
	a1 = a1 + 4<i32>
	a4_16 = Mem32[a1:int32]
	branch ((a4_16 & 0x7F7F7F7F<32>) + 0x7F7F7F7F<32> | a4_16 | 0x7F7F7F7F<32>) == -1<i32> l230A41A8
l230A41CC:
	word32 a5_42 = CONVERT(Mem41[a1:byte], byte, word32)
	word32 a4_43 = CONVERT(Mem41[a1 + 1<i32>:byte], byte, word32)
	word32 a3_44 = CONVERT(Mem41[a1 + 2<i32>:byte], byte, word32)
	Mem46[a2_24:byte] = SLICE(a5_42, byte, 0)
	branch a5_42 == 0<32> l230A41F0
l230A41E0:
	Mem47[a2_24 + 1<i32>:byte] = SLICE(a4_43, byte, 0)
	branch a4_43 == 0<32> l230A41F0
l230A41E8:
	Mem48[a2_24 + 2<i32>:byte] = SLICE(a3_44, byte, 0)
	branch a3_44 != 0<32> l230A41F4
l230A41F4:
	Mem49[a2_24 + 3<i32>:byte] = 0<8>
	a4Out = a4_43
	a5Out = a5_42
	return a1
l230A41F0:
	a4Out = a4_43
	a5Out = a5_42
	return a1
strcpy_exit:


word32 strlen(word32 a0, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      event_cb_wifi_event
//      app_delayed_action_bleadv
//      app_delayed_action_bleadvstop
//      mm_sta_add
//      set_psk
//      pmkCacheFindPSK
//      KeyMgmtInit
//      GenerateGTK_internal
//      cm_SetComData
//      ap_setpsk
//      InitializeAp
//      bl_send_apm_start_req
//      stateGlobalGuard_scan_beacon
//      wifi_mgmr_api_ap_start
//      wifi_ap_sta_delete_cmd
//      cb_scan_item_parse
//      wifi_mgmr_sta_connect_ind_stat_get
//      wifi_mgmr_sta_ssid_set
//      wifi_mgmr_sta_psk_set
//      wifi_mgmr_sta_connect
//      wifi_mgmr_scan_ap_all
//      blemesh_input_str
//      blemesh_input_num
//      blemesh_fault_set
//      beacon_send
//      bt_mesh_s1
//      bt_mesh_k1
//      bt_mesh_proxy_adv_start
//      read_name
//      le_adv_update
//      bt_set_name
//      ble_start_advertise
//      ble_set_device_name
//      fdt_get_name
//      fdt_subnode_offset
//      fdt_getprop
//      utilfdt_print_data
//      tc_blfdtdump
//      cmd_blog_info_dump
//      cmd_blog_set_level
//      blog_hexdump_out
//      cJSON_strdup
//      update
//      print_array.isra.4
//      print_object.isra.3
//      cli_putstr
//      ps_cmd
//      aos_cli_printf
//      ls_cmd
//      aos_cli_input_direct
//      find_env_cb
//      find_env
//      del_env
//      create_env_blob
//      ef_get_env_blob
//      ef_del_env
//      ef_set_env
//      ef_env_set_default
//      vTaskList
//      hal_board_cfg
//      dns_check_entry
//      dns_gethostbyname
//      dhcp_option_hostname.isra.0
//      ipus_test_cmd
//      ipu_test_cmd
//      ipc_test_cmd
//      ips_test_cmd
//      romfs_ioctl
//      romfs_read
//      file_info
//      dirent_file
//      romfs_opendir
//      romfs_open
//      romfs_register
//      Bl_F_fast.constprop.0
//      utils_wifi_psk_cal_fast_bin
//      aos_open
//      inode_open
//      inode_reserve
//      cb_altcp_recv_fn
//      scan
//      set_apcfg
//      cwjap_cur
//      at_join_ap
//      at_set_ap
//      client_ssl_set_sni
//      client_ssl_set_alpn
//      bl_cipsslcsni
//      Default_Handler
//      httpc_create_request_string.constprop.6
//      tls_prf_sha256
//      mbedtls_ssl_set_hostname
//      mbedtls_ssl_conf_alpn_protocols
//      mbedtls_ssl_free
//      x509_check_wildcard
//      mbedtls_x509_crt_verify_with_profile
//      mbedtls_pem_read_buffer
//      mbedtls_ssl_handshake_client_step
//      mbedtls_ssl_handshake_server_step
//      strstr
// MayUse:  a0:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: sp
strlen_entry:
l230A4220:
	word32 a4_17 = a0
	branch (a0 & 3<i32>) != 0<32> l230A4280
l230A4280:
	a4_17 = a4_17 + 1<i32>
	word32 a5_8 = CONVERT(Mem0[a4_17:byte], byte, word32)
	branch a5_8 != 0<32> l230A427C
l230A427C:
	branch (a4_17 & 3<i32>) == 0<32> l230A422C
l230A4290:
	a1Out = a1
	a2Out = a2
	a3Out = a4_17 & 3<i32>
	word32 a4_12 = a4_17 - a0
	a4Out = a4_12
	a5Out = a5_8
	return a4_12 + -1<i32>
l230A422C:
l230A4238:
	a4_17 = a4_17 + 4<i32>
	word32 a2_20 = Mem0[a4_17 + -4<i32>:int32]
	branch ((a2_20 & 0x7F7F7F7F<32>) + 0x7F7F7F7F<32> | a2_20 | 0x7F7F7F7F<32>) == -1<i32> l230A4238
l230A4254:
	word32 a3_27 = CONVERT(Mem0[a4_17 + -4<i32>:byte], byte, word32)
	word32 a5_30 = a4_17 - a0
	word32 a2_31 = CONVERT(Mem0[a4_17 + -3<i32>:byte], byte, word32)
	word32 a0_32 = CONVERT(Mem0[a4_17 + -2<i32>:byte], byte, word32)
	branch a3_27 == 0<32> l230A42A4
l230A42A4:
	a1Out = -1<i32>
	a2Out = a2_31
	a3Out = a3_27
	a4Out = a4_17
	a5Out = a5_30
	return a5_30 + -4<i32>
l230A4268:
	branch a2_31 == 0<32> l230A429C
l230A429C:
	a1Out = -1<i32>
	a2Out = a2_31
	a3Out = a3_27
	a4Out = a4_17
	a5Out = a5_30
	return a5_30 + -3<i32>
l230A426C:
	a1Out = -1<i32>
	a2Out = a2_31
	a3Out = a3_27
	a4Out = a4_17
	a5Out = a5_30
	return CONVERT(a0_32 != 0<32>, bool, word32) + a5_30 + -2<i32>
strlen_exit:


word32 strncmp(word32 a0, word32 a1, word32 a2, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      parse_value
//      proc_onecmd
//      aos_cli_input_direct
//      find_env_cb
//      find_env
//      romfs_open
//      inode_open
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a0 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1 t3
// Preserved: sp
strncmp_entry:
l230A42AC:
	branch a2 == 0<32> l230A4380
l230A42B0:
	word32 a2_43
	word32 a5_6 = a0 | a1
	a5 = a5_6 & 3<i32>
	branch (a5_6 & 3<i32>) != 0<32> l230A4338
l230A42BC:
	a5 = 3<i32>
	branch a2 <=u 3<i32> l230A4338
l230A42C4:
	a5 = Mem0[a0:int32]
	a4 = Mem0[a1:int32]
	branch a5 != a4 l230A4388
l230A42D0:
	a2 = a2 + -4<i32>
	branch a2 == 0xFFFFFFFC<32> l230A4380
l230A42D8:
	word32 a5_18 = a5 + 0xFEFEFEFF<32> & ~a5
	a4 = a5 + 0xFEFEFEFF<32>
	a5 = a5_18 & 0x80808080<32>
	branch (a5_18 & 0x80808080<32>) != 0<32> l230A4380
l230A42FC:
l230A432C:
	a0 = a0 + 4<i32>
	a1 = a1 + 4<i32>
	branch a2 >u 3<i32> l230A4304
l230A4304:
	a4 = Mem0[a0:int32]
	word32 a5_34 = a4 + 0xFEFEFEFF<32> & ~a4
	a3 = Mem0[a1:int32]
	a5 = a5_34 & 0x80808080<32>
	branch a4 != a3 l230A4388
l230A4388:
	a4 = CONVERT(Mem0[a0:byte], byte, word32)
	a3 = CONVERT(Mem0[a1:byte], byte, word32)
	a2_43 = a2 + -1<i32>
	branch a3 == a4 l230A434C
l230A4398:
l230A4320:
	a2 = a2 + -4<i32>
	branch a2 == 0<32> l230A4380
l230A4328:
	branch (a5_34 & 0x80808080<32>) != 0<32> l230A4380
l230A4338:
	a4 = CONVERT(Mem0[a0:byte], byte, word32)
	a3 = CONVERT(Mem0[a1:byte], byte, word32)
	a2_43 = a2 + -1<i32>
	branch a3 != a4 l230A4378
l230A4348:
	branch a2_43 == 0<32> l230A4380
l230A434C:
	branch a4 == 0<32> l230A4380
l230A4350:
	a5 = a0 + 1<i32>
	word32 a2_56 = a0 + a2_43
l230A4368:
	a1 = a1 + 1<i32>
	a4 = CONVERT(Mem0[a5:byte], byte, word32)
	a3 = CONVERT(Mem0[a1:byte], byte, word32)
	branch a4 == a3 l230A435C
l230A435C:
	branch a2_56 == a5 l230A4380
l230A4360:
	a5 = a5 + 1<i32>
	branch a4 == 0<32> l230A4380
l230A4380:
	a3Out = a3
	a4Out = a4
	a5Out = a5
	return 0<i32>
l230A4378:
	a3Out = a3
	a4Out = a4
	a5Out = a5
	return a4 - a3
strncmp_exit:


word32 strncpy(word32 a0, word32 a1, word32 a2, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      event_cb_wifi_event
//      stateGlobalGuard_scan_beacon
//      wifi_mgmr_set_country_code_internal
//      bt_mesh_input_string
//      bt_set_name
//      blog_hexdump_out
//      aos_cli_input_direct
//      move_env
//      lwip_gethostbyname
//      romfs_readdir
//      get_bytearray_from_string
//      aos_task_new
//      bl_cipstart
//      bl_mtd_open
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a1 a2 a3 a4 a5
// Trashed: a1 a2 a3 a4 a5 a6 a7 t1 t3
// Preserved: sp
strncpy_entry:
l230A439C:
	word32 a4_25
	word32 a5_5 = a1 | a0
	word32 a5_24 = a5_5 & 3<i32>
	branch (a5_5 & 3<i32>) != 0<32> l230A4418
l230A4418:
	a4_25 = a0
l230A43A8:
	a5_24 = 3<i32>
	a4_25 = a0
	branch a2 >u 3<i32> l230A4420
l230A4420:
l230A4434:
	a3 = Mem17[a1:int32]
	word32 a5_22 = a3 + 0xFEFEFEFF<32> & ~a3
	a5_24 = a5_22 & 0x80808080<32>
	branch (a5_22 & 0x80808080<32>) != 0<32> l230A43B8
l230A444C:
	a4_25 = a4_25 + 4<i32>
	Mem29[a4_25 + 4092<i32>:word32] = a3
	a2 = a2 + -4<i32>
	a1 = a1 + 4<i32>
	branch a2 >u 3<i32> l230A4434
l230A4460:
l230A43B4:
	branch a2 == 0<32> l230A4414
l230A43B8:
	word32 a6_46
	word32 a6_38 = CONVERT(Mem35[a1:byte], byte, word32)
	Mem44[a4_25:byte] = SLICE(a6_38, byte, 0)
	a3 = a2 + -1<i32>
	a1 = a1 + 1<i32>
	a5_24 = a4_25 + 1<i32>
	branch a6_38 == 0<32> l230A43FC
l230A43FC:
	a6_46 = a3
l230A43D0:
	a2 = a4_25 + a2
	a3 = a4_25 + a3
l230A43EC:
	a1 = a1 + 1<i32>
	a6_46 = a3 - a5_24
	branch a5_24 != a2 l230A43DC
l230A43DC:
	a4_25 = CONVERT(Mem55[a1 + -1<i32>:byte], byte, word32)
	a5_24 = a5_24 + 1<i32>
	Mem58[a5_24 + 4095<i32>:byte] = SLICE(a4_25, byte, 0)
	branch a4_25 == 0<32> l230A4400
l230A4400:
	a4_25 = a5_24 + a6_46
	branch a6_46 == 0<32> l230A4464
l230A4464:
	a2Out = a2
	a3Out = a3
	a4Out = a4_25
	a5Out = a5_24
	return a1
l230A4408:
	a5_24 = a5_24 + 1<i32>
	Mem64[a5_24 + 4095<i32>:byte] = 0<8>
	branch a5_24 != a4_25 l230A4408
l230A4414:
	a2Out = a2
	a3Out = a3
	a4Out = a4_25
	a5Out = a5_24
	return a1
l230A43F8:
	a2Out = a2
	a3Out = a3
	a4Out = a4_25
	a5Out = a5_24
	return a1
strncpy_exit:


word32 strnlen(word32 a0, word32 a1, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fdt_stringlist_count
//      fdt_stringlist_get
//      flt
//      two_way_long_needle
//      strstr
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a0 a1 a3 a4 a5
// Trashed: a0 a1 a3 a4 a5
// Preserved: sp
strnlen_entry:
l230A4468:
	branch a1 == 0<32> l230A4490
l230A446C:
	a5 = CONVERT(Mem0[a0:byte], byte, word32)
	branch a5 == 0<32> l230A44A4
l230A44A4:
	a1 = 0<i32>
l230A4474:
	a3 = a0 + a1
	a5 = a0
l230A4488:
	a5 = a5 + 1<i32>
	branch a5 != a3 l230A4480
l230A4480:
	a4 = CONVERT(Mem0[a5:byte], byte, word32)
	branch a4 == 0<32> l230A4498
l230A4498:
	word32 a1_16 = a5 - a0
	a1Out = a1_16
	a3Out = a3
	a4Out = a4
	a5Out = a5
	return a1_16
l230A4490:
	a1Out = a1
	a3Out = a3
	a4Out = a4
	a5Out = a5
	return a1
strnlen_exit:


word32 strrchr(word32 a0, word32 a1, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fdt_get_name
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a0 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: ra s0 s1 sp
strrchr_entry:
l230A44AC:
	branch a1 == 0<32> l230A4500
l230A4500:
l230A4500_thunk_strchr:
	word32 a5_8
	word32 a1_71
	word32 a2_72
	word32 a3_73
	word32 a4_74
	word32 a0_9 = strchr(a0, a1, out a1_71, out a2_72, out a3_73, out a4_74, out a5_8)
	a5Out = a5_8
	return a0_9
l230A44B0:
	word32 a5_22 = a0
	word32 s1_23 = 0<i32>
l230A44D8:
	word32 a5_31
	word32 a1_67
	word32 a2_68
	word32 a3_69
	word32 a4_70
	word32 a0_32 = strchr(a5_22, a1, out a1_67, out a2_68, out a3_69, out a4_70, out a5_31)
	branch a0_32 != 0<32> l230A44D0
l230A44D0:
	a5_22 = a0_32 + 1<i32>
	s1_23 = a0_32
l230A44E8:
	a5Out = a5_31
	return s1_23
strrchr_exit:


word32 two_way_long_needle(word32 a0, word32 a1, word32 a2, word32 a3, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      strstr
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31]
// LiveOut: a0 a1 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7
// Preserved: ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 sp
two_way_long_needle_entry:
l230A4504:
	word32 s10_221 = a1
	word32 s7_125 = 1<i32>
	word32 a3_39 = 1<i32>
	word32 a2_40 = 0<i32>
	word32 s11_41 = -1<i32>
l230A455C:
	word32 a5_48 = a3_39 + a2_40
	word32 a4_46 = a2 + s11_41 + a3_39
	word32 a1_49 = a2 + a5_48
	branch a5_48 >=u a3 l230A459C
l230A4570:
	word32 a1_53 = CONVERT(Mem33[a1_49:byte], byte, word32)
	word32 a4_55 = CONVERT(Mem33[a4_46:byte], byte, word32)
	branch a1_53 >=u a4_55 l230A4768
l230A4768:
	branch a1_53 == a4_55 l230A47F4
l230A47F4:
	branch a3_39 == s7_125 l230A4950
l230A4950:
	a2_40 = a5_48
	a3_39 = 1<i32>
l230A47F8:
	a3_39 = a3_39 + 1<i32>
l230A476C:
	s11_41 = a2_40
	s7_125 = 1<i32>
	a2_40 = a2_40 + 1<i32>
	a3_39 = 1<i32>
l230A457C:
	a5_48 = a5_48 + 1<i32>
	a2_40 = a5_48
	a3_39 = 1<i32>
	s7_125 = a5_48 - s11_41
	a4_46 = a2 + s11_41 + 1<i32>
	a1_49 = a2 + a5_48
	branch a5_48 <u a3 l230A4570
l230A459C:
	word32 a7_103 = 1<i32>
	word32 a3_100 = 1<i32>
	word32 a2_101 = 0<i32>
	word32 a1_102 = -1<i32>
l230A45AC:
	word32 a5_113 = a3_100 + a2_101
	word32 a4_112 = a2 + a1_102 + a3_100
	word32 a0_114 = a2 + a5_113
	branch a5_113 >=u a3 l230A45EC
l230A45C0:
	word32 a0_92 = CONVERT(Mem33[a0_114:byte], byte, word32)
	word32 a4_94 = CONVERT(Mem33[a4_112:byte], byte, word32)
	branch a4_94 >=u a0_92 l230A4780
l230A4780:
	branch a0_92 == a4_94 l230A4800
l230A4800:
	branch a3_100 == a7_103 l230A4944
l230A4944:
	a2_101 = a5_113
	a3_100 = 1<i32>
l230A4804:
	a3_100 = a3_100 + 1<i32>
l230A4784:
	a1_102 = a2_101
	a7_103 = 1<i32>
	a2_101 = a2_101 + 1<i32>
	a3_100 = 1<i32>
l230A45CC:
	a5_113 = a5_113 + 1<i32>
	a2_101 = a5_113
	a3_100 = 1<i32>
	a7_103 = a5_113 - a1_102
	a4_112 = a2 + a1_102 + 1<i32>
	a0_114 = a2 + a5_113
	branch a5_113 <u a3 l230A45C0
l230A45EC:
	word32 a1_117 = a1_102 + 1<i32>
	word32 s11_122 = s11_41 + 1<i32>
	branch a1_117 <u s11_122 l230A4600
l230A45F8:
	s7_125 = a7_103
	s11_122 = a1_117
l230A4600:
	word32 a5_134 = fp + -1088<i32>
l230A4608:
	Mem138[a5_134:word32] = a3
	a5_134 = a5_134 + 4<i32>
	branch fp + -64<i32> != a5_134 l230A4608
l230A4614:
	word32 a1_145 = a2 + a3
	word32 a4_146 = a2
	word32 a2_147 = a2 + (a3 + -1<i32>)
	branch a3 == 0<32> l230A4648
l230A4628:
	Mem158[fp + -64<i32> + (CONVERT(Mem149[a4_146:byte], byte, word32) << 2<u32>) + 3072<i32>:word32] = a2_147 - a4_146
	a4_146 = a4_146 + 1<i32>
	branch a4_146 != a1_145 l230A4628
l230A4648:
	word32 a4_1194
	word32 a5_1204
	word32 a0_1153
	word32 a4_1274
	word32 a2_1273
	word32 a5_1275
	word32 a3_1181
	word32 a1_1154
	branch memcmp(a2, a2 + s7_125, s11_122, out a1_1154, out a2_1273, out a3_1181, out a4_1274, out a5_1275) != 0<32> l230A480C
l230A480C:
	word32 s7_186 = a3 - s11_122
	branch s7_186 <u s11_122 l230A493C
l230A493C:
	s7_186 = s11_122
l230A4814:
	word32 s5_189 = s11_122 + -1<i32>
	word32 a5_192 = a2 + s5_189
	word32 s7_196 = s7_186 + 1<i32>
	word32 s8_197 = 0<i32>
	word32 s6_202 = s11_122 + -2<i32>
	word32 s4_203 = 1<i32> - s11_122
l230A4840:
	a1_1154 = a0 + s8_197
	Mem211 = Mem201 (alias)
	word32 a5_217 = Mem211[fp + -64<i32> + (CONVERT(Mem211[a1_1154 + (a3 + -1<i32>):byte], byte, word32) << 2<u32>) + -1024<i32>:int32]
	branch a5_217 == 0<32> l230A48A4
l230A4860:
	s8_197 = s8_197 + a5_217
l230A4864:
	Mem239 = Mem201 (alias)
	branch s10_221 - a3 >=u s8_197 l230A4840
l230A486C:
	word32 a5_1277
	s10_221 = s10_221 + strnlen(a0 + s10_221, a3 | 0x800<32>, out a1_1154, out a3_1181, out a4_1194, out a5_1277)
	a5_1204 = s10_221 - a3
	branch a5_1204 <u s8_197 l230A46E0
l230A4884:
	a1_1154 = a0 + s8_197
	a5_217 = Mem239[fp + -64<i32> + (CONVERT(Mem239[a1_1154 + (a3 + -1<i32>):byte], byte, word32) << 2<u32>) + -1024<i32>:int32]
	branch a5_217 != 0<32> l230A4860
l230A48A4:
	a4_1194 = fp + -64<i32>
	Mem256 = Mem201 (alias)
	branch s11_122 >=u a3 + -1<i32> l230A48E4
l230A48A8:
	word32 a5_259 = s11_122
	branch CONVERT(Mem256[a1_1154 + s11_122:byte], byte, word32) == CONVERT(Mem256[a2 + s11_122:byte], byte, word32) l230A48D0
l230A48D0:
	a5_259 = a5_259 + 1<i32>
	word32 a2_265 = a2 + a5_259
	a4_1194 = a0 + (s8_197 + a5_259)
	branch a5_259 <u a3 + -1<i32> l230A48C4
l230A48C4:
	branch CONVERT(Mem256[a2_265:byte], byte, word32) != CONVERT(Mem256[a4_1194:byte], byte, word32) l230A4930
l230A48E4:
	a5_1204 = -1<i32>
	branch s5_189 == -1<i32> l230A4970
l230A48EC:
	branch CONVERT(Mem256[a1_1154 + s5_189:byte], byte, word32) != CONVERT(Mem256[a5_192:byte], byte, word32) l230A4928
l230A4900:
	a5_1204 = a2 + s6_202
	a4_1194 = a0 + (s8_197 + s6_202)
l230A4910:
	branch a5_1278 == a2 + -1<i32> l230A4970
l230A4970:
	a0_1153 = a1_1154
l230A4914:
	a5_1204 = a5_1278 + -1<i32>
	a4_1194 = a4_1279 + -1<i32>
	a5_1278 = a5_1204
	a4_1279 = a4_1194
	branch CONVERT(Mem256[a5_1278:byte], byte, word32) == CONVERT(Mem256[a4_1279:byte], byte, word32) l230A4910
l230A4928:
	s8_197 = s8_197 + s7_196
l230A48C0:
l230A4930:
	a3_1181 = s4_203 + s8_197
	s8_197 = a3_1181 + a5_259
l230A465C:
	word32 s5_332 = s11_122 + -1<i32>
	word32 a5_343 = a0 + s5_332
	word32 a5_347 = a2 + s5_332
	word32 s6_349 = 0<i32>
	word32 s8_350 = 0<i32>
	word32 s4_352 = 1<i32> - s11_122
l230A468C:
	word32 a2_356 = a0 + s8_350
	a4_1194 = fp + -64<i32>
	a5_1204 = Mem351[fp + -64<i32> + (CONVERT(Mem351[a2_356 + (a3 + -1<i32>):byte], byte, word32) << 2<u32>) + -1024<i32>:int32]
	branch a5_1204 == 0<32> l230A4720
l230A4720:
	a5_1204 = s6_349
	branch s6_349 >=u s11_122 l230A472C
l230A4728:
	a5_1204 = s11_122
l230A472C:
	branch a5_1204 >=u a3 + -1<i32> l230A4798
l230A4730:
	word32 a3_375 = a0 + a5_1204 + s8_350
	a4_1194 = a2 + a5_1204
l230A4754:
	branch CONVERT(Mem351[a3_375:byte], byte, word32) == CONVERT(Mem351[a4_1194:byte], byte, word32) l230A4740
l230A4740:
	a5_1204 = a5_1204 + 1<i32>
	a3_375 = a2 + a5_1204
	a4_1194 = a0 + (a5_1204 + s8_350)
	branch a5_1204 >=u a3 + -1<i32> l230A4798
l230A4798:
	a3_1181 = s5_332
	branch s6_349 >=u s11_122 l230A495C
l230A47A0:
	a4_1194 = CONVERT(Mem351[a5_343 + s8_350:byte], byte, word32)
	a5_1204 = CONVERT(Mem351[a5_347:byte], byte, word32)
	branch a4_1194 == a5_1204 l230A47CC
l230A47CC:
	a4_1194 = a3_1181 + -1<i32>
	a1_1154 = a2 + a4_1194
	a5_1204 = a0 + (a4_1194 + s8_350)
	branch s6_349 != a3_1181 l230A47BC
l230A47BC:
	a1_1154 = CONVERT(Mem351[a1_1154:byte], byte, word32)
	a5_1204 = CONVERT(Mem351[a5_1204:byte], byte, word32)
	branch a1_1154 != a5_1204 l230A47E0
l230A47C8:
	a3_1181 = a4_1194
l230A47E0:
	branch a3_1181 <u s6_349 + 1<i32> l230A4968
l230A47B8:
l230A495C:
	a3_1181 = s11_122
	branch s11_122 >=u s6_349 + 1<i32> l230A47E8
l230A47E8:
	s8_350 = s8_350 + s7_125
	s6_349 = a3 - s7_125
l230A4968:
	a0_1153 = a2_356
l230A4760:
	s8_350 = s4_352 + s8_350
l230A46AC:
	branch s6_349 == 0<32> l230A46B8
l230A46B0:
	branch a5_1204 >=u s7_125 l230A46B8
l230A46B4:
	a5_1204 = a3 - s7_125
l230A46B8:
	s8_350 = s8_350 + a5_1204
	s6_349 = 0<i32>
l230A46C0:
	branch s10_221 - a3 >=u s8_350 l230A468C
l230A46C8:
	word32 a5_1276
	s10_221 = s10_221 + strnlen(a0 + s10_221, a3 | 0x800<32>, out a1_1154, out a3_1181, out a4_1194, out a5_1276)
	a5_1204 = s10_221 - a3
	branch a5_1204 >=u s8_350 l230A468C
l230A46E0:
	a0_1153 = 0<i32>
l230A46E4:
	a1Out = a1_1154
	a3Out = a3_1181
	a4Out = a4_1194
	a5Out = a5_1204
	return a0_1153
two_way_long_needle_exit:


word32 strstr(word32 ra, word32 a0, word32 a1, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      cmd_blog_info_dump
//      ota_tcp_cmd
//      http_url_req
//      mbedtls_x509_crt_parse
//      mbedtls_pem_read_buffer
// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31]
// LiveOut: a0 a1 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1
// Preserved: ra s0 s1 s2 s3 s4 s5 sp
strstr_entry:
l230A4978:
	word32 a1_104 = CONVERT(Mem17[a1:byte], byte, word32)
	word32 s0_121 = a0
	branch a1_104 == 0<32> l230A4A9C
l230A49A8:
	a3 = CONVERT(Mem17[a1 + 1<i32>:byte], byte, word32)
	branch a3 == 0<32> l230A4B54
l230A4B54:
	word32 a2_407
	s0_121 = strchr(a0, a1_104, out a1_104, out a2_407, out a3, out a4, out a5)
l230A49B0:
	word32 a2_34 = CONVERT(Mem17[a1 + 2<i32>:byte], byte, word32)
	branch a2_34 == 0<32> l230A4AC4
l230A4AC4:
	a5 = CONVERT(Mem17[a0:byte], byte, word32)
	a1_104 = a1_104 << 0x10<u32> | a3
	branch a5 == 0<32> l230A4B4C
l230A4AD4:
	a3 = a0 + 1<i32>
	a4 = CONVERT(Mem17[a0 + 1<i32>:byte], byte, word32)
l230A4AE4:
	a5 = a4 | a5 << 0x10<u32>
	branch a4 == 0<32> l230A4B4C
l230A4AF0:
	word32 a2_45 = a3 + 1<i32>
	a4 = CONVERT(Mem17[a3 + 1<i32>:byte], byte, word32)
	branch a1_104 != a5 l230A4AE0
l230A4AE0:
	a3 = a2_45
l230A4AFC:
	s0_121 = a3 + -1<i32>
l230A49B8:
	a4 = CONVERT(Mem17[a1 + 3<i32>:byte], byte, word32)
	branch a4 == 0<32> l230A4B60
l230A4B60:
	a4 = CONVERT(Mem17[a0:byte], byte, word32)
	a1_104 = a3 << 0x10<u32>
	a5 = a1_104 << 0x18<u32> | a3 << 0x10<u32> | a2_34 << 8<u32>
	branch a4 == 0<32> l230A4B4C
l230A4B7C:
	a4 = a4 << 8<u32>
	word32 a2_59 = a0 + 1<i32>
	a3 = CONVERT(Mem17[a0 + 1<i32>:byte], byte, word32)
l230A4B90:
	word32 a4_63 = a3 | a4
	a4 = a4_63 << 8<u32>
	branch a3 == 0<32> l230A4B4C
l230A4B9C:
	a1_104 = a2_59 + 1<i32>
	a3 = CONVERT(Mem17[a2_59 + 1<i32>:byte], byte, word32)
	branch a5 != a4_63 << 8<u32> l230A4B8C
l230A4B8C:
	a2_59 = a1_104
l230A4BA8:
	s0_121 = a2_59 + -2<i32>
l230A49C0:
	branch CONVERT(Mem17[a1 + 4<i32>:byte], byte, word32) == 0<32> l230A4B04
l230A4B04:
	a1_104 = a1_104 << 0x18<u32>
	a3 = CONVERT(Mem17[a0:byte], byte, word32)
	a5 = a1_104 << 0x18<u32> | a3 << 0x10<u32> | a4 | a2_34 << 8<u32>
	branch a3 == 0<32> l230A4B4C
l230A4B24:
	a4 = 0<i32>
l230A4B34:
	a4 = a3 | a4 << 8<u32>
	a3 = CONVERT(Mem17[s0_121 + 1<i32>:byte], byte, word32)
	word32 a2_88 = s0_121 + 1<i32>
	branch a3 != 0<32> l230A4B2C
l230A4B2C:
	branch a5 == a4 l230A4BD4
l230A4B30:
	s0_121 = a2_88
l230A4B48:
	branch a5 == a4 l230A4BD4
l230A4BD4:
	s0_121 = s0_121 + -3<i32>
l230A49C8:
	word32 a3_410
	word32 a5_412
	word32 a1_408
	word32 a2_409
	word32 a4_411
	word32 a0_94 = strlen(a1, out a1_408, out a2_409, out a3_410, out a4_411, out a5_412)
	word32 a0_103 = strnlen(a0, a0_94 | 512<i32>, out a1_104, out a3, out a4, out a5)
	branch a0_103 <u a0_94 l230A4B4C
l230A49E4:
	branch a0_94 >u 254<i32> l230A4BDC
l230A4BDC:
	s0_121 = two_way_long_needle(a0, a0_103, a1, a0_94, out a1_104, out a3, out a4, out a5)
l230A49EC:
	word32 a4_416
	word32 a5_417
	word32 a0_414
	word32 a2_415
	word32 t1_413
	memset(ra, fp + -96<i32>, a0_94 + 1<i32>, 64<i32>, out t1_413, out a0_414, out a1_104, out a2_415, out a3, out a4_416, out a5_417)
	word32 s3_126 = a0 + (a0_103 - a0_94)
	branch a0_94 == 0<32> l230A4A38
l230A4A08:
	word32 a4_137 = a1
	a1_104 = a0_94 + a1
	word32 a2_139 = a1 + (a0_94 & 255<i32>)
l230A4A18:
	a3 = a2_139 - a4_137
	Mem150[fp + -32<i32> + (CONVERT(Mem141[a4_137:byte], byte, word32) & 63<i32>) + 4032<i32>:byte] = SLICE(a3, byte, 0)
	a4_137 = a4_137 + 1<i32>
	branch a1_104 != a4_137 l230A4A18
l230A4A38:
l230A4A40:
	word32 s0_155 = s0_121 + -1<i32>
	a4 = fp + -32<i32>
	s0_121 = s0_155 + CONVERT(Mem231[((fp + -32<i32>) + (CONVERT(Mem231[s0_155 + a0_94:byte], byte, word32) & 63<i32>)) + -64<i32>:byte], byte, word32)
	branch s3_126 >=u s0_121 l230A4A70
l230A4A70:
	word32 s4_180 = CONVERT(Mem231[fp + -32<i32> + (CONVERT(Mem231[s0_121 + a0_94:byte], byte, word32) & 63<i32>) + -64<i32>:byte], byte, word32)
	word32 a2_418
	branch memcmp(s0_121, a1, a0_94, out a1_104, out a2_418, out a3, out a4, out a5) != 0<32> l230A4A68
l230A4A68:
	s0_121 = s0_121 + s4_180
	branch s3_126 <u s0_121 l230A4BB0
l230A4A64:
l230A4BB0:
	word32 a0_191 = s3_126 + a0_94
	a5 = CONVERT(Mem231[a0_191:byte], byte, word32)
	branch a5 == 0<32> l230A4B4C
l230A4B4C:
	s0_121 = 0<i32>
l230A4BBC:
	s3_126 = s3_126 + strnlen(a0_191, 0x800<32>, out a1_104, out a3, out a4, out a5)
	branch s3_126 >=u s0_121 l230A4A40
l230A4BCC:
	s0_121 = 0<i32>
l230A4A9C:
	a1Out = a1_104
	a3Out = a3
	a4Out = a4
	a5Out = a5
	return s0_121
strstr_exit:


word32 _strtol_l.isra.0(word32 a0, word32 a1, word32 a2, word32 a3, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _strtol_r
//      strtol_l
//      strtol
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31]
// LiveOut: a0 a1 a3 a4 a5
// Trashed: a0 a1 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: s0 s1 sp
_strtol_l.isra.0_entry:
l230A4BF8:
	word32 t1_11 = a1
l230A4C1C:
	word32 a4_125 = t1_11 + 1<i32>
	word32 a5_17 = CONVERT(Mem7[a4_125 + -1<i32>:byte], byte, word32)
	branch (CONVERT(Mem7[0x230CB5B1<p32> + a5_17:byte], byte, word32) & 8<i32>) != 0<32> l230A4C18
l230A4C18:
	t1_11 = a4_125
l230A4C34:
	word32 a6_183
	word32 t6_46
	word32 s0_25
	branch a5_17 == 45<i32> l230A4D48
l230A4D48:
	a6_183 = CONVERT(Mem7[a4_125:byte], byte, word32)
	s0_25 = 1<i32>
	a4_125 = t1_11 + 2<i32>
l230A4C3C:
	branch a5_17 == 43<i32> l230A4CC4
l230A4CC4:
	a6_183 = CONVERT(Mem7[a4_125:byte], byte, word32)
	s0_25 = 0<i32>
	a4_125 = t1_11 + 2<i32>
	branch a3 != 0<32> l230A4C50
l230A4C44:
	a6_183 = a5_17
	s0_25 = 0<i32>
l230A4C4C:
	branch a3 == 0<32> l230A4CD4
l230A4CD4:
	branch a6_183 == 48<i32> l230A4D94
l230A4D94:
	branch (CONVERT(Mem7[a4_125:byte], byte, word32) & 223<i32>) == 88<i32> l230A4D80
l230A4DA4:
	t6_46 = 8<i32>
	a3 = 8<i32>
l230A4CDC:
	t6_46 = 10<i32>
	a3 = 10<i32>
l230A4C50:
	t6_46 = a3
	branch a3 == 16<i32> l230A4D60
l230A4D60:
	branch a6_183 != 48<i32> l230A4D78
l230A4D68:
	branch (CONVERT(Mem7[a4_125:byte], byte, word32) & 223<i32>) == 88<i32> l230A4D80
l230A4D80:
	a6_183 = CONVERT(Mem7[a4_125 + 1<i32>:byte], byte, word32)
	t6_46 = 16<i32>
	a4_125 = a4_125 + 2<i32>
	a3 = 16<i32>
l230A4D78:
	t6_46 = 16<i32>
l230A4C5C:
	word32 t0_122 = 0x80000000<32>
	branch s0_25 != 0<32> l230A4C68
l230A4C64:
	t0_122 = 0x7FFFFFFF<32>
l230A4C68:
	word32 s1_78 = t0_122 & t6_46
	word32 a7_158 = 0<i32>
	word32 a0_108 = 0<i32>
	word32 t4_84 = t0_122 >>u t6_46
l230A4C84:
	word32 a5_166 = a6_183 + -48<i32>
	branch a5_166 <=u 9<i32> l230A4C98
l230A4C8C:
	branch a6_183 >u -90<i32> l230A4CE8
l230A4CE8:
	branch a6_183 >u -122<i32> l230A4CF8
l230A4CF0:
	a5_166 = a6_183 + -87<i32>
	branch a5_166 < a3 l230A4C9C
l230A4C94:
	a5_166 = a6_183 + -55<i32>
l230A4C98:
	branch a5_166 >= a3 l230A4CF8
l230A4CF8:
	word32 a5_100 = -1<i32>
	branch a7_158 == -1<i32> l230A4D2C
l230A4D2C:
	Mem104[a0:word32] = 34<i32>
	a5_100 = 34<i32>
	a0_108 = t0_122
	branch a2 == 0<32> l230A4D14
l230A4D00:
	branch s0_25 == 0<32> l230A4D08
l230A4D04:
	a0_108 = 0<32> - a0_108
l230A4D08:
	branch a2 == 0<32> l230A4D14
l230A4D0C:
	branch a7_158 != 0<32> l230A4D58
l230A4D58:
	t0_122 = a0_108
l230A4D3C:
	a1 = a4_125 + -1<i32>
	a0_108 = t0_122
l230A4D10:
	Mem138[a2:word32] = a1
l230A4D14:
	a1Out = a1
	a3Out = a3
	a4Out = a4_125
	a5Out = a5_100
	return a0_108
_strtol_l.isra.0_exit:
l230A4C9C:
	branch a7_158 == -1<i32> l230A4CB8
l230A4CA0:
	a7_158 = -1<i32>
	branch t4_84 <u a0_108 l230A4CB8
l230A4CA8:
	branch t4_84 == a0_108 l230A4D24
l230A4D24:
	branch s1_78 < a5_166 l230A4CB8
l230A4D28:
l230A4CAC:
	a7_158 = 1<i32>
	a0_108 = a5_166 + (t6_46 + a0_108)
l230A4CB8:
	a4_125 = a4_125 + 1<i32>
	a6_183 = CONVERT(Mem7[a4_125 + -1<i32>:byte], byte, word32)


void _strtol_r(word32 a0, word32 a1, word32 a2, word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _atoi_r
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31]
// LiveOut:
// Trashed: a0 a1 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
_strtol_r_entry:
l230A4DB0:
l230A4DB0_thunk__strtol_l.isra.0:
	word32 a1_21
	word32 a3_22
	word32 a4_23
	word32 a5_24
	_strtol_l.isra.0(a0, a1, a2, a3, out a1_21, out a3_22, out a4_23, out a5_24)
	return
_strtol_r_exit:


void strtol_l(word32 a0, word32 a1, word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
strtol_l_entry:
l230A4DB4:
	word32 a0_12 = Mem0[0x4200ECFC<p32>:int32]
l230A4DCC_thunk__strtol_l.isra.0:
	word32 a1_27
	word32 a3_28
	word32 a4_29
	word32 a5_30
	_strtol_l.isra.0(a0_12, a0, a1, a2, out a1_27, out a3_28, out a4_29, out a5_30)
	return
strtol_l_exit:


word32 strtol(word32 a0, word32 a1, word32 a2, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a4Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      mmem_cmd
//      pmem_cmd
//      get_bytearray_from_string
//      atoi
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a0 a1 a2 a3 a4 a5
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
strtol_entry:
l230A4DD0:
	word32 a0_12 = Mem0[0x4200ECFC<p32>:int32]
l230A4DE8_thunk__strtol_l.isra.0:
	word32 a3_14
	word32 a4_15
	word32 a5_16
	word32 a1_26
	word32 a0_13 = _strtol_l.isra.0(a0_12, a0, a1, a2, out a1_26, out a3_14, out a4_15, out a5_16)
	a1Out = a1_26
	a2Out = a1
	a3Out = a3_14
	a4Out = a4_15
	a5Out = a5_16
	return a0_13
strtol_exit:


word32 _strtoul_l.isra.0(word32 a0, word32 a1, word32 a2, word32 a3, ptr32 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _strtoul_r
//      strtoul_l
//      strtoul
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31]
// LiveOut: a0 a3
// Trashed: a0 a1 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
_strtoul_l.isra.0_entry:
l230A4DEC:
	word32 t1_17 = a1
l230A4E04:
	word32 a4_10 = t1_17 + 1<i32>
	word32 a5_12 = CONVERT(Mem0[a4_10 + -1<i32>:byte], byte, word32)
	branch (CONVERT(Mem0[0x230CB5B1<p32> + a5_12:byte], byte, word32) & 8<i32>) != 0<32> l230A4E00
l230A4E00:
	t1_17 = a4_10
l230A4E1C:
	word32 t6_219
	word32 t0_216
	word32 t3_213
	word32 t2_194
	word32 a6_159
	branch a5_12 == 45<i32> l230A4F2C
l230A4F2C:
	a6_159 = CONVERT(Mem0[a4_10:byte], byte, word32)
	t2_194 = 1<i32>
	a4_10 = t1_17 + 2<i32>
l230A4E24:
	branch a5_12 == 43<i32> l230A4EA0
l230A4EA0:
	a6_159 = CONVERT(Mem0[a4_10:byte], byte, word32)
	t2_194 = 0<i32>
	a4_10 = t1_17 + 2<i32>
	branch a3 != 0<32> l230A4E38
l230A4E2C:
	a6_159 = a5_12
	t2_194 = 0<i32>
l230A4E34:
	branch a3 == 0<32> l230A4EB0
l230A4EB0:
	branch a6_159 == 48<i32> l230A4F78
l230A4F78:
	branch (CONVERT(Mem0[a4_10:byte], byte, word32) & 223<i32>) == 88<i32> l230A4F58
l230A4F88:
	t0_216 = 7<i32>
	t3_213 = 0x1FFFFFFF<32>
	t6_219 = 8<i32>
	a3 = 8<i32>
l230A4EB8:
	t0_216 = 5<i32>
	t3_213 = 0x19999999<32>
	t6_219 = 10<i32>
	a3 = 10<i32>
l230A4E38:
	branch a3 == 16<i32> l230A4F40
l230A4F40:
	branch a6_159 != 48<i32> l230A4FB4
l230A4FB4:
	t0_216 = 15<i32>
	t3_213 = 0xFFFFFFF<32>
	t6_219 = 16<i32>
l230A4F48:
	branch (CONVERT(Mem0[a4_10:byte], byte, word32) & 223<i32>) != 88<i32> l230A4FA0
l230A4FA0:
	t6_219 = 16<i32>
	t3_213 = -1<i32> >>u a3
	t0_216 = 15<i32>
l230A4F58:
	a6_159 = CONVERT(Mem0[a4_10 + 1<i32>:byte], byte, word32)
	t0_216 = 15<i32>
	a4_10 = a4_10 + 2<i32>
	t3_213 = 0xFFFFFFF<32>
	t6_219 = 16<i32>
	a3 = 16<i32>
l230A4E40:
	t3_213 = -1<i32> >>u a3
	t6_219 = a3
	t0_216 = a3
l230A4E50:
	word32 a7_131 = 0<i32>
	word32 a0_104 = 0<i32>
l230A4E60:
	word32 a5_140 = a6_159 + -48<i32>
	branch a5_140 <=u 9<i32> l230A4E74
l230A4E68:
	branch a6_159 >u -90<i32> l230A4ED8
l230A4ED8:
	branch a6_159 >u -122<i32> l230A4EE8
l230A4EE0:
	a5_140 = a6_159 + -87<i32>
	branch a5_140 < a3 l230A4E78
l230A4E70:
	a5_140 = a6_159 + -55<i32>
l230A4E74:
	branch a5_140 >= a3 l230A4EE8
l230A4EE8:
	branch a7_131 < 0<32> l230A4F10
l230A4F10:
	Mem103[a0:word32] = 34<i32>
	a0_104 = -1<i32>
	branch a2 == 0<32> l230A4F3C
l230A4F3C:
	a3Out = <invalid>
	return -1<i32>
l230A4EEC:
	branch t2_194 == 0<32> l230A4EF4
l230A4EF0:
	a0_104 = 0<32> - a0_104
l230A4EF4:
	branch a2 == 0<32> l230A4F0C
l230A4F0C:
	a3Out = <invalid>
	return a0_104
l230A4EF8:
	branch a7_131 != 0<32> l230A4F20
l230A4F20:
	Mem124[a2:word32] = a4_10 + -1<i32>
	a3Out = <invalid>
	return a0_104
l230A4EFC:
	Mem129[a2:word32] = a1
	a3Out = <invalid>
	return a0_104
_strtoul_l.isra.0_exit:
l230A4E78:
	branch a7_131 < 0<32> l230A4ED0
l230A4ED0:
	a7_131 = -1<i32>
l230A4E7C:
	a7_131 = -1<i32>
	branch t3_213 <u a0_104 l230A4E94
l230A4E84:
	branch a0_104 == t3_213 l230A4F04
l230A4F04:
	branch t0_216 < a5_140 l230A4E94
l230A4F08:
l230A4E88:
	a7_131 = 1<i32>
	a0_104 = a5_140 + (t6_219 + a0_104)
l230A4E94:
	a4_10 = a4_10 + 1<i32>
	a6_159 = CONVERT(Mem0[a4_10 + -1<i32>:byte], byte, word32)


void _strtoul_r(word32 a0, word32 a1, word32 a2, word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31]
// LiveOut:
// Trashed: a0 a1 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
_strtoul_r_entry:
l230A4FC8:
l230A4FC8_thunk__strtoul_l.isra.0:
	word32 a3_21
	_strtoul_l.isra.0(a0, a1, a2, a3, out a3_21)
	return
_strtoul_r_exit:


void strtoul_l(word32 a0, word32 a1, word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
strtoul_l_entry:
l230A4FCC:
	word32 a0_12 = Mem0[0x4200ECFC<p32>:int32]
l230A4FE4_thunk__strtoul_l.isra.0:
	word32 a3_27
	_strtoul_l.isra.0(a0_12, a0, a1, a2, out a3_27)
	return
strtoul_l_exit:


word32 strtoul(word32 a0, word32 a1, word32 a2, ptr32 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      blemesh_input_num
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a0 a3
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
strtoul_entry:
l230A4FE8:
	word32 a0_12 = Mem0[0x4200ECFC<p32>:int32]
l230A5000_thunk__strtoul_l.isra.0:
	word32 a3_14
	word32 a0_13 = _strtoul_l.isra.0(a0_12, a0, a1, a2, out a3_14)
	a3Out = a3_14
	return a0_13
strtoul_exit:


void stat(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
stat_entry:
l230A5004:
	word32 a0_10 = Mem0[0x4200ECFC<p32>:int32]
l230A5018_thunk__stat_r:
	_stat_r(a0_10, a0, a1)
	return
stat_exit:


word32 __sprint_r.part.0(word32 ra, word32 a0, word32 a1, word32 a2, word32 s2, word32 s3, word32 s7, word32 s8, word32 s9, word32 s10, ptr32 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __sprint_r
//      _vfiprintf_r
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] ra:[0..31] s10:[0..31] s2:[0..31] s3:[0..31] s7:[0..31] s8:[0..31] s9:[0..31]
// LiveOut: a0 a3
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t3 t4 t5 t6
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 s8 sp
__sprint_r.part.0_entry:
l230A501C:
	word32 a0_180
	branch Mem0[a1 + 100<i32>:int32] << 0x12<u32> >= 0<32> l230A5104
l230A5104:
	a0_180 = __sfvwrite_r(ra, a0, a1, a2, s2, s3, s7, s8, s9, s10, out a3)
l230A5058:
	word32 a5_47 = Mem26[a2 + 8<i32>:int32]
	word32 s7_50 = Mem26[a2:int32]
	branch a5_47 == 0<32> l230A50FC
l230A5070:
	word32 s8_54 = Mem53[s7_50 + 4<i32>:int32]
	word32 s0_55 = Mem53[s7_50:int32]
	branch s8_54 >>u 2<u32> == 0<32> l230A50E8
l230A5080:
	word32 s1_57 = 0<i32>
l230A5090:
	s1_57 = s1_57 + 1<i32>
	branch _fputwc_r(a0, Mem53[s0_55:int32], a1, out a3) != -1<i32> l230A5088
l230A5088:
	s0_55 = s0_55 + 4<i32>
	branch s8_54 >>u 2<u32> == s1_57 l230A50E4
l230A50E4:
	a5_47 = Mem53[a2 + 8<i32>:int32]
l230A50E8:
	a5_47 = a5_47 - (s8_54 & -4<i32>)
	Mem86[a2 + 8<i32>:word32] = a5_47
	s7_50 = s7_50 + 8<i32>
	branch a5_47 != 0<32> l230A5070
l230A50FC:
	a0_180 = 0<i32>
l230A50A8:
	a0_180 = -1<i32>
l230A50AC:
	Mem103[a2 + 8<i32>:word32] = 0<32>
	Mem104[a2 + 4<i32>:word32] = 0<32>
	a3Out = a3
	return a0_180
__sprint_r.part.0_exit:


void __sprint_r(word32 ra, word32 a0, word32 a1, word32 a2, word32 s2, word32 s3, word32 s7, word32 s8, word32 s9, word32 s10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] ra:[0..31] s10:[0..31] s2:[0..31] s3:[0..31] s7:[0..31] s8:[0..31] s9:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t3 t4 t5 t6
// Preserved: sp
__sprint_r_entry:
l230A510C:
	branch Mem0[a2 + 8<i32>:int32] == 0<32> l230A5118
l230A5118:
	Mem6[a2 + 4<i32>:word32] = 0<32>
	return
l230A5114:
l230A5114_thunk___sprint_r.part.0:
	word32 a3_56
	__sprint_r.part.0(ra, a0, a1, a2, s2, s3, s7, s8, s9, s10, out a3_56)
	return
__sprint_r_exit:


word32 _vfiprintf_r(word32 ra, word32 a0, word32 a1, word32 a2, word32 s2, word32 s6, word32 s7, word32 s8, word32 s9, ptr32 & s0Out, ptr32 & a0Out, ptr32 & s2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _fiprintf_r
//      fiprintf
//      vfiprintf
//      __sbprintf
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] ra:[0..31] s2:[0..31] s6:[0..31] s7:[0..31] s8:[0..31] s9:[0..31]
// LiveOut: a0 ra s0 s2
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
_vfiprintf_r_entry:
l230A5124:
	word32 a0_1018
	word32 s10_185 = a2
	a0_1018 = a0
	branch a0 == 0<32> l230A5178
l230A5170:
	a0_1018 = a0
	branch Mem31[a0 + 56<i32>:int32] == 0<32> l230A5AF8
l230A5AF8:
	word32 a3_2700
	a0_1018 = __sinit(ra, a0, out a3_2700)
l230A5178:
	word32 a4_49 = CONVERT(Mem31[a1 + 12<i32>:int16], int16, int32)
	word32 a5_51 = CONVERT(SLICE(a4_49, word16, 0), word16, word32)
	branch a5_51 << 0x12<u32> < 0<32> l230A51B4
l230A518C:
	word32 a3_53 = Mem31[a1 + 100<i32>:int32]
	Mem59[a1 + 12<i32>:word16] = SLICE(a4_49 | 0x2000<32>, word16, 0)
	Mem61[a1 + 100<i32>:word32] = a3_53 & 0xFFFFDFFF<32>
	a5_51 = CONVERT(SLICE(a4_49 | 0x2000<32>, word16, 0), word16, word32)
l230A51B4:
	word32 dwLoc012C_1532
	branch (a5_51 & 8<i32>) == 0<32> l230A5324
l230A51BC:
	branch Mem66[a1 + 16<i32>:int32] == 0<32> l230A5324
l230A5324:
	word32 a3_2701
	a0_1018 = __swsetup_r(ra, a0, a1, out a3_2701)
	branch a0_1018 == 0<32> l230A5338
l230A5338:
	branch (CONVERT(Mem66[a1 + 12<i32>:uint16], uint16, word32) & 26<i32>) != 10<i32> l230A51D0
l230A5334:
l230A51C4:
	branch (a5_51 & 26<i32>) == 10<i32> l230A5348
l230A5348:
	branch CONVERT(Mem66[a1 + 14<i32>:int16], int16, int32) < 0<32> l230A51D0
l230A5350:
	dwLoc012C_1532 = __sbprintf(a1)
l230A51D0:
	word32 dwLocE8_1526 = 0<32>
	dwLoc012C_1532 = 0<32>
	s2_189 = s2
l230A520C:
	word32 s2_189
	word32 dwLocEC_1539 = 0<32>
	word32 s11_1041 = fp + -228<i32>
	word32 a5_187 = CONVERT(Mem186[s10_185:byte], byte, word32)
	branch a5_187 == 0<32> l230A5378
l230A5214:
	word32 a3_1389 = 37<i32>
	branch a5_187 == 37<i32> l230A5FBC
l230A5FBC:
	s2_189 = s10_185
l230A521C:
	word32 s0_190 = s10_185
l230A522C:
	word32 a5_193 = CONVERT(Mem186[s0_190 + 1<i32>:byte], byte, word32)
	s2_189 = s0_190 + 1<i32>
	branch a5_193 != 0<32> l230A5224
l230A5224:
	branch a5_193 == 37<i32> l230A536C
l230A536C:
	s6 = s2_189 - s10_185
	branch s6 == 0<32> l230A529C
l230A5374:
l230A5228:
	s0_190 = s2_189
l230A5238:
	s6 = s2_189 - s10_185
	branch s6 == 0<32> l230A5378
l230A5240:
	a3_1389 = s6 + dwLocE8_1526
	dwLocE8_1526 = a3_1389
	dwLocEC_1539 = 1<i32>
	s11_1041 = fp + -220<i32>
	branch false l230A5288
l230A526C:
	branch a3_1389 == 0<32> l230A5F74
l230A5F74:
	dwLocEC_1539 = 0<32>
	s11_1041 = fp + -228<i32>
l230A5270:
	a0_1018 = __sprint_r.part.0(ra, a0, a1, fp + -240<i32>, s2_189, a1, s7, s8, s9, s10_185, out a3_1389)
	branch a0_1018 != 0<32> l230A5390
l230A5284:
	s11_1041 = fp + -228<i32>
l230A5288:
	dwLoc012C_1532 = dwLoc012C_1532 + s6
	branch CONVERT(Mem262[s0_190 + 1<i32>:byte], byte, word32) == 0<32> l230A5378
l230A529C:
	word32 s10_272 = s2_189 + 1<i32>
	word32 a2_274 = CONVERT(Mem273[s2_189 + 1<i32>:byte], byte, word32)
	s7 = -1<i32>
	word32 s0_1204 = 0<i32>
	s9 = 0<i32>
	s2_189 = 42<i32>
	s10_185 = s10_272 + 1<i32>
	branch a2_274 >u -122<i32> l230A54A4
l230A54A4:
	branch a2_274 == 0<32> l230A5378
l230A5378:
	branch dwLocE8_1526 == 0<32> l230A5390
l230A5380:
	word32 a3_2702
	__sprint_r.part.0(ra, a0, a1, fp + -240<i32>, s2_189, a1, s7, s8, s9, s10_185, out a3_2702)
l230A54A8:
	s2_189 = 1<i32>
	s6 = 1<i32>
	s8 = fp + -164<i32>
	branch true l230A54CC
l230A54C8:
	s2_189 = 3<32>
l230A54CC:
	word32 a1_1034
	word32 a2_1495 = dwLocEC_1539
	word32 a5_1033 = dwLocE8_1526
	word32 a1_338 = dwLocEC_1539 + 1<i32>
	word32 t4_1035 = dwLocEC_1539 + 1<i32>
	branch false l230A54EC
l230A54E4:
	word32 t3_1484 = 0<i32> - s2_189
	branch t3_1484 > 0<32> l230A5E4C
l230A5E4C:
	word32 a0_344
	branch t3_1484 <= 16<i32> l230A6334
l230A6334:
	a0_344 = dwLocEC_1539 + 1<i32>
l230A5E54:
	word32 t5_1479 = 16<i32>
	word32 t2_1481 = 7<i32>
l230A5E80:
	Mem355[s11_1041:word32] = 0x230CB820<p32>
	Mem357[s11_1041 + 4<i32>:word32] = t5_1479
	a5_1033 = a5_1033 + 16<i32>
	branch t2_1481 >= a1_338 l230A5E68
l230A5E68:
	a0_344 = a2_1495 + 2<i32>
	s11_1041 = s11_1041 + 8<i32>
	a2_1495 = a1_338
l230A5E98:
	branch a5_1033 == 0<32> l230A5F1C
l230A5F1C:
	a2_1495 = 0<i32>
	a0_344 = 1<i32>
	s11_1041 = fp + -228<i32>
l230A5E74:
	t3_1484 = t3_1484 + -16<i32>
	branch t5_1479 >= t3_1484 l230A5EF0
l230A5E9C:
	word32 a3_2705
	branch __sprint_r.part.0(ra, a0, a1, fp + -240<i32>, s2_189, a1, 0<i32>, fp + -164<i32>, 0<i32>, s10_272 + 1<i32>, out a3_2705) != 0<32> l230A5390
l230A5EC0:
	a2_1495 = a1_338
	t5_1479 = 16<i32>
	t3_1484 = t3_1484 + -16<i32>
	s11_1041 = fp + -228<i32>
	a0_344 = a1_338 + 1<i32>
	t2_1481 = 7<i32>
	branch t3_1484 > -32<i32> l230A5E7C
l230A5E7C:
	a1_338 = a2_1495 + 1<i32>
l230A5EF0:
	Mem431[s11_1041:word32] = 0x230CB820<p32>
	Mem432[s11_1041 + 4<i32>:word32] = t3_1484
	a5_1033 = a5_1033 + t3_1484
	branch a0_344 > 7<i32> l230A5DC8
l230A5DC8:
	branch a5_1033 != 0<32> l230A5FE8
l230A5FE8:
	word32 a3_2706
	branch __sprint_r.part.0(ra, a0, a1, fp + -240<i32>, s2_189, a1, 0<i32>, fp + -164<i32>, 0<i32>, s10_272 + 1<i32>, out a3_2706) != 0<32> l230A5390
l230A6004:
	a2_1495 = a0_344
	s11_1041 = fp + -228<i32>
	t4_1035 = a0_344 + 1<i32>
l230A5DCC:
	branch false l230A6288
l230A6288:
	a5_1033 = 1<i32>
	t4_1035 = 1<i32>
	a1_1034 = fp + -220<i32>
l230A5F0C:
	s11_1041 = s11_1041 + 8<i32>
	t4_1035 = a0_344 + 1<i32>
	a2_1495 = a0_344
l230A54EC:
	a1_1034 = s11_1041 + 8<i32>
	branch true l230A552C
l230A54F8:
	Mem515[s11_1041:word32] = fp + -245<i32>
	Mem517[s11_1041 + 4<i32>:word32] = 1<i32>
	a5_1033 = a5_1033 + 1<i32>
	branch t4_1035 > 7<i32> l230A5E04
l230A5E04:
	branch a5_1033 == 0<32> l230A5DD4
l230A5DD4:
	branch true l230A5FC4
l230A5FC4:
	a2_1495 = 0<i32>
	a1_1034 = fp + -220<i32>
	t4_1035 = 1<i32>
	s11_1041 = fp + -228<i32>
l230A5DD8:
	a5_1033 = 2<i32>
	t4_1035 = 1<i32>
	a1_1034 = fp + -220<i32>
l230A5E08:
	word32 a3_2703
	branch __sprint_r.part.0(ra, a0, a1, fp + -240<i32>, s2_189, a1, 0<i32>, fp + -164<i32>, 0<i32>, s10_272 + 1<i32>, out a3_2703) != 0<32> l230A5390
l230A5E24:
	a2_1495 = t4_1035
	a1_1034 = fp + -220<i32>
	t4_1035 = t4_1035 + 1<i32>
	s11_1041 = fp + -228<i32>
l230A551C:
	a2_1495 = t4_1035
	s11_1041 = a1_1034
	t4_1035 = t4_1035 + 1<i32>
	a1_1034 = a1_1034 + 8<i32>
l230A552C:
	branch true l230A5588
l230A5530:
	Mem587[s11_1041:word32] = fp + -244<i32>
	Mem589[s11_1041 + 4<i32>:word32] = 2<i32>
	a5_1033 = a5_1033 + 2<i32>
	branch t4_1035 <= 7<i32> l230A5DF0
l230A5DF0:
	a2_1495 = t4_1035
	s11_1041 = a1_1034
	t4_1035 = t4_1035 + 1<i32>
	a1_1034 = a1_1034 + 8<i32>
l230A5554:
	branch a5_1033 == 0<32> l230A5FA8
l230A5FA8:
	a1_1034 = fp + -220<i32>
	t4_1035 = 1<i32>
	a2_1495 = 0<i32>
	s11_1041 = fp + -228<i32>
l230A5558:
	word32 a3_2704
	branch __sprint_r.part.0(ra, a0, a1, fp + -240<i32>, s2_189, a1, 0<i32>, fp + -164<i32>, 0<i32>, s10_272 + 1<i32>, out a3_2704) != 0<32> l230A5390
l230A5570:
	a2_1495 = t4_1035
	a1_1034 = fp + -220<i32>
	t4_1035 = t4_1035 + 1<i32>
	s11_1041 = fp + -228<i32>
l230A5588:
	word32 a5_1048
	word32 dwLocEC_1601
	a0_1018 = 128<i32>
	branch false l230A5BE4
l230A5BE4:
	word32 t3_666 = 0<i32> - s2_189
	branch t3_666 <= 0<32> l230A5590
l230A5BEC:
	word32 t6_669
	branch t3_666 <= 16<i32> l230A6354
l230A6354:
	t6_669 = a1_1034
	a0_1018 = t4_1035
l230A5BF4:
l230A5C1C:
	Mem684[s11_1041:word32] = 0x230CB830<p32>
	Mem686[s11_1041 + 4<i32>:word32] = 16<i32>
	a5_1033 = a5_1033 + 16<i32>
	word32 a1_681 = a2_1495 + 1<i32>
	branch a1_681 <= 7<i32> l230A5C08
l230A5C08:
	a0_1018 = a2_1495 + 2<i32>
	s11_1041 = s11_1041 + 8<i32>
	a2_1495 = a1_681
l230A5C38:
	branch a5_1033 == 0<32> l230A5DB8
l230A5DB8:
	a0_1018 = 1<i32>
	a2_1495 = 0<i32>
	s11_1041 = fp + -228<i32>
l230A5C14:
	t3_666 = t3_2715 + -16<i32>
	branch t3_666 <= 16<i32> l230A5C80
l230A5C3C:
	word32 a3_2708
	branch __sprint_r.part.0(ra, a0, a1, fp + -240<i32>, s2_189, a1, 0<i32>, fp + -164<i32>, 0<i32>, s10_272 + 1<i32>, out a3_2708) != 0<32> l230A5390
l230A5C58:
	a2_1495 = a1_681
	t3_666 = t3_2715 + -16<i32>
	s11_1041 = fp + -228<i32>
	a0_1018 = a1_681 + 1<i32>
	t3_2715 = t3_666
	branch t3_2715 > -32<i32> l230A5C1C
l230A5C80:
	t6_669 = s11_1041 + 8<i32>
l230A5C84:
	Mem755[s11_1041:word32] = 0x230CB830<p32>
	Mem756[s11_1041 + 4<i32>:word32] = t3_666
	a5_1033 = a5_1033 + t3_666
	branch a0_1018 <= 7<i32> l230A6020
l230A6020:
	t4_1035 = a0_1018 + 1<i32>
	a1_1034 = t6_669 + 8<i32>
	a2_1495 = a0_1018
	s11_1041 = t6_669
l230A5CA0:
	branch a5_1033 == 0<32> l230A626C
l230A626C:
	a1_1034 = fp + -220<i32>
	t4_1035 = 1<i32>
	a2_1495 = 0<i32>
	s11_1041 = fp + -228<i32>
l230A5CA4:
	word32 a3_2709
	a0_1018 = __sprint_r.part.0(ra, a0, a1, fp + -240<i32>, s2_189, a1, 0<i32>, fp + -164<i32>, 0<i32>, s10_272 + 1<i32>, out a3_2709)
	branch a0_1018 != 0<32> l230A5390
l230A5CB8:
	a2_1495 = a0_1018
	s7 = 0xFFFFFFFF<32>
	a1_1034 = fp + -220<i32>
	t4_1035 = a0_1018 + 1<i32>
	s11_1041 = fp + -228<i32>
	branch true l230A5598
l230A5590:
	s7 = 0xFFFFFFFF<32>
	branch false l230A5CD4
l230A5CD4:
	word32 a2_1043
	s7 = 0xFFFFFFFF<32>
	a0_1018 = 16<i32>
	branch true l230A625C
l230A625C:
	a2_1043 = a1_1034
l230A5CDC:
l230A5D04:
	Mem885[s11_1041:word32] = 0x230CB830<p32>
	Mem887[s11_1041 + 4<i32>:word32] = 16<i32>
	a5_1033 = a5_1033 + 16<i32>
	word32 a1_882 = a2_1495 + 1<i32>
	branch a1_882 <= 7<i32> l230A5CF0
l230A5CF0:
	t4_1035 = a2_1495 + 2<i32>
	s11_1041 = s11_1041 + 8<i32>
	a2_1495 = a1_882
l230A5D20:
	branch a5_1033 == 0<32> l230A5D90
l230A5D90:
	t4_1035 = 1<i32>
	a2_1495 = 0<i32>
	s11_1041 = fp + -228<i32>
l230A5CFC:
	s7 = s7 + -16<i32>
	branch s7 <= 16<i32> l230A5D60
l230A5D24:
	word32 a3_2712
	a0_1018 = __sprint_r.part.0(ra, a0, a1, fp + -240<i32>, s2_189, a1, s7, fp + -164<i32>, 0<i32>, s10_272 + 1<i32>, out a3_2712)
	branch a0_1018 != 0<32> l230A5390
l230A5D3C:
	a2_1495 = a1_882
	s7 = s7 + -16<i32>
	s11_1041 = fp + -228<i32>
	t4_1035 = a1_882 + 1<i32>
	branch s7 > 16<i32> l230A5D04
l230A5D60:
	a2_1043 = s11_1041 + 8<i32>
l230A5D64:
	Mem953[s11_1041:word32] = 0x230CB830<p32>
	Mem954[s11_1041 + 4<i32>:word32] = s7
	a5_1033 = a5_1033 + s7
	branch t4_1035 > 7<i32> l230A5F44
l230A5F44:
	branch a5_1033 == 0<32> l230A60A4
l230A60A4:
	a5_1048 = 1<i32>
	dwLocE8_1526 = 1<i32>
	dwLocEC_1601 = 1<i32>
	a1_1034 = fp + -220<i32>
l230A5F48:
	word32 a3_2713
	a0_1018 = __sprint_r.part.0(ra, a0, a1, fp + -240<i32>, s2_189, a1, s7, fp + -164<i32>, 0<i32>, s10_272 + 1<i32>, out a3_2713)
	branch a0_1018 != 0<32> l230A5390
l230A5F5C:
	a1_1034 = fp + -220<i32>
	t4_1035 = t4_1035 + 1<i32>
	s11_1041 = fp + -228<i32>
l230A5D80:
	t4_1035 = t4_1035 + 1<i32>
	a1_1034 = a2_1043 + 8<i32>
	s11_1041 = a2_1043
l230A5598:
	Mem1051[s11_1041:word32] = fp + -164<i32>
	Mem1052[s11_1041 + 4<i32>:word32] = 1<i32>
	a5_1048 = a5_1033 + 1<i32>
	dwLocE8_1526 = a5_1048
	dwLocEC_1601 = t4_1035
	branch t4_1035 <= 7<i32> l230A55D4
l230A55B4:
	branch a5_1048 == 0<32> l230A5740
l230A5740:
	dwLocEC_1601 = 0<32>
	branch true l230A5F2C
l230A574C:
	s6 = 0<i32> - s2_189
	branch s6 <= 0<32> l230A5F2C
l230A5754:
	a1_1034 = fp + -228<i32>
l230A55B8:
	word32 a3_2707
	a0_1018 = __sprint_r.part.0(ra, a0, a1, fp + -240<i32>, s2_189, a1, s7, fp + -164<i32>, 0<i32>, s10_272 + 1<i32>, out a3_2707)
	branch a0_1018 != 0<32> l230A5390
l230A55CC:
	a1_1034 = fp + -228<i32>
l230A55D4:
	branch true l230A55E4
l230A55DC:
	s6 = 0<i32> - s2_189
	branch s6 > 0<32> l230A5758
l230A5758:
	word32 a2_1112
	word32 a3_1110 = dwLocEC_1601
	branch s6 <= 16<i32> l230A6344
l230A6344:
	a2_1112 = dwLocEC_1601 + 1<i32>
l230A5764:
	s8 = 16<i32>
	s7 = 7<i32>
l230A578C:
	Mem1125[a1_1034:word32] = 0x230CB820<p32>
	Mem1127[a1_1034 + 4<i32>:word32] = 16<i32>
	a5_1048 = a5_1048 + 16<i32>
	word32 a4_1122 = a3_1110 + 1<i32>
	branch a4_1122 <= 7<i32> l230A5778
l230A5778:
	a2_1112 = a3_1110 + 2<i32>
	a1_1034 = a1_1034 + 8<i32>
	a3_1110 = a4_1122
l230A57A8:
	branch a5_1048 == 0<32> l230A5BD4
l230A5BD4:
	a2_1112 = 1<i32>
	a3_1110 = 0<i32>
	a1_1034 = fp + -228<i32>
l230A5784:
	s6 = s6 + -16<i32>
	branch s6 <= 16<i32> l230A57E0
l230A57AC:
	word32 a3_2710
	a0_1018 = __sprint_r.part.0(ra, a0, a1, fp + -240<i32>, s2_189, a1, 7<i32>, 16<i32>, 0<i32>, s10_272 + 1<i32>, out a3_2710)
	branch a0_1018 != 0<32> l230A5390
l230A57C4:
	a3_1110 = a4_1122
	s6 = s6 + -16<i32>
	a1_1034 = fp + -228<i32>
	a2_1112 = a4_1122 + 1<i32>
	branch s6 > 16<i32> l230A578C
l230A57E0:
	Mem1186[a1_1034:word32] = 0x230CB820<p32>
	Mem1187[a1_1034 + 4<i32>:word32] = s6
	a5_1048 = a5_1048 + s6
	dwLocE8_1526 = a5_1048
	branch a2_1112 <= 7<i32> l230A55E4
l230A57FC:
	branch a5_1048 == 0<32> l230A5F2C
l230A5F2C:
	branch s2_189 <= 0<i32> l230A5F34
l230A5F30:
	s0_1204 = s2_189
l230A5F34:
	dwLoc012C_1532 = dwLoc012C_1532 + s0_1204
l230A5800:
	word32 a3_2711
	a0_1018 = __sprint_r.part.0(ra, a0, a1, fp + -240<i32>, s2_189, a1, s7, s8, 0<i32>, s10_272 + 1<i32>, out a3_2711)
	branch a0_1018 != 0<32> l230A5390
l230A5814:
l230A55E4:
	branch s2_189 <= 0<i32> l230A55EC
l230A55E8:
	s0_1204 = s2_189
l230A55EC:
	dwLoc012C_1532 = dwLoc012C_1532 + s0_1204
	branch a5_1048 != 0<32> l230A5DA0
l230A5DA0:
	word32 a3_2714
	a0_1018 = __sprint_r.part.0(ra, a0, a1, fp + -240<i32>, s2_189, a1, s7, s8, 0<i32>, s10_272 + 1<i32>, out a3_2714)
	branch a0_1018 == 0<32> l230A55FC
l230A5DB4:
l230A5390:
	branch (CONVERT(Mem1303[a1 + 12<i32>:uint16], uint16, word32) & 64<i32>) == 0<32> l230A53A0
l230A539C:
l230A6368:
	dwLoc012C_1532 = -1<i32>
l230A53A0:
	s0Out = s0
	a0Out = dwLoc012C_1532
	s2Out = s2
	return ra
l230A55FC:
l230A52C8:
	word32 a5_1379 = Mem276[(a2_274 + -32<i32> << 2<u32>) + 0x230CB6B4<p32>:int32] + 0x230CB6B4<p32>
	word32 ra_1420
	word32 s0_1421
	word32 s2_1423
	word32 a0_1431
	word32 t0_1436
	word32 t6_1437
	word32 t4_1438
	word32 t3_1439
	word32 t5_1440
	word32 t2_1441
	word32 t1_1442
	word32 a6_1443
	word32 a7_1444
	call a5_1379 (retsize: 0;)
		uses: a0:a0_1391,a1:90<i32>,a2:a2_274,a3:a3_1389,a5:a5_1379,a6:a6_1443,a7:a7_1444,ra:ra,s0:0<i32>,s1:fp + -228<i32>,s10:s10_272 + 1<i32>,s11:s11_428,s2:42<i32>,s3:a1,s4:a0,s5:0x230CB6B4<p32>,s6:s6_1380,s7:-1<i32>,s8:s8_242,s9:0<i32>,t0:t0_1436,t1:t1_1442,t2:t2_1441,t3:t3_1439,t4:t4_1438,t5:t5_1440,t6:t6_1437
		defs: a0:a0_1431,a6:a6_1443,a7:a7_1444,ra:ra_1420,s0:s0_1421,s2:s2_1423,t0:t0_1436,t1:t1_1442,t2:t2_1441,t3:t3_1439,t4:t4_1438,t5:t5_1440,t6:t6_1437
	s0Out = s0_1421
	a0Out = a0_1431
	s2Out = s2_1423
	return ra_1420
_vfiprintf_r_exit:


void vfiprintf(word32 ra, word32 a0, word32 a1, word32 s2, word32 s6, word32 s7, word32 s8, word32 s9)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31] s2:[0..31] s6:[0..31] s7:[0..31] s8:[0..31] s9:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t0 t1 t2 t3 t4 t5 t6
// Preserved: sp
vfiprintf_entry:
l230A63B0:
	word32 a0_12 = Mem0[0x4200ECFC<p32>:int32]
l230A63C8_thunk__vfiprintf_r:
	word32 s0_47
	word32 a0_48
	word32 s2_49
	_vfiprintf_r(ra, a0_12, a0, a1, s2, s6, s7, s8, s9, out s0_47, out a0_48, out s2_49)
	return
vfiprintf_exit:


word32 __sbprintf(word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _vfiprintf_r
// MayUse:  a1:[0..31]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 t0 t1
// Preserved: ra s0 s1 s2 sp
__sbprintf_entry:
l230A63CC:
	word16 wLoc046C_80 = SLICE(CONVERT(Mem0[a1 + 12<i32>:uint16], uint16, word32) & -3<i32>, word16, 0)
	word32 s0_44
	word32 s2_46
	word32 a0_48
	word32 ra_47 = _vfiprintf_r(ra, a0, fp + -1144<i32>, a2, a0, s6, s7, s8, s9, out s0_44, out a0_48, out s2_46)
	word32 s1_49 = a0_48
	branch a0_48 >= 0<32> l230A6474
l230A6474:
	word32 a3_130
	branch _fflush_r(ra_47, s2_46, fp - 1144<i32>, s2_46, out a3_130) == 0<32> l230A6440
l230A6484:
	s1_49 = -1<i32>
l230A6440:
	branch (CONVERT(wLoc046C_80, word16, word32) & 64<i32>) == 0<32> l230A6458
l230A644C:
	Mem68[s0_44 + 12<i32>:word16] = SLICE(CONVERT(Mem35[s0_44 + 12<i32>:uint16], uint16, word32) | 64<i32>, word16, 0)
l230A6458:
	return s1_49
__sbprintf_exit:


word32 __swsetup_r(word32 ra, word32 a0, word32 a1, ptr32 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _vfiprintf_r
//      __sfvwrite_r
//      __swbuf
// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31]
// LiveOut: a0 a3
// Trashed: a0 a1 a3 a4 a5
// Preserved: a2 a6 a7 ra s0 s1 sp t0 t1 t2 t3 t4 t5 t6
__swsetup_r_entry:
l230A648C:
	word32 a3_105
	word32 a5_104
	word32 a4_28
	word32 a0_116
	word32 a5_6 = Mem0[0x4200ECFC<p32>:int32]
	branch a5_6 == 0<32> l230A64BC
l230A64B4:
	branch Mem13[a5_6 + 56<i32>:int32] == 0<32> l230A6544
l230A6544:
	word32 a3_322
	__sinit(ra, a5_6, out a3_322)
	a4_28 = CONVERT(Mem13[a1 + 12<i32>:int16], int16, int32)
	a5_104 = CONVERT(SLICE(a4_28, word16, 0), word16, word32)
	branch (a5_104 & 8<i32>) != 0<32> l230A64D0
l230A64BC:
	a4_28 = CONVERT(Mem13[a1 + 12<i32>:int16], int16, int32)
	a5_104 = CONVERT(SLICE(a4_28, word16, 0), word16, word32)
	branch (a5_104 & 8<i32>) == 0<32> l230A6560
l230A6560:
	a3_105 = a5_104 & 16<i32>
	branch a3_105 == 0<32> l230A65E0
l230A65E0:
	Mem43[a0:word32] = 9<i32>
	Mem47[a1 + 12<i32>:word16] = SLICE(a4_28 | 64<i32>, word16, 0)
	a0_116 = -1<i32>
l230A6568:
	branch (a5_104 & 4<i32>) != 0<32> l230A65AC
l230A65AC:
	word32 a1_51 = Mem13[a1 + 48<i32>:int32]
	branch a1_51 == 0<32> l230A65CC
l230A65B4:
	branch a1_51 == a1 + 64<i32> l230A65C8
l230A65BC:
	_free_r(a0, a1_51)
	a4_28 = CONVERT(Mem13[a1 + 12<i32>:int16], int16, int32)
l230A65C8:
	Mem56[a1 + 48<i32>:word32] = 0<32>
l230A65CC:
	a3_105 = Mem58[a1 + 16<i32>:int32]
	Mem63[a1 + 4<i32>:word32] = 0<32>
	Mem64[a1:word32] = a3_105
	a4_28 = a4_28 & -37<i32>
l230A6570:
	a3_105 = Mem13[a1 + 16<i32>:int32]
l230A6574:
	word32 a5_67 = a4_28 | 8<i32>
	Mem69[a1 + 12<i32>:word16] = SLICE(a5_67, word16, 0)
	a5_104 = CONVERT(SLICE(a5_67, word16, 0), word16, word32)
	branch a3_105 != 0<32> l230A64D8
l230A64D0:
	a3_105 = Mem13[a1 + 16<i32>:int32]
	branch a3_105 == 0<32> l230A6588
l230A6588:
	branch (a5_104 & 640<i32>) == 512<i32> l230A64D8
l230A6594:
	__smakebuf_r(a0, a1)
	a5_104 = CONVERT(Mem103[a1 + 12<i32>:uint16], uint16, word32)
	a3_105 = Mem103[a1 + 16<i32>:int32]
l230A64D8:
	branch (a5_104 & 1<i32>) == 0<32> l230A650C
l230A650C:
	word32 a4_109 = 0<i32>
	branch (a5_104 & 2<i32>) != 0<32> l230A651C
l230A6518:
	a4_109 = Mem111[a1 + 20<i32>:int32]
l230A651C:
	Mem115[a1 + 8<i32>:word32] = a4_109
	a0_116 = 0<i32>
	branch a3_105 != 0<32> l230A64F8
l230A64E0:
	word32 a5_120 = Mem111[a1 + 20<i32>:int32]
	Mem121[a1 + 8<i32>:word32] = 0<32>
	Mem124[a1 + 24<i32>:word32] = 0<32> - a5_120
	a0_116 = 0<i32>
	branch a3_105 == 0<32> l230A6528
l230A6528:
	a0_116 = 0<i32>
	word32 a5_127 = CONVERT(Mem126[a1 + 12<i32>:int16], int16, int32)
	branch (a5_127 & 128<i32>) == 0<32> l230A64F8
l230A6534:
	Mem130[a1 + 12<i32>:word16] = SLICE(a5_127 | 64<i32>, word16, 0)
	a0_116 = -1<i32>
l230A64F8:
	a3Out = a3_105
	return a0_116
__swsetup_r_exit:


word32 __sflush_r(word32 ra, word32 a0, word32 a1, word32 s2, ptr32 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _fflush_r
//      fclose
// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31] s2:[0..31]
// LiveOut: a0 a3
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: ra s0 s1 s2 s3 sp
__sflush_r_entry:
l230A65F8:
	word32 a0_105
	word32 a0_159
	word32 a5_171
	word32 a5_5 = CONVERT(Mem0[a1 + 12<i32>:int16], int16, int32)
	word32 a4_10 = CONVERT(SLICE(a5_5, word16, 0), word16, word32)
	word32 a3_167 = a4_10 & 8<i32>
	word32 s0_116 = a1
	word32 s3_129 = a0
	branch (a4_10 & 8<i32>) != 0<32> l230A673C
l230A673C:
	word32 s2_23 = Mem18[a1 + 16<i32>:int32]
	branch s2_23 == 0<32> l230A671C
l230A6744:
	word32 s1_24 = Mem18[a1:int32]
	Mem26[a1:word32] = s2_23
	word32 s1_27 = s1_24 - s2_23
	word32 a5_28 = 0<i32>
	branch (a4_10 & 3<i32>) != 0<32> l230A6760
l230A675C:
	a5_28 = Mem26[a1 + 20<i32>:int32]
l230A6760:
	Mem32[a1 + 8<i32>:word32] = a5_28
	branch s1_27 > 0<32> l230A6774
l230A6774:
	word32 s1_53
	word32 s2_54
	word32 a0_56
	call Mem32[s0_116 + 36<i32>:int32] (retsize: 0;)
		uses: a0:s3_42,a1:Mem32[s0_34 + 28<i32>:int32],a2:s2_40,a3:s1_38,ra:ra_44,s0:s0_34,s1:s1_38,s2:s2_40,s3:s3_42
		defs: a0:a0_56,a3:a3_55,ra:ra_52,s0:s0_49,s1:s1_53,s2:s2_54,s3:s3_51
	s1_27 = s1_53 - a0_56
	branch a0_56 > 0<32> l230A676C
l230A676C:
	s2_23 = s2_54 + a0_56
	branch s1_27 <= 0<32> l230A671C
l230A6794:
	a5_171 = CONVERT(Mem32[s0_116 + 12<i32>:uint16], uint16, word32)
	a0_159 = -1<i32>
l230A6768:
l230A662C:
	a3_167 = Mem18[a1 + 4<i32>:int32]
	Mem66[a1 + 12<i32>:word16] = SLICE(a5_5 | 0x800<32>, word16, 0)
	branch a3_167 <= 0<32> l230A67C0
l230A67C0:
	branch Mem66[a1 + 60<i32>:int32] > 0<32> l230A6644
l230A67C8:
l230A6644:
	word32 a4_112 = Mem66[a1 + 40<i32>:int32]
	branch a4_112 == 0<32> l230A671C
l230A664C:
	word32 s1_141 = Mem66[a0:int32]
	Mem77[a0:word32] = 0<32>
	word32 a5_72 = (a5_5 | 0x800<32>) << 0x10<u32>
	word32 a5_111 = a5_72 >>u 0x10<u32>
	word32 a1_113 = Mem77[a1 + 28<i32>:int32]
	branch a5_72 >>u 0x10<u32> << 0x13<u32> < 0<32> l230A67CC
l230A67CC:
	a0_105 = Mem77[a1 + 80<i32>:int32]
l230A6668:
	call a4_112 (retsize: 0;)
		uses: a0:a0,a1:a1_78,a2:0<i32>,a3:1<i32>,ra:ra,s0:a1,s1:s1_75,s2:s2,s3:a0
		defs: a0:a0_96,a3:a3_95,ra:ra_92,s0:s0_89,s1:s1_93,s2:s2_94,s3:s3_91
	branch a0_105 == -1<i32> l230A680C
l230A680C:
	word32 a5_99 = Mem77[s3_129:int32]
	branch a5_99 == 0<32> l230A6680
l230A6814:
	branch a5_99 == 29<i32> l230A6848
l230A681C:
	branch a5_99 == 22<i32> l230A6848
l230A6848:
	Mem104[s3_129:word32] = s1_141
	a0_105 = 0<i32>
l230A6824:
	Mem108[s0_116 + 12<i32>:word16] = SLICE(CONVERT(Mem77[s0_116 + 12<i32>:uint16], uint16, word32) | 64<i32>, word16, 0)
l230A6680:
	a5_111 = CONVERT(Mem77[s0_116 + 12<i32>:uint16], uint16, word32)
	a4_112 = Mem77[s0_116 + 40<i32>:int32]
	a1_113 = Mem77[s0_116 + 28<i32>:int32]
l230A668C:
	branch (a5_111 & 4<i32>) == 0<32> l230A66AC
l230A6694:
	a0_105 = a0_105 - Mem77[s0_116 + 4<i32>:int32]
	branch Mem77[s0_116 + 48<i32>:int32] == 0<32> l230A66AC
l230A66A4:
	a0_105 = a0_105 - Mem77[s0_116 + 60<i32>:int32]
l230A66AC:
	word32 a5_169
	word32 s3_154
	word32 s1_156
	call a4_112 (retsize: 0;)
		uses: a0:s3_129,a1:a1_135,a2:a0_125,a3:0<i32>,ra:ra_138,s0:s0_116,s1:s1_141,s2:s2_144,s3:s3_129
		defs: a0:a0_159,s0:s0_152,s1:s1_156,s3:s3_154
	branch a0_159 != -1<i32> l230A67D4
l230A67D4:
	a3_167 = Mem77[s0_116 + 16<i32>:int32]
	a5_169 = CONVERT(SLICE(CONVERT(Mem77[s0_116 + 12<i32>:uint16], uint16, word32) & 0xFFFFF7FF<32>, word16, 0), word16, int32)
l230A66C4:
	word32 a4_170 = Mem77[s3_154:int32]
	a5_171 = CONVERT(Mem77[s0_116 + 12<i32>:int16], int16, int32)
	branch a4_170 == 0<32> l230A6834
l230A6834:
	a3_167 = Mem77[s0_116 + 16<i32>:int32]
	a5_169 = a5_171 & 0xFFFFF7FF<32>
l230A67F0:
	Mem178[s0_116 + 12<i32>:word16] = SLICE(a5_169, word16, 0)
	Mem179[s0_116 + 4<i32>:word32] = 0<32>
	Mem181[s0_116:word32] = a3_167
	branch a5_169 << 0x13<u32> >= 0<32> l230A66FC
l230A6804:
	Mem184[s0_116 + 80<i32>:word32] = a0_159
l230A66D0:
	branch a4_170 == 29<i32> l230A66E0
l230A66D8:
	a3_167 = 22<i32>
	branch a4_170 != 22<i32> l230A679C
l230A679C:
	Mem190[s0_116 + 12<i32>:word16] = SLICE(a5_171 | 64<i32>, word16, 0)
	a3Out = a3_167
	return a0_159
l230A66E0:
	a3_167 = Mem77[s0_116 + 16<i32>:int32]
	Mem205[s0_116 + 12<i32>:word16] = SLICE(a5_171 & 0xFFFFF7FF<32>, word16, 0)
	Mem206[s0_116 + 4<i32>:word32] = 0<32>
	Mem207[s0_116:word32] = a3_167
l230A66FC:
	word32 a1_210 = Mem209[s0_116 + 48<i32>:int32]
	Mem217[s3_154:word32] = s1_156
	branch a1_210 == 0<32> l230A671C
l230A6708:
	branch a1_210 == s0_116 + 64<i32> l230A6718
l230A6710:
	_free_r(s3_154, a1_210)
l230A6718:
	Mem221[s0_116 + 48<i32>:word32] = 0<32>
l230A671C:
	a0_105 = 0<i32>
l230A6720:
	a3Out = a3_167
	return a0_105
__sflush_r_exit:


word32 _fflush_r(word32 ra, word32 a0, word32 a1, word32 s2, ptr32 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __sbprintf
//      fflush
//      __sfvwrite_r
//      __swbuf
// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31] s2:[0..31]
// LiveOut: a0 a3
// Trashed: a0 a1 a2 a3 a4 a5 t0 t1
// Preserved: ra s0 sp
_fflush_r_entry:
l230A6854:
	branch a0 == 0<32> l230A6870
l230A6868:
	branch Mem7[a0 + 56<i32>:int32] == 0<32> l230A688C
l230A688C:
	__sinit(ra, a0, out a3)
	branch CONVERT(Mem12[a1 + 12<i32>:int16], int16, int32) == 0<32> l230A6878
l230A6870:
	branch CONVERT(Mem7[a1 + 12<i32>:int16], int16, int32) != 0<32> l230A68A0
l230A68A0:
l230A68B0_thunk___sflush_r:
	word32 a3_40
	word32 a0_39 = __sflush_r(ra, a0, a1, s2, out a3_40)
	a3Out = a3_40
	return a0_39
l230A6878:
	a3Out = a3
	return 0<i32>
_fflush_r_exit:


void fflush(word32 ra, word32 a0, word32 s2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] ra:[0..31] s2:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 t0 t1
// Preserved: sp
fflush_entry:
l230A68B4:
	branch a0 == 0<32> l230A68CC
l230A68CC:
	word32 a0_8 = Mem0[0x4200EEA0<p32>:int32]
l230A68E0_thunk__fwalk_reent:
	_fwalk_reent(ra, a0_8, 0x230A6854<p32>)
	return
l230A68BC:
	word32 a0_17 = Mem0[0x4200ECFC<p32>:int32]
l230A68C8_thunk__fflush_r:
	word32 a3_41
	_fflush_r(ra, a0_17, a0, s2, out a3_41)
	return
fflush_exit:


void __fp_lock()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a0
// Preserved: sp
__fp_lock_entry:
l230A68E4:
	return
__fp_lock_exit:


void _cleanup_r(word32 ra, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a5
// Preserved: sp
_cleanup_r_entry:
l230A68EC:
l230A68F4_thunk__fwalk_reent:
	_fwalk_reent(ra, a0, 0x230A8FD4<p32>)
	return
_cleanup_r_exit:


word32 __sinit.part.0(word32 ra, word32 a0, ptr32 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __sfp
//      __sinit
// MayUse:  a0:[0..31] ra:[0..31]
// LiveOut: a0 a3
// Trashed: a0 a1 a2 a3 a4 a5 t0 t1
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 sp
__sinit.part.0_entry:
l230A68F8:
	word32 s0_21 = Mem19[a0 + 4<i32>:int32]
	Mem24[a0 + 60<i32>:word32] = 0x230A68EC<p32>
	Mem27[a0 + 740<i32>:word32] = 3<i32>
	Mem28[a0 + 744<i32>:word32] = a0 + 748<i32>
	Mem29[a0 + 736<i32>:word32] = 0<32>
	Mem32[s0_21 + 12<i32>:word32] = 4<i32>
	Mem35[s0_21 + 100<i32>:word32] = 0<32>
	Mem36[s0_21:word32] = 0<32>
	Mem37[s0_21 + 4<i32>:word32] = 0<32>
	Mem38[s0_21 + 8<i32>:word32] = 0<32>
	Mem39[s0_21 + 16<i32>:word32] = 0<32>
	Mem40[s0_21 + 20<i32>:word32] = 0<32>
	Mem41[s0_21 + 24<i32>:word32] = 0<32>
	word32 t1_141
	word32 a0_142
	word32 a1_143
	word32 a2_144
	word32 a3_145
	word32 a4_146
	word32 a5_147
	word32 ra_49 = memset(ra, s0_21 + 92<i32>, 0<i32>, 8<i32>, out t1_141, out a0_142, out a1_143, out a2_144, out a3_145, out a4_146, out a5_147)
	word32 s1_52 = Mem41[a0 + 8<i32>:int32]
	Mem62[s0_21 + 32<i32>:word32] = 0x230A8AC4<p32>
	Mem63[s0_21 + 36<i32>:word32] = 0x230A8B28<p32>
	Mem64[s0_21 + 40<i32>:word32] = 0x230A8BB0<p32>
	Mem65[s0_21 + 44<i32>:word32] = 0x230A8C18<p32>
	Mem66[s0_21 + 28<i32>:word32] = s0_21
	Mem68[s1_52 + 12<i32>:word32] = 0x10009<32>
	Mem71[s1_52 + 100<i32>:word32] = 0<32>
	Mem72[s1_52:word32] = 0<32>
	Mem73[s1_52 + 4<i32>:word32] = 0<32>
	Mem74[s1_52 + 8<i32>:word32] = 0<32>
	Mem75[s1_52 + 16<i32>:word32] = 0<32>
	Mem76[s1_52 + 20<i32>:word32] = 0<32>
	Mem77[s1_52 + 24<i32>:word32] = 0<32>
	word32 t1_148
	word32 a0_149
	word32 a1_150
	word32 a2_151
	word32 a3_152
	word32 a4_153
	word32 a5_154
	word32 ra_85 = memset(ra_49, s1_52 + 92<i32>, 0<i32>, 8<i32>, out t1_148, out a0_149, out a1_150, out a2_151, out a3_152, out a4_153, out a5_154)
	word32 s0_88 = Mem77[a0 + 12<i32>:int32]
	Mem90[s1_52 + 32<i32>:word32] = 0x230A8AC4<p32>
	Mem91[s1_52 + 36<i32>:word32] = 0x230A8B28<p32>
	Mem92[s1_52 + 40<i32>:word32] = 0x230A8BB0<p32>
	Mem93[s1_52 + 44<i32>:word32] = 0x230A8C18<p32>
	Mem94[s1_52 + 28<i32>:word32] = s1_52
	Mem96[s0_88 + 12<i32>:word32] = 0x20012<32>
	Mem97[s0_88 + 100<i32>:word32] = 0<32>
	Mem98[s0_88:word32] = 0<32>
	Mem99[s0_88 + 4<i32>:word32] = 0<32>
	Mem100[s0_88 + 8<i32>:word32] = 0<32>
	Mem101[s0_88 + 16<i32>:word32] = 0<32>
	Mem102[s0_88 + 20<i32>:word32] = 0<32>
	Mem103[s0_88 + 24<i32>:word32] = 0<32>
	word32 a0_107
	word32 a3_110
	word32 t1_155
	word32 a1_156
	word32 a2_157
	word32 a4_158
	word32 a5_159
	memset(ra_85, s0_88 + 92<i32>, 0<i32>, 8<i32>, out t1_155, out a0_107, out a1_156, out a2_157, out a3_110, out a4_158, out a5_159)
	Mem117[s0_88 + 32<i32>:word32] = 0x230A8AC4<p32>
	Mem118[s0_88 + 36<i32>:word32] = 0x230A8B28<p32>
	Mem119[s0_88 + 40<i32>:word32] = 0x230A8BB0<p32>
	Mem120[s0_88 + 44<i32>:word32] = 0x230A8C18<p32>
	Mem121[s0_88 + 28<i32>:word32] = s0_88
	Mem124[a0 + 56<i32>:word32] = 1<i32>
	a3Out = a3_110
	return a0_107
__sinit.part.0_exit:


void __fp_unlock()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a0
// Preserved: sp
__fp_unlock_entry:
l230A6A7C:
	return
__fp_unlock_exit:


void __sfmoreglue(word32 ra, word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __sfp
// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a1 a2 a3 a4 a5 a6 a7 t0 t1
// Preserved: ra s0 s1 s2 sp
__sfmoreglue_entry:
l230A6A84:
	word32 a3_71
	word32 a0_19 = _malloc_r(a0, a1 + 219<i32>, out a3_71)
	branch a0_19 == 0<32> l230A6AD4
l230A6AB8:
	Mem30[a0_19:word32] = 0<32>
	Mem31[a0_19 + 4<i32>:word32] = a1
	Mem32[a0_19 + 8<i32>:word32] = a0_19 + 12<i32>
	word32 t1_72
	word32 a0_73
	word32 a1_74
	word32 a2_75
	word32 a3_76
	word32 a4_77
	word32 a5_78
	memset(ra, a0_19 + 12<i32>, 0<i32>, a1 + 207<i32>, out t1_72, out a0_73, out a1_74, out a2_75, out a3_76, out a4_77, out a5_78)
l230A6AD4:
	return
__sfmoreglue_exit:


void __sfp(word32 ra, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1
// Preserved: ra s0 s1 s2 s3 sp
__sfp_entry:
l230A6AF0:
	word32 s2_8 = Mem7[0x4200EEA0<p32>:int32]
	branch Mem12[s2_8 + 56<i32>:int32] == 0<32> l230A6BC8
l230A6BC8:
	word32 a3_177
	__sinit.part.0(ra, s2_8, out a3_177)
l230A6B20:
	word32 s2_109 = s2_8 + 736<i32>
l230A6B28:
	word32 a5_34 = Mem33[s2_109 + 4<i32>:int32]
	word32 s0_35 = Mem33[s2_109 + 8<i32>:int32]
	word32 a5_36 = a5_34 + -1<i32>
	branch a5_34 >= 0xFFFFFFFF<32> l230A6B48
l230A6B48:
	branch CONVERT(Mem33[s0_35 + 12<i32>:int16], int16, int32) != 0<32> l230A6B3C
l230A6B3C:
	a5_36 = a5_36 + -1<i32>
	s0_35 = s0_35 + 104<i32>
	branch a5_36 == -1<i32> l230A6BB8
l230A6B50:
	Mem46[s0_35 + 100<i32>:word32] = 0<32>
	Mem47[s0_35:word32] = 0<32>
	Mem48[s0_35 + 4<i32>:word32] = 0<32>
	Mem49[s0_35 + 8<i32>:word32] = 0<32>
	Mem50[s0_35 + 12<i32>:word32] = 0xFFFF0001<32>
	Mem51[s0_35 + 16<i32>:word32] = 0<32>
	Mem52[s0_35 + 20<i32>:word32] = 0<32>
	Mem53[s0_35 + 24<i32>:word32] = 0<32>
	word32 a4_183
	word32 a0_179
	word32 a5_184
	word32 t1_178
	word32 a1_180
	word32 a2_181
	word32 a3_182
	memset(ra, s0_35 + 92<i32>, 0<i32>, 8<i32>, out t1_178, out a0_179, out a1_180, out a2_181, out a3_182, out a4_183, out a5_184)
	Mem68[s0_35 + 48<i32>:word32] = 0<32>
	Mem69[s0_35 + 52<i32>:word32] = 0<32>
	Mem70[s0_35 + 68<i32>:word32] = 0<32>
	Mem71[s0_35 + 72<i32>:word32] = 0<32>
l230A6B38:
l230A6BB8:
	word32 s0_108 = Mem33[s2_109:int32]
	branch s0_108 == 0<32> l230A6BD4
l230A6BD4:
	__sfmoreglue(ra, a0, 4<i32>)
	Mem91[s2_109:word32] = a0
	s0_108 = a0
	branch a0 != 0<32> l230A6BC0
l230A6BEC:
	Mem94[a0:word32] = 12<i32>
l230A6B98:
	return
__sfp_exit:
l230A6BC0:
	s2_109 = s0_108


void _cleanup(word32 ra)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a5
// Preserved: sp
_cleanup_entry:
l230A6BF8:
	word32 a0_6 = Mem0[0x4200EEA0<p32>:int32]
l230A6C0C_thunk__fwalk_reent:
	_fwalk_reent(ra, a0_6, 0x230A8FD4<p32>)
	return
_cleanup_exit:


word32 __sinit(word32 ra, word32 a0, ptr32 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _vfiprintf_r
//      __swsetup_r
//      _fflush_r
//      fputwc
//      __swbuf
//      fclose
// MayUse:  a0:[0..31] ra:[0..31]
// LiveOut: a0 a3
// Trashed: a0 a1 a2 a3 a4 a5 t0 t1
// Preserved: sp
__sinit_entry:
l230A6C10:
	branch Mem0[a0 + 56<i32>:int32] == 0<32> l230A6C1C
l230A6C1C:
l230A6C1C_thunk___sinit.part.0:
	word32 a3_10
	word32 a0_7 = __sinit.part.0(ra, a0, out a3_10)
	a3Out = a3_10
	return a0_7
l230A6C18:
	a3Out = a3
	return a0
__sinit_exit:


void __sfp_lock_acquire()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fclose
// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
__sfp_lock_acquire_entry:
l230A6C20:
	return
__sfp_lock_acquire_exit:


void __sfp_lock_release()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fclose
// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
__sfp_lock_release_entry:
l230A6C24:
	return
__sfp_lock_release_exit:


void __sinit_lock_acquire()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
__sinit_lock_acquire_entry:
l230A6C28:
	return
__sinit_lock_acquire_exit:


void __sinit_lock_release()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
__sinit_lock_release_entry:
l230A6C2C:
	return
__sinit_lock_release_exit:


void __fp_lock_all(word32 ra)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a5
// Preserved: sp
__fp_lock_all_entry:
l230A6C30:
	word32 a0_6 = Mem0[0x4200ECFC<p32>:int32]
l230A6C44_thunk__fwalk:
	_fwalk(ra, a0_6, 0x230A68E4<p32>)
	return
__fp_lock_all_exit:


void __fp_unlock_all(word32 ra)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a5
// Preserved: sp
__fp_unlock_all_entry:
l230A6C48:
	word32 a0_6 = Mem0[0x4200ECFC<p32>:int32]
l230A6C5C_thunk__fwalk:
	_fwalk(ra, a0_6, 0x230A6A7C<p32>)
	return
__fp_unlock_all_exit:


word32 __fputwc(word32 a0, word32 a1, word32 a2, ptr32 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _fputwc_r
//      fputwc
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a0 a3
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 sp
__fputwc_entry:
l230A6C60:
	word32 a3_218
	word32 s2_103
	word32 a4_116
	__locale_mb_cur_max()
	branch a0 != 1<i32> l230A6CB8
l230A6C9C:
	branch a1 >u -255<i32> l230A6CB8
l230A6CB8:
	_wcrtomb_r(ra, a0, a1, a3)
	a3_218 = a2 + 92<i32>
	s2_103 = a0
	branch a0 == -1<i32> l230A6D7C
l230A6D7C:
	Mem42[a2 + 12<i32>:word16] = SLICE(CONVERT(Mem19[a2 + 12<i32>:uint16], uint16, word32) | 64<i32>, word16, 0)
l230A6CD8:
	branch a0 == 0<32> l230A6D74
l230A6CDC:
	a4_116 = CONVERT(bLoc24, byte, word32)
l230A6CA8:
	a4_116 = a1 & 255<i32>
	s2_103 = 1<i32>
l230A6CE0:
	word32 s1_47 = 0<i32>
l230A6D14:
	word32 a5_52 = Mem51[a2 + 8<i32>:int32]
	Mem54[a2 + 8<i32>:word32] = a5_52 + -1<i32>
	branch a5_52 >= 0xFFFFFFFF<32> l230A6CF0
l230A6D24:
	a3_218 = Mem54[a2 + 24<i32>:int32]
	branch a5_52 + -1<i32> < a3_218 l230A6D3C
l230A6D38:
	branch a4_116 != 10<i32> l230A6CF0
l230A6CF0:
	word32 a5_64 = Mem54[a2:int32]
	Mem66[a2:word32] = a5_64 + 1<i32>
	Mem68[a5_64:byte] = SLICE(a4_116, byte, 0)
	a3_218 = a5_64 + 1<i32>
l230A6D3C:
	__swbuf_r(ra, a0, a1, a2)
	branch a0 != -1<i32> l230A6D00
l230A6D00:
	s1_47 = s1_47 + 1<i32>
	word32 a5_82 = fp + -36<i32> + s1_47
	branch s1_47 >=u s2_103 l230A6D74
l230A6D74:
	s2_103 = a1
l230A6D10:
	a4_116 = CONVERT(Mem93[a5_82:byte], byte, word32)
l230A6D44:
	s2_103 = -1<i32>
l230A6D48:
	a3Out = a3_218
	return s2_103
__fputwc_exit:


word32 _fputwc_r(word32 a0, word32 a1, word32 a2, ptr32 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __sprint_r.part.0
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a0 a3
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: sp
_fputwc_r_entry:
l230A6D8C:
	word32 a5_5 = CONVERT(Mem0[a2 + 12<i32>:int16], int16, int32)
	branch a5_5 << 0x12<u32> < 0<32> l230A6DB4
l230A6D98:
	word32 a4_7 = Mem0[a2 + 100<i32>:int32]
	Mem12[a2 + 12<i32>:word16] = SLICE(a5_5 | 0x2000<32>, word16, 0)
	Mem13[a2 + 100<i32>:word32] = a4_7 | 0x2000<32>
l230A6DB4:
l230A6DB4_thunk___fputwc:
	word32 a3_21
	word32 a0_23 = __fputwc(a0, a1, a2, out a3_21)
	a3Out = a3_21
	return a0_23
_fputwc_r_exit:


void fputwc(word32 ra, word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: ra s0 s1 sp t0 t1
fputwc_entry:
l230A6DB8:
	word32 s0_8 = Mem7[0x4200ECFC<p32>:int32]
	branch s0_8 == 0<32> l230A6DE8
l230A6DE0:
	branch Mem12[s0_8 + 56<i32>:int32] == 0<32> l230A6E2C
l230A6E2C:
	word32 a3_76
	__sinit(ra, s0_8, out a3_76)
l230A6DE8:
	word32 a5_31 = CONVERT(Mem30[a1 + 12<i32>:int16], int16, int32)
	branch a5_31 << 0x12<u32> < 0<32> l230A6E10
l230A6DF4:
	word32 a4_33 = Mem30[a1 + 100<i32>:int32]
	Mem38[a1 + 12<i32>:word16] = SLICE(a5_31 | 0x2000<32>, word16, 0)
	Mem39[a1 + 100<i32>:word32] = a4_33 | 0x2000<32>
l230A6E10:
l230A6E28_thunk___fputwc:
	word32 a3_77
	__fputwc(s0_8, a0, a1, out a3_77)
	return
fputwc_exit:


void _malloc_trim_r(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _free_r
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: ra s0 s1 s2 s3 sp
_malloc_trim_r_entry:
l230A6E40:
	__malloc_lock()
	word32 s1_23 = Mem15[Mem15[0x4200E6EC<p32>:int32] + 4<i32>:int32]
	word32 s0_28 = (0xFEF<32> - a1 + (s1_23 & -4<i32>) >>u 0xC<u32>) + -1<i32>
	branch s0_28 << 0xC<u32> < 0x1000<32> l230A6EB0
l230A6E98:
	word32 a3_143
	branch _sbrk_r(a0, 0<i32>, out a3_143) == Mem15[0x4200E6EC<p32>:int32] + (s1_23 & -4<i32>) l230A6ED8
l230A6ED8:
	word32 a3_144
	branch _sbrk_r(a0, 0<32> - (s0_28 << 0xC<u32>), out a3_144) == -1<i32> l230A6F3C
l230A6F3C:
	word32 a3_145
	word32 a0_57 = _sbrk_r(a0, 0<i32>, out a3_145)
	word32 a4_66 = Mem15[0x4200E6EC<p32>:int32]
	word32 a5_68 = a0_57 - a4_66
	branch a5_68 <= 15<i32> l230A6EB0
l230A6F58:
	word32 a3_71 = Mem15[0x4200ED00<p32>:int32]
	Mem73[a4_66 + 4<i32>:word32] = a5_68 | 1<i32>
	Mem76[0x4201F924<p32>:word32] = a0_57 - a3_71
l230A6EEC:
	word32 s0_83 = Mem15[0x4201E924<p32>:int32] - (s0_28 << 0xC<u32>)
	Mem85[Mem15[0x4200E6EC<p32>:int32] + 4<i32>:word32] = (s1_23 & -4<i32>) - (s0_28 << 0xC<u32>) | 1<i32>
	Mem87[0x4201F924<p32>:word32] = s0_83
	__malloc_unlock()
	return
l230A6EB0:
	__malloc_unlock()
	return
_malloc_trim_r_exit:


void _free_r(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __swsetup_r
//      __sflush_r
//      __sfvwrite_r
//      _malloc_r
//      _realloc_r
//      fclose
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed:
// Preserved: a0 a1 a2 a3 a4 a5 a6 a7 ra s0 s1 sp t1
_free_r_entry:
l230A6F7C:
	branch a1 == 0<32> l230A70B8
l230A70B8:
	return
l230A6F80:
	__malloc_lock()
	word32 a1_14 = Mem13[a1 + -4<i32>:int32]
	word32 a2_19 = a1 + -8<i32> + (a1_14 & -2<i32>)
	word32 a4_15 = a1 + -8<i32>
	word32 a5_117 = a1_14 & -2<i32>
	word32 a3_20 = Mem13[a2_19 + 4<i32>:int32]
	branch Mem13[0x4200E6EC<p32>:int32] == a2_19 l230A7168
l230A7168:
	word32 a5_24 = (a1_14 & -2<i32>) + (a3_20 & -4<i32>)
	branch (a1_14 & 1<i32>) != 0<32> l230A7190
l230A7174:
	word32 a1_25 = Mem13[a1 + -8<i32>:int32]
	a4_15 = a1 + -8<i32> - a1_25
	word32 a3_27 = Mem13[a4_15 + 12<i32>:int32]
	word32 a2_28 = Mem13[a4_15 + 8<i32>:int32]
	Mem30[a2_28 + 12<i32>:word32] = a3_27
	Mem31[a3_27 + 8<i32>:word32] = a2_28
	a5_24 = a5_24 + a1_25
l230A7190:
	word32 a3_37 = Mem36[0x4200ED04<p32>:int32]
	Mem39[a4_15 + 4<i32>:word32] = a5_24 | 1<i32>
	Mem41[0x4200E6EC<p32>:word32] = a4_15
	branch a5_24 <u a3_37 l230A7060
l230A71B0:
	_malloc_trim_r(a0, Mem41[0x4200F730<p32>:int32])
l230A6FC4:
	Mem56[a2_19 + 4<i32>:word32] = a3_20 & -4<i32>
	word32 a6_58 = a2_19 + (a3_20 & -4<i32>)
	branch (a1_14 & 1<i32>) != 0<32> l230A7078
l230A7078:
	branch (Mem56[a6_58 + 4<i32>:int32] & 1<i32>) != 0<32> l230A70BC
l230A70BC:
	Mem62[a1 + 4092<i32>:word32] = a1_14 & -2<i32> | 1<i32>
	Mem63[a2_19:word32] = a1_14 & -2<i32>
	branch (a1_14 & -2<i32>) <=u 511<i32> l230A701C
l230A7084:
	a5_117 = (a1_14 & -2<i32>) + (a3_20 & -4<i32>)
l230A6FD4:
	word32 t1_68 = Mem56[a1 + -8<i32>:int32]
	a4_15 = a1 + -8<i32> - t1_68
	word32 a1_69 = Mem56[a6_58 + 4<i32>:int32]
	word32 a6_73 = Mem56[a4_15 + 8<i32>:int32]
	a5_117 = (a1_14 & -2<i32>) + t1_68
	branch a6_73 == 0x4200E6EC<p32> l230A713C
l230A713C:
	branch (a1_69 & 1<i32>) != 0<32> l230A728C
l230A728C:
	Mem77[a4_15 + 4<i32>:word32] = a5_117 | 1<i32>
	Mem78[a2_19:word32] = a5_117
l230A7140:
	word32 a1_79 = Mem56[a2_19 + 8<i32>:int32]
	word32 a2_80 = Mem56[a2_19 + 12<i32>:int32]
	Mem83[a1_79 + 12<i32>:word32] = a2_80
	Mem84[a2_80 + 8<i32>:word32] = a1_79
	word32 a5_81 = (a3_20 & -4<i32>) + a5_117
	Mem85[a4_15 + 4<i32>:word32] = a5_81 | 1<i32>
	Mem87[a4_15 + a5_81:word32] = a5_81
l230A6FF8:
	word32 t1_88 = Mem56[a4_15 + 12<i32>:int32]
	Mem89[a6_73 + 12<i32>:word32] = t1_88
	Mem90[t1_88 + 8<i32>:word32] = a6_73
	branch (a1_69 & 1<i32>) == 0<32> l230A71EC
l230A71EC:
	a5_117 = a5_117 + (a3_20 & -4<i32>)
l230A7090:
	word32 a3_94 = Mem93[a2_19 + 8<i32>:int32]
	word32 a6_96 = a5_117 | 1<i32>
	word32 a1_98 = a4_15 + a5_117
	branch a3_94 == 0x4200E6EC<p32> l230A7204
l230A7204:
	Mem101[0x4200E6F8<p32>:word32] = a4_15
	Mem103[0x4200E6F4<p32>:word32] = a4_15
	Mem104[a4_15 + 12<i32>:word32] = 0x4200E6EC<p32>
	Mem105[a4_15 + 8<i32>:word32] = 0x4200E6EC<p32>
	Mem106[a4_15 + 4<i32>:word32] = a6_96
	Mem107[a1_98:word32] = a5_117
l230A70A0:
	word32 a2_108 = Mem93[a2_19 + 12<i32>:int32]
	Mem109[a3_94 + 12<i32>:word32] = a2_108
	Mem110[a2_108 + 8<i32>:word32] = a3_94
	Mem111[a4_15 + 4<i32>:word32] = a6_96
	Mem112[a1_98:word32] = a5_117
l230A7008:
	Mem114[a4_15 + 4<i32>:word32] = a5_117 | 1<i32>
	Mem115[a2_19:word32] = a5_117
l230A7014:
	branch a5_117 >u 511<i32> l230A70D0
l230A70D0:
	word32 a2_123
	word32 a1_124
	word32 a3_119 = a5_117 >>u 9<u32>
	branch a3_119 >u 4<i32> l230A71C8
l230A71C8:
	branch a3_119 <=u 20<i32> l230A71F4
l230A71F4:
	a2_123 = a3_119 + 91<i32>
	a1_124 = a3_119 + 92<i32> << 3<u32>
l230A71D0:
	branch a3_119 >u 84<i32> l230A7248
l230A7248:
	branch a3_119 >u 340<i32> l230A7264
l230A7264:
	branch a3_119 >u 1364<i32> l230A7280
l230A7280:
	a1_124 = 1016<i32>
	a2_123 = 126<i32>
l230A726C:
	word32 a3_130 = a5_117 >>u 0x12<u32>
	a2_123 = a3_130 + 124<i32>
	a1_124 = a3_130 + 125<i32> << 3<u32>
l230A7250:
	word32 a3_134 = a5_117 >>u 0xF<u32>
	a2_123 = a3_134 + 119<i32>
	a1_124 = a3_134 + 120<i32> << 3<u32>
l230A71D8:
	word32 a3_138 = a5_117 >>u 0xC<u32>
	a2_123 = a3_138 + 110<i32>
	a1_124 = a3_138 + 111<i32> << 3<u32>
l230A70DC:
	word32 a3_142 = a5_117 >>u 6<u32>
	a2_123 = a3_142 + 56<i32>
	a1_124 = a3_142 + 57<i32> << 3<u32>
l230A70EC:
	word32 a1_151 = 0x4200E6E4<p32> + a1_124
	word32 a3_155 = Mem153[a1_151:int32]
	word32 a1_156 = a1_151 + -8<i32>
	branch a1_151 + -8<i32> == a3_155 l230A7228
l230A7228:
	Mem164[0x4200E6E8<p32>:word32] = 1<i32> << (a2_123 >> 2<u32>) | Mem153[0x4200E6E8<p32>:int32]
l230A70FC:
	branch a5_117 >=u (Mem153[a3_155 + 4<i32>:int32] & -4<i32>) l230A7110
l230A7108:
	a3_155 = Mem153[a3_155 + 8<i32>:int32]
	branch a1_151 + -8<i32> != a3_155 l230A70FC
l230A7110:
	a1_156 = Mem153[a3_155 + 12<i32>:int32]
l230A7114:
	Mem182[a4_15 + 12<i32>:word32] = a1_156
	Mem184[a4_15 + 8<i32>:word32] = a3_155
	Mem193[a1_156 + 8<i32>:word32] = a4_15
	Mem204[a3_155 + 12<i32>:word32] = a4_15
l230A7138_thunk___malloc_unlock:
	__malloc_unlock()
	return
l230A701C:
	word32 a5_207 = a5_117 >>u 3<u32>
	word32 a0_213 = 0x4200E6E4<p32> + (a5_207 + 1<i32> << 3<u32>)
	word32 a2_214 = Mem211[a0_213:int32]
	word32 a5_218 = 1<i32> << (a5_207 >> 2<u32>) | Mem211[0x4200E6E8<p32>:int32]
	Mem221[a4_15 + 12<i32>:word32] = a0_213 + -8<i32>
	Mem222[a4_15 + 8<i32>:word32] = a2_214
	Mem224[0x4200E6E8<p32>:word32] = a5_218
	Mem225[a0_213:word32] = a4_15
	Mem226[a2_214 + 12<i32>:word32] = a4_15
l230A7060:
l230A7074_thunk___malloc_unlock:
	__malloc_unlock()
	return
_free_r_exit:


word32 __sfvwrite_r(word32 ra, word32 a0, word32 a1, word32 a2, word32 s2, word32 s3, word32 s7, word32 s8, word32 s9, word32 s10, ptr32 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __sprint_r.part.0
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] ra:[0..31] s10:[0..31] s2:[0..31] s3:[0..31] s7:[0..31] s8:[0..31] s9:[0..31]
// LiveOut: a0 a3
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t3 t4 t5 t6
// Preserved: ra s0 s1 s10 s2 s3 s4 s5 s6 s7 s8 s9 sp
__sfvwrite_r_entry:
l230A729C:
	branch Mem0[a2 + 8<i32>:int32] == 0<32> l230A75E4
l230A75E4:
	a3Out = a3
	return 0<i32>
l230A72A4:
	word32 s1_203
	word32 a0_50
	word32 a3_163
	word32 a5_461
	word32 a5_310 = CONVERT(Mem0[a1 + 12<i32>:uint16], uint16, word32)
	word32 s0_115 = a1
	word32 s5_146 = a0
	word32 s4_196 = a2
	branch (a5_310 & 8<i32>) == 0<32> l230A7380
l230A72F0:
	branch Mem33[a1 + 16<i32>:int32] == 0<32> l230A7380
l230A7380:
	branch __swsetup_r(ra, a0, a1, out a3_163) != 0<32> l230A7744
l230A7744:
	a0_50 = -1<i32>
l230A7390:
	a5_310 = CONVERT(Mem33[a1 + 12<i32>:uint16], uint16, word32)
	s1_203 = Mem33[a2:int32]
	branch (a5_310 & 2<i32>) != 0<32> l230A7304
l230A72F8:
	s1_203 = Mem33[a2:int32]
	branch (a5_310 & 2<i32>) == 0<32> l230A73A0
l230A73A0:
	branch (a5_310 & 1<i32>) != 0<32> l230A75EC
l230A75EC:
	word32 s6_100 = 0<i32>
	word32 a0_272 = 0<i32>
	word32 s7_132 = 0<i32>
	word32 s3_103 = 0<i32>
l230A75FC:
	word32 a5_102
	word32 a0_81
	branch s3_103 == 0<32> l230A74D0
l230A74D0:
	s3_103 = Mem122[s1_203 + 4<i32>:int32]
	s7_132 = Mem122[s1_203:int32]
	s1_203 = s1_203 + 8<i32>
	branch s3_103 == 0<32> l230A74D0
l230A74E0:
	word32 a5_1514
	word32 a3_1513
	a0_81 = memchr(s7_132, 10<i32>, s3_103, out a3_1513, out a5_1514)
	branch a0_81 == 0<32> l230A7618
l230A7600:
	branch a0_272 != 0<32> l230A74FC
l230A7604:
	word32 a5_1498
	word32 a3_1497
	a0_81 = memchr(s7_132, 10<i32>, s3_103, out a3_1497, out a5_1498)
	branch a0_81 != 0<32> l230A74F4
l230A74F4:
	s6_100 = a0_81 + 1<i32> - s7_132
l230A74FC:
	a5_102 = s6_100
l230A7618:
	a5_102 = s3_103 + 1<i32>
	s6_100 = a5_102
l230A7500:
	word32 s8_109 = s3_103
	branch a5_102 >=u s3_103 l230A750C
l230A7508:
	s8_109 = a5_102
l230A750C:
	word32 a0_125 = Mem122[s0_115:int32]
	word32 a3_127 = Mem122[s0_115 + 20<i32>:int32]
	branch Mem122[s0_115 + 16<i32>:int32] >=u a0_125 l230A7528
l230A751C:
	s2 = a3_127 + Mem122[s0_115 + 8<i32>:int32]
	branch s2 < s8_109 l230A75A8
l230A75A8:
	word32 a4_1507
	word32 a5_1508
	word32 a3_1506
	memmove(a0_125, s7_132, s2, out a3_1506, out a4_1507, out a5_1508)
	Mem152[s0_115:word32] = Mem122[s0_115:int32] + s2
	branch _fflush_r(ra, s5_146, s0_115, s2, out a3_163) == 0<32> l230A7548
l230A7528:
	branch s8_109 < a3_127 l230A76D8
l230A76D8:
	word32 a5_1510
	word32 a4_1509
	memmove(a0_125, s7_132, s8_109, out a3_163, out a4_1509, out a5_1510)
	word32 s8_184 = Mem122[s0_115:int32] + s8_109
	Mem185[s0_115 + 8<i32>:word32] = Mem122[s0_115 + 8<i32>:int32] - s8_109
	Mem186[s0_115:word32] = s8_184
	s2 = s8_109
l230A752C:
	word32 a4_261
	word32 a0_262
	word32 a6_264
	word32 a7_265
	word32 t1_266
	word32 t0_267
	word32 t5_829
	word32 t6_830
	word32 t3_827
	word32 t4_828
	call Mem122[s0_115 + 36<i32>:int32] (retsize: 0;)
		uses: a0:s5_146,a1:Mem122[s0_115 + 28<i32>:int32],a2:s7_132,a3:a3_263,a4:a4_261,a6:a6_264,a7:a7_265,ra:ra_156,s0:s0_115,s1:s1_203,s10:s10_233,s2:s2_208,s3:s3_106,s4:s4_196,s5:s5_146,s6:s6_220,s7:s7_132,s8:s8_130,s9:s9_225,t0:t0_267,t1:t1_266,t3:t3_827,t4:t4_828,t5:t5_829,t6:t6_830
		defs: a0:a0_262,a3:a3_263,a4:a4_261,a6:a6_264,a7:a7_265,ra:ra_252,s0:s0_249,s1:s1_253,s10:s10_260,s3:s3_255,s4:s4_250,s5:s5_251,s6:s6_256,s7:s7_257,s9:s9_259,t0:t0_267,t1:t1_266,t3:t3_827,t4:t4_828,t5:t5_829,t6:t6_830
	s2 = a0_262
	branch a0_262 <= 0<32> l230A75D0
l230A7548:
	s6_100 = s6_100 - s2
	a0_272 = 1<i32>
	branch s6_100 == 0<32> l230A76C4
l230A76C4:
	a0_272 = _fflush_r(ra, s5_146, s0_115, s2, out a3_163)
	branch a0_272 == 0<32> l230A7554
l230A76D4:
l230A7554:
	s2 = Mem289[s4_196 + 8<i32>:int32] - s2
	Mem299[s4_196 + 8<i32>:word32] = s2
	s7_132 = s7_132 + s2
	s3_103 = s3_103 - s2
	branch s2 != 0<32> l230A75FC
l230A73A8:
	word32 s9_302 = Mem33[a1 + 8<i32>:int32]
	word32 a0_303 = Mem33[a1:int32]
	word32 s8_305 = 0x7FFFFFFE<32>
	word32 s6_306 = 0<i32>
	word32 s2_307 = 0<i32>
	word32 s7_308 = 0x7FFFFFFF<32>
l230A73C4:
	branch s2_307 == 0<32> l230A74C0
l230A73C8:
	word32 s3_320
	branch (a5_310 & 512<i32>) == 0<32> l230A7624
l230A7624:
	branch Mem313[s0_115 + 16<i32>:int32] <u a0_303 l230A766C
l230A762C:
	word32 a5_316 = Mem313[s0_115 + 20<i32>:int32]
	branch s2_307 <u a5_316 l230A766C
l230A766C:
	s3_320 = s9_302
	branch s2_307 >=u s9_302 l230A7678
l230A7674:
	s3_320 = s2_307
l230A7678:
	word32 a5_1512
	word32 a4_1511
	memmove(a0_303, s6_306, s3_320, out a3_163, out a4_1511, out a5_1512)
	word32 a5_341 = Mem313[s0_115 + 8<i32>:int32] - s3_320
	word32 a4_342 = Mem313[s0_115:int32] + s3_320
	Mem343[s0_115 + 8<i32>:word32] = a5_341
	Mem344[s0_115:word32] = a4_342
	branch a5_341 != 0<32> l230A7664
l230A76A0:
	branch _fflush_r(ra, s5_146, s0_115, s2_307, out a3_163) != 0<32> l230A75D0
l230A76B0:
	s2_307 = s2_307 - s3_320
l230A7634:
	word32 a3_363 = s2_307
	branch s8_305 >=u s2_307 l230A7640
l230A763C:
	a3_363 = s7_308
l230A7640:
	word32 a4_410
	word32 a0_411
	word32 a6_413
	word32 a7_414
	word32 t1_415
	word32 t0_416
	word32 t6_834
	word32 t4_832
	word32 t5_833
	word32 t3_831
	call Mem313[s0_115 + 36<i32>:int32] (retsize: 0;)
		uses: a0:s5_348,a1:Mem313[s0_312 + 28<i32>:int32],a2:s6_327,a3:(a3_367 ^ a5_316) + a5_316,a4:a4_410,a6:a6_413,a7:a7_414,ra:ra_352,s0:s0_312,s1:s1_383,s10:s10_391,s2:s2_317,s3:s3_386,s4:s4_380,s5:s5_348,s6:s6_327,s7:s7_365,s8:s8_364,s9:s9_319,t0:t0_416,t1:t1_415,t3:t3_831,t4:t4_832,t5:t5_833,t6:t6_834
		defs: a0:a0_411,a3:a3_412,a4:a4_410,a6:a6_413,a7:a7_414,ra:ra_401,s0:s0_398,s1:s1_402,s10:s10_409,s2:s2_403,s4:s4_399,s5:s5_400,s6:s6_405,s7:s7_406,s8:s8_407,t0:t0_416,t1:t1_415,t3:t3_831,t4:t4_832,t5:t5_833,t6:t6_834
	branch a0_411 <= 0<32> l230A75D0
l230A7660:
	s3_320 = a0_411
l230A7664:
	s2_307 = s2_307 - s3_320
l230A73D0:
	s10 = s9_302
	branch s2_307 <u s9_302 l230A76B8
l230A76B8:
	s9_302 = s2_307
	s10 = s2_307
l230A73D8:
	branch (a5_310 & 1152<i32>) == 0<32> l230A7470
l230A73E0:
	word32 a3_425 = Mem313[s0_115 + 20<i32>:int32]
	word32 a1_426 = Mem313[s0_115 + 16<i32>:int32]
	word32 s3_432 = (a3_425 * 3<32> >>u 0x1F<u32>) + a3_425 * 3<32>
	word32 s9_431 = a0_303 - a1_426
	word32 s3_433 = s3_432 >> 1<u32>
	word32 a4_434 = s2_307 + 1<i32> + s9_431
	word32 a2_435 = s3_432 >> 1<u32>
	branch s3_432 >> 1<u32> >=u a4_434 l230A7418
l230A7410:
	s3_433 = a4_434
	a2_435 = a4_434
l230A7418:
	word32 s10_453
	branch (a5_310 & 1024<i32>) == 0<32> l230A7704
l230A7704:
	word32 a0_444 = _realloc_r(s5_146, a1_426, a2_435, out a3_163)
	s10_453 = a0_444
	branch a0_444 != 0<32> l230A7450
l230A7714:
	_free_r(s5_146, Mem313[s0_115 + 16<i32>:int32])
	word32 a5_458 = CONVERT(Mem313[s0_115 + 12<i32>:int16], int16, int32)
	Mem460[s5_146:word32] = 12<i32>
	a5_461 = a5_458 & -129<i32>
l230A7420:
	word32 a0_464 = _malloc_r(s5_146, a2_435, out a3_163)
	s10_453 = a0_464
	branch a0_464 == 0<32> l230A7734
l230A7734:
	Mem475[s5_146:word32] = 12<i32>
	a5_461 = CONVERT(Mem475[s0_115 + 12<i32>:int16], int16, int32)
l230A7434:
	word32 a4_1502
	word32 a7_1505
	word32 a1_1499
	word32 a2_1500
	word32 a6_1504
	word32 a5_1503
	word32 a3_1501
	memcpy(a0_464, Mem313[s0_115 + 16<i32>:int32], s9_431, out a1_1499, out a2_1500, out a3_1501, out a4_1502, out a5_1503, out a6_1504, out a7_1505)
	Mem496[s0_115 + 12<i32>:word16] = SLICE(CONVERT(Mem313[s0_115 + 12<i32>:uint16], uint16, word32) & -1153<i32> | 128<i32>, word16, 0)
l230A7450:
	Mem504[s0_115 + 16<i32>:word32] = s10_453
	a0_303 = s10_453 + s9_431
	Mem505[s0_115:word32] = a0_303
	Mem506[s0_115 + 20<i32>:word32] = s3_433
	Mem510[s0_115 + 8<i32>:word32] = s3_433 - s9_431
	s9_302 = s2_307
	s10 = s2_307
l230A7470:
	word32 a5_1496
	word32 a4_1495
	memmove(a0_303, s6_306, s10, out a3_163, out a4_1495, out a5_1496)
	word32 a2_531 = Mem524[s0_115:int32] + s10
	Mem532[s0_115 + 8<i32>:word32] = Mem524[s0_115 + 8<i32>:int32] - s9_302
	Mem533[s0_115:word32] = a2_531
	s3_320 = s2_307
	s2_307 = 0<i32>
l230A749C:
	s3 = Mem542[s4_196 + 8<i32>:int32] - s3_320
	Mem550[s4_196 + 8<i32>:word32] = s3
	s6_306 = s6_306 + s3_320
	branch s3 == 0<32> l230A756C
l230A74B0:
	s9_302 = Mem550[s0_115 + 8<i32>:int32]
	a0_303 = Mem550[s0_115:int32]
	a5_310 = CONVERT(Mem550[s0_115 + 12<i32>:uint16], uint16, word32)
	branch s2_307 != 0<32> l230A73C8
l230A74C0:
	s6_306 = Mem566[s1_203:int32]
	s2_307 = Mem566[s1_203 + 4<i32>:int32]
	s1_203 = s1_203 + 8<i32>
l230A7304:
	word32 a4_573 = Mem33[a1 + 36<i32>:int32]
	word32 a5_574 = Mem33[a1 + 28<i32>:int32]
	word32 s3_576 = 0<i32>
	word32 s2_577 = 0<i32>
	word32 s6_578 = 0x7FFFFC00<32>
l230A731C:
	word32 a2_580 = s3_576
	word32 a1_582 = a5_574
	word32 a0_584 = s5_146
	branch s2_577 == 0<32> l230A7370
l230A732C:
	branch s6_578 >=u s2_577 l230A7338
l230A7334:
l230A7338:
	word32 s2_631
	word32 s3_632
	word32 a4_638
	word32 a0_639
	word32 a6_641
	word32 a7_642
	word32 t1_643
	word32 t0_644
	word32 t3_645
	word32 t4_646
	word32 t5_647
	word32 t6_648
	call a4_573 (retsize: 0;)
		uses: a0:a0_619,a1:a1_595,a2:a2_593,a3:a3_640,a4:a4_638,a6:a6_641,a7:a7_642,ra:ra_603,s0:s0_597,s1:s1_605,s10:s10_617,s2:s2_586,s3:s3_608,s4:s4_599,s5:s5_601,s6:s6_588,s7:s7_611,s8:s8_613,s9:s9_615,t0:t0_644,t1:t1_643,t3:t3_645,t4:t4_646,t5:t5_647,t6:t6_648
		defs: a0:a0_639,a3:a3_640,a4:a4_638,a6:a6_641,a7:a7_642,ra:ra_629,s0:s0_626,s1:s1_630,s10:s10_637,s2:s2_631,s3:s3_632,s4:s4_627,s5:s5_628,s6:s6_633,s7:s7_634,s8:s8_635,s9:s9_636,t0:t0_644,t1:t1_643,t3:t3_645,t4:t4_646,t5:t5_647,t6:t6_648
	branch a0_639 <= 0<32> l230A75D0
l230A75D0:
	a5_461 = CONVERT(Mem650[s0_115 + 12<i32>:int16], int16, int32)
l230A75D4:
	Mem657[s0_115 + 12<i32>:word16] = SLICE(a5_461 | 64<i32>, word16, 0)
	a0_50 = -1<i32>
l230A7340:
	word32 a0_662 = Mem652[s4_196 + 8<i32>:int32] - a0_639
	Mem663[s4_196 + 8<i32>:word32] = a0_662
	s3_576 = s3_632 + a0_639
	s2_577 = s2_631 - a0_639
	branch a0_662 == 0<32> l230A756C
l230A756C:
	a0_50 = 0<i32>
l230A7570:
	a3Out = a3_163
	return a0_50
__sfvwrite_r_exit:
l230A7358:
	a5_574 = Mem663[s0_115 + 28<i32>:int32]
	a4_573 = Mem663[s0_115 + 36<i32>:int32]
	a2_580 = s3_576
	a1_582 = a5_574
	a0_584 = s5_146
	branch s2_577 != 0<32> l230A732C
l230A7370:
	s3_576 = Mem701[s1_203:int32]
	s2_577 = Mem701[s1_203 + 4<i32>:int32]
	s1_203 = s1_203 + 8<i32>


void _fwalk(word32 ra, word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __fp_lock_all
//      __fp_unlock_all
// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a5
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 sp
_fwalk_entry:
l230A774C:
	word32 s5_21 = a0 + 736<i32>
	branch a0 == 0x2E0<32> l230A77F4
l230A77F4:
l230A7778:
	word32 s6_24 = a1
	word32 s4_25 = 0<i32>
	word32 s3_26 = 1<i32>
	word32 s2_27 = -1<i32>
l230A7788:
	word32 s1_30 = Mem19[s5_21 + 4<i32>:int32]
	word32 s0_31 = Mem19[s5_21 + 8<i32>:int32]
	word32 s1_32 = s1_30 + -1<i32>
	branch s1_30 < 0xFFFFFFFF<32> l230A77C0
l230A7798:
	s1_32 = s1_32 + -1<i32>
	branch s3_26 >=u CONVERT(Mem19[s0_31 + 12<i32>:uint16], uint16, word32) l230A77B8
l230A77A4:
	branch CONVERT(Mem19[s0_31 + 14<i32>:int16], int16, int32) == s2_27 l230A77B8
l230A77B0:
	word32 s4_55
	word32 a0_57
	word32 a5_59
	call s6_24 (retsize: 0;)
		uses: a0:s0_33,a1:a1_46,a5:a5_59,ra:ra_44,s0:s0_33,s1:s1_37,s2:s2_41,s3:s3_38,s4:s4_45,s5:s5_43,s6:s6_42
		defs: a0:a0_57,a1:a1_58,a5:a5_59,ra:ra_50,s0:s0_51,s1:s1_52,s2:s2_53,s3:s3_54,s4:s4_55,s5:s5_49,s6:s6_56
	s4_25 = s4_55 | a0_57
l230A77B8:
	s0_31 = s0_31 + 104<i32>
	branch s1_32 != s2_27 l230A7798
l230A77C0:
	s5_21 = Mem19[s5_21:int32]
	branch s5_21 != 0<32> l230A7788
l230A77C8:
	return
_fwalk_exit:


void _fwalk_reent(word32 ra, word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fflush
//      _cleanup_r
//      _cleanup
// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a5
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 sp
_fwalk_reent_entry:
l230A77FC:
	word32 s5_23 = a0 + 736<i32>
	branch a0 == 0x2E0<32> l230A78B4
l230A78B4:
l230A782C:
	word32 s7_103 = a1
	word32 s6_100 = a0
	word32 s4_28 = 0<i32>
	word32 s3_29 = 1<i32>
	word32 s2_101 = -1<i32>
l230A7840:
	word32 s1_33 = Mem21[s5_23 + 4<i32>:int32]
	word32 s0_34 = Mem21[s5_23 + 8<i32>:int32]
	word32 s1_35 = s1_33 + -1<i32>
	branch s1_33 < 0xFFFFFFFF<32> l230A787C
l230A7850:
	s1_35 = s1_35 + -1<i32>
	branch s3_29 >=u CONVERT(Mem21[s0_34 + 12<i32>:uint16], uint16, word32) l230A7874
l230A785C:
	branch CONVERT(Mem21[s0_34 + 14<i32>:int16], int16, int32) == s2_101 l230A7874
l230A786C:
	word32 s4_59
	word32 a0_62
	word32 a5_64
	call s7_103 (retsize: 0;)
		uses: a0:s6_44,a1:s0_36,a5:a5_64,ra:ra_49,s0:s0_36,s1:s1_40,s2:s2_46,s3:s3_41,s4:s4_50,s5:s5_48,s6:s6_44,s7:s7_47
		defs: a0:a0_62,a5:a5_64,ra:ra_54,s0:s0_55,s1:s1_56,s2:s2_57,s3:s3_58,s4:s4_59,s5:s5_53,s6:s6_60,s7:s7_61
	s4_28 = s4_59 | a0_62
l230A7874:
	s0_34 = s0_34 + 104<i32>
	branch s1_35 != s2_101 l230A7850
l230A787C:
	s5_23 = Mem21[s5_23:int32]
	branch s5_23 != 0<32> l230A7840
l230A7884:
	return
_fwalk_reent_exit:


void __localeconv_l()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a0
// Preserved: sp
__localeconv_l_entry:
l230A78BC:
	return
__localeconv_l_exit:


void _localeconv_r()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a0
// Preserved: sp
_localeconv_r_entry:
l230A78C4:
	return
_localeconv_r_exit:


void localeconv()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a0
// Preserved: sp
localeconv_entry:
l230A78D0:
	return
localeconv_exit:


void _setlocale_r(word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      setlocale
// MayUse:  a2:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 t0 t1 t2
// Preserved: ra s0 sp
_setlocale_r_entry:
l230A78DC:
	branch a2 == 0<32> l230A791C
l230A791C:
	return
l230A78E0:
	word32 a1_100
	word32 a2_101
	word32 a3_102
	word32 a4_103
	word32 a5_104
	branch strcmp(a2, 0x230CB868<p32>, out a1_100, out a2_101, out a3_102, out a4_103, out a5_104) != 0<32> l230A7928
l230A7928:
	word32 a1_105
	word32 a2_106
	word32 a3_107
	word32 a4_108
	word32 a5_109
	branch strcmp(a2, 0x230C9578<p32>, out a1_105, out a2_106, out a3_107, out a4_108, out a5_109) == 0<32> l230A7904
l230A793C:
	word32 a1_110
	word32 a2_111
	word32 a3_112
	word32 a4_113
	word32 a5_114
	branch strcmp(a2, 0x230C6DBC<p32>, out a1_110, out a2_111, out a3_112, out a4_113, out a5_114) == 0<32> l230A7904
l230A7950:
l230A7904:
l230A790C:
	return
_setlocale_r_exit:


void __locale_mb_cur_max()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fputwc
// MayUse: 
// LiveOut:
// Trashed: a0
// Preserved: sp
__locale_mb_cur_max_entry:
l230A7958:
	return
__locale_mb_cur_max_exit:


void setlocale(word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 t0 t1 t2
// Preserved: sp
setlocale_entry:
l230A7964:
l230A7978_thunk__setlocale_r:
	_setlocale_r(a1)
	return
setlocale_exit:


word32 __swhatbuf_r(word32 a0, word32 a1, word32 a2, word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __smakebuf_r
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: ra s0 s1 s2 sp
__swhatbuf_r_entry:
l230A797C:
	word32 a1_8 = CONVERT(Mem5[a1 + 14<i32>:int16], int16, int32)
	branch a1_8 < 0<32> l230A79F4
l230A79A4:
	branch _fstat_r(a0, a1_8, fp + -104<i32>) < 0<32> l230A79F4
l230A79F4:
	word32 a5_38 = CONVERT(Mem14[a1 + 12<i32>:uint16], uint16, word32)
	Mem40[a3:word32] = 0<32>
	branch (a5_38 & 128<i32>) == 0<32> l230A7A28
l230A7A28:
	Mem47[a2:word32] = 1024<i32>
	return 0<i32>
l230A7A04:
	Mem55[a2:word32] = 64<i32>
	return 0<i32>
l230A79B0:
	Mem68[a3:word32] = CONVERT((dwLoc64 & 0xF000<32>) <u 0xFFFFDFFF<32>, bool, word32)
	Mem70[a2:word32] = 1024<i32>
	return 0x800<32>
__swhatbuf_r_exit:


void __smakebuf_r(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __swsetup_r
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: ra s0 s1 s2 sp
__smakebuf_r_entry:
l230A7A4C:
	branch (CONVERT(Mem0[a1 + 12<i32>:uint16], uint16, word32) & 2<i32>) == 0<32> l230A7A9C
l230A7A9C:
	word32 a0_21 = __swhatbuf_r(a0, a1, fp + -24<i32>, fp + -20<i32>)
	word32 a3_189
	word32 a0_39 = _malloc_r(a0, dwLoc18, out a3_189)
	word32 a5_48 = CONVERT(Mem14[a1 + 12<i32>:int16], int16, int32)
	branch a0_39 == 0<32> l230A7B10
l230A7B10:
	branch (a5_48 & 512<i32>) != 0<32> l230A7A84
l230A7B18:
	Mem53[a1 + 12<i32>:word16] = SLICE(a5_48 & -4<i32> | 2<i32>, word16, 0)
	Mem55[a1:word32] = a1 + 67<i32>
	Mem56[a1 + 16<i32>:word32] = a1 + 67<i32>
	Mem57[a1 + 20<i32>:word32] = 1<i32>
l230A7AC4:
	Mem60[a0 + 60<i32>:word32] = 0x230A68EC<p32>
	Mem64[a1 + 12<i32>:word16] = SLICE(a5_48 | 128<i32>, word16, 0)
	Mem65[a1:word32] = a0_39
	Mem66[a1 + 16<i32>:word32] = a0_39
	Mem67[a1 + 20<i32>:word32] = dwLoc18
	word32 a5_63 = a5_48 | 128<i32>
	branch dwLoc14 != 0<32> l230A7B3C
l230A7B3C:
	branch _isatty_r(a0, CONVERT(Mem67[a1 + 14<i32>:int16], int16, int32)) != 0<32> l230A7B54
l230A7B54:
	a5_63 = CONVERT(SLICE(CONVERT(Mem67[a1 + 12<i32>:uint16], uint16, word32) & -4<i32> | 1<i32>, word16, 0), word16, int32)
l230A7B4C:
	a5_63 = CONVERT(Mem67[a1 + 12<i32>:int16], int16, int32)
l230A7AF0:
	Mem95[a1 + 12<i32>:word16] = SLICE(a5_63 | a0_21, word16, 0)
	return
l230A7A70:
	Mem103[a1:word32] = a1 + 67<i32>
	Mem104[a1 + 16<i32>:word32] = a1 + 67<i32>
	Mem106[a1 + 20<i32>:word32] = 1<i32>
l230A7A84:
	return
__smakebuf_r_exit:


word32 _malloc_r(word32 a0, word32 a1, ptr32 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _init_signal_r.part.0
//      __sfmoreglue
//      __sfvwrite_r
//      __smakebuf_r
//      _realloc_r
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a0 a3
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp
_malloc_r_entry:
l230A7B6C:
	word32 a0_106
	word32 a2_119
	word32 a2_665
	word32 a5_666
	word32 s0_115
	word32 s1_107
	word32 a4_205
	word32 s0_120
	word32 a2_109
	word32 a5_108
	branch a1 >u -11<i32> l230A7C14
l230A7C14:
	s1_107 = a1 + 11<i32> & -8<i32>
	branch s1_107 < 0<32> l230A7DE8
l230A7C1C:
	branch s1_107 <u a1 l230A7DE8
l230A7C20:
	__malloc_lock()
	branch s1_107 <=u 503<i32> l230A80F8
l230A80F8:
	a2_109 = s1_107 >>u 3<u32>
	a5_108 = s1_107 + 8<i32>
l230A7C2C:
	word32 a0_38
	word32 a3_36
	branch s1_107 >>u 9<u32> == 0<32> l230A7E28
l230A7E28:
	a3_36 = 512<i32>
	a2_119 = 64<i32>
	a0_38 = 63<i32>
l230A7C34:
	branch s1_107 >>u 9<u32> >u 4<i32> l230A8090
l230A8090:
	branch s1_107 >>u 9<u32> <=u 20<i32> l230A81AC
l230A81AC:
	a2_119 = (s1_107 >>u 9<u32>) + 92<i32>
	a0_38 = (s1_107 >>u 9<u32>) + 91<i32>
	a3_36 = a2_119 << 3<u32>
l230A8098:
	branch s1_107 >>u 9<u32> >u 84<i32> l230A828C
l230A828C:
	branch s1_107 >>u 9<u32> >u 340<i32> l230A831C
l230A831C:
	branch s1_107 >>u 9<u32> >u 1364<i32> l230A8384
l230A8384:
	a3_36 = 1016<i32>
	a2_119 = 127<i32>
	a0_38 = 126<i32>
l230A8324:
	a2_119 = (s1_107 >>u 0x12<u32>) + 125<i32>
	a0_38 = (s1_107 >>u 0x12<u32>) + 124<i32>
	a3_36 = a2_119 << 3<u32>
l230A8294:
	a2_119 = (s1_107 >>u 0xF<u32>) + 120<i32>
	a0_38 = (s1_107 >>u 0xF<u32>) + 119<i32>
	a3_36 = a2_119 << 3<u32>
l230A80A0:
	a2_119 = (s1_107 >>u 0xC<u32>) + 111<i32>
	a0_38 = (s1_107 >>u 0xC<u32>) + 110<i32>
	a3_36 = a2_119 << 3<u32>
l230A7C3C:
	a2_119 = (s1_107 >>u 6<u32>) + 57<i32>
	a0_38 = (s1_107 >>u 6<u32>) + 56<i32>
	a3_36 = a2_119 << 3<u32>
l230A7C4C:
	word32 a3_69 = 0x4200E6E4<p32> + a3_36
	s0_115 = Mem25[a3_69 + 4<i32>:int32]
	a3 = a3_69 + -8<i32>
	branch a3_69 + -8<i32> == s0_115 l230A7C98
l230A7C64:
	word32 a5_73 = Mem25[s0_115 + 4<i32>:int32]
	a5_666 = a5_73 & -4<i32>
	word32 a4_77 = (a5_73 & -4<i32>) - s1_107
	branch a4_77 > 15<i32> l230A7C94
l230A7C78:
	branch a4_77 >= 0<32> l230A8024
l230A8024:
	a3 = Mem25[s0_115 + 12<i32>:int32]
	a2_665 = Mem25[s0_115 + 8<i32>:int32]
l230A7C7C:
	s0_115 = Mem25[s0_115 + 12<i32>:int32]
	branch a3_69 + -8<i32> == s0_115 l230A7C98
l230A7C84:
	word32 a5_85 = Mem25[s0_115 + 4<i32>:int32]
	a5_666 = a5_85 & -4<i32>
	a4_77 = (a5_85 & -4<i32>) - s1_107
	branch a4_77 <= 15<i32> l230A7C78
l230A7C94:
	a2_119 = a0_38
l230A7C98:
	s0_120 = Mem25[0x4200E6F4<p32>:int32]
	branch s0_120 == 0x4200E6EC<p32> l230A7E54
l230A7BAC:
	branch a1 >u 16<i32> l230A7DE8
l230A7DE8:
	Mem105[a0:word32] = 12<i32>
	a0_106 = 0<i32>
l230A7BB4:
	__malloc_lock()
	s1_107 = 16<i32>
	a5_108 = 24<i32>
	a2_109 = 2<i32>
l230A7BC4:
	word32 a5_113 = 0x4200E6E4<p32> + a5_108
	s0_115 = Mem25[a5_113 + 4<i32>:int32]
	branch s0_115 == a5_113 + -8<i32> l230A7E38
l230A7E38:
	s0_115 = Mem25[a5_113 + 12<i32>:int32]
	a2_119 = a2_109 + 2<i32>
	branch a5_113 != s0_115 l230A7BDC
l230A7E44:
	s0_120 = Mem25[0x4200E6F4<p32>:int32]
	branch s0_120 != 0x4200E6EC<p32> l230A7CA8
l230A7CA8:
	word32 a1_125 = Mem25[s0_120 + 4<i32>:int32]
	word32 a5_132 = (a1_125 & -4<i32>) - s1_107
	branch a5_132 > 15<i32> l230A8124
l230A8124:
	Mem134[s0_120 + 4<i32>:word32] = s1_107 | 1<i32>
	word32 s1_135 = s0_120 + s1_107
	Mem137[0x4200E6F8<p32>:word32] = s1_135
	Mem139[0x4200E6F4<p32>:word32] = s1_135
	Mem142[s1_135 + 12<i32>:word32] = 0x4200E6EC<p32>
	Mem143[s1_135 + 8<i32>:word32] = 0x4200E6EC<p32>
	Mem144[s1_135 + 4<i32>:word32] = a5_132 | 1<i32>
	Mem153[s0_120 + (a1_125 & -4<i32>):word32] = a5_132
	__malloc_unlock()
	a0_106 = s0_120 + 8<i32>
l230A7CBC:
	Mem156[0x4200F6F8<p32>:word32] = 0x4200E6EC<p32>
	Mem158[0x4200F6F4<p32>:word32] = 0x4200E6EC<p32>
	branch a5_132 >= 0<32> l230A8104
l230A8104:
	word32 a1_159 = s0_120 + (a1_125 & -4<i32>)
	Mem163[a1_159 + 4<i32>:word32] = Mem158[a1_159 + 4<i32>:int32] | 1<i32>
	__malloc_unlock()
	a0_106 = s0_120 + 8<i32>
l230A7CD0:
	branch (a1_125 & -4<i32>) >u 511<i32> l230A8030
l230A8030:
	word32 a4_170
	word32 a3_171
	word32 a5_166 = (a1_125 & -4<i32>) >>u 9<u32>
	branch a5_166 <=u 4<i32> l230A8168
l230A8168:
	word32 a5_168 = (a1_125 & -4<i32>) >>u 6<u32>
	a4_170 = a5_168 + 56<i32>
	a3_171 = a5_168 + 57<i32> << 3<u32>
l230A803C:
	branch a5_166 >u 20<i32> l230A8270
l230A8270:
	branch a5_166 >u 84<i32> l230A8300
l230A8300:
	branch a5_166 >u 340<i32> l230A8368
l230A8368:
	branch a5_166 >u 1364<i32> l230A8394
l230A8394:
	a3_171 = 1016<i32>
	a4_170 = 126<i32>
l230A8370:
	word32 a5_178 = (a1_125 & -4<i32>) >>u 0x12<u32>
	a4_170 = a5_178 + 124<i32>
	a3_171 = a5_178 + 125<i32> << 3<u32>
l230A8308:
	word32 a5_182 = (a1_125 & -4<i32>) >>u 0xF<u32>
	a4_170 = a5_182 + 119<i32>
	a3_171 = a5_182 + 120<i32> << 3<u32>
l230A8278:
	word32 a5_186 = (a1_125 & -4<i32>) >>u 0xC<u32>
	a4_170 = a5_186 + 110<i32>
	a3_171 = a5_186 + 111<i32> << 3<u32>
l230A8044:
	a4_170 = a5_166 + 91<i32>
	a3_171 = a5_166 + 92<i32> << 3<u32>
l230A8050:
	word32 a3_196 = 0x4200E6E4<p32> + a3_171
	word32 a5_198 = Mem158[a3_196:int32]
	word32 a3_199 = a3_196 + -8<i32>
	branch a3_196 + -8<i32> == a5_198 l230A821C
l230A821C:
	a4_205 = 1<i32> << (a4_170 >> 2<u32>) | Mem158[0x4200E6E8<p32>:int32]
	Mem207[0x4200E6E8<p32>:word32] = a4_205
l230A8060:
	branch (a1_125 & -4<i32>) >=u (Mem158[a5_198 + 4<i32>:int32] & -4<i32>) l230A8074
l230A806C:
	a5_198 = Mem158[a5_198 + 8<i32>:int32]
	branch a3_196 + -8<i32> != a5_198 l230A8060
l230A8074:
	a3_199 = Mem158[a5_198 + 12<i32>:int32]
	a4_205 = Mem158[0x4200E6E8<p32>:int32]
l230A807C:
	Mem226[s0_120 + 12<i32>:word32] = a3_199
	Mem228[s0_120 + 8<i32>:word32] = a5_198
	Mem229[a3_199 + 8<i32>:word32] = s0_120
	Mem230[a5_198 + 12<i32>:word32] = s0_120
l230A7CD8:
	word32 a1_231 = (a1_125 & -4<i32>) >>u 3<u32>
	word32 a5_235 = 0x4200E6E4<p32> + (a1_231 + 1<i32> << 3<u32>)
	word32 a3_236 = Mem158[a5_235:int32]
	a4_205 = 1<i32> << (a1_231 >> 2<u32>) | Mem158[0x4200E6E8<p32>:int32]
	Mem242[s0_120 + 12<i32>:word32] = a5_235 + -8<i32>
	Mem243[s0_120 + 8<i32>:word32] = a3_236
	Mem245[0x4200F6E8<p32>:word32] = a4_205
	Mem246[a5_235:word32] = s0_120
	Mem247[a3_236 + 12<i32>:word32] = s0_120
l230A7D1C:
	a3 = 1<i32> << (a2_119 >> 2<u32>)
	branch a4_205 <u a3 l230A7E68
l230A7E54:
	a4_205 = Mem25[0x4200E6E8<p32>:int32]
	a3 = 1<i32> << (a2_119 >> 2<u32>)
	branch a4_205 >=u a3 l230A7D2C
l230A7D2C:
	branch (a3 & a4_205) != 0<32> l230A7D58
l230A7D34:
	a3 = a3 << 1<u32>
	a2_119 = (a2_119 & -4<i32>) + 4<i32>
	branch (a3 & a4_205) != 0<32> l230A7D58
l230A7D48:
	a3 = a3 << 1<u32>
	a2_119 = a2_119 + 4<i32>
	branch (a3 & a4_205) == 0<32> l230A7D48
l230A7D58:
l230A7D5C:
	word32 a7_287 = 0x4200E6E4<p32> + (a2_119 << 3<u32>)
	word32 a1_288 = a7_287
	word32 t1_289 = a2_119
l230A7D6C:
	word32 s0_292 = Mem746[a1_288 + 12<i32>:int32]
	branch a1_288 != s0_292 l230A7D84
l230A7D84:
	word32 a5_295 = Mem746[s0_292 + 4<i32>:int32]
	word32 a4_298 = (a5_295 & -4<i32>) - s1_107
	branch a4_298 <= 15<i32> l230A7D78
l230A7D78:
	branch a4_298 >= 0<32> l230A80C8
l230A80C8:
	word32 a5_300 = s0_292 + (a5_295 & -4<i32>)
	a3 = Mem746[s0_292 + 12<i32>:int32]
	word32 a2_303 = Mem746[s0_292 + 8<i32>:int32]
	Mem305[a5_300 + 4<i32>:word32] = Mem746[a5_300 + 4<i32>:int32] | 1<i32>
	Mem306[a2_303 + 12<i32>:word32] = a3
	Mem309[a3 + 8<i32>:word32] = a2_303
	__malloc_unlock()
	a0_106 = s0_292 + 8<i32>
l230A7D7C:
	s0_292 = Mem746[s0_292 + 12<i32>:int32]
	branch a1_288 == s0_292 l230A80B4
l230A7D94:
	word32 a3_313 = Mem746[s0_292 + 12<i32>:int32]
	word32 a2_314 = Mem746[s0_292 + 8<i32>:int32]
	Mem316[s0_292 + 4<i32>:word32] = s1_107 | 1<i32>
	Mem317[a2_314 + 12<i32>:word32] = a3_313
	Mem318[a3_313 + 8<i32>:word32] = a2_314
	word32 s1_319 = s0_292 + s1_107
	Mem321[0x4200F6F8<p32>:word32] = s1_319
	Mem323[0x4200F6F4<p32>:word32] = s1_319
	Mem327[s1_319 + 12<i32>:word32] = 0x4200E6EC<p32>
	Mem328[s1_319 + 8<i32>:word32] = 0x4200E6EC<p32>
	Mem329[s1_319 + 4<i32>:word32] = a4_298 | 1<i32>
	Mem332[s0_292 + (a5_295 & -4<i32>):word32] = a4_298
	__malloc_unlock()
	a3 = a4_298 | 1<i32>
	a0_106 = s0_292 + 8<i32>
l230A7D74:
l230A80B4:
	t1_289 = t1_289 + 1<i32>
	a1_288 = a1_288 + 8<i32>
	branch (t1_289 & 3<i32>) != 0<32> l230A7D6C
l230A80C4:
l230A81C8:
	word32 a5_352
	a7_287 = a7_287 + -8<i32>
	branch (a2_119 & 3<i32>) != 0<32> l230A81BC
l230A81BC:
	a2_119 = a2_119 + -1<i32>
	branch Mem746[a7_287 + 8<i32>:int32] != a7_287 l230A83A0
l230A83A0:
	a5_352 = Mem746[0x4200E6E8<p32>:int32]
l230A81D4:
	a5_352 = ~a3 & Mem746[0x4200E6E8<p32>:int32]
	Mem362[0x4200E6E8<p32>:word32] = a5_352
l230A81E8:
	a3 = a3 << 1<u32>
	branch a5_352 <u a3 l230A7E68
l230A81F0:
	branch a3 == 0<32> l230A7E68
l230A81F4:
	branch (a3 & a5_352) != 0<32> l230A820C
l230A81FC:
	a3 = a3 << 1<u32>
	t1_289 = t1_289 + 4<i32>
	branch (a3 & a5_352) == 0<32> l230A81FC
l230A820C:
	a2_119 = t1_289
l230A7E68:
	word32 a5_404
	word32 s0_384 = Mem381[0x4200E6EC<p32>:int32]
	word32 s5_385 = Mem381[s0_384 + 4<i32>:int32]
	branch (s5_385 & -4<i32>) <u s1_107 l230A7E84
l230A7E78:
	a5_404 = (s5_385 & -4<i32>) - s1_107
	branch a5_404 > 15<i32> l230A7FF8
l230A7E84:
	word32 s5_419
	word32 s4_416 = s0_384 + (s5_385 & -4<i32>)
	word32 s5_418 = s1_107 + Mem381[0x4200F730<p32>:int32]
	branch Mem381[0x4200ED00<p32>:int32] == -1<i32> l230A8214
l230A8214:
	s5_419 = s5_418 + 16<i32>
l230A7EAC:
	s5_419 = s5_418 + 0x100F<32> & 0xFFFFF000<32>
l230A7EC0:
	word32 s5_472
	word32 a0_447 = _sbrk_r(a0, s5_419, out a3)
	word32 s6_457 = a0_447
	branch a0_447 == -1<i32> l230A8180
l230A7ED8:
	word32 a5_476
	word32 a4_466
	branch a0_447 <u s4_416 l230A817C
l230A817C:
	branch s0_384 == 0x4200E6E4<p32> l230A82A8
l230A82A8:
	a4_466 = s5_419 + Mem381[0x4201E924<p32>:int32]
	Mem468[0x4201E924<p32>:word32] = a4_466
l230A8180:
	s0_384 = Mem381[0x4200E6EC<p32>:int32]
	s5_472 = Mem381[s0_384 + 4<i32>:int32]
l230A7EDC:
	a5_476 = s5_419 + Mem381[0x4201E924<p32>:int32]
	Mem478[0x4201F924<p32>:word32] = a5_476
	a4_466 = a5_476
	branch s4_416 == a0_447 l230A82C4
l230A82C4:
	a3 = s4_416 << 0x14<u32>
	branch s4_416 << 0x14<u32> != 0<32> l230A7EFC
l230A82CC:
	word32 s5_483 = (s5_385 & -4<i32>) + s5_419
	s0_384 = Mem478[0x4200E6EC<p32>:int32]
	Mem485[s0_384 + 4<i32>:word32] = s5_483 | 1<i32>
	s5_472 = s5_483 | 1<i32>
l230A7EFC:
	branch Mem488[0x4200ED00<p32>:int32] == -1<i32> l230A82E0
l230A82E0:
	Mem493[0x4200FD00<p32>:word32] = a0_447
l230A7F08:
	Mem499[0x4201F924<p32>:word32] = a0_447 - s4_416 + a4_466
l230A7F18:
	word32 s4_509
	word32 a0_514
	branch (a0_447 & 7<i32>) == 0<32> l230A823C
l230A823C:
	word32 a5_508 = 0x1000<32> - (a0_447 + s5_419 & 0xFFF<32>)
	s4_509 = a5_508 & 0xFFF<32>
	a0_514 = _sbrk_r(a0, a5_508 & 0xFFF<32>, out a3)
	branch a0_514 != -1<i32> l230A7F5C
l230A8268:
	s4_509 = 0<i32>
l230A7F20:
	word32 s6_525 = a0_447 - (a0_447 & 7<i32>)
	word32 s5_529 = s6_525 + 8<i32> + s5_419
	word32 a5_533 = 0x1008<32> - (a0_447 & 7<i32>) - (s5_529 & 0xFFF<32>)
	s6_457 = s6_525 + 8<i32>
	s4_509 = a5_533 & 0xFFF<32>
	a0_514 = _sbrk_r(a0, a5_533 & 0xFFF<32>, out a3)
	branch a0_514 == -1<i32> l230A8338
l230A8338:
	s5_419 = s5_529 + ((a0_447 & 7<i32>) + -8<i32>) - (s6_525 + 8<i32>)
	s4_509 = 0<i32>
l230A7F5C:
	s5_419 = a0_514 - s6_457 + s4_509
l230A7F64:
	word32 a5_563 = Mem562[0x4201E924<p32>:int32]
	Mem566[0x4200E6EC<p32>:word32] = s6_457
	a5_476 = s4_509 + a5_563
	Mem572[0x4201F924<p32>:word32] = a5_476
	s5_472 = s5_419 | 1<i32>
	Mem573[s6_457 + 4<i32>:word32] = s5_472
	branch s0_384 == 0x4200E6E4<p32> l230A82EC
l230A82EC:
	s0_384 = s6_457
l230A7F88:
	branch (s5_385 & -4<i32>) <=u 15<i32> l230A82F4
l230A82F4:
	Mem589[s6_457 + 4<i32>:word32] = 1<i32>
l230A7F90:
	word32 a4_591 = (s5_385 & -4<i32>) + -12<i32>
	Mem595[s0_384 + 4<i32>:word32] = Mem573[s0_384 + 4<i32>:int32] & 1<i32> | a4_591 & -8<i32>
	a3 = s0_384 + (a4_591 & -8<i32>)
	Mem598[a3 + 4<i32>:word32] = 5<i32>
	Mem599[a3 + 8<i32>:word32] = 5<i32>
	branch (a4_591 & -8<i32>) >u 15<i32> l230A834C
l230A834C:
	_free_r(a0, s0_384 + 8<i32>)
	s0_384 = Mem599[0x4200E6EC<p32>:int32]
	a5_476 = Mem599[0x4201E924<p32>:int32]
	s5_472 = Mem599[s0_384 + 4<i32>:int32]
l230A7FBC:
	s5_472 = Mem599[s6_457 + 4<i32>:int32]
	s0_384 = s6_457
l230A7FC4:
	branch Mem611[0x4200F72C<p32>:int32] >=u a5_476 l230A7FDC
l230A7FD4:
	Mem615[0x4200F72C<p32>:word32] = a5_476
l230A7FDC:
	branch Mem618[0x4200F728<p32>:int32] >=u a5_476 l230A8188
l230A7FEC:
	Mem622[0x4200F728<p32>:word32] = a5_476
l230A8188:
	word32 s5_626 = s5_472 & -4<i32>
	a5_404 = s5_626 - s1_107
	branch s5_626 <u s1_107 l230A819C
l230A8194:
	branch a5_404 > 15<i32> l230A7FF8
l230A7FF8:
	Mem644[s0_384 + 4<i32>:word32] = s1_107 | 1<i32>
	word32 s1_645 = s0_384 + s1_107
	Mem647[0x4200E6EC<p32>:word32] = s1_645
	Mem656[s1_645 + 4<i32>:word32] = a5_404 | 1<i32>
	__malloc_unlock()
	a0_106 = s0_384 + 8<i32>
l230A819C:
	__malloc_unlock()
	a0_106 = 0<i32>
l230A7BDC:
	a3 = Mem25[s0_115 + 12<i32>:int32]
	a2_665 = Mem25[s0_115 + 8<i32>:int32]
	a5_666 = Mem25[s0_115 + 4<i32>:int32] & -4<i32>
l230A7BEC:
	word32 a5_670 = s0_115 + a5_666
	word32 a4_672 = Mem25[a5_670 + 4<i32>:int32]
	Mem675[a2_665 + 12<i32>:word32] = a3
	Mem676[a3 + 8<i32>:word32] = a2_665
	Mem681[a5_670 + 4<i32>:word32] = a4_672 | 1<i32>
	__malloc_unlock()
	a0_106 = s0_115 + 8<i32>
l230A7DF4:
	a3Out = a3
	return a0_106
_malloc_r_exit:


void _mbtowc_r()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a5 t1
// Preserved: sp
_mbtowc_r_entry:
l230A83A8:
	call Mem0[0x4200E65C<p32>:int32] (retsize: 0;)
		uses: a5:0x4200E578<p32>
	return
_mbtowc_r_exit:


void __ascii_mbtowc(word32 a1, word32 a2, word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a2:[0..31] a3:[0..31]
// LiveOut:
// Trashed: a0 a1 a5
// Preserved: sp
__ascii_mbtowc_entry:
l230A83B8:
	branch a1 == 0<32> l230A83D8
l230A83D8:
	branch a2 == 0<32> l230A8408
l230A8408:
l230A83E4:
	branch a3 == 0<32> l230A8418
l230A8418:
l230A83E8:
l230A83F8:
	return
l230A83BC:
	branch a2 == 0<32> l230A8400
l230A8400:
	return
l230A83C0:
	branch a3 == 0<32> l230A8410
l230A8410:
	return
l230A83C4:
	Mem20[a1:word32] = CONVERT(Mem0[a2:byte], byte, word32)
	return
__ascii_mbtowc_exit:


void __malloc_lock()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _malloc_trim_r
//      _free_r
//      _malloc_r
//      _realloc_r
// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
__malloc_lock_entry:
l230A8420:
	return
__malloc_lock_exit:


void __malloc_unlock()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _malloc_trim_r
//      _free_r
//      _malloc_r
//      _realloc_r
// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
__malloc_unlock_entry:
l230A8424:
	return
__malloc_unlock_exit:


word32 _realloc_r(word32 a0, word32 a1, word32 a2, ptr32 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __sfvwrite_r
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a0 a3
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 s8 sp
_realloc_r_entry:
l230A8428:
	branch a1 == 0<32> l230A8690
l230A8690:
l230A86C0_thunk__malloc_r:
	word32 a3_46
	word32 a0_40 = _malloc_r(a0, a2, out a3_46)
	a3Out = a3_46
	return a0_40
l230A845C:
	word32 s3_102
	word32 s0_53
	word32 a4_54
	__malloc_lock()
	word32 s6_124 = a1
	branch a2 <=u -11<i32> l230A856C
l230A856C:
	s0_53 = 16<i32>
	a4_54 = 16<i32>
	branch a2 <=u 16<i32> l230A8484
l230A8474:
	s0_53 = a2 + 11<i32> & -8<i32>
	a4_54 = s0_53
	branch s0_53 < 0<32> l230A8578
l230A8480:
	branch s0_53 <u a2 l230A8578
l230A8578:
	Mem59[a0:word32] = 12<i32>
	s3_102 = 0<i32>
l230A8484:
	word32 a5_63 = Mem23[a1 + -4<i32>:int32]
	word32 s2_226 = a1 + -8<i32>
	word32 s1_172 = a5_63 & -4<i32>
	word32 s4_173 = a1 + -8<i32> + (a5_63 & -4<i32>)
	branch (a5_63 & -4<i32>) >= a4_54 l230A863C
l230A8498:
	word32 s8_165
	word32 s7_182
	word32 a2_185
	word32 s3_191
	word32 a5_167
	word32 a3_71 = Mem23[s4_173 + 4<i32>:int32]
	branch Mem23[0x4200E6EC<p32>:int32] == s4_173 l230A86F4
l230A86F4:
	a3 = a3_71 & -4<i32>
	word32 a2_73 = (a5_63 & -4<i32>) + (a3_71 & -4<i32>)
	word32 a1_75 = s0_53 + 16<i32>
	branch a2_73 >= a1_75 l230A87E4
l230A87E4:
	word32 s2_76 = a1 + -8<i32> + s0_53
	Mem79[0x4200F6EC<p32>:word32] = s2_76
	Mem81[s2_76 + 4<i32>:word32] = a2_73 - s0_53 | 1<i32>
	Mem88[a1 + 4092<i32>:word32] = Mem81[a1 + -4<i32>:int32] & 1<i32> | s0_53
	__malloc_unlock()
	s3_102 = a1
l230A8704:
	branch (a5_63 & 1<i32>) != 0<32> l230A84F8
l230A870C:
	s8_165 = a1 + -8<i32> - Mem23[a1 + -8<i32>:int32]
	word32 a5_92 = Mem23[s8_165 + 4<i32>:int32]
	a5_167 = a5_92 & -4<i32>
	word32 s4_95 = (a5_92 & -4<i32>) + (a3_71 & -4<i32>) + (a5_63 & -4<i32>)
	branch s4_95 < a1_75 l230A84F0
l230A8728:
	word32 a5_96 = Mem23[s8_165 + 12<i32>:int32]
	word32 a4_97 = Mem23[s8_165 + 8<i32>:int32]
	Mem100[a4_97 + 12<i32>:word32] = a5_96
	Mem101[a5_96 + 8<i32>:word32] = a4_97
	word32 a2_98 = (a5_63 & -4<i32>) + -4<i32>
	s3_102 = s8_165 + 8<i32>
	branch a2_98 >u 36<i32> l230A8978
l230A8978:
	word32 a5_724
	word32 a3_722
	word32 a4_723
	memmove(s8_165 + 8<i32>, a1, a2_98, out a3_722, out a4_723, out a5_724)
l230A8748:
	word32 a4_110 = Mem101[a1:int32]
	word32 a5_111 = s8_165 + 8<i32>
	branch a2_98 <=u 19<i32> l230A8778
l230A8758:
	Mem112[s8_165 + 8<i32>:word32] = a4_110
	Mem115[s8_165 + 12<i32>:word32] = Mem112[a1 + 4<i32>:int32]
	branch a2_98 >u 27<i32> l230A89C4
l230A89C4:
	Mem117[s8_165 + 16<i32>:word32] = Mem115[a1 + 8<i32>:int32]
	Mem119[s8_165 + 20<i32>:word32] = Mem117[a1 + 12<i32>:int32]
	a4_110 = Mem119[a1 + 16<i32>:int32]
	branch a2_98 == 36<i32> l230A89E8
l230A89E8:
	Mem121[s8_165 + 24<i32>:word32] = a4_110
	Mem125[s8_165 + 28<i32>:word32] = Mem121[a1 + 20<i32>:int32]
	a5_111 = s8_165 + 32<i32>
	s6_124 = a1 + 24<i32>
	a4_110 = Mem125[a1 + 24<i32>:int32]
l230A89DC:
	a5_111 = s8_165 + 24<i32>
	s6_124 = a1 + 16<i32>
l230A876C:
	a4_110 = Mem115[a1 + 8<i32>:int32]
	a5_111 = s8_165 + 16<i32>
	s6_124 = a1 + 8<i32>
l230A8778:
	Mem134[a5_111:word32] = a4_110
	Mem137[a5_111 + 4<i32>:word32] = Mem134[s6_124 + 4<i32>:int32]
	Mem139[a5_111 + 8<i32>:word32] = Mem137[s6_124 + 8<i32>:int32]
l230A878C:
	word32 a4_144 = s8_165 + s0_53
	Mem149[0x4200F6EC<p32>:word32] = a4_144
	Mem151[a4_144 + 4<i32>:word32] = s4_95 - s0_53 | 1<i32>
	Mem158[s8_165 + 4<i32>:word32] = Mem151[s8_165 + 4<i32>:int32] & 1<i32> | s0_53
	__malloc_unlock()
	a3 = 0x4200E794<p32>
l230A84AC:
	branch (Mem23[s4_173 + (a3_71 & -2<i32>) + 4<i32>:int32] & 1<i32>) != 0<32> l230A8674
l230A8674:
	branch (a5_63 & 1<i32>) != 0<32> l230A84F8
l230A867C:
	s8_165 = a1 + -8<i32> - Mem23[a1 + -8<i32>:int32]
	a5_167 = Mem23[s8_165 + 4<i32>:int32] & -4<i32>
l230A84C0:
	a3 = a3_71 & -4<i32>
	word32 a2_169 = (a5_63 & -4<i32>) + (a3_71 & -4<i32>)
	branch a2_169 >= a4_54 l230A881C
l230A881C:
	word32 a5_170 = Mem23[s4_173 + 12<i32>:int32]
	word32 a4_171 = Mem23[s4_173 + 8<i32>:int32]
	Mem174[a4_171 + 12<i32>:word32] = a5_170
	Mem175[a5_170 + 8<i32>:word32] = a4_171
	s1_172 = a2_169
	s4_173 = a1 + -8<i32> + a2_169
l230A84CC:
	branch (a5_63 & 1<i32>) != 0<32> l230A84F8
l230A84D4:
	s8_165 = a1 + -8<i32> - Mem23[a1 + -8<i32>:int32]
	word32 a5_179 = Mem23[s8_165 + 4<i32>:int32]
	a5_167 = a5_179 & -4<i32>
	s7_182 = (a5_179 & -4<i32>) + (a3_71 & -4<i32>) + (a5_63 & -4<i32>)
	branch s7_182 >= a4_54 l230A85B8
l230A85B8:
	word32 a5_183 = Mem23[s4_173 + 12<i32>:int32]
	word32 a4_184 = Mem23[s4_173 + 8<i32>:int32]
	Mem187[a4_184 + 12<i32>:word32] = a5_183
	Mem188[a5_183 + 8<i32>:word32] = a4_184
	word32 a4_189 = Mem188[s8_165 + 8<i32>:int32]
	word32 a5_190 = Mem188[s8_165 + 12<i32>:int32]
	Mem193[a4_189 + 12<i32>:word32] = a5_190
	Mem194[a5_190 + 8<i32>:word32] = a4_189
	a2_185 = (a5_63 & -4<i32>) + -4<i32>
	s3_191 = s8_165 + 8<i32>
	s4_173 = s8_165 + s7_182
	branch a2_185 >u 36<i32> l230A88D0
l230A85EC:
	a3 = 19<i32>
	word32 a4_196 = Mem194[a1:int32]
	word32 a5_197 = s8_165 + 8<i32>
	branch a2_185 <=u 19<i32> l230A861C
l230A85FC:
	Mem198[s8_165 + 8<i32>:word32] = a4_196
	Mem201[s8_165 + 12<i32>:word32] = Mem198[a1 + 4<i32>:int32]
	a4_196 = Mem201[a1 + 8<i32>:int32]
	branch a2_185 >u 27<i32> l230A8954
l230A8954:
	Mem203[s8_165 + 16<i32>:word32] = a4_196
	Mem206[s8_165 + 20<i32>:word32] = Mem203[a1 + 12<i32>:int32]
	a4_196 = Mem206[a1 + 16<i32>:int32]
	branch a2_185 == 36<i32> l230A89A8
l230A89A8:
	Mem208[s8_165 + 24<i32>:word32] = a4_196
	Mem212[s8_165 + 28<i32>:word32] = Mem208[a1 + 20<i32>:int32]
	a5_197 = s8_165 + 32<i32>
	s6_124 = a1 + 24<i32>
	a4_196 = Mem212[a1 + 24<i32>:int32]
l230A896C:
	a5_197 = s8_165 + 24<i32>
	s6_124 = a1 + 16<i32>
l230A8614:
	a5_197 = s8_165 + 16<i32>
	s6_124 = a1 + 8<i32>
l230A861C:
	Mem220[a5_197:word32] = a4_196
	Mem227[a5_197 + 4<i32>:word32] = Mem220[s6_124 + 4<i32>:int32]
	Mem231[a5_197 + 8<i32>:word32] = Mem227[s6_124 + 8<i32>:int32]
	s1_172 = s7_182
	s2_226 = s8_165
	s6_124 = s8_165 + 8<i32>
l230A84F0:
	s7_182 = (a5_63 & -4<i32>) + a5_167
	branch s7_182 >= a4_54 l230A884C
l230A884C:
	word32 a4_238 = Mem23[s8_165 + 12<i32>:int32]
	word32 a3_239 = Mem23[s8_165 + 8<i32>:int32]
	Mem242[a3_239 + 12<i32>:word32] = a4_238
	Mem243[a4_238 + 8<i32>:word32] = a3_239
	a2_185 = (a5_63 & -4<i32>) + -4<i32>
	s3_191 = s8_165 + 8<i32>
	s4_173 = s8_165 + s7_182
	branch a2_185 >u 36<i32> l230A88D0
l230A88D0:
	word32 a5_721
	word32 a4_720
	memmove(s3_191, a1, a2_185, out a3, out a4_720, out a5_721)
	s6_124 = s3_191
	s1_172 = s7_182
	s2_226 = s8_165
l230A8870:
	word32 a3_262 = Mem243[a1:int32]
	word32 a4_263 = s3_191
	branch a2_185 <=u 19<i32> l230A88A0
l230A8880:
	Mem264[s8_165 + 8<i32>:word32] = a3_262
	Mem267[s8_165 + 12<i32>:word32] = Mem264[a1 + 4<i32>:int32]
	branch a2_185 >u 27<i32> l230A8930
l230A8930:
	Mem269[s8_165 + 16<i32>:word32] = Mem267[a1 + 8<i32>:int32]
	Mem271[s8_165 + 20<i32>:word32] = Mem269[a1 + 12<i32>:int32]
	branch a2_185 == 36<i32> l230A8988
l230A8988:
	Mem275[s8_165 + 24<i32>:word32] = Mem271[a1 + 16<i32>:int32]
	Mem277[s8_165 + 28<i32>:word32] = Mem275[a1 + 20<i32>:int32]
	a4_263 = s8_165 + 32<i32>
	s6_124 = a1 + 24<i32>
	a3_262 = Mem277[a1 + 24<i32>:int32]
l230A8944:
	a3_262 = Mem271[a1 + 16<i32>:int32]
	a4_263 = s8_165 + 24<i32>
	s6_124 = a1 + 16<i32>
l230A8894:
	a3_262 = Mem267[a1 + 8<i32>:int32]
	a4_263 = s8_165 + 16<i32>
	s6_124 = a1 + 8<i32>
l230A88A0:
	Mem287[a4_263:word32] = a3_262
	a3 = Mem287[s6_124 + 4<i32>:int32]
	Mem294[a4_263 + 4<i32>:word32] = a3
	Mem298[a4_263 + 8<i32>:word32] = Mem294[s6_124 + 8<i32>:int32]
	s1_172 = s7_182
	s2_226 = s8_165
	s6_124 = s3_191
l230A84F8:
	word32 a0_306 = _malloc_r(a0, a2, out a3)
	s3_102 = a0_306
	branch a0_306 == 0<32> l230A8560
l230A850C:
	branch a1 + -8<i32> + (Mem23[a1 + -4<i32>:int32] & -2<i32>) == a0_306 + -8<i32> l230A8838
l230A8838:
	s1_172 = (a5_63 & -4<i32>) + (Mem23[a0_306 + -4<i32>:int32] & -4<i32>)
	s4_173 = a1 + -8<i32> + s1_172
l230A863C:
	word32 a2_332 = Mem330[s2_226 + 4<i32>:int32]
	word32 a5_340 = s1_172 - s0_53
	branch a5_340 >u 15<i32> l230A86C4
l230A86C4:
	Mem344[s2_226 + 4<i32>:word32] = a2_332 & 1<i32> | s0_53
	word32 a1_345 = s2_226 + s0_53
	Mem347[a1_345 + 4<i32>:word32] = a5_340 | 1<i32>
	Mem360[s4_173 + 4<i32>:word32] = Mem347[s4_173 + 4<i32>:int32] | 1<i32>
	_free_r(a0, a1_345 + 8<i32>)
l230A8650:
	Mem362[s2_226 + 4<i32>:word32] = s1_172 | a2_332 & 1<i32>
	Mem365[s4_173 + 4<i32>:word32] = Mem362[s4_173 + 4<i32>:int32] | 1<i32>
l230A8664:
	__malloc_unlock()
	s3_102 = s6_124
l230A8520:
	word32 a2_371 = (a5_63 & -4<i32>) + -4<i32>
	branch a2_371 >u 36<i32> l230A88C4
l230A88C4:
	word32 a5_719
	word32 a4_718
	memmove(a0_306, a1, a2_371, out a3, out a4_718, out a5_719)
l230A852C:
	word32 a4_389
	word32 a5_390
	word32 a3_379 = Mem23[a1:int32]
	branch a2_371 >u 19<i32> l230A87C0
l230A87C0:
	Mem380[a0_306:word32] = a3_379
	Mem383[a0_306 + 4<i32>:word32] = Mem380[a1 + 4<i32>:int32]
	branch a2_371 >u 27<i32> l230A88EC
l230A88EC:
	Mem385[a0_306 + 8<i32>:word32] = Mem383[a1 + 8<i32>:int32]
	Mem387[a0_306 + 12<i32>:word32] = Mem385[a1 + 12<i32>:int32]
	branch a2_371 == 36<i32> l230A8910
l230A8910:
	Mem391[a0_306 + 16<i32>:word32] = Mem387[a1 + 16<i32>:int32]
	Mem393[a0_306 + 20<i32>:word32] = Mem391[a1 + 20<i32>:int32]
	a4_389 = a1 + 24<i32>
	a5_390 = a0_306 + 24<i32>
	a3_379 = Mem393[a1 + 24<i32>:int32]
l230A8900:
	a4_389 = a1 + 16<i32>
	a5_390 = a0_306 + 16<i32>
	a3_379 = Mem387[a1 + 16<i32>:int32]
l230A87D4:
	a4_389 = a1 + 8<i32>
	a5_390 = a0_306 + 8<i32>
	a3_379 = Mem383[a1 + 8<i32>:int32]
l230A8538:
	a5_390 = a0_306
	a4_389 = a1
l230A8540:
	Mem405[a5_390:word32] = a3_379
	a3 = Mem405[a4_389 + 4<i32>:int32]
	Mem408[a5_390 + 4<i32>:word32] = a3
	Mem410[a5_390 + 8<i32>:word32] = Mem408[a4_389 + 8<i32>:int32]
l230A8554:
	_free_r(a0, a1)
l230A8560:
	__malloc_unlock()
l230A8584:
	a3Out = a3
	return s3_102
_realloc_r_exit:


word32 _sbrk_r(word32 a0, word32 a1, ptr32 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _malloc_trim_r
//      _malloc_r
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a0 a3
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: ra s0 sp
_sbrk_r_entry:
l230A8A04:
	Mem11[0x420277A8<p32>:word32] = 0<32>
	word32 a3_17
	branch _sbrk(a1, out a3_17) == -1<i32> l230A8A3C
l230A8A3C:
	word32 a5_26 = Mem13[0x420267A8<p32>:int32]
	branch a5_26 == 0<32> l230A8A2C
l230A8A4C:
	Mem27[a0:word32] = a5_26
	return
l230A8A2C:
	return
_sbrk_r_exit:


void _stat_r(word32 a0, word32 a1, word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      stat
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: ra s0 sp
_stat_r_entry:
l230A8A60:
	Mem16[0x420277A8<p32>:word32] = 0<32>
	branch _stat(a1, a2) == -1<i32> l230A8AA0
l230A8AA0:
	word32 a5_35 = Mem16[0x420267A8<p32>:int32]
	branch a5_35 == 0<32> l230A8A90
l230A8AB0:
	Mem36[a0:word32] = a5_35
	return
l230A8A90:
	return
_stat_r_exit:


void __sread(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a7
// Preserved: ra s0 sp
__sread_entry:
l230A8AC4:
	word32 a0_12 = _read_r(a0, CONVERT(Mem5[a1 + 14<i32>:int16], int16, int32))
	branch a0_12 < 0<32> l230A8AFC
l230A8AFC:
	Mem23[a1 + 12<i32>:word16] = SLICE(CONVERT(Mem10[a1 + 12<i32>:uint16], uint16, word32) & 0xFFFFEFFF<32>, word16, 0)
	return
l230A8AE0:
	Mem30[a1 + 80<i32>:word32] = Mem10[a1 + 80<i32>:int32] + a0_12
	return
__sread_exit:


void __seofread()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a0
// Preserved: sp
__seofread_entry:
l230A8B20:
	return
__seofread_exit:


void __swrite(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a7
// Preserved: ra s0 s1 s2 s3 sp
__swrite_entry:
l230A8B28:
	word32 a5_35 = CONVERT(Mem0[a1 + 12<i32>:int16], int16, int32)
	word32 a1_25 = CONVERT(Mem16[a1 + 14<i32>:int16], int16, int32)
	branch (a5_35 & 256<i32>) != 0<32> l230A8B98
l230A8B98:
	_lseek_r(a0, a1_25)
	a5_35 = CONVERT(Mem16[a1 + 12<i32>:int16], int16, int32)
	a1_25 = CONVERT(Mem16[a1 + 14<i32>:int16], int16, int32)
l230A8B60:
	Mem42[a1 + 12<i32>:word16] = SLICE(a5_35 & 0xFFFFEFFF<32>, word16, 0)
l230A8B94_thunk__write_r:
	_write_r(a0, a1_25)
	return
__swrite_exit:


void __sseek(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a7
// Preserved: ra s0 sp
__sseek_entry:
l230A8BB0:
	word32 a0_12 = _lseek_r(a0, CONVERT(Mem5[a1 + 14<i32>:int16], int16, int32))
	branch a0_12 == -1<i32> l230A8BF4
l230A8BF4:
	Mem24[a1 + 12<i32>:word16] = SLICE(CONVERT(Mem10[a1 + 12<i32>:uint16], uint16, word32) & 0xFFFFEFFF<32>, word16, 0)
	return
l230A8BD0:
	word32 a5_28 = CONVERT(Mem10[a1 + 12<i32>:uint16], uint16, word32)
	Mem30[a1 + 80<i32>:word32] = a0_12
	Mem32[a1 + 12<i32>:word16] = SLICE(a5_28 | 0x1000<32>, word16, 0)
	return
__sseek_exit:


void __sclose(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a7
// Preserved: sp
__sclose_entry:
l230A8C18:
	word32 a1_5 = CONVERT(Mem0[a1 + 14<i32>:int16], int16, int32)
l230A8C1C_thunk__close_r:
	_close_r(a0, a1_5)
	return
__sclose_exit:


void __swbuf_r(word32 ra, word32 a0, word32 a1, word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fputwc
//      __swbuf
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 t0 t1
// Preserved: ra s0 s1 s2 s3 sp
__swbuf_r_entry:
l230A8C20:
	branch a0 == 0<32> l230A8C50
l230A8C48:
	branch Mem13[a0 + 56<i32>:int32] == 0<32> l230A8D9C
l230A8D9C:
	word32 a3_273
	__sinit(ra, a0, out a3_273)
l230A8C50:
	word32 a5_125
	word32 a4_117
	word32 a5_37
	word32 a4_31 = CONVERT(Mem13[a2 + 12<i32>:int16], int16, int32)
	Mem35[a2 + 8<i32>:word32] = Mem13[a2 + 24<i32>:int32]
	word32 a3_34 = CONVERT(SLICE(a4_31, word16, 0), word16, word32)
	branch (a3_34 & 8<i32>) == 0<32> l230A8CEC
l230A8C6C:
	a5_37 = Mem35[a2 + 16<i32>:int32]
	branch a5_37 == 0<32> l230A8CEC
l230A8CEC:
	word32 a3_272
	branch __swsetup_r(ra, a0, a2, out a3_272) != 0<32> l230A8D94
l230A8CFC:
	a4_31 = CONVERT(Mem35[a2 + 12<i32>:int16], int16, int32)
	a5_37 = Mem35[a2 + 16<i32>:int32]
	branch CONVERT(SLICE(a4_31, word16, 0), word16, word32) << 0x12<u32> < 0<32> l230A8C84
l230A8C74:
	branch a3_34 << 0x12<u32> >= 0<32> l230A8D1C
l230A8D1C:
	word32 a3_65 = Mem35[a2 + 100<i32>:int32]
	Mem72[a2 + 12<i32>:word16] = SLICE(a4_31 | 0x2000<32>, word16, 0)
	a4_117 = Mem72[a2:int32]
	Mem74[a2 + 100<i32>:word32] = a3_65 & 0xFFFFDFFF<32>
	a5_125 = a4_117 - a5_37
	branch a5_125 < Mem74[a2 + 20<i32>:int32] l230A8C94
l230A8C84:
	a4_117 = Mem35[a2:int32]
	a5_125 = a4_117 - a5_37
	branch a5_125 >= Mem35[a2 + 20<i32>:int32] l230A8D4C
l230A8D4C:
	word32 a3_271
	branch _fflush_r(ra, a0, a2, a0, out a3_271) != 0<32> l230A8D94
l230A8D5C:
	word32 a4_102 = Mem101[a2:int32]
	word32 a3_103 = Mem101[a2 + 8<i32>:int32]
	Mem107[a2:word32] = a4_102 + 1<i32>
	Mem108[a2 + 8<i32>:word32] = a3_103 + -1<i32>
	Mem112[a4_102:byte] = SLICE(a1 & 255<i32>, byte, 0)
	branch Mem112[a2 + 20<i32>:int32] != 1<i32> l230A8CB8
l230A8C94:
	word32 a3_116 = Mem115[a2 + 8<i32>:int32]
	Mem119[a2:word32] = a4_117 + 1<i32>
	Mem121[a2 + 8<i32>:word32] = a3_116 + -1<i32>
	Mem123[a4_117:byte] = SLICE(a1 & 255<i32>, byte, 0)
	branch Mem123[a2 + 20<i32>:int32] == a5_125 + 1<i32> l230A8D84
l230A8CB8:
	branch (CONVERT(Mem128[a2 + 12<i32>:uint16], uint16, word32) & 1<i32>) == 0<32> l230A8CCC
l230A8CC4:
	branch (a1 & 255<i32>) == 10<i32> l230A8D84
l230A8D84:
	word32 a3_270
	branch _fflush_r(ra, a0, a2, a0, out a3_270) == 0<32> l230A8CCC
l230A8D94:
l230A8CCC:
	return
__swbuf_r_exit:


void __swbuf(word32 ra, word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 t0 t1
// Preserved: sp
__swbuf_entry:
l230A8DA4:
	word32 a0_10 = Mem0[0x4200ECFC<p32>:int32]
l230A8DB8_thunk___swbuf_r:
	__swbuf_r(ra, a0_10, a0, a1)
	return
__swbuf_exit:


void _wcrtomb_r(word32 ra, word32 a0, word32 a1, word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fputwc
// MayUse:  a0:[0..31] a1:[0..31] a3:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a5
// Preserved: ra s0 s1 sp
_wcrtomb_r_entry:
l230A8DBC:
	word32 s0_21
	word32 s1_22
	word32 a5_16 = Mem11[0x4200E658<p32>:int32]
	branch a1 == 0<32> l230A8E04
l230A8E04:
	word32 a0_25
	call a5_16 (retsize: 0;)
		uses: a0:a0,a1:fp + -28<i32>,a2:0<i32>,a3:a3,ra:ra,s0:a0,s1:a3
		defs: a0:a0_25,s0:s0_21,s1:s1_22
	branch a0_25 != -1<i32> l230A8DF0
l230A8DE4:
	word32 a0_35
	call a5_16 (retsize: 0;)
		uses: a0:a0,a1:a1,a3:a3,ra:ra,s0:a0,s1:a3
		defs: a0:a0_35,s0:s0_31,s1:s1_32
	branch a0_35 == -1<i32> l230A8E18
l230A8E18:
	Mem41[s1_22:word32] = 0<32>
	Mem44[s0_21:word32] = 138<i32>
	return
l230A8DF0:
	return
_wcrtomb_r_exit:


void wcrtomb(word32 ra, word32 a0, word32 a1, word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] ra:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a5
// Preserved: ra s0 s1 sp
wcrtomb_entry:
l230A8E38:
	word32 s0_25
	word32 s1_26
	word32 s0_10 = Mem9[0x4200ECFC<p32>:int32]
	word32 a5_17 = Mem12[0x4200E658<p32>:int32]
	branch a0 == 0<32> l230A8E98
l230A8E98:
	word32 a0_30
	call a5_17 (retsize: 0;)
		uses: a0:s0_10,a1:fp + -28<i32>,a2:0<i32>,ra:ra,s0:s0_10,s1:a2
		defs: a0:a0_30,s0:s0_25,s1:s1_26
	branch a0_30 != -1<i32> l230A8E84
l230A8E6C:
	word32 a0_44
	call a5_17 (retsize: 0;)
		uses: a0:s0_10,a1:a0,a2:a1,ra:ra,s0:s0_10,s1:a2
		defs: a0:a0_44,s0:s0_39,s1:s1_40
	branch a0_44 == -1<i32> l230A8EB0
l230A8EB0:
	Mem48[s1_26:word32] = 0<32>
	Mem51[s0_25:word32] = 138<i32>
	return
l230A8E84:
	return
wcrtomb_exit:


void _wctomb_r()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a5 t1
// Preserved: sp
_wctomb_r_entry:
l230A8ED0:
	call Mem0[0x4200E658<p32>:int32] (retsize: 0;)
		uses: a5:0x4200E578<p32>
	return
_wctomb_r_exit:


void __ascii_wctomb(word32 a0, word32 a1, word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut:
// Trashed: a0 a5
// Preserved: sp
__ascii_wctomb_entry:
l230A8EE0:
	branch a1 == 0<32> l230A8F08
l230A8F08:
	return
l230A8EE4:
	branch a2 >u 255<i32> l230A8EF8
l230A8EF8:
	Mem9[a0:word32] = 138<i32>
	return
l230A8EEC:
	Mem11[a1:byte] = SLICE(a2, byte, 0)
	return
__ascii_wctomb_exit:


void _write_r(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __swrite
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a7
// Preserved: ra s0 sp
_write_r_entry:
l230A8F10:
	Mem18[0x420277A8<p32>:word32] = 0<32>
	branch _write(a1) == -1<i32> l230A8F54
l230A8F54:
	word32 a5_27 = Mem18[0x420267A8<p32>:int32]
	branch a5_27 == 0<32> l230A8F44
l230A8F64:
	Mem28[a0:word32] = a5_27
	return
l230A8F44:
	return
_write_r_exit:


void _close_r(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __sclose
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a7
// Preserved: ra s0 sp
_close_r_entry:
l230A8F78:
	Mem11[0x420277A8<p32>:word32] = 0<32>
	branch _close(a1) == -1<i32> l230A8FB0
l230A8FB0:
	word32 a5_24 = Mem13[0x420267A8<p32>:int32]
	branch a5_24 == 0<32> l230A8FA0
l230A8FC0:
	Mem25[a0:word32] = a5_24
	return
l230A8FA0:
	return
_close_r_exit:


void _fclose_r(word32 ra, word32 a0, word32 a1, word32 s2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fclose
// MayUse:  a0:[0..31] a1:[0..31] ra:[0..31] s2:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 t0 t1
// Preserved: ra s0 s1 s2 sp
_fclose_r_entry:
l230A8FD4:
	branch a1 == 0<32> l230A9008
l230A8FEC:
	word32 s1_14 = a0
	word32 s0_15 = a1
	branch a0 == 0<32> l230A9000
l230A8FF8:
	branch Mem11[a0 + 56<i32>:int32] == 0<32> l230A90B4
l230A90B4:
	word32 a3_232
	__sinit(ra, a0, out a3_232)
	branch CONVERT(Mem11[a1 + 12<i32>:int16], int16, int32) == 0<32> l230A9008
l230A90C0:
l230A9000:
	branch CONVERT(Mem11[a1 + 12<i32>:int16], int16, int32) != 0<32> l230A9028
l230A9028:
	word32 a3_231
	word32 a0_38 = __sflush_r(ra, a0, a1, s2, out a3_231)
	word32 a5_45 = Mem11[a1 + 44<i32>:int32]
	branch a5_45 == 0<32> l230A9050
l230A9040:
	word32 a0_57
	word32 a5_58
	word32 a2_59
	word32 a3_60
	word32 a4_61
	word32 t0_62
	word32 t1_63
	call a5_45 (retsize: 0;)
		uses: a0:a0,a1:Mem11[a1 + 28<i32>:int32],a2:a2_59,a3:a3_60,a4:a4_61,a5:a5_58,ra:ra,s0:a1,s1:a0,s2:a0_38,t0:t0_62,t1:t1_63
		defs: a0:a0_57,a2:a2_59,a3:a3_60,a4:a4_61,a5:a5_58,s0:s0_53,s1:s1_54,t0:t0_62,t1:t1_63
	branch a0_57 < 0<32> l230A90C4
l230A90C4:
	branch (CONVERT(Mem11[s0_15 + 12<i32>:uint16], uint16, word32) & 128<i32>) == 0<32> l230A905C
l230A9050:
	branch (CONVERT(Mem11[s0_15 + 12<i32>:uint16], uint16, word32) & 128<i32>) != 0<32> l230A90D4
l230A90D4:
	_free_r(s1_14, Mem11[s0_15 + 16<i32>:int32])
l230A905C:
	word32 a1_79 = Mem11[s0_15 + 48<i32>:int32]
	branch a1_79 == 0<32> l230A9078
l230A9064:
	branch a1_79 == s0_15 + 64<i32> l230A9074
l230A906C:
	_free_r(s1_14, a1_79)
l230A9074:
	Mem84[s0_15 + 48<i32>:word32] = 0<32>
l230A9078:
	word32 a1_87 = Mem86[s0_15 + 68<i32>:int32]
	branch a1_87 == 0<32> l230A908C
l230A9080:
	_free_r(s1_14, a1_87)
	Mem91[s0_15 + 68<i32>:word32] = 0<32>
l230A908C:
	__sfp_lock_acquire()
	Mem93[s0_15 + 12<i32>:word16] = 0<16>
	__sfp_lock_release()
	return
l230A9008:
	return
_fclose_r_exit:


void fclose(word32 ra, word32 a0, word32 s2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] ra:[0..31] s2:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 t0 t1
// Preserved: sp
fclose_entry:
l230A90E4:
	word32 a0_8 = Mem0[0x4200ECFC<p32>:int32]
l230A90F4_thunk__fclose_r:
	_fclose_r(ra, a0_8, a0, s2)
	return
fclose_exit:


word32 _fstat_r(word32 a0, word32 a1, word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __swhatbuf_r
// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: ra s0 sp
_fstat_r_entry:
l230A90F8:
	Mem16[0x420267A8<p32>:word32] = 0<32>
	branch _fstat(a1, a2) == -1<i32> l230A9138
l230A9138:
	word32 a5_35 = Mem16[0x420267A8<p32>:int32]
	branch a5_35 == 0<32> l230A9128
l230A9148:
	Mem36[a0:word32] = a5_35
	return
l230A9128:
	return
_fstat_r_exit:


word32 _isatty_r(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __smakebuf_r
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: ra s0 sp
_isatty_r_entry:
l230A915C:
	Mem11[0x420267A8<p32>:word32] = 0<32>
	branch _isatty(a1) == -1<i32> l230A9194
l230A9194:
	word32 a5_32 = Mem13[0x420267A8<p32>:int32]
	branch a5_32 == 0<32> l230A9184
l230A91A4:
	Mem33[a0:word32] = a5_32
	return
l230A9184:
	return
_isatty_r_exit:


word32 _lseek_r(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __swrite
//      __sseek
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a7
// Preserved: ra s0 sp
_lseek_r_entry:
l230A91B8:
	Mem18[0x420267A8<p32>:word32] = 0<32>
	branch _lseek(a1) == -1<i32> l230A91FC
l230A91FC:
	word32 a5_27 = Mem18[0x420267A8<p32>:int32]
	branch a5_27 == 0<32> l230A91EC
l230A920C:
	Mem28[a0:word32] = a5_27
	return
l230A91EC:
	return
_lseek_r_exit:


word32 _read_r(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      __sread
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a7
// Preserved: ra s0 sp
_read_r_entry:
l230A9220:
	Mem18[0x420267A8<p32>:word32] = 0<32>
	branch _read(a1) == -1<i32> l230A9264
l230A9264:
	word32 a5_27 = Mem18[0x420267A8<p32>:int32]
	branch a5_27 == 0<32> l230A9254
l230A9274:
	Mem28[a0:word32] = a5_27
	return
l230A9254:
	return
_read_r_exit:


word32 _close(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _close_r
// MayUse:  a0:[0..31]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a7
// Preserved: ra s0 sp
_close_entry:
l230A9288:
	__syscall()
	word32 s0_15 = a0
	branch a0 < 0<32> l230A92CC
l230A92CC:
	word32 a5_38
	Mem19[__errno(out a5_38):word32] = 0<32> - a0
	s0_15 = -1<i32>
l230A92B8:
	return s0_15
_close_exit:


void _exit(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      abort
// MayUse:  a0:[0..31]
// LiveOut:
// Trashed:
// Preserved: sp
// Terminates process
_exit_exit:
_exit_entry:
l230A92E0:
	__syscall()
	branch a0 < 0<32> l230A9304
l230A9304:
	word32 a5_22
	Mem19[__errno(out a5_22):word32] = 0<32> - a0
l230A9320:
l230A9300:


word32 _fstat(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _fstat_r
//      _isatty
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: ra s0 s1 sp
_fstat_entry:
l230A9324:
	__syscall()
	word32 s0_19 = a0
	branch a0 < 0<32> l230A9380
l230A9380:
	word32 a5_55
	Mem23[__errno(out a5_55):word32] = 0<32> - a0
	s0_19 = -1<i32>
l230A935C:
	_conv_stat(a1, fp + -144<i32>)
	return s0_19
_fstat_exit:


void _getpid()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _getpid_r
// MayUse: 
// LiveOut:
// Trashed: a0
// Preserved: sp
_getpid_entry:
l230A9394:
	return
_getpid_exit:


word32 _isatty(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _isatty_r
// MayUse:  a0:[0..31]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: ra sp
_isatty_entry:
l230A939C:
	branch _fstat(a0, fp + -104<i32>) == -1<i32> l230A93CC
l230A93CC:
	return 0<i32>
l230A93B4:
	return dwLoc64 >>u 0xD<u32> & 1<i32>
_isatty_exit:


word32 _kill()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _kill_r
// MayUse: 
// LiveOut: a0
// Trashed: a0 a5
// Preserved: ra sp
_kill_entry:
l230A93DC:
	word32 a5_14
	Mem10[__errno(out a5_14):word32] = 22<i32>
	return -1<i32>
_kill_exit:


word32 _lseek(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _lseek_r
// MayUse:  a0:[0..31]
// LiveOut: a0
// Trashed: a0 a3 a4 a5 a7
// Preserved: ra s0 sp
_lseek_entry:
l230A9400:
	__syscall()
	word32 s0_13 = a0
	branch a0 < 0<32> l230A943C
l230A943C:
	word32 a5_34
	Mem17[__errno(out a5_34):word32] = 0<32> - a0
	s0_13 = -1<i32>
l230A9428:
	return s0_13
_lseek_exit:


word32 _read(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _read_r
// MayUse:  a0:[0..31]
// LiveOut: a0
// Trashed: a0 a3 a4 a5 a7
// Preserved: ra s0 sp
_read_entry:
l230A9450:
	__syscall()
	word32 s0_13 = a0
	branch a0 < 0<32> l230A948C
l230A948C:
	word32 a5_34
	Mem17[__errno(out a5_34):word32] = 0<32> - a0
	s0_13 = -1<i32>
l230A9478:
	return s0_13
_read_exit:


word32 _sbrk(word32 a0, ptr32 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _sbrk_r
// MayUse:  a0:[0..31]
// LiveOut: a0 a3
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t1
// Preserved: ra sp
_sbrk_entry:
l230A94A0:
	word32 a5_19 = Mem0[0x4200F734<p32>:int32]
	branch a5_19 != 0<32> l230A94EC
l230A94BC:
	__syscall()
	branch false l230A9530
l230A94E0:
	Mem21[0x4200F734<p32>:word32] = 0<i32>
	a5_19 = 0<i32>
l230A94EC:
	__syscall()
	word32 a5_32 = Mem31[0x4200F734<p32>:int32]
	word32 a0_24 = a0 + a5_19
	branch a0_24 != a0 + a5_32 l230A9530
l230A9530:
	word32 a5_71
	Mem41[__errno(out a5_71):word32] = 12<i32>
	a3Out = <invalid>
	return -1<i32>
l230A9518:
	Mem46[0x4200F734<p32>:word32] = a0_24
	a3Out = <invalid>
	return a5_32
_sbrk_exit:


word32 _stat(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _stat_r
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: ra s0 s1 sp
_stat_entry:
l230A954C:
	__syscall()
	word32 s0_19 = a0
	branch a0 < 0<32> l230A95A8
l230A95A8:
	word32 a5_55
	Mem23[__errno(out a5_55):word32] = 0<32> - a0
	s0_19 = -1<i32>
l230A9584:
	_conv_stat(a1, fp + -144<i32>)
	return s0_19
_stat_exit:


word32 _write(word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _write_r
// MayUse:  a0:[0..31]
// LiveOut: a0
// Trashed: a0 a3 a4 a5 a7
// Preserved: ra s0 sp
_write_entry:
l230A95BC:
	__syscall()
	word32 s0_13 = a0
	branch a0 < 0<32> l230A95F8
l230A95F8:
	word32 a5_34
	Mem17[__errno(out a5_34):word32] = 0<32> - a0
	s0_13 = -1<i32>
l230A95E4:
	return s0_13
_write_exit:


void _conv_stat(word32 a0, word32 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      _fstat
//      _stat
// MayUse:  a0:[0..31] a1:[0..31]
// LiveOut:
// Trashed: a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6
// Preserved: s0 s1 s2 sp
_conv_stat_entry:
l230A960C:
	word32 t2_6 = Mem0[a1 + 20<i32>:int32]
	word32 t0_7 = Mem0[a1 + 24<i32>:int32]
	word32 t6_8 = Mem0[a1 + 28<i32>:int32]
	word32 t5_9 = Mem0[a1 + 32<i32>:int32]
	word32 t4_10 = Mem0[a1 + 48<i32>:int32]
	word32 t3_11 = Mem0[a1 + 64<i32>:int32]
	word32 t1_12 = Mem0[a1 + 56<i32>:int32]
	word32 a6_13 = Mem0[a1 + 72<i32>:int32]
	word32 a7_14 = Mem0[a1 + 76<i32>:int32]
	word32 a2_15 = Mem0[a1 + 88<i32>:int32]
	word32 s0_20 = Mem19[a1 + 16<i32>:int32]
	word32 s1_21 = Mem19[a1 + 8<i32>:int32]
	word32 a3_25 = Mem23[a1 + 92<i32>:int32]
	word32 a4_26 = Mem23[a1 + 104<i32>:int32]
	word32 a5_27 = Mem23[a1 + 108<i32>:int32]
	Mem29[a0:word16] = Mem23[a1:word16]
	Mem30[a0 + 2<i32>:word16] = SLICE(s1_21, word16, 0)
	Mem31[a0 + 4<i32>:word32] = s0_20
	Mem32[a0 + 8<i32>:word16] = SLICE(t2_6, word16, 0)
	Mem33[a0 + 10<i32>:word16] = SLICE(t0_7, word16, 0)
	Mem34[a0 + 12<i32>:word16] = SLICE(t6_8, word16, 0)
	Mem35[a0 + 14<i32>:word16] = SLICE(t5_9, word16, 0)
	Mem36[a0 + 16<i32>:word32] = t4_10
	Mem37[a0 + 72<i32>:word32] = t3_11
	Mem38[a0 + 68<i32>:word32] = t1_12
	Mem39[a0 + 24<i32>:word32] = a6_13
	Mem40[a0 + 28<i32>:word32] = a7_14
	Mem41[a0 + 40<i32>:word32] = a2_15
	Mem42[a0 + 44<i32>:word32] = a3_25
	Mem44[a0 + 56<i32>:word32] = a4_26
	Mem45[a0 + 60<i32>:word32] = a5_27
	return
_conv_stat_exit:


