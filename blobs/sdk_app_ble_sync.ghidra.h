typedef unsigned char   undefined;

typedef unsigned char    bool;
typedef unsigned char    byte;
typedef unsigned int    dword;
typedef long long    longlong;
typedef unsigned long long    qword;
typedef unsigned char    uchar;
typedef unsigned int    uint;
typedef unsigned long    ulong;
typedef unsigned long long    ulonglong;
typedef unsigned char    undefined1;
typedef unsigned short    undefined2;
typedef unsigned int    undefined3;
typedef unsigned int    undefined4;
typedef unsigned long long    undefined5;
typedef unsigned long long    undefined6;
typedef unsigned long long    undefined7;
typedef unsigned long long    undefined8;
typedef unsigned short    ushort;
typedef unsigned short    word;
#define unkbyte9   unsigned long long
#define unkbyte10   unsigned long long
#define unkbyte11   unsigned long long
#define unkbyte12   unsigned long long
#define unkbyte13   unsigned long long
#define unkbyte14   unsigned long long
#define unkbyte15   unsigned long long
#define unkbyte16   unsigned long long

#define unkuint9   unsigned long long
#define unkuint10   unsigned long long
#define unkuint11   unsigned long long
#define unkuint12   unsigned long long
#define unkuint13   unsigned long long
#define unkuint14   unsigned long long
#define unkuint15   unsigned long long
#define unkuint16   unsigned long long

#define unkint9   long long
#define unkint10   long long
#define unkint11   long long
#define unkint12   long long
#define unkint13   long long
#define unkint14   long long
#define unkint15   long long
#define unkint16   long long

#define unkfloat1   float
#define unkfloat2   float
#define unkfloat3   float
#define unkfloat5   double
#define unkfloat6   double
#define unkfloat7   double
#define unkfloat9   long double
#define unkfloat11   long double
#define unkfloat12   long double
#define unkfloat13   long double
#define unkfloat14   long double
#define unkfloat15   long double
#define unkfloat16   long double

#define BADSPACEBASE   void
#define code   void

typedef struct stat stat, *Pstat;

typedef ulonglong __u_quad_t;

typedef __u_quad_t __dev_t;

typedef ulong __ino_t;

typedef uint __mode_t;

typedef uint __nlink_t;

typedef uint __uid_t;

typedef uint __gid_t;

typedef long __off_t;

typedef long __blksize_t;

typedef long __blkcnt_t;

typedef struct timespec timespec, *Ptimespec;

typedef long __time_t;

struct timespec {
    __time_t tv_sec;
    long tv_nsec;
};

struct stat {
    __dev_t st_dev;
    ushort __pad1;
    __ino_t st_ino;
    __mode_t st_mode;
    __nlink_t st_nlink;
    __uid_t st_uid;
    __gid_t st_gid;
    __dev_t st_rdev;
    ushort __pad2;
    __off_t st_size;
    __blksize_t st_blksize;
    __blkcnt_t st_blocks;
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
    ulong __unused4;
    ulong __unused5;
};

typedef undefined complex long double[32];

typedef qword complex float;

typedef undefined complex double[16];

typedef bool _Bool;

typedef struct trpc_env_tag trpc_env_tag, *Ptrpc_env_tag;

typedef char int8_t;

typedef short __int16_t;

typedef __int16_t int16_t;

struct trpc_env_tag {
    int8_t power_dbm_max_rf;
    int8_t power_dbm_min_rf;
    int8_t power_dbm_lim_reg;
    undefined field_0x3;
    int16_t channel_freq;
    int8_t temperature;
    int8_t temperature_compensate;
};

typedef struct cfg80211_bss_select_adjust cfg80211_bss_select_adjust, *Pcfg80211_bss_select_adjust;

typedef enum nl80211_band {
    NL80211_BAND_2GHZ=0,
    NL80211_BAND_5GHZ=1,
    NL80211_BAND_60GHZ=2,
    NUM_NL80211_BANDS=3
} nl80211_band;

typedef int8_t s8;

struct cfg80211_bss_select_adjust {
    enum nl80211_band band;
    s8 delta;
};

typedef enum ieee80211_channel_flags {
    IEEE80211_CHAN_DISABLED=1,
    IEEE80211_CHAN_INDOOR_ONLY=512,
    IEEE80211_CHAN_IR_CONCURRENT=1024,
    IEEE80211_CHAN_NO_10MHZ=4096,
    IEEE80211_CHAN_NO_160MHZ=256,
    IEEE80211_CHAN_NO_20MHZ=2048,
    IEEE80211_CHAN_NO_80MHZ=-128,
    IEEE80211_CHAN_NO_HT40MINUS=32,
    IEEE80211_CHAN_NO_HT40PLUS=16,
    IEEE80211_CHAN_NO_IR=2,
    IEEE80211_CHAN_NO_OFDM=64,
    IEEE80211_CHAN_RADAR=8
} ieee80211_channel_flags;

typedef struct ieee80211_channel ieee80211_channel, *Pieee80211_channel;

typedef ushort __uint16_t;

typedef __uint16_t uint16_t;

typedef uint16_t u16;

typedef ulong __uint32_t;

typedef __uint32_t uint32_t;

typedef uint32_t u32;

typedef enum nl80211_dfs_state {
    NL80211_DFS_AVAILABLE=2,
    NL80211_DFS_UNAVAILABLE=1,
    NL80211_DFS_USABLE=0
} nl80211_dfs_state;

struct ieee80211_channel {
    enum nl80211_band band;
    undefined field_0x1;
    u16 center_freq;
    u16 hw_value;
    undefined field_0x6;
    undefined field_0x7;
    u32 flags;
    int max_antenna_gain;
    int max_power;
    int max_reg_power;
    _Bool beacon_found;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
    u32 orig_flags;
    int orig_mag;
    int orig_mpwr;
    enum nl80211_dfs_state dfs_state;
    undefined field_0x29;
    undefined field_0x2a;
    undefined field_0x2b;
    ulong dfs_state_entered;
    uint dfs_cac_ms;
};

typedef struct ieee80211_dot_d ieee80211_dot_d, *Pieee80211_dot_d;

struct ieee80211_dot_d {
    char * code;
    int channel_num;
    struct ieee80211_channel * channels;
};

typedef struct cfg80211_connect_params cfg80211_connect_params, *Pcfg80211_connect_params;

typedef uchar __uint8_t;

typedef __uint8_t uint8_t;

typedef uint8_t u8;

typedef uint size_t;

typedef enum nl80211_auth_type {
    NL80211_AUTHTYPE_AUTOMATIC=8,
    NL80211_AUTHTYPE_FILS_PK=7,
    NL80211_AUTHTYPE_FILS_SK=5,
    NL80211_AUTHTYPE_FILS_SK_PFS=6,
    NL80211_AUTHTYPE_FT=2,
    NL80211_AUTHTYPE_MAX=7,
    NL80211_AUTHTYPE_NETWORK_EAP=3,
    NL80211_AUTHTYPE_OPEN_SYSTEM=0,
    NL80211_AUTHTYPE_SAE=4,
    NL80211_AUTHTYPE_SHARED_KEY=1,
    __NL80211_AUTHTYPE_NUM=8
} nl80211_auth_type;

typedef enum nl80211_mfp {
    NL80211_MFP_NO=0,
    NL80211_MFP_REQUIRED=1
} nl80211_mfp;

typedef struct cfg80211_crypto_settings cfg80211_crypto_settings, *Pcfg80211_crypto_settings;

typedef struct ieee80211_ht_cap ieee80211_ht_cap, *Pieee80211_ht_cap;

typedef struct cfg80211_bss_selection cfg80211_bss_selection, *Pcfg80211_bss_selection;

typedef uint16_t __be16;

typedef struct key_params key_params, *Pkey_params;

typedef uint16_t __le16;

typedef struct ieee80211_mcs_info ieee80211_mcs_info, *Pieee80211_mcs_info;

typedef uint32_t __le32;

typedef enum nl80211_bss_select_attr {
    NL80211_BSS_SELECT_ATTR_BAND_PREF=2,
    NL80211_BSS_SELECT_ATTR_MAX=3,
    NL80211_BSS_SELECT_ATTR_RSSI=1,
    NL80211_BSS_SELECT_ATTR_RSSI_ADJUST=3,
    __NL80211_BSS_SELECT_ATTR_AFTER_LAST=4,
    __NL80211_BSS_SELECT_ATTR_INVALID=0
} nl80211_bss_select_attr;

typedef union anon_union_for_param anon_union_for_param, *Panon_union_for_param;

union anon_union_for_param {
    enum nl80211_band band_pref;
    struct cfg80211_bss_select_adjust adjust;
};

struct cfg80211_bss_selection {
    enum nl80211_bss_select_attr behaviour;
    union anon_union_for_param param;
};

struct cfg80211_crypto_settings {
    u32 wpa_versions;
    u32 cipher_group;
    int n_ciphers_pairwise;
    u32 ciphers_pairwise[5];
    int n_akm_suites;
    u32 akm_suites[2];
    _Bool control_port;
    undefined field_0x2d;
    __be16 control_port_ethertype;
    _Bool control_port_no_encrypt;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct key_params * wep_keys;
    int wep_tx_key;
};

struct ieee80211_mcs_info {
    u8 rx_mask[10];
    __le16 rx_highest;
    u8 tx_params;
    u8 reserved[3];
};

struct ieee80211_ht_cap {
    __le16 cap_info;
    u8 ampdu_params_info;
    undefined field_0x3;
    struct ieee80211_mcs_info mcs;
    __le16 extended_ht_cap_info;
    undefined field_0x16;
    undefined field_0x17;
    __le32 tx_BF_cap_info;
    u8 antenna_selection_info;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
};

struct cfg80211_connect_params {
    struct ieee80211_channel channel;
    struct ieee80211_channel * channel_hint;
    u8 * bssid;
    u8 * bssid_hint;
    u8 * ssid;
    size_t ssid_len;
    enum nl80211_auth_type auth_type;
    undefined field_0x49;
    undefined field_0x4a;
    undefined field_0x4b;
    u8 * ie;
    size_t ie_len;
    _Bool privacy;
    enum nl80211_mfp mfp;
    undefined field_0x56;
    undefined field_0x57;
    struct cfg80211_crypto_settings crypto;
    u8 * key;
    u8 * pmk;
    u8 key_len;
    u8 pmk_len;
    u8 key_idx;
    undefined field_0x9f;
    u32 flags;
    int bg_scan_period;
    struct ieee80211_ht_cap ht_capa;
    struct ieee80211_ht_cap ht_capa_mask;
    _Bool pbss;
    struct cfg80211_bss_selection bss_select;
    u8 * prev_bssid;
};

struct key_params {
    u8 * key;
    u8 * seq;
    int key_len;
    int seq_len;
    u32 cipher;
};

typedef union anon_union.conflict13 anon_union.conflict13, *Panon_union.conflict13;

union anon_union.conflict13 {
    enum nl80211_band band_pref;
    struct cfg80211_bss_select_adjust adjust;
};

typedef struct ieee80211_sta_ht_cap ieee80211_sta_ht_cap, *Pieee80211_sta_ht_cap;

struct ieee80211_sta_ht_cap {
    u16 cap;
    _Bool ht_supported;
    u8 ampdu_factor;
    u8 ampdu_density;
    undefined field_0x5;
    struct ieee80211_mcs_info mcs;
};

typedef union anon_union.conflict17 anon_union.conflict17, *Panon_union.conflict17;

union anon_union.conflict17 {
    enum nl80211_band band_pref;
    struct cfg80211_bss_select_adjust adjust;
};

typedef enum wiphy_flags {
    WIPHY_FLAG_4ADDR_AP=32,
    WIPHY_FLAG_4ADDR_STATION=64,
    WIPHY_FLAG_AP_PROBE_RESP_OFFLOAD=524288,
    WIPHY_FLAG_AP_UAPSD=16384,
    WIPHY_FLAG_CONTROL_PORT_PROTOCOL=-128,
    WIPHY_FLAG_HAS_CHANNEL_SWITCH=8388608,
    WIPHY_FLAG_HAS_REMAIN_ON_CHANNEL=2097152,
    WIPHY_FLAG_HAS_STATIC_WEP=16777216,
    WIPHY_FLAG_HAVE_AP_SME=131072,
    WIPHY_FLAG_IBSS_RSN=256,
    WIPHY_FLAG_MESH_AUTH=1024,
    WIPHY_FLAG_NETNS_OK=8,
    WIPHY_FLAG_OFFCHAN_TX=1048576,
    WIPHY_FLAG_PS_ON_BY_DEFAULT=16,
    WIPHY_FLAG_REPORTS_OBSS=262144,
    WIPHY_FLAG_SUPPORTS_5_10_MHZ=4194304,
    WIPHY_FLAG_SUPPORTS_FW_ROAM=8192,
    WIPHY_FLAG_SUPPORTS_SCHED_SCAN=2048,
    WIPHY_FLAG_SUPPORTS_TDLS=-32768,
    WIPHY_FLAG_TDLS_EXTERNAL_SETUP=65536
} wiphy_flags;

typedef enum KE_EVENT_STATUS {
    KE_EVENT_ALREADY_EXISTS=4,
    KE_EVENT_CAPA_EXCEEDED=3,
    KE_EVENT_FAIL=1,
    KE_EVENT_OK=0,
    KE_EVENT_UNKNOWN=2
} KE_EVENT_STATUS;

typedef struct rx_msg_struct rx_msg_struct, *Prx_msg_struct;

struct rx_msg_struct {
    uint8_t pkt_type;
    uint16_t src_id;
    uint8_t * param;
    uint8_t param_len;
};

typedef struct ble_ke_event_env_tag ble_ke_event_env_tag, *Pble_ke_event_env_tag;

typedef void (* p_callback_t)(void);

struct ble_ke_event_env_tag {
    uint32_t event_field;
    p_callback_t callback[10];
    uint8_t state;
    undefined field_0x2d;
    undefined field_0x2e;
    undefined field_0x2f;
};

typedef struct ke_evt_tag ke_evt_tag, *Pke_evt_tag;

struct ke_evt_tag {
    void (* func)(int);
    int param;
};

typedef struct cipher_key_buf cipher_key_buf, *Pcipher_key_buf;

typedef struct cipher_key_buf cipher_key_buf_t;

typedef struct cipher_key_t cipher_key_t, *Pcipher_key_t;

typedef union ckd ckd, *Pckd;

typedef struct eapolHskData_t eapolHskData_t, *PeapolHskData_t;

typedef uchar UINT8;

typedef struct KeyData_t KeyData_t, *PKeyData_t;

typedef ulong UINT32;

typedef ushort UINT16;

struct KeyData_t {
    UINT8 Key[16];
    UINT8 RxMICKey[8];
    UINT8 TxMICKey[8];
    UINT32 TxIV32;
    UINT16 TxIV16;
    UINT16 KeyIndex;
};

struct eapolHskData_t {
    UINT8 ANonce[32];
    struct KeyData_t pwsKeyData;
};

union ckd {
    struct eapolHskData_t hskData;
};

struct cipher_key_t {
    union ckd ckd;
};

struct cipher_key_buf {
    struct cipher_key_t cipher_key;
};

typedef void * __gnuc_va_list;

typedef struct bt_dev bt_dev, *Pbt_dev;

typedef struct bt_addr_le_t bt_addr_le_t, *Pbt_addr_le_t;

typedef uint8_t u8_t;

typedef uint16_t u16_t;

typedef struct k_work k_work, *Pk_work;

typedef int atomic_t;

typedef struct bt_dev_le bt_dev_le, *Pbt_dev_le;

typedef struct k_sem k_sem, *Pk_sem;

typedef struct net_buf net_buf, *Pnet_buf;

typedef struct k_fifo k_fifo, *Pk_fifo;

typedef struct bt_hci_driver bt_hci_driver, *Pbt_hci_driver;

typedef struct bt_addr_t bt_addr_t, *Pbt_addr_t;

typedef ulonglong u64_t;

typedef struct bl_hdl_t bl_hdl_t, *Pbl_hdl_t;

typedef struct bl_hdl_t _sem_t;

typedef struct _dnode _dnode, *P_dnode;

typedef struct _dnode sys_dlist_t;

typedef union anon_union_for_field_0 anon_union_for_field_0, *Panon_union_for_field_0;

typedef union anon_union_for_field_4 anon_union_for_field_4, *Panon_union_for_field_4;

typedef struct k_queue k_queue, *Pk_queue;

typedef enum bt_hci_driver_bus {
    BT_HCI_DRIVER_BUS_I2C=8,
    BT_HCI_DRIVER_BUS_IPM=9,
    BT_HCI_DRIVER_BUS_PCCARD=2,
    BT_HCI_DRIVER_BUS_PCI=5,
    BT_HCI_DRIVER_BUS_RS232=4,
    BT_HCI_DRIVER_BUS_SDIO=6,
    BT_HCI_DRIVER_BUS_SPI=7,
    BT_HCI_DRIVER_BUS_UART=3,
    BT_HCI_DRIVER_BUS_USB=1,
    BT_HCI_DRIVER_BUS_VIRTUAL=0
} bt_hci_driver_bus;

typedef uint u32_t.conflict;


// WARNING! conflicting data type names: /DWARF/dlist.h/_dnode/anon_union_for_field_0 - /DWARF/buf.h/net_buf/anon_union_for_field_0

typedef union anon_union_for_field_1 anon_union_for_field_1, *Panon_union_for_field_1;

typedef struct _snode _snode, *P_snode;

typedef struct _snode sys_snode_t;

typedef struct anon_struct.conflict6 anon_struct.conflict6, *Panon_struct.conflict6;

typedef struct net_buf_simple net_buf_simple, *Pnet_buf_simple;

union anon_union_for_field_1 {
    struct _dnode * tail;
    struct _dnode * prev;
};

struct _dnode {
    union anon_union_for_field_0 field_0;
    union anon_union_for_field_1 field_1;
};

struct k_queue {
    void * hdl;
    sys_dlist_t poll_events;
};

struct k_fifo {
    struct k_queue _queue;
};

struct k_work {
    void * _reserved;
    void (* handler)(struct k_work *);
    atomic_t flags[1];
};

struct bl_hdl_t {
    void * hdl;
};

struct k_sem {
    _sem_t sem;
    sys_dlist_t poll_events;
};

struct bt_dev_le {
    u8_t features[8];
    u64_t states;
    u16_t mtu;
    undefined field_0x12;
    undefined field_0x13;
    struct k_sem pkts;
    u8_t rl_size;
    u8_t rl_entries;
    u8_t wl_size;
    u8_t wl_entries;
    undefined field_0x24;
    undefined field_0x25;
    undefined field_0x26;
    undefined field_0x27;
};

struct bt_addr_t {
    u8_t val[6];
};

struct bt_addr_le_t {
    u8_t type;
    struct bt_addr_t a;
};

struct bt_dev {
    struct bt_addr_le_t id_addr[1];
    u8_t id_count;
    u8_t adv_id;
    struct bt_addr_le_t random_addr;
    u8_t hci_version;
    u8_t lmp_version;
    u16_t hci_revision;
    u16_t lmp_subversion;
    u16_t manufacturer;
    u8_t features[1][8];
    u8_t supported_commands[64];
    struct k_work init;
    atomic_t flags[1];
    struct bt_dev_le le;
    struct k_sem ncmd_sem;
    struct net_buf * sent_cmd;
    struct k_fifo cmd_tx_queue;
    struct bt_hci_driver * drv;
    char name[30];
    undefined field_0xd6;
    undefined field_0xd7;
};

struct _snode {
    struct _snode * next;
};

union anon_union_for_field_0 {
    sys_snode_t node;
};

struct net_buf_simple {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

struct anon_struct.conflict6 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

union anon_union_for_field_4 {
    struct anon_struct.conflict6 field_0;
    struct net_buf_simple b;
};

struct net_buf {
    union anon_union_for_field_0 field_0;
    u8_t ref;
    u8_t flags;
    u8_t pool_id;
    undefined field_0x7;
    union anon_union_for_field_4 field_4;
    u8_t user_data[10];
    undefined field_0x1e;
    undefined field_0x1f;
};

struct bt_hci_driver {
    char * name;
    enum bt_hci_driver_bus bus;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    u32_t.conflict quirks;
    int (* open)(void);
    int (* send)(struct net_buf *);
};

typedef struct stats_mem stats_mem, *Pstats_mem;

typedef u16_t mem_size_t;

struct stats_mem {
    u16_t err;
    mem_size_t avail;
    mem_size_t used;
    mem_size_t max;
    u16_t illegal;
};

typedef struct stats_proto stats_proto, *Pstats_proto;

struct stats_proto {
    u16_t xmit;
    u16_t recv;
    u16_t fw;
    u16_t drop;
    u16_t chkerr;
    u16_t lenerr;
    u16_t memerr;
    u16_t rterr;
    u16_t proterr;
    u16_t opterr;
    u16_t err;
    u16_t cachehit;
};

typedef struct stats_ stats_, *Pstats_;

typedef struct stats_igmp stats_igmp, *Pstats_igmp;

typedef struct stats_sys stats_sys, *Pstats_sys;

typedef struct stats_syselem stats_syselem, *Pstats_syselem;

struct stats_igmp {
    u16_t xmit;
    u16_t recv;
    u16_t drop;
    u16_t chkerr;
    u16_t lenerr;
    u16_t memerr;
    u16_t proterr;
    u16_t rx_v1;
    u16_t rx_group;
    u16_t rx_general;
    u16_t rx_report;
    u16_t tx_join;
    u16_t tx_leave;
    u16_t tx_report;
};

struct stats_syselem {
    u16_t used;
    u16_t max;
    u16_t err;
};

struct stats_sys {
    struct stats_syselem sem;
    struct stats_syselem mutex;
    struct stats_syselem mbox;
};

struct stats_ {
    struct stats_proto link;
    struct stats_proto etharp;
    struct stats_proto ip;
    struct stats_proto icmp;
    struct stats_igmp igmp;
    struct stats_proto udp;
    struct stats_proto tcp;
    struct stats_mem mem;
    undefined field_0xb6;
    undefined field_0xb7;
    struct stats_mem * memp[15];
    struct stats_sys sys;
    undefined field_0x106;
    undefined field_0x107;
};

typedef struct event_handler event_handler, *Pevent_handler;

struct event_handler {
    u8_t event;
    u8_t min_len;
    undefined field_0x2;
    undefined field_0x3;
    void (* handler)(struct net_buf *);
};

typedef struct bt_ad bt_ad, *Pbt_ad;

typedef struct bt_data bt_data, *Pbt_data;

struct bt_data {
    u8_t type;
    u8_t data_len;
    undefined field_0x2;
    undefined field_0x3;
    u8_t * data;
};

struct bt_ad {
    struct bt_data * data;
    size_t len;
};

typedef struct cmd_data cmd_data, *Pcmd_data;

typedef struct cmd_state_set cmd_state_set, *Pcmd_state_set;

struct cmd_data {
    u8_t status;
    undefined field_0x1;
    u16_t opcode;
    struct cmd_state_set * state;
    struct k_sem * sync;
};

struct cmd_state_set {
    atomic_t * target;
    int bit;
    _Bool val;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
};

typedef struct acl_data acl_data, *Pacl_data;

struct acl_data {
    u8_t type;
    u8_t id;
    u16_t handle;
};

typedef uchar uint8;

typedef short SINT16;

typedef enum Status_e {
    FAIL=1,
    FW_SUCCESS=0
} Status_e;

typedef long SINT32;

typedef enum wlan_security_type {
    WLAN_SECURITY_EAP_TLS=6,
    WLAN_SECURITY_NONE=0,
    WLAN_SECURITY_WEP_OPEN=1,
    WLAN_SECURITY_WEP_SHARED=2,
    WLAN_SECURITY_WILDCARD=7,
    WLAN_SECURITY_WPA=3,
    WLAN_SECURITY_WPA2=4,
    WLAN_SECURITY_WPA_WPA2_MIXED=5
} wlan_security_type;

typedef char CHAR;

typedef ushort uint16;

typedef char SINT8;

typedef void mdev_t;

typedef ulong uint32;

typedef ulonglong UINT64;

typedef int BOOLEAN;

typedef struct hw_rxhdr hw_rxhdr, *Phw_rxhdr;

typedef struct hw_vect hw_vect, *Phw_vect;

typedef long __int32_t;

typedef __int32_t int32_t;

typedef int32_t s32;

struct hw_vect {
    u32 len:16;
    u32 reserved:8;
    u32 mpdu_cnt:6;
    u32 ampdu_cnt:2;
    __le32 tsf_lo;
    __le32 tsf_hi;
    u32 leg_length:12;
    u32 leg_rate:4;
    u32 ht_length:16;
    u32 _ht_length:4;
    u32 short_gi:1;
    u32 stbc:2;
    u32 smoothing:1;
    u32 mcs:7;
    u32 pre_type:1;
    u32 format_mod:3;
    u32 ch_bw:2;
    u32 n_sts:3;
    u32 lsig_valid:1;
    u32 sounding:1;
    u32 num_extn_ss:2;
    u32 aggregation:1;
    u32 fec_coding:1;
    u32 dyn_bw:1;
    u32 doze_not_allowed:1;
    u32 antenna_set:8;
    u32 partial_aid:9;
    u32 group_id:6;
    u32 reserved_1c:1;
    s32 rssi1:8;
    s32 rssi2:8;
    s32 rssi3:8;
    s32 rssi4:8;
    u32 reserved_1d:8;
    u32 rcpi:8;
    u32 evm1:8;
    u32 evm2:8;
    u32 evm3:8;
    u32 evm4:8;
    u32 reserved2b_1:8;
    u32 reserved2b_2:8;
    u32 reserved2b_3:8;
    u32 rx_vect2_valid:1;
    u32 resp_frame:1;
    u32 decr_status:3;
    u32 rx_fifo_oflow:1;
    u32 undef_err:1;
    u32 phy_err:1;
    u32 fcs_err:1;
    u32 addr_mismatch:1;
    u32 ga_frame:1;
    u32 current_ac:2;
    u32 frm_successful_rx:1;
    u32 desc_done_rx:1;
    u32 key_sram_index:10;
    u32 key_sram_v:1;
    u32 type:2;
    u32 subtype:4;
};

struct hw_rxhdr {
    struct hw_vect hwvect;
    u32 phy_band:8;
    u32 phy_channel_type:8;
    u32 phy_prim20_freq:16;
    u32 phy_center1_freq:16;
    u32 phy_center2_freq:16;
    u32 flags_is_amsdu:1;
    u32 flags_is_80211_mpdu:1;
    u32 flags_is_4addr:1;
    u32 flags_new_peer:1;
    u32 flags_user_prio:3;
    u32 flags_rsvd0:1;
    u32 flags_vif_idx:8;
    u32 flags_sta_idx:8;
    u32 flags_dst_idx:8;
    u32 pattern;
    u32 payl_offset;
    u32 reserved_pad[2];
    u32 wild[8];
};

typedef struct sm_reason_code sm_reason_code, *Psm_reason_code;

struct sm_reason_code {
    uint16_t reason_code;
    undefined field_0x2;
    undefined field_0x3;
    char * action;
};

typedef enum rx_status_bits {
    RX_STAT_ALLOC=2,
    RX_STAT_COPY=32,
    RX_STAT_DELETE=4,
    RX_STAT_ETH_LEN_UPDATE=16,
    RX_STAT_FORWARD=1,
    RX_STAT_LEN_UPDATE=8
} rx_status_bits;

typedef enum lld_util_instant_action {
    LLD_UTIL_CHMAP_UPDATE=2,
    LLD_UTIL_NO_ACTION=0,
    LLD_UTIL_PARAM_UPDATE=1
} lld_util_instant_action;

typedef struct sha256_state sha256_state, *Psha256_state;

struct sha256_state {
    UINT64 length;
    UINT32 state[8];
    UINT32 curlen;
    UINT8 buf[64];
    undefined field_0x6c;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

typedef enum nl80211_iftype {
    NL80211_IFTYPE_ADHOC=1,
    NL80211_IFTYPE_AP=3,
    NL80211_IFTYPE_AP_VLAN=4,
    NL80211_IFTYPE_MAX=12,
    NL80211_IFTYPE_MESH_POINT=7,
    NL80211_IFTYPE_MONITOR=6,
    NL80211_IFTYPE_NAN=12,
    NL80211_IFTYPE_OCB=11,
    NL80211_IFTYPE_P2P_CLIENT=8,
    NL80211_IFTYPE_P2P_DEVICE=10,
    NL80211_IFTYPE_P2P_GO=9,
    NL80211_IFTYPE_STATION=2,
    NL80211_IFTYPE_UNSPECIFIED=0,
    NL80211_IFTYPE_WDS=5,
    NUM_NL80211_IFTYPES=13
} nl80211_iftype;

typedef struct hci_le_rx_test_cmd hci_le_rx_test_cmd, *Phci_le_rx_test_cmd;

struct hci_le_rx_test_cmd {
    uint8_t rx_freq;
};

typedef struct hci_host_buf_size_cmd hci_host_buf_size_cmd, *Phci_host_buf_size_cmd;

struct hci_host_buf_size_cmd {
    uint16_t acl_pkt_len;
    uint8_t sync_pkt_len;
    undefined field_0x3;
    uint16_t nb_acl_pkts;
    uint16_t nb_sync_pkts;
};

typedef struct hci_rd_auth_payl_to_cmd hci_rd_auth_payl_to_cmd, *Phci_rd_auth_payl_to_cmd;

struct hci_rd_auth_payl_to_cmd {
    uint16_t conhdl;
};

typedef struct hci_le_rd_suggted_dft_data_len_cmd_cmp_evt hci_le_rd_suggted_dft_data_len_cmd_cmp_evt, *Phci_le_rd_suggted_dft_data_len_cmd_cmp_evt;

struct hci_le_rd_suggted_dft_data_len_cmd_cmp_evt {
    uint8_t status;
    undefined field_0x1;
    uint16_t suggted_max_tx_octets;
    uint16_t suggted_max_tx_time;
};

typedef struct hci_le_rd_rem_used_feats_cmd_cmp_evt hci_le_rd_rem_used_feats_cmd_cmp_evt, *Phci_le_rd_rem_used_feats_cmd_cmp_evt;

typedef struct le_features le_features, *Ple_features;

struct le_features {
    uint8_t feats[8];
};

struct hci_le_rd_rem_used_feats_cmd_cmp_evt {
    uint8_t subcode;
    uint8_t status;
    uint16_t conhdl;
    struct le_features feats_used;
};

typedef struct hci_rd_wlst_size_cmd_cmp_evt hci_rd_wlst_size_cmd_cmp_evt, *Phci_rd_wlst_size_cmd_cmp_evt;

struct hci_rd_wlst_size_cmd_cmp_evt {
    uint8_t status;
    uint8_t wlst_size;
};

typedef struct hci_set_evt_mask_cmd hci_set_evt_mask_cmd, *Phci_set_evt_mask_cmd;

typedef struct evt_mask evt_mask, *Pevt_mask;

struct evt_mask {
    uint8_t mask[8];
};

struct hci_set_evt_mask_cmd {
    struct evt_mask event_mask;
};

typedef struct hci_le_generate_dh_key_cmd hci_le_generate_dh_key_cmd, *Phci_le_generate_dh_key_cmd;

struct hci_le_generate_dh_key_cmd {
    uint8_t public_key[64];
};

typedef struct hci_set_ctrl_to_host_flow_ctrl_cmd hci_set_ctrl_to_host_flow_ctrl_cmd, *Phci_set_ctrl_to_host_flow_ctrl_cmd;

struct hci_set_ctrl_to_host_flow_ctrl_cmd {
    uint8_t flow_cntl;
};

typedef struct hci_le_rem_con_param_req_neg_reply_cmd hci_le_rem_con_param_req_neg_reply_cmd, *Phci_le_rem_con_param_req_neg_reply_cmd;

struct hci_le_rem_con_param_req_neg_reply_cmd {
    uint16_t conhdl;
    uint8_t reason;
    undefined field_0x3;
};

typedef struct hci_basic_conhdl_cmd hci_basic_conhdl_cmd, *Phci_basic_conhdl_cmd;

struct hci_basic_conhdl_cmd {
    uint16_t conhdl;
};

typedef struct hci_rd_tx_pwr_lvl_cmd_cmp_evt hci_rd_tx_pwr_lvl_cmd_cmp_evt, *Phci_rd_tx_pwr_lvl_cmd_cmp_evt;

struct hci_rd_tx_pwr_lvl_cmd_cmp_evt {
    uint8_t status;
    undefined field_0x1;
    uint16_t conhdl;
    uint8_t tx_pow_lvl;
    undefined field_0x5;
};

typedef struct hci_rd_tx_pwr_lvl_cmd hci_rd_tx_pwr_lvl_cmd, *Phci_rd_tx_pwr_lvl_cmd;

struct hci_rd_tx_pwr_lvl_cmd {
    uint16_t conhdl;
    uint8_t type;
    undefined field_0x3;
};

typedef struct hci_basic_cmd_cmp_evt hci_basic_cmd_cmp_evt, *Phci_basic_cmd_cmp_evt;

struct hci_basic_cmd_cmp_evt {
    uint8_t status;
};

typedef struct hci_host_nb_cmp_pkts_cmd hci_host_nb_cmp_pkts_cmd, *Phci_host_nb_cmp_pkts_cmd;

struct hci_host_nb_cmp_pkts_cmd {
    uint8_t nb_of_hdl;
    undefined field_0x1;
    uint16_t con_hdl[3];
    uint16_t nb_comp_pkt[3];
};

typedef struct hci_le_ltk_request_evt hci_le_ltk_request_evt, *Phci_le_ltk_request_evt;

typedef struct rand_nb rand_nb, *Prand_nb;

struct rand_nb {
    uint8_t nb[8];
};

struct hci_le_ltk_request_evt {
    uint8_t subcode;
    undefined field_0x1;
    uint16_t conhdl;
    struct rand_nb rand;
    uint16_t ediv;
};

typedef struct hci_le_generate_dhkey_cmp_evt hci_le_generate_dhkey_cmp_evt, *Phci_le_generate_dhkey_cmp_evt;

struct hci_le_generate_dhkey_cmp_evt {
    uint8_t subcode;
    uint8_t status;
    uint8_t dh_key[32];
};

typedef struct hci_le_ltk_req_reply_cmd hci_le_ltk_req_reply_cmd, *Phci_le_ltk_req_reply_cmd;

typedef struct ltk ltk, *Pltk;

struct ltk {
    uint8_t ltk[16];
};

struct hci_le_ltk_req_reply_cmd {
    uint16_t conhdl;
    struct ltk ltk;
};

typedef struct hci_rd_local_supp_cmds_cmd_cmp_evt hci_rd_local_supp_cmds_cmd_cmp_evt, *Phci_rd_local_supp_cmds_cmd_cmp_evt;

typedef struct supp_cmds supp_cmds, *Psupp_cmds;

struct supp_cmds {
    uint8_t cmds[64];
};

struct hci_rd_local_supp_cmds_cmd_cmp_evt {
    uint8_t status;
    struct supp_cmds local_cmds;
};

typedef struct hci_le_enc_cmd_cmp_evt hci_le_enc_cmd_cmp_evt, *Phci_le_enc_cmd_cmp_evt;

struct hci_le_enc_cmd_cmp_evt {
    uint8_t status;
    uint8_t encrypted_data[16];
};

typedef struct hci_le_set_scan_param_cmd hci_le_set_scan_param_cmd, *Phci_le_set_scan_param_cmd;

struct hci_le_set_scan_param_cmd {
    uint8_t scan_type;
    undefined field_0x1;
    uint16_t scan_intv;
    uint16_t scan_window;
    uint8_t own_addr_type;
    uint8_t scan_filt_policy;
};

typedef struct hci_rd_local_supp_feats_cmd_cmp_evt hci_rd_local_supp_feats_cmd_cmp_evt, *Phci_rd_local_supp_feats_cmd_cmp_evt;

typedef struct features features, *Pfeatures;

struct features {
    uint8_t feats[8];
};

struct hci_rd_local_supp_feats_cmd_cmp_evt {
    uint8_t status;
    struct features feats;
};

typedef struct hci_le_rd_buff_size_cmd_cmp_evt hci_le_rd_buff_size_cmd_cmp_evt, *Phci_le_rd_buff_size_cmd_cmp_evt;

struct hci_le_rd_buff_size_cmd_cmp_evt {
    uint8_t status;
    undefined field_0x1;
    uint16_t hc_data_pk_len;
    uint8_t hc_tot_nb_data_pkts;
    undefined field_0x5;
};

typedef struct hci_le_set_adv_param_cmd hci_le_set_adv_param_cmd, *Phci_le_set_adv_param_cmd;

typedef struct bd_addr bd_addr, *Pbd_addr;

struct bd_addr {
    uint8_t addr[6];
};

struct hci_le_set_adv_param_cmd {
    uint16_t adv_intv_min;
    uint16_t adv_intv_max;
    uint8_t adv_type;
    uint8_t own_addr_type;
    uint8_t peer_addr_type;
    struct bd_addr peer_addr;
    uint8_t adv_chnl_map;
    uint8_t adv_filt_policy;
    undefined field_0xf;
};

typedef struct hci_le_rand_cmd_cmp_evt hci_le_rand_cmd_cmp_evt, *Phci_le_rand_cmd_cmp_evt;

struct hci_le_rand_cmd_cmp_evt {
    uint8_t status;
    struct rand_nb nb;
};

typedef struct hci_rd_supp_states_cmd_cmp_evt hci_rd_supp_states_cmd_cmp_evt, *Phci_rd_supp_states_cmd_cmp_evt;

typedef struct le_states le_states, *Ple_states;

struct le_states {
    uint8_t supp_states[8];
};

struct hci_rd_supp_states_cmd_cmp_evt {
    uint8_t status;
    struct le_states states;
};

typedef struct hci_rd_rem_ver_info_cmp_evt hci_rd_rem_ver_info_cmp_evt, *Phci_rd_rem_ver_info_cmp_evt;

struct hci_rd_rem_ver_info_cmp_evt {
    uint8_t status;
    undefined field_0x1;
    uint16_t conhdl;
    uint8_t vers;
    undefined field_0x5;
    uint16_t compid;
    uint16_t subvers;
};

typedef struct hci_le_ch_sel_algo_evt hci_le_ch_sel_algo_evt, *Phci_le_ch_sel_algo_evt;

struct hci_le_ch_sel_algo_evt {
    uint8_t subcode;
    undefined field_0x1;
    uint16_t conhdl;
    uint8_t chSel;
    undefined field_0x5;
};

typedef struct hci_rd_auth_payl_to_cmd_cmp_evt hci_rd_auth_payl_to_cmd_cmp_evt, *Phci_rd_auth_payl_to_cmd_cmp_evt;

struct hci_rd_auth_payl_to_cmd_cmp_evt {
    uint8_t status;
    undefined field_0x1;
    uint16_t conhdl;
    uint16_t auth_payl_to;
};

typedef enum hci_evt_code {
    HCI_AUTH_CMP_EVT_CODE=6,
    HCI_AUTH_PAYL_TO_EXP_EVT_CODE=87,
    HCI_CHG_CON_LK_CMP_EVT_CODE=9,
    HCI_CMD_CMP_EVT_CODE=14,
    HCI_CMD_STATUS_EVT_CODE=15,
    HCI_CON_CMP_EVT_CODE=3,
    HCI_CON_PKT_TYPE_CHG_EVT_CODE=29,
    HCI_CON_REQ_EVT_CODE=4,
    HCI_CON_SLV_BCST_CH_MAP_CHG_EVT_CODE=85,
    HCI_CON_SLV_BCST_REC_EVT_CODE=81,
    HCI_CON_SLV_BCST_TO_EVT_CODE=82,
    HCI_DATA_BUF_OVFLW_EVT_CODE=26,
    HCI_DBG_META_EVT_CODE=-1,
    HCI_DISC_CMP_EVT_CODE=5,
    HCI_ENC_CHG_EVT_CODE=8,
    HCI_ENC_KEY_REFRESH_CMP_EVT_CODE=48,
    HCI_ENH_FLUSH_CMP_EVT_CODE=57,
    HCI_EXT_INQ_RES_EVT_CODE=47,
    HCI_FLOW_SPEC_CMP_EVT_CODE=33,
    HCI_FLUSH_OCCURRED_EVT_CODE=17,
    HCI_HW_ERR_EVT_CODE=16,
    HCI_INQ_CMP_EVT_CODE=1,
    HCI_INQ_RES_EVT_CODE=2,
    HCI_INQ_RES_WITH_RSSI_EVT_CODE=34,
    HCI_IO_CAP_REQ_EVT_CODE=49,
    HCI_IO_CAP_RSP_EVT_CODE=50,
    HCI_KEYPRESS_NOTIF_EVT_CODE=60,
    HCI_LE_ADV_REPORT_EVT_SUBCODE=2,
    HCI_LE_CH_SEL_ALGO_EVT_SUBCODE=20,
    HCI_LE_CON_CMP_EVT_SUBCODE=1,
    HCI_LE_CON_UPDATE_CMP_EVT_SUBCODE=3,
    HCI_LE_DATA_LEN_CHG_EVT_SUBCODE=7,
    HCI_LE_DIR_ADV_REP_EVT_SUBCODE=11,
    HCI_LE_ENH_CON_CMP_EVT_SUBCODE=10,
    HCI_LE_GEN_DHKEY_CMP_EVT_SUBCODE=9,
    HCI_LE_LTK_REQUEST_EVT_SUBCODE=5,
    HCI_LE_META_EVT_CODE=62,
    HCI_LE_RD_LOC_P256_PUB_KEY_CMP_EVT_SUBCODE=8,
    HCI_LE_RD_REM_USED_FEATS_CMP_EVT_SUBCODE=4,
    HCI_LE_REM_CON_PARAM_REQ_EVT_SUBCODE=6,
    HCI_LINK_SUPV_TO_CHG_EVT_CODE=56,
    HCI_LK_NOTIF_EVT_CODE=24,
    HCI_LK_REQ_EVT_CODE=23,
    HCI_MASTER_LK_CMP_EVT_CODE=10,
    HCI_MAX_EVT_MSK_PAGE_1_CODE=64,
    HCI_MAX_EVT_MSK_PAGE_2_CODE=88,
    HCI_MAX_SLOT_CHG_EVT_CODE=27,
    HCI_MODE_CHG_EVT_CODE=20,
    HCI_NB_CMP_PKTS_EVT_CODE=19,
    HCI_PAGE_SCAN_REPET_MODE_CHG_EVT_CODE=32,
    HCI_PIN_CODE_REQ_EVT_CODE=22,
    HCI_QOS_SETUP_CMP_EVT_CODE=13,
    HCI_QOS_VIOL_EVT_CODE=30,
    HCI_RD_CLK_OFF_CMP_EVT_CODE=28,
    HCI_RD_REM_EXT_FEATS_CMP_EVT_CODE=35,
    HCI_RD_REM_SUPP_FEATS_CMP_EVT_CODE=11,
    HCI_RD_REM_VER_INFO_CMP_EVT_CODE=12,
    HCI_REM_HOST_SUPP_FEATS_NOTIF_EVT_CODE=61,
    HCI_REM_NAME_REQ_CMP_EVT_CODE=7,
    HCI_REM_OOB_DATA_REQ_EVT_CODE=53,
    HCI_RETURN_LINK_KEYS_EVT_CODE=21,
    HCI_ROLE_CHG_EVT_CODE=18,
    HCI_SLV_PAGE_RSP_TO_EVT_CODE=84,
    HCI_SNIFF_SUB_EVT_CODE=46,
    HCI_SP_CMP_EVT_CODE=54,
    HCI_SYNC_CON_CHG_EVT_CODE=45,
    HCI_SYNC_CON_CMP_EVT_CODE=44,
    HCI_SYNC_TRAIN_CMP_EVT_CODE=79,
    HCI_SYNC_TRAIN_REC_EVT_CODE=80,
    HCI_TRUNC_PAGE_CMP_EVT_CODE=83,
    HCI_USER_CFM_REQ_EVT_CODE=51,
    HCI_USER_PASSKEY_NOTIF_EVT_CODE=59,
    HCI_USER_PASSKEY_REQ_EVT_CODE=52
} hci_evt_code;

typedef struct hci_enc_change_evt hci_enc_change_evt, *Phci_enc_change_evt;

struct hci_enc_change_evt {
    uint8_t status;
    undefined field_0x1;
    uint16_t conhdl;
    uint8_t enc_stat;
    undefined field_0x5;
};

typedef struct hci_le_set_host_ch_class_cmd hci_le_set_host_ch_class_cmd, *Phci_le_set_host_ch_class_cmd;

typedef struct le_chnl_map le_chnl_map, *Ple_chnl_map;

struct le_chnl_map {
    uint8_t map[5];
};

struct hci_le_set_host_ch_class_cmd {
    struct le_chnl_map chmap;
};

typedef struct hci_le_set_scan_en_cmd hci_le_set_scan_en_cmd, *Phci_le_set_scan_en_cmd;

struct hci_le_set_scan_en_cmd {
    uint8_t scan_en;
    uint8_t filter_duplic_en;
};

typedef struct hci_le_con_update_cmp_evt hci_le_con_update_cmp_evt, *Phci_le_con_update_cmp_evt;

struct hci_le_con_update_cmp_evt {
    uint8_t subcode;
    uint8_t status;
    uint16_t conhdl;
    uint16_t con_interval;
    uint16_t con_latency;
    uint16_t sup_to;
};

typedef struct hci_le_create_con_cmd hci_le_create_con_cmd, *Phci_le_create_con_cmd;

struct hci_le_create_con_cmd {
    uint16_t scan_intv;
    uint16_t scan_window;
    uint8_t init_filt_policy;
    uint8_t peer_addr_type;
    struct bd_addr peer_addr;
    uint8_t own_addr_type;
    undefined field_0xd;
    uint16_t con_intv_min;
    uint16_t con_intv_max;
    uint16_t con_latency;
    uint16_t superv_to;
    uint16_t ce_len_min;
    uint16_t ce_len_max;
};

typedef struct hci_disconnect_cmd hci_disconnect_cmd, *Phci_disconnect_cmd;

struct hci_disconnect_cmd {
    uint16_t conhdl;
    uint8_t reason;
    undefined field_0x3;
};

typedef struct hci_nb_cmp_pkts_evt hci_nb_cmp_pkts_evt, *Phci_nb_cmp_pkts_evt;

struct hci_nb_cmp_pkts_evt {
    uint8_t nb_of_hdl;
    undefined field_0x1;
    uint16_t conhdl[1];
    uint16_t nb_comp_pkt[1];
};

typedef struct hci_auth_payl_to_exp_evt hci_auth_payl_to_exp_evt, *Phci_auth_payl_to_exp_evt;

struct hci_auth_payl_to_exp_evt {
    uint16_t conhdl;
};

typedef struct hci_rd_local_ver_info_cmd_cmp_evt hci_rd_local_ver_info_cmd_cmp_evt, *Phci_rd_local_ver_info_cmd_cmp_evt;

struct hci_rd_local_ver_info_cmd_cmp_evt {
    uint8_t status;
    uint8_t hci_ver;
    uint16_t hci_rev;
    uint8_t lmp_ver;
    undefined field_0x5;
    uint16_t manuf_name;
    uint16_t lmp_subver;
};

typedef struct hci_le_rd_rem_used_feats_cmd hci_le_rd_rem_used_feats_cmd, *Phci_le_rd_rem_used_feats_cmd;

struct hci_le_rd_rem_used_feats_cmd {
    uint16_t conhdl;
};

typedef struct hci_le_data_len_chg_evt hci_le_data_len_chg_evt, *Phci_le_data_len_chg_evt;

struct hci_le_data_len_chg_evt {
    uint8_t subcode;
    undefined field_0x1;
    uint16_t conhdl;
    uint16_t max_tx_octets;
    uint16_t max_tx_time;
    uint16_t max_rx_octets;
    uint16_t max_rx_time;
};

typedef struct hci_le_set_data_len_cmd hci_le_set_data_len_cmd, *Phci_le_set_data_len_cmd;

struct hci_le_set_data_len_cmd {
    uint16_t conhdl;
    uint16_t tx_octets;
    uint16_t tx_time;
};

typedef struct hci_rd_bd_addr_cmd_cmp_evt hci_rd_bd_addr_cmd_cmp_evt, *Phci_rd_bd_addr_cmd_cmp_evt;

struct hci_rd_bd_addr_cmd_cmp_evt {
    uint8_t status;
    struct bd_addr local_addr;
};

typedef struct hci_rd_adv_chnl_tx_pw_cmd_cmp_evt hci_rd_adv_chnl_tx_pw_cmd_cmp_evt, *Phci_rd_adv_chnl_tx_pw_cmd_cmp_evt;

struct hci_rd_adv_chnl_tx_pw_cmd_cmp_evt {
    uint8_t status;
    int8_t adv_tx_pw_lvl;
};

typedef struct hci_le_wr_rfpath_cps_cmd hci_le_wr_rfpath_cps_cmd, *Phci_le_wr_rfpath_cps_cmd;

struct hci_le_wr_rfpath_cps_cmd {
    uint16_t rf_txpath_compensation_value;
    uint16_t rf_rxpath_compensation_value;
};

typedef struct hci_le_set_evt_mask_cmd hci_le_set_evt_mask_cmd, *Phci_le_set_evt_mask_cmd;

struct hci_le_set_evt_mask_cmd {
    struct evt_mask le_mask;
};

typedef struct hci_basic_conhdl_cmd_cmp_evt hci_basic_conhdl_cmd_cmp_evt, *Phci_basic_conhdl_cmd_cmp_evt;

struct hci_basic_conhdl_cmd_cmp_evt {
    uint8_t status;
    undefined field_0x1;
    uint16_t conhdl;
};

typedef struct hci_rd_buff_size_cmd_cmp_evt hci_rd_buff_size_cmd_cmp_evt, *Phci_rd_buff_size_cmd_cmp_evt;

struct hci_rd_buff_size_cmd_cmp_evt {
    uint8_t status;
    undefined field_0x1;
    uint16_t hc_data_pk_len;
    uint8_t hc_sync_pk_len;
    undefined field_0x5;
    uint16_t hc_tot_nb_data_pkts;
    uint16_t hc_tot_nb_sync_pkts;
};

typedef struct hci_wr_auth_payl_to_cmd_cmp_evt hci_wr_auth_payl_to_cmd_cmp_evt, *Phci_wr_auth_payl_to_cmd_cmp_evt;

struct hci_wr_auth_payl_to_cmd_cmp_evt {
    uint8_t status;
    undefined field_0x1;
    uint16_t conhdl;
};

typedef struct hci_le_tx_test_cmd hci_le_tx_test_cmd, *Phci_le_tx_test_cmd;

struct hci_le_tx_test_cmd {
    uint8_t tx_freq;
    uint8_t test_data_len;
    uint8_t pk_payload_type;
};

typedef struct hci_le_rd_local_supp_feats_cmd_cmp_evt hci_le_rd_local_supp_feats_cmd_cmp_evt, *Phci_le_rd_local_supp_feats_cmd_cmp_evt;

struct hci_le_rd_local_supp_feats_cmd_cmp_evt {
    uint8_t status;
    struct le_features feats;
};

typedef struct hci_rd_rem_ver_info_cmd hci_rd_rem_ver_info_cmd, *Phci_rd_rem_ver_info_cmd;

struct hci_rd_rem_ver_info_cmd {
    uint16_t conhdl;
};

typedef struct hci_le_adv_report_evt hci_le_adv_report_evt, *Phci_le_adv_report_evt;

typedef struct adv_report adv_report, *Padv_report;

struct adv_report {
    uint8_t evt_type;
    uint8_t adv_addr_type;
    struct bd_addr adv_addr;
    uint8_t data_len;
    uint8_t data[31];
    uint8_t rssi;
};

struct hci_le_adv_report_evt {
    uint8_t subcode;
    uint8_t nb_reports;
    struct adv_report adv_rep[1];
};

typedef struct hci_flush_cmd_cmp_evt hci_flush_cmd_cmp_evt, *Phci_flush_cmd_cmp_evt;

struct hci_flush_cmd_cmp_evt {
    uint8_t status;
    undefined field_0x1;
    uint16_t conhdl;
};

typedef struct hci_le_set_rand_addr_cmd hci_le_set_rand_addr_cmd, *Phci_le_set_rand_addr_cmd;

struct hci_le_set_rand_addr_cmd {
    struct bd_addr rand_addr;
};

typedef struct hci_le_start_enc_cmd hci_le_start_enc_cmd, *Phci_le_start_enc_cmd;

struct hci_le_start_enc_cmd {
    uint16_t conhdl;
    struct rand_nb nb;
    uint16_t enc_div;
    struct ltk ltk;
};

typedef struct hci_test_end_cmd_cmp_evt hci_test_end_cmd_cmp_evt, *Phci_test_end_cmd_cmp_evt;

struct hci_test_end_cmd_cmp_evt {
    uint8_t status;
    undefined field_0x1;
    uint16_t nb_packet_received;
};

typedef struct hci_disc_cmp_evt hci_disc_cmp_evt, *Phci_disc_cmp_evt;

struct hci_disc_cmp_evt {
    uint8_t status;
    undefined field_0x1;
    uint16_t conhdl;
    uint8_t reason;
    undefined field_0x5;
};

typedef enum hci_evt_mask_page {
    HCI_PAGE_0=0,
    HCI_PAGE_1=1,
    HCI_PAGE_2=2,
    HCI_PAGE_DFT=3
} hci_evt_mask_page;

typedef struct hci_vsc_set_tx_pwr_cmd hci_vsc_set_tx_pwr_cmd, *Phci_vsc_set_tx_pwr_cmd;

struct hci_vsc_set_tx_pwr_cmd {
    int8_t power;
};

typedef struct hci_le_set_scan_rsp_data_cmd hci_le_set_scan_rsp_data_cmd, *Phci_le_set_scan_rsp_data_cmd;

typedef struct scan_rsp_data scan_rsp_data, *Pscan_rsp_data;

struct scan_rsp_data {
    uint8_t data[31];
};

struct hci_le_set_scan_rsp_data_cmd {
    uint8_t scan_rsp_data_len;
    struct scan_rsp_data data;
};

typedef struct hci_enc_key_ref_cmp_evt hci_enc_key_ref_cmp_evt, *Phci_enc_key_ref_cmp_evt;

struct hci_enc_key_ref_cmp_evt {
    uint8_t status;
    undefined field_0x1;
    uint16_t conhdl;
};

typedef struct hci_le_rd_chnl_map_cmd_cmp_evt hci_le_rd_chnl_map_cmd_cmp_evt, *Phci_le_rd_chnl_map_cmd_cmp_evt;

struct hci_le_rd_chnl_map_cmd_cmp_evt {
    uint8_t status;
    undefined field_0x1;
    uint16_t conhdl;
    struct le_chnl_map ch_map;
    undefined field_0x9;
};

typedef struct hci_le_enh_con_cmp_evt hci_le_enh_con_cmp_evt, *Phci_le_enh_con_cmp_evt;

struct hci_le_enh_con_cmp_evt {
    uint8_t subcode;
    uint8_t status;
    uint16_t conhdl;
    uint8_t role;
    uint8_t peer_addr_type;
    struct bd_addr peer_addr;
    struct bd_addr loc_rslv_priv_addr;
    struct bd_addr peer_rslv_priv_addr;
    uint16_t con_interval;
    uint16_t con_latency;
    uint16_t sup_to;
    uint8_t clk_accuracy;
    undefined field_0x1f;
};

typedef struct hci_rd_rfpath_cps_cmd_cmp_evt hci_rd_rfpath_cps_cmd_cmp_evt, *Phci_rd_rfpath_cps_cmd_cmp_evt;

struct hci_rd_rfpath_cps_cmd_cmp_evt {
    uint8_t status;
    undefined field_0x1;
    uint16_t rf_txpath_compensation_value;
    uint16_t rf_rxpath_compensation_value;
};

typedef enum hci_opcode {
    HCI_ACCEPT_CON_REQ_CMD_OPCODE=1033,
    HCI_ACCEPT_SYNC_CON_REQ_CMD_OPCODE=1065,
    HCI_AUTH_REQ_CMD_OPCODE=1041,
    HCI_CHG_CON_LK_CMD_OPCODE=1045,
    HCI_CHG_CON_PKT_TYPE_CMD_OPCODE=1039,
    HCI_CREATE_CON_CANCEL_CMD_OPCODE=1032,
    HCI_CREATE_CON_CMD_OPCODE=1029,
    HCI_CREATE_NEW_UNIT_KEY_CMD_OPCODE=3083,
    HCI_DBG_BLE_TST_LLCP_PT_EN_CMD_OPCODE=-958,
    HCI_DBG_BLE_TST_SEND_LLCP_CMD_OPCODE=-957,
    HCI_DBG_BT_SEND_LMP_CMD_OPCODE=-1010,
    HCI_DBG_DEL_PAR_CMD_OPCODE=-1021,
    HCI_DBG_ER_FLASH_CMD_OPCODE=-1018,
    HCI_DBG_HW_REG_RD_CMD_OPCODE=-976,
    HCI_DBG_HW_REG_WR_CMD_OPCODE=-975,
    HCI_DBG_ID_FLASH_CMD_OPCODE=-1019,
    HCI_DBG_LLCP_DISCARD_CMD_OPCODE=-970,
    HCI_DBG_MWS_COEXTST_SCEN_CMD_OPCODE=-954,
    HCI_DBG_MWS_COEX_CMD_OPCODE=-955,
    HCI_DBG_PLF_RESET_CMD_OPCODE=-1007,
    HCI_DBG_RD_FLASH_CMD_OPCODE=-1016,
    HCI_DBG_RD_KE_STATS_CMD_OPCODE=-1008,
    HCI_DBG_RD_MEM_CMD_OPCODE=-1023,
    HCI_DBG_RD_MEM_INFO_CMD_OPCODE=-1006,
    HCI_DBG_RD_PAR_CMD_OPCODE=-1015,
    HCI_DBG_RESET_RX_CNT_CMD_OPCODE=-969,
    HCI_DBG_RESET_TX_CNT_CMD_OPCODE=-968,
    HCI_DBG_RF_CNTL_TX_CMD_OPCODE=-961,
    HCI_DBG_RF_RD_DATA_RX_CMD_OPCODE=-962,
    HCI_DBG_RF_REG_RD_CMD_OPCODE=-967,
    HCI_DBG_RF_REG_WR_CMD_OPCODE=-966,
    HCI_DBG_RF_SWITCH_CLK_CMD_OPCODE=-964,
    HCI_DBG_RF_SYNC_P_CNTL_CMD_OPCODE=-960,
    HCI_DBG_RF_WR_DATA_TX_CMD_OPCODE=-963,
    HCI_DBG_SET_BD_ADDR_CMD_OPCODE=-974,
    HCI_DBG_SET_CRC_CMD_OPCODE=-971,
    HCI_DBG_SET_LOCAL_CLOCK_CMD_OPCODE=-1009,
    HCI_DBG_SET_TX_PW_CMD_OPCODE=-965,
    HCI_DBG_SET_TYPE_PUB_CMD_OPCODE=-973,
    HCI_DBG_SET_TYPE_RAND_CMD_OPCODE=-972,
    HCI_DBG_WLAN_COEXTST_SCEN_CMD_OPCODE=-1011,
    HCI_DBG_WLAN_COEX_CMD_OPCODE=-1013,
    HCI_DBG_WR_DLE_DFT_VALUE_CMD_OPCODE=-959,
    HCI_DBG_WR_FLASH_CMD_OPCODE=-1017,
    HCI_DBG_WR_MEM_CMD_OPCODE=-1022,
    HCI_DBG_WR_PAR_CMD_OPCODE=-1014,
    HCI_DEL_RES_LT_ADDR_CMD_OPCODE=3189,
    HCI_DEL_STORED_LK_CMD_OPCODE=3090,
    HCI_DISCONNECT_CMD_OPCODE=1030,
    HCI_ENH_ACCEPT_SYNC_CON_CMD_OPCODE=1086,
    HCI_ENH_FLUSH_CMD_OPCODE=3167,
    HCI_ENH_SETUP_SYNC_CON_CMD_OPCODE=1085,
    HCI_EN_DUT_MODE_CMD_OPCODE=6147,
    HCI_EXIT_PARK_STATE_CMD_OPCODE=2054,
    HCI_EXIT_PER_INQ_MODE_CMD_OPCODE=1028,
    HCI_EXIT_SNIFF_MODE_CMD_OPCODE=2052,
    HCI_FLOW_SPEC_CMD_OPCODE=2064,
    HCI_FLUSH_CMD_OPCODE=3080,
    HCI_GET_MWS_TRANSPORT_LAYER_CONFIG_CMD_OPCODE=5132,
    HCI_HOLD_MODE_CMD_OPCODE=2049,
    HCI_HOST_BUF_SIZE_CMD_OPCODE=3123,
    HCI_HOST_NB_CMP_PKTS_CMD_OPCODE=3125,
    HCI_INQ_CANCEL_CMD_OPCODE=1026,
    HCI_INQ_CMD_OPCODE=1025,
    HCI_IO_CAP_REQ_NEG_REPLY_CMD_OPCODE=1076,
    HCI_IO_CAP_REQ_REPLY_CMD_OPCODE=1067,
    HCI_LE_ADD_DEV_TO_RSLV_LIST_CMD_OPCODE=8231,
    HCI_LE_ADD_DEV_TO_WLST_CMD_OPCODE=8209,
    HCI_LE_CLEAR_RSLV_LIST_CMD_OPCODE=8233,
    HCI_LE_CLEAR_WLST_CMD_OPCODE=8208,
    HCI_LE_CON_UPDATE_CMD_OPCODE=8211,
    HCI_LE_CREATE_CON_CANCEL_CMD_OPCODE=8206,
    HCI_LE_CREATE_CON_CMD_OPCODE=8205,
    HCI_LE_ENC_CMD_OPCODE=8215,
    HCI_LE_GEN_DHKEY_CMD_OPCODE=8230,
    HCI_LE_LTK_REQ_NEG_REPLY_CMD_OPCODE=8219,
    HCI_LE_LTK_REQ_REPLY_CMD_OPCODE=8218,
    HCI_LE_RAND_CMD_OPCODE=8216,
    HCI_LE_RD_ADV_CHNL_TX_PW_CMD_OPCODE=8199,
    HCI_LE_RD_BUFF_SIZE_CMD_OPCODE=8194,
    HCI_LE_RD_CHNL_MAP_CMD_OPCODE=8213,
    HCI_LE_RD_LOCAL_SUPP_FEATS_CMD_OPCODE=8195,
    HCI_LE_RD_LOC_P256_PUB_KEY_CMD_OPCODE=8229,
    HCI_LE_RD_LOC_RSLV_ADDR_CMD_OPCODE=8236,
    HCI_LE_RD_MAX_DATA_LEN_CMD_OPCODE=8239,
    HCI_LE_RD_PEER_RSLV_ADDR_CMD_OPCODE=8235,
    HCI_LE_RD_REM_USED_FEATS_CMD_OPCODE=8214,
    HCI_LE_RD_RFPATH_CPS_CMD_OPCODE=8268,
    HCI_LE_RD_RSLV_LIST_SIZE_CMD_OPCODE=8234,
    HCI_LE_RD_SUGGTED_DFT_DATA_LEN_CMD_OPCODE=8227,
    HCI_LE_RD_SUPP_STATES_CMD_OPCODE=8220,
    HCI_LE_RD_TRANS_PWR_CMD_OPCODE=8267,
    HCI_LE_RD_WLST_SIZE_CMD_OPCODE=8207,
    HCI_LE_REM_CON_PARAM_REQ_NEG_REPLY_CMD_OPCODE=8225,
    HCI_LE_REM_CON_PARAM_REQ_REPLY_CMD_OPCODE=8224,
    HCI_LE_RMV_DEV_FROM_RSLV_LIST_CMD_OPCODE=8232,
    HCI_LE_RMV_DEV_FROM_WLST_CMD_OPCODE=8210,
    HCI_LE_RX_TEST_CMD_OPCODE=8221,
    HCI_LE_SET_ADDR_RESOL_EN_CMD_OPCODE=8237,
    HCI_LE_SET_ADV_DATA_CMD_OPCODE=8200,
    HCI_LE_SET_ADV_EN_CMD_OPCODE=8202,
    HCI_LE_SET_ADV_PARAM_CMD_OPCODE=8198,
    HCI_LE_SET_DATA_LEN_CMD_OPCODE=8226,
    HCI_LE_SET_EVT_MASK_CMD_OPCODE=8193,
    HCI_LE_SET_HOST_CH_CLASS_CMD_OPCODE=8212,
    HCI_LE_SET_RAND_ADDR_CMD_OPCODE=8197,
    HCI_LE_SET_RSLV_PRIV_ADDR_TO_CMD_OPCODE=8238,
    HCI_LE_SET_SCAN_EN_CMD_OPCODE=8204,
    HCI_LE_SET_SCAN_PARAM_CMD_OPCODE=8203,
    HCI_LE_SET_SCAN_RSP_DATA_CMD_OPCODE=8201,
    HCI_LE_START_ENC_CMD_OPCODE=8217,
    HCI_LE_TEST_END_CMD_OPCODE=8223,
    HCI_LE_TX_TEST_CMD_OPCODE=8222,
    HCI_LE_WR_RFPATH_CPS_CMD_OPCODE=8269,
    HCI_LE_WR_SUGGTED_DFT_DATA_LEN_CMD_OPCODE=8228,
    HCI_LK_REQ_NEG_REPLY_CMD_OPCODE=1036,
    HCI_LK_REQ_REPLY_CMD_OPCODE=1035,
    HCI_MASTER_LK_CMD_OPCODE=1047,
    HCI_NO_OPERATION_CMD_OPCODE=0,
    HCI_PARK_STATE_CMD_OPCODE=2053,
    HCI_PER_INQ_MODE_CMD_OPCODE=1027,
    HCI_PIN_CODE_REQ_NEG_REPLY_CMD_OPCODE=1038,
    HCI_PIN_CODE_REQ_REPLY_CMD_OPCODE=1037,
    HCI_QOS_SETUP_CMD_OPCODE=2055,
    HCI_RD_AFH_CH_ASSESS_MODE_CMD_OPCODE=3144,
    HCI_RD_AFH_CH_MAP_CMD_OPCODE=5126,
    HCI_RD_AUTH_EN_CMD_OPCODE=3103,
    HCI_RD_AUTH_PAYL_TO_CMD_OPCODE=3195,
    HCI_RD_AUTO_FLUSH_TO_CMD_OPCODE=3111,
    HCI_RD_BD_ADDR_CMD_OPCODE=4105,
    HCI_RD_BUFF_SIZE_CMD_OPCODE=4101,
    HCI_RD_CLASS_OF_DEV_CMD_OPCODE=3107,
    HCI_RD_CLK_CMD_OPCODE=5127,
    HCI_RD_CLK_OFF_CMD_OPCODE=1055,
    HCI_RD_CON_ACCEPT_TO_CMD_OPCODE=3093,
    HCI_RD_CURR_IAC_LAP_CMD_OPCODE=3129,
    HCI_RD_DFT_ERR_DATA_REP_CMD_OPCODE=3162,
    HCI_RD_DFT_LINK_POL_STG_CMD_OPCODE=2062,
    HCI_RD_ENC_KEY_SIZE_CMD_OPCODE=5128,
    HCI_RD_ENH_TX_PWR_LVL_CMD_OPCODE=3176,
    HCI_RD_EXT_INQ_LEN_CMD_OPCODE=3200,
    HCI_RD_EXT_INQ_RSP_CMD_OPCODE=3153,
    HCI_RD_EXT_PAGE_TO_CMD_OPCODE=3198,
    HCI_RD_FAIL_CONTACT_CNT_CMD_OPCODE=5121,
    HCI_RD_FLOW_CNTL_MODE_CMD_OPCODE=3174,
    HCI_RD_HOLD_MODE_ACTIVITY_CMD_OPCODE=3115,
    HCI_RD_INQ_MODE_CMD_OPCODE=3140,
    HCI_RD_INQ_RSP_TX_PWR_LVL_CMD_OPCODE=3160,
    HCI_RD_INQ_SCAN_ACT_CMD_OPCODE=3101,
    HCI_RD_INQ_SCAN_TYPE_CMD_OPCODE=3138,
    HCI_RD_LE_HOST_SUPP_CMD_OPCODE=3180,
    HCI_RD_LINK_POL_STG_CMD_OPCODE=2060,
    HCI_RD_LINK_QUAL_CMD_OPCODE=5123,
    HCI_RD_LINK_SUPV_TO_CMD_OPCODE=3126,
    HCI_RD_LMP_HDL_CMD_OPCODE=1056,
    HCI_RD_LOCAL_EXT_FEATS_CMD_OPCODE=4100,
    HCI_RD_LOCAL_NAME_CMD_OPCODE=3092,
    HCI_RD_LOCAL_SUPP_CMDS_CMD_OPCODE=4098,
    HCI_RD_LOCAL_SUPP_CODECS_CMD_OPCODE=4107,
    HCI_RD_LOCAL_SUPP_FEATS_CMD_OPCODE=4099,
    HCI_RD_LOCAL_VER_INFO_CMD_OPCODE=4097,
    HCI_RD_LOC_OOB_DATA_CMD_OPCODE=3159,
    HCI_RD_LOC_OOB_EXT_DATA_CMD_OPCODE=3197,
    HCI_RD_LOOPBACK_MODE_CMD_OPCODE=6145,
    HCI_RD_NB_BDCST_RETX_CMD_OPCODE=3113,
    HCI_RD_NB_SUPP_IAC_CMD_OPCODE=3128,
    HCI_RD_PAGE_SCAN_ACT_CMD_OPCODE=3099,
    HCI_RD_PAGE_SCAN_TYPE_CMD_OPCODE=3142,
    HCI_RD_PAGE_TO_CMD_OPCODE=3095,
    HCI_RD_PIN_TYPE_CMD_OPCODE=3081,
    HCI_RD_REM_EXT_FEATS_CMD_OPCODE=1052,
    HCI_RD_REM_SUPP_FEATS_CMD_OPCODE=1051,
    HCI_RD_REM_VER_INFO_CMD_OPCODE=1053,
    HCI_RD_RSSI_CMD_OPCODE=5125,
    HCI_RD_SCAN_EN_CMD_OPCODE=3097,
    HCI_RD_SEC_CON_HOST_SUPP_CMD_OPCODE=3193,
    HCI_RD_SP_MODE_CMD_OPCODE=3157,
    HCI_RD_STORED_LK_CMD_OPCODE=3085,
    HCI_RD_SYNC_FLOW_CTRL_EN_CMD_OPCODE=3118,
    HCI_RD_SYNC_TRAIN_PARAM_CMD_OPCODE=3191,
    HCI_RD_TX_PWR_LVL_CMD_OPCODE=3117,
    HCI_RD_VOICE_STG_CMD_OPCODE=3109,
    HCI_REC_SYNC_TRAIN_CMD_OPCODE=1092,
    HCI_REFRESH_ENC_KEY_CMD_OPCODE=3155,
    HCI_REJECT_CON_REQ_CMD_OPCODE=1034,
    HCI_REJECT_SYNC_CON_REQ_CMD_OPCODE=1066,
    HCI_REM_NAME_REQ_CANCEL_CMD_OPCODE=1050,
    HCI_REM_NAME_REQ_CMD_OPCODE=1049,
    HCI_REM_OOB_DATA_REQ_NEG_REPLY_CMD_OPCODE=1075,
    HCI_REM_OOB_DATA_REQ_REPLY_CMD_OPCODE=1072,
    HCI_REM_OOB_EXT_DATA_REQ_REPLY_CMD_OPCODE=1093,
    HCI_RESET_CMD_OPCODE=3075,
    HCI_ROLE_DISCOVERY_CMD_OPCODE=2057,
    HCI_RST_FAIL_CONTACT_CNT_CMD_OPCODE=5122,
    HCI_SEND_KEYPRESS_NOTIF_CMD_OPCODE=3168,
    HCI_SETUP_SYNC_CON_CMD_OPCODE=1064,
    HCI_SET_AFH_HOST_CH_CLASS_CMD_OPCODE=3135,
    HCI_SET_CON_ENC_CMD_OPCODE=1043,
    HCI_SET_CON_SLV_BCST_CMD_OPCODE=1089,
    HCI_SET_CON_SLV_BCST_DATA_CMD_OPCODE=3190,
    HCI_SET_CON_SLV_BCST_REC_CMD_OPCODE=1090,
    HCI_SET_CTRL_TO_HOST_FLOW_CTRL_CMD_OPCODE=3121,
    HCI_SET_EVT_FILTER_CMD_OPCODE=3077,
    HCI_SET_EVT_MASK_CMD_OPCODE=3073,
    HCI_SET_EVT_MASK_PAGE_2_CMD_OPCODE=3171,
    HCI_SET_EXTERNAL_FRAME_CONFIG_CMD_OPCODE=3183,
    HCI_SET_MWS_CHANNEL_PARAMS_CMD_OPCODE=3182,
    HCI_SET_MWS_PATTERN_CONFIG_CMD_OPCODE=3187,
    HCI_SET_MWS_SCAN_FREQ_TABLE_CMD_OPCODE=3186,
    HCI_SET_MWS_SIGNALING_CMD_OPCODE=3184,
    HCI_SET_MWS_TRANSPORT_LAYER_CMD_OPCODE=3185,
    HCI_SET_RES_LT_ADDR_CMD_OPCODE=3188,
    HCI_SET_TX_PWR_CMD_OPCODE=-927,
    HCI_SNIFF_MODE_CMD_OPCODE=2051,
    HCI_SNIFF_SUB_CMD_OPCODE=2065,
    HCI_START_SYNC_TRAIN_CMD_OPCODE=1091,
    HCI_SWITCH_ROLE_CMD_OPCODE=2059,
    HCI_TESTER_SET_LE_PARAMS_CMD_OPCODE=-960,
    HCI_TRUNC_PAGE_CAN_CMD_OPCODE=1088,
    HCI_TRUNC_PAGE_CMD_OPCODE=1087,
    HCI_USER_CFM_REQ_NEG_REPLY_CMD_OPCODE=1069,
    HCI_USER_CFM_REQ_REPLY_CMD_OPCODE=1068,
    HCI_USER_PASSKEY_REQ_NEG_REPLY_CMD_OPCODE=1071,
    HCI_USER_PASSKEY_REQ_REPLY_CMD_OPCODE=1070,
    HCI_VS_AUDIO_ALLOCATE_CMD_OPCODE=-944,
    HCI_VS_AUDIO_CONFIGURE_CMD_OPCODE=-943,
    HCI_VS_AUDIO_GET_BUFFER_RANGE_CMD_OPCODE=-939,
    HCI_VS_AUDIO_RESET_CMD_OPCODE=-941,
    HCI_VS_AUDIO_SET_MODE_CMD_OPCODE=-942,
    HCI_VS_AUDIO_SET_POINTER_CMD_OPCODE=-940,
    HCI_WR_AFH_CH_ASSESS_MODE_CMD_OPCODE=3145,
    HCI_WR_AUTH_EN_CMD_OPCODE=3104,
    HCI_WR_AUTH_PAYL_TO_CMD_OPCODE=3196,
    HCI_WR_AUTO_FLUSH_TO_CMD_OPCODE=3112,
    HCI_WR_CLASS_OF_DEV_CMD_OPCODE=3108,
    HCI_WR_CON_ACCEPT_TO_CMD_OPCODE=3094,
    HCI_WR_CURR_IAC_LAP_CMD_OPCODE=3130,
    HCI_WR_DFT_ERR_DATA_REP_CMD_OPCODE=3163,
    HCI_WR_DFT_LINK_POL_STG_CMD_OPCODE=2063,
    HCI_WR_EXT_INQ_LEN_CMD_OPCODE=3201,
    HCI_WR_EXT_INQ_RSP_CMD_OPCODE=3154,
    HCI_WR_EXT_PAGE_TO_CMD_OPCODE=3199,
    HCI_WR_FLOW_CNTL_MODE_CMD_OPCODE=3175,
    HCI_WR_HOLD_MODE_ACTIVITY_CMD_OPCODE=3116,
    HCI_WR_INQ_MODE_CMD_OPCODE=3141,
    HCI_WR_INQ_SCAN_ACT_CMD_OPCODE=3102,
    HCI_WR_INQ_SCAN_TYPE_CMD_OPCODE=3139,
    HCI_WR_INQ_TX_PWR_LVL_CMD_OPCODE=3161,
    HCI_WR_LE_HOST_SUPP_CMD_OPCODE=3181,
    HCI_WR_LINK_POL_STG_CMD_OPCODE=2061,
    HCI_WR_LINK_SUPV_TO_CMD_OPCODE=3127,
    HCI_WR_LOCAL_NAME_CMD_OPCODE=3091,
    HCI_WR_LOOPBACK_MODE_CMD_OPCODE=6146,
    HCI_WR_NB_BDCST_RETX_CMD_OPCODE=3114,
    HCI_WR_PAGE_SCAN_ACT_CMD_OPCODE=3100,
    HCI_WR_PAGE_SCAN_TYPE_CMD_OPCODE=3143,
    HCI_WR_PAGE_TO_CMD_OPCODE=3096,
    HCI_WR_PIN_TYPE_CMD_OPCODE=3082,
    HCI_WR_SCAN_EN_CMD_OPCODE=3098,
    HCI_WR_SEC_CON_HOST_SUPP_CMD_OPCODE=3194,
    HCI_WR_SEC_CON_TEST_MODE_CMD_OPCODE=6154,
    HCI_WR_SP_DBG_MODE_CMD_OPCODE=6148,
    HCI_WR_SP_MODE_CMD_OPCODE=3158,
    HCI_WR_STORED_LK_CMD_OPCODE=3089,
    HCI_WR_SYNC_FLOW_CTRL_EN_CMD_OPCODE=3119,
    HCI_WR_SYNC_TRAIN_PARAM_CMD_OPCODE=3192,
    HCI_WR_VOICE_STG_CMD_OPCODE=3110
} hci_opcode;

typedef struct hci_le_enc_cmd hci_le_enc_cmd, *Phci_le_enc_cmd;

struct hci_le_enc_cmd {
    struct ltk key;
    uint8_t plain_data[16];
};

typedef struct hci_rd_trans_pwr_cmd_cmp_evt hci_rd_trans_pwr_cmd_cmp_evt, *Phci_rd_trans_pwr_cmd_cmp_evt;

struct hci_rd_trans_pwr_cmd_cmp_evt {
    uint8_t status;
    char min_tx_pwr;
    char max_tx_pwr;
};

typedef struct hci_cmd_stat_event hci_cmd_stat_event, *Phci_cmd_stat_event;

struct hci_cmd_stat_event {
    uint8_t status;
};

typedef struct hci_le_rem_con_param_req_reply_cmd hci_le_rem_con_param_req_reply_cmd, *Phci_le_rem_con_param_req_reply_cmd;

struct hci_le_rem_con_param_req_reply_cmd {
    uint16_t conhdl;
    uint16_t interval_min;
    uint16_t interval_max;
    uint16_t latency;
    uint16_t timeout;
    uint16_t min_ce_len;
    uint16_t max_ce_len;
};

typedef struct hci_le_rem_con_param_req_evt hci_le_rem_con_param_req_evt, *Phci_le_rem_con_param_req_evt;

struct hci_le_rem_con_param_req_evt {
    uint8_t subcode;
    undefined field_0x1;
    uint16_t conhdl;
    uint16_t interval_min;
    uint16_t interval_max;
    uint16_t latency;
    uint16_t timeout;
};

typedef struct hci_le_add_dev_to_wlst_cmd hci_le_add_dev_to_wlst_cmd, *Phci_le_add_dev_to_wlst_cmd;

struct hci_le_add_dev_to_wlst_cmd {
    uint8_t dev_addr_type;
    struct bd_addr dev_addr;
};

typedef struct hci_le_dir_adv_rep_evt hci_le_dir_adv_rep_evt, *Phci_le_dir_adv_rep_evt;

typedef struct dir_adv_report dir_adv_report, *Pdir_adv_report;

struct dir_adv_report {
    uint8_t evt_type;
    uint8_t addr_type;
    struct bd_addr addr;
    uint8_t dir_addr_type;
    struct bd_addr dir_addr;
    uint8_t rssi;
};

struct hci_le_dir_adv_rep_evt {
    uint8_t subcode;
    uint8_t nb_reports;
    struct dir_adv_report adv_rep[1];
};

typedef struct hci_le_set_adv_data_cmd hci_le_set_adv_data_cmd, *Phci_le_set_adv_data_cmd;

typedef struct adv_data adv_data, *Padv_data;

struct adv_data {
    uint8_t data[31];
};

struct hci_le_set_adv_data_cmd {
    uint8_t adv_data_len;
    struct adv_data data;
};

typedef struct hci_data_buf_ovflw_evt hci_data_buf_ovflw_evt, *Phci_data_buf_ovflw_evt;

struct hci_data_buf_ovflw_evt {
    uint8_t link_type;
};

typedef struct hci_wr_auth_payl_to_cmd hci_wr_auth_payl_to_cmd, *Phci_wr_auth_payl_to_cmd;

struct hci_wr_auth_payl_to_cmd {
    uint16_t conhdl;
    uint16_t auth_payl_to;
};

typedef struct hci_rd_rssi_cmd_cmp_evt hci_rd_rssi_cmd_cmp_evt, *Phci_rd_rssi_cmd_cmp_evt;

struct hci_rd_rssi_cmd_cmp_evt {
    uint8_t status;
    undefined field_0x1;
    uint16_t conhdl;
    int8_t rssi;
    undefined field_0x5;
};

typedef struct hci_acl_data_rx hci_acl_data_rx, *Phci_acl_data_rx;

struct hci_acl_data_rx {
    uint16_t conhdl;
    uint8_t pb_bc_flag;
    undefined field_0x3;
    uint16_t length;
    uint8_t rx_hdl;
    undefined field_0x7;
};

typedef struct hci_le_set_adv_en_cmd hci_le_set_adv_en_cmd, *Phci_le_set_adv_en_cmd;

struct hci_le_set_adv_en_cmd {
    uint8_t adv_en;
};

typedef struct hci_le_wr_suggted_dft_data_len_cmd hci_le_wr_suggted_dft_data_len_cmd, *Phci_le_wr_suggted_dft_data_len_cmd;

struct hci_le_wr_suggted_dft_data_len_cmd {
    uint16_t suggted_max_tx_octets;
    uint16_t suggted_max_tx_time;
};

typedef struct hci_le_generate_p256_public_key_cmp_evt hci_le_generate_p256_public_key_cmp_evt, *Phci_le_generate_p256_public_key_cmp_evt;

typedef struct t_public_key t_public_key, *Pt_public_key;

struct t_public_key {
    uint8_t x[32];
    uint8_t y[32];
};

struct hci_le_generate_p256_public_key_cmp_evt {
    uint8_t subcode;
    uint8_t status;
    struct t_public_key public_key;
};

typedef struct hci_le_con_cmp_evt hci_le_con_cmp_evt, *Phci_le_con_cmp_evt;

struct hci_le_con_cmp_evt {
    uint8_t subcode;
    uint8_t status;
    uint16_t conhdl;
    uint8_t role;
    uint8_t peer_addr_type;
    struct bd_addr peer_addr;
    uint16_t con_interval;
    uint16_t con_latency;
    uint16_t sup_to;
    uint8_t clk_accuracy;
    undefined field_0x13;
};

typedef struct hci_le_con_update_cmd hci_le_con_update_cmd, *Phci_le_con_update_cmd;

struct hci_le_con_update_cmd {
    uint16_t conhdl;
    uint16_t con_intv_min;
    uint16_t con_intv_max;
    uint16_t con_latency;
    uint16_t superv_to;
    uint16_t ce_len_min;
    uint16_t ce_len_max;
};

typedef struct hci_acl_data_tx hci_acl_data_tx, *Phci_acl_data_tx;

typedef struct em_buf_node em_buf_node, *Pem_buf_node;

typedef struct co_list_hdr co_list_hdr, *Pco_list_hdr;

struct co_list_hdr {
    struct co_list_hdr * next;
};

struct hci_acl_data_tx {
    uint16_t conhdl;
    uint8_t pb_bc_flag;
    undefined field_0x3;
    uint16_t length;
    undefined field_0x6;
    undefined field_0x7;
    struct em_buf_node * buf;
};

struct em_buf_node {
    struct co_list_hdr hdr;
    uint16_t idx;
    uint16_t buf_ptr;
};

typedef struct hci_le_rd_max_data_len_cmd_cmp_evt hci_le_rd_max_data_len_cmd_cmp_evt, *Phci_le_rd_max_data_len_cmd_cmp_evt;

struct hci_le_rd_max_data_len_cmd_cmp_evt {
    uint8_t status;
    undefined field_0x1;
    uint16_t suppted_max_tx_octets;
    uint16_t suppted_max_tx_time;
    uint16_t suppted_max_rx_octets;
    uint16_t suppted_max_rx_time;
};

typedef struct hci_flush_occurred_evt hci_flush_occurred_evt, *Phci_flush_occurred_evt;

struct hci_flush_occurred_evt {
    uint16_t conhdl;
};

typedef enum td_status_bit {
    TD_STATUS_RX=1,
    TD_STATUS_RX_PS=3,
    TD_STATUS_TX=0,
    TD_STATUS_TX_PS=2
} td_status_bit;

typedef struct td_env_tag td_env_tag, *Ptd_env_tag;

typedef struct mm_timer_tag mm_timer_tag, *Pmm_timer_tag;

struct mm_timer_tag {
    struct co_list_hdr list_hdr;
    void (* cb)(void *);
    void * env;
    uint32_t time;
};

struct td_env_tag {
    struct mm_timer_tag td_timer;
    uint32_t pck_cnt_tx;
    uint32_t pck_cnt_rx;
    uint32_t pck_cnt_tx_ps;
    uint32_t pck_cnt_rx_ps;
    uint8_t vif_index;
    uint8_t status;
    _Bool is_on;
    _Bool has_active_chan;
};

typedef struct rw_task_msg_t rw_task_msg_t, *Prw_task_msg_t;

struct rw_task_msg_t {
    uint8_t msg_type;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    void * params;
};

typedef struct rwip_eif_api rwip_eif_api, *Prwip_eif_api;

struct rwip_eif_api {
    void (* read)(uint8_t *, uint32_t, void (* )(void *, uint8_t), void *);
    void (* write)(uint8_t *, uint32_t, void (* )(void *, uint8_t), void *);
    void (* flow_on)(void);
    _Bool (* flow_off)(void);
};

typedef enum prevent_sleep {
    RW_AHI_TIMEOUT=8,
    RW_CRYPT_ONGOING=16,
    RW_CSB_NOT_LPO_ALLOWED=64,
    RW_DELETE_ELT_ONGOING=32,
    RW_MWS_WLAN_EVENT_GENERATOR_ACTIVE=-128,
    RW_TL_RX_ONGOING=4,
    RW_TL_TX_ONGOING=2,
    RW_WAKE_UP_ONGOING=1
} prevent_sleep;

typedef struct rwip_prio rwip_prio, *Prwip_prio;

struct rwip_prio {
    uint8_t value;
    uint8_t increment;
};

typedef struct rwip_rf_api.conflict rwip_rf_api.conflict, *Prwip_rf_api.conflict;

struct rwip_rf_api.conflict {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef enum rwip_eif_types {
    RWIP_EIF_AHI=2,
    RWIP_EIF_HCIC=0,
    RWIP_EIF_HCIH=1
} rwip_eif_types;

typedef struct rwip_rf_api rwip_rf_api, *Prwip_rf_api;

struct rwip_rf_api {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict10 rwip_rf_api.conflict10, *Prwip_rf_api.conflict10;

struct rwip_rf_api.conflict10 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict11 rwip_rf_api.conflict11, *Prwip_rf_api.conflict11;

struct rwip_rf_api.conflict11 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict12 rwip_rf_api.conflict12, *Prwip_rf_api.conflict12;

struct rwip_rf_api.conflict12 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict9 rwip_rf_api.conflict9, *Prwip_rf_api.conflict9;

struct rwip_rf_api.conflict9 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict8 rwip_rf_api.conflict8, *Prwip_rf_api.conflict8;

struct rwip_rf_api.conflict8 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict7 rwip_rf_api.conflict7, *Prwip_rf_api.conflict7;

struct rwip_rf_api.conflict7 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict6 rwip_rf_api.conflict6, *Prwip_rf_api.conflict6;

struct rwip_rf_api.conflict6 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict1 rwip_rf_api.conflict1, *Prwip_rf_api.conflict1;

struct rwip_rf_api.conflict1 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict13 rwip_rf_api.conflict13, *Prwip_rf_api.conflict13;

struct rwip_rf_api.conflict13 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict14 rwip_rf_api.conflict14, *Prwip_rf_api.conflict14;

struct rwip_rf_api.conflict14 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict15 rwip_rf_api.conflict15, *Prwip_rf_api.conflict15;

struct rwip_rf_api.conflict15 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict16 rwip_rf_api.conflict16, *Prwip_rf_api.conflict16;

struct rwip_rf_api.conflict16 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict5 rwip_rf_api.conflict5, *Prwip_rf_api.conflict5;

struct rwip_rf_api.conflict5 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict17 rwip_rf_api.conflict17, *Prwip_rf_api.conflict17;

struct rwip_rf_api.conflict17 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict4 rwip_rf_api.conflict4, *Prwip_rf_api.conflict4;

struct rwip_rf_api.conflict4 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict18 rwip_rf_api.conflict18, *Prwip_rf_api.conflict18;

struct rwip_rf_api.conflict18 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict3 rwip_rf_api.conflict3, *Prwip_rf_api.conflict3;

struct rwip_rf_api.conflict3 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict19 rwip_rf_api.conflict19, *Prwip_rf_api.conflict19;

struct rwip_rf_api.conflict19 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict2 rwip_rf_api.conflict2, *Prwip_rf_api.conflict2;

struct rwip_rf_api.conflict2 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict20 rwip_rf_api.conflict20, *Prwip_rf_api.conflict20;

struct rwip_rf_api.conflict20 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict21 rwip_rf_api.conflict21, *Prwip_rf_api.conflict21;

struct rwip_rf_api.conflict21 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct rwip_rf_api.conflict22 rwip_rf_api.conflict22, *Prwip_rf_api.conflict22;

struct rwip_rf_api.conflict22 {
    void (* reset)(void);
    void (* force_agc_enable)(_Bool);
    _Bool (* txpwr_dec)(uint8_t);
    _Bool (* txpwr_inc)(uint8_t);
    void (* txpwr_max_set)(int8_t);
    uint8_t (* txpwr_dbm_get)(uint8_t, uint8_t);
    uint8_t (* txpwr_cs_get)(int8_t);
    int8_t (* rssi_convert)(uint8_t);
    uint32_t (* reg_rd)(uint16_t);
    void (* reg_wr)(uint16_t, uint32_t);
    void (* sleep)(void);
    uint8_t txpwr_max;
    int8_t rssi_high_thr;
    int8_t rssi_low_thr;
    int8_t rssi_interf_thr;
    uint8_t wakeup_delay;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef enum rw_task_msg_type {
    FW_TO_FW_MSG=2,
    HOST_TO_FW_MSG=1
} rw_task_msg_type;

typedef struct rwip_time_t rwip_time_t, *Prwip_time_t;

struct rwip_time_t {
    uint32_t time;
    uint32_t next_tick;
};

typedef struct rwip_env_tag rwip_env_tag, *Prwip_env_tag;

struct rwip_env_tag {
    uint32_t lp_cycle_wakeup_delay;
    uint32_t sleep_acc_error;
    uint16_t sleep_algo_dur;
    uint16_t prevent_sleep;
    _Bool sleep_enable;
    _Bool ext_wakeup_enable;
    undefined field_0xe;
    undefined field_0xf;
};

typedef enum flag {
    FL_HASH=32,
    FL_MINUS=2,
    FL_PLUS=4,
    FL_SIGNED=64,
    FL_SPACE=16,
    FL_TICK=8,
    FL_UPPER=-128,
    FL_ZERO=1
} flag;

typedef enum ranks {
    rank_char=-2,
    rank_int=0,
    rank_long=1,
    rank_longlong=2,
    rank_short=-1
} ranks;

typedef enum anon_enum_8 {
    st_flags=1,
    st_modifiers=4,
    st_normal=0,
    st_prec=3,
    st_width=2
} anon_enum_8;

typedef struct tmrTimerControl tmrTimerControl, *PtmrTimerControl;

typedef struct tmrTimerControl * TimerHandle_t;

typedef struct xLIST_ITEM xLIST_ITEM, *PxLIST_ITEM;

typedef struct xLIST_ITEM ListItem_t;

typedef uint32_t TickType_t;

typedef uint32_t UBaseType_t;

typedef struct xLIST xLIST, *PxLIST;

typedef struct xMINI_LIST_ITEM xMINI_LIST_ITEM, *PxMINI_LIST_ITEM;

typedef struct xMINI_LIST_ITEM MiniListItem_t;

struct xMINI_LIST_ITEM {
    TickType_t xItemValue;
    struct xLIST_ITEM * pxNext;
    struct xLIST_ITEM * pxPrevious;
};

struct xLIST {
    UBaseType_t uxNumberOfItems;
    ListItem_t * pxIndex;
    MiniListItem_t xListEnd;
};

struct xLIST_ITEM {
    TickType_t xItemValue;
    struct xLIST_ITEM * pxNext;
    struct xLIST_ITEM * pxPrevious;
    void * pvOwner;
    struct xLIST * pvContainer;
};

struct tmrTimerControl {
    char * pcTimerName;
    ListItem_t xTimerListItem;
    TickType_t xTimerPeriodInTicks;
    void * pvTimerID;
    void (* pxCallbackFunction)(TimerHandle_t);
    UBaseType_t uxTimerNumber;
    uint8_t ucStatus;
    undefined field_0x29;
    undefined field_0x2a;
    undefined field_0x2b;
};

typedef struct scanu_env_tag.conflict3 scanu_env_tag.conflict3, *Pscanu_env_tag.conflict3;

typedef struct scanu_start_req scanu_start_req, *Pscanu_start_req;

typedef struct hal_dma_desc_tag hal_dma_desc_tag, *Phal_dma_desc_tag;

typedef struct mac_scan_result mac_scan_result, *Pmac_scan_result;

typedef uint16_t ke_task_id_t;

typedef struct mac_addr.conflict171 mac_addr.conflict171, *Pmac_addr.conflict171;

typedef struct mac_ssid mac_ssid, *Pmac_ssid;

typedef struct scan_chan_tag scan_chan_tag, *Pscan_chan_tag;

typedef struct mac_addr mac_addr, *Pmac_addr;

typedef uint32_t u32_l;

typedef uint16_t u16_l;

typedef uint8_t u8_l;

typedef struct dma_desc dma_desc, *Pdma_desc;

typedef struct mac_addr.conflict41 mac_addr.conflict41, *Pmac_addr.conflict41;

typedef int8_t s8_l;

struct mac_addr.conflict171 {
    uint16_t array[3];
};

struct mac_addr.conflict41 {
    uint16_t array[3];
};

struct hal_dma_desc_tag {
    struct co_list_hdr hdr;
    struct dma_desc * dma_desc;
    void (* cb)(void *, int);
    void * env;
};

struct scan_chan_tag {
    u16_l freq;
    u8_l band;
    u8_l flags;
    s8_l tx_power;
    undefined field_0x5;
};

struct mac_ssid {
    u8_l length;
    u8_l array[32];
    u8_l array_tail[1];
};

struct mac_scan_result {
    struct mac_addr.conflict41 bssid;
    struct mac_ssid ssid;
    uint16_t bsstype;
    undefined field_0x2a;
    undefined field_0x2b;
    struct scan_chan_tag * chan;
    uint16_t beacon_period;
    uint16_t cap_info;
    _Bool valid_flag;
    int8_t rssi;
    int8_t ppm_rel;
    int8_t ppm_abs;
};

struct scanu_env_tag.conflict3 {
    struct scanu_start_req * param;
    struct hal_dma_desc_tag dma_desc;
    uint16_t result_cnt;
    undefined field_0x16;
    undefined field_0x17;
    struct mac_scan_result scan_result[6];
    ke_task_id_t src_id;
    _Bool joining;
    uint8_t band;
    struct mac_addr.conflict171 bssid;
    struct mac_ssid ssid;
};

struct mac_addr {
    u8_l array[6];
};

struct scanu_start_req {
    struct scan_chan_tag chan[42];
    struct mac_ssid ssid[2];
    struct mac_addr bssid;
    undefined field_0x146;
    undefined field_0x147;
    u32_l add_ies;
    u16_l add_ie_len;
    u8_l vif_idx;
    u8_l chan_cnt;
    u8_l ssid_cnt;
    _Bool no_cck;
    undefined field_0x152;
    undefined field_0x153;
};

struct dma_desc {
    uint32_t src;
    uint32_t dest;
    uint16_t length;
    uint16_t ctrl;
    uint32_t next;
};

typedef struct scanu_env_tag.conflict2 scanu_env_tag.conflict2, *Pscanu_env_tag.conflict2;

struct scanu_env_tag.conflict2 {
    struct scanu_start_req * param;
    struct hal_dma_desc_tag dma_desc;
    uint16_t result_cnt;
    undefined field_0x16;
    undefined field_0x17;
    struct mac_scan_result scan_result[6];
    ke_task_id_t src_id;
    _Bool joining;
    uint8_t band;
    struct mac_addr.conflict171 bssid;
    struct mac_ssid ssid;
};

typedef struct scanu_env_tag.conflict scanu_env_tag.conflict, *Pscanu_env_tag.conflict;

typedef struct mac_addr.conflict mac_addr.conflict, *Pmac_addr.conflict;

struct mac_addr.conflict {
    uint16_t array[3];
};

struct scanu_env_tag.conflict {
    struct scanu_start_req * param;
    struct hal_dma_desc_tag dma_desc;
    uint16_t result_cnt;
    undefined field_0x16;
    undefined field_0x17;
    struct mac_scan_result scan_result[6];
    ke_task_id_t src_id;
    _Bool joining;
    uint8_t band;
    struct mac_addr.conflict bssid;
    struct mac_ssid ssid;
};

typedef struct scanu_env_tag.conflict1 scanu_env_tag.conflict1, *Pscanu_env_tag.conflict1;

typedef struct mac_addr.conflict65 mac_addr.conflict65, *Pmac_addr.conflict65;

struct mac_addr.conflict65 {
    uint16_t array[3];
};

struct scanu_env_tag.conflict1 {
    struct scanu_start_req * param;
    struct hal_dma_desc_tag dma_desc;
    uint16_t result_cnt;
    undefined field_0x16;
    undefined field_0x17;
    struct mac_scan_result scan_result[6];
    ke_task_id_t src_id;
    _Bool joining;
    uint8_t band;
    struct mac_addr.conflict65 bssid;
    struct mac_ssid ssid;
};

typedef struct scanu_env_tag scanu_env_tag, *Pscanu_env_tag;

typedef struct mac_addr.conflict48 mac_addr.conflict48, *Pmac_addr.conflict48;

struct mac_addr.conflict48 {
    uint16_t array[3];
};

struct scanu_env_tag {
    struct scanu_start_req * param;
    struct hal_dma_desc_tag dma_desc;
    uint16_t result_cnt;
    undefined field_0x16;
    undefined field_0x17;
    struct mac_scan_result scan_result[6];
    ke_task_id_t src_id;
    _Bool joining;
    uint8_t band;
    struct mac_addr.conflict48 bssid;
    struct mac_ssid ssid;
};

typedef struct scanu_add_ie_tag scanu_add_ie_tag, *Pscanu_add_ie_tag;

struct scanu_add_ie_tag {
    struct dma_desc dma_desc;
    uint32_t buf[50];
};

typedef enum HBN_PIR_HPF_Type {
    HBN_PIR_HPF_METHOD0=0,
    HBN_PIR_HPF_METHOD1=1,
    HBN_PIR_HPF_METHOD2=2
} HBN_PIR_HPF_Type;

typedef enum HBN_OUT0_INT_Type {
    HBN_OUT0_INT_GPIO7=0,
    HBN_OUT0_INT_GPIO8=1,
    HBN_OUT0_INT_RTC=2
} HBN_OUT0_INT_Type;

typedef enum HBN_XCLK_CLK_Type {
    HBN_XCLK_CLK_RC32M=0,
    HBN_XCLK_CLK_XTAL=1
} HBN_XCLK_CLK_Type;

typedef enum HBN_BOR_THRES_Type {
    HBN_BOR_THRES_2P0V=0,
    HBN_BOR_THRES_2P4V=1
} HBN_BOR_THRES_Type;

typedef struct HBN_APP_CFG_Type HBN_APP_CFG_Type, *PHBN_APP_CFG_Type;

typedef enum HBN_GPIO_INT_Trigger_Type {
    HBN_GPIO_INT_TRIGGER_ASYNC_FALLING_EDGE=4,
    HBN_GPIO_INT_TRIGGER_ASYNC_HIGH_LEVEL=7,
    HBN_GPIO_INT_TRIGGER_ASYNC_LOW_LEVEL=6,
    HBN_GPIO_INT_TRIGGER_ASYNC_RISING_EDGE=5,
    HBN_GPIO_INT_TRIGGER_SYNC_FALLING_EDGE=0,
    HBN_GPIO_INT_TRIGGER_SYNC_HIGH_LEVEL=3,
    HBN_GPIO_INT_TRIGGER_SYNC_LOW_LEVEL=2,
    HBN_GPIO_INT_TRIGGER_SYNC_RISING_EDGE=1
} HBN_GPIO_INT_Trigger_Type;

typedef struct SPI_Flash_Cfg_Type SPI_Flash_Cfg_Type, *PSPI_Flash_Cfg_Type;

typedef enum HBN_LEVEL_Type {
    HBN_LEVEL_0=0,
    HBN_LEVEL_1=1,
    HBN_LEVEL_2=2,
    HBN_LEVEL_3=3
} HBN_LEVEL_Type;

typedef enum HBN_LDO_LEVEL_Type {
    HBN_LDO_LEVEL_0P60V=0,
    HBN_LDO_LEVEL_0P65V=1,
    HBN_LDO_LEVEL_0P70V=2,
    HBN_LDO_LEVEL_0P75V=3,
    HBN_LDO_LEVEL_0P80V=4,
    HBN_LDO_LEVEL_0P85V=5,
    HBN_LDO_LEVEL_0P90V=6,
    HBN_LDO_LEVEL_0P95V=7,
    HBN_LDO_LEVEL_1P00V=8,
    HBN_LDO_LEVEL_1P05V=9,
    HBN_LDO_LEVEL_1P10V=10,
    HBN_LDO_LEVEL_1P15V=11,
    HBN_LDO_LEVEL_1P20V=12,
    HBN_LDO_LEVEL_1P25V=13,
    HBN_LDO_LEVEL_1P30V=14,
    HBN_LDO_LEVEL_1P35V=15
} HBN_LDO_LEVEL_Type;

struct HBN_APP_CFG_Type {
    uint8_t useXtal32k;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    uint32_t sleepTime;
    uint8_t gpioWakeupSrc;
    enum HBN_GPIO_INT_Trigger_Type gpioTrigType;
    undefined field_0xa;
    undefined field_0xb;
    struct SPI_Flash_Cfg_Type * flashCfg;
    enum HBN_LEVEL_Type hbnLevel;
    enum HBN_LDO_LEVEL_Type ldoLevel;
    undefined field_0x12;
    undefined field_0x13;
};

struct SPI_Flash_Cfg_Type {
    uint8_t ioMode;
    uint8_t cReadSupport;
    uint8_t clkDelay;
    uint8_t clkInvert;
    uint8_t resetEnCmd;
    uint8_t resetCmd;
    uint8_t resetCreadCmd;
    uint8_t resetCreadCmdSize;
    uint8_t jedecIdCmd;
    uint8_t jedecIdCmdDmyClk;
    uint8_t qpiJedecIdCmd;
    uint8_t qpiJedecIdCmdDmyClk;
    uint8_t sectorSize;
    uint8_t mid;
    uint16_t pageSize;
    uint8_t chipEraseCmd;
    uint8_t sectorEraseCmd;
    uint8_t blk32EraseCmd;
    uint8_t blk64EraseCmd;
    uint8_t writeEnableCmd;
    uint8_t pageProgramCmd;
    uint8_t qpageProgramCmd;
    uint8_t qppAddrMode;
    uint8_t fastReadCmd;
    uint8_t frDmyClk;
    uint8_t qpiFastReadCmd;
    uint8_t qpiFrDmyClk;
    uint8_t fastReadDoCmd;
    uint8_t frDoDmyClk;
    uint8_t fastReadDioCmd;
    uint8_t frDioDmyClk;
    uint8_t fastReadQoCmd;
    uint8_t frQoDmyClk;
    uint8_t fastReadQioCmd;
    uint8_t frQioDmyClk;
    uint8_t qpiFastReadQioCmd;
    uint8_t qpiFrQioDmyClk;
    uint8_t qpiPageProgramCmd;
    uint8_t writeVregEnableCmd;
    uint8_t wrEnableIndex;
    uint8_t qeIndex;
    uint8_t busyIndex;
    uint8_t wrEnableBit;
    uint8_t qeBit;
    uint8_t busyBit;
    uint8_t wrEnableWriteRegLen;
    uint8_t wrEnableReadRegLen;
    uint8_t qeWriteRegLen;
    uint8_t qeReadRegLen;
    uint8_t releasePowerDown;
    uint8_t busyReadRegLen;
    uint8_t readRegCmd[4];
    uint8_t writeRegCmd[4];
    uint8_t enterQpi;
    uint8_t exitQpi;
    uint8_t cReadMode;
    uint8_t cRExit;
    uint8_t burstWrapCmd;
    uint8_t burstWrapCmdDmyClk;
    uint8_t burstWrapDataMode;
    uint8_t burstWrapData;
    uint8_t deBurstWrapCmd;
    uint8_t deBurstWrapCmdDmyClk;
    uint8_t deBurstWrapDataMode;
    uint8_t deBurstWrapData;
    uint16_t timeEsector;
    uint16_t timeE32k;
    uint16_t timeE64k;
    uint16_t timePagePgm;
    uint16_t timeCe;
    uint8_t pdDelay;
    uint8_t qeData;
};

typedef struct HBN_BOR_CFG_Type HBN_BOR_CFG_Type, *PHBN_BOR_CFG_Type;

struct HBN_BOR_CFG_Type {
    uint8_t enableBor;
    uint8_t enableBorInt;
    uint8_t borThreshold;
    uint8_t enablePorInBor;
};

typedef enum HBN_PIR_LPF_Type {
    HBN_PIR_LPF_DIV1=0,
    HBN_PIR_LPF_DIV2=1
} HBN_PIR_LPF_Type;

typedef struct HBN_PIR_INT_CFG_Type HBN_PIR_INT_CFG_Type, *PHBN_PIR_INT_CFG_Type;

typedef enum BL_Fun_Type {
    DISABLE=0,
    ENABLE=1
} BL_Fun_Type;

struct HBN_PIR_INT_CFG_Type {
    enum BL_Fun_Type lowIntEn;
    enum BL_Fun_Type highIntEn;
};

typedef enum HBN_32K_CLK_Type {
    HBN_32K_DIG=3,
    HBN_32K_RC=0,
    HBN_32K_XTAL=1
} HBN_32K_CLK_Type;

typedef enum HBN_ROOT_CLK_Type {
    HBN_ROOT_CLK_PLL=2,
    HBN_ROOT_CLK_RC32M=0,
    HBN_ROOT_CLK_XTAL=1
} HBN_ROOT_CLK_Type;

typedef enum HBN_UART_CLK_Type {
    HBN_UART_CLK_160M=1,
    HBN_UART_CLK_FCLK=0
} HBN_UART_CLK_Type;

typedef enum HBN_INT_Type {
    HBN_INT_ACOMP0=20,
    HBN_INT_ACOMP1=22,
    HBN_INT_BOR=18,
    HBN_INT_GPIO7=0,
    HBN_INT_GPIO8=1,
    HBN_INT_PIR=17,
    HBN_INT_RTC=16
} HBN_INT_Type;

typedef enum HBN_OUT1_INT_Type {
    HBN_OUT1_INT_ACOMP0=2,
    HBN_OUT1_INT_ACOMP1=3,
    HBN_OUT1_INT_BOR=1,
    HBN_OUT1_INT_PIR=0
} HBN_OUT1_INT_Type;

typedef enum HBN_BOR_MODE_Type {
    HBN_BOR_MODE_POR_INDEPENDENT=0,
    HBN_BOR_MODE_POR_RELEVANT=1
} HBN_BOR_MODE_Type;

typedef enum HBN_RTC_INT_Delay_Type {
    HBN_RTC_INT_DELAY_0T=1,
    HBN_RTC_INT_DELAY_32T=0
} HBN_RTC_INT_Delay_Type;

typedef struct tmrCallbackParameters.conflict1 tmrCallbackParameters.conflict1, *PtmrCallbackParameters.conflict1;

typedef struct tmrCallbackParameters.conflict1 CallbackParameters_t.conflict;

struct tmrCallbackParameters.conflict1 {
    void (* pxCallbackFunction)(void *, uint32_t);
    void * pvParameter1;
    uint32_t ulParameter2;
};

typedef struct tmrTimerQueueMessage tmrTimerQueueMessage, *PtmrTimerQueueMessage;

typedef int32_t BaseType_t;

typedef union anon_union_for_u anon_union_for_u, *Panon_union_for_u;

typedef struct tmrTimerParameters tmrTimerParameters, *PtmrTimerParameters;

typedef struct tmrTimerParameters TimerParameter_t;

typedef struct tmrCallbackParameters.conflict2 tmrCallbackParameters.conflict2, *PtmrCallbackParameters.conflict2;

typedef struct tmrCallbackParameters.conflict2 CallbackParameters_t.conflict1;

typedef struct tmrTimerControl xTIMER;

typedef xTIMER Timer_t;

struct tmrTimerParameters {
    TickType_t xMessageValue;
    Timer_t * pxTimer;
};

struct tmrCallbackParameters.conflict2 {
    void (* pxCallbackFunction)(void *, uint32_t);
    void * pvParameter1;
    uint32_t ulParameter2;
};

union anon_union_for_u {
    TimerParameter_t xTimerParameters;
    CallbackParameters_t.conflict1 xCallbackParameters;
};

struct tmrTimerQueueMessage {
    BaseType_t xMessageID;
    union anon_union_for_u u;
};

typedef struct tmrCallbackParameters.conflict tmrCallbackParameters.conflict, *PtmrCallbackParameters.conflict;

struct tmrCallbackParameters.conflict {
    void (* pxCallbackFunction)(void *, uint32_t);
    void * pvParameter1;
    uint32_t ulParameter2;
};

typedef struct tmrCallbackParameters.conflict4 tmrCallbackParameters.conflict4, *PtmrCallbackParameters.conflict4;

typedef struct tmrCallbackParameters.conflict4 CallbackParameters_t.conflict3;

struct tmrCallbackParameters.conflict4 {
    void (* pxCallbackFunction)(void *, uint32_t);
    void * pvParameter1;
    uint32_t ulParameter2;
};

typedef struct tmrTimerQueueMessage DaemonTaskMessage_t;

typedef struct tmrCallbackParameters.conflict3 tmrCallbackParameters.conflict3, *PtmrCallbackParameters.conflict3;

struct tmrCallbackParameters.conflict3 {
    void (* pxCallbackFunction)(void *, uint32_t);
    void * pvParameter1;
    uint32_t ulParameter2;
};

typedef struct tmrCallbackParameters tmrCallbackParameters, *PtmrCallbackParameters;

struct tmrCallbackParameters {
    void (* pxCallbackFunction)(void *, uint32_t);
    void * pvParameter1;
    uint32_t ulParameter2;
};

typedef struct tmrCallbackParameters.conflict CallbackParameters_t;

typedef struct tmrCallbackParameters.conflict3 CallbackParameters_t.conflict2;

typedef enum llm_msg_id {
    LLM_ECC_RESULT_IND=6,
    LLM_ENC_IND=5,
    LLM_ENC_REQ=4,
    LLM_GEN_CHNL_CLS_CMD=8,
    LLM_LE_CHNL_ASSESS_TIMER=7,
    LLM_LE_ENH_PRIV_ADDR_RENEW_TIMER=9,
    LLM_LE_SET_HOST_CH_CLASS_CMD_STO=0,
    LLM_LE_SET_HOST_CH_CLASS_REQ=2,
    LLM_LE_SET_HOST_CH_CLASS_REQ_IND=3,
    LLM_STOP_IND=1
} llm_msg_id;

typedef struct llm_enc_req llm_enc_req, *Pllm_enc_req;

struct llm_enc_req {
    struct ltk key;
    uint8_t plain_data[16];
};

typedef struct llm_enc_ind llm_enc_ind, *Pllm_enc_ind;

struct llm_enc_ind {
    uint8_t status;
    uint8_t encrypted_data[16];
};

typedef enum llm_state_id {
    LLM_ADV_STATE_MASK=-16,
    LLM_COEXT_ADVERTISING_IDLE=16,
    LLM_COEXT_ADVERTISING_INITIATING=18,
    LLM_COEXT_ADVERTISING_SCANNING=17,
    LLM_COEXT_ADVERTISING_STOPPING=19,
    LLM_COEXT_IDLE_IDLE=0,
    LLM_COEXT_IDLE_INITIATING=2,
    LLM_COEXT_IDLE_SCANNING=1,
    LLM_COEXT_IDLE_STOPPING=3,
    LLM_COEXT_STOPPING_IDLE=32,
    LLM_COEXT_STOPPING_INITIATING=34,
    LLM_COEXT_STOPPING_SCANNING=33,
    LLM_COEXT_STOPPING_STOPPING=35,
    LLM_SCAN_INIT_STATE_MASK=15,
    LLM_STATE_MAX=37,
    LLM_TEST=36
} llm_state_id;

typedef struct ipc_shared_env_tag ipc_shared_env_tag, *Pipc_shared_env_tag;

typedef struct ipc_a2e_msg ipc_a2e_msg, *Pipc_a2e_msg;

typedef struct txdesc_host txdesc_host, *Ptxdesc_host;

typedef struct hostdesc hostdesc, *Phostdesc;

struct hostdesc {
    uint32_t pbuf_addr;
    u32_l packet_addr;
    u16_l packet_len;
    undefined field_0xa;
    undefined field_0xb;
    u32_l status_addr;
    struct mac_addr eth_dest_addr;
    struct mac_addr eth_src_addr;
    u16_l ethertype;
    u16_l pn[4];
    u16_l sn;
    u16_l timestamp;
    u8_l tid;
    u8_l vif_idx;
    u8_l staid;
    undefined field_0x2d;
    u16_l flags;
    u32_l pbuf_chained_ptr[4];
    u32_l pbuf_chained_len[4];
};

struct txdesc_host {
    u32_l ready;
    struct hostdesc host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

struct ipc_a2e_msg {
    u32_l dummy_word;
    u32_l msg[127];
};

struct ipc_shared_env_tag {
    struct ipc_a2e_msg msg_a2e_buf;
    u32_l pattern_addr;
    struct txdesc_host txdesc0[4];
};

typedef struct ipc_e2a_msg ipc_e2a_msg, *Pipc_e2a_msg;

struct ipc_e2a_msg {
    u16_l id;
    u16_l dummy_dest_id;
    u16_l dummy_src_id;
    u16_l param_len;
    u32_l param[245];
    u32_l pattern;
};

typedef struct ipc_shared_env_tag.conflict ipc_shared_env_tag.conflict, *Pipc_shared_env_tag.conflict;

typedef struct txdesc_host.conflict txdesc_host.conflict, *Ptxdesc_host.conflict;

typedef struct hostdesc.conflict hostdesc.conflict, *Phostdesc.conflict;

struct hostdesc.conflict {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict eth_dest_addr;
    struct mac_addr.conflict eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict {
    uint32_t ready;
    struct hostdesc.conflict host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

struct ipc_shared_env_tag.conflict {
    struct ipc_a2e_msg msg_a2e_buf;
    uint32_t pattern_addr;
    struct txdesc_host.conflict txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict11 ipc_shared_env_tag.conflict11, *Pipc_shared_env_tag.conflict11;

typedef struct txdesc_host.conflict28 txdesc_host.conflict28, *Ptxdesc_host.conflict28;

typedef struct hostdesc.conflict44 hostdesc.conflict44, *Phostdesc.conflict44;

typedef struct mac_addr.conflict201 mac_addr.conflict201, *Pmac_addr.conflict201;

typedef struct mac_addr.conflict202 mac_addr.conflict202, *Pmac_addr.conflict202;

struct mac_addr.conflict201 {
    uint16_t array[3];
};

struct mac_addr.conflict202 {
    uint16_t array[3];
};

struct hostdesc.conflict44 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict201 eth_dest_addr;
    struct mac_addr.conflict202 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict28 {
    uint32_t ready;
    struct hostdesc.conflict44 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

struct ipc_shared_env_tag.conflict11 {
    struct ipc_a2e_msg msg_a2e_buf;
    uint32_t pattern_addr;
    struct txdesc_host.conflict28 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict10 ipc_shared_env_tag.conflict10, *Pipc_shared_env_tag.conflict10;

typedef struct txdesc_host.conflict8 txdesc_host.conflict8, *Ptxdesc_host.conflict8;

typedef struct hostdesc.conflict19 hostdesc.conflict19, *Phostdesc.conflict19;

typedef struct mac_addr.conflict129 mac_addr.conflict129, *Pmac_addr.conflict129;

typedef struct mac_addr.conflict130 mac_addr.conflict130, *Pmac_addr.conflict130;

struct mac_addr.conflict129 {
    uint16_t array[3];
};

struct mac_addr.conflict130 {
    uint16_t array[3];
};

struct hostdesc.conflict19 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict129 eth_dest_addr;
    struct mac_addr.conflict130 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict8 {
    uint32_t ready;
    struct hostdesc.conflict19 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

struct ipc_shared_env_tag.conflict10 {
    struct ipc_a2e_msg msg_a2e_buf;
    uint32_t pattern_addr;
    struct txdesc_host.conflict8 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict7 ipc_shared_env_tag.conflict7, *Pipc_shared_env_tag.conflict7;

typedef struct txdesc_host.conflict13 txdesc_host.conflict13, *Ptxdesc_host.conflict13;

typedef struct hostdesc.conflict25 hostdesc.conflict25, *Phostdesc.conflict25;

typedef struct mac_addr.conflict143 mac_addr.conflict143, *Pmac_addr.conflict143;

typedef struct mac_addr.conflict144 mac_addr.conflict144, *Pmac_addr.conflict144;

struct mac_addr.conflict144 {
    uint16_t array[3];
};

struct mac_addr.conflict143 {
    uint16_t array[3];
};

struct hostdesc.conflict25 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict143 eth_dest_addr;
    struct mac_addr.conflict144 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict13 {
    uint32_t ready;
    struct hostdesc.conflict25 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

struct ipc_shared_env_tag.conflict7 {
    struct ipc_a2e_msg msg_a2e_buf;
    uint32_t pattern_addr;
    struct txdesc_host.conflict13 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict8 ipc_shared_env_tag.conflict8, *Pipc_shared_env_tag.conflict8;

typedef struct txdesc_host.conflict18 txdesc_host.conflict18, *Ptxdesc_host.conflict18;

typedef struct hostdesc.conflict31 hostdesc.conflict31, *Phostdesc.conflict31;

typedef struct mac_addr.conflict166 mac_addr.conflict166, *Pmac_addr.conflict166;

typedef struct mac_addr.conflict167 mac_addr.conflict167, *Pmac_addr.conflict167;

struct mac_addr.conflict167 {
    uint16_t array[3];
};

struct mac_addr.conflict166 {
    uint16_t array[3];
};

struct hostdesc.conflict31 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict166 eth_dest_addr;
    struct mac_addr.conflict167 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict18 {
    uint32_t ready;
    struct hostdesc.conflict31 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

struct ipc_shared_env_tag.conflict8 {
    struct ipc_a2e_msg msg_a2e_buf;
    uint32_t pattern_addr;
    struct txdesc_host.conflict18 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict9 ipc_shared_env_tag.conflict9, *Pipc_shared_env_tag.conflict9;

typedef struct txdesc_host.conflict23 txdesc_host.conflict23, *Ptxdesc_host.conflict23;

typedef struct hostdesc.conflict37 hostdesc.conflict37, *Phostdesc.conflict37;

typedef struct mac_addr.conflict182 mac_addr.conflict182, *Pmac_addr.conflict182;

typedef struct mac_addr.conflict183 mac_addr.conflict183, *Pmac_addr.conflict183;

struct mac_addr.conflict182 {
    uint16_t array[3];
};

struct mac_addr.conflict183 {
    uint16_t array[3];
};

struct hostdesc.conflict37 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict182 eth_dest_addr;
    struct mac_addr.conflict183 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict23 {
    uint32_t ready;
    struct hostdesc.conflict37 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

struct ipc_shared_env_tag.conflict9 {
    struct ipc_a2e_msg msg_a2e_buf;
    uint32_t pattern_addr;
    struct txdesc_host.conflict23 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict14 ipc_shared_env_tag.conflict14, *Pipc_shared_env_tag.conflict14;

typedef struct txdesc_host.conflict33 txdesc_host.conflict33, *Ptxdesc_host.conflict33;

typedef struct hostdesc.conflict56 hostdesc.conflict56, *Phostdesc.conflict56;

typedef struct mac_addr.conflict252 mac_addr.conflict252, *Pmac_addr.conflict252;

typedef struct mac_addr.conflict253 mac_addr.conflict253, *Pmac_addr.conflict253;

struct mac_addr.conflict252 {
    uint16_t array[3];
};

struct mac_addr.conflict253 {
    uint16_t array[3];
};

struct hostdesc.conflict56 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict252 eth_dest_addr;
    struct mac_addr.conflict253 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict33 {
    uint32_t ready;
    struct hostdesc.conflict56 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

struct ipc_shared_env_tag.conflict14 {
    struct ipc_a2e_msg msg_a2e_buf;
    uint32_t pattern_addr;
    struct txdesc_host.conflict33 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict1 ipc_shared_env_tag.conflict1, *Pipc_shared_env_tag.conflict1;

struct ipc_shared_env_tag.conflict1 {
    struct ipc_a2e_msg msg_a2e_buf;
    uint32_t pattern_addr;
    struct txdesc_host.conflict txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict13 ipc_shared_env_tag.conflict13, *Pipc_shared_env_tag.conflict13;

struct ipc_shared_env_tag.conflict13 {
    struct ipc_a2e_msg msg_a2e_buf;
    uint32_t pattern_addr;
    struct txdesc_host.conflict8 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict2 ipc_shared_env_tag.conflict2, *Pipc_shared_env_tag.conflict2;

struct ipc_shared_env_tag.conflict2 {
    struct ipc_a2e_msg msg_a2e_buf;
    uint32_t pattern_addr;
    struct txdesc_host.conflict txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict12 ipc_shared_env_tag.conflict12, *Pipc_shared_env_tag.conflict12;

struct ipc_shared_env_tag.conflict12 {
    struct ipc_a2e_msg msg_a2e_buf;
    uint32_t pattern_addr;
    struct txdesc_host.conflict8 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict3 ipc_shared_env_tag.conflict3, *Pipc_shared_env_tag.conflict3;

struct ipc_shared_env_tag.conflict3 {
    struct ipc_a2e_msg msg_a2e_buf;
    uint32_t pattern_addr;
    struct txdesc_host.conflict txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict4 ipc_shared_env_tag.conflict4, *Pipc_shared_env_tag.conflict4;

typedef struct txdesc_host.conflict3 txdesc_host.conflict3, *Ptxdesc_host.conflict3;

typedef struct hostdesc.conflict12 hostdesc.conflict12, *Phostdesc.conflict12;

typedef struct mac_addr.conflict88 mac_addr.conflict88, *Pmac_addr.conflict88;

typedef struct mac_addr.conflict89 mac_addr.conflict89, *Pmac_addr.conflict89;

struct mac_addr.conflict88 {
    uint16_t array[3];
};

struct mac_addr.conflict89 {
    uint16_t array[3];
};

struct hostdesc.conflict12 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict88 eth_dest_addr;
    struct mac_addr.conflict89 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict3 {
    uint32_t ready;
    struct hostdesc.conflict12 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

struct ipc_shared_env_tag.conflict4 {
    struct ipc_a2e_msg msg_a2e_buf;
    uint32_t pattern_addr;
    struct txdesc_host.conflict3 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict5 ipc_shared_env_tag.conflict5, *Pipc_shared_env_tag.conflict5;

struct ipc_shared_env_tag.conflict5 {
    struct ipc_a2e_msg msg_a2e_buf;
    uint32_t pattern_addr;
    struct txdesc_host.conflict8 txdesc0[4];
};

typedef struct ipc_shared_env_tag.conflict6 ipc_shared_env_tag.conflict6, *Pipc_shared_env_tag.conflict6;

struct ipc_shared_env_tag.conflict6 {
    struct ipc_a2e_msg msg_a2e_buf;
    uint32_t pattern_addr;
    struct txdesc_host.conflict8 txdesc0[4];
};

typedef struct lld_sleep_env_tag lld_sleep_env_tag, *Plld_sleep_env_tag;

struct lld_sleep_env_tag {
    uint32_t irq_mask;
    int32_t last_sleep_dur;
    _Bool sw_wakeup;
    _Bool pds_reset;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t basetimecnt;
    uint32_t finetimecnt;
};

typedef struct anon_struct.conflict284 anon_struct.conflict284, *Panon_struct.conflict284;

struct anon_struct.conflict284 {
    uint frac0:32;
    uint frac1:20;
    uint exp:11;
    uint sign:1;
};

typedef union _FP_UNION_D _FP_UNION_D, *P_FP_UNION_D;

typedef double DFtype;

union _FP_UNION_D {
    DFtype flt;
    struct anon_struct.conflict284 bits;
};

typedef struct tcal_tag tcal_tag, *Ptcal_tag;

struct tcal_tag {
    int16_t prev_temperature;
    undefined field_0x2;
    undefined field_0x3;
    uint32_t last_action_time[4];
    uint32_t last_action_temperature[4];
    int32_t last_action_out[4];
    _Bool enabled;
    undefined field_0x35;
    undefined field_0x36;
    undefined field_0x37;
};

typedef enum HCI_MSG {
    HCI_ACL_DATA_RX=2054,
    HCI_ACL_DATA_TX=2055,
    HCI_CMD_CMP_EVENT=2049,
    HCI_CMD_STAT_EVENT=2050,
    HCI_COMMAND=2053,
    HCI_DBG_EVT=2057,
    HCI_EVENT=2051,
    HCI_LE_EVENT=2052,
    HCI_MSG_ID_FIRST=2048,
    HCI_MSG_ID_LAST=2058,
    HCI_TCI_LMP=2056
} HCI_MSG;

typedef union _reg_t _reg_t, *P_reg_t;

union _reg_t {
    uint8_t byte[4];
    uint32_t word;
};

typedef struct bt_uuid bt_uuid, *Pbt_uuid;

struct bt_uuid {
    u8_t type;
};

typedef struct bt_uuid_128 bt_uuid_128, *Pbt_uuid_128;

struct bt_uuid_128 {
    struct bt_uuid uuid;
    u8_t val[16];
};

typedef struct bt_uuid_32 bt_uuid_32, *Pbt_uuid_32;

struct bt_uuid_32 {
    struct bt_uuid uuid;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    u32_t.conflict val;
};

typedef struct bt_uuid_16 bt_uuid_16, *Pbt_uuid_16;

struct bt_uuid_16 {
    struct bt_uuid uuid;
    undefined field_0x1;
    u16_t val;
};

typedef struct bl_hci_cmd_struct bl_hci_cmd_struct, *Pbl_hci_cmd_struct;

struct bl_hci_cmd_struct {
    uint16_t opcode;
    undefined field_0x2;
    undefined field_0x3;
    uint8_t * params;
    uint8_t param_len;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
};

typedef struct bl_hci_acl_data_tx bl_hci_acl_data_tx, *Pbl_hci_acl_data_tx;

struct bl_hci_acl_data_tx {
    uint16_t conhdl;
    uint8_t pb_bc_flag;
    undefined field_0x3;
    uint16_t len;
    undefined field_0x6;
    undefined field_0x7;
    uint8_t * buffer;
};

typedef struct hci_pkt_struct hci_pkt_struct, *Phci_pkt_struct;

typedef union anon_union_for_p anon_union_for_p, *Panon_union_for_p;

union anon_union_for_p {
    struct bl_hci_cmd_struct hci_cmd;
    struct bl_hci_acl_data_tx acl_data;
};

struct hci_pkt_struct {
    union anon_union_for_p p;
};

typedef struct _romfs_file_buf _romfs_file_buf, *P_romfs_file_buf;

struct _romfs_file_buf {
    char * buf;
    uint32_t bufsize;
};

typedef struct _romfs_file_buf romfs_filebuf_t;

typedef enum TASK_API_ID {
    TASK_ID_AHI=16,
    TASK_ID_AM0=-16,
    TASK_ID_AM0_HAS=-15,
    TASK_ID_ANPC=48,
    TASK_ID_ANPS=47,
    TASK_ID_APP=15,
    TASK_ID_BASC=37,
    TASK_ID_BASS=36,
    TASK_ID_BCSC=64,
    TASK_ID_BCSS=63,
    TASK_ID_BLPC=29,
    TASK_ID_BLPS=28,
    TASK_ID_CPPC=52,
    TASK_ID_CPPS=51,
    TASK_ID_CSCPC=46,
    TASK_ID_CSCPS=45,
    TASK_ID_DBG=3,
    TASK_ID_DISC=21,
    TASK_ID_DISPLAY=9,
    TASK_ID_DISS=20,
    TASK_ID_ENVC=58,
    TASK_ID_ENVS=57,
    TASK_ID_FINDL=24,
    TASK_ID_FINDT=25,
    TASK_ID_GAPC=14,
    TASK_ID_GAPM=13,
    TASK_ID_GATTC=12,
    TASK_ID_GATTM=11,
    TASK_ID_GLPC=42,
    TASK_ID_GLPS=41,
    TASK_ID_HCI=8,
    TASK_ID_HOGPBH=39,
    TASK_ID_HOGPD=38,
    TASK_ID_HOGPRH=40,
    TASK_ID_HRPC=31,
    TASK_ID_HRPS=30,
    TASK_ID_HTPC=26,
    TASK_ID_HTPT=27,
    TASK_ID_INVALID=-1,
    TASK_ID_IPSC=56,
    TASK_ID_IPSS=55,
    TASK_ID_L2CC=10,
    TASK_ID_LANC=54,
    TASK_ID_LANS=53,
    TASK_ID_LB=6,
    TASK_ID_LC=5,
    TASK_ID_LD=7,
    TASK_ID_LLC=1,
    TASK_ID_LLD=2,
    TASK_ID_LLM=0,
    TASK_ID_LM=4,
    TASK_ID_PASPC=50,
    TASK_ID_PASPS=49,
    TASK_ID_PLXC=68,
    TASK_ID_PLXS=67,
    TASK_ID_PROXM=22,
    TASK_ID_PROXR=23,
    TASK_ID_RSCPC=44,
    TASK_ID_RSCPS=43,
    TASK_ID_SCPPC=35,
    TASK_ID_SCPPS=34,
    TASK_ID_TIPC=33,
    TASK_ID_TIPS=32,
    TASK_ID_UDSC=62,
    TASK_ID_UDSS=61,
    TASK_ID_WPTC=66,
    TASK_ID_WPTS=65,
    TASK_ID_WSCC=60,
    TASK_ID_WSCS=59
} TASK_API_ID;

typedef struct bt_hci_cp_le_set_scan_param bt_hci_cp_le_set_scan_param, *Pbt_hci_cp_le_set_scan_param;

struct bt_hci_cp_le_set_scan_param {
    u8_t scan_type;
    u16_t interval;
    u16_t window;
    u8_t addr_type;
    u8_t filter_policy;
};

typedef struct bt_hci_evt_num_completed_packets bt_hci_evt_num_completed_packets, *Pbt_hci_evt_num_completed_packets;

typedef struct bt_hci_handle_count bt_hci_handle_count, *Pbt_hci_handle_count;

struct bt_hci_evt_num_completed_packets {
    u8_t num_handles;
    struct bt_hci_handle_count[0] h;
};

struct bt_hci_handle_count {
    u16_t handle;
    u16_t count;
};

typedef struct bt_hci_cp_le_rem_dev_from_wl bt_hci_cp_le_rem_dev_from_wl, *Pbt_hci_cp_le_rem_dev_from_wl;

struct bt_hci_cp_le_rem_dev_from_wl {
    struct bt_addr_le_t addr;
};

typedef struct bt_hci_cp_le_write_default_data_len bt_hci_cp_le_write_default_data_len, *Pbt_hci_cp_le_write_default_data_len;

struct bt_hci_cp_le_write_default_data_len {
    u16_t max_tx_octets;
    u16_t max_tx_time;
};

typedef struct bt_hci_cp_le_start_encryption bt_hci_cp_le_start_encryption, *Pbt_hci_cp_le_start_encryption;

struct bt_hci_cp_le_start_encryption {
    u16_t handle;
    u64_t rand;
    u16_t ediv;
    u8_t ltk[16];
};

typedef struct bt_hci_evt_encrypt_change bt_hci_evt_encrypt_change, *Pbt_hci_evt_encrypt_change;

struct bt_hci_evt_encrypt_change {
    u8_t status;
    u16_t handle;
    u8_t encrypt;
};

typedef struct bt_hci_rp_le_read_wl_size bt_hci_rp_le_read_wl_size, *Pbt_hci_rp_le_read_wl_size;

struct bt_hci_rp_le_read_wl_size {
    u8_t status;
    u8_t wl_size;
};

typedef struct bt_hci_rp_read_encryption_key_size bt_hci_rp_read_encryption_key_size, *Pbt_hci_rp_read_encryption_key_size;

struct bt_hci_rp_read_encryption_key_size {
    u8_t status;
    u16_t handle;
    u8_t key_size;
};

typedef struct hci_cp_le_conn_update hci_cp_le_conn_update, *Phci_cp_le_conn_update;

struct hci_cp_le_conn_update {
    u16_t handle;
    u16_t conn_interval_min;
    u16_t conn_interval_max;
    u16_t conn_latency;
    u16_t supervision_timeout;
    u16_t min_ce_len;
    u16_t max_ce_len;
};

typedef struct bt_hci_evt_disconn_complete bt_hci_evt_disconn_complete, *Pbt_hci_evt_disconn_complete;

struct bt_hci_evt_disconn_complete {
    u8_t status;
    u16_t handle;
    u8_t reason;
};

typedef struct bt_hci_evt_le_conn_update_complete bt_hci_evt_le_conn_update_complete, *Pbt_hci_evt_le_conn_update_complete;

struct bt_hci_evt_le_conn_update_complete {
    u8_t status;
    u16_t handle;
    u16_t interval;
    u16_t latency;
    u16_t supv_timeout;
};

typedef struct bt_hci_evt_le_remote_feat_complete bt_hci_evt_le_remote_feat_complete, *Pbt_hci_evt_le_remote_feat_complete;

struct bt_hci_evt_le_remote_feat_complete {
    u8_t status;
    u16_t handle;
    u8_t features[8];
};

typedef struct bt_hci_cp_read_encryption_key_size bt_hci_cp_read_encryption_key_size, *Pbt_hci_cp_read_encryption_key_size;

struct bt_hci_cp_read_encryption_key_size {
    u16_t handle;
};

typedef struct bt_hci_cmd_hdr bt_hci_cmd_hdr, *Pbt_hci_cmd_hdr;

struct bt_hci_cmd_hdr {
    u16_t opcode;
    u8_t param_len;
};

typedef struct bt_hci_rp_le_read_local_features bt_hci_rp_le_read_local_features, *Pbt_hci_rp_le_read_local_features;

struct bt_hci_rp_le_read_local_features {
    u8_t status;
    u8_t features[8];
};

typedef struct bt_hci_rp_le_read_max_data_len bt_hci_rp_le_read_max_data_len, *Pbt_hci_rp_le_read_max_data_len;

struct bt_hci_rp_le_read_max_data_len {
    u8_t status;
    u16_t max_tx_octets;
    u16_t max_tx_time;
    u16_t max_rx_octets;
    u16_t max_rx_time;
};

typedef struct bt_hci_rp_read_supported_commands bt_hci_rp_read_supported_commands, *Pbt_hci_rp_read_supported_commands;

struct bt_hci_rp_read_supported_commands {
    u8_t status;
    u8_t commands[64];
};

typedef struct bt_hci_evt_le_conn_complete bt_hci_evt_le_conn_complete, *Pbt_hci_evt_le_conn_complete;

struct bt_hci_evt_le_conn_complete {
    u8_t status;
    u16_t handle;
    u8_t role;
    struct bt_addr_le_t peer_addr;
    u16_t interval;
    u16_t latency;
    u16_t supv_timeout;
    u8_t clock_accuracy;
};

typedef struct bt_hci_evt_le_generate_dhkey_complete bt_hci_evt_le_generate_dhkey_complete, *Pbt_hci_evt_le_generate_dhkey_complete;

struct bt_hci_evt_le_generate_dhkey_complete {
    u8_t status;
    u8_t dhkey[32];
};

typedef struct bt_hci_evt_hdr bt_hci_evt_hdr, *Pbt_hci_evt_hdr;

struct bt_hci_evt_hdr {
    u8_t evt;
    u8_t len;
};

typedef struct bt_hci_evt_data_buf_overflow bt_hci_evt_data_buf_overflow, *Pbt_hci_evt_data_buf_overflow;

struct bt_hci_evt_data_buf_overflow {
    u8_t link_type;
};

typedef struct bt_hci_rp_le_read_rl_size bt_hci_rp_le_read_rl_size, *Pbt_hci_rp_le_read_rl_size;

struct bt_hci_rp_le_read_rl_size {
    u8_t status;
    u8_t rl_size;
};

typedef struct bt_hci_evt_encrypt_key_refresh_complete bt_hci_evt_encrypt_key_refresh_complete, *Pbt_hci_evt_encrypt_key_refresh_complete;

struct bt_hci_evt_encrypt_key_refresh_complete {
    u8_t status;
    u16_t handle;
};

typedef struct bt_hci_cp_le_set_event_mask bt_hci_cp_le_set_event_mask, *Pbt_hci_cp_le_set_event_mask;

struct bt_hci_cp_le_set_event_mask {
    u8_t events[8];
};

typedef struct bt_hci_cp_le_conn_param_req_reply bt_hci_cp_le_conn_param_req_reply, *Pbt_hci_cp_le_conn_param_req_reply;

struct bt_hci_cp_le_conn_param_req_reply {
    u16_t handle;
    u16_t interval_min;
    u16_t interval_max;
    u16_t latency;
    u16_t timeout;
    u16_t min_ce_len;
    u16_t max_ce_len;
};

typedef struct bt_hci_rp_le_read_buffer_size bt_hci_rp_le_read_buffer_size, *Pbt_hci_rp_le_read_buffer_size;

struct bt_hci_rp_le_read_buffer_size {
    u8_t status;
    u16_t le_max_len;
    u8_t le_max_num;
};

typedef struct bt_hci_cp_disconnect bt_hci_cp_disconnect, *Pbt_hci_cp_disconnect;

struct bt_hci_cp_disconnect {
    u16_t handle;
    u8_t reason;
};

typedef struct bt_hci_cp_le_set_host_chan_classif bt_hci_cp_le_set_host_chan_classif, *Pbt_hci_cp_le_set_host_chan_classif;

struct bt_hci_cp_le_set_host_chan_classif {
    u8_t ch_map[5];
};

typedef struct bt_hci_cp_le_ltk_req_reply bt_hci_cp_le_ltk_req_reply, *Pbt_hci_cp_le_ltk_req_reply;

struct bt_hci_cp_le_ltk_req_reply {
    u16_t handle;
    u8_t ltk[16];
};

typedef struct bt_hci_rp_read_local_version_info bt_hci_rp_read_local_version_info, *Pbt_hci_rp_read_local_version_info;

struct bt_hci_rp_read_local_version_info {
    u8_t status;
    u8_t hci_version;
    u16_t hci_revision;
    u8_t lmp_version;
    u16_t manufacturer;
    u16_t lmp_subversion;
};

typedef struct bt_hci_evt_cmd_complete bt_hci_evt_cmd_complete, *Pbt_hci_evt_cmd_complete;

struct bt_hci_evt_cmd_complete {
    u8_t ncmd;
    u16_t opcode;
};

typedef struct bt_hci_evt_le_conn_param_req bt_hci_evt_le_conn_param_req, *Pbt_hci_evt_le_conn_param_req;

struct bt_hci_evt_le_conn_param_req {
    u16_t handle;
    u16_t interval_min;
    u16_t interval_max;
    u16_t latency;
    u16_t timeout;
};

typedef struct bt_hci_cp_le_create_conn bt_hci_cp_le_create_conn, *Pbt_hci_cp_le_create_conn;

struct bt_hci_cp_le_create_conn {
    u16_t scan_interval;
    u16_t scan_window;
    u8_t filter_policy;
    struct bt_addr_le_t peer_addr;
    u8_t own_addr_type;
    u16_t conn_interval_min;
    u16_t conn_interval_max;
    u16_t conn_latency;
    u16_t supervision_timeout;
    u16_t min_ce_len;
    u16_t max_ce_len;
};

typedef struct bt_hci_cp_le_set_data_len bt_hci_cp_le_set_data_len, *Pbt_hci_cp_le_set_data_len;

struct bt_hci_cp_le_set_data_len {
    u16_t handle;
    u16_t tx_octets;
    u16_t tx_time;
};

typedef struct bt_hci_cp_read_rssi bt_hci_cp_read_rssi, *Pbt_hci_cp_read_rssi;

struct bt_hci_cp_read_rssi {
    u16_t handle;
};

typedef struct bt_hci_cp_le_read_remote_features bt_hci_cp_le_read_remote_features, *Pbt_hci_cp_le_read_remote_features;

struct bt_hci_cp_le_read_remote_features {
    u16_t handle;
};

typedef struct bt_hci_evt_le_ltk_request bt_hci_evt_le_ltk_request, *Pbt_hci_evt_le_ltk_request;

struct bt_hci_evt_le_ltk_request {
    u16_t handle;
    u64_t rand;
    u16_t ediv;
};

typedef struct bt_hci_rp_read_rssi bt_hci_rp_read_rssi, *Pbt_hci_rp_read_rssi;

typedef int8_t s8_t;

struct bt_hci_rp_read_rssi {
    u8_t status;
    u16_t handle;
    s8_t rssi;
};

typedef struct bt_hci_evt_le_enh_conn_complete bt_hci_evt_le_enh_conn_complete, *Pbt_hci_evt_le_enh_conn_complete;

struct bt_hci_evt_le_enh_conn_complete {
    u8_t status;
    u16_t handle;
    u8_t role;
    struct bt_addr_le_t peer_addr;
    struct bt_addr_t local_rpa;
    struct bt_addr_t peer_rpa;
    u16_t interval;
    u16_t latency;
    u16_t supv_timeout;
    u8_t clock_accuracy;
};

typedef struct bt_hci_cp_write_le_host_supp bt_hci_cp_write_le_host_supp, *Pbt_hci_cp_write_le_host_supp;

struct bt_hci_cp_write_le_host_supp {
    u8_t le;
    u8_t simul;
};

typedef struct bt_hci_evt_cmd_status bt_hci_evt_cmd_status, *Pbt_hci_evt_cmd_status;

struct bt_hci_evt_cmd_status {
    u8_t status;
    u8_t ncmd;
    u16_t opcode;
};

typedef struct bt_hci_evt_le_meta_event bt_hci_evt_le_meta_event, *Pbt_hci_evt_le_meta_event;

struct bt_hci_evt_le_meta_event {
    u8_t subevent;
};

typedef struct bt_hci_cp_le_set_privacy_mode bt_hci_cp_le_set_privacy_mode, *Pbt_hci_cp_le_set_privacy_mode;

struct bt_hci_cp_le_set_privacy_mode {
    struct bt_addr_le_t id_addr;
    u8_t mode;
};

typedef struct bt_hci_evt_le_p256_public_key_complete bt_hci_evt_le_p256_public_key_complete, *Pbt_hci_evt_le_p256_public_key_complete;

struct bt_hci_evt_le_p256_public_key_complete {
    u8_t status;
    u8_t key[64];
};

typedef struct bt_hci_rp_read_bd_addr bt_hci_rp_read_bd_addr, *Pbt_hci_rp_read_bd_addr;

struct bt_hci_rp_read_bd_addr {
    u8_t status;
    struct bt_addr_t bdaddr;
};

typedef struct bt_hci_cp_le_add_dev_to_rl bt_hci_cp_le_add_dev_to_rl, *Pbt_hci_cp_le_add_dev_to_rl;

struct bt_hci_cp_le_add_dev_to_rl {
    struct bt_addr_le_t peer_id_addr;
    u8_t peer_irk[16];
    u8_t local_irk[16];
};

typedef struct bt_hci_rp_le_rand bt_hci_rp_le_rand, *Pbt_hci_rp_le_rand;

struct bt_hci_rp_le_rand {
    u8_t status;
    u8_t rand[8];
};

typedef struct bt_hci_cp_le_rem_dev_from_rl bt_hci_cp_le_rem_dev_from_rl, *Pbt_hci_cp_le_rem_dev_from_rl;

struct bt_hci_cp_le_rem_dev_from_rl {
    struct bt_addr_le_t peer_id_addr;
};

typedef struct bt_hci_evt_le_advertising_info bt_hci_evt_le_advertising_info, *Pbt_hci_evt_le_advertising_info;

struct bt_hci_evt_le_advertising_info {
    u8_t evt_type;
    struct bt_addr_le_t addr;
    u8_t length;
    u8_t[0] data;
};

typedef struct bt_hci_cp_le_add_dev_to_wl bt_hci_cp_le_add_dev_to_wl, *Pbt_hci_cp_le_add_dev_to_wl;

struct bt_hci_cp_le_add_dev_to_wl {
    struct bt_addr_le_t addr;
};

typedef struct bt_hci_cp_le_ltk_req_neg_reply bt_hci_cp_le_ltk_req_neg_reply, *Pbt_hci_cp_le_ltk_req_neg_reply;

struct bt_hci_cp_le_ltk_req_neg_reply {
    u16_t handle;
};

typedef struct bt_hci_cp_le_conn_param_req_neg_reply bt_hci_cp_le_conn_param_req_neg_reply, *Pbt_hci_cp_le_conn_param_req_neg_reply;

struct bt_hci_cp_le_conn_param_req_neg_reply {
    u16_t handle;
    u8_t reason;
};

typedef struct bt_hci_rp_read_local_features bt_hci_rp_read_local_features, *Pbt_hci_rp_read_local_features;

struct bt_hci_rp_read_local_features {
    u8_t status;
    u8_t features[8];
};

typedef struct bt_hci_cp_le_set_adv_param bt_hci_cp_le_set_adv_param, *Pbt_hci_cp_le_set_adv_param;

struct bt_hci_cp_le_set_adv_param {
    u16_t min_interval;
    u16_t max_interval;
    u8_t type;
    u8_t own_addr_type;
    struct bt_addr_le_t direct_addr;
    u8_t channel_map;
    u8_t filter_policy;
};

typedef struct bt_hci_cp_le_set_scan_rsp_data bt_hci_cp_le_set_scan_rsp_data, *Pbt_hci_cp_le_set_scan_rsp_data;

struct bt_hci_cp_le_set_scan_rsp_data {
    u8_t len;
    u8_t data[31];
};

typedef struct bt_hci_cp_le_set_adv_data bt_hci_cp_le_set_adv_data, *Pbt_hci_cp_le_set_adv_data;

struct bt_hci_cp_le_set_adv_data {
    u8_t len;
    u8_t data[31];
};

typedef struct bt_hci_cp_le_generate_dhkey bt_hci_cp_le_generate_dhkey, *Pbt_hci_cp_le_generate_dhkey;

struct bt_hci_cp_le_generate_dhkey {
    u8_t key[64];
};

typedef struct bt_hci_cp_le_set_scan_enable bt_hci_cp_le_set_scan_enable, *Pbt_hci_cp_le_set_scan_enable;

struct bt_hci_cp_le_set_scan_enable {
    u8_t enable;
    u8_t filter_dup;
};

typedef struct bt_hci_cp_set_event_mask bt_hci_cp_set_event_mask, *Pbt_hci_cp_set_event_mask;

struct bt_hci_cp_set_event_mask {
    u8_t events[8];
};

typedef struct bt_hci_acl_hdr bt_hci_acl_hdr, *Pbt_hci_acl_hdr;

struct bt_hci_acl_hdr {
    u16_t handle;
    u16_t len;
};

typedef struct bt_hci_rp_le_read_supp_states bt_hci_rp_le_read_supp_states, *Pbt_hci_rp_le_read_supp_states;

struct bt_hci_rp_le_read_supp_states {
    u8_t status;
    u8_t le_states[8];
};

typedef struct bt_hci_rp_read_buffer_size bt_hci_rp_read_buffer_size, *Pbt_hci_rp_read_buffer_size;

struct bt_hci_rp_read_buffer_size {
    u8_t status;
    u16_t acl_max_len;
    u8_t sco_max_len;
    u16_t acl_max_num;
    u16_t sco_max_num;
};

typedef struct BL_ENDECRYPT_t BL_ENDECRYPT_t, *PBL_ENDECRYPT_t;

struct BL_ENDECRYPT_t {
    UINT8 enDeAction;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    UINT8 * pData;
};

typedef struct sta_info_tag sta_info_tag, *Psta_info_tag;

typedef enum sta_ps_traffic {
    PS_TRAFFIC=3,
    PS_TRAFFIC_HOST=1,
    PS_TRAFFIC_INT=2,
    UAPSD_TRAFFIC=12,
    UAPSD_TRAFFIC_HOST=4,
    UAPSD_TRAFFIC_INT=8
} sta_ps_traffic;

typedef int sta_ps_sp_t;

typedef struct sta_mgmt_sec_info sta_mgmt_sec_info, *Psta_mgmt_sec_info;

typedef struct mac_sta_info mac_sta_info, *Pmac_sta_info;

typedef struct sta_pol_tbl_cntl sta_pol_tbl_cntl, *Psta_pol_tbl_cntl;

typedef struct sta_mgmt_ba_info sta_mgmt_ba_info, *Psta_mgmt_ba_info;

typedef struct co_list co_list, *Pco_list;

typedef struct key_info_tag key_info_tag, *Pkey_info_tag;

typedef struct mac_rateset mac_rateset, *Pmac_rateset;

typedef struct mac_htcapability mac_htcapability, *Pmac_htcapability;

typedef struct mac_vhtcapability mac_vhtcapability, *Pmac_vhtcapability;

typedef struct txl_buffer_control txl_buffer_control, *Ptxl_buffer_control;

typedef struct rc_sta_stats rc_sta_stats, *Prc_sta_stats;

typedef ulonglong __uint64_t;

typedef __uint64_t uint64_t;


// WARNING! conflicting data type names: /DWARF/mac.h/key_info_tag/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u


// WARNING! conflicting data type names: /DWARF/txl_buffer.h/txl_buffer_control/anon_union_for_field_0 - /DWARF/buf.h/net_buf/anon_union_for_field_0

typedef struct rc_rate_stats rc_rate_stats, *Prc_rate_stats;

typedef struct step step, *Pstep;

typedef union anon_union_for_rate_map anon_union_for_rate_map, *Panon_union_for_rate_map;

struct sta_mgmt_ba_info {
    uint32_t last_tx_time;
    uint32_t last_ba_add_time;
    uint8_t bam_idx_rx;
    uint8_t bam_idx_tx;
    int8_t credit_oft;
    undefined field_0xb;
};

struct rc_rate_stats {
    uint16_t attempts;
    uint16_t success;
    uint16_t probability;
    uint16_t rate_config;
    uint8_t sample_skipped;
    _Bool old_prob_available;
    uint8_t n_retry;
    _Bool rate_allowed;
};

struct step {
    uint32_t tp;
    uint16_t idx;
    undefined field_0x6;
    undefined field_0x7;
};

union anon_union_for_rate_map {
    uint8_t ht[4];
};

struct rc_sta_stats {
    uint32_t last_rc_time;
    struct rc_rate_stats rate_stats[10];
    struct step retry[4];
    struct step max_tp_2_trial;
    uint16_t ampdu_len;
    uint16_t ampdu_packets;
    uint32_t avg_ampdu_len;
    uint8_t sample_wait;
    uint8_t sample_slow;
    uint8_t trial_status;
    uint8_t info;
    uint8_t sw_retry_step;
    uint8_t format_mod;
    union anon_union_for_rate_map rate_map;
    uint16_t rate_map_l;
    uint8_t mcs_max;
    uint8_t r_idx_min;
    uint8_t r_idx_max;
    uint8_t bw_max;
    uint8_t no_ss;
    uint8_t short_gi;
    uint8_t p_type;
    undefined field_0xbf;
    uint16_t no_samples;
    uint16_t max_amsdu_len;
    uint16_t curr_amsdu_len;
    uint16_t fixed_rate_cfg;
};

struct sta_pol_tbl_cntl {
    struct txl_buffer_control * buf_ctrl;
    struct rc_sta_stats * sta_stats;
    uint32_t prot_cfg;
    uint16_t ppdu_tx_cfg;
    uint8_t upd_field;
    undefined field_0xf;
};

struct mac_rateset {
    u8_l length;
    u8_l array[12];
};

struct mac_htcapability {
    u16_l ht_capa_info;
    u8_l a_mpdu_param;
    u8_l mcs_rate[16];
    undefined field_0x13;
    u16_l ht_extended_capa;
    undefined field_0x16;
    undefined field_0x17;
    u32_l tx_beamforming_capa;
    u8_l asel_capa;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
};

struct mac_vhtcapability {
    u32_l vht_capa_info;
    u16_l rx_mcs_map;
    u16_l rx_highest;
    u16_l tx_mcs_map;
    u16_l tx_highest;
};

struct mac_sta_info {
    struct mac_rateset rate_set;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    struct mac_htcapability ht_cap;
    struct mac_vhtcapability vht_cap;
    uint32_t capa_flags;
    uint8_t phy_bw_max;
    uint8_t bw_cur;
    uint8_t uapsd_queues;
    uint8_t max_sp_len;
    uint8_t stbc_nss;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
};

struct key_info_tag {
    uint64_t rx_pn[9];
    uint64_t tx_pn;
    union anon_union_for_u u;
    uint8_t cipher;
    uint8_t key_idx;
    uint8_t hw_key_idx;
    _Bool valid;
    undefined field_0x64;
    undefined field_0x65;
    undefined field_0x66;
    undefined field_0x67;
};

struct sta_mgmt_sec_info {
    struct key_info_tag key_info;
    struct key_info_tag * pairwise_key;
    struct key_info_tag * * cur_key;
};

struct co_list {
    struct co_list_hdr * first;
    struct co_list_hdr * last;
};

struct sta_info_tag {
    struct co_list_hdr list_hdr;
    uint32_t bcn_int;
    uint32_t ampdu_size_max_vht;
    uint16_t ampdu_size_max_ht;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t paid_gid;
    uint8_t ampdu_spacing_min;
    undefined field_0x15;
    uint16_t drift;
    uint16_t aid;
    uint8_t inst_nbr;
    uint8_t staid;
    uint8_t ps_state;
    _Bool valid;
    struct mac_addr.conflict mac_addr;
    int8_t rssi;
    undefined field_0x25;
    undefined field_0x26;
    undefined field_0x27;
    uint32_t tsflo;
    uint32_t tsfhi;
    uint8_t data_rate;
    uint8_t ctrl_port_state;
    enum sta_ps_traffic traffic_avail;
    undefined field_0x33;
    sta_ps_sp_t ps_service_period;
    uint16_t ctrl_port_ethertype;
    undefined field_0x3a;
    undefined field_0x3b;
    undefined field_0x3c;
    undefined field_0x3d;
    undefined field_0x3e;
    undefined field_0x3f;
    struct sta_mgmt_sec_info sta_sec_info;
    struct mac_sta_info info;
    uint16_t seq_nbr[9];
    undefined field_0x10a;
    undefined field_0x10b;
    struct sta_pol_tbl_cntl pol_tbl;
    struct sta_mgmt_ba_info ba_info[9];
    uint16_t rx_nqos_last_seqcntl;
    uint16_t rx_qos_last_seqcntl[9];
    struct co_list tx_desc_post;
    void * suppData;
    uint32_t time_last_seen;
    undefined field_0x1ac;
    undefined field_0x1ad;
    undefined field_0x1ae;
    undefined field_0x1af;
};

struct txl_buffer_control {
    union anon_union_for_field_0 field_0;
    uint32_t mac_control_info;
    uint32_t phy_control_info;
};

typedef struct sta_info_env_tag sta_info_env_tag, *Psta_info_env_tag;

struct sta_info_env_tag {
    struct co_list free_sta_list;
};

typedef enum sta_mgmt_pol_upd {
    STA_MGMT_POL_UPD_BW=3,
    STA_MGMT_POL_UPD_MAX=5,
    STA_MGMT_POL_UPD_PPDU_TX=2,
    STA_MGMT_POL_UPD_PROT=1,
    STA_MGMT_POL_UPD_RATE=0,
    STA_MGMT_POL_UPD_TX_POWER=4
} sta_mgmt_pol_upd;

typedef enum sta_ps_sp {
    ANY_SERVICE_PERIOD_INT=3,
    BCN_SERVICE_PERIOD=8,
    NO_SERVICE_PERIOD=0,
    PS_SERVICE_PERIOD=1,
    UAPSD_SERVICE_PERIOD=6,
    UAPSD_SERVICE_PERIOD_HOST=4,
    UAPSD_SERVICE_PERIOD_INT=2
} sta_ps_sp;

typedef struct machw_mib_tag machw_mib_tag, *Pmachw_mib_tag;

struct machw_mib_tag {
    uint32_t dot11_wep_excluded_count;
    uint32_t dot11_fcs_error_count;
    uint32_t nx_rx_phy_error_count;
    uint32_t nx_rd_fifo_overflow_count;
    uint32_t nx_tx_underun_count;
    uint32_t reserved_1[7];
    uint32_t nx_qos_utransmitted_mpdu_count[8];
    uint32_t nx_qos_gtransmitted_mpdu_count[8];
    uint32_t dot11_qos_failed_count[8];
    uint32_t dot11_qos_retry_count[8];
    uint32_t dot11_qos_rts_success_count[8];
    uint32_t dot11_qos_rts_failure_count[8];
    uint32_t nx_qos_ack_failure_count[8];
    uint32_t nx_qos_ureceived_mpdu_count[8];
    uint32_t nx_qos_greceived_mpdu_count[8];
    uint32_t nx_qos_ureceived_other_mpdu[8];
    uint32_t dot11_qos_retries_received_count[8];
    uint32_t nx_utransmitted_amsdu_count[8];
    uint32_t nx_gtransmitted_amsdu_count[8];
    uint32_t dot11_failed_amsdu_count[8];
    uint32_t dot11_retry_amsdu_count[8];
    uint32_t dot11_transmitted_octets_in_amsdu[8];
    uint32_t dot11_amsdu_ack_failure_count[8];
    uint32_t nx_ureceived_amsdu_count[8];
    uint32_t nx_greceived_amsdu_count[8];
    uint32_t nx_ureceived_other_amsdu[8];
    uint32_t dot11_received_octets_in_amsdu_count[8];
    uint32_t reserved_2[24];
    uint32_t dot11_transmitted_ampdu_count;
    uint32_t dot11_transmitted_mpdus_in_ampdu_count;
    uint32_t dot11_transmitted_octets_in_ampdu_count;
    uint32_t wnlu_ampdu_received_count;
    uint32_t nx_gampdu_received_count;
    uint32_t nx_other_ampdu_received_count;
    uint32_t dot11_mpdu_in_received_ampdu_count;
    uint32_t dot11_received_octets_in_ampdu_count;
    uint32_t dot11_ampdu_delimiter_crc_error_count;
    uint32_t dot11_implicit_bar_failure_count;
    uint32_t dot11_explicit_bar_failure_count;
    uint32_t reserved_3[5];
    uint32_t dot11_20mhz_frame_transmitted_count;
    uint32_t dot11_40mhz_frame_transmitted_count;
    uint32_t dot11_20mhz_frame_received_count;
    uint32_t dot11_40mhz_frame_received_count;
    uint32_t nx_failed_40mhz_txop;
    uint32_t nx_successful_txops;
    uint32_t reserved_4[4];
    uint32_t dot11_dualcts_success_count;
    uint32_t dot11_stbc_cts_success_count;
    uint32_t dot11_stbc_cts_failure_count;
    uint32_t dot11_non_stbc_cts_success_count;
    uint32_t dot11_non_stbc_cts_failure_count;
};

typedef struct scan_probe_req_ie_tag scan_probe_req_ie_tag, *Pscan_probe_req_ie_tag;

typedef struct tx_pbd tx_pbd, *Ptx_pbd;

struct tx_pbd {
    uint32_t upatterntx;
    uint32_t next;
    uint32_t datastartptr;
    uint32_t dataendptr;
    uint32_t bufctrlinfo;
};

struct scan_probe_req_ie_tag {
    struct dma_desc dma_desc;
    struct tx_pbd pbd;
    uint32_t buf[50];
};

typedef struct scan_env_tag scan_env_tag, *Pscan_env_tag;

typedef struct scan_start_req scan_start_req, *Pscan_start_req;

struct scan_start_req {
    struct scan_chan_tag chan[42];
    struct mac_ssid ssid[2];
    struct mac_addr.conflict bssid;
    undefined field_0x146;
    undefined field_0x147;
    uint32_t add_ies;
    uint16_t add_ie_len;
    uint8_t vif_idx;
    uint8_t chan_cnt;
    uint8_t ssid_cnt;
    _Bool no_cck;
    undefined field_0x152;
    undefined field_0x153;
};

struct scan_env_tag {
    struct hal_dma_desc_tag dma_desc;
    struct scan_start_req * param;
    uint32_t ds_ie;
    ke_task_id_t req_id;
    uint8_t chan_idx;
    _Bool abort;
};

typedef enum SEC_ENG_AES_ID_Type {
    SEC_ENG_AES_ID0=0
} SEC_ENG_AES_ID_Type;

typedef struct SEC_Eng_SHA256_Link_Ctx SEC_Eng_SHA256_Link_Ctx, *PSEC_Eng_SHA256_Link_Ctx;

struct SEC_Eng_SHA256_Link_Ctx {
    uint32_t total[2];
    uint32_t * shaBuf;
    uint32_t * shaPadding;
    uint32_t linkAddr;
};

typedef enum SEC_ENG_AES_Key_Type {
    SEC_ENG_AES_DOUBLE_KEY_128BITS=3,
    SEC_ENG_AES_KEY_128BITS=0,
    SEC_ENG_AES_KEY_192BITS=2,
    SEC_ENG_AES_KEY_256BITS=1
} SEC_ENG_AES_Key_Type;

typedef struct SEC_Eng_SHA_Link_Config_Type SEC_Eng_SHA_Link_Config_Type, *PSEC_Eng_SHA_Link_Config_Type;

struct SEC_Eng_SHA_Link_Config_Type {
    uint32_t shaMode:3;
    uint32_t shaHashSel:1;
    uint32_t shaIntClr:1;
    uint32_t shaIntSet:1;
    uint32_t shaMsgLen:16;
    uint32_t shaSrcAddr;
    uint32_t result[8];
};

typedef struct SEC_Eng_SHA256_Ctx SEC_Eng_SHA256_Ctx, *PSEC_Eng_SHA256_Ctx;

struct SEC_Eng_SHA256_Ctx {
    uint32_t total[2];
    uint32_t * shaBuf;
    uint32_t * shaPadding;
    uint8_t shaFeed;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
};

typedef enum SEC_ENG_SHA_Type {
    SEC_ENG_SHA1=2,
    SEC_ENG_SHA1_RSVD=3,
    SEC_ENG_SHA224=1,
    SEC_ENG_SHA256=0
} SEC_ENG_SHA_Type;

typedef enum SEC_ENG_PKA_OP_Type {
    SEC_ENG_PKA_OP_CFLIRI_BUFFER=54,
    SEC_ENG_PKA_OP_CFLIR_BUFFER=56,
    SEC_ENG_PKA_OP_CLIR=53,
    SEC_ENG_PKA_OP_CTLIRI_PLD=55,
    SEC_ENG_PKA_OP_CTLIR_PLD=57,
    SEC_ENG_PKA_OP_LADD=24,
    SEC_ENG_PKA_OP_LCMP=25,
    SEC_ENG_PKA_OP_LDIV=20,
    SEC_ENG_PKA_OP_LDIV2N=18,
    SEC_ENG_PKA_OP_LMUL=22,
    SEC_ENG_PKA_OP_LMUL2N=19,
    SEC_ENG_PKA_OP_LSQR=21,
    SEC_ENG_PKA_OP_LSUB=23,
    SEC_ENG_PKA_OP_MADD=40,
    SEC_ENG_PKA_OP_MDIV2=33,
    SEC_ENG_PKA_OP_MEXP=35,
    SEC_ENG_PKA_OP_MINV=34,
    SEC_ENG_PKA_OP_MMUL=37,
    SEC_ENG_PKA_OP_MOD2N=17,
    SEC_ENG_PKA_OP_MOVDAT=50,
    SEC_ENG_PKA_OP_MREM=38,
    SEC_ENG_PKA_OP_MSQR=36,
    SEC_ENG_PKA_OP_MSUB=39,
    SEC_ENG_PKA_OP_NLIR=51,
    SEC_ENG_PKA_OP_PPSEL=0,
    SEC_ENG_PKA_OP_RESIZE=49,
    SEC_ENG_PKA_OP_SLIR=52
} SEC_ENG_PKA_OP_Type;

typedef enum SEC_ENG_AES_Key_Src_Type {
    SEC_ENG_AES_KEY_HW=1,
    SEC_ENG_AES_KEY_SW=0
} SEC_ENG_AES_Key_Src_Type;

typedef struct SEC_Eng_AES_Ctx SEC_Eng_AES_Ctx, *PSEC_Eng_AES_Ctx;

typedef enum SEC_ENG_AES_Type {
    SEC_ENG_AES_CBC=2,
    SEC_ENG_AES_CTR=1,
    SEC_ENG_AES_ECB=0
} SEC_ENG_AES_Type;

struct SEC_Eng_AES_Ctx {
    uint8_t aesFeed;
    enum SEC_ENG_AES_Type mode;
};

typedef enum SEC_ENG_AES_EnDec_Type {
    SEC_ENG_AES_DECRYPTION=1,
    SEC_ENG_AES_ENCRYPTION=0
} SEC_ENG_AES_EnDec_Type;

typedef enum SEC_ENG_SHA_ID_Type {
    SEC_ENG_SHA_ID0=0
} SEC_ENG_SHA_ID_Type;

typedef enum SEC_ENG_AES_Counter_Type {
    SEC_ENG_AES_COUNTER_BYTE_1=1,
    SEC_ENG_AES_COUNTER_BYTE_2=2,
    SEC_ENG_AES_COUNTER_BYTE_3=3,
    SEC_ENG_AES_COUNTER_BYTE_4=0
} SEC_ENG_AES_Counter_Type;

typedef enum SEC_ENG_PKA_REG_SIZE_Type {
    SEC_ENG_PKA_REG_SIZE_128=6,
    SEC_ENG_PKA_REG_SIZE_16=2,
    SEC_ENG_PKA_REG_SIZE_192=7,
    SEC_ENG_PKA_REG_SIZE_256=8,
    SEC_ENG_PKA_REG_SIZE_32=3,
    SEC_ENG_PKA_REG_SIZE_384=9,
    SEC_ENG_PKA_REG_SIZE_512=10,
    SEC_ENG_PKA_REG_SIZE_64=4,
    SEC_ENG_PKA_REG_SIZE_8=1,
    SEC_ENG_PKA_REG_SIZE_96=5
} SEC_ENG_PKA_REG_SIZE_Type;

typedef enum SEC_ENG_INT_Type {
    SEC_ENG_INT_AES=1,
    SEC_ENG_INT_ALL=6,
    SEC_ENG_INT_CDET=4,
    SEC_ENG_INT_GMAC=5,
    SEC_ENG_INT_PKA=3,
    SEC_ENG_INT_SHA=2,
    SEC_ENG_INT_TRNG=0
} SEC_ENG_INT_Type;

typedef struct ip4_addr ip4_addr, *Pip4_addr;

typedef struct ip4_addr ip4_addr_t;

typedef ip4_addr_t ip_addr_t;

typedef uint32_t u32_t;

struct ip4_addr {
    u32_t addr;
};

typedef enum lwip_ip_addr_type {
    IPADDR_TYPE_ANY=46,
    IPADDR_TYPE_V4=0,
    IPADDR_TYPE_V6=6
} lwip_ip_addr_type;

typedef struct pka0_common_op_snd_cfg_S2_only.conflict pka0_common_op_snd_cfg_S2_only.conflict, *Ppka0_common_op_snd_cfg_S2_only.conflict;

typedef union anon_union_for_value.conflict anon_union_for_value.conflict, *Panon_union_for_value.conflict;

typedef struct anon_struct.conflict134 anon_struct.conflict134, *Panon_struct.conflict134;

struct anon_struct.conflict134 {
    uint32_t s2_reg_idx:8;
    uint32_t s2_reg_type:4;
    uint32_t reserved_12_31:20;
};

union anon_union_for_value.conflict {
    struct anon_struct.conflict134 BF;
    uint32_t WORD;
};

struct pka0_common_op_snd_cfg_S2_only.conflict {
    union anon_union_for_value.conflict value;
};

typedef struct anon_struct.conflict125 anon_struct.conflict125, *Panon_struct.conflict125;

struct anon_struct.conflict125 {
    uint32_t size:12;
    uint32_t d_reg_index:8;
    uint32_t d_reg_type:4;
    uint32_t op:7;
    uint32_t last_op:1;
};

typedef struct anon_struct.conflict126 anon_struct.conflict126, *Panon_struct.conflict126;

struct anon_struct.conflict126 {
    uint32_t size:12;
    uint32_t d_reg_index:8;
    uint32_t d_reg_type:4;
    uint32_t op:7;
    uint32_t last_op:1;
};

typedef struct anon_struct.conflict127 anon_struct.conflict127, *Panon_struct.conflict127;

struct anon_struct.conflict127 {
    uint32_t rsvd:12;
    uint32_t d_reg_index:8;
    uint32_t d_reg_type:4;
    uint32_t op:7;
    uint32_t last_op:1;
};

typedef struct anon_struct.conflict128 anon_struct.conflict128, *Panon_struct.conflict128;

struct anon_struct.conflict128 {
    uint32_t rsvd:12;
    uint32_t d_reg_index:8;
    uint32_t d_reg_type:4;
    uint32_t op:7;
    uint32_t last_op:1;
};

typedef struct anon_struct.conflict129 anon_struct.conflict129, *Panon_struct.conflict129;

struct anon_struct.conflict129 {
    uint32_t s0_reg_idx:8;
    uint32_t s0_reg_type:4;
    uint32_t d_reg_idx:8;
    uint32_t d_reg_type:4;
    uint32_t op:7;
    uint32_t last_op:1;
};

typedef struct anon_struct.conflict130 anon_struct.conflict130, *Panon_struct.conflict130;

struct anon_struct.conflict130 {
    uint32_t s0_reg_idx:8;
    uint32_t s0_reg_type:4;
    uint32_t d_reg_idx:8;
    uint32_t d_reg_type:4;
    uint32_t op:7;
    uint32_t last_op:1;
};

typedef struct anon_struct.conflict131 anon_struct.conflict131, *Panon_struct.conflict131;

struct anon_struct.conflict131 {
    uint32_t reserved_0_11:12;
    uint32_t s1_reg_idx:8;
    uint32_t s1_reg_type:4;
    uint32_t reserved_24_31:8;
};

typedef struct anon_struct.conflict136 anon_struct.conflict136, *Panon_struct.conflict136;

struct anon_struct.conflict136 {
    uint32_t s2_reg_idx:8;
    uint32_t s2_reg_type:4;
    uint32_t s1_reg_idx:8;
    uint32_t s1_reg_type:4;
    uint32_t reserved_24_31:8;
};

typedef struct anon_struct.conflict137 anon_struct.conflict137, *Panon_struct.conflict137;

struct anon_struct.conflict137 {
    uint32_t bit_shift:15;
    uint32_t reserved_24_31:17;
};

typedef struct anon_struct.conflict138 anon_struct.conflict138, *Panon_struct.conflict138;

struct anon_struct.conflict138 {
    uint32_t bit_shift:15;
    uint32_t reserved_24_31:17;
};

typedef struct anon_struct.conflict132 anon_struct.conflict132, *Panon_struct.conflict132;

struct anon_struct.conflict132 {
    uint32_t reserved_0_11:12;
    uint32_t s1_reg_idx:8;
    uint32_t s1_reg_type:4;
    uint32_t reserved_24_31:8;
};

typedef struct anon_struct.conflict133 anon_struct.conflict133, *Panon_struct.conflict133;

struct anon_struct.conflict133 {
    uint32_t s2_reg_idx:8;
    uint32_t s2_reg_type:4;
    uint32_t reserved_12_31:20;
};

typedef struct anon_struct.conflict135 anon_struct.conflict135, *Panon_struct.conflict135;

struct anon_struct.conflict135 {
    uint32_t s2_reg_idx:8;
    uint32_t s2_reg_type:4;
    uint32_t s1_reg_idx:8;
    uint32_t s1_reg_type:4;
    uint32_t reserved_24_31:8;
};

typedef struct pka0_pld_cfg.conflict pka0_pld_cfg.conflict, *Ppka0_pld_cfg.conflict;


// WARNING! conflicting data type names: /DWARF/_UNCATEGORIZED_/pka0_pld_cfg/anon_union_for_value.conflict - /DWARF/_UNCATEGORIZED_/pka0_common_op_snd_cfg_S2_only/anon_union_for_value.conflict

struct pka0_pld_cfg.conflict {
    union anon_union_for_value.conflict value;
};

typedef struct pka0_pldi_cfg pka0_pldi_cfg, *Ppka0_pldi_cfg;

typedef union anon_union_for_value anon_union_for_value, *Panon_union_for_value;

union anon_union_for_value {
    struct anon_struct.conflict128 BF;
    uint32_t WORD;
};

struct pka0_pldi_cfg {
    union anon_union_for_value value;
};

typedef struct pka0_common_op_first_cfg.conflict pka0_common_op_first_cfg.conflict, *Ppka0_common_op_first_cfg.conflict;


// WARNING! conflicting data type names: /DWARF/_UNCATEGORIZED_/pka0_common_op_first_cfg/anon_union_for_value.conflict - /DWARF/_UNCATEGORIZED_/pka0_common_op_snd_cfg_S2_only/anon_union_for_value.conflict

struct pka0_common_op_first_cfg.conflict {
    union anon_union_for_value.conflict value;
};

typedef struct pka0_common_op_snd_cfg_S1_only.conflict pka0_common_op_snd_cfg_S1_only.conflict, *Ppka0_common_op_snd_cfg_S1_only.conflict;


// WARNING! conflicting data type names: /DWARF/_UNCATEGORIZED_/pka0_common_op_snd_cfg_S1_only/anon_union_for_value.conflict - /DWARF/_UNCATEGORIZED_/pka0_common_op_snd_cfg_S2_only/anon_union_for_value.conflict

struct pka0_common_op_snd_cfg_S1_only.conflict {
    union anon_union_for_value.conflict value;
};

typedef struct pka0_bit_shift_op_cfg.conflict pka0_bit_shift_op_cfg.conflict, *Ppka0_bit_shift_op_cfg.conflict;


// WARNING! conflicting data type names: /DWARF/_UNCATEGORIZED_/pka0_bit_shift_op_cfg/anon_union_for_value.conflict - /DWARF/_UNCATEGORIZED_/pka0_common_op_snd_cfg_S2_only/anon_union_for_value.conflict

struct pka0_bit_shift_op_cfg.conflict {
    union anon_union_for_value.conflict value;
};

typedef struct pka0_common_op_snd_cfg_S1_S2.conflict pka0_common_op_snd_cfg_S1_S2.conflict, *Ppka0_common_op_snd_cfg_S1_S2.conflict;


// WARNING! conflicting data type names: /DWARF/_UNCATEGORIZED_/pka0_common_op_snd_cfg_S1_S2/anon_union_for_value.conflict - /DWARF/_UNCATEGORIZED_/pka0_common_op_snd_cfg_S2_only/anon_union_for_value.conflict

struct pka0_common_op_snd_cfg_S1_S2.conflict {
    union anon_union_for_value.conflict value;
};

typedef struct _ef_env _ef_env, *P_ef_env;

typedef struct _ef_env ef_env;

struct _ef_env {
    char * key;
    void * value;
    size_t value_len;
};

typedef enum env_status {
    ENV_DELETED=4,
    ENV_ERR_HDR=5,
    ENV_PRE_DELETE=3,
    ENV_PRE_WRITE=1,
    ENV_STATUS_NUM=6,
    ENV_UNUSED=0,
    ENV_WRITE=2
} env_status;

typedef enum env_status env_status_t;

typedef enum EfErrCode {
    EF_ENV_ARG_ERR=8,
    EF_ENV_FULL=6,
    EF_ENV_INIT_FAILED=7,
    EF_ENV_NAME_ERR=4,
    EF_ENV_NAME_EXIST=5,
    EF_ERASE_ERR=1,
    EF_NO_ERR=0,
    EF_READ_ERR=2,
    EF_WRITE_ERR=3
} EfErrCode;

typedef struct env_node_obj env_node_obj, *Penv_node_obj;

typedef struct anon_struct_for_addr anon_struct_for_addr, *Panon_struct_for_addr;

struct anon_struct_for_addr {
    uint32_t start;
    uint32_t value;
};

struct env_node_obj {
    env_status_t status;
    _Bool crc_is_ok;
    uint8_t name_len;
    undefined field_0x3;
    uint32_t magic;
    uint32_t len;
    uint32_t value_len;
    char name[64];
    struct anon_struct_for_addr addr;
};

typedef struct anon_struct.conflict114 anon_struct.conflict114, *Panon_struct.conflict114;

struct anon_struct.conflict114 {
    uint32_t start;
    uint32_t value;
};

typedef struct env_node_obj * env_node_obj_t;

typedef struct dbg_mem_write_req dbg_mem_write_req, *Pdbg_mem_write_req;

struct dbg_mem_write_req {
    uint32_t memaddr;
    uint32_t memdata;
};

typedef struct dbg_set_sev_filter_req dbg_set_sev_filter_req, *Pdbg_set_sev_filter_req;

struct dbg_set_sev_filter_req {
    uint32_t sev_filter;
};

typedef struct dbg_mem_read_req dbg_mem_read_req, *Pdbg_mem_read_req;

struct dbg_mem_read_req {
    uint32_t memaddr;
};

typedef struct dbg_mem_write_cfm dbg_mem_write_cfm, *Pdbg_mem_write_cfm;

struct dbg_mem_write_cfm {
    uint32_t memaddr;
    uint32_t memdata;
};

typedef struct dbg_get_sys_stat_cfm dbg_get_sys_stat_cfm, *Pdbg_get_sys_stat_cfm;

struct dbg_get_sys_stat_cfm {
    uint32_t cpu_sleep_time;
    uint32_t doze_time;
    uint32_t stats_time;
};

typedef struct dbg_mem_read_cfm dbg_mem_read_cfm, *Pdbg_mem_read_cfm;

struct dbg_mem_read_cfm {
    uint32_t memaddr;
    uint32_t memdata;
};

typedef struct dbg_set_mod_filter_req dbg_set_mod_filter_req, *Pdbg_set_mod_filter_req;

struct dbg_set_mod_filter_req {
    uint32_t mod_filter;
};

typedef struct bt_gatt_discover_params.conflict bt_gatt_discover_params.conflict, *Pbt_gatt_discover_params.conflict;

typedef struct bt_conn bt_conn, *Pbt_conn;

typedef struct bt_gatt_attr bt_gatt_attr, *Pbt_gatt_attr;

typedef int _ssize_t;

typedef _ssize_t ssize_t;

typedef struct bt_gatt_discover_params bt_gatt_discover_params, *Pbt_gatt_discover_params;

typedef struct bt_att_req.conflict2 bt_att_req.conflict2, *Pbt_att_req.conflict2;

typedef enum bt_security_t {
    BT_SECURITY_FIPS=4,
    BT_SECURITY_FORCE_PAIR=-128,
    BT_SECURITY_HIGH=3,
    BT_SECURITY_L0=0,
    BT_SECURITY_L1=1,
    BT_SECURITY_L2=2,
    BT_SECURITY_L3=3,
    BT_SECURITY_L4=4,
    BT_SECURITY_LOW=1,
    BT_SECURITY_MEDIUM=2,
    BT_SECURITY_NONE=0
} bt_security_t;

typedef enum bt_conn_state_t {
    BT_CONN_CONNECT=3,
    BT_CONN_CONNECTED=4,
    BT_CONN_CONNECT_DIR_ADV=2,
    BT_CONN_CONNECT_SCAN=1,
    BT_CONN_DISCONNECT=5,
    BT_CONN_DISCONNECTED=0
} bt_conn_state_t;

typedef struct _slist _slist, *P_slist;

typedef struct _slist sys_slist_t;

typedef struct k_delayed_work k_delayed_work, *Pk_delayed_work;

typedef union anon_union_for_field_20 anon_union_for_field_20, *Panon_union_for_field_20;

typedef struct bt_att_req.conflict1 bt_att_req.conflict1, *Pbt_att_req.conflict1;

typedef union anon_union_for_field_3 anon_union_for_field_3, *Panon_union_for_field_3;

typedef struct net_buf_simple_state net_buf_simple_state, *Pnet_buf_simple_state;

typedef struct k_work_q k_work_q, *Pk_work_q;

typedef struct k_timer k_timer, *Pk_timer;

typedef struct k_timer k_timer_t;

typedef struct bt_conn_le bt_conn_le, *Pbt_conn_le;

typedef struct anon_struct.conflict89 anon_struct.conflict89, *Panon_struct.conflict89;

typedef struct bl_hdl_t bl_timer_t;

typedef struct bt_keys bt_keys, *Pbt_keys;

typedef struct bt_ltk bt_ltk, *Pbt_ltk;

typedef struct bt_irk bt_irk, *Pbt_irk;

typedef struct bt_csrk bt_csrk, *Pbt_csrk;

struct bt_irk {
    u8_t val[16];
    struct bt_addr_t rpa;
};

struct bt_ltk {
    u8_t rand[8];
    u8_t ediv[2];
    u8_t val[16];
};

struct bt_csrk {
    u8_t val[16];
    u32_t.conflict cnt;
};

struct bt_keys {
    u8_t id;
    struct bt_addr_le_t addr;
    u8_t enc_size;
    u8_t flags;
    u16_t keys;
    struct bt_ltk ltk;
    struct bt_irk irk;
    struct bt_csrk local_csrk;
    struct bt_csrk remote_csrk;
    struct bt_ltk slave_ltk;
    undefined field_0x7e;
    undefined field_0x7f;
    u32_t.conflict aging_counter;
};

struct bt_gatt_attr {
    struct bt_uuid * uuid;
    ssize_t (* read)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t);
    ssize_t (* write)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t, u8_t);
    void * user_data;
    u16_t handle;
    u8_t perm;
    undefined field_0x13;
};

struct net_buf_simple_state {
    u16_t offset;
    u16_t len;
};

struct bt_att_req.conflict2 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    void (* destroy)(void *);
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct anon_struct.conflict89 {
    u16_t attr_handle;
    u16_t start_handle;
    u16_t end_handle;
};

union anon_union_for_field_3 {
    struct anon_struct.conflict89 _included;
    u16_t start_handle;
};

struct bt_gatt_discover_params.conflict {
    struct bt_att_req.conflict2 _req;
    struct bt_uuid * uuid;
    u8_t (* func)(struct bt_conn *, struct bt_gatt_attr *, struct bt_gatt_discover_params *);
    union anon_union_for_field_3 field_3;
    u16_t end_handle;
    u8_t type;
    undefined field_0x29;
    undefined field_0x2a;
    undefined field_0x2b;
};

struct bt_att_req.conflict1 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    void (* destroy)(void *);
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct k_timer {
    bl_timer_t timer;
    void (* handler)(void *);
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

struct k_delayed_work {
    struct k_work work;
    struct k_work_q * work_q;
    k_timer_t timer;
};

struct _slist {
    sys_snode_t * head;
    sys_snode_t * tail;
};

struct bt_conn_le {
    struct bt_addr_le_t dst;
    struct bt_addr_le_t init_addr;
    struct bt_addr_le_t resp_addr;
    undefined field_0x15;
    u16_t interval;
    u16_t interval_min;
    u16_t interval_max;
    u16_t latency;
    u16_t timeout;
    u16_t pending_latency;
    u16_t pending_timeout;
    u8_t features[8];
    struct bt_keys * keys;
};

union anon_union_for_field_20 {
    struct bt_conn_le le;
};

struct bt_conn {
    u16_t handle;
    u8_t type;
    u8_t role;
    atomic_t flags[1];
    u8_t id;
    enum bt_security_t sec_level;
    enum bt_security_t required_sec_level;
    u8_t encrypt;
    u8_t err;
    enum bt_conn_state_t state;
    u16_t rx_len;
    struct net_buf * rx;
    sys_slist_t tx_pending;
    u32_t.conflict pending_no_cb;
    sys_slist_t tx_complete;
    struct k_work tx_complete_work;
    struct k_fifo tx_queue;
    sys_slist_t channels;
    atomic_t ref;
    struct k_delayed_work update_work;
    union anon_union_for_field_20 field_20;
};

struct k_work_q {
    struct k_fifo fifo;
};

struct bt_gatt_discover_params {
    struct bt_att_req.conflict1 _req;
    struct bt_uuid * uuid;
    u8_t (* func)(struct bt_conn *, struct bt_gatt_attr *, struct bt_gatt_discover_params *);
    union anon_union_for_field_3 field_3;
    u16_t end_handle;
    u8_t type;
    undefined field_0x29;
    undefined field_0x2a;
    undefined field_0x2b;
};

typedef struct _bt_gatt_ccc.conflict1 _bt_gatt_ccc.conflict1, *P_bt_gatt_ccc.conflict1;

typedef struct bt_gatt_ccc_cfg bt_gatt_ccc_cfg, *Pbt_gatt_ccc_cfg;

struct bt_gatt_ccc_cfg {
    u8_t id;
    struct bt_addr_le_t peer;
    u16_t value;
};

struct _bt_gatt_ccc.conflict1 {
    struct bt_gatt_ccc_cfg cfg[2];
    u16_t value;
    undefined field_0x16;
    undefined field_0x17;
    void (* cfg_changed)(struct bt_gatt_attr *, u16_t);
    _Bool (* cfg_write)(struct bt_conn *, struct bt_gatt_attr *, u16_t);
    _Bool (* cfg_match)(struct bt_conn *, struct bt_gatt_attr *);
};

typedef struct _bt_gatt_ccc.conflict3 _bt_gatt_ccc.conflict3, *P_bt_gatt_ccc.conflict3;

struct _bt_gatt_ccc.conflict3 {
    struct bt_gatt_ccc_cfg cfg[2];
    u16_t value;
    undefined field_0x16;
    undefined field_0x17;
    void (* cfg_changed)(struct bt_gatt_attr *, u16_t);
    _Bool (* cfg_write)(struct bt_conn *, struct bt_gatt_attr *, u16_t);
    _Bool (* cfg_match)(struct bt_conn *, struct bt_gatt_attr *);
};

typedef struct _bt_gatt_ccc.conflict2 _bt_gatt_ccc.conflict2, *P_bt_gatt_ccc.conflict2;

struct _bt_gatt_ccc.conflict2 {
    struct bt_gatt_ccc_cfg cfg[2];
    u16_t value;
    undefined field_0x16;
    undefined field_0x17;
    void (* cfg_changed)(struct bt_gatt_attr *, u16_t);
    _Bool (* cfg_write)(struct bt_conn *, struct bt_gatt_attr *, u16_t);
    _Bool (* cfg_match)(struct bt_conn *, struct bt_gatt_attr *);
};

typedef struct bt_gatt_indicate_params.conflict3 bt_gatt_indicate_params.conflict3, *Pbt_gatt_indicate_params.conflict3;

typedef struct bt_att_req.conflict19 bt_att_req.conflict19, *Pbt_att_req.conflict19;

typedef void (* bt_att_destroy_t.conflict)(void *);

struct bt_att_req.conflict19 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_indicate_params.conflict3 {
    struct bt_att_req.conflict19 _req;
    struct bt_uuid * uuid;
    struct bt_gatt_attr * attr;
    void (* func)(struct bt_conn *, struct bt_gatt_attr *, u8_t);
    void * data;
    u16_t len;
    undefined field_0x2a;
    undefined field_0x2b;
};

typedef struct anon_struct.conflict105 anon_struct.conflict105, *Panon_struct.conflict105;

struct anon_struct.conflict105 {
    u16_t attr_handle;
    u16_t start_handle;
    u16_t end_handle;
};

typedef struct anon_struct.conflict106 anon_struct.conflict106, *Panon_struct.conflict106;

struct anon_struct.conflict106 {
    u16_t handle;
    u16_t offset;
};

typedef struct bt_gatt_chrc bt_gatt_chrc, *Pbt_gatt_chrc;

struct bt_gatt_chrc {
    struct bt_uuid * uuid;
    u16_t value_handle;
    u8_t properties;
    undefined field_0x7;
};

typedef struct anon_struct.conflict107 anon_struct.conflict107, *Panon_struct.conflict107;

struct anon_struct.conflict107 {
    u16_t start_handle;
    u16_t end_handle;
    struct bt_uuid * uuid;
};

typedef struct bt_gatt_service_val bt_gatt_service_val, *Pbt_gatt_service_val;

struct bt_gatt_service_val {
    struct bt_uuid * uuid;
    u16_t end_handle;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct bt_gatt_read_params.conflict bt_gatt_read_params.conflict, *Pbt_gatt_read_params.conflict;

typedef struct bt_gatt_read_params bt_gatt_read_params, *Pbt_gatt_read_params;

typedef struct bt_att_req.conflict4 bt_att_req.conflict4, *Pbt_att_req.conflict4;

typedef struct bt_att_req.conflict3 bt_att_req.conflict3, *Pbt_att_req.conflict3;


// WARNING! conflicting data type names: /DWARF/gatt.h/bt_gatt_read_params/anon_union_for_field_3 - /DWARF/gatt.h/bt_gatt_discover_params/anon_union_for_field_3

struct bt_att_req.conflict4 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    void (* destroy)(void *);
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_att_req.conflict3 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    void (* destroy)(void *);
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_read_params {
    struct bt_att_req.conflict3 _req;
    u8_t (* func)(struct bt_conn *, u8_t, struct bt_gatt_read_params *, void *, u16_t);
    size_t handle_count;
    union anon_union_for_field_3 field_3;
};

struct bt_gatt_read_params.conflict {
    struct bt_att_req.conflict4 _req;
    u8_t (* func)(struct bt_conn *, u8_t, struct bt_gatt_read_params *, void *, u16_t);
    size_t handle_count;
    union anon_union_for_field_3 field_3;
};

typedef struct bt_gatt_service bt_gatt_service, *Pbt_gatt_service;

struct bt_gatt_service {
    struct bt_gatt_attr * attrs;
    size_t attr_count;
    sys_snode_t node;
};

typedef struct bt_gatt_discover_params.conflict1 bt_gatt_discover_params.conflict1, *Pbt_gatt_discover_params.conflict1;

typedef struct bt_att_req.conflict12 bt_att_req.conflict12, *Pbt_att_req.conflict12;

struct bt_att_req.conflict12 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_discover_params.conflict1 {
    struct bt_att_req.conflict12 _req;
    struct bt_uuid * uuid;
    u8_t (* func)(struct bt_conn *, struct bt_gatt_attr *, struct bt_gatt_discover_params *);
    union anon_union_for_field_3 field_3;
    u16_t end_handle;
    u8_t type;
    undefined field_0x29;
    undefined field_0x2a;
    undefined field_0x2b;
};

typedef struct bt_gatt_cep bt_gatt_cep, *Pbt_gatt_cep;

struct bt_gatt_cep {
    u16_t properties;
};

typedef struct bt_gatt_attr.conflict11 bt_gatt_attr.conflict11, *Pbt_gatt_attr.conflict11;

struct bt_gatt_attr.conflict11 {
    struct bt_uuid * uuid;
    ssize_t (* read)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t);
    ssize_t (* write)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t, u8_t);
    void * user_data;
    u16_t handle;
    u8_t perm;
    undefined field_0x13;
};

typedef struct bt_gatt_indicate_params.conflict1 bt_gatt_indicate_params.conflict1, *Pbt_gatt_indicate_params.conflict1;

typedef struct bt_att_req.conflict17 bt_att_req.conflict17, *Pbt_att_req.conflict17;

struct bt_att_req.conflict17 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_indicate_params.conflict1 {
    struct bt_att_req.conflict17 _req;
    struct bt_uuid * uuid;
    struct bt_gatt_attr * attr;
    void (* func)(struct bt_conn *, struct bt_gatt_attr *, u8_t);
    void * data;
    u16_t len;
    undefined field_0x2a;
    undefined field_0x2b;
};

typedef struct bt_gatt_exchange_params bt_gatt_exchange_params, *Pbt_gatt_exchange_params;

typedef struct bt_att_req.conflict bt_att_req.conflict, *Pbt_att_req.conflict;

struct bt_att_req.conflict {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    void (* destroy)(void *);
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_exchange_params {
    struct bt_att_req.conflict _req;
    void (* func)(struct bt_conn *, u8_t, struct bt_gatt_exchange_params *);
};

typedef struct bt_gatt_write_params bt_gatt_write_params, *Pbt_gatt_write_params;

typedef struct bt_att_req.conflict5 bt_att_req.conflict5, *Pbt_att_req.conflict5;

struct bt_att_req.conflict5 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    void (* destroy)(void *);
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_write_params {
    struct bt_att_req.conflict5 _req;
    void (* func)(struct bt_conn *, u8_t, struct bt_gatt_write_params *);
    u16_t handle;
    u16_t offset;
    void * data;
    u16_t length;
    undefined field_0x26;
    undefined field_0x27;
};

typedef struct bt_gatt_include bt_gatt_include, *Pbt_gatt_include;

struct bt_gatt_include {
    struct bt_uuid * uuid;
    u16_t start_handle;
    u16_t end_handle;
};

typedef struct bt_gatt_indicate_params.conflict4 bt_gatt_indicate_params.conflict4, *Pbt_gatt_indicate_params.conflict4;

typedef struct bt_att_req.conflict21 bt_att_req.conflict21, *Pbt_att_req.conflict21;

struct bt_att_req.conflict21 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_indicate_params.conflict4 {
    struct bt_att_req.conflict21 _req;
    struct bt_uuid * uuid;
    struct bt_gatt_attr * attr;
    void (* func)(struct bt_conn *, struct bt_gatt_attr *, u8_t);
    void * data;
    u16_t len;
    undefined field_0x2a;
    undefined field_0x2b;
};

typedef struct bt_gatt_attr.conflict6 bt_gatt_attr.conflict6, *Pbt_gatt_attr.conflict6;

struct bt_gatt_attr.conflict6 {
    struct bt_uuid * uuid;
    ssize_t (* read)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t);
    ssize_t (* write)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t, u8_t);
    void * user_data;
    u16_t handle;
    u8_t perm;
    undefined field_0x13;
};

typedef struct bt_gatt_subscribe_params.conflict bt_gatt_subscribe_params.conflict, *Pbt_gatt_subscribe_params.conflict;

typedef struct bt_gatt_subscribe_params bt_gatt_subscribe_params, *Pbt_gatt_subscribe_params;

typedef struct bt_att_req.conflict8 bt_att_req.conflict8, *Pbt_att_req.conflict8;

typedef struct bt_att_req.conflict7 bt_att_req.conflict7, *Pbt_att_req.conflict7;

struct bt_att_req.conflict8 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    void (* destroy)(void *);
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_subscribe_params.conflict {
    struct bt_att_req.conflict8 _req;
    struct bt_addr_le_t _peer;
    undefined field_0x1f;
    u8_t (* notify)(struct bt_conn *, struct bt_gatt_subscribe_params *, void *, u16_t);
    u16_t value_handle;
    u16_t ccc_handle;
    u16_t value;
    undefined field_0x2a;
    undefined field_0x2b;
    atomic_t flags[1];
    sys_snode_t node;
};

struct bt_att_req.conflict7 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    void (* destroy)(void *);
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_subscribe_params {
    struct bt_att_req.conflict7 _req;
    struct bt_addr_le_t _peer;
    undefined field_0x1f;
    u8_t (* notify)(struct bt_conn *, struct bt_gatt_subscribe_params *, void *, u16_t);
    u16_t value_handle;
    u16_t ccc_handle;
    u16_t value;
    undefined field_0x2a;
    undefined field_0x2b;
    atomic_t flags[1];
    sys_snode_t node;
};

typedef struct bt_gatt_indicate_params.conflict2 bt_gatt_indicate_params.conflict2, *Pbt_gatt_indicate_params.conflict2;

typedef struct bt_att_req.conflict18 bt_att_req.conflict18, *Pbt_att_req.conflict18;

struct bt_att_req.conflict18 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_indicate_params.conflict2 {
    struct bt_att_req.conflict18 _req;
    struct bt_uuid * uuid;
    struct bt_gatt_attr * attr;
    void (* func)(struct bt_conn *, struct bt_gatt_attr *, u8_t);
    void * data;
    u16_t len;
    undefined field_0x2a;
    undefined field_0x2b;
};

typedef struct bt_gatt_service_static bt_gatt_service_static, *Pbt_gatt_service_static;

struct bt_gatt_service_static {
    struct bt_gatt_attr * attrs;
    size_t attr_count;
};

typedef struct bt_gatt_attr.conflict5 bt_gatt_attr.conflict5, *Pbt_gatt_attr.conflict5;

struct bt_gatt_attr.conflict5 {
    struct bt_uuid * uuid;
    ssize_t (* read)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t);
    ssize_t (* write)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t, u8_t);
    void * user_data;
    u16_t handle;
    u8_t perm;
    undefined field_0x13;
};

typedef struct bt_gatt_attr.conflict4 bt_gatt_attr.conflict4, *Pbt_gatt_attr.conflict4;

struct bt_gatt_attr.conflict4 {
    struct bt_uuid * uuid;
    ssize_t (* read)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t);
    ssize_t (* write)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t, u8_t);
    void * user_data;
    u16_t handle;
    u8_t perm;
    undefined field_0x13;
};

typedef struct bt_gatt_attr.conflict10 bt_gatt_attr.conflict10, *Pbt_gatt_attr.conflict10;

struct bt_gatt_attr.conflict10 {
    struct bt_uuid * uuid;
    ssize_t (* read)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t);
    ssize_t (* write)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t, u8_t);
    void * user_data;
    u16_t handle;
    u8_t perm;
    undefined field_0x13;
};

typedef struct _bt_gatt_ccc _bt_gatt_ccc, *P_bt_gatt_ccc;

struct _bt_gatt_ccc {
    struct bt_gatt_ccc_cfg cfg[2];
    u16_t value;
    undefined field_0x16;
    undefined field_0x17;
    void (* cfg_changed)(struct bt_gatt_attr *, u16_t);
    _Bool (* cfg_write)(struct bt_conn *, struct bt_gatt_attr *, u16_t);
    _Bool (* cfg_match)(struct bt_conn *, struct bt_gatt_attr *);
};

typedef struct bt_gatt_cpf bt_gatt_cpf, *Pbt_gatt_cpf;

struct bt_gatt_cpf {
    u8_t format;
    s8_t exponent;
    u16_t unit;
    u8_t name_space;
    u16_t description;
};

typedef struct bt_gatt_exchange_params.conflict bt_gatt_exchange_params.conflict, *Pbt_gatt_exchange_params.conflict;

typedef struct bt_att_req.conflict11 bt_att_req.conflict11, *Pbt_att_req.conflict11;

struct bt_att_req.conflict11 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_exchange_params.conflict {
    struct bt_att_req.conflict11 _req;
    void (* func)(struct bt_conn *, u8_t, struct bt_gatt_exchange_params *);
};

typedef struct bt_gatt_indicate_params bt_gatt_indicate_params, *Pbt_gatt_indicate_params;

typedef struct bt_att_req.conflict10 bt_att_req.conflict10, *Pbt_att_req.conflict10;

struct bt_att_req.conflict10 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_indicate_params {
    struct bt_att_req.conflict10 _req;
    struct bt_uuid * uuid;
    struct bt_gatt_attr * attr;
    void (* func)(struct bt_conn *, struct bt_gatt_attr *, u8_t);
    void * data;
    u16_t len;
    undefined field_0x2a;
    undefined field_0x2b;
};

typedef struct anon_struct.conflict94 anon_struct.conflict94, *Panon_struct.conflict94;

struct anon_struct.conflict94 {
    u16_t start_handle;
    u16_t end_handle;
    struct bt_uuid * uuid;
};

typedef struct anon_struct.conflict93 anon_struct.conflict93, *Panon_struct.conflict93;

struct anon_struct.conflict93 {
    u16_t handle;
    u16_t offset;
};

typedef struct anon_struct.conflict92 anon_struct.conflict92, *Panon_struct.conflict92;

struct anon_struct.conflict92 {
    u16_t start_handle;
    u16_t end_handle;
    struct bt_uuid * uuid;
};

typedef struct anon_struct.conflict91 anon_struct.conflict91, *Panon_struct.conflict91;

struct anon_struct.conflict91 {
    u16_t handle;
    u16_t offset;
};

typedef struct bt_gatt_notify_params.conflict1 bt_gatt_notify_params.conflict1, *Pbt_gatt_notify_params.conflict1;

struct bt_gatt_notify_params.conflict1 {
    struct bt_uuid * uuid;
    struct bt_gatt_attr * attr;
    void * data;
    u16_t len;
    undefined field_0xe;
    undefined field_0xf;
    void (* func)(struct bt_conn *, void *);
    void * user_data;
};

typedef struct anon_struct.conflict90 anon_struct.conflict90, *Panon_struct.conflict90;

struct anon_struct.conflict90 {
    u16_t attr_handle;
    u16_t start_handle;
    u16_t end_handle;
};

typedef struct bt_gatt_notify_params.conflict bt_gatt_notify_params.conflict, *Pbt_gatt_notify_params.conflict;

struct bt_gatt_notify_params.conflict {
    struct bt_uuid * uuid;
    struct bt_gatt_attr * attr;
    void * data;
    u16_t len;
    undefined field_0xe;
    undefined field_0xf;
    void (* func)(struct bt_conn *, void *);
    void * user_data;
};

typedef struct bt_gatt_write_params.conflict bt_gatt_write_params.conflict, *Pbt_gatt_write_params.conflict;

typedef struct bt_att_req.conflict6 bt_att_req.conflict6, *Pbt_att_req.conflict6;

struct bt_att_req.conflict6 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    void (* destroy)(void *);
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_write_params.conflict {
    struct bt_att_req.conflict6 _req;
    void (* func)(struct bt_conn *, u8_t, struct bt_gatt_write_params *);
    u16_t handle;
    u16_t offset;
    void * data;
    u16_t length;
    undefined field_0x26;
    undefined field_0x27;
};

typedef struct bt_gatt_notify_params bt_gatt_notify_params, *Pbt_gatt_notify_params;

struct bt_gatt_notify_params {
    struct bt_uuid * uuid;
    struct bt_gatt_attr * attr;
    void * data;
    u16_t len;
    undefined field_0xe;
    undefined field_0xf;
    void (* func)(struct bt_conn *, void *);
    void * user_data;
};

typedef struct bt_gatt_write_params.conflict1 bt_gatt_write_params.conflict1, *Pbt_gatt_write_params.conflict1;

typedef struct bt_att_req.conflict14 bt_att_req.conflict14, *Pbt_att_req.conflict14;

struct bt_att_req.conflict14 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_write_params.conflict1 {
    struct bt_att_req.conflict14 _req;
    void (* func)(struct bt_conn *, u8_t, struct bt_gatt_write_params *);
    u16_t handle;
    u16_t offset;
    void * data;
    u16_t length;
    undefined field_0x26;
    undefined field_0x27;
};

typedef struct bt_gatt_attr.conflict3 bt_gatt_attr.conflict3, *Pbt_gatt_attr.conflict3;

struct bt_gatt_attr.conflict3 {
    struct bt_uuid * uuid;
    ssize_t (* read)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t);
    ssize_t (* write)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t, u8_t);
    void * user_data;
    u16_t handle;
    u8_t perm;
    undefined field_0x13;
};

typedef struct bt_gatt_attr.conflict1 bt_gatt_attr.conflict1, *Pbt_gatt_attr.conflict1;

struct bt_gatt_attr.conflict1 {
    struct bt_uuid * uuid;
    ssize_t (* read)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t);
    ssize_t (* write)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t, u8_t);
    void * user_data;
    u16_t handle;
    u8_t perm;
    undefined field_0x13;
};

typedef struct bt_gatt_attr.conflict2 bt_gatt_attr.conflict2, *Pbt_gatt_attr.conflict2;

struct bt_gatt_attr.conflict2 {
    struct bt_uuid * uuid;
    ssize_t (* read)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t);
    ssize_t (* write)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t, u8_t);
    void * user_data;
    u16_t handle;
    u8_t perm;
    undefined field_0x13;
};

typedef struct bt_gatt_attr.conflict9 bt_gatt_attr.conflict9, *Pbt_gatt_attr.conflict9;

struct bt_gatt_attr.conflict9 {
    struct bt_uuid * uuid;
    ssize_t (* read)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t);
    ssize_t (* write)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t, u8_t);
    void * user_data;
    u16_t handle;
    u8_t perm;
    undefined field_0x13;
};

typedef struct bt_gatt_read_params.conflict1 bt_gatt_read_params.conflict1, *Pbt_gatt_read_params.conflict1;

typedef struct bt_att_req.conflict13 bt_att_req.conflict13, *Pbt_att_req.conflict13;

struct bt_att_req.conflict13 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_read_params.conflict1 {
    struct bt_att_req.conflict13 _req;
    u8_t (* func)(struct bt_conn *, u8_t, struct bt_gatt_read_params *, void *, u16_t);
    size_t handle_count;
    union anon_union_for_field_3 field_3;
};

typedef struct bt_gatt_attr.conflict7 bt_gatt_attr.conflict7, *Pbt_gatt_attr.conflict7;

struct bt_gatt_attr.conflict7 {
    struct bt_uuid * uuid;
    ssize_t (* read)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t);
    ssize_t (* write)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t, u8_t);
    void * user_data;
    u16_t handle;
    u8_t perm;
    undefined field_0x13;
};

typedef struct bt_gatt_attr.conflict8 bt_gatt_attr.conflict8, *Pbt_gatt_attr.conflict8;

struct bt_gatt_attr.conflict8 {
    struct bt_uuid * uuid;
    ssize_t (* read)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t);
    ssize_t (* write)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t, u8_t);
    void * user_data;
    u16_t handle;
    u8_t perm;
    undefined field_0x13;
};

typedef struct bt_gatt_subscribe_params.conflict1 bt_gatt_subscribe_params.conflict1, *Pbt_gatt_subscribe_params.conflict1;

typedef struct bt_att_req.conflict15 bt_att_req.conflict15, *Pbt_att_req.conflict15;

struct bt_att_req.conflict15 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_subscribe_params.conflict1 {
    struct bt_att_req.conflict15 _req;
    struct bt_addr_le_t _peer;
    undefined field_0x1f;
    u8_t (* notify)(struct bt_conn *, struct bt_gatt_subscribe_params *, void *, u16_t);
    u16_t value_handle;
    u16_t ccc_handle;
    u16_t value;
    undefined field_0x2a;
    undefined field_0x2b;
    atomic_t flags[1];
    sys_snode_t node;
};

typedef struct bt_gatt_attr.conflict bt_gatt_attr.conflict, *Pbt_gatt_attr.conflict;

struct bt_gatt_attr.conflict {
    struct bt_uuid * uuid;
    ssize_t (* read)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t);
    ssize_t (* write)(struct bt_conn *, struct bt_gatt_attr *, void *, u16_t, u16_t, u8_t);
    void * user_data;
    u16_t handle;
    u8_t perm;
    undefined field_0x13;
};

typedef struct _bt_gatt_ccc.conflict _bt_gatt_ccc.conflict, *P_bt_gatt_ccc.conflict;

struct _bt_gatt_ccc.conflict {
    struct bt_gatt_ccc_cfg cfg[2];
    u16_t value;
    undefined field_0x16;
    undefined field_0x17;
    void (* cfg_changed)(struct bt_gatt_attr *, u16_t);
    _Bool (* cfg_write)(struct bt_conn *, struct bt_gatt_attr *, u16_t);
    _Bool (* cfg_match)(struct bt_conn *, struct bt_gatt_attr *);
};

typedef struct bt_gatt_indicate_params.conflict bt_gatt_indicate_params.conflict, *Pbt_gatt_indicate_params.conflict;

typedef struct bt_att_req.conflict16 bt_att_req.conflict16, *Pbt_att_req.conflict16;

struct bt_att_req.conflict16 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_indicate_params.conflict {
    struct bt_att_req.conflict16 _req;
    struct bt_uuid * uuid;
    struct bt_gatt_attr * attr;
    void (* func)(struct bt_conn *, struct bt_gatt_attr *, u8_t);
    void * data;
    u16_t len;
    undefined field_0x2a;
    undefined field_0x2b;
};

typedef struct bt_gatt_exchange_params.conflict1 bt_gatt_exchange_params.conflict1, *Pbt_gatt_exchange_params.conflict1;

typedef struct bt_att_req.conflict28 bt_att_req.conflict28, *Pbt_att_req.conflict28;

struct bt_att_req.conflict28 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_gatt_exchange_params.conflict1 {
    struct bt_att_req.conflict28 _req;
    void (* func)(struct bt_conn *, u8_t, struct bt_gatt_exchange_params *);
};

typedef _Bool bool_l;

typedef uint64_t __le64;

typedef struct work work, *Pwork;

struct work {
    void (* fn)(void *);
    void * arg;
    int dly;
};

typedef struct targ targ, *Ptarg;

typedef struct AosStaticTask_t AosStaticTask_t, *PAosStaticTask_t;

typedef struct xSTATIC_TCB xSTATIC_TCB, *PxSTATIC_TCB;

typedef struct xSTATIC_TCB StaticTask_t;

typedef struct xSTATIC_LIST_ITEM xSTATIC_LIST_ITEM, *PxSTATIC_LIST_ITEM;

typedef struct xSTATIC_LIST_ITEM StaticListItem_t;

struct xSTATIC_LIST_ITEM {
    TickType_t xDummy2;
    void * pvDummy3[4];
};

struct xSTATIC_TCB {
    void * pxDummy1;
    StaticListItem_t xDummy3[2];
    UBaseType_t uxDummy5;
    void * pxDummy6;
    uint8_t ucDummy7[16];
    UBaseType_t uxDummy9;
    UBaseType_t uxDummy10[2];
    UBaseType_t uxDummy12[2];
    uint32_t ulDummy18;
    uint8_t ucDummy19;
    uint8_t uxDummy20;
    undefined field_0x5e;
    undefined field_0x5f;
};

struct targ {
    struct AosStaticTask_t * task;
    void (* fn)(void *);
    void * arg;
};

struct AosStaticTask_t {
    StaticTask_t fTask;
    uint32_t key_bitmap;
    void * keys[4];
    void * stack;
    char name[32];
    uint32_t magic;
};

typedef longlong s64_t;

typedef __blkcnt_t blkcnt_t;


// WARNING! conflicting data type names: /DWARF/_types.h/__mode_t - /types.h/__mode_t

typedef __mode_t mode_t;


// WARNING! conflicting data type names: /DWARF/_types.h/__ino_t - /types.h/__ino_t

typedef __ino_t ino_t;


// WARNING! conflicting data type names: /DWARF/_types.h/__uid_t - /types.h/__uid_t

typedef __uid_t uid_t;

typedef short s16_t;


// WARNING! conflicting data type names: /DWARF/_types.h/__off_t - /types.h/__off_t

typedef __off_t off_t;


// WARNING! conflicting data type names: /DWARF/_types.h/__nlink_t - /types.h/__nlink_t

typedef __nlink_t nlink_t;

typedef int s32_t;


// WARNING! conflicting data type names: /DWARF/_types.h/__gid_t - /types.h/__gid_t

typedef __gid_t gid_t;


// WARNING! conflicting data type names: /DWARF/_types.h/__dev_t - /types.h/__dev_t

typedef __dev_t dev_t;

typedef __blksize_t blksize_t;

typedef struct txl_list txl_list, *Ptxl_list;

typedef struct tx_hd tx_hd, *Ptx_hd;


// WARNING! conflicting data type names: /DWARF/hal_desc.h/tx_hd/anon_union_for_field_3 - /DWARF/gatt.h/bt_gatt_discover_params/anon_union_for_field_3


// WARNING! conflicting data type names: /DWARF/hal_desc.h/tx_hd/anon_union_for_field_4 - /DWARF/buf.h/net_buf/anon_union_for_field_4

typedef union anon_union_for_field_5 anon_union_for_field_5, *Panon_union_for_field_5;

union anon_union_for_field_5 {
    uint32_t dataendptr;
    uint32_t sec_user3_ptr;
};

struct tx_hd {
    uint32_t upatterntx;
    uint32_t nextfrmexseq_ptr;
    uint32_t nextmpdudesc_ptr;
    union anon_union_for_field_3 field_3;
    union anon_union_for_field_4 field_4;
    union anon_union_for_field_5 field_5;
    uint32_t frmlen;
    uint32_t frmlifetime;
    uint32_t phyctrlinfo;
    uint32_t policyentryaddr;
    uint32_t optlen[3];
    uint32_t macctrlinfo1;
    uint32_t macctrlinfo2;
    uint32_t statinfo;
    uint32_t mediumtimeused;
};

struct txl_list {
    struct tx_hd * last_frame_exch;
    struct co_list transmitting;
    uint16_t bridgedmacnt;
    uint8_t chk_state;
    undefined field_0xf;
};

typedef struct txl_cntrl_env_tag txl_cntrl_env_tag, *Ptxl_cntrl_env_tag;

struct txl_cntrl_env_tag {
    struct txl_list txlist[5];
    uint32_t pck_cnt;
    uint16_t seqnbr;
    _Bool reset;
    undefined field_0x57;
};

typedef struct gatt_chrc gatt_chrc, *Pgatt_chrc;

typedef union anon_union_for_field_2 anon_union_for_field_2, *Panon_union_for_field_2;

union anon_union_for_field_2 {
    u16_t uuid16;
    u8_t uuid[16];
};

struct gatt_chrc {
    u8_t properties;
    u16_t value_handle;
    union anon_union_for_field_2 field_2;
};

typedef struct anon_struct.conflict108 anon_struct.conflict108, *Panon_struct.conflict108;

struct anon_struct.conflict108 {
    u16_t start;
    u16_t end;
};

typedef struct gatt_incl gatt_incl, *Pgatt_incl;

struct gatt_incl {
    u16_t start_handle;
    u16_t end_handle;
    u16_t uuid16;
};

typedef struct sc_data sc_data, *Psc_data;

struct sc_data {
    u16_t start;
    u16_t end;
};

typedef struct notify_data notify_data, *Pnotify_data;


// WARNING! conflicting data type names: /DWARF/gatt.c/notify_data/anon_union_for_field_2 - /DWARF/gatt.c/gatt_chrc/anon_union_for_field_2

struct notify_data {
    int err;
    u16_t type;
    undefined field_0x6;
    undefined field_0x7;
    union anon_union_for_field_2 field_2;
};

typedef struct gatt_sc.conflict gatt_sc.conflict, *Pgatt_sc.conflict;

typedef struct k_delayed_work.conflict4 k_delayed_work.conflict4, *Pk_delayed_work.conflict4;

typedef struct k_timer.conflict9 k_timer.conflict9, *Pk_timer.conflict9;

typedef struct k_timer.conflict9 k_timer_t.conflict7;

typedef void (* k_timer_handler_t.conflict)(void *);

struct k_timer.conflict9 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

struct k_delayed_work.conflict4 {
    struct k_work work;
    struct k_work_q * work_q;
    k_timer_t.conflict7 timer;
};

struct gatt_sc.conflict {
    struct bt_gatt_indicate_params.conflict4 params;
    u16_t start;
    u16_t end;
    struct k_delayed_work.conflict4 work;
    atomic_t flags[1];
};

typedef struct gatt_sc_cfg gatt_sc_cfg, *Pgatt_sc_cfg;

typedef struct anon_struct_for_data anon_struct_for_data, *Panon_struct_for_data;

struct anon_struct_for_data {
    u16_t start;
    u16_t end;
};

struct gatt_sc_cfg {
    u8_t id;
    struct bt_addr_le_t peer;
    struct anon_struct_for_data data;
};

typedef struct addr_with_id addr_with_id, *Paddr_with_id;

struct addr_with_id {
    struct bt_addr_le_t * addr;
    u8_t id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct ccc_load ccc_load, *Pccc_load;

typedef struct ccc_store ccc_store, *Pccc_store;

struct ccc_load {
    struct addr_with_id addr_with_id;
    struct ccc_store * entry;
    size_t count;
};

struct ccc_store {
    u16_t handle;
    u16_t value;
};

typedef struct gatt_sc gatt_sc, *Pgatt_sc;

typedef struct k_delayed_work.conflict3 k_delayed_work.conflict3, *Pk_delayed_work.conflict3;

typedef struct k_timer.conflict8 k_timer.conflict8, *Pk_timer.conflict8;

typedef struct k_timer.conflict8 k_timer_t.conflict6;

struct k_timer.conflict8 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

struct k_delayed_work.conflict3 {
    struct k_work work;
    struct k_work_q * work_q;
    k_timer_t.conflict6 timer;
};

struct gatt_sc {
    struct bt_gatt_indicate_params.conflict params;
    u16_t start;
    u16_t end;
    struct k_delayed_work.conflict3 work;
    atomic_t flags[1];
};

typedef struct conn_data conn_data, *Pconn_data;

struct conn_data {
    struct bt_conn * conn;
    enum bt_security_t sec;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
};

typedef union anon_union anon_union, *Panon_union;

union anon_union {
    struct bt_uuid uuid;
    struct bt_uuid_16 u16;
    struct bt_uuid_128 u128;
    undefined1 field3[18]; // Automatically generated padding to match DWARF declared size
};

typedef union anon_union_for_info anon_union_for_info, *Panon_union_for_info;

typedef struct bt_att_info_16 bt_att_info_16, *Pbt_att_info_16;

typedef struct bt_att_info_128 bt_att_info_128, *Pbt_att_info_128;

struct bt_att_info_16 {
    u16_t handle;
    u16_t uuid;
};

union anon_union_for_info {
    struct bt_att_info_16 * i16;
    struct bt_att_info_128 * i128;
};

struct bt_att_info_128 {
    u16_t handle;
    u8_t uuid[16];
};


// WARNING! conflicting data type names: /DWARF/gatt.c/gatt_find_info_rsp/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u

typedef struct anon_struct_for_ppcp anon_struct_for_ppcp, *Panon_struct_for_ppcp;

struct anon_struct_for_ppcp {
    u16_t min_int;
    u16_t max_int;
    u16_t latency;
    u16_t timeout;
};


// WARNING! conflicting data type names: /DWARF/gatt.c/read_included_uuid_cb/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u

typedef struct ipc_emb_env_tag.conflict ipc_emb_env_tag.conflict, *Pipc_emb_env_tag.conflict;

struct ipc_emb_env_tag.conflict {
    struct co_list rx_queue;
    struct co_list cfm_queue;
    uint8_t ipc_rxdesc_idx;
    uint8_t ipc_rxbuf_idx;
    uint8_t ipc_radar_buf_idx;
    uint8_t ipc_msge2a_buf_idx;
    uint8_t ipc_dbg_buf_idx;
    uint8_t ipc_msgacke2a_cnt;
    undefined field_0x16;
    undefined field_0x17;
    uint32_t txdesc_idx;
    struct txdesc_host * txdesc;
};

typedef struct ipc_emb_env_tag ipc_emb_env_tag, *Pipc_emb_env_tag;

struct ipc_emb_env_tag {
    struct co_list rx_queue;
    struct co_list cfm_queue;
    uint8_t ipc_rxdesc_idx;
    uint8_t ipc_rxbuf_idx;
    uint8_t ipc_radar_buf_idx;
    uint8_t ipc_msge2a_buf_idx;
    uint8_t ipc_dbg_buf_idx;
    uint8_t ipc_msgacke2a_cnt;
    undefined field_0x16;
    undefined field_0x17;
    uint32_t txdesc_idx;
    struct txdesc_host * txdesc;
};

typedef struct ipc_emb_env_tag.conflict1 ipc_emb_env_tag.conflict1, *Pipc_emb_env_tag.conflict1;

struct ipc_emb_env_tag.conflict1 {
    struct co_list rx_queue;
    struct co_list cfm_queue;
    uint8_t ipc_rxdesc_idx;
    uint8_t ipc_rxbuf_idx;
    uint8_t ipc_radar_buf_idx;
    uint8_t ipc_msge2a_buf_idx;
    uint8_t ipc_dbg_buf_idx;
    uint8_t ipc_msgacke2a_cnt;
    undefined field_0x16;
    undefined field_0x17;
    uint32_t txdesc_idx;
    struct txdesc_host * txdesc;
};

typedef struct ipc_emb_env_tag.conflict3 ipc_emb_env_tag.conflict3, *Pipc_emb_env_tag.conflict3;

struct ipc_emb_env_tag.conflict3 {
    struct co_list rx_queue;
    struct co_list cfm_queue;
    uint8_t ipc_rxdesc_idx;
    uint8_t ipc_rxbuf_idx;
    uint8_t ipc_radar_buf_idx;
    uint8_t ipc_msge2a_buf_idx;
    uint8_t ipc_dbg_buf_idx;
    uint8_t ipc_msgacke2a_cnt;
    undefined field_0x16;
    undefined field_0x17;
    uint32_t txdesc_idx;
    struct txdesc_host * txdesc;
};

typedef struct ipc_emb_env_tag.conflict2 ipc_emb_env_tag.conflict2, *Pipc_emb_env_tag.conflict2;

struct ipc_emb_env_tag.conflict2 {
    struct co_list rx_queue;
    struct co_list cfm_queue;
    uint8_t ipc_rxdesc_idx;
    uint8_t ipc_rxbuf_idx;
    uint8_t ipc_radar_buf_idx;
    uint8_t ipc_msge2a_buf_idx;
    uint8_t ipc_dbg_buf_idx;
    uint8_t ipc_msgacke2a_cnt;
    undefined field_0x16;
    undefined field_0x17;
    uint32_t txdesc_idx;
    struct txdesc_host * txdesc;
};

typedef struct ipc_emb_env_tag.conflict5 ipc_emb_env_tag.conflict5, *Pipc_emb_env_tag.conflict5;

struct ipc_emb_env_tag.conflict5 {
    struct co_list rx_queue;
    struct co_list cfm_queue;
    uint8_t ipc_rxdesc_idx;
    uint8_t ipc_rxbuf_idx;
    uint8_t ipc_radar_buf_idx;
    uint8_t ipc_msge2a_buf_idx;
    uint8_t ipc_dbg_buf_idx;
    uint8_t ipc_msgacke2a_cnt;
    undefined field_0x16;
    undefined field_0x17;
    uint32_t txdesc_idx;
    struct txdesc_host * txdesc;
};

typedef struct ipc_emb_env_tag.conflict4 ipc_emb_env_tag.conflict4, *Pipc_emb_env_tag.conflict4;

struct ipc_emb_env_tag.conflict4 {
    struct co_list rx_queue;
    struct co_list cfm_queue;
    uint8_t ipc_rxdesc_idx;
    uint8_t ipc_rxbuf_idx;
    uint8_t ipc_radar_buf_idx;
    uint8_t ipc_msge2a_buf_idx;
    uint8_t ipc_dbg_buf_idx;
    uint8_t ipc_msgacke2a_cnt;
    undefined field_0x16;
    undefined field_0x17;
    uint32_t txdesc_idx;
    struct txdesc_host * txdesc;
};

typedef struct romapi_freertos_map romapi_freertos_map, *Promapi_freertos_map;

struct romapi_freertos_map {
    void * vApplicationIdleHook;
    void * interrupt_entry_ptr;
    void * vApplicationGetIdleTaskMemory;
    void * vApplicationStackOverflowHook;
    void * vApplicationGetTimerTaskMemory;
    void * rtos_sprintf;
    void * vApplicationMallocFailedHook;
    void * rtos_memcpy_ptr;
    void * vAssertCalled;
    void * rtos_strlen_ptr;
    void * rtos_memset_ptr;
    void * rtos_clz;
    void * exception_entry_ptr;
    void * rtos_strcpy_ptr;
    void * xISRStackTop;
};

typedef union byte_array byte_array, *Pbyte_array;

typedef uint uintptr_t;

union byte_array {
    uint8_t bytes[8];
    uintptr_t intx;
    uint64_t int64;
};

typedef struct mac_hdr_qos mac_hdr_qos, *Pmac_hdr_qos;

typedef struct mac_addr.conflict8 mac_addr.conflict8, *Pmac_addr.conflict8;

typedef struct mac_addr.conflict9 mac_addr.conflict9, *Pmac_addr.conflict9;

typedef struct mac_addr.conflict10 mac_addr.conflict10, *Pmac_addr.conflict10;

struct mac_addr.conflict10 {
    uint16_t array[3];
};

struct mac_addr.conflict8 {
    uint16_t array[3];
};

struct mac_addr.conflict9 {
    uint16_t array[3];
};

struct mac_hdr_qos {
    uint16_t fctl;
    uint16_t durid;
    struct mac_addr.conflict8 addr1;
    struct mac_addr.conflict9 addr2;
    struct mac_addr.conflict10 addr3;
    uint16_t seq;
    uint16_t qos;
};

typedef struct eth_hdr.conflict eth_hdr.conflict, *Peth_hdr.conflict;

struct eth_hdr.conflict {
    struct mac_addr.conflict da;
    struct mac_addr.conflict sa;
    uint16_t len;
};

typedef struct mac_hdr_long_qos mac_hdr_long_qos, *Pmac_hdr_long_qos;

typedef struct mac_addr.conflict11 mac_addr.conflict11, *Pmac_addr.conflict11;

typedef struct mac_addr.conflict12 mac_addr.conflict12, *Pmac_addr.conflict12;

typedef struct mac_addr.conflict13 mac_addr.conflict13, *Pmac_addr.conflict13;

typedef struct mac_addr.conflict14 mac_addr.conflict14, *Pmac_addr.conflict14;

struct mac_addr.conflict11 {
    uint16_t array[3];
};

struct mac_addr.conflict13 {
    uint16_t array[3];
};

struct mac_addr.conflict14 {
    uint16_t array[3];
};

struct mac_addr.conflict12 {
    uint16_t array[3];
};

struct mac_hdr_long_qos {
    uint16_t fctl;
    uint16_t durid;
    struct mac_addr.conflict11 addr1;
    struct mac_addr.conflict12 addr2;
    struct mac_addr.conflict13 addr3;
    uint16_t seq;
    struct mac_addr.conflict14 addr4;
    uint16_t qos;
};

typedef struct mac_hdr mac_hdr, *Pmac_hdr;

typedef struct mac_addr.conflict5 mac_addr.conflict5, *Pmac_addr.conflict5;

typedef struct mac_addr.conflict6 mac_addr.conflict6, *Pmac_addr.conflict6;

typedef struct mac_addr.conflict7 mac_addr.conflict7, *Pmac_addr.conflict7;

struct mac_addr.conflict6 {
    uint16_t array[3];
};

struct mac_addr.conflict7 {
    uint16_t array[3];
};

struct mac_addr.conflict5 {
    uint16_t array[3];
};

struct mac_hdr {
    uint16_t fctl;
    uint16_t durid;
    struct mac_addr.conflict5 addr1;
    struct mac_addr.conflict6 addr2;
    struct mac_addr.conflict7 addr3;
    uint16_t seq;
};

typedef struct bcn_frame bcn_frame, *Pbcn_frame;

struct bcn_frame {
    struct mac_hdr h;
    uint64_t tsf;
    uint16_t bcnint;
    uint16_t capa;
    uint8_t[0] variable;
};

typedef struct mac_hdr_long mac_hdr_long, *Pmac_hdr_long;

struct mac_hdr_long {
    uint16_t fctl;
    uint16_t durid;
    struct mac_addr.conflict addr1;
    struct mac_addr.conflict addr2;
    struct mac_addr.conflict addr3;
    uint16_t seq;
    struct mac_addr.conflict addr4;
};

typedef struct preq_frame preq_frame, *Ppreq_frame;

struct preq_frame {
    struct mac_hdr h;
    uint8_t[0] payload;
};

typedef struct mac_hdr_ctrl mac_hdr_ctrl, *Pmac_hdr_ctrl;

typedef struct mac_addr.conflict3 mac_addr.conflict3, *Pmac_addr.conflict3;

typedef struct mac_addr.conflict4 mac_addr.conflict4, *Pmac_addr.conflict4;

struct mac_addr.conflict4 {
    uint16_t array[3];
};

struct mac_addr.conflict3 {
    uint16_t array[3];
};

struct mac_hdr_ctrl {
    uint16_t fctl;
    uint16_t durid;
    struct mac_addr.conflict3 addr1;
    struct mac_addr.conflict4 addr2;
};

typedef enum BL_IRQ_EXCEPTION_TYPE_T {
    BL_IRQ_EXCEPTION_TYPE_ACCESS_ILLEGAL=2,
    BL_IRQ_EXCEPTION_TYPE_ILLEGAL_INSTRUCTION=3,
    BL_IRQ_EXCEPTION_TYPE_LOAD_MISALIGN=0,
    BL_IRQ_EXCEPTION_TYPE_STORE_MISALIGN=1
} BL_IRQ_EXCEPTION_TYPE_T;

typedef struct dma_env_tag dma_env_tag, *Pdma_env_tag;

struct dma_env_tag {
    struct dma_desc * last_dma[4];
};

typedef struct sm_connect_req.conflict sm_connect_req.conflict, *Psm_connect_req.conflict;

struct sm_connect_req.conflict {
    struct mac_ssid ssid;
    struct mac_addr.conflict bssid;
    struct scan_chan_tag chan;
    undefined field_0x2e;
    undefined field_0x2f;
    uint32_t flags;
    uint16_t ctrl_port_ethertype;
    uint16_t ie_len;
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t auth_type;
    uint8_t uapsd_queues;
    uint8_t vif_idx;
    undefined field_0x3e;
    undefined field_0x3f;
    uint32_t ie_buf[64];
    _Bool is_supplicant_enabled;
    uint8_t phrase[64];
    uint8_t phrase_pmk[64];
    undefined field_0x1c1;
    undefined field_0x1c2;
    undefined field_0x1c3;
};

typedef struct sm_connect_req.conflict8 sm_connect_req.conflict8, *Psm_connect_req.conflict8;

struct sm_connect_req.conflict8 {
    struct mac_ssid ssid;
    struct mac_addr.conflict171 bssid;
    struct scan_chan_tag chan;
    undefined field_0x2e;
    undefined field_0x2f;
    uint32_t flags;
    uint16_t ctrl_port_ethertype;
    uint16_t ie_len;
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t auth_type;
    uint8_t uapsd_queues;
    uint8_t vif_idx;
    undefined field_0x3e;
    undefined field_0x3f;
    uint32_t ie_buf[64];
    _Bool is_supplicant_enabled;
    uint8_t phrase[64];
    uint8_t phrase_pmk[64];
    undefined field_0x1c1;
    undefined field_0x1c2;
    undefined field_0x1c3;
};

typedef struct sm_connect_req.conflict5 sm_connect_req.conflict5, *Psm_connect_req.conflict5;

struct sm_connect_req.conflict5 {
    struct mac_ssid ssid;
    struct mac_addr.conflict171 bssid;
    struct scan_chan_tag chan;
    undefined field_0x2e;
    undefined field_0x2f;
    uint32_t flags;
    uint16_t ctrl_port_ethertype;
    uint16_t ie_len;
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t auth_type;
    uint8_t uapsd_queues;
    uint8_t vif_idx;
    undefined field_0x3e;
    undefined field_0x3f;
    uint32_t ie_buf[64];
    _Bool is_supplicant_enabled;
    uint8_t phrase[64];
    uint8_t phrase_pmk[64];
    undefined field_0x1c1;
    undefined field_0x1c2;
    undefined field_0x1c3;
};

typedef struct sm_connect_req.conflict4 sm_connect_req.conflict4, *Psm_connect_req.conflict4;

struct sm_connect_req.conflict4 {
    struct mac_ssid ssid;
    struct mac_addr.conflict171 bssid;
    struct scan_chan_tag chan;
    undefined field_0x2e;
    undefined field_0x2f;
    uint32_t flags;
    uint16_t ctrl_port_ethertype;
    uint16_t ie_len;
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t auth_type;
    uint8_t uapsd_queues;
    uint8_t vif_idx;
    undefined field_0x3e;
    undefined field_0x3f;
    uint32_t ie_buf[64];
    _Bool is_supplicant_enabled;
    uint8_t phrase[64];
    uint8_t phrase_pmk[64];
    undefined field_0x1c1;
    undefined field_0x1c2;
    undefined field_0x1c3;
};

typedef struct sm_connect_req.conflict7 sm_connect_req.conflict7, *Psm_connect_req.conflict7;

struct sm_connect_req.conflict7 {
    struct mac_ssid ssid;
    struct mac_addr.conflict171 bssid;
    struct scan_chan_tag chan;
    undefined field_0x2e;
    undefined field_0x2f;
    uint32_t flags;
    uint16_t ctrl_port_ethertype;
    uint16_t ie_len;
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t auth_type;
    uint8_t uapsd_queues;
    uint8_t vif_idx;
    undefined field_0x3e;
    undefined field_0x3f;
    uint32_t ie_buf[64];
    _Bool is_supplicant_enabled;
    uint8_t phrase[64];
    uint8_t phrase_pmk[64];
    undefined field_0x1c1;
    undefined field_0x1c2;
    undefined field_0x1c3;
};

typedef struct sm_connect_req.conflict6 sm_connect_req.conflict6, *Psm_connect_req.conflict6;

struct sm_connect_req.conflict6 {
    struct mac_ssid ssid;
    struct mac_addr.conflict171 bssid;
    struct scan_chan_tag chan;
    undefined field_0x2e;
    undefined field_0x2f;
    uint32_t flags;
    uint16_t ctrl_port_ethertype;
    uint16_t ie_len;
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t auth_type;
    uint8_t uapsd_queues;
    uint8_t vif_idx;
    undefined field_0x3e;
    undefined field_0x3f;
    uint32_t ie_buf[64];
    _Bool is_supplicant_enabled;
    uint8_t phrase[64];
    uint8_t phrase_pmk[64];
    undefined field_0x1c1;
    undefined field_0x1c2;
    undefined field_0x1c3;
};

typedef struct sm_connect_req.conflict1 sm_connect_req.conflict1, *Psm_connect_req.conflict1;

typedef struct mac_addr.conflict57 mac_addr.conflict57, *Pmac_addr.conflict57;

struct mac_addr.conflict57 {
    uint16_t array[3];
};

struct sm_connect_req.conflict1 {
    struct mac_ssid ssid;
    struct mac_addr.conflict57 bssid;
    struct scan_chan_tag chan;
    undefined field_0x2e;
    undefined field_0x2f;
    uint32_t flags;
    uint16_t ctrl_port_ethertype;
    uint16_t ie_len;
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t auth_type;
    uint8_t uapsd_queues;
    uint8_t vif_idx;
    undefined field_0x3e;
    undefined field_0x3f;
    uint32_t ie_buf[64];
    _Bool is_supplicant_enabled;
    uint8_t phrase[64];
    uint8_t phrase_pmk[64];
    undefined field_0x1c1;
    undefined field_0x1c2;
    undefined field_0x1c3;
};

typedef struct sm_connect_req.conflict3 sm_connect_req.conflict3, *Psm_connect_req.conflict3;

typedef struct mac_addr.conflict98 mac_addr.conflict98, *Pmac_addr.conflict98;

struct mac_addr.conflict98 {
    uint16_t array[3];
};

struct sm_connect_req.conflict3 {
    struct mac_ssid ssid;
    struct mac_addr.conflict98 bssid;
    struct scan_chan_tag chan;
    undefined field_0x2e;
    undefined field_0x2f;
    uint32_t flags;
    uint16_t ctrl_port_ethertype;
    uint16_t ie_len;
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t auth_type;
    uint8_t uapsd_queues;
    uint8_t vif_idx;
    undefined field_0x3e;
    undefined field_0x3f;
    uint32_t ie_buf[64];
    _Bool is_supplicant_enabled;
    uint8_t phrase[64];
    uint8_t phrase_pmk[64];
    undefined field_0x1c1;
    undefined field_0x1c2;
    undefined field_0x1c3;
};

typedef struct sm_connect_req.conflict2 sm_connect_req.conflict2, *Psm_connect_req.conflict2;

typedef struct mac_addr.conflict58 mac_addr.conflict58, *Pmac_addr.conflict58;

struct mac_addr.conflict58 {
    uint16_t array[3];
};

struct sm_connect_req.conflict2 {
    struct mac_ssid ssid;
    struct mac_addr.conflict58 bssid;
    struct scan_chan_tag chan;
    undefined field_0x2e;
    undefined field_0x2f;
    uint32_t flags;
    uint16_t ctrl_port_ethertype;
    uint16_t ie_len;
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t auth_type;
    uint8_t uapsd_queues;
    uint8_t vif_idx;
    undefined field_0x3e;
    undefined field_0x3f;
    uint32_t ie_buf[64];
    _Bool is_supplicant_enabled;
    uint8_t phrase[64];
    uint8_t phrase_pmk[64];
    undefined field_0x1c1;
    undefined field_0x1c2;
    undefined field_0x1c3;
};

typedef struct sm_connect_ind.conflict sm_connect_ind.conflict, *Psm_connect_ind.conflict;

struct sm_connect_ind.conflict {
    uint16_t status_code;
    struct mac_addr.conflict bssid;
    _Bool roamed;
    uint8_t vif_idx;
    uint8_t ap_idx;
    uint8_t ch_idx;
    _Bool qos;
    uint8_t acm;
    uint16_t assoc_req_ie_len;
    uint16_t assoc_rsp_ie_len;
    undefined field_0x12;
    undefined field_0x13;
    uint32_t assoc_ie_buf[200];
    uint16_t aid;
    uint8_t band;
    undefined field_0x337;
    uint16_t center_freq;
    uint8_t width;
    undefined field_0x33b;
    uint32_t center_freq1;
    uint32_t center_freq2;
    uint32_t ac_param[4];
};

typedef enum sm_state_tag {
    SM_ACTIVATING=7,
    SM_ASSOCIATING=6,
    SM_AUTHENTICATING=5,
    SM_BSS_PARAM_SETTING=4,
    SM_DISCONNECTING=8,
    SM_IDLE=0,
    SM_JOINING=2,
    SM_SCANNING=1,
    SM_STATE_MAX=9,
    SM_STA_ADDING=3
} sm_state_tag;

typedef struct sm_connect_ind.conflict1 sm_connect_ind.conflict1, *Psm_connect_ind.conflict1;

typedef struct mac_addr.conflict59 mac_addr.conflict59, *Pmac_addr.conflict59;

struct mac_addr.conflict59 {
    uint16_t array[3];
};

struct sm_connect_ind.conflict1 {
    uint16_t status_code;
    struct mac_addr.conflict59 bssid;
    _Bool roamed;
    uint8_t vif_idx;
    uint8_t ap_idx;
    uint8_t ch_idx;
    _Bool qos;
    uint8_t acm;
    uint16_t assoc_req_ie_len;
    uint16_t assoc_rsp_ie_len;
    undefined field_0x12;
    undefined field_0x13;
    uint32_t assoc_ie_buf[200];
    uint16_t aid;
    uint8_t band;
    undefined field_0x337;
    uint16_t center_freq;
    uint8_t width;
    undefined field_0x33b;
    uint32_t center_freq1;
    uint32_t center_freq2;
    uint32_t ac_param[4];
};

typedef struct sm_connect_ind.conflict2 sm_connect_ind.conflict2, *Psm_connect_ind.conflict2;

typedef struct mac_addr.conflict99 mac_addr.conflict99, *Pmac_addr.conflict99;

struct mac_addr.conflict99 {
    uint16_t array[3];
};

struct sm_connect_ind.conflict2 {
    uint16_t status_code;
    struct mac_addr.conflict99 bssid;
    _Bool roamed;
    uint8_t vif_idx;
    uint8_t ap_idx;
    uint8_t ch_idx;
    _Bool qos;
    uint8_t acm;
    uint16_t assoc_req_ie_len;
    uint16_t assoc_rsp_ie_len;
    undefined field_0x12;
    undefined field_0x13;
    uint32_t assoc_ie_buf[200];
    uint16_t aid;
    uint8_t band;
    undefined field_0x337;
    uint16_t center_freq;
    uint8_t width;
    undefined field_0x33b;
    uint32_t center_freq1;
    uint32_t center_freq2;
    uint32_t ac_param[4];
};

typedef struct mm_csa_counter_ind mm_csa_counter_ind, *Pmm_csa_counter_ind;

struct mm_csa_counter_ind {
    uint8_t vif_index;
    uint8_t csa_count;
};

typedef struct mm_set_edca_req mm_set_edca_req, *Pmm_set_edca_req;

struct mm_set_edca_req {
    uint32_t ac_param;
    _Bool uapsd;
    uint8_t hw_queue;
    uint8_t inst_nbr;
    undefined field_0x7;
};

typedef struct mm_remain_on_channel_req mm_remain_on_channel_req, *Pmm_remain_on_channel_req;

struct mm_remain_on_channel_req {
    uint8_t op_code;
    uint8_t vif_index;
    uint8_t band;
    uint8_t type;
    uint16_t prim20_freq;
    uint16_t center1_freq;
    uint16_t center2_freq;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t duration_ms;
    int8_t tx_power;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
};

typedef struct mm_force_idle_req mm_force_idle_req, *Pmm_force_idle_req;

struct mm_force_idle_req {
    void (* cb)(void);
};

typedef struct mm_set_bssid_req mm_set_bssid_req, *Pmm_set_bssid_req;

struct mm_set_bssid_req {
    struct mac_addr.conflict bssid;
    uint8_t inst_nbr;
};

typedef struct mm_key_add_cfm mm_key_add_cfm, *Pmm_key_add_cfm;

struct mm_key_add_cfm {
    uint8_t status;
    uint8_t hw_key_idx;
};

typedef struct mm_remain_on_channel_cfm mm_remain_on_channel_cfm, *Pmm_remain_on_channel_cfm;

struct mm_remain_on_channel_cfm {
    uint8_t op_code;
    uint8_t status;
    uint8_t chan_ctxt_index;
};

typedef struct mm_tim_update_req mm_tim_update_req, *Pmm_tim_update_req;

struct mm_tim_update_req {
    uint16_t aid;
    uint8_t tx_avail;
    uint8_t inst_nbr;
};

typedef struct mm_sta_del_req mm_sta_del_req, *Pmm_sta_del_req;

struct mm_sta_del_req {
    uint8_t sta_idx;
};

typedef struct mm_set_filter_req mm_set_filter_req, *Pmm_set_filter_req;

struct mm_set_filter_req {
    uint32_t filter;
};

typedef struct mm_key_add_req mm_key_add_req, *Pmm_key_add_req;

typedef struct mac_sec_key mac_sec_key, *Pmac_sec_key;

struct mac_sec_key {
    uint8_t length;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    uint32_t array[8];
};

struct mm_key_add_req {
    uint8_t key_idx;
    uint8_t sta_idx;
    undefined field_0x2;
    undefined field_0x3;
    struct mac_sec_key key;
    uint8_t cipher_suite;
    uint8_t inst_nbr;
    uint8_t spp;
    _Bool pairwise;
};

typedef struct mm_sta_add_req mm_sta_add_req, *Pmm_sta_add_req;

struct mm_sta_add_req {
    uint32_t ampdu_size_max_vht;
    uint32_t paid_gid;
    uint16_t ampdu_size_max_ht;
    struct mac_addr.conflict mac_addr;
    uint8_t ampdu_spacing_min;
    uint8_t inst_nbr;
    _Bool tdls_sta;
    int8_t rssi;
    uint32_t tsflo;
    uint32_t tsfhi;
    uint8_t data_rate;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
};

typedef struct mm_set_power_cfm mm_set_power_cfm, *Pmm_set_power_cfm;

struct mm_set_power_cfm {
    uint8_t radio_idx;
    int8_t power;
};

typedef struct mm_set_vif_state_req mm_set_vif_state_req, *Pmm_set_vif_state_req;

struct mm_set_vif_state_req {
    uint16_t aid;
    _Bool active;
    uint8_t inst_nbr;
};

typedef struct mm_set_mode_req mm_set_mode_req, *Pmm_set_mode_req;

struct mm_set_mode_req {
    uint8_t abgnmode;
};

typedef struct mm_chan_ctxt_update_req mm_chan_ctxt_update_req, *Pmm_chan_ctxt_update_req;

struct mm_chan_ctxt_update_req {
    uint8_t chan_index;
    uint8_t band;
    uint8_t type;
    undefined field_0x3;
    uint16_t prim20_freq;
    uint16_t center1_freq;
    uint16_t center2_freq;
    int8_t tx_power;
    undefined field_0xb;
};

typedef enum mm_remain_on_channel_op {
    MM_ROC_OP_CANCEL=1,
    MM_ROC_OP_MAX=2,
    MM_ROC_OP_START=0
} mm_remain_on_channel_op;

typedef struct mm_cfg_rssi_req mm_cfg_rssi_req, *Pmm_cfg_rssi_req;

struct mm_cfg_rssi_req {
    uint8_t vif_index;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
};

typedef struct mm_set_beacon_int_req mm_set_beacon_int_req, *Pmm_set_beacon_int_req;

struct mm_set_beacon_int_req {
    uint16_t beacon_int;
    uint8_t inst_nbr;
    undefined field_0x3;
};

typedef struct mm_traffic_req_ind mm_traffic_req_ind, *Pmm_traffic_req_ind;

struct mm_traffic_req_ind {
    uint8_t sta_idx;
    uint8_t pkt_cnt;
    _Bool uapsd;
};

typedef struct mm_set_ps_options_req mm_set_ps_options_req, *Pmm_set_ps_options_req;

struct mm_set_ps_options_req {
    uint8_t vif_index;
    undefined field_0x1;
    uint16_t listen_interval;
    _Bool dont_listen_bc_mc;
    undefined field_0x5;
};

typedef struct mm_set_power_req mm_set_power_req, *Pmm_set_power_req;

struct mm_set_power_req {
    uint8_t inst_nbr;
    int8_t power;
};

typedef struct mm_connection_loss_ind mm_connection_loss_ind, *Pmm_connection_loss_ind;

struct mm_connection_loss_ind {
    uint8_t inst_nbr;
};

typedef struct mm_set_dtim_req mm_set_dtim_req, *Pmm_set_dtim_req;

struct mm_set_dtim_req {
    uint8_t dtim_period;
};

typedef struct mm_bcn_change_req mm_bcn_change_req, *Pmm_bcn_change_req;

struct mm_bcn_change_req {
    uint32_t bcn_ptr;
    uint16_t bcn_len;
    uint16_t tim_oft;
    uint8_t tim_len;
    uint8_t inst_nbr;
    uint8_t csa_oft[2];
    uint8_t[0] bcn_buf;
};

typedef struct mm_key_del_req mm_key_del_req, *Pmm_key_del_req;

struct mm_key_del_req {
    uint8_t hw_key_idx;
};

typedef struct mm_ba_add_req mm_ba_add_req, *Pmm_ba_add_req;

struct mm_ba_add_req {
    uint8_t type;
    uint8_t sta_idx;
    uint8_t tid;
    uint8_t bufsz;
    uint16_t ssn;
};

typedef struct mm_chan_ctxt_add_req mm_chan_ctxt_add_req, *Pmm_chan_ctxt_add_req;

struct mm_chan_ctxt_add_req {
    uint8_t band;
    uint8_t type;
    uint16_t prim20_freq;
    uint16_t center1_freq;
    uint16_t center2_freq;
    int8_t tx_power;
    undefined field_0x9;
};

typedef struct mm_csa_finish_ind mm_csa_finish_ind, *Pmm_csa_finish_ind;

struct mm_csa_finish_ind {
    uint8_t vif_index;
    uint8_t status;
    uint8_t chan_idx;
};

typedef struct mm_csa_traffic_ind mm_csa_traffic_ind, *Pmm_csa_traffic_ind;

struct mm_csa_traffic_ind {
    uint8_t vif_index;
    _Bool enable;
};

typedef struct mm_set_basic_rates_req mm_set_basic_rates_req, *Pmm_set_basic_rates_req;

struct mm_set_basic_rates_req {
    uint32_t rates;
    uint8_t inst_nbr;
    uint8_t band;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct mm_set_slottime_req mm_set_slottime_req, *Pmm_set_slottime_req;

struct mm_set_slottime_req {
    uint8_t slottime;
};

typedef struct mm_set_idle_req mm_set_idle_req, *Pmm_set_idle_req;

struct mm_set_idle_req {
    uint8_t hw_idle;
};

typedef struct mm_sta_add_cfm mm_sta_add_cfm, *Pmm_sta_add_cfm;

struct mm_sta_add_cfm {
    uint8_t status;
    uint8_t sta_idx;
    uint8_t hw_sta_idx;
};

typedef struct mm_ba_add_cfm mm_ba_add_cfm, *Pmm_ba_add_cfm;

struct mm_ba_add_cfm {
    uint8_t sta_idx;
    uint8_t tid;
    uint8_t status;
};

typedef enum mm_msg_tag.conflict {
    MM_ADD_IF_CFM=7,
    MM_ADD_IF_REQ=6,
    MM_BA_ADD_CFM=41,
    MM_BA_ADD_REQ=40,
    MM_BA_DEL_CFM=43,
    MM_BA_DEL_REQ=42,
    MM_BCN_CHANGE_CFM=64,
    MM_BCN_CHANGE_REQ=63,
    MM_BFMER_ENABLE_REQ=80,
    MM_CFG_RSSI_REQ=86,
    MM_CHANNEL_PRE_SWITCH_IND=69,
    MM_CHANNEL_SURVEY_IND=79,
    MM_CHANNEL_SWITCH_IND=68,
    MM_CHAN_CTXT_ADD_CFM=52,
    MM_CHAN_CTXT_ADD_REQ=51,
    MM_CHAN_CTXT_DEL_CFM=54,
    MM_CHAN_CTXT_DEL_REQ=53,
    MM_CHAN_CTXT_LINK_CFM=56,
    MM_CHAN_CTXT_LINK_REQ=55,
    MM_CHAN_CTXT_SCHED_CFM=62,
    MM_CHAN_CTXT_SCHED_REQ=61,
    MM_CHAN_CTXT_UNLINK_CFM=58,
    MM_CHAN_CTXT_UNLINK_REQ=57,
    MM_CHAN_CTXT_UPDATE_CFM=60,
    MM_CHAN_CTXT_UPDATE_REQ=59,
    MM_CONNECTION_LOSS_IND=67,
    MM_CSA_COUNTER_IND=78,
    MM_CSA_FINISH_IND=88,
    MM_CSA_TRAFFIC_IND=89,
    MM_DENOISE_REQ=48,
    MM_FORCE_IDLE_REQ=96,
    MM_KEY_ADD_CFM=37,
    MM_KEY_ADD_REQ=36,
    MM_KEY_DEL_CFM=39,
    MM_KEY_DEL_REQ=38,
    MM_MAX=99,
    MM_MONITOR_CFM=93,
    MM_MONITOR_CHANNEL_CFM=95,
    MM_MONITOR_CHANNEL_REQ=94,
    MM_MONITOR_REQ=92,
    MM_MU_GROUP_UPDATE_CFM=91,
    MM_MU_GROUP_UPDATE_REQ=90,
    MM_P2P_NOA_UPD_IND=85,
    MM_P2P_VIF_PS_CHANGE_IND=77,
    MM_PRIMARY_TBTT_IND=44,
    MM_PS_CHANGE_IND=73,
    MM_REMAIN_ON_CHANNEL_CFM=71,
    MM_REMAIN_ON_CHANNEL_EXP_IND=72,
    MM_REMAIN_ON_CHANNEL_REQ=70,
    MM_REMOVE_IF_CFM=9,
    MM_REMOVE_IF_REQ=8,
    MM_RESET_CFM=1,
    MM_RESET_REQ=0,
    MM_RSSI_STATUS_IND=87,
    MM_SCAN_CHANNEL_END_IND=98,
    MM_SCAN_CHANNEL_START_IND=97,
    MM_SECONDARY_TBTT_IND=45,
    MM_SET_BASIC_RATES_CFM=23,
    MM_SET_BASIC_RATES_REQ=22,
    MM_SET_BEACON_INT_CFM=21,
    MM_SET_BEACON_INT_REQ=20,
    MM_SET_BSSID_CFM=25,
    MM_SET_BSSID_REQ=24,
    MM_SET_CHANNEL_CFM=17,
    MM_SET_CHANNEL_REQ=16,
    MM_SET_DTIM_CFM=19,
    MM_SET_DTIM_REQ=18,
    MM_SET_EDCA_CFM=27,
    MM_SET_EDCA_REQ=26,
    MM_SET_FILTER_CFM=15,
    MM_SET_FILTER_REQ=14,
    MM_SET_IDLE_CFM=35,
    MM_SET_IDLE_REQ=34,
    MM_SET_MODE_CFM=29,
    MM_SET_MODE_REQ=28,
    MM_SET_P2P_NOA_CFM=83,
    MM_SET_P2P_NOA_REQ=81,
    MM_SET_P2P_OPPPS_CFM=84,
    MM_SET_P2P_OPPPS_REQ=82,
    MM_SET_POWER_CFM=47,
    MM_SET_POWER_REQ=46,
    MM_SET_PS_MODE_CFM=50,
    MM_SET_PS_MODE_REQ=49,
    MM_SET_PS_OPTIONS_CFM=76,
    MM_SET_PS_OPTIONS_REQ=75,
    MM_SET_SLOTTIME_CFM=33,
    MM_SET_SLOTTIME_REQ=32,
    MM_SET_VIF_STATE_CFM=31,
    MM_SET_VIF_STATE_REQ=30,
    MM_START_CFM=3,
    MM_START_REQ=2,
    MM_STA_ADD_CFM=11,
    MM_STA_ADD_REQ=10,
    MM_STA_DEL_CFM=13,
    MM_STA_DEL_REQ=12,
    MM_TIM_UPDATE_CFM=66,
    MM_TIM_UPDATE_REQ=65,
    MM_TRAFFIC_REQ_IND=74,
    MM_VERSION_CFM=5,
    MM_VERSION_REQ=4
} mm_msg_tag.conflict;

typedef struct mm_ps_change_ind mm_ps_change_ind, *Pmm_ps_change_ind;

struct mm_ps_change_ind {
    uint8_t sta_idx;
    uint8_t ps_state;
};

typedef struct mm_add_if_req.conflict mm_add_if_req.conflict, *Pmm_add_if_req.conflict;

struct mm_add_if_req.conflict {
    uint8_t type;
    struct mac_addr.conflict addr;
    _Bool p2p;
};

typedef enum mm_state_tag {
    MM_ACTIVE=1,
    MM_GOING_TO_IDLE=2,
    MM_HOST_BYPASSED=3,
    MM_IDLE=0,
    MM_STATE_MAX=4
} mm_state_tag;

typedef struct xLIST List_t;

typedef struct list_head list_head, *Plist_head;

struct list_head {
    struct list_head * next;
    struct list_head * prev;
};

typedef struct dlist_s dlist_s, *Pdlist_s;

typedef struct dlist_s dlist_t;

struct dlist_s {
    struct dlist_s * prev;
    struct dlist_s * next;
};

typedef __gnuc_va_list va_list;

typedef struct hal_dma_env_tag hal_dma_env_tag, *Phal_dma_env_tag;

struct hal_dma_env_tag {
    struct co_list prog[2];
    struct co_list free_gp_dma_descs;
    uint16_t lli_cnt[2];
};

typedef struct dns_hdr dns_hdr, *Pdns_hdr;

struct dns_hdr {
    u16_t id;
    u8_t flags1;
    u8_t flags2;
    u16_t numquestions;
    u16_t numanswers;
    u16_t numauthrr;
    u16_t numextrarr;
};

typedef enum lwip_ieee_eth_type {
    ETHTYPE_ARP=2054,
    ETHTYPE_ETHERCAT=-30556,
    ETHTYPE_IP=2048,
    ETHTYPE_IPV6=-31011,
    ETHTYPE_JUMBO=-30608,
    ETHTYPE_LLDP=-30516,
    ETHTYPE_MRP=-30493,
    ETHTYPE_PPPOE=-30620,
    ETHTYPE_PPPOEDISC=-30621,
    ETHTYPE_PROFINET=-30574,
    ETHTYPE_PTP=-30473,
    ETHTYPE_QINQ=-28416,
    ETHTYPE_RARP=-32715,
    ETHTYPE_SERCOS=-30515,
    ETHTYPE_VLAN=-32512,
    ETHTYPE_WOL=2114
} lwip_ieee_eth_type;

typedef struct dns_table_entry.conflict dns_table_entry.conflict, *Pdns_table_entry.conflict;

struct dns_table_entry.conflict {
    u32_t ttl;
    ip_addr_t ipaddr;
    u16_t txid;
    u8_t state;
    u8_t server_idx;
    u8_t tmr;
    u8_t retries;
    u8_t seqno;
    char name[256];
    undefined field_0x10f;
};

typedef struct dns_req_entry dns_req_entry, *Pdns_req_entry;

struct dns_req_entry {
    void (* found)(char *, ip_addr_t *, void *);
    void * arg;
};

typedef struct dns_query dns_query, *Pdns_query;

struct dns_query {
    u16_t type;
    u16_t cls;
};

typedef struct dns_answer dns_answer, *Pdns_answer;

struct dns_answer {
    u16_t type;
    u16_t cls;
    u32_t ttl;
    u16_t len;
    undefined field_0xa;
    undefined field_0xb;
};

typedef struct bt_hci_cp_vs_set_tx_pwr bt_hci_cp_vs_set_tx_pwr, *Pbt_hci_cp_vs_set_tx_pwr;

struct bt_hci_cp_vs_set_tx_pwr {
    int8_t power;
};

typedef struct memp memp, *Pmemp;

struct memp {
    struct memp * next;
};

typedef struct memp_desc memp_desc, *Pmemp_desc;

struct memp_desc {
    struct stats_mem * stats;
    u16_t size;
    u16_t num;
    u8_t * base;
    struct memp * * tab;
};

typedef struct __sFILE __sFILE, *P__sFILE;

typedef struct _reent _reent, *P_reent;

typedef long _fpos_t;

typedef struct __sFILE __FILE;

typedef struct __sbuf __sbuf, *P__sbuf;

typedef struct __locale_t __locale_t, *P__locale_t;

typedef struct _Bigint _Bigint, *P_Bigint;

typedef union anon_union_for__new anon_union_for__new, *Panon_union_for__new;

typedef struct _atexit _atexit, *P_atexit;

typedef struct _glue _glue, *P_glue;

typedef long _off_t;

typedef int _LOCK_RECURSIVE_T;

typedef _LOCK_RECURSIVE_T _flock_t;

typedef struct _mbstate_t _mbstate_t, *P_mbstate_t;

typedef ulong __ULong;

typedef struct anon_struct anon_struct, *Panon_struct;

typedef struct anon_struct.conflict anon_struct.conflict, *Panon_struct.conflict;

typedef struct _on_exit_args _on_exit_args, *P_on_exit_args;

typedef union anon_union_for___value anon_union_for___value, *Panon_union_for___value;

typedef struct __tm __tm, *P__tm;

typedef struct _rand48 _rand48, *P_rand48;

typedef uint wint_t;

struct __tm {
    int __tm_sec;
    int __tm_min;
    int __tm_hour;
    int __tm_mday;
    int __tm_mon;
    int __tm_year;
    int __tm_wday;
    int __tm_yday;
    int __tm_isdst;
};

struct _rand48 {
    ushort _seed[3];
    ushort _mult[3];
    ushort _add;
};

union anon_union_for___value {
    wint_t __wch;
    uchar __wchb[4];
};

struct _mbstate_t {
    int __count;
    union anon_union_for___value __value;
};

struct anon_struct {
    uint _unused_rand;
    char * _strtok_last;
    char _asctime_buf[26];
    undefined field_0x22;
    undefined field_0x23;
    struct __tm _localtime_buf;
    int _gamma_signgam;
    undefined field_0x4c;
    undefined field_0x4d;
    undefined field_0x4e;
    undefined field_0x4f;
    ulonglong _rand_next;
    struct _rand48 _r48;
    undefined field_0x66;
    undefined field_0x67;
    struct _mbstate_t _mblen_state;
    struct _mbstate_t _mbtowc_state;
    struct _mbstate_t _wctomb_state;
    char _l64a_buf[8];
    char _signal_buf[24];
    int _getdate_err;
    struct _mbstate_t _mbrlen_state;
    struct _mbstate_t _mbrtowc_state;
    struct _mbstate_t _mbsrtowcs_state;
    struct _mbstate_t _wcrtomb_state;
    struct _mbstate_t _wcsrtombs_state;
    int _h_errno;
};

struct anon_struct.conflict {
    uchar * _nextf[30];
    uint _nmalloc[30];
};

union anon_union_for__new {
    struct anon_struct _reent;
    struct anon_struct.conflict _unused;
};

struct _Bigint {
    struct _Bigint * _next;
    int _k;
    int _maxwds;
    int _sign;
    int _wds;
    __ULong _x[1];
};

struct _glue {
    struct _glue * _next;
    int _niobs;
    __FILE * _iobs;
};

struct __sbuf {
    uchar * _base;
    int _size;
};

struct __sFILE {
    uchar * _p;
    int _r;
    int _w;
    short _flags;
    short _file;
    struct __sbuf _bf;
    int _lbfsize;
    void * _cookie;
    _ssize_t (* _read)(struct _reent *, void *, char *, int);
    _ssize_t (* _write)(struct _reent *, void *, char *, int);
    _fpos_t (* _seek)(struct _reent *, void *, _fpos_t, int);
    int (* _close)(struct _reent *, void *);
    struct __sbuf _ub;
    uchar * _up;
    int _ur;
    uchar _ubuf[3];
    uchar _nbuf[1];
    struct __sbuf _lb;
    int _blksize;
    _off_t _offset;
    struct _reent * _data;
    _flock_t _lock;
    struct _mbstate_t _mbstate;
    int _flags2;
};

struct _on_exit_args {
    void * _fnargs[32];
    void * _dso_handle[32];
    __ULong _fntypes;
    __ULong _is_cxa;
};

struct _atexit {
    struct _atexit * _next;
    int _ind;
    void (* _fns[32])(void);
    struct _on_exit_args _on_exit_args;
};

struct _reent {
    int _errno;
    __FILE * _stdin;
    __FILE * _stdout;
    __FILE * _stderr;
    int _inc;
    char _emergency[25];
    undefined field_0x2d;
    undefined field_0x2e;
    undefined field_0x2f;
    int _unspecified_locale_info;
    struct __locale_t * _locale;
    int __sdidinit;
    void (* __cleanup)(struct _reent *);
    struct _Bigint * _result;
    int _result_k;
    struct _Bigint * _p5s;
    struct _Bigint * * _freelist;
    int _cvtlen;
    char * _cvtbuf;
    union anon_union_for__new _new;
    struct _atexit * _atexit;
    struct _atexit _atexit0;
    void (** _sig_func)(int);
    struct _glue __sglue;
    __FILE __sf[3];
    undefined field_0x424;
    undefined field_0x425;
    undefined field_0x426;
    undefined field_0x427;
};

struct __locale_t {
};

typedef union anon_union.conflict anon_union.conflict, *Panon_union.conflict;

union anon_union.conflict {
    struct anon_struct _reent;
    struct anon_struct.conflict _unused;
};

typedef struct _atexit.conflict _atexit.conflict, *P_atexit.conflict;

struct _atexit.conflict {
    struct _atexit * _next;
    int _ind;
    void (* _fns[32])(void);
    struct _on_exit_args _on_exit_args;
};

typedef struct _reent.conflict _reent.conflict, *P_reent.conflict;

struct _reent.conflict {
    int _errno;
    __FILE * _stdin;
    __FILE * _stdout;
    __FILE * _stderr;
    int _inc;
    char _emergency[25];
    undefined field_0x2d;
    undefined field_0x2e;
    undefined field_0x2f;
    int _unspecified_locale_info;
    struct __locale_t * _locale;
    int __sdidinit;
    void (* __cleanup)(struct _reent *);
    struct _Bigint * _result;
    int _result_k;
    struct _Bigint * _p5s;
    struct _Bigint * * _freelist;
    int _cvtlen;
    char * _cvtbuf;
    union anon_union_for__new _new;
    struct _atexit * _atexit;
    struct _atexit.conflict _atexit0;
    void (** _sig_func)(int);
    struct _glue __sglue;
    __FILE __sf[3];
    undefined field_0x424;
    undefined field_0x425;
    undefined field_0x426;
    undefined field_0x427;
};

typedef enum hal_uart_flow_control_t {
    FLOW_CONTROL_CTS=1,
    FLOW_CONTROL_CTS_RTS=3,
    FLOW_CONTROL_DISABLED=0,
    FLOW_CONTROL_RTS=2
} hal_uart_flow_control_t;

typedef enum hal_uart_mode_t {
    MODE_RX=1,
    MODE_TX=0,
    MODE_TX_RX=2
} hal_uart_mode_t;

typedef enum hal_uart_stop_bits_t {
    STOP_BITS_1=0,
    STOP_BITS_2=1
} hal_uart_stop_bits_t;

typedef struct uart_dev_t uart_dev_t, *Puart_dev_t;

typedef struct uart_config_t uart_config_t, *Puart_config_t;

typedef enum hal_uart_data_width_t {
    DATA_WIDTH_5BIT=0,
    DATA_WIDTH_6BIT=1,
    DATA_WIDTH_7BIT=2,
    DATA_WIDTH_8BIT=3,
    DATA_WIDTH_9BIT=4
} hal_uart_data_width_t;

typedef enum hal_uart_parity_t {
    EVEN_PARITY=2,
    NO_PARITY=0,
    ODD_PARITY=1
} hal_uart_parity_t;

struct uart_config_t {
    uint32_t baud_rate;
    enum hal_uart_data_width_t data_width;
    enum hal_uart_parity_t parity;
    enum hal_uart_stop_bits_t stop_bits;
    enum hal_uart_flow_control_t flow_control;
    enum hal_uart_mode_t mode;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
};

struct uart_dev_t {
    uint8_t port;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    struct uart_config_t config;
    void * rx_ringbuf_handle;
    void * tx_ringbuf_handle;
    uint32_t rx_buf_size;
    uint32_t tx_buf_size;
    void * mutex;
    void * poll_cb;
    void * fd;
    void * poll_data;
    void * taskhdl;
    uint8_t read_block_flag;
    undefined field_0x35;
    undefined field_0x36;
    undefined field_0x37;
    void * priv;
};

typedef enum hal_uart_int_t {
    UART_RX_INT=1,
    UART_TX_INT=0
} hal_uart_int_t;

typedef struct etharp_hdr etharp_hdr, *Petharp_hdr;

typedef struct eth_addr eth_addr, *Peth_addr;

typedef struct ip4_addr_wordaligned ip4_addr_wordaligned, *Pip4_addr_wordaligned;

struct eth_addr {
    u8_t addr[6];
};

struct ip4_addr_wordaligned {
    u16_t addrw[2];
};

struct etharp_hdr {
    u16_t hwtype;
    u16_t proto;
    u8_t hwlen;
    u8_t protolen;
    u16_t opcode;
    struct eth_addr shwaddr;
    struct ip4_addr_wordaligned sipaddr;
    struct eth_addr dhwaddr;
    struct ip4_addr_wordaligned dipaddr;
};

typedef enum etharp_opcode {
    ARP_REPLY=2,
    ARP_REQUEST=1
} etharp_opcode;

typedef struct bl_dma_item bl_dma_item, *Pbl_dma_item;

typedef struct utils_list_hdr utils_list_hdr, *Putils_list_hdr;

struct utils_list_hdr {
    struct utils_list_hdr * next;
};

struct bl_dma_item {
    struct utils_list_hdr item;
    void (* cb)(void *);
    void * arg;
    uint32_t src;
    uint32_t dst;
    uint32_t next;
    uint32_t ctrl;
};

typedef struct dma_ctx dma_ctx, *Pdma_ctx;

typedef struct utils_dlist_s utils_dlist_s, *Putils_dlist_s;

typedef struct utils_dlist_s utils_dlist_t;

struct utils_dlist_s {
    struct utils_dlist_s * prev;
    struct utils_dlist_s * next;
};

struct dma_ctx {
    utils_dlist_t * pstqueue;
};

typedef struct dma_node dma_node, *Pdma_node;

struct dma_node {
    utils_dlist_t dlist_item;
    int channel;
    void * tc_handler;
    void * interr_handler;
    void * ctx;
};

typedef struct aos_dir_t aos_dir_t, *Paos_dir_t;

struct aos_dir_t {
    int dd_vfs_fd;
    int dd_rsv;
};

typedef struct aos_dirent_t aos_dirent_t, *Paos_dirent_t;

struct aos_dirent_t { // Missing member d_name : char[1] at offset 0x5 [Unsupported interior flex array: char[1]]
    int d_ino;
    uint8_t d_type;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct statfs statfs, *Pstatfs;

struct statfs {
    long f_type;
    long f_bsize;
    long f_blocks;
    long f_bfree;
    long f_bavail;
    long f_files;
    long f_ffree;
    long f_fsid;
    long f_namelen;
};

typedef struct etharp_entry etharp_entry, *Petharp_entry;

typedef struct pbuf pbuf, *Ppbuf;

typedef struct netif netif, *Pnetif;

typedef s8_t err_t;

typedef enum netif_mac_filter_action {
    NETIF_ADD_MAC_FILTER=1,
    NETIF_DEL_MAC_FILTER=0
} netif_mac_filter_action;

struct etharp_entry {
    struct pbuf * q;
    ip4_addr_t ipaddr;
    struct netif * netif;
    struct eth_addr ethaddr;
    u16_t ctime;
    u8_t state;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct netif {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    void (* status_callback)(struct netif *);
    void (* link_callback)(struct netif *);
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

struct pbuf {
    struct pbuf * next;
    void * payload;
    u16_t tot_len;
    u16_t len;
    u8_t type_internal;
    u8_t flags;
    u8_t ref;
    u8_t if_idx;
};

typedef enum etharp_state {
    ETHARP_STATE_EMPTY=0,
    ETHARP_STATE_PENDING=1,
    ETHARP_STATE_STABLE=2,
    ETHARP_STATE_STABLE_REREQUESTING_1=3,
    ETHARP_STATE_STABLE_REREQUESTING_2=4
} etharp_state;

typedef ushort UHWtype;

typedef struct bl_custom_pbuf bl_custom_pbuf, *Pbl_custom_pbuf;

typedef struct bl_custom_pbuf bl_custom_pbuf_t;

typedef struct pbuf_custom pbuf_custom, *Ppbuf_custom;

struct pbuf_custom {
    struct pbuf pbuf;
    void (* custom_free_function)(struct pbuf *);
};

struct bl_custom_pbuf {
    struct pbuf_custom p;
    void * swdesc;
};

typedef struct wifi_pkt wifi_pkt, *Pwifi_pkt;

struct wifi_pkt {
    uint32_t pkt[4];
    void * pbuf[4];
    uint16_t len[4];
};

typedef struct la_mem_format la_mem_format, *Pla_mem_format;

struct la_mem_format {
    uint32_t word[4];
};

typedef struct QueueDefinition QueueDefinition, *PQueueDefinition;

typedef struct QueueDefinition * QueueHandle_t;


// WARNING! conflicting data type names: /DWARF/queue.c/QueueDefinition/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u

struct QueueDefinition {
    int8_t * pcHead;
    int8_t * pcWriteTo;
    union anon_union_for_u u;
    List_t xTasksWaitingToSend;
    List_t xTasksWaitingToReceive;
    UBaseType_t uxMessagesWaiting;
    UBaseType_t uxLength;
    UBaseType_t uxItemSize;
    int8_t cRxLock;
    int8_t cTxLock;
    uint8_t ucStaticallyAllocated;
    undefined field_0x47;
    UBaseType_t uxQueueNumber;
    uint8_t ucQueueType;
    undefined field_0x4d;
    undefined field_0x4e;
    undefined field_0x4f;
};

typedef enum bl_dev_flag {
    RWNX_DEV_RESTARTING=0,
    RWNX_DEV_STACK_RESTARTING=1,
    RWNX_DEV_STARTED=2
} bl_dev_flag;

typedef ulonglong UDItype;

typedef uchar UQItype;

typedef int shift_count_type;

typedef uint USItype;

typedef struct DWstruct DWstruct, *PDWstruct;

typedef int SItype;

struct DWstruct {
    SItype low;
    SItype high;
};

typedef longlong DItype;

typedef union DWunion DWunion, *PDWunion;

union DWunion {
    struct DWstruct s;
    DItype ll;
};

typedef struct QueueDefinition xQUEUE;

typedef struct QUEUE_REGISTRY_ITEM QUEUE_REGISTRY_ITEM, *PQUEUE_REGISTRY_ITEM;

typedef struct QUEUE_REGISTRY_ITEM xQueueRegistryItem;

typedef xQueueRegistryItem QueueRegistryItem_t;

struct QUEUE_REGISTRY_ITEM {
    char * pcQueueName;
    QueueHandle_t xHandle;
};

typedef struct QueuePointers QueuePointers, *PQueuePointers;

typedef struct QueuePointers QueuePointers_t;

struct QueuePointers {
    int8_t * pcTail;
    int8_t * pcReadFrom;
};

typedef struct SemaphoreData SemaphoreData, *PSemaphoreData;

typedef struct SemaphoreData SemaphoreData_t;

typedef struct tskTaskControlBlock tskTaskControlBlock, *PtskTaskControlBlock;

typedef struct tskTaskControlBlock * TaskHandle_t;

typedef uint32_t StackType_t;

struct SemaphoreData {
    TaskHandle_t xMutexHolder;
    UBaseType_t uxRecursiveCallCount;
};

struct tskTaskControlBlock {
    StackType_t * pxTopOfStack;
    ListItem_t xStateListItem;
    ListItem_t xEventListItem;
    UBaseType_t uxPriority;
    StackType_t * pxStack;
    char pcTaskName[16];
    UBaseType_t uxCriticalNesting;
    UBaseType_t uxTCBNumber;
    UBaseType_t uxTaskNumber;
    UBaseType_t uxBasePriority;
    UBaseType_t uxMutexesHeld;
    uint32_t ulNotifiedValue;
    uint8_t ucNotifyState;
    uint8_t ucStaticallyAllocated;
    undefined field_0x5e;
    undefined field_0x5f;
};

typedef xQUEUE Queue_t;

typedef enum BL_AHB_Slave1_Type {
    BL_AHB_SLAVE1_CCI=8,
    BL_AHB_SLAVE1_CKS=23,
    BL_AHB_SLAVE1_DBG=3,
    BL_AHB_SLAVE1_DMA=12,
    BL_AHB_SLAVE1_EFUSE=7,
    BL_AHB_SLAVE1_GLB=0,
    BL_AHB_SLAVE1_GPIP=2,
    BL_AHB_SLAVE1_I2C=19,
    BL_AHB_SLAVE1_IRR=22,
    BL_AHB_SLAVE1_L1C=9,
    BL_AHB_SLAVE1_MAX=24,
    BL_AHB_SLAVE1_PDSHBN=14,
    BL_AHB_SLAVE1_PWM=20,
    BL_AHB_SLAVE1_RF=1,
    BL_AHB_SLAVE1_SDU=13,
    BL_AHB_SLAVE1_SEC=4,
    BL_AHB_SLAVE1_SFC=11,
    BL_AHB_SLAVE1_SPI=18,
    BL_AHB_SLAVE1_TMR=21,
    BL_AHB_SLAVE1_TZ1=5,
    BL_AHB_SLAVE1_TZ2=6,
    BL_AHB_SLAVE1_UART0=16,
    BL_AHB_SLAVE1_UART1=17,
    BL_AHB_SLAVE1_WRAM=15
} BL_AHB_Slave1_Type;

typedef struct bt_att_req.conflict24 bt_att_req.conflict24, *Pbt_att_req.conflict24;

struct bt_att_req.conflict24 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct bt_att_req.conflict26 bt_att_req.conflict26, *Pbt_att_req.conflict26;

struct bt_att_req.conflict26 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct bt_att_req.conflict9 bt_att_req.conflict9, *Pbt_att_req.conflict9;

struct bt_att_req.conflict9 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct bt_att_req.conflict23 bt_att_req.conflict23, *Pbt_att_req.conflict23;

struct bt_att_req.conflict23 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct bt_att_req.conflict25 bt_att_req.conflict25, *Pbt_att_req.conflict25;

struct bt_att_req.conflict25 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct bt_att_req.conflict20 bt_att_req.conflict20, *Pbt_att_req.conflict20;

struct bt_att_req.conflict20 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct bt_att_req.conflict22 bt_att_req.conflict22, *Pbt_att_req.conflict22;

struct bt_att_req.conflict22 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct bt_att_req.conflict27 bt_att_req.conflict27, *Pbt_att_req.conflict27;

struct bt_att_req.conflict27 {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    bt_att_destroy_t.conflict destroy;
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct bt_att_req bt_att_req, *Pbt_att_req;

struct bt_att_req {
    sys_snode_t node;
    void (* func)(struct bt_conn *, u8_t, void *, u16_t, void *);
    void (* destroy)(void *);
    struct net_buf_simple_state state;
    struct net_buf * buf;
    _Bool retrying;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct _httpc_state _httpc_state, *P_httpc_state;

typedef struct _httpc_state httpc_state_t;

struct _httpc_state {
};

typedef struct write_data write_data, *Pwrite_data;

struct write_data {
    struct bt_conn * conn;
    struct net_buf * buf;
    u8_t req;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    void * value;
    u16_t len;
    u16_t offset;
    u8_t err;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct bt_att bt_att, *Pbt_att;

typedef struct bt_l2cap_le_chan.conflict3 bt_l2cap_le_chan.conflict3, *Pbt_l2cap_le_chan.conflict3;

typedef struct k_delayed_work.conflict14 k_delayed_work.conflict14, *Pk_delayed_work.conflict14;

typedef struct bt_l2cap_chan.conflict4 bt_l2cap_chan.conflict4, *Pbt_l2cap_chan.conflict4;

typedef struct bt_l2cap_chan bt_l2cap_chan, *Pbt_l2cap_chan;

typedef struct bt_l2cap_le_endpoint bt_l2cap_le_endpoint, *Pbt_l2cap_le_endpoint;

typedef struct k_timer.conflict21 k_timer.conflict21, *Pk_timer.conflict21;

typedef struct k_timer.conflict21 k_timer_t.conflict18;

typedef struct bt_l2cap_chan_ops bt_l2cap_chan_ops, *Pbt_l2cap_chan_ops;

typedef enum bt_l2cap_chan_state {
    BT_L2CAP_CONFIG=2,
    BT_L2CAP_CONNECT=1,
    BT_L2CAP_CONNECTED=3,
    BT_L2CAP_DISCONNECT=4,
    BT_L2CAP_DISCONNECTED=0
} bt_l2cap_chan_state;

typedef enum bt_l2cap_chan_state bt_l2cap_chan_state_t;

typedef struct k_delayed_work.conflict13 k_delayed_work.conflict13, *Pk_delayed_work.conflict13;

typedef struct k_timer.conflict20 k_timer.conflict20, *Pk_timer.conflict20;

typedef struct k_timer.conflict20 k_timer_t.conflict17;

struct bt_l2cap_chan {
    struct bt_conn * conn;
    struct bt_l2cap_chan_ops * ops;
    sys_snode_t node;
    void (* destroy)(struct bt_l2cap_chan *);
    struct k_delayed_work rtx_work;
    atomic_t status[1];
    bt_l2cap_chan_state_t state;
    undefined field_0x39;
    u16_t psm;
    u8_t ident;
    enum bt_security_t required_sec_level;
    undefined field_0x3e;
    undefined field_0x3f;
};

struct bt_l2cap_le_endpoint {
    u16_t cid;
    u16_t mtu;
    u16_t mps;
    u16_t init_credits;
    struct k_sem credits;
};

struct k_timer.conflict20 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

struct k_delayed_work.conflict13 {
    struct k_work work;
    struct k_work_q * work_q;
    k_timer_t.conflict17 timer;
};

struct bt_l2cap_chan.conflict4 {
    struct bt_conn * conn;
    struct bt_l2cap_chan_ops * ops;
    sys_snode_t node;
    void (* destroy)(struct bt_l2cap_chan *);
    struct k_delayed_work.conflict13 rtx_work;
    atomic_t status[1];
    bt_l2cap_chan_state_t state;
    undefined field_0x39;
    u16_t psm;
    u8_t ident;
    enum bt_security_t required_sec_level;
    undefined field_0x3e;
    undefined field_0x3f;
};

struct k_timer.conflict21 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

struct bt_l2cap_chan_ops {
    void (* connected)(struct bt_l2cap_chan *);
    void (* disconnected)(struct bt_l2cap_chan *);
    void (* encrypt_change)(struct bt_l2cap_chan *, u8_t);
    net_buf * (* alloc_buf)(struct bt_l2cap_chan *);
    int (* recv)(struct bt_l2cap_chan *, struct net_buf *);
    void (* sent)(struct bt_l2cap_chan *);
    void (* status)(struct bt_l2cap_chan *, atomic_t *);
};

struct bt_l2cap_le_chan.conflict3 {
    struct bt_l2cap_chan.conflict4 chan;
    struct bt_l2cap_le_endpoint rx;
    struct bt_l2cap_le_endpoint tx;
    struct k_fifo tx_queue;
    struct net_buf * tx_buf;
    struct net_buf * _sdu;
    u16_t _sdu_len;
    undefined field_0x7e;
    undefined field_0x7f;
    struct k_work rx_work;
    struct k_fifo rx_queue;
};

struct k_delayed_work.conflict14 {
    struct k_work work;
    struct k_work_q * work_q;
    k_timer_t.conflict18 timer;
};

struct bt_att {
    struct bt_l2cap_le_chan.conflict3 chan;
    atomic_t flags[1];
    struct bt_att_req.conflict26 * req;
    sys_slist_t reqs;
    struct k_delayed_work.conflict14 timeout_work;
    struct k_sem tx_sem;
    struct k_fifo tx_queue;
};

typedef struct find_type_data find_type_data, *Pfind_type_data;

typedef struct bt_att_handle_group bt_att_handle_group, *Pbt_att_handle_group;

struct bt_att_handle_group {
    u16_t start_handle;
    u16_t end_handle;
};

struct find_type_data {
    struct bt_att * att;
    struct net_buf * buf;
    struct bt_att_handle_group * group;
    void * value;
    u8_t value_len;
    u8_t err;
    undefined field_0x12;
    undefined field_0x13;
};

typedef struct read_type_data read_type_data, *Pread_type_data;

typedef struct bt_att_read_type_rsp bt_att_read_type_rsp, *Pbt_att_read_type_rsp;

typedef struct bt_att_data bt_att_data, *Pbt_att_data;

struct bt_att_data {
    u16_t handle;
    u8_t[0] value;
};

struct read_type_data {
    struct bt_att * att;
    struct bt_uuid * uuid;
    struct net_buf * buf;
    struct bt_att_read_type_rsp * rsp;
    struct bt_att_data * item;
    u8_t err;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

struct bt_att_read_type_rsp {
    u8_t len;
    struct bt_att_data[0] data;
};

typedef struct att_handler.conflict2 att_handler.conflict2, *Patt_handler.conflict2;

typedef enum att_type_t {
    ATT_COMMAND=0,
    ATT_CONFIRMATION=4,
    ATT_INDICATION=5,
    ATT_NOTIFICATION=3,
    ATT_REQUEST=1,
    ATT_RESPONSE=2,
    ATT_UNKNOWN=6
} att_type_t;

struct att_handler.conflict2 {
    u8_t op;
    u8_t expect_len;
    enum att_type_t type;
    undefined field_0x3;
    u8_t (* func)(struct bt_att *, struct net_buf *);
};

typedef struct att_handler.conflict3 att_handler.conflict3, *Patt_handler.conflict3;

struct att_handler.conflict3 {
    u8_t op;
    u8_t expect_len;
    enum att_type_t type;
    undefined field_0x3;
    u8_t (* func)(struct bt_att *, struct net_buf *);
};

typedef struct att_handler.conflict1 att_handler.conflict1, *Patt_handler.conflict1;

struct att_handler.conflict1 {
    u8_t op;
    u8_t expect_len;
    enum att_type_t type;
    undefined field_0x3;
    u8_t (* func)(struct bt_att *, struct net_buf *);
};

typedef struct read_data read_data, *Pread_data;

typedef struct bt_att_read_rsp bt_att_read_rsp, *Pbt_att_read_rsp;

struct read_data {
    struct bt_att * att;
    u16_t offset;
    undefined field_0x6;
    undefined field_0x7;
    struct net_buf * buf;
    struct bt_att_read_rsp * rsp;
    u8_t err;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
};

struct bt_att_read_rsp { // Missing member value : u8_t[1] at offset 0x0 [Unsupported interior flex array: u8_t[1]]
};

typedef struct find_info_data find_info_data, *Pfind_info_data;

typedef struct bt_att_find_info_rsp bt_att_find_info_rsp, *Pbt_att_find_info_rsp;


// WARNING! conflicting data type names: /DWARF/att.c/find_info_data/anon_union_for_field_3 - /DWARF/gatt.h/bt_gatt_discover_params/anon_union_for_field_3

struct find_info_data {
    struct bt_att * att;
    struct net_buf * buf;
    struct bt_att_find_info_rsp * rsp;
    union anon_union_for_field_3 field_3;
};

struct bt_att_find_info_rsp {
    u8_t format;
    u8_t[0] info;
};

typedef struct read_group_data read_group_data, *Pread_group_data;

typedef struct bt_att_read_group_rsp bt_att_read_group_rsp, *Pbt_att_read_group_rsp;

typedef struct bt_att_group_data bt_att_group_data, *Pbt_att_group_data;

struct bt_att_read_group_rsp {
    u8_t len;
    struct bt_att_group_data[0] data;
};

struct bt_att_group_data {
    u16_t start_handle;
    u16_t end_handle;
    u8_t[0] value;
};

struct read_group_data {
    struct bt_att * att;
    struct bt_uuid * uuid;
    struct net_buf * buf;
    struct bt_att_read_group_rsp * rsp;
    struct bt_att_group_data * group;
};

typedef struct write_data.conflict write_data.conflict, *Pwrite_data.conflict;

struct write_data.conflict {
    struct bt_conn * conn;
    struct net_buf * buf;
    u8_t req;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    void * value;
    u16_t len;
    u16_t offset;
    u8_t err;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct att_handler att_handler, *Patt_handler;

struct att_handler {
    u8_t op;
    u8_t expect_len;
    enum att_type_t type;
    undefined field_0x3;
    u8_t (* func)(struct bt_att *, struct net_buf *);
};

typedef struct att_handler.conflict att_handler.conflict, *Patt_handler.conflict;

struct att_handler.conflict {
    u8_t op;
    u8_t expect_len;
    enum att_type_t type;
    undefined field_0x3;
    u8_t (* func)(struct bt_att *, struct net_buf *);
};


// WARNING! conflicting data type names: /DWARF/att.c/att_read_group_req/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u


// WARNING! conflicting data type names: /DWARF/att.c/att_read_type_req/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u

typedef struct anon_struct.conflict118 anon_struct.conflict118, *Panon_struct.conflict118;

typedef err_t (* netif_init_fn)(struct netif *);

struct anon_struct.conflict118 {
    ip4_addr_t * ipaddr;
    ip4_addr_t * netmask;
    ip4_addr_t * gw;
    void * state;
    netif_init_fn init;
    err_t (* input)(struct pbuf *, struct netif *);
};

typedef struct anon_struct.conflict119 anon_struct.conflict119, *Panon_struct.conflict119;

typedef void (* netifapi_void_fn)(struct netif *);

typedef err_t (* netifapi_errt_fn)(struct netif *);

struct anon_struct.conflict119 {
    netifapi_void_fn voidfunc;
    netifapi_errt_fn errtfunc;
};

typedef struct netifapi_msg netifapi_msg, *Pnetifapi_msg;

typedef struct tcpip_api_call_data tcpip_api_call_data, *Ptcpip_api_call_data;

typedef union anon_union_for_msg anon_union_for_msg, *Panon_union_for_msg;

typedef QueueHandle_t SemaphoreHandle_t;

typedef SemaphoreHandle_t sys_sem_t;

typedef struct anon_struct.conflict120 anon_struct.conflict120, *Panon_struct.conflict120;

struct tcpip_api_call_data {
    err_t err;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    sys_sem_t sem;
};

struct anon_struct.conflict120 {
    char * name;
    u8_t index;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
};

union anon_union_for_msg {
    struct anon_struct.conflict118 add;
    struct anon_struct.conflict119 common;
    struct anon_struct.conflict120 ifs;
};

struct netifapi_msg {
    struct tcpip_api_call_data call;
    struct netif * netif;
    union anon_union_for_msg msg;
};

typedef struct k_delayed_work.conflict6 k_delayed_work.conflict6, *Pk_delayed_work.conflict6;

typedef struct k_timer.conflict13 k_timer.conflict13, *Pk_timer.conflict13;

typedef struct k_timer.conflict13 k_timer_t.conflict10;

struct k_timer.conflict13 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

struct k_delayed_work.conflict6 {
    struct k_work work;
    struct k_work_q * work_q;
    k_timer_t.conflict10 timer;
};

typedef struct k_delayed_work.conflict5 k_delayed_work.conflict5, *Pk_delayed_work.conflict5;

typedef struct k_timer.conflict12 k_timer.conflict12, *Pk_timer.conflict12;

typedef struct k_timer.conflict12 k_timer_t.conflict9;

struct k_timer.conflict12 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

struct k_delayed_work.conflict5 {
    struct k_work work;
    struct k_work_q * work_q;
    k_timer_t.conflict9 timer;
};

typedef struct k_delayed_work.conflict2 k_delayed_work.conflict2, *Pk_delayed_work.conflict2;

typedef struct k_timer.conflict7 k_timer.conflict7, *Pk_timer.conflict7;

typedef struct k_timer.conflict7 k_timer_t.conflict5;

struct k_timer.conflict7 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

struct k_delayed_work.conflict2 {
    struct k_work work;
    struct k_work_q * work_q;
    k_timer_t.conflict5 timer;
};

typedef struct k_delayed_work.conflict1 k_delayed_work.conflict1, *Pk_delayed_work.conflict1;

typedef struct k_timer.conflict6 k_timer.conflict6, *Pk_timer.conflict6;

typedef struct k_timer.conflict6 k_timer_t.conflict4;

struct k_timer.conflict6 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

struct k_delayed_work.conflict1 {
    struct k_work work;
    struct k_work_q * work_q;
    k_timer_t.conflict4 timer;
};

typedef struct timer_rec_d timer_rec_d, *Ptimer_rec_d;

struct timer_rec_d {
    bl_timer_t timer;
    struct k_delayed_work * delay_work;
};

typedef struct k_delayed_work.conflict k_delayed_work.conflict, *Pk_delayed_work.conflict;

typedef struct k_timer.conflict5 k_timer.conflict5, *Pk_timer.conflict5;

typedef struct k_timer.conflict5 k_timer_t.conflict3;

struct k_timer.conflict5 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

struct k_delayed_work.conflict {
    struct k_work work;
    struct k_work_q * work_q;
    k_timer_t.conflict3 timer;
};

typedef struct _rom_dir_t _rom_dir_t, *P_rom_dir_t;

struct _rom_dir_t {
    struct aos_dir_t dir;
    char * dir_start_addr;
    char * dir_end_addr;
    char * dir_cur_addr;
    struct aos_dirent_t cur_dirent;
};

typedef struct _rom_dir_t romfs_dir_t;

typedef struct romfh romfh, *Promfh;

struct romfh {
    int32_t nextfh;
    int32_t spec;
    int32_t size;
    int32_t checksum;
};

typedef struct StreamBufferDef_t StreamBufferDef_t, *PStreamBufferDef_t;

typedef struct StreamBufferDef_t * StreamBufferHandle_t;

struct StreamBufferDef_t {
    size_t xTail;
    size_t xHead;
    size_t xLength;
    size_t xTriggerLevelBytes;
    TaskHandle_t xTaskWaitingToReceive;
    TaskHandle_t xTaskWaitingToSend;
    uint8_t * pucBuffer;
    uint8_t ucFlags;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
    UBaseType_t uxStreamBufferNumber;
};

typedef longlong __int_least64_t;

typedef __int_least64_t time_t;

typedef struct apInfo_t apInfo_t, *PapInfo_t;

typedef struct BssConfig_t BssConfig_t, *PBssConfig_t;

typedef struct BssData_t BssData_t, *PBssData_t;

typedef struct apRsnConfig_t apRsnConfig_t, *PapRsnConfig_t;

typedef struct CommonMlmeData_t CommonMlmeData_t, *PCommonMlmeData_t;

typedef struct Cipher_t.conflict Cipher_t.conflict, *PCipher_t.conflict;

typedef struct Operation_t Operation_t, *POperation_t;

typedef UINT8 IEEEtypes_SsId_t[32];

typedef UINT8 IEEEtypes_Len_t;

typedef UINT8 IEEEtypes_DtimPeriod_t;

typedef UINT16 IEEEtypes_BcnInterval_t;

typedef UINT8 IEEEtypes_Addr_t;

typedef IEEEtypes_Addr_t IEEEtypes_MacAddr_t[6];

struct Operation_t {
    UINT16 keyExchange:1;
    UINT16 authenticate:1;
    UINT16 reserved:14;
};

struct Cipher_t.conflict {
    UINT8 wep40:1;
    UINT8 wep104:1;
    UINT8 tkip:1;
    UINT8 ccmp:1;
    UINT8 rsvd:4;
};

struct apRsnConfig_t {
    struct Cipher_t.conflict mcstCipher;
    UINT8 mcstCipherCount;
    struct Cipher_t.conflict wpaUcstCipher;
    UINT8 wpaUcstCipherCount;
    struct Cipher_t.conflict wpa2UcstCipher;
    UINT8 wpa2UcstCipherCount;
    UINT16 AuthKey;
    UINT16 AuthKeyCount;
    struct Operation_t Akmp;
    UINT32 GrpReKeyTime;
    UINT8 PSKPassPhrase[64];
    UINT8 PSKPassPhraseLen;
    UINT8 PSKValue[32];
    UINT8 MaxPwsHskRetries;
    UINT8 MaxGrpHskRetries;
    undefined field_0x73;
    UINT32 PwsHskTimeOut;
    UINT32 GrpHskTimeOut;
};

struct CommonMlmeData_t {
    IEEEtypes_SsId_t SsId;
    IEEEtypes_Len_t SsIdLen;
    IEEEtypes_DtimPeriod_t DtimPeriod;
    IEEEtypes_BcnInterval_t BcnPeriod;
    IEEEtypes_MacAddr_t BssId;
    UINT16 RtsThresh;
    UINT16 FragThresh;
    UINT8 ShortRetryLim;
    UINT8 LongRetryLim;
    UINT8 MbssBcnIntFac;
    UINT8 MbssCurBcnIntCnt;
    UINT16 Reserved;
};

struct BssConfig_t {
    UINT32 StaAgeOutTime;
    UINT32 PsStaAgeOutTime;
    struct apRsnConfig_t RsnConfig;
    struct CommonMlmeData_t comData;
};

struct BssData_t {
    BOOLEAN updatePassPhrase;
    struct mm_timer_tag apMicTimer;
    struct KeyData_t grpKeyData;
    UINT8 GNonce[32];
    UINT32 grpRekeyBcnCntConfigured;
    UINT32 grpRekeyBcnCntRemaining;
};

struct apInfo_t {
    struct BssConfig_t bssConfig;
    struct BssData_t bssData;
    UINT8 ApStop_Req_Pending;
    undefined field_0x11d;
    undefined field_0x11e;
    undefined field_0x11f;
};

typedef struct _txQingInfo_t _txQingInfo_t, *P_txQingInfo_t;

typedef enum IEEEtypes_PwrMgmtMode_e {
    PWR_MODE_ACTIVE=0,
    PWR_MODE_PWR_SAVE=1
} IEEEtypes_PwrMgmtMode_e;

struct _txQingInfo_t {
    enum IEEEtypes_PwrMgmtMode_e mode;
};

typedef struct staData_t staData_t, *PstaData_t;

typedef struct _txQingInfo_t txQingInfo_t;

typedef struct apKeyMgmtInfoSta_t apKeyMgmtInfoSta_t, *PapKeyMgmtInfoSta_t;

typedef struct apKeyMgmtInfoStaRom_t apKeyMgmtInfoStaRom_t, *PapKeyMgmtInfoStaRom_t;

typedef struct SecurityMode_t SecurityMode_t, *PSecurityMode_t;

typedef enum keyMgmtState_e {
    GRPMSG1_PENDING=5,
    GRP_REKEY_MSG1_PENDING=7,
    HSK_DUMMY_STATE=9,
    HSK_END=10,
    HSK_NOT_STARTED=0,
    MSG1_PENDING=1,
    MSG3_PENDING=3,
    WAITING_4_GRPMSG2=6,
    WAITING_4_GRP_REKEY_MSG2=8,
    WAITING_4_MSG2=2,
    WAITING_4_MSG4=4
} keyMgmtState_e;

struct SecurityMode_t {
    UINT16 noRsn:1;
    UINT16 wepStatic:1;
    UINT16 wepDynamic:1;
    UINT16 wpa:1;
    UINT16 wpaNone:1;
    UINT16 wpa2:1;
    UINT16 cckm:1;
    UINT16 wapi:1;
    UINT16 wpa3:1;
    UINT16 rsvd:7;
};

struct apKeyMgmtInfoStaRom_t {
    UINT16 staRsnCap;
    struct SecurityMode_t staSecType;
    struct Cipher_t.conflict staUcstCipher;
    UINT8 staAkmType;
    enum keyMgmtState_e keyMgmtState;
    undefined field_0x7;
};

struct apKeyMgmtInfoSta_t {
    struct apKeyMgmtInfoStaRom_t rom;
    UINT8 numHskTries;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    UINT32 counterLo;
    UINT32 counterHi;
    struct mm_timer_tag HskTimer;
    UINT8 EAPOL_MIC_Key[16];
    UINT8 EAPOL_Encr_Key[16];
    UINT8 EAPOLProtoVersion;
    UINT8 rsvd[3];
};

struct staData_t {
    txQingInfo_t pwrSaveInfo;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    struct apKeyMgmtInfoSta_t keyMgmtInfo;
};

typedef struct StreamBufferDef_t StreamBuffer_t;

typedef struct chan_env_tag chan_env_tag, *Pchan_env_tag;

typedef struct chan_ctxt_tag chan_ctxt_tag, *Pchan_ctxt_tag;

struct chan_env_tag {
    struct co_list list_free_ctxt;
    struct co_list list_sched_ctxt;
    struct co_list list_tbtt;
    struct co_list list_tbtt_delay;
    struct chan_ctxt_tag * current_channel;
    struct chan_ctxt_tag * chan_switch;
    struct mm_timer_tag tmr_tbtt_switch;
    struct mm_timer_tag tmr_cde;
    struct mm_timer_tag tmr_ctxt_op;
    struct mm_timer_tag tmr_conn_less;
    uint32_t cde_dur_us;
    uint32_t cde_time;
    uint8_t status;
    uint8_t cfm_cnt;
    uint8_t nb_sched_ctxt;
    uint8_t pm;
};

struct chan_ctxt_tag {
    struct co_list_hdr list_hdr;
    struct mm_chan_ctxt_add_req channel;
    ke_task_id_t taskid;
    uint16_t nb_slots;
    uint16_t nb_rem_slots;
    uint16_t nb_res_slots;
    uint8_t status;
    uint8_t idx;
    uint8_t nb_linked_vif;
    uint8_t vif_index;
    undefined field_0x1a;
    undefined field_0x1b;
};

typedef struct chan_tbtt_tag chan_tbtt_tag, *Pchan_tbtt_tag;

struct chan_tbtt_tag {
    struct co_list_hdr list_hdr;
    uint32_t time;
    uint8_t vif_index;
    uint8_t priority;
    uint8_t status;
    undefined field_0xb;
};

typedef enum chan_tbtt_status {
    CHAN_TBTT_NOT_PROG=0,
    CHAN_TBTT_PRESENCE=2,
    CHAN_TBTT_PROG=1,
    CHAN_TBTT_STATUS_MAX=3
} chan_tbtt_status;

typedef enum chan_env_status_bit {
    CHAN_ENV_BCN_DETECT_BIT=6,
    CHAN_ENV_BIT_MAX=7,
    CHAN_ENV_DELAY_PROG_BIT=4,
    CHAN_ENV_ROC_BIT=2,
    CHAN_ENV_ROC_WAIT_BIT=0,
    CHAN_ENV_SCAN_BIT=3,
    CHAN_ENV_SCAN_WAIT_BIT=1,
    CHAN_ENV_TIMEOUT_BIT=5
} chan_env_status_bit;

typedef enum chan_ctxt_status {
    CHAN_CTXT_STATUS_MAX=7,
    CHAN_GOTO_IDLE=2,
    CHAN_NOT_PROG=1,
    CHAN_NOT_SCHEDULED=0,
    CHAN_PRESENT=5,
    CHAN_SENDING_NOA=6,
    CHAN_WAITING_END=4,
    CHAN_WAIT_NOA_CFM=3
} chan_ctxt_status;

typedef struct txl_cfm_env_tag txl_cfm_env_tag, *Ptxl_cfm_env_tag;

struct txl_cfm_env_tag {
    struct co_list cfmlist[5];
};

typedef enum rxu_msg_tag {
    RXU_MGT_IND=11264,
    RXU_NULL_DATA=11265
} rxu_msg_tag;

typedef struct rxu_mgt_ind rxu_mgt_ind, *Prxu_mgt_ind;

struct rxu_mgt_ind {
    uint16_t length;
    uint16_t framectrl;
    uint16_t center_freq;
    uint8_t band;
    uint8_t sta_idx;
    uint8_t inst_nbr;
    uint8_t sa[6];
    undefined field_0xf;
    uint32_t tsflo;
    uint32_t tsfhi;
    int8_t rssi;
    int8_t ppm_abs;
    int8_t ppm_rel;
    uint8_t data_rate;
    uint32_t[0] payload;
};

typedef struct llc_snap llc_snap, *Pllc_snap;

struct llc_snap {
    uint16_t dsap_ssap;
    uint16_t control_oui0;
    uint16_t oui1_2;
    uint16_t proto_id;
};

typedef struct rem_version rem_version, *Prem_version;

struct rem_version {
    uint8_t vers;
    undefined field_0x1;
    uint16_t compid;
    uint16_t subvers;
};

typedef struct encrypt.conflict2 encrypt.conflict2, *Pencrypt.conflict2;

typedef struct sess_k_div sess_k_div, *Psess_k_div;

struct sess_k_div {
    uint8_t skd[16];
};

struct encrypt.conflict2 {
    struct sess_k_div skd;
    struct ltk ltk;
    uint8_t randn[16];
};

typedef struct encrypt.conflict1 encrypt.conflict1, *Pencrypt.conflict1;

struct encrypt.conflict1 {
    struct sess_k_div skd;
    struct ltk ltk;
    uint8_t randn[16];
};

typedef struct encrypt.conflict4 encrypt.conflict4, *Pencrypt.conflict4;

struct encrypt.conflict4 {
    struct sess_k_div skd;
    struct ltk ltk;
    uint8_t randn[16];
};

typedef struct encrypt.conflict3 encrypt.conflict3, *Pencrypt.conflict3;

struct encrypt.conflict3 {
    struct sess_k_div skd;
    struct ltk ltk;
    uint8_t randn[16];
};

typedef struct encrypt.conflict6 encrypt.conflict6, *Pencrypt.conflict6;

struct encrypt.conflict6 {
    struct sess_k_div skd;
    struct ltk ltk;
    uint8_t randn[16];
};

typedef struct encrypt.conflict5 encrypt.conflict5, *Pencrypt.conflict5;

struct encrypt.conflict5 {
    struct sess_k_div skd;
    struct ltk ltk;
    uint8_t randn[16];
};

typedef struct encrypt.conflict8 encrypt.conflict8, *Pencrypt.conflict8;

struct encrypt.conflict8 {
    struct sess_k_div skd;
    struct ltk ltk;
    uint8_t randn[16];
};

typedef struct encrypt.conflict7 encrypt.conflict7, *Pencrypt.conflict7;

struct encrypt.conflict7 {
    struct sess_k_div skd;
    struct ltk ltk;
    uint8_t randn[16];
};

typedef struct llc_env_tag llc_env_tag, *Pllc_env_tag;

typedef struct ea_elt_tag ea_elt_tag, *Pea_elt_tag;

typedef struct llc_ch_asses_tag llc_ch_asses_tag, *Pllc_ch_asses_tag;

typedef struct data_len_ext_tag data_len_ext_tag, *Pdata_len_ext_tag;

struct ea_elt_tag {
    struct co_list_hdr hdr;
    struct ea_elt_tag * linked_element;
    uint32_t timestamp;
    uint32_t asap_limit;
    uint16_t asap_settings;
    uint16_t duration_min;
    uint16_t delay;
    uint8_t current_prio;
    uint8_t stop_latency1;
    uint8_t stop_latency2;
    uint8_t start_latency;
    undefined field_0x1a;
    undefined field_0x1b;
    void (* ea_cb_start)(struct ea_elt_tag *);
    void (* ea_cb_stop)(struct ea_elt_tag *);
    void (* ea_cb_cancel)(struct ea_elt_tag *);
    void * env;
};

struct llc_ch_asses_tag {
    int8_t rcvd_quality[37];
    _Bool latency_en;
    uint8_t reassess_count;
    uint8_t reassess_cursor;
};

struct data_len_ext_tag {
    uint16_t conn_max_tx_octets;
    uint16_t conn_max_rx_octets;
    uint16_t conn_eff_max_tx_octets;
    uint16_t conn_eff_max_rx_octets;
    uint16_t conn_max_tx_time;
    uint16_t conn_max_rx_time;
    uint16_t conn_eff_max_tx_time;
    uint16_t conn_eff_max_rx_time;
    _Bool send_req_not_allowed;
    uint8_t data_len_ext_flag;
};

struct llc_env_tag {
    void * operation[4];
    struct ea_elt_tag * elt;
    struct llc_ch_asses_tag chnl_assess;
    struct rem_version peer_version;
    struct data_len_ext_tag data_len_ext_info;
    uint16_t sup_to;
    uint16_t n_sup_to;
    uint16_t auth_payl_to;
    uint16_t auth_payl_to_margin;
    uint16_t llc_status;
    struct le_chnl_map ch_map;
    struct le_chnl_map n_ch_map;
    int8_t rssi;
    struct le_features feats_used;
    struct encrypt.conflict1 encrypt;
    uint8_t disc_reason;
    _Bool disc_event_sent;
    uint8_t loc_proc_state;
    uint8_t rem_proc_state;
    uint8_t encryption_state;
    _Bool peer_sup_conn_param_req;
    undefined field_0xa7;
};

typedef struct encrypt.conflict9 encrypt.conflict9, *Pencrypt.conflict9;

struct encrypt.conflict9 {
    struct sess_k_div skd;
    struct ltk ltk;
    uint8_t randn[16];
};

typedef enum llc_dle_flag {
    LLC_DLE_EVT_SENT_LSB=1,
    LLC_DLE_EVT_SENT_MASK=2,
    LLC_DLE_REQ_RCVD_LSB=0,
    LLC_DLE_REQ_RCVD_MASK=1
} llc_dle_flag;

typedef struct encrypt.conflict16 encrypt.conflict16, *Pencrypt.conflict16;

struct encrypt.conflict16 {
    struct sess_k_div skd;
    struct ltk ltk;
    uint8_t randn[16];
};

typedef struct encrypt.conflict11 encrypt.conflict11, *Pencrypt.conflict11;

struct encrypt.conflict11 {
    struct sess_k_div skd;
    struct ltk ltk;
    uint8_t randn[16];
};

typedef struct encrypt.conflict10 encrypt.conflict10, *Pencrypt.conflict10;

struct encrypt.conflict10 {
    struct sess_k_div skd;
    struct ltk ltk;
    uint8_t randn[16];
};

typedef struct encrypt.conflict13 encrypt.conflict13, *Pencrypt.conflict13;

struct encrypt.conflict13 {
    struct sess_k_div skd;
    struct ltk ltk;
    uint8_t randn[16];
};

typedef struct encrypt.conflict12 encrypt.conflict12, *Pencrypt.conflict12;

struct encrypt.conflict12 {
    struct sess_k_div skd;
    struct ltk ltk;
    uint8_t randn[16];
};

typedef struct encrypt.conflict15 encrypt.conflict15, *Pencrypt.conflict15;

struct encrypt.conflict15 {
    struct sess_k_div skd;
    struct ltk ltk;
    uint8_t randn[16];
};

typedef struct encrypt.conflict14 encrypt.conflict14, *Pencrypt.conflict14;

struct encrypt.conflict14 {
    struct sess_k_div skd;
    struct ltk ltk;
    uint8_t randn[16];
};

typedef enum llc_status_flag {
    LLC_STAT_DISC_REM_REQ_LSB=9,
    LLC_STAT_DISC_REM_REQ_MASK=512,
    LLC_STAT_FEAT_EXCH_LSB=0,
    LLC_STAT_FEAT_EXCH_MASK=1,
    LLC_STAT_INSTANT_PROCEED_LSB=11,
    LLC_STAT_INSTANT_PROCEED_MASK=2048,
    LLC_STAT_LLCP_DISCARD_LSB=3,
    LLC_STAT_LLCP_DISCARD_MASK=8,
    LLC_STAT_LLCP_INSTANT_EXTRACTED_LSB=10,
    LLC_STAT_LLCP_INSTANT_EXTRACTED_MASK=1024,
    LLC_STAT_PEER_VERS_KNOWN_LSB=1,
    LLC_STAT_PEER_VERS_KNOWN_MASK=2,
    LLC_STAT_SYNC_FOUND_LSB=8,
    LLC_STAT_SYNC_FOUND_MASK=256,
    LLC_STAT_TO_PENDING_LSB=4,
    LLC_STAT_TO_PENDING_MASK=16,
    LLC_STAT_UPDATE_EVT_SENT_LSB=7,
    LLC_STAT_UPDATE_EVT_SENT_MASK=-128,
    LLC_STAT_UPDATE_HOST_REQ_LSB=6,
    LLC_STAT_UPDATE_HOST_REQ_MASK=64,
    LLC_STAT_UPDATE_PENDING_LSB=5,
    LLC_STAT_UPDATE_PENDING_MASK=32,
    LLC_STAT_WAIT_TRAFFIC_PAUSED_LSB=2,
    LLC_STAT_WAIT_TRAFFIC_PAUSED_MASK=4
} llc_status_flag;

typedef struct encrypt.conflict encrypt.conflict, *Pencrypt.conflict;

struct encrypt.conflict {
    struct sess_k_div skd;
    struct ltk ltk;
    uint8_t randn[16];
};

typedef struct llc_snap_short llc_snap_short, *Pllc_snap_short;

struct llc_snap_short {
    uint16_t dsap_ssap;
    uint16_t control_oui0;
    uint16_t oui1_2;
};

typedef void * aos_loop_t;

typedef struct yloop_sock_t yloop_sock_t, *Pyloop_sock_t;

struct yloop_sock_t {
    int sock;
    void * private_data;
    void (* cb)(int, void *);
};

typedef struct input_event_t input_event_t, *Pinput_event_t;

struct input_event_t {
    uint32_t time;
    uint16_t type;
    uint16_t code;
    ulong value;
    ulong extra;
};

typedef struct yloop_ctx_t yloop_ctx_t, *Pyloop_ctx_t;

typedef struct pollfd pollfd, *Ppollfd;

struct pollfd {
    int fd;
    short events;
    short revents;
};

struct yloop_ctx_t {
    dlist_t timeouts;
    struct pollfd * pollfds;
    struct yloop_sock_t * readers;
    int eventfd;
    uint16_t max_sock;
    uint8_t reader_count;
    _Bool pending_terminate;
    _Bool terminate;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
};

typedef struct wifi_mgmr_ap_item wifi_mgmr_ap_item, *Pwifi_mgmr_ap_item;

typedef struct wifi_mgmr_ap_item wifi_mgmr_ap_item_t;

struct wifi_mgmr_ap_item {
    char ssid[32];
    char ssid_tail[1];
    undefined field_0x21;
    undefined field_0x22;
    undefined field_0x23;
    uint32_t ssid_len;
    uint8_t bssid[6];
    uint8_t channel;
    uint8_t auth;
    int8_t rssi;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef enum WIFI_STATE_ENUM_LIST {
    WIFI_STATE_CONNECTED_IP_GETTING=3,
    WIFI_STATE_CONNECTED_IP_GOT=4,
    WIFI_STATE_CONNECTING=2,
    WIFI_STATE_DISCONNECT=5,
    WIFI_STATE_IDLE=1,
    WIFI_STATE_IFDOWN=6,
    WIFI_STATE_NO_AP_FOUND=9,
    WIFI_STATE_PSK_ERROR=8,
    WIFI_STATE_SNIFFER=7,
    WIFI_STATE_UNKNOWN=0,
    WIFI_STATE_WITH_AP_CONNECTED_IP_GETTING=19,
    WIFI_STATE_WITH_AP_CONNECTED_IP_GOT=20,
    WIFI_STATE_WITH_AP_CONNECTING=18,
    WIFI_STATE_WITH_AP_DISCONNECT=21,
    WIFI_STATE_WITH_AP_IDLE=17
} WIFI_STATE_ENUM_LIST;

typedef struct wifi_conf wifi_conf, *Pwifi_conf;

typedef struct wifi_conf wifi_conf_t;

struct wifi_conf {
    char country_code[3];
    undefined field_0x3;
    int channel_nums;
};

typedef struct wifi_sta_basic_info wifi_sta_basic_info, *Pwifi_sta_basic_info;

struct wifi_sta_basic_info {
    uint8_t sta_idx;
    uint8_t is_used;
    uint8_t sta_mac[6];
    uint32_t tsfhi;
    uint32_t tsflo;
    int rssi;
    uint8_t data_rate;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct wifi_mgmr_sta_connect_ind_stat_info wifi_mgmr_sta_connect_ind_stat_info, *Pwifi_mgmr_sta_connect_ind_stat_info;

typedef struct wifi_mgmr_sta_connect_ind_stat_info wifi_mgmr_sta_connect_ind_stat_info_t;

struct wifi_mgmr_sta_connect_ind_stat_info {
    uint16_t status_code;
    uint8_t type_ind;
    char ssid[32];
    char psk[65];
    char pmk[64];
    uint8_t bssid[6];
    uint16_t chan_freq;
    uint8_t chan_band;
    undefined field_0xad;
};

typedef void * wifi_interface_t;

typedef enum WIFI_SCAN_DONE_EVENT_TYPE {
    WIFI_SCAN_DONE_EVENT_BUSY=1,
    WIFI_SCAN_DONE_EVENT_OK=0
} WIFI_SCAN_DONE_EVENT_TYPE;

typedef struct rx_cntrl_pm_mon rx_cntrl_pm_mon, *Prx_cntrl_pm_mon;

struct rx_cntrl_pm_mon {
    struct mac_addr.conflict addr;
    uint8_t pm_state;
    _Bool mon;
};

typedef struct rx_cntrl_ipcdesc rx_cntrl_ipcdesc, *Prx_cntrl_ipcdesc;

struct rx_cntrl_ipcdesc {
    uint32_t host_id;
};

typedef struct rxu_cntrl_env_tag rxu_cntrl_env_tag, *Prxu_cntrl_env_tag;

typedef struct rx_cntrl_rx_status rx_cntrl_rx_status, *Prx_cntrl_rx_status;

typedef struct rx_cntrl_dupli rx_cntrl_dupli, *Prx_cntrl_dupli;

struct rx_cntrl_dupli {
    struct mac_addr.conflict last_src_addr;
    uint16_t last_seq_cntl;
};

struct rx_cntrl_rx_status {
    uint16_t frame_cntl;
    uint16_t seq_cntl;
    uint16_t sn;
    uint8_t fn;
    uint8_t tid;
    uint8_t machdr_len;
    uint8_t sta_idx;
    uint8_t vif_idx;
    uint8_t dst_idx;
    undefined field_0xc;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint64_t pn;
    uint32_t statinfo;
    uint32_t host_buf_addr;
    struct key_info_tag * key;
    struct mac_addr.conflict da;
    struct mac_addr.conflict sa;
    uint8_t frame_info;
    _Bool eth_len_present;
    uint8_t payl_offset;
    undefined field_0x33;
    undefined field_0x34;
    undefined field_0x35;
    undefined field_0x36;
    undefined field_0x37;
};

struct rxu_cntrl_env_tag {
    struct rx_cntrl_rx_status rx_status;
    struct co_list rxdesc_pending;
    struct co_list rxdesc_ready;
    struct rx_cntrl_ipcdesc rx_ipcdesc_stat;
    struct co_list rxu_defrag_free;
    struct co_list rxu_defrag_used;
    struct rx_cntrl_dupli rxu_dupli;
    struct mac_addr.conflict * mac_addr_ptr;
    struct rx_cntrl_pm_mon pm_mon;
    uint32_t ttr;
    undefined field_0x74;
    undefined field_0x75;
    undefined field_0x76;
    undefined field_0x77;
};

typedef struct rxu_mic_calc rxu_mic_calc, *Prxu_mic_calc;

typedef struct mic_calc mic_calc, *Pmic_calc;

struct mic_calc {
    uint32_t mic_key_least;
    uint32_t mic_key_most;
    uint32_t last_m_i;
    uint8_t last_m_i_len;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
};

struct rxu_mic_calc {
    struct mic_calc mic_calc;
    uint32_t last_bytes[2];
};

typedef enum rxu_cntrl_frame_info_pos {
    RXU_CNTRL_MIC_CHECK_NEEDED=1,
    RXU_CNTRL_NEW_MESH_PEER=4,
    RXU_CNTRL_PN_CHECK_NEEDED=2
} rxu_cntrl_frame_info_pos;

typedef struct A_BLOCK_LINK A_BLOCK_LINK, *PA_BLOCK_LINK;

struct A_BLOCK_LINK {
    struct A_BLOCK_LINK * pxNextFreeBlock;
    size_t xBlockSize;
};

typedef struct A_BLOCK_LINK BlockLink_t;

typedef struct yloop_timeout_s yloop_timeout_s, *Pyloop_timeout_s;

typedef struct yloop_timeout_s yloop_timeout_t;

struct yloop_timeout_s {
    dlist_t next;
    longlong timeout_ms;
    void * private_data;
    void (* cb)(void *);
    int ms;
    undefined field_0x1c;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
};

typedef struct llcp_pdu_tag llcp_pdu_tag, *Pllcp_pdu_tag;

struct llcp_pdu_tag {
    struct co_list_hdr hdr;
    uint16_t idx;
    undefined field_0x6;
    undefined field_0x7;
    void * ptr;
    uint8_t opcode;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
};

typedef enum llc_llcp_authorize {
    LLC_LLCP_NO_AUTHZED=0,
    LLC_LLCP_PAUSE_ENC_AUTHZED=2,
    LLC_LLCP_START_ENC_AUTHZED=1
} llc_llcp_authorize;

typedef enum bam_state_tag {
    BAM_ACTIVE=1,
    BAM_CHECK_ADMISSION=3,
    BAM_IDLE=0,
    BAM_RESET=4,
    BAM_STATE_MAX=5,
    BAM_WAIT_RSP=2
} bam_state_tag;

typedef struct co_read16_struct co_read16_struct, *Pco_read16_struct;

struct co_read16_struct {
    uint16_t val;
};

typedef struct co_read32_struct co_read32_struct, *Pco_read32_struct;

struct co_read32_struct {
    uint32_t val;
};

typedef struct raw_pcb raw_pcb, *Praw_pcb;

struct raw_pcb {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct raw_pcb * next;
    u8_t protocol;
    u8_t flags;
    u8_t mcast_ifindex;
    u8_t mcast_ttl;
    u8_t (* recv)(void *, struct raw_pcb *, struct pbuf *, ip_addr_t *);
    void * recv_arg;
};

typedef struct tskTaskControlBlock tskTCB;

typedef tskTCB TCB_t;

typedef int sys_prot_t;

typedef struct ipc_host_cb_tag ipc_host_cb_tag, *Pipc_host_cb_tag;

struct ipc_host_cb_tag {
    int (* send_data_cfm)(void *, void *);
    uint8_t (* recv_data_ind)(void *, void *);
    uint8_t (* recv_radar_ind)(void *, void *);
    uint8_t (* recv_msg_ind)(void *, void *);
    uint8_t (* recv_msgack_ind)(void *, void *);
    uint8_t (* recv_dbg_ind)(void *, void *);
    void (* prim_tbtt_ind)(void *);
    void (* sec_tbtt_ind)(void *);
};

typedef struct ipc_hostbuf ipc_hostbuf, *Pipc_hostbuf;

struct ipc_hostbuf {
    void * hostid;
    uint32_t dma_addr;
};

typedef struct ipc_host_env_tag ipc_host_env_tag, *Pipc_host_env_tag;

struct ipc_host_env_tag {
    struct ipc_host_cb_tag cb;
    struct ipc_shared_env_tag * shared;
    struct ipc_hostbuf ipc_host_rxdesc_array[2];
    uint8_t ipc_host_rxdesc_idx;
    uint8_t rxdesc_nb;
    uint8_t ipc_host_rxbuf_idx;
    undefined field_0x37;
    uint32_t rx_bufnb;
    uint32_t rx_bufsz;
    uint32_t txdesc_free_idx;
    uint32_t txdesc_used_idx;
    void * tx_host_id0[4];
    void * * tx_host_id;
    struct txdesc_host * txdesc;
    struct ipc_hostbuf ipc_host_msgbuf_array[8];
    uint8_t ipc_host_msge2a_idx;
    undefined field_0xa1;
    undefined field_0xa2;
    undefined field_0xa3;
    uint32_t ipc_e2amsg_bufnb;
    uint32_t ipc_e2amsg_bufsz;
    uint8_t msga2e_cnt;
    undefined field_0xad;
    undefined field_0xae;
    undefined field_0xaf;
    void * msga2e_hostid;
    struct ipc_hostbuf ipc_host_dbgbuf_array[4];
    uint8_t ipc_host_dbg_idx;
    undefined field_0xd5;
    undefined field_0xd6;
    undefined field_0xd7;
    uint32_t ipc_dbg_bufnb;
    uint32_t ipc_dbg_bufsz;
    void * pthis;
};

typedef struct k_poll_event k_poll_event, *Pk_poll_event;

typedef struct _dnode sys_dnode_t;

typedef struct _poller _poller, *P_poller;

typedef union anon_union_for_field_7 anon_union_for_field_7, *Panon_union_for_field_7;

typedef struct k_poll_signal k_poll_signal, *Pk_poll_signal;

union anon_union_for_field_7 {
    void * obj;
    struct k_poll_signal * signal;
    struct k_sem * sem;
    struct k_fifo * fifo;
    struct k_queue * queue;
};

struct k_poll_event {
    sys_dnode_t _node;
    struct _poller * poller;
    u32_t.conflict tag:8;
    u32_t.conflict type:4;
    u32_t.conflict state:4;
    u32_t.conflict mode:1;
    u32_t.conflict unused:15;
    union anon_union_for_field_7 field_7;
};

struct k_poll_signal {
    sys_dlist_t poll_events;
    uint signaled;
    int result;
};

struct _poller {
};

typedef enum _poll_types_bits {
    _POLL_NUM_TYPES=4,
    _POLL_TYPE_DATA_AVAILABLE=3,
    _POLL_TYPE_IGNORE=0,
    _POLL_TYPE_SEM_AVAILABLE=2,
    _POLL_TYPE_SIGNAL=1
} _poll_types_bits;

typedef enum _poll_states_bits {
    _POLL_NUM_STATES=4,
    _POLL_STATE_DATA_AVAILABLE=3,
    _POLL_STATE_NOT_READY=0,
    _POLL_STATE_SEM_AVAILABLE=2,
    _POLL_STATE_SIGNALED=1
} _poll_states_bits;

typedef enum k_poll_modes {
    K_POLL_MODE_NOTIFY_ONLY=0,
    K_POLL_NUM_MODES=1
} k_poll_modes;

typedef struct rfc_status_tag.conflict rfc_status_tag.conflict, *Prfc_status_tag.conflict;

struct rfc_status_tag.conflict {
    uint32_t pkdet_out_raw:1;
    uint32_t dig_xtal_clk_dbg:1;
    uint32_t clk_ble_16m_dbg:1;
    uint32_t clk_rc_dbg0:1;
    uint32_t clk_adcpow_dbg:1;
    uint32_t clk_fetx_dbg:1;
    uint32_t clk_ferx_dbg:1;
    uint32_t clkpll_postdiv_outclk_dbg:1;
    uint32_t clk_soc_480m_dbg:1;
    uint32_t clk_soc_240m_dbg:1;
    uint32_t clk_soc_192m_dbg:1;
    uint32_t clk_soc_160m_dbg:1;
    uint32_t clk_soc_120m_dbg:1;
    uint32_t clk_soc_96m_dbg:1;
    uint32_t clk_soc_80m_dbg:1;
    uint32_t clk_soc_48m_dbg:1;
    uint32_t clk_soc_32m_dbg:1;
    uint32_t pad_pkdet_out:1;
    uint32_t pad_agc_ctrl:10;
    uint32_t rf_pkdet_rst_hw:1;
    uint32_t rf_cbw_wifi:2;
    uint32_t lo_unlocked:1;
    uint32_t fsm_pu_txbuf:1;
    uint32_t fsm_pu_rxbuf:1;
    uint32_t fsm_pu_tosdac:1;
    uint32_t fsm_pu_dac:1;
    uint32_t fsm_trsw_en:1;
    uint32_t fsm_pu_adc:1;
    uint32_t fsm_pu_pkdet:1;
    uint32_t fsm_pu_rbb:1;
    uint32_t fsm_pu_rmx:1;
    uint32_t fsm_pu_rmxgm:1;
    uint32_t fsm_pu_lna:1;
    uint32_t clk_rc_dbg2:1;
    uint32_t rf_lna_ind_hw:4;
    uint32_t rf_rbb_ind_hw:4;
    uint32_t rf_tx_pow_lvl_hw:4;
    uint32_t rf_rc_lo_rdy:1;
    uint32_t rf_fsm_state:3;
    uint32_t rf_rc_state:3;
    uint32_t clk_rc_dbg:1;
};

typedef struct rfc_status_tag rfc_status_tag, *Prfc_status_tag;

struct rfc_status_tag {
    uint32_t pkdet_out_raw:1;
    uint32_t dig_xtal_clk_dbg:1;
    uint32_t clk_ble_16m_dbg:1;
    uint32_t clk_rc_dbg0:1;
    uint32_t clk_adcpow_dbg:1;
    uint32_t clk_fetx_dbg:1;
    uint32_t clk_ferx_dbg:1;
    uint32_t clkpll_postdiv_outclk_dbg:1;
    uint32_t clk_soc_480m_dbg:1;
    uint32_t clk_soc_240m_dbg:1;
    uint32_t clk_soc_192m_dbg:1;
    uint32_t clk_soc_160m_dbg:1;
    uint32_t clk_soc_120m_dbg:1;
    uint32_t clk_soc_96m_dbg:1;
    uint32_t clk_soc_80m_dbg:1;
    uint32_t clk_soc_48m_dbg:1;
    uint32_t clk_soc_32m_dbg:1;
    uint32_t pad_pkdet_out:1;
    uint32_t pad_agc_ctrl:10;
    uint32_t rf_pkdet_rst_hw:1;
    uint32_t rf_cbw_wifi:2;
    uint32_t lo_unlocked:1;
    uint32_t fsm_pu_txbuf:1;
    uint32_t fsm_pu_rxbuf:1;
    uint32_t fsm_pu_tosdac:1;
    uint32_t fsm_pu_dac:1;
    uint32_t fsm_trsw_en:1;
    uint32_t fsm_pu_adc:1;
    uint32_t fsm_pu_pkdet:1;
    uint32_t fsm_pu_rbb:1;
    uint32_t fsm_pu_rmx:1;
    uint32_t fsm_pu_rmxgm:1;
    uint32_t fsm_pu_lna:1;
    uint32_t clk_rc_dbg2:1;
    uint32_t rf_lna_ind_hw:4;
    uint32_t rf_rbb_ind_hw:4;
    uint32_t rf_tx_pow_lvl_hw:4;
    uint32_t rf_rc_lo_rdy:1;
    uint32_t rf_fsm_state:3;
    uint32_t rf_rc_state:3;
    uint32_t clk_rc_dbg:1;
};

typedef struct tc_aes_key_sched_struct tc_aes_key_sched_struct, *Ptc_aes_key_sched_struct;

struct tc_aes_key_sched_struct {
    uint words[44];
};

typedef struct tc_aes_key_sched_struct * TCAesKeySched_t;

typedef struct Cipher_t Cipher_t, *PCipher_t;

struct Cipher_t {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

typedef struct anon_struct.conflict16 anon_struct.conflict16, *Panon_struct.conflict16;

struct anon_struct.conflict16 {
    uint32_t task;
    uint32_t element;
    uint32_t length;
    uint32_t[0] buf;
};

typedef struct mm_monitor_channel_cfm mm_monitor_channel_cfm, *Pmm_monitor_channel_cfm;

struct mm_monitor_channel_cfm {
    uint32_t status;
    uint32_t freq;
    uint32_t data[8];
};

typedef struct mm_rssi_status_ind mm_rssi_status_ind, *Pmm_rssi_status_ind;

struct mm_rssi_status_ind {
    u8_l vif_index;
    bool_l rssi_status;
    s8_l rssi;
};

typedef union anon_union.conflict16 anon_union.conflict16, *Panon_union.conflict16;

union anon_union.conflict16 {
    undefined1 get; // Data type larger than union's declared size: anon_struct[1]
    undefined1 reset; // Data type larger than union's declared size: anon_struct[1]
    undefined1 set; // Data type larger than union's declared size: anon_struct[1]
};

typedef struct mm_channel_switch_ind mm_channel_switch_ind, *Pmm_channel_switch_ind;

struct mm_channel_switch_ind {
    u8_l chan_index;
    bool_l roc;
    u8_l vif_index;
    bool_l roc_tdls;
};

typedef struct phy_cfg_tag phy_cfg_tag, *Pphy_cfg_tag;

struct phy_cfg_tag {
    u32_l parameters[16];
};

typedef struct me_chan_config_req me_chan_config_req, *Pme_chan_config_req;

struct me_chan_config_req {
    struct scan_chan_tag chan2G4[14];
    struct scan_chan_tag chan5G[28];
    u8_l chan2G4_cnt;
    u8_l chan5G_cnt;
};

typedef enum apm_msg_tag {
    APM_CONF_MAX_STA_CFM=7182,
    APM_CONF_MAX_STA_REQ=7181,
    APM_MAX=7183,
    APM_START_CAC_CFM=7173,
    APM_START_CAC_REQ=7172,
    APM_START_CFM=7169,
    APM_START_REQ=7168,
    APM_STA_ADD_IND=7176,
    APM_STA_CONNECT_TIMEOUT_IND=7178,
    APM_STA_DEL_CFM=7180,
    APM_STA_DEL_IND=7177,
    APM_STA_DEL_REQ=7179,
    APM_STOP_CAC_CFM=7175,
    APM_STOP_CAC_REQ=7174,
    APM_STOP_CFM=7171,
    APM_STOP_REQ=7170
} apm_msg_tag;

typedef struct mm_set_channel_req mm_set_channel_req, *Pmm_set_channel_req;

struct mm_set_channel_req {
    u8_l band;
    u8_l type;
    u16_l prim20_freq;
    u16_l center1_freq;
    u16_l center2_freq;
    u8_l index;
    s8_l tx_power;
};

typedef enum sm_msg_tag {
    SM_CONNECT_CFM=6145,
    SM_CONNECT_IND=6146,
    SM_CONNECT_REQ=6144,
    SM_DISCONNECT_CFM=6148,
    SM_DISCONNECT_IND=6149,
    SM_DISCONNECT_REQ=6147,
    SM_MAX=6151,
    SM_RSP_TIMEOUT_IND=6150
} sm_msg_tag;

typedef struct scanu_raw_send_cfm scanu_raw_send_cfm, *Pscanu_raw_send_cfm;

struct scanu_raw_send_cfm {
    uint32_t status;
};

typedef struct anon_struct.conflict31 anon_struct.conflict31, *Panon_struct.conflict31;

struct anon_struct.conflict31 {
    uint32_t task;
    uint32_t element;
};

typedef struct mm_monitor_req mm_monitor_req, *Pmm_monitor_req;

struct mm_monitor_req {
    uint32_t enable;
};

typedef struct apm_sta_add_ind apm_sta_add_ind, *Papm_sta_add_ind;

struct apm_sta_add_ind {
    uint32_t flags;
    struct mac_addr sta_addr;
    uint8_t vif_idx;
    uint8_t sta_idx;
    int8_t rssi;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t tsflo;
    uint32_t tsfhi;
    uint8_t data_rate;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
};

typedef struct apm_sta_del_req apm_sta_del_req, *Papm_sta_del_req;

struct apm_sta_del_req {
    u8_l vif_idx;
    u8_l sta_idx;
};

typedef struct me_rc_set_rate_req me_rc_set_rate_req, *Pme_rc_set_rate_req;

struct me_rc_set_rate_req {
    u8_l sta_idx;
    undefined field_0x1;
    u16_l fixed_rate_cfg;
};

typedef u16 lmac_msg_id_t;

typedef struct mm_set_channel_cfm mm_set_channel_cfm, *Pmm_set_channel_cfm;

struct mm_set_channel_cfm {
    u8_l radio_idx;
    s8_l power;
};

typedef struct me_config_req me_config_req, *Pme_config_req;

struct me_config_req {
    struct mac_htcapability ht_cap;
    struct mac_vhtcapability vht_cap;
    u16_l tx_lft;
    bool_l ht_supp;
    bool_l vht_supp;
    bool_l ps_on;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
};

typedef struct mm_add_if_req mm_add_if_req, *Pmm_add_if_req;

struct mm_add_if_req {
    u8_l type;
    struct mac_addr addr;
    bool_l p2p;
};

typedef struct mm_monitor_cfm mm_monitor_cfm, *Pmm_monitor_cfm;

struct mm_monitor_cfm {
    uint32_t status;
    uint32_t enable;
    uint32_t data[8];
};

typedef struct lmac_msg lmac_msg, *Plmac_msg;

typedef u16 lmac_task_id_t;

struct lmac_msg {
    lmac_msg_id_t id;
    lmac_task_id_t dest_id;
    lmac_task_id_t src_id;
    u16 param_len;
    u32[0] param;
};

typedef struct scanu_raw_send_req scanu_raw_send_req, *Pscanu_raw_send_req;

struct scanu_raw_send_req {
    void * pkt;
    uint32_t len;
};

typedef struct apm_start_req apm_start_req, *Papm_start_req;

struct apm_start_req {
    struct mac_rateset basic_rates;
    undefined field_0xd;
    struct scan_chan_tag chan;
    u32_l center_freq1;
    u32_l center_freq2;
    u8_l ch_width;
    u8_l hidden_ssid;
    undefined field_0x1e;
    undefined field_0x1f;
    u32_l bcn_addr;
    u16_l bcn_len;
    u16_l tim_oft;
    u16_l bcn_int;
    undefined field_0x2a;
    undefined field_0x2b;
    u32_l flags;
    u16_l ctrl_port_ethertype;
    u8_l tim_len;
    u8_l vif_idx;
    _Bool apm_emb_enabled;
    struct mac_rateset rate_set;
    uint8_t beacon_period;
    uint8_t qos_supported;
    struct mac_ssid ssid;
    uint8_t ap_sec_type;
    uint8_t phrase[64];
    undefined field_0xa7;
};

typedef struct apm_stop_req apm_stop_req, *Papm_stop_req;

struct apm_stop_req {
    u8_l vif_idx;
};

typedef struct mm_set_ps_mode_req mm_set_ps_mode_req, *Pmm_set_ps_mode_req;

struct mm_set_ps_mode_req {
    u8_l new_state;
};

typedef struct sm_connect_ind sm_connect_ind, *Psm_connect_ind;

struct sm_connect_ind {
    u16_l status_code;
    struct mac_addr bssid;
    bool_l roamed;
    u8_l vif_idx;
    u8_l ap_idx;
    u8_l ch_idx;
    bool_l qos;
    u8_l acm;
    u16_l assoc_req_ie_len;
    u16_l assoc_rsp_ie_len;
    undefined field_0x12;
    undefined field_0x13;
    u32_l assoc_ie_buf[200];
    u16_l aid;
    u8_l band;
    undefined field_0x337;
    u16_l center_freq;
    u8_l width;
    undefined field_0x33b;
    u32_l center_freq1;
    u32_l center_freq2;
    u32_l ac_param[4];
};

typedef struct apm_sta_del_cfm apm_sta_del_cfm, *Papm_sta_del_cfm;

struct apm_sta_del_cfm {
    u8_l status;
    u8_l vif_idx;
    u8_l sta_idx;
};

typedef struct anon_struct.conflict32 anon_struct.conflict32, *Panon_struct.conflict32;

struct anon_struct.conflict32 {
    uint32_t task;
    uint32_t element;
    uint32_t type;
    uint32_t length;
    uint32_t[0] buf;
};

typedef struct sm_disconnect_req sm_disconnect_req, *Psm_disconnect_req;

struct sm_disconnect_req {
    u16_l reason_code;
    u8_l vif_idx;
    undefined field_0x3;
};

typedef struct anon_struct.conflict33 anon_struct.conflict33, *Panon_struct.conflict33;

struct anon_struct.conflict33 {
    uint32_t task;
    uint32_t element;
    uint32_t length;
    uint32_t[0] buf;
};

typedef struct sm_connect_req sm_connect_req, *Psm_connect_req;

struct sm_connect_req {
    struct mac_ssid ssid;
    struct mac_addr bssid;
    struct scan_chan_tag chan;
    undefined field_0x2e;
    undefined field_0x2f;
    u32_l flags;
    u16_l ctrl_port_ethertype;
    u16_l ie_len;
    u16_l listen_interval;
    bool_l dont_wait_bcmc;
    u8_l auth_type;
    u8_l uapsd_queues;
    u8_l vif_idx;
    undefined field_0x3e;
    undefined field_0x3f;
    u32_l ie_buf[64];
    _Bool is_supplicant_enabled;
    uint8_t phrase[64];
    uint8_t phrase_pmk[64];
    undefined field_0x1c1;
    undefined field_0x1c2;
    undefined field_0x1c3;
};

typedef struct sm_connect_cfm sm_connect_cfm, *Psm_connect_cfm;

struct sm_connect_cfm {
    u8_l status;
};

typedef enum cfg_msg_tag {
    CFG_MAX=12290,
    CFG_START_CFM=12289,
    CFG_START_REQ=12288
} cfg_msg_tag;

typedef struct anon_struct.conflict28 anon_struct.conflict28, *Panon_struct.conflict28;

struct anon_struct.conflict28 {
    uint32_t task;
    uint32_t element;
    uint32_t length;
    uint32_t[0] buf;
};

typedef enum dbg_msg_tag {
    DBG_ERROR_IND=1032,
    DBG_GET_SYS_STAT_CFM=1034,
    DBG_GET_SYS_STAT_REQ=1033,
    DBG_MAX=1035,
    DBG_MEM_READ_CFM=1025,
    DBG_MEM_READ_REQ=1024,
    DBG_MEM_WRITE_CFM=1027,
    DBG_MEM_WRITE_REQ=1026,
    DBG_SET_MOD_FILTER_CFM=1029,
    DBG_SET_MOD_FILTER_REQ=1028,
    DBG_SET_SEV_FILTER_CFM=1031,
    DBG_SET_SEV_FILTER_REQ=1030,
    DBG_SYS_STAT_TIMER=1035
} dbg_msg_tag;

typedef struct cfg_start_req cfg_start_req, *Pcfg_start_req;

struct cfg_start_req { // Missing member u : anon_union_for_u at offset 0x4 [exceeds parent struct len]
    uint32_t ops;
};

typedef struct scanu_result_ind scanu_result_ind, *Pscanu_result_ind;

struct scanu_result_ind {
    uint16_t length;
    uint16_t framectrl;
    uint16_t center_freq;
    uint8_t band;
    uint8_t sta_idx;
    uint8_t inst_nbr;
    uint8_t sa[6];
    undefined field_0xf;
    uint32_t tsflo;
    uint32_t tsfhi;
    int8_t rssi;
    int8_t ppm_abs;
    int8_t ppm_rel;
    uint8_t data_rate;
    uint32_t[0] payload;
};

typedef struct apm_start_cfm apm_start_cfm, *Papm_start_cfm;

struct apm_start_cfm {
    u8_l status;
    u8_l vif_idx;
    u8_l ch_idx;
    u8_l bcmc_idx;
};

typedef struct apm_sta_del_ind apm_sta_del_ind, *Papm_sta_del_ind;

struct apm_sta_del_ind {
    uint8_t sta_idx;
};

typedef enum mm_msg_tag {
    MM_ADD_IF_CFM=7,
    MM_ADD_IF_REQ=6,
    MM_BA_ADD_CFM=41,
    MM_BA_ADD_REQ=40,
    MM_BA_DEL_CFM=43,
    MM_BA_DEL_REQ=42,
    MM_BCN_CHANGE_CFM=64,
    MM_BCN_CHANGE_REQ=63,
    MM_BFMER_ENABLE_REQ=80,
    MM_CFG_RSSI_REQ=86,
    MM_CHANNEL_PRE_SWITCH_IND=69,
    MM_CHANNEL_SURVEY_IND=79,
    MM_CHANNEL_SWITCH_IND=68,
    MM_CHAN_CTXT_ADD_CFM=52,
    MM_CHAN_CTXT_ADD_REQ=51,
    MM_CHAN_CTXT_DEL_CFM=54,
    MM_CHAN_CTXT_DEL_REQ=53,
    MM_CHAN_CTXT_LINK_CFM=56,
    MM_CHAN_CTXT_LINK_REQ=55,
    MM_CHAN_CTXT_SCHED_CFM=62,
    MM_CHAN_CTXT_SCHED_REQ=61,
    MM_CHAN_CTXT_UNLINK_CFM=58,
    MM_CHAN_CTXT_UNLINK_REQ=57,
    MM_CHAN_CTXT_UPDATE_CFM=60,
    MM_CHAN_CTXT_UPDATE_REQ=59,
    MM_CONNECTION_LOSS_IND=67,
    MM_CSA_COUNTER_IND=78,
    MM_CSA_FINISH_IND=88,
    MM_CSA_TRAFFIC_IND=89,
    MM_DENOISE_REQ=48,
    MM_KEY_ADD_CFM=37,
    MM_KEY_ADD_REQ=36,
    MM_KEY_DEL_CFM=39,
    MM_KEY_DEL_REQ=38,
    MM_MAX=96,
    MM_MONITOR_CFM=93,
    MM_MONITOR_CHANNEL_CFM=95,
    MM_MONITOR_CHANNEL_REQ=94,
    MM_MONITOR_REQ=92,
    MM_MU_GROUP_UPDATE_CFM=91,
    MM_MU_GROUP_UPDATE_REQ=90,
    MM_P2P_NOA_UPD_IND=85,
    MM_P2P_VIF_PS_CHANGE_IND=77,
    MM_PRIMARY_TBTT_IND=44,
    MM_PS_CHANGE_IND=73,
    MM_REMAIN_ON_CHANNEL_CFM=71,
    MM_REMAIN_ON_CHANNEL_EXP_IND=72,
    MM_REMAIN_ON_CHANNEL_REQ=70,
    MM_REMOVE_IF_CFM=9,
    MM_REMOVE_IF_REQ=8,
    MM_RESET_CFM=1,
    MM_RESET_REQ=0,
    MM_RSSI_STATUS_IND=87,
    MM_SECONDARY_TBTT_IND=45,
    MM_SET_BASIC_RATES_CFM=23,
    MM_SET_BASIC_RATES_REQ=22,
    MM_SET_BEACON_INT_CFM=21,
    MM_SET_BEACON_INT_REQ=20,
    MM_SET_BSSID_CFM=25,
    MM_SET_BSSID_REQ=24,
    MM_SET_CHANNEL_CFM=17,
    MM_SET_CHANNEL_REQ=16,
    MM_SET_DTIM_CFM=19,
    MM_SET_DTIM_REQ=18,
    MM_SET_EDCA_CFM=27,
    MM_SET_EDCA_REQ=26,
    MM_SET_FILTER_CFM=15,
    MM_SET_FILTER_REQ=14,
    MM_SET_IDLE_CFM=35,
    MM_SET_IDLE_REQ=34,
    MM_SET_MODE_CFM=29,
    MM_SET_MODE_REQ=28,
    MM_SET_P2P_NOA_CFM=83,
    MM_SET_P2P_NOA_REQ=81,
    MM_SET_P2P_OPPPS_CFM=84,
    MM_SET_P2P_OPPPS_REQ=82,
    MM_SET_POWER_CFM=47,
    MM_SET_POWER_REQ=46,
    MM_SET_PS_MODE_CFM=50,
    MM_SET_PS_MODE_REQ=49,
    MM_SET_PS_OPTIONS_CFM=76,
    MM_SET_PS_OPTIONS_REQ=75,
    MM_SET_SLOTTIME_CFM=33,
    MM_SET_SLOTTIME_REQ=32,
    MM_SET_VIF_STATE_CFM=31,
    MM_SET_VIF_STATE_REQ=30,
    MM_START_CFM=3,
    MM_START_REQ=2,
    MM_STA_ADD_CFM=11,
    MM_STA_ADD_REQ=10,
    MM_STA_DEL_CFM=13,
    MM_STA_DEL_REQ=12,
    MM_TIM_UPDATE_CFM=66,
    MM_TIM_UPDATE_REQ=65,
    MM_TRAFFIC_REQ_IND=74,
    MM_VERSION_CFM=5,
    MM_VERSION_REQ=4
} mm_msg_tag;

typedef struct mm_monitor_channel_req mm_monitor_channel_req, *Pmm_monitor_channel_req;

struct mm_monitor_channel_req {
    uint32_t freq;
    uint32_t use_40Mhz;
    uint32_t higher_band;
};

typedef struct mm_set_denoise_req mm_set_denoise_req, *Pmm_set_denoise_req;

struct mm_set_denoise_req {
    u8_l denoise_mode;
};

typedef struct mm_start_req mm_start_req, *Pmm_start_req;

struct mm_start_req {
    struct phy_cfg_tag phy_cfg;
    u32_l uapsd_timeout;
    u16_l lp_clk_accuracy;
    undefined field_0x46;
    undefined field_0x47;
};

typedef struct apm_conf_max_sta_req apm_conf_max_sta_req, *Papm_conf_max_sta_req;

struct apm_conf_max_sta_req {
    u8_l max_sta_supported;
};

typedef struct sm_disconnect_ind sm_disconnect_ind, *Psm_disconnect_ind;

struct sm_disconnect_ind {
    u16_l reason_code;
    u8_l vif_idx;
    bool_l ft_over_ds;
};

typedef struct mm_remove_if_req mm_remove_if_req, *Pmm_remove_if_req;

struct mm_remove_if_req {
    u8_l inst_nbr;
};

typedef struct mm_version_cfm mm_version_cfm, *Pmm_version_cfm;

struct mm_version_cfm {
    u32_l version_lmac;
    u32_l version_machw_1;
    u32_l version_machw_2;
    u32_l version_phy_1;
    u32_l version_phy_2;
    u32_l features;
};

typedef struct anon_struct.conflict62 anon_struct.conflict62, *Panon_struct.conflict62;

struct anon_struct.conflict62 {
    uint32_t task;
    uint32_t element;
    uint32_t length;
    uint32_t[0] buf;
};

typedef struct mm_add_if_cfm mm_add_if_cfm, *Pmm_add_if_cfm;

struct mm_add_if_cfm {
    u8_l status;
    u8_l inst_nbr;
};

typedef enum tdls_msg_tag {
    TDLS_CANCEL_CHAN_SWITCH_CFM=3077,
    TDLS_CANCEL_CHAN_SWITCH_REQ=3076,
    TDLS_CHAN_SWITCH_BASE_IND=3075,
    TDLS_CHAN_SWITCH_CFM=3073,
    TDLS_CHAN_SWITCH_IND=3074,
    TDLS_CHAN_SWITCH_REQ=3072,
    TDLS_MAX=3081,
    TDLS_PEER_PS_IND=3078,
    TDLS_PEER_TRAFFIC_IND_CFM=3080,
    TDLS_PEER_TRAFFIC_IND_REQ=3079
} tdls_msg_tag;

typedef enum mesh_msg_tag {
    MESH_MAX=9232,
    MESH_PATH_CREATE_CFM=9225,
    MESH_PATH_CREATE_REQ=9224,
    MESH_PATH_UPDATE_CFM=9227,
    MESH_PATH_UPDATE_IND=9230,
    MESH_PATH_UPDATE_REQ=9226,
    MESH_PEER_INFO_REQ=9222,
    MESH_PEER_INFO_RSP=9223,
    MESH_PEER_UPDATE_IND=9229,
    MESH_PEER_UPDATE_NTF=9229,
    MESH_PROXY_ADD_REQ=9228,
    MESH_PROXY_UPDATE_IND=9231,
    MESH_START_CFM=9217,
    MESH_START_REQ=9216,
    MESH_STOP_CFM=9219,
    MESH_STOP_REQ=9218,
    MESH_UPDATE_CFM=9221,
    MESH_UPDATE_REQ=9220
} mesh_msg_tag;

typedef struct adc_ctx adc_ctx, *Padc_ctx;

typedef struct adc_ctx adc_ctx_t;

struct adc_ctx {
    int mode;
    uint32_t * channel_data;
    void * adc_lli;
    int lli_flag;
    uint32_t chan_init_table;
    uint32_t data_size;
    void (* cb)(int, uint32_t *, uint32_t);
};


// WARNING! conflicting data type names: /DWARF/cli.c/handle_input/anon_struct - /DWARF/reent.h/anon_struct

typedef enum llc_instant_state {
    LLC_INSTANT_ACCEPTED=1,
    LLC_INSTANT_COLLISION=2,
    LLC_INSTANT_IGNORED=0,
    LLC_INSTANT_MIC_FAILURE=4,
    LLC_INSTANT_PASSED=3,
    LLC_INSTANT_REJECT=5
} llc_instant_state;

typedef struct llcp_pdu_handler_info.conflict llcp_pdu_handler_info.conflict, *Pllcp_pdu_handler_info.conflict;

typedef union llcp_pdu llcp_pdu, *Pllcp_pdu;

typedef struct llcp_con_upd_ind llcp_con_upd_ind, *Pllcp_con_upd_ind;

typedef struct llcp_channel_map_ind llcp_channel_map_ind, *Pllcp_channel_map_ind;

typedef struct llcp_terminate_ind llcp_terminate_ind, *Pllcp_terminate_ind;

typedef struct llcp_enc_req llcp_enc_req, *Pllcp_enc_req;

typedef struct llcp_enc_rsp llcp_enc_rsp, *Pllcp_enc_rsp;

typedef struct llcp_start_enc_req llcp_start_enc_req, *Pllcp_start_enc_req;

typedef struct llcp_start_enc_rsp llcp_start_enc_rsp, *Pllcp_start_enc_rsp;

typedef struct llcp_unknown_rsp llcp_unknown_rsp, *Pllcp_unknown_rsp;

typedef struct llcp_feats_req llcp_feats_req, *Pllcp_feats_req;

typedef struct llcp_feats_rsp llcp_feats_rsp, *Pllcp_feats_rsp;

typedef struct llcp_pause_enc_req llcp_pause_enc_req, *Pllcp_pause_enc_req;

typedef struct llcp_pause_enc_rsp llcp_pause_enc_rsp, *Pllcp_pause_enc_rsp;

typedef struct llcp_vers_ind llcp_vers_ind, *Pllcp_vers_ind;

typedef struct llcp_reject_ind llcp_reject_ind, *Pllcp_reject_ind;

typedef struct llcp_slave_feature_req llcp_slave_feature_req, *Pllcp_slave_feature_req;

typedef struct llcp_con_param_req llcp_con_param_req, *Pllcp_con_param_req;

typedef struct llcp_con_param_rsp llcp_con_param_rsp, *Pllcp_con_param_rsp;

typedef struct llcp_reject_ind_ext llcp_reject_ind_ext, *Pllcp_reject_ind_ext;

typedef struct llcp_ping_req llcp_ping_req, *Pllcp_ping_req;

typedef struct llcp_ping_rsp llcp_ping_rsp, *Pllcp_ping_rsp;

typedef struct llcp_length_req llcp_length_req, *Pllcp_length_req;

typedef struct llcp_length_rsp llcp_length_rsp, *Pllcp_length_rsp;

typedef struct sess_k_div_x sess_k_div_x, *Psess_k_div_x;

typedef struct init_vect init_vect, *Pinit_vect;

struct llcp_con_param_req {
    uint8_t opcode;
    undefined field_0x1;
    uint16_t interval_min;
    uint16_t interval_max;
    uint16_t latency;
    uint16_t timeout;
    uint8_t pref_period;
    undefined field_0xb;
    uint16_t ref_con_event_count;
    uint16_t offset0;
    uint16_t offset1;
    uint16_t offset2;
    uint16_t offset3;
    uint16_t offset4;
    uint16_t offset5;
};

struct llcp_pause_enc_rsp {
    uint8_t opcode;
};

struct llcp_ping_rsp {
    uint8_t opcode;
};

struct llcp_vers_ind {
    uint8_t opcode;
    uint8_t vers;
    uint16_t compid;
    uint16_t subvers;
};

struct llcp_feats_req {
    uint8_t opcode;
    struct le_features feats;
};

struct llcp_start_enc_rsp {
    uint8_t opcode;
};

struct llcp_unknown_rsp {
    uint8_t opcode;
    uint8_t unk_type;
};

struct llcp_con_upd_ind {
    uint8_t opcode;
    uint8_t win_size;
    uint16_t win_off;
    uint16_t interv;
    uint16_t latency;
    uint16_t timeout;
    uint16_t instant;
};

struct init_vect {
    uint8_t iv[4];
};

struct sess_k_div_x {
    uint8_t skdiv[8];
};

struct llcp_enc_req {
    uint8_t opcode;
    struct rand_nb rand;
    uint8_t ediv[2];
    struct sess_k_div_x skdm;
    struct init_vect ivm;
};

struct llcp_terminate_ind {
    uint8_t opcode;
    uint8_t err_code;
};

struct llcp_length_rsp {
    uint8_t opcode;
    undefined field_0x1;
    uint16_t max_rx_octets;
    uint16_t max_rx_time;
    uint16_t max_tx_octets;
    uint16_t max_tx_time;
};

struct llcp_con_param_rsp {
    uint8_t opcode;
    undefined field_0x1;
    uint16_t interval_min;
    uint16_t interval_max;
    uint16_t latency;
    uint16_t timeout;
    uint8_t pref_period;
    undefined field_0xb;
    uint16_t ref_con_event_count;
    uint16_t offset0;
    uint16_t offset1;
    uint16_t offset2;
    uint16_t offset3;
    uint16_t offset4;
    uint16_t offset5;
};

struct llcp_ping_req {
    uint8_t opcode;
};

struct llcp_reject_ind {
    uint8_t opcode;
    uint8_t err_code;
};

struct llcp_channel_map_ind {
    uint8_t opcode;
    struct le_chnl_map ch_map;
    uint16_t instant;
};

struct llcp_feats_rsp {
    uint8_t opcode;
    struct le_features feats;
};

struct llcp_pause_enc_req {
    uint8_t opcode;
};

struct llcp_length_req {
    uint8_t opcode;
    undefined field_0x1;
    uint16_t max_rx_octets;
    uint16_t max_rx_time;
    uint16_t max_tx_octets;
    uint16_t max_tx_time;
};

struct llcp_start_enc_req {
    uint8_t opcode;
};

struct llcp_slave_feature_req {
    uint8_t opcode;
    struct le_features feats;
};

struct llcp_enc_rsp {
    uint8_t opcode;
    struct sess_k_div_x skds;
    struct init_vect ivs;
};

struct llcp_reject_ind_ext {
    uint8_t opcode;
    uint8_t rej_opcode;
    uint8_t err_code;
};

union llcp_pdu {
    uint8_t opcode;
    struct llcp_con_upd_ind con_up_req;
    struct llcp_channel_map_ind channel_map_req;
    struct llcp_terminate_ind terminate_ind;
    struct llcp_enc_req enc_req;
    struct llcp_enc_rsp enc_rsp;
    struct llcp_start_enc_req start_enc_req;
    struct llcp_start_enc_rsp start_enc_rsp;
    struct llcp_unknown_rsp unknown_rsp;
    struct llcp_feats_req feats_req;
    struct llcp_feats_rsp feats_rsp;
    struct llcp_pause_enc_req pause_enc_req;
    struct llcp_pause_enc_rsp pause_enc_rsp;
    struct llcp_vers_ind vers_ind;
    struct llcp_reject_ind reject_ind;
    struct llcp_slave_feature_req slave_feature_req;
    struct llcp_con_param_req con_param_req;
    struct llcp_con_param_rsp con_param_rsp;
    struct llcp_reject_ind_ext reject_ind_ext;
    struct llcp_ping_req ping_req;
    struct llcp_ping_rsp ping_rsp;
    struct llcp_length_req length_req;
    struct llcp_length_rsp length_rsp;
};

struct llcp_pdu_handler_info.conflict {
    int (* handler)(uint16_t, ke_task_id_t, _Bool, union llcp_pdu *);
    _Bool int_ctx_allowed;
    uint8_t enc_auth;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct llcp_pdu_handler_info.conflict1 llcp_pdu_handler_info.conflict1, *Pllcp_pdu_handler_info.conflict1;

struct llcp_pdu_handler_info.conflict1 {
    int (* handler)(uint16_t, ke_task_id_t, _Bool, union llcp_pdu *);
    _Bool int_ctx_allowed;
    uint8_t enc_auth;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct llcp_pdu_handler_info llcp_pdu_handler_info, *Pllcp_pdu_handler_info;

struct llcp_pdu_handler_info {
    int (* handler)(uint16_t, ke_task_id_t, _Bool, union llcp_pdu *);
    _Bool int_ctx_allowed;
    uint8_t enc_auth;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct llcp_pdu_handler_info.conflict2 llcp_pdu_handler_info.conflict2, *Pllcp_pdu_handler_info.conflict2;

struct llcp_pdu_handler_info.conflict2 {
    int (* handler)(uint16_t, ke_task_id_t, _Bool, union llcp_pdu *);
    _Bool int_ctx_allowed;
    uint8_t enc_auth;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct cli_command cli_command, *Pcli_command;

struct cli_command {
    char * name;
    char * help;
    void (* function)(char *, int, int, char * *);
};

typedef struct cli_st cli_st, *Pcli_st;

struct cli_st {
    int initialized;
    int echo_disabled;
    struct cli_command * static_cmds;
    struct cli_command * dynamic_cmds[8];
    uint num_static_cmds;
    uint num_commands;
    uint bp;
    char inbuf[256];
    char * outbuf;
    int his_idx;
    int his_cur;
    char history[256];
};

typedef struct pmkElement_t pmkElement_t, *PpmkElement_t;

typedef union anon_union_for_key anon_union_for_key, *Panon_union_for_key;

union anon_union_for_key {
    IEEEtypes_MacAddr_t Bssid;
    char Ssid[32];
};

struct pmkElement_t {
    union anon_union_for_key key;
    UINT8 PMK[32];
    UINT8 length;
    UINT8 psk_length;
    SINT8 replacementRank;
};

typedef struct net_device net_device, *Pnet_device;

typedef struct bl_hw bl_hw, *Pbl_hw;

typedef struct bl_cmd_mgr bl_cmd_mgr, *Pbl_cmd_mgr;

typedef struct bl_cmd bl_cmd, *Pbl_cmd;

typedef struct bl_stats bl_stats, *Pbl_stats;

typedef struct bl_vif bl_vif, *Pbl_vif;

typedef struct bl_sta bl_sta, *Pbl_sta;

typedef struct bl_mod_params bl_mod_params, *Pbl_mod_params;

typedef enum RWNX_INTERFACE_STATUS {
    RWNX_INTERFACE_STATUS_DOWN=0,
    RWNX_INTERFACE_STATUS_UP=1
} RWNX_INTERFACE_STATUS;

typedef enum bl_cmd_mgr_state {
    RWNX_CMD_MGR_STATE_CRASHED=2,
    RWNX_CMD_MGR_STATE_DEINIT=0,
    RWNX_CMD_MGR_STATE_INITED=1
} bl_cmd_mgr_state;

typedef SemaphoreHandle_t os_mutex_t;

typedef struct xSTATIC_EVENT_GROUP xSTATIC_EVENT_GROUP, *PxSTATIC_EVENT_GROUP;

typedef struct xSTATIC_EVENT_GROUP StaticEventGroup_t;

typedef StaticEventGroup_t os_event_t;

typedef struct net_device_stats net_device_stats, *Pnet_device_stats;

typedef union anon_union_for_field_13 anon_union_for_field_13, *Panon_union_for_field_13;

typedef struct xSTATIC_LIST xSTATIC_LIST, *PxSTATIC_LIST;

typedef struct xSTATIC_LIST StaticList_t;

typedef struct anon_struct.conflict25 anon_struct.conflict25, *Panon_struct.conflict25;

typedef struct anon_struct.conflict26 anon_struct.conflict26, *Panon_struct.conflict26;

typedef struct anon_struct.conflict27 anon_struct.conflict27, *Panon_struct.conflict27;

typedef struct xSTATIC_MINI_LIST_ITEM xSTATIC_MINI_LIST_ITEM, *PxSTATIC_MINI_LIST_ITEM;

typedef struct xSTATIC_MINI_LIST_ITEM StaticMiniListItem_t;

typedef struct bl_bcn bl_bcn, *Pbl_bcn;

struct bl_bcn {
    u8 * head;
    u8 * tail;
    u8 * ies;
    size_t head_len;
    size_t tail_len;
    size_t ies_len;
    size_t tim_len;
    size_t len;
    u8 dtim;
    undefined field_0x21;
    undefined field_0x22;
    undefined field_0x23;
};

struct bl_mod_params {
    _Bool ht_on;
    _Bool vht_on;
    undefined field_0x2;
    undefined field_0x3;
    int mcs_map;
    _Bool ldpc_on;
    _Bool vht_stbc;
    undefined field_0xa;
    undefined field_0xb;
    int phy_cfg;
    int uapsd_timeout;
    _Bool ap_uapsd_on;
    _Bool sgi;
    _Bool sgi80;
    _Bool use_2040;
    _Bool use_80;
    _Bool custregd;
    undefined field_0x1a;
    undefined field_0x1b;
    int nss;
    _Bool bfmee;
    _Bool bfmer;
    _Bool mesh;
    _Bool murx;
    _Bool mutx;
    _Bool mutx_on;
    undefined field_0x26;
    undefined field_0x27;
    uint roc_dur_max;
    int listen_itv;
    _Bool listen_bcmc;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    int lp_clk_ppm;
    _Bool ps_on;
    undefined field_0x39;
    undefined field_0x3a;
    undefined field_0x3b;
    int tx_lft;
    int amsdu_maxnb;
    int uapsd_queues;
    _Bool tdls;
    undefined field_0x49;
    undefined field_0x4a;
    undefined field_0x4b;
};

struct anon_struct.conflict25 {
    struct bl_sta * ap;
    struct bl_sta * tdls_sta;
};

struct anon_struct.conflict26 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

struct anon_struct.conflict27 {
    struct bl_vif * master;
    struct bl_sta * sta_4a;
};

union anon_union_for_field_13 {
    struct anon_struct.conflict25 sta;
    struct anon_struct.conflict26 ap;
    struct anon_struct.conflict27 ap_vlan;
};

struct net_device_stats {
    ulong rx_packets;
    ulong tx_packets;
    ulong rx_bytes;
    ulong tx_bytes;
    ulong rx_errors;
    ulong tx_errors;
    ulong rx_dropped;
    ulong tx_dropped;
    ulong multicast;
    ulong collisions;
    ulong rx_length_errors;
    ulong rx_over_errors;
    ulong rx_crc_errors;
    ulong rx_frame_errors;
    ulong rx_fifo_errors;
    ulong rx_missed_errors;
    ulong tx_aborted_errors;
    ulong tx_carrier_errors;
    ulong tx_fifo_errors;
    ulong tx_heartbeat_errors;
    ulong tx_window_errors;
    ulong rx_compressed;
    ulong tx_compressed;
};

struct bl_vif {
    struct list_head list;
    struct netif * dev;
    struct bl_hw * bl_hw;
    struct net_device_stats net_stats;
    u8 drv_vif_index;
    u8 vif_index;
    u8 ch_index;
    _Bool up;
    _Bool use_4addr;
    _Bool is_resending;
    _Bool user_mpm;
    _Bool roc_tdls;
    u8 tdls_status;
    undefined field_0x75;
    undefined field_0x76;
    undefined field_0x77;
    union anon_union_for_field_13 field_13;
};

struct net_device {
    struct bl_hw * bl_hw;
};

struct bl_stats {
    int cfm_balance;
    ulong last_rx;
    ulong last_tx;
    int ampdus_tx[64];
    int ampdus_rx[64];
    int ampdus_rx_map[4];
    int ampdus_rx_miss;
    int amsdus_rx[64];
};

struct xSTATIC_MINI_LIST_ITEM {
    TickType_t xDummy2;
    void * pvDummy3[2];
};

struct xSTATIC_LIST {
    UBaseType_t uxDummy2;
    void * pvDummy3;
    StaticMiniListItem_t xDummy4;
};

struct xSTATIC_EVENT_GROUP {
    TickType_t xDummy1;
    StaticList_t xDummy2;
    UBaseType_t uxDummy3;
    uint8_t ucDummy4;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
};

struct bl_cmd {
    struct list_head list;
    lmac_msg_id_t id;
    lmac_msg_id_t reqid;
    struct lmac_msg * a2e_msg;
    char * e2a_msg;
    u32 tkn;
    u16 flags;
    undefined field_0x1a;
    undefined field_0x1b;
    os_event_t complete;
    u32 result;
};

struct bl_cmd_mgr {
    enum bl_cmd_mgr_state state;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    u32 next_tkn;
    u32 queue_sz;
    u32 max_queue_sz;
    struct list_head cmds;
    os_mutex_t lock;
    int (* queue)(struct bl_cmd_mgr *, struct bl_cmd *);
    int (* llind)(struct bl_cmd_mgr *, struct bl_cmd *);
    int (* msgind)(struct bl_cmd_mgr *, struct ipc_e2a_msg *, int (* )(struct bl_hw *, struct bl_cmd *, struct ipc_e2a_msg *));
    void (* print)(struct bl_cmd_mgr *);
    void (* drain)(struct bl_cmd_mgr *);
};

struct bl_sta {
    struct mac_addr sta_addr;
    u16 aid;
    u8 is_used;
    u8 sta_idx;
    u8 vif_idx;
    u8 vlan_idx;
    int8_t rssi;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t tsflo;
    uint32_t tsfhi;
    uint8_t data_rate;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
};

struct bl_hw {
    int is_up;
    struct bl_cmd_mgr cmd_mgr;
    struct ipc_host_env_tag * ipc_env;
    struct bl_stats stats;
    struct list_head vifs;
    struct bl_vif vif_table[12];
    struct bl_sta sta_table[12];
    ulong drv_flags;
    struct mm_version_cfm version_cfm;
    struct bl_mod_params * mod_params;
    enum wiphy_flags flags;
    struct ieee80211_sta_ht_cap ht_cap;
    u8 vif_started;
    undefined field_0xe1b;
    int vif_index_sta;
    int vif_index_ap;
    int sta_idx;
    int ap_bcmc_idx;
    struct phy_cfg_tag phy_config;
    enum RWNX_INTERFACE_STATUS status;
    undefined field_0xe6d;
    undefined field_0xe6e;
    undefined field_0xe6f;
};

typedef struct bl_wifi_ap_info bl_wifi_ap_info, *Pbl_wifi_ap_info;

typedef struct bl_wifi_ap_info bl_wifi_ap_info_t;

struct bl_wifi_ap_info {
    uint8_t ssid[33];
    uint8_t psk[65];
    uint8_t chan;
};

typedef enum ChanBand_e {
    Band_2_4_GHz=0,
    Band_4_GHz=2,
    Band_5_GHz=1
} ChanBand_e;

typedef enum IEEEtypes_ElementId_e {
    ELEM_ID_2040_BSS_COEXISTENCE=72,
    ELEM_ID_2040_BSS_INTOL_CHRPT=73,
    ELEM_ID_AID=-59,
    ELEM_ID_ANTENNA_INFO=64,
    ELEM_ID_AP_CHANNEL_REPORT=51,
    ELEM_ID_BSS_ACCESS_DELAY=63,
    ELEM_ID_BSS_AC_ACCESS_DELAY=68,
    ELEM_ID_BSS_AVAIL_ADM_CAP=67,
    ELEM_ID_BSS_LOAD=11,
    ELEM_ID_BSS_MAX_IDLE_PERIOD=90,
    ELEM_ID_CF_PARAM_SET=4,
    ELEM_ID_CHALLENGE_TEXT=16,
    ELEM_ID_CHANNEL_SWITCH_ANN=37,
    ELEM_ID_CHANNEL_USAGE=97,
    ELEM_ID_COLLOC_INTF_REPORT=96,
    ELEM_ID_COUNTRY=7,
    ELEM_ID_DIAG_REPORT=81,
    ELEM_ID_DIAG_REQUEST=80,
    ELEM_ID_DMS_REQUEST=99,
    ELEM_ID_DMS_RESPONSE=100,
    ELEM_ID_DSE_REGISTERED_LOC=58,
    ELEM_ID_DS_PARAM_SET=3,
    ELEM_ID_EDCA_PARAM_SET=12,
    ELEM_ID_ERP_INFO=42,
    ELEM_ID_EVENT_REPORT=79,
    ELEM_ID_EVENT_REQUEST=78,
    ELEM_ID_EXTENSION=-1,
    ELEM_ID_EXT_ASSOC_DELAY_INFO=1,
    ELEM_ID_EXT_CAPABILITIES=127,
    ELEM_ID_EXT_CHAN_SWITCH_ANN=60,
    ELEM_ID_EXT_ESTIMATED_SERVICE_PARAMS=11,
    ELEM_ID_EXT_EXTENDED_REQUEST=10,
    ELEM_ID_EXT_FILS_HLP_CONTAINER=5,
    ELEM_ID_EXT_FILS_IP_ADDR_ASSIGN=6,
    ELEM_ID_EXT_FILS_KEY_CONFIRM=3,
    ELEM_ID_EXT_FILS_NONCE=13,
    ELEM_ID_EXT_FILS_PUBLIC_KEY=12,
    ELEM_ID_EXT_FILS_REQ_PARAMS=2,
    ELEM_ID_EXT_FILS_SESSION=4,
    ELEM_ID_EXT_FILS_WRAPPED_DATA=8,
    ELEM_ID_EXT_FTM_SYNC_INFO=9,
    ELEM_ID_EXT_FUTURE_CHANNEL_GUIDANCE=14,
    ELEM_ID_EXT_HE_CAPABILITIES=35,
    ELEM_ID_EXT_HE_OPERATION=36,
    ELEM_ID_EXT_KEY_DELIVERY=7,
    ELEM_ID_EXT_OWE_DH_PARAM=32,
    ELEM_ID_EXT_PASSWORD_IDENTIFIER=33,
    ELEM_ID_EXT_SUPPORTED_RATES=50,
    ELEM_ID_FAST_BSS_TRANS=55,
    ELEM_ID_FH_PARAM_SET=2,
    ELEM_ID_FMS_DESCRIPTOR=86,
    ELEM_ID_FMS_REQUEST=87,
    ELEM_ID_FMS_RESPONSE=88,
    ELEM_ID_HOP_PARAM=8,
    ELEM_ID_HOP_TABLE=9,
    ELEM_ID_HT_CAPABILITY=45,
    ELEM_ID_HT_INFORMATION=61,
    ELEM_ID_IBSS_DFS=41,
    ELEM_ID_IBSS_PARAM_SET=6,
    ELEM_ID_LINK_ID=101,
    ELEM_ID_LOCATION_PARAM=82,
    ELEM_ID_MANAGEMENT_MIC=76,
    ELEM_ID_MBSSID_INDEX=85,
    ELEM_ID_MEASUREMENT_REQ=38,
    ELEM_ID_MEASUREMENT_RPT=39,
    ELEM_ID_MEAS_PILOT_TX_INFO=66,
    ELEM_ID_MOBILITY_DOMAIN=54,
    ELEM_ID_MULTI_BSSID=71,
    ELEM_ID_NEIGHBOR_REPORT=52,
    ELEM_ID_NONTRANS_BSSID_CAP=83,
    ELEM_ID_OBSS_SCAN_PARAM=74,
    ELEM_ID_POWER_CAPABILITY=33,
    ELEM_ID_POWER_CONSTRAINT=32,
    ELEM_ID_PTI_CONTROL=105,
    ELEM_ID_PU_BUFFER_STATUS=106,
    ELEM_ID_QOS_CAPABILITY=46,
    ELEM_ID_QOS_TRAFFIC_CAP=89,
    ELEM_ID_QUIET=40,
    ELEM_ID_RCPI=53,
    ELEM_ID_REQUEST=10,
    ELEM_ID_RIC_DATA=57,
    ELEM_ID_RIC_DESCRIPTOR=75,
    ELEM_ID_RRM_ENABLED_CAP=70,
    ELEM_ID_RSN=48,
    ELEM_ID_RSNI=65,
    ELEM_ID_SCHEDULE=15,
    ELEM_ID_SECONDARY_CHAN_OFFSET=62,
    ELEM_ID_SSID=0,
    ELEM_ID_SSID_LIST=84,
    ELEM_ID_SUPPORTED_CHANNELS=36,
    ELEM_ID_SUPPORTED_RATES=1,
    ELEM_ID_SUPPORTED_REGCLASS=59,
    ELEM_ID_TCLAS=14,
    ELEM_ID_TCLAS_PROCESS=44,
    ELEM_ID_TDLS_CS_TIMING=104,
    ELEM_ID_TFS_REQUEST=91,
    ELEM_ID_TFS_RESPONSE=92,
    ELEM_ID_TIM=5,
    ELEM_ID_TIMEOUT_INTERVAL=56,
    ELEM_ID_TIME_ZONE=98,
    ELEM_ID_TIM_BCAST_REQUEST=94,
    ELEM_ID_TIM_BCAST_RESPONSE=95,
    ELEM_ID_TPC_REPORT=35,
    ELEM_ID_TPC_REQUEST=34,
    ELEM_ID_TSPEC=13,
    ELEM_ID_TS_DELAY=43,
    ELEM_ID_VENDOR_SPECIFIC=-35,
    ELEM_ID_VHT_CAPABILITIES=-65,
    ELEM_ID_VHT_OPERATION=-64,
    ELEM_ID_VHT_OP_MODE_NOTIFICATION=-57,
    ELEM_ID_WAKEUP_SCHEDULE=102,
    ELEM_ID_WAPI=68,
    ELEM_ID_WIDE_BAND_CHAN_SW=-63,
    ELEM_ID_WNM_SLEEP_MODE=93,
    SUBELEM_ID_GTK=2,
    SUBELEM_ID_IGTK=4,
    SUBELEM_ID_PMK_R0_KEY_HOLDER_ID=3,
    SUBELEM_ID_PMK_R1_KEY_HOLDER_ID=1,
    SUBELEM_ID_REPORTED_FRAME_BODY=1,
    SUBELEM_ID_REPORTING_DETAIL=2
} IEEEtypes_ElementId_e;

typedef enum Chan2Offset_e {
    SECONDARY_CHAN_ABOVE=1,
    SECONDARY_CHAN_BELOW=3,
    SECONDARY_CHAN_NONE=0
} Chan2Offset_e;

typedef enum IEEEtypes_8021x_CodeType_e {
    IEEE_8021X_CODE_TYPE_FAILURE=4,
    IEEE_8021X_CODE_TYPE_REQUEST=1,
    IEEE_8021X_CODE_TYPE_RESPONSE=2,
    IEEE_8021X_CODE_TYPE_SUCCESS=3
} IEEEtypes_8021x_CodeType_e;

typedef struct IEEEtypes_WPAElement_t IEEEtypes_WPAElement_t, *PIEEEtypes_WPAElement_t;

struct IEEEtypes_WPAElement_t {
    enum IEEEtypes_ElementId_e ElementId;
    IEEEtypes_Len_t Len;
    UINT8 OuiType[4];
    UINT16 Ver;
    UINT8 GrpKeyCipher[4];
    UINT16 PwsKeyCnt;
    UINT8 PwsKeyCipherList[4];
    UINT16 AuthKeyCnt;
    UINT8 AuthKeyList[4];
};

typedef enum IEEEtypes_KDEDataType_e {
    KDE_DATA_TYPE_ERROR=8,
    KDE_DATA_TYPE_GTK=1,
    KDE_DATA_TYPE_IGTK=9,
    KDE_DATA_TYPE_LIFETIME=7,
    KDE_DATA_TYPE_MACADDR=3,
    KDE_DATA_TYPE_NONCE=6,
    KDE_DATA_TYPE_PMKID=4,
    KDE_DATA_TYPE_RESERVED=0,
    KDE_DATA_TYPE_RESERVED2=2,
    KDE_DATA_TYPE_SMK=5
} IEEEtypes_KDEDataType_e;

typedef struct IEEEtypes_RSNCapability_t IEEEtypes_RSNCapability_t, *PIEEEtypes_RSNCapability_t;

struct IEEEtypes_RSNCapability_t {
    UINT8 PreAuth:1;
    UINT8 NoPairwise:1;
    UINT8 PtksaReplayCtr:2;
    UINT8 GtksaReplayCtr:2;
    UINT8 MFPR:1;
    UINT8 MFPC:1;
    UINT8 Reserved_8:1;
    UINT8 PeerkeyEnabled:1;
    UINT8 SppAmsduCap:1;
    UINT8 SppAmsduReq:1;
    UINT8 PBAC:1;
    UINT8 Reserved_13_15:3;
};

typedef struct BandConfig_t BandConfig_t, *PBandConfig_t;

typedef enum ChanWidth_e {
    ChanWidth_10_MHz=1,
    ChanWidth_20_MHz=0,
    ChanWidth_40_MHz=2,
    ChanWidth_80_MHz=3
} ChanWidth_e;

typedef enum ScanMode_e {
    ACS_MODE=1,
    MANUAL_MODE=0
} ScanMode_e;

struct BandConfig_t {
    enum ChanBand_e chanBand:2;
    enum ChanWidth_e chanWidth:2;
    enum Chan2Offset_e chan2Offset:2;
    enum ScanMode_e scanMode:2;
};

typedef struct ether_hdr_t ether_hdr_t, *Pether_hdr_t;

struct ether_hdr_t {
    IEEEtypes_MacAddr_t da;
    IEEEtypes_MacAddr_t sa;
    UINT16 type;
};

typedef struct IEEEtypes_SsIdElement_t IEEEtypes_SsIdElement_t, *PIEEEtypes_SsIdElement_t;

struct IEEEtypes_SsIdElement_t {
    enum IEEEtypes_ElementId_e ElementId;
    IEEEtypes_Len_t Len;
    IEEEtypes_SsId_t SsId;
};

typedef enum IEEEtypes_8021x_PacketType_e {
    IEEE_8021X_PACKET_TYPE_ASF_ALERT=4,
    IEEE_8021X_PACKET_TYPE_EAPOL_KEY=3,
    IEEE_8021X_PACKET_TYPE_EAPOL_LOGOFF=2,
    IEEE_8021X_PACKET_TYPE_EAPOL_START=1,
    IEEE_8021X_PACKET_TYPE_EAP_PACKET=0
} IEEEtypes_8021x_PacketType_e;

typedef struct IEEEtypes_InfoElementHdr_t IEEEtypes_InfoElementHdr_t, *PIEEEtypes_InfoElementHdr_t;

struct IEEEtypes_InfoElementHdr_t {
    enum IEEEtypes_ElementId_e ElementId;
    IEEEtypes_Len_t Len;
};

typedef struct IEEEtypes_RSNElement_t IEEEtypes_RSNElement_t, *PIEEEtypes_RSNElement_t;

struct IEEEtypes_RSNElement_t {
    enum IEEEtypes_ElementId_e ElementId;
    IEEEtypes_Len_t Len;
    UINT16 Ver;
    UINT8 GrpKeyCipher[4];
    UINT16 PwsKeyCnt;
    UINT8 PwsKeyCipherList[4];
    UINT16 AuthKeyCnt;
    UINT8 AuthKeyList[4];
    struct IEEEtypes_RSNCapability_t RsnCap;
    UINT16 PMKIDCnt;
    UINT8 PMKIDList[16];
    UINT8 GrpMgmtCipher[4];
};

typedef struct ChanBandInfo_t ChanBandInfo_t, *PChanBandInfo_t;

struct ChanBandInfo_t {
    struct BandConfig_t bandConfig;
    UINT8 chanNum;
};

typedef struct dns_ans_hdr dns_ans_hdr, *Pdns_ans_hdr;

struct dns_ans_hdr {
    uint16_t id;
    uint16_t flag;
    uint16_t numquestions;
    uint16_t numanswers;
    uint16_t numauthrr;
    uint16_t numextrarr;
};

typedef struct dns_server_ctx dns_server_ctx, *Pdns_server_ctx;

typedef struct udp_pcb udp_pcb, *Pudp_pcb;

struct dns_server_ctx {
    uint8_t name[256];
    uint16_t txid;
    uint16_t nquestions;
    uint16_t nanswers;
    undefined field_0x106;
    undefined field_0x107;
    struct udp_pcb * upcb1;
    ip_addr_t * addr1;
    u16_t port1;
    undefined field_0x112;
    undefined field_0x113;
};

struct udp_pcb {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct udp_pcb * next;
    u8_t flags;
    undefined field_0x11;
    u16_t local_port;
    u16_t remote_port;
    undefined field_0x16;
    undefined field_0x17;
    ip4_addr_t mcast_ip4;
    u8_t mcast_ifindex;
    u8_t mcast_ttl;
    undefined field_0x1e;
    undefined field_0x1f;
    void (* recv)(void *, struct udp_pcb *, struct pbuf *, ip_addr_t *, u16_t);
    void * recv_arg;
};

typedef struct dns_table_entry dns_table_entry, *Pdns_table_entry;

struct dns_table_entry {
    uint16_t txid;
    uint16_t flags;
    uint16_t numque;
    uint16_t ansrrs;
    uint16_t autrrs;
    uint16_t addrrs;
    uint16_t type;
    uint16_t class;
    uint16_t poiname;
    uint16_t anstype;
    uint16_t anstypee;
    uint16_t datalen;
    uint32_t anstime;
    uint32_t adress;
};

typedef struct dns_ans_ans dns_ans_ans, *Pdns_ans_ans;

struct dns_ans_ans {
    uint16_t typ;
    uint16_t cls;
    uint16_t point;
    uint16_t antyp;
    uint16_t antypp;
    uint16_t len;
    uint32_t time;
    uint32_t addr;
};

typedef struct _bl_wifi_env _bl_wifi_env, *P_bl_wifi_env;

struct _bl_wifi_env {
    uint8_t sta_mac_addr_board[6];
    uint8_t sta_mac_addr_usr[6];
    uint8_t ap_mac_addr_board[6];
    uint8_t ap_mac_addr_usr[6];
    uint8_t country_code;
    bl_wifi_ap_info_t ap_info;
    uint8_t ap_info_en;
    bl_wifi_ap_info_t sta_info;
    uint8_t sta_info_en;
};

typedef struct _bl_wifi_env bl_wifi_env_t;

typedef struct tsen_reload_data tsen_reload_data, *Ptsen_reload_data;

typedef struct tsen_reload_data tsen_reload_data_t;

typedef struct xSTATIC_TIMER xSTATIC_TIMER, *PxSTATIC_TIMER;

typedef struct xSTATIC_TIMER StaticTimer_t;

typedef StaticTimer_t os_timer_t;

struct xSTATIC_TIMER {
    void * pvDummy1;
    StaticListItem_t xDummy2;
    TickType_t xDummy3;
    void * pvDummy5;
    void (* pvDummy6)(void *);
    UBaseType_t uxDummy7;
    uint8_t ucDummy8;
    undefined field_0x29;
    undefined field_0x2a;
    undefined field_0x2b;
};

struct tsen_reload_data {
    char name[32];
    os_timer_t timer;
};

typedef struct connectedIPNoData connectedIPNoData, *PconnectedIPNoData;

typedef struct connectedIPNoData connectedIPNoData_t;

struct connectedIPNoData {
    char name[32];
    os_timer_t timer;
};

typedef struct disconnectData disconnectData, *PdisconnectData;

typedef struct wifi_mgmr_profile_msg wifi_mgmr_profile_msg, *Pwifi_mgmr_profile_msg;

typedef struct wifi_mgmr_profile_msg wifi_mgmr_profile_msg_t;

struct wifi_mgmr_profile_msg {
    char ssid[32];
    char ssid_tail[1];
    uint32_t ssid_len;
    char psk[64];
    char psk_tail[1];
    char pmk[64];
    char pmk_tail[1];
    uint32_t psk_len;
    uint32_t pmk_len;
    uint8_t mac[6];
    uint8_t band;
    uint16_t freq;
    uint8_t dhcp_use;
};

struct disconnectData {
    char name[32];
    os_timer_t timer;
    uint8_t timer_started;
    wifi_mgmr_profile_msg_t profile_msg;
    undefined field_0x106;
    undefined field_0x107;
};

typedef struct disconnectData disconnectData_t;

typedef struct cJSON_Hooks cJSON_Hooks, *PcJSON_Hooks;

struct cJSON_Hooks {
    void * (* malloc_fn)(size_t);
    void (* free_fn)(void *);
};

typedef struct cJSON cJSON, *PcJSON;

struct cJSON {
    struct cJSON * next;
    struct cJSON * prev;
    struct cJSON * child;
    int type;
    char * valuestring;
    int valueint;
    double valuedouble;
    char * string;
    undefined field_0x24;
    undefined field_0x25;
    undefined field_0x26;
    undefined field_0x27;
};

typedef struct printbuffer printbuffer, *Pprintbuffer;

struct printbuffer {
    char * buffer;
    int length;
    int offset;
};

typedef struct bam_env_tag bam_env_tag, *Pbam_env_tag;

typedef struct bam_baw bam_baw, *Pbam_baw;

struct bam_baw {
    uint (* idx_compute)(struct bam_baw *, uint);
    uint16_t fsn;
    uint8_t states[64];
    uint8_t fsn_idx;
    uint8_t buf_size;
    uint8_t mask;
    undefined field_0x49;
    undefined field_0x4a;
    undefined field_0x4b;
};

struct bam_env_tag {
    uint32_t pkt_cnt;
    uint32_t last_activity_time;
    uint16_t ssn;
    uint16_t ba_timeout;
    uint8_t sta_idx;
    uint8_t dev_type;
    uint8_t ba_policy;
    uint8_t buffer_size;
    uint8_t tid;
    uint8_t dialog_token;
    uint8_t amsdu;
    uint8_t delba_count;
    struct bam_baw baw;
};

typedef enum HCI_MSG_DEST_LL {
    BLE_CTRL=3,
    BLE_MNG=2,
    BT_BCST=7,
    BT_CTRL_BD_ADDR=6,
    BT_CTRL_CONHDL=5,
    BT_MNG=4,
    CTRL=1,
    DBG=8,
    LL_UNDEF=9,
    MNG=0
} HCI_MSG_DEST_LL;

typedef struct hci_evt_desc_tag hci_evt_desc_tag, *Phci_evt_desc_tag;

struct hci_evt_desc_tag {
    uint8_t code;
    uint8_t dest_field;
    uint8_t special_pack;
    undefined field_0x3;
    void * par_fmt;
};

typedef struct hci_cmd_desc_tab_ref hci_cmd_desc_tab_ref, *Phci_cmd_desc_tab_ref;

typedef struct hci_cmd_desc_tag hci_cmd_desc_tag, *Phci_cmd_desc_tag;

struct hci_cmd_desc_tab_ref {
    uint8_t ogf;
    undefined field_0x1;
    uint16_t nb_cmds;
    struct hci_cmd_desc_tag * cmd_desc_tab;
};

struct hci_cmd_desc_tag {
    uint16_t opcode;
    uint8_t dest_field;
    uint8_t par_size_max;
    void * par_fmt;
    void * ret_par_fmt;
};

typedef enum HCI_MSG_DEST_HL {
    HL_AM0=3,
    HL_CTRL=1,
    HL_DATA=2,
    HL_MNG=0,
    HL_UNDEF=4
} HCI_MSG_DEST_HL;

typedef enum HCI_PACK_STATUS {
    HCI_PACK_ERROR=4,
    HCI_PACK_IN_BUF_OVFLW=1,
    HCI_PACK_OK=0,
    HCI_PACK_OUT_BUF_OVFLW=2,
    HCI_PACK_WRONG_FORMAT=3
} HCI_PACK_STATUS;

typedef struct hci_env_tag hci_env_tag, *Phci_env_tag;

struct hci_env_tag {
    struct evt_mask evt_msk;
    struct evt_mask evt_msk_page_2;
};

typedef uintptr_t mem_ptr_t;

typedef int32_t s32_t.conflict;

typedef struct me_set_ps_disable_req me_set_ps_disable_req, *Pme_set_ps_disable_req;

struct me_set_ps_disable_req {
    _Bool ps_disable;
    uint8_t vif_idx;
};

typedef struct me_rc_stats_cfm me_rc_stats_cfm, *Pme_rc_stats_cfm;

struct me_rc_stats_cfm {
    uint8_t sta_idx;
    undefined field_0x1;
    uint16_t no_samples;
    uint16_t ampdu_len;
    uint16_t ampdu_packets;
    uint32_t avg_ampdu_len;
    uint8_t sw_retry_step;
    uint8_t sample_wait;
    undefined field_0xe;
    undefined field_0xf;
    struct step retry[4];
    struct rc_rate_stats rate_stats[10];
    uint32_t tp[10];
};

typedef struct me_set_control_port_req me_set_control_port_req, *Pme_set_control_port_req;

struct me_set_control_port_req {
    uint8_t sta_idx;
    _Bool control_port_open;
};

typedef struct me_sta_del_req me_sta_del_req, *Pme_sta_del_req;

struct me_sta_del_req {
    uint8_t sta_idx;
    _Bool tdls_sta;
};

typedef struct me_traffic_ind_req me_traffic_ind_req, *Pme_traffic_ind_req;

struct me_traffic_ind_req {
    uint8_t sta_idx;
    uint8_t tx_avail;
    _Bool uapsd;
};

typedef struct me_set_active_req me_set_active_req, *Pme_set_active_req;

struct me_set_active_req {
    _Bool active;
    uint8_t vif_idx;
};

typedef struct me_sta_add_cfm me_sta_add_cfm, *Pme_sta_add_cfm;

struct me_sta_add_cfm {
    uint8_t sta_idx;
    uint8_t status;
    uint8_t pm_state;
};

typedef struct me_tkip_mic_failure_ind me_tkip_mic_failure_ind, *Pme_tkip_mic_failure_ind;

struct me_tkip_mic_failure_ind {
    struct mac_addr.conflict addr;
    undefined field_0x6;
    undefined field_0x7;
    uint64_t tsc;
    _Bool ga;
    uint8_t keyid;
    uint8_t vif_idx;
    undefined field_0x13;
    undefined field_0x14;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct me_rc_stats_req me_rc_stats_req, *Pme_rc_stats_req;

struct me_rc_stats_req {
    uint8_t sta_idx;
};

typedef struct me_sta_add_req me_sta_add_req, *Pme_sta_add_req;

typedef struct mac_addr.conflict73 mac_addr.conflict73, *Pmac_addr.conflict73;

struct mac_addr.conflict73 {
    uint16_t array[3];
};

struct me_sta_add_req {
    struct mac_addr.conflict73 mac_addr;
    struct mac_rateset rate_set;
    undefined field_0x13;
    struct mac_htcapability ht_cap;
    struct mac_vhtcapability vht_cap;
    uint32_t flags;
    uint16_t aid;
    uint8_t uapsd_queues;
    uint8_t max_sp_len;
    uint8_t opmode;
    uint8_t vif_idx;
    _Bool tdls_sta;
    undefined field_0x4b;
    uint32_t tsflo;
    uint32_t tsfhi;
    int8_t rssi;
    uint8_t data_rate;
    undefined field_0x56;
    undefined field_0x57;
};

typedef enum tcp_state {
    CLOSED=0,
    CLOSE_WAIT=7,
    CLOSING=8,
    ESTABLISHED=4,
    FIN_WAIT_1=5,
    FIN_WAIT_2=6,
    LAST_ACK=9,
    LISTEN=1,
    SYN_RCVD=3,
    SYN_SENT=2,
    TIME_WAIT=10
} tcp_state;

typedef u16_t tcpwnd_size_t;

typedef struct bt_att_hdr bt_att_hdr, *Pbt_att_hdr;

struct bt_att_hdr {
    u8_t code;
};

typedef struct bt_att_exchange_mtu_req bt_att_exchange_mtu_req, *Pbt_att_exchange_mtu_req;

struct bt_att_exchange_mtu_req {
    u16_t mtu;
};

typedef struct bt_att_error_rsp bt_att_error_rsp, *Pbt_att_error_rsp;

struct bt_att_error_rsp {
    u8_t request;
    u16_t handle;
    u8_t error;
};

typedef struct bt_att_signed_write_cmd bt_att_signed_write_cmd, *Pbt_att_signed_write_cmd;

struct bt_att_signed_write_cmd {
    u16_t handle;
    u8_t[0] value;
};

typedef struct bt_att_find_info_req bt_att_find_info_req, *Pbt_att_find_info_req;

struct bt_att_find_info_req {
    u16_t start_handle;
    u16_t end_handle;
};

typedef struct bt_att_prepare_write_req bt_att_prepare_write_req, *Pbt_att_prepare_write_req;

struct bt_att_prepare_write_req {
    u16_t handle;
    u16_t offset;
    u8_t[0] value;
};

typedef struct bt_att_read_req bt_att_read_req, *Pbt_att_read_req;

struct bt_att_read_req {
    u16_t handle;
};

typedef struct bt_att_write_req bt_att_write_req, *Pbt_att_write_req;

struct bt_att_write_req {
    u16_t handle;
    u8_t[0] value;
};

typedef struct bt_att_read_group_req bt_att_read_group_req, *Pbt_att_read_group_req;

struct bt_att_read_group_req {
    u16_t start_handle;
    u16_t end_handle;
    u8_t[0] uuid;
};

typedef struct bt_att_write_cmd bt_att_write_cmd, *Pbt_att_write_cmd;

struct bt_att_write_cmd {
    u16_t handle;
    u8_t[0] value;
};

typedef struct bt_att_read_blob_req bt_att_read_blob_req, *Pbt_att_read_blob_req;

struct bt_att_read_blob_req {
    u16_t handle;
    u16_t offset;
};

typedef struct bt_att_find_type_rsp bt_att_find_type_rsp, *Pbt_att_find_type_rsp;

struct bt_att_find_type_rsp { // Missing member list : bt_att_handle_group[1] at offset 0x0 [Unsupported interior flex array: bt_att_handle_group[1]]
};

typedef struct bt_att_notify bt_att_notify, *Pbt_att_notify;

struct bt_att_notify {
    u16_t handle;
    u8_t[0] value;
};

typedef struct bt_att_exchange_mtu_rsp bt_att_exchange_mtu_rsp, *Pbt_att_exchange_mtu_rsp;

struct bt_att_exchange_mtu_rsp {
    u16_t mtu;
};

typedef struct bt_att_read_type_req bt_att_read_type_req, *Pbt_att_read_type_req;

struct bt_att_read_type_req {
    u16_t start_handle;
    u16_t end_handle;
    u8_t[0] uuid;
};

typedef struct bt_att_find_type_req bt_att_find_type_req, *Pbt_att_find_type_req;

struct bt_att_find_type_req {
    u16_t start_handle;
    u16_t end_handle;
    u16_t type;
    u8_t[0] value;
};

typedef struct bt_att_exec_write_req bt_att_exec_write_req, *Pbt_att_exec_write_req;

struct bt_att_exec_write_req {
    u8_t flags;
};

typedef struct bt_att_indicate bt_att_indicate, *Pbt_att_indicate;

struct bt_att_indicate {
    u16_t handle;
    u8_t[0] value;
};

typedef struct wifi_mgmr wifi_mgmr, *Pwifi_mgmr;

typedef struct wifi_mgmr wifi_mgmr_t;

typedef struct wlan_netif wlan_netif, *Pwlan_netif;

typedef enum WIFI_MGMR_CONNECTION_STATUS {
    WIFI_MGMR_CONNECTION_STATUS_CONNECTED_IP_NO=3,
    WIFI_MGMR_CONNECTION_STATUS_CONNECTED_IP_YES=2,
    WIFI_MGMR_CONNECTION_STATUS_CONNECTING=1,
    WIFI_MGMR_CONNECTION_STATUS_DISCONNECTED=4,
    WIFI_MGMR_CONNECTION_STATUS_IDLE=0
} WIFI_MGMR_CONNECTION_STATUS;

typedef enum WIFI_MGMR_CONNECTION_STATUS WIFI_MGMR_CONNECTION_STATUS_T;

typedef struct wifi_mgmr_profile wifi_mgmr_profile, *Pwifi_mgmr_profile;

typedef struct wifi_mgmr_profile wifi_mgmr_profile_t;

typedef struct wifi_mgmr_scan_item wifi_mgmr_scan_item, *Pwifi_mgmr_scan_item;

typedef struct wifi_mgmr_scan_item wifi_mgmr_scan_item_t;

typedef struct xSTATIC_STREAM_BUFFER xSTATIC_STREAM_BUFFER, *PxSTATIC_STREAM_BUFFER;

typedef struct xSTATIC_STREAM_BUFFER StaticStreamBuffer_t;

typedef StaticStreamBuffer_t StaticMessageBuffer_t;

typedef StaticMessageBuffer_t os_messagequeue_t;

typedef struct stateMachine stateMachine, *PstateMachine;

typedef struct wifi_mgmr_connect_ind_stat_info wifi_mgmr_connect_ind_stat_info, *Pwifi_mgmr_connect_ind_stat_info;

typedef struct wifi_mgmr_connect_ind_stat_info wifi_mgmr_connect_ind_stat_info_t;

typedef struct anon_struct_for_ipv4 anon_struct_for_ipv4, *Panon_struct_for_ipv4;


// WARNING! conflicting data type names: /DWARF/wifi_mgmr.h/wlan_netif/anon_union_for_field_5 - /DWARF/hal_desc.h/tx_hd/anon_union_for_field_5

typedef struct state state, *Pstate;

typedef struct event event, *Pevent;

typedef struct transition transition, *Ptransition;

struct wifi_mgmr_connect_ind_stat_info {
    uint16_t status_code;
    uint8_t type_ind;
    char ssid[32];
    char psk[65];
    uint8_t bssid[6];
    uint16_t chan_freq;
    uint8_t chan_band;
    undefined field_0x6d;
};

struct wifi_mgmr_profile {
    char ssid[33];
    uint8_t no_autoconnect;
    undefined field_0x22;
    undefined field_0x23;
    uint32_t ssid_len;
    char psk[65];
    undefined field_0x69;
    undefined field_0x6a;
    undefined field_0x6b;
    uint32_t psk_len;
    char pmk[65];
    undefined field_0xb1;
    undefined field_0xb2;
    undefined field_0xb3;
    uint32_t pmk_len;
    uint8_t mac[6];
    uint8_t dhcp_use;
    uint8_t priority;
    uint8_t isActive;
    uint8_t isUsed;
    undefined field_0xc2;
    undefined field_0xc3;
};

struct anon_struct_for_ipv4 {
    uint32_t ip;
    uint32_t mask;
    uint32_t gw;
    uint32_t dns1;
    uint32_t dns2;
};

struct state {
    struct state * parentState;
    struct state * entryState;
    struct transition * transitions;
    size_t numTransitions;
    void * data;
    void (* entryAction)(void *, struct event *);
    void (* exitAction)(void *, struct event *);
};

struct event {
    int type;
    void * data;
};

struct wlan_netif {
    int mode;
    uint8_t vif_index;
    uint8_t mac[6];
    undefined field_0xb;
    struct anon_struct_for_ipv4 ipv4;
    struct netif netif;
    union anon_union_for_field_5 field_5;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

struct xSTATIC_STREAM_BUFFER {
    size_t uxDummy1[4];
    void * pvDummy2[3];
    uint8_t ucDummy3;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
    UBaseType_t uxDummy4;
};

struct stateMachine {
    struct state * currentState;
    struct state * previousState;
    struct state * errorState;
};

struct wifi_mgmr_scan_item {
    char ssid[32];
    char ssid_tail[1];
    undefined field_0x21;
    undefined field_0x22;
    undefined field_0x23;
    uint32_t ssid_len;
    uint8_t bssid[6];
    uint8_t channel;
    int8_t rssi;
    int8_t ppm_abs;
    int8_t ppm_rel;
    uint8_t auth;
    uint8_t cipher;
    uint8_t is_used;
    undefined field_0x35;
    undefined field_0x36;
    undefined field_0x37;
    uint32_t timestamp_lastseen;
};

struct wifi_mgmr {
    uint8_t ready;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    int channel;
    int inf_ap_enabled;
    struct wlan_netif wlan_sta;
    struct wlan_netif wlan_ap;
    WIFI_MGMR_CONNECTION_STATUS_T status;
    undefined field_0xed;
    undefined field_0xee;
    undefined field_0xef;
    wifi_mgmr_profile_t profiles[2];
    int profile_active_index;
    wifi_mgmr_scan_item_t scan_items[50];
    os_messagequeue_t mq;
    uint8_t mq_pool[2240];
    struct stateMachine m;
    os_timer_t timer;
    wifi_mgmr_connect_ind_stat_info_t wifi_mgmr_stat_info;
    char country_code[3];
    uint8_t disable_autoreconnect;
    undefined field_0x17c2;
    undefined field_0x17c3;
    int channel_nums;
    uint32_t pending_task;
    uint32_t features;
    int scan_item_timeout;
};

struct transition {
    int eventType;
    void * condition;
    _Bool (* guard)(void *, struct event *);
    void (* action)(void *, struct event *, void *);
    struct state * nextState;
};

typedef struct anon_struct.conflict18 anon_struct.conflict18, *Panon_struct.conflict18;

struct anon_struct.conflict18 {
    int8_t rssi;
};

typedef struct anon_struct.conflict17 anon_struct.conflict17, *Panon_struct.conflict17;

struct anon_struct.conflict17 {
    int8_t rssi;
};

typedef struct anon_struct.conflict15 anon_struct.conflict15, *Panon_struct.conflict15;

struct anon_struct.conflict15 {
    int8_t rssi;
};

typedef struct anon_struct.conflict14 anon_struct.conflict14, *Panon_struct.conflict14;

struct anon_struct.conflict14 {
    int8_t rssi;
};

typedef struct anon_struct.conflict13 anon_struct.conflict13, *Panon_struct.conflict13;

struct anon_struct.conflict13 {
    int8_t rssi;
};

typedef struct anon_struct.conflict12 anon_struct.conflict12, *Panon_struct.conflict12;

struct anon_struct.conflict12 {
    uint32_t ip;
    uint32_t mask;
    uint32_t gw;
    uint32_t dns1;
    uint32_t dns2;
};

typedef struct wifi_mgmr_cfg_element_msg wifi_mgmr_cfg_element_msg, *Pwifi_mgmr_cfg_element_msg;

struct wifi_mgmr_cfg_element_msg {
    uint32_t ops;
    uint32_t task;
    uint32_t element;
    uint32_t type;
    uint32_t length;
    uint32_t[0] buf;
};

typedef union anon_union.conflict10 anon_union.conflict10, *Panon_union.conflict10;

union anon_union.conflict10 {
    struct anon_struct.conflict18 sta;
};

typedef union anon_union.conflict11 anon_union.conflict11, *Panon_union.conflict11;

typedef struct anon_struct.conflict22 anon_struct.conflict22, *Panon_struct.conflict22;

struct anon_struct.conflict22 {
    int8_t rssi;
};

union anon_union.conflict11 {
    struct anon_struct.conflict22 sta;
};

typedef union anon_union.conflict12 anon_union.conflict12, *Panon_union.conflict12;

typedef struct anon_struct.conflict24 anon_struct.conflict24, *Panon_struct.conflict24;

struct anon_struct.conflict24 {
    int8_t rssi;
};

union anon_union.conflict12 {
    struct anon_struct.conflict24 sta;
};

typedef union anon_union.conflict8 anon_union.conflict8, *Panon_union.conflict8;

union anon_union.conflict8 {
    struct anon_struct.conflict13 sta;
};

typedef union anon_union.conflict9 anon_union.conflict9, *Panon_union.conflict9;

union anon_union.conflict9 {
    struct anon_struct.conflict15 sta;
};

typedef struct wifi_mgmr_sta_basic_info wifi_mgmr_sta_basic_info, *Pwifi_mgmr_sta_basic_info;

typedef struct wifi_mgmr_sta_basic_info wifi_mgmr_sta_basic_info_t;

struct wifi_mgmr_sta_basic_info {
    uint8_t sta_idx;
    uint8_t is_used;
    uint8_t sta_mac[6];
    uint32_t tsfhi;
    uint32_t tsflo;
    int rssi;
    uint8_t data_rate;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct wifi_mgmr_ipgot_msg wifi_mgmr_ipgot_msg, *Pwifi_mgmr_ipgot_msg;

struct wifi_mgmr_ipgot_msg {
    uint32_t ip;
    uint32_t mask;
    uint32_t gw;
    uint32_t dns1;
    uint32_t dns2;
};

typedef struct wifi_mgmr_msg wifi_mgmr_msg, *Pwifi_mgmr_msg;

typedef struct wifi_mgmr_msg wifi_mgmr_msg_t;

typedef enum WIFI_MGMR_EVENT {
    WIFI_MGMR_EVENT_APP_AP_START=8,
    WIFI_MGMR_EVENT_APP_AP_STOP=9,
    WIFI_MGMR_EVENT_APP_CONF_MAX_STA=10,
    WIFI_MGMR_EVENT_APP_CONNECT=1,
    WIFI_MGMR_EVENT_APP_CONNECTED=3,
    WIFI_MGMR_EVENT_APP_DENOISE=12,
    WIFI_MGMR_EVENT_APP_DISCONNECT=5,
    WIFI_MGMR_EVENT_APP_IDLE=0,
    WIFI_MGMR_EVENT_APP_IP_GOT=4,
    WIFI_MGMR_EVENT_APP_PHY_UP=7,
    WIFI_MGMR_EVENT_APP_RC_CONFIG=11,
    WIFI_MGMR_EVENT_APP_RECONNECT=6,
    WIFI_MGMR_EVENT_APP_RELOAD_TSEN=13,
    WIFI_MGMR_EVENT_APP_SNIFFER=2,
    WIFI_MGMR_EVENT_FW_CFG_REQ=22,
    WIFI_MGMR_EVENT_FW_CHANNEL_SET=17,
    WIFI_MGMR_EVENT_FW_DATA_RAW_SEND=21,
    WIFI_MGMR_EVENT_FW_DISCONNECT=15,
    WIFI_MGMR_EVENT_FW_IND_CONNECTED=20,
    WIFI_MGMR_EVENT_FW_IND_DISCONNECT=19,
    WIFI_MGMR_EVENT_FW_POWERSAVING=16,
    WIFI_MGMR_EVENT_FW_SCAN=18,
    WIFI_MGMR_EVENT_GLB_AP_IND_STA_DEL=27,
    WIFI_MGMR_EVENT_GLB_AP_IND_STA_NEW=26,
    WIFI_MGMR_EVENT_GLB_DISABLE_AUTORECONNECT=28,
    WIFI_MGMR_EVENT_GLB_ENABLE_AUTORECONNECT=29,
    WIFI_MGMR_EVENT_GLB_IP_UPDATE=30,
    WIFI_MGMR_EVENT_GLB_SCAN_IND_BEACON=24,
    WIFI_MGMR_EVENT_GLB_SCAN_IND_PROBE_RESP=25,
    WIFI_MGMR_EVENT_MAXAPP_MINIFW=14,
    WIFI_MGMR_EVENT_MAXFW_MINI_GLOBAL=23
} WIFI_MGMR_EVENT;

typedef enum WIFI_MGMR_EVENT WIFI_MGMR_EVENT_T;

struct wifi_mgmr_msg {
    WIFI_MGMR_EVENT_T ev;
    void * data1;
    void * data2;
    uint32_t len;
    uint8_t[0] data;
};

typedef struct anon_struct.conflict61 anon_struct.conflict61, *Panon_struct.conflict61;

struct anon_struct.conflict61 {
    int8_t rssi;
};

typedef struct wifi_mgmr_cfg_element_msg wifi_mgmr_cfg_element_msg_t;

typedef struct wifi_mgmr_ipgot_msg wifi_mgmr_ipgot_msg_t;

typedef enum EVENT_TYPE {
    EVENT_TYPE_APP=1,
    EVENT_TYPE_FW=0,
    EVENT_TYPE_GLB=2
} EVENT_TYPE;

typedef struct wifi_mgmr_ap_msg wifi_mgmr_ap_msg, *Pwifi_mgmr_ap_msg;

struct wifi_mgmr_ap_msg {
    int32_t channel;
    char ssid[32];
    char ssid_tail[1];
    uint8_t hidden_ssid;
    uint32_t ssid_len;
    char psk[64];
    char psk_tail[1];
    uint32_t psk_len;
};

typedef struct anon_struct.conflict21 anon_struct.conflict21, *Panon_struct.conflict21;

struct anon_struct.conflict21 {
    int8_t rssi;
};

typedef struct anon_struct.conflict20 anon_struct.conflict20, *Panon_struct.conflict20;

struct anon_struct.conflict20 {
    uint32_t ip;
    uint32_t mask;
    uint32_t gw;
    uint32_t dns1;
    uint32_t dns2;
};

typedef struct wifi_mgmr_ap_msg wifi_mgmr_ap_msg_t;

typedef struct anon_struct.conflict23 anon_struct.conflict23, *Panon_struct.conflict23;

struct anon_struct.conflict23 {
    int8_t rssi;
};

typedef struct anon_struct.conflict19 anon_struct.conflict19, *Panon_struct.conflict19;

struct anon_struct.conflict19 {
    uint32_t ip;
    uint32_t mask;
    uint32_t gw;
    uint32_t dns1;
    uint32_t dns2;
};

typedef struct mm_bcn_env_tag mm_bcn_env_tag, *Pmm_bcn_env_tag;

struct mm_bcn_env_tag {
    struct mm_bcn_change_req * param;
    int tx_cfm;
    _Bool tx_pending;
    _Bool update_ongoing;
    _Bool update_pending;
    undefined field_0xb;
    struct hal_dma_desc_tag dma;
    struct co_list tim_list;
};

typedef struct led_trigger_item led_trigger_item, *Pled_trigger_item;

typedef struct loop_timer loop_timer, *Ploop_timer;

typedef struct loop_ctx loop_ctx, *Ploop_ctx;

typedef struct utils_list utils_list, *Putils_list;

typedef struct loop_evt_handler_statistic loop_evt_handler_statistic, *Ploop_evt_handler_statistic;

typedef struct loop_evt_handler loop_evt_handler, *Ploop_evt_handler;

typedef struct loop_msg loop_msg, *Ploop_msg;


// WARNING! conflicting data type names: /DWARF/bloop.h/loop_msg/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u

struct loop_timer {
    utils_dlist_t dlist_item;
    uint8_t flags;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    uint time_added;
    uint time_target;
    int idx_task;
    uint32_t evt_type_map;
    void (* cb)(struct loop_ctx *, struct loop_timer *, void *);
    void * arg;
};

struct led_trigger_item {
    utils_dlist_t dlist_item;
    struct loop_timer timer;
    int type;
    int pin;
    int active;
    int current_val;
};

struct utils_list {
    struct utils_list_hdr * first;
    struct utils_list_hdr * last;
};

struct loop_evt_handler {
    char * name;
    int (* evt)(struct loop_ctx *, struct loop_evt_handler *, uint32_t *, uint32_t *);
    int (* handle)(struct loop_ctx *, struct loop_evt_handler *, struct loop_msg *);
};

struct loop_evt_handler_statistic {
    uint time_max;
    uint time_consumed;
    uint time_accumulated;
    uint count_triggered;
};

struct loop_ctx {
    TaskHandle_t looper;
    uint32_t bitmap_evt_async;
    uint32_t bitmap_evt_sync;
    uint32_t bitmap_msg;
    uint32_t evt_type_map_async[32];
    uint32_t evt_type_map_sync[32];
    struct utils_list list[32];
    struct loop_evt_handler_statistic statistic[32];
    struct loop_evt_handler * handlers[32];
    utils_dlist_t timer_dlist;
    utils_dlist_t timer_dued;
};

struct loop_msg {
    struct utils_list_hdr item;
    union anon_union_for_u u;
    void * arg1;
    void * arg2;
    uint time_added;
    uint time_consumed;
};

typedef struct led_trigger_ctx led_trigger_ctx, *Pled_trigger_ctx;

struct led_trigger_ctx {
    utils_dlist_t trigger_queue;
    utils_dlist_t waiting_queue;
};

typedef struct loop_evt_handler_holder loop_evt_handler_holder, *Ploop_evt_handler_holder;

struct loop_evt_handler_holder {
    struct loop_evt_handler handler;
    struct led_trigger_ctx * ctx;
};


// WARNING! conflicting data type names: /DWARF/_types.h/anon_union - /DWARF/gatt.c/parse_service/anon_union

typedef struct rijndael_ctx rijndael_ctx, *Prijndael_ctx;

typedef uint u32.conflict;

struct rijndael_ctx {
    int decrypt;
    int Nr;
    u32.conflict key[60];
};

typedef struct rf_para_flash_tag rf_para_flash_tag, *Prf_para_flash_tag;

struct rf_para_flash_tag {
    uint32_t magic;
    uint8_t capcode_valid;
    uint8_t capcode;
    uint8_t poweroffset_valid;
    int8_t poweroffset[3];
    uint8_t mac_valid;
    uint8_t mac[6];
    uint8_t rsvd[3];
    uint32_t crc32;
};

typedef struct rf_para_flash_tag rf_para_flash_t;

typedef struct rf_calib2_tag rf_calib2_tag, *Prf_calib2_tag;

struct rf_calib2_tag {
    uint16_t fcal:8;
    uint16_t acal:5;
};

typedef struct anon_struct.conflict224 anon_struct.conflict224, *Panon_struct.conflict224;

typedef struct rf_calib1_tag.conflict2 rf_calib1_tag.conflict2, *Prf_calib1_tag.conflict2;

typedef struct rf_calib2_tag.conflict2 rf_calib2_tag.conflict2, *Prf_calib2_tag.conflict2;

typedef struct rf_calib3_tag.conflict2 rf_calib3_tag.conflict2, *Prf_calib3_tag.conflict2;

typedef struct rf_calib4_tag.conflict2 rf_calib4_tag.conflict2, *Prf_calib4_tag.conflict2;

struct rf_calib3_tag.conflict2 {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

struct rf_calib2_tag.conflict2 {
    uint16_t fcal:8;
    uint16_t acal:5;
};

struct rf_calib1_tag.conflict2 {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

struct rf_calib4_tag.conflict2 {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

struct anon_struct.conflict224 {
    uint32_t inited;
    struct rf_calib1_tag.conflict2 cal;
    struct rf_calib2_tag.conflict2 lo[21];
    undefined field_0x46;
    undefined field_0x47;
    struct rf_calib3_tag.conflict2 rxcal[4];
    struct rf_calib4_tag.conflict2 txcal[8];
};

typedef struct anon_struct.conflict225 anon_struct.conflict225, *Panon_struct.conflict225;

typedef struct rf_calib1_tag.conflict3 rf_calib1_tag.conflict3, *Prf_calib1_tag.conflict3;

typedef struct rf_calib2_tag.conflict3 rf_calib2_tag.conflict3, *Prf_calib2_tag.conflict3;

typedef struct rf_calib3_tag.conflict3 rf_calib3_tag.conflict3, *Prf_calib3_tag.conflict3;

typedef struct rf_calib4_tag.conflict3 rf_calib4_tag.conflict3, *Prf_calib4_tag.conflict3;

struct rf_calib3_tag.conflict3 {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

struct rf_calib2_tag.conflict3 {
    uint16_t fcal:8;
    uint16_t acal:5;
};

struct rf_calib1_tag.conflict3 {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

struct rf_calib4_tag.conflict3 {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

struct anon_struct.conflict225 {
    uint32_t inited;
    struct rf_calib1_tag.conflict3 cal;
    struct rf_calib2_tag.conflict3 lo[21];
    undefined field_0x46;
    undefined field_0x47;
    struct rf_calib3_tag.conflict3 rxcal[4];
    struct rf_calib4_tag.conflict3 txcal[8];
};

typedef struct rf_calib1_tag.conflict4 rf_calib1_tag.conflict4, *Prf_calib1_tag.conflict4;

struct rf_calib1_tag.conflict4 {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct rf_calib1_tag.conflict1 rf_calib1_tag.conflict1, *Prf_calib1_tag.conflict1;

struct rf_calib1_tag.conflict1 {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct rf_calib4_tag.conflict rf_calib4_tag.conflict, *Prf_calib4_tag.conflict;

struct rf_calib4_tag.conflict {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib1_tag.conflict rf_calib1_tag.conflict, *Prf_calib1_tag.conflict;

struct rf_calib1_tag.conflict {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct rf_calib4_tag.conflict4 rf_calib4_tag.conflict4, *Prf_calib4_tag.conflict4;

struct rf_calib4_tag.conflict4 {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib4_tag.conflict1 rf_calib4_tag.conflict1, *Prf_calib4_tag.conflict1;

struct rf_calib4_tag.conflict1 {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib4_tag.conflict5 rf_calib4_tag.conflict5, *Prf_calib4_tag.conflict5;

struct rf_calib4_tag.conflict5 {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib_data_tag rf_calib_data_tag, *Prf_calib_data_tag;

typedef struct rf_calib1_tag rf_calib1_tag, *Prf_calib1_tag;

typedef struct rf_calib3_tag rf_calib3_tag, *Prf_calib3_tag;

typedef struct rf_calib4_tag rf_calib4_tag, *Prf_calib4_tag;

struct rf_calib3_tag {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

struct rf_calib4_tag {
    uint32_t tosdac_i:6;
    uint32_t tosdac_q:6;
    uint32_t tx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t tx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

struct rf_calib1_tag {
    uint32_t gpadc_oscode:12;
    uint32_t rx_offset_i:10;
    uint32_t rx_offset_q:10;
    uint32_t rbb_cap1_fc_i:6;
    uint32_t rbb_cap1_fc_q:6;
    uint32_t rbb_cap2_fc_i:6;
    uint32_t rbb_cap2_fc_q:6;
    undefined field_0x7;
    uint32_t tx_dc_comp_i:12;
    uint32_t tx_dc_comp_q:12;
    uint32_t tmx_cs:3;
    uint32_t txpwr_att_rec:3;
    uint32_t pa_pwrmx_osdac:4;
    uint32_t tmx_csh:3;
    uint32_t tmx_csl:3;
    uint32_t tsen_refcode_rfcal:12;
    undefined field_0xf;
    uint32_t tsen_refcode_corner:12;
    uint32_t rc32k_code_fr_ext:10;
    uint32_t rc32m_code_fr_ext:8;
    uint32_t saradc_oscode:10;
    uint16_t fcal_4osmx:4;
    undefined field_0x16;
    undefined field_0x17;
};

struct rf_calib_data_tag {
    uint32_t inited;
    struct rf_calib1_tag cal;
    struct rf_calib2_tag lo[21];
    undefined field_0x46;
    undefined field_0x47;
    struct rf_calib3_tag rxcal[4];
    struct rf_calib4_tag txcal[8];
};

typedef struct rf_calib3_tag.conflict4 rf_calib3_tag.conflict4, *Prf_calib3_tag.conflict4;

struct rf_calib3_tag.conflict4 {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib3_tag.conflict5 rf_calib3_tag.conflict5, *Prf_calib3_tag.conflict5;

struct rf_calib3_tag.conflict5 {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib3_tag.conflict1 rf_calib3_tag.conflict1, *Prf_calib3_tag.conflict1;

struct rf_calib3_tag.conflict1 {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib2_tag.conflict4 rf_calib2_tag.conflict4, *Prf_calib2_tag.conflict4;

struct rf_calib2_tag.conflict4 {
    uint16_t fcal:8;
    uint16_t acal:5;
};

typedef struct rf_calib2_tag.conflict1 rf_calib2_tag.conflict1, *Prf_calib2_tag.conflict1;

struct rf_calib2_tag.conflict1 {
    uint16_t fcal:8;
    uint16_t acal:5;
};

typedef struct rf_calib2_tag.conflict5 rf_calib2_tag.conflict5, *Prf_calib2_tag.conflict5;

struct rf_calib2_tag.conflict5 {
    uint16_t fcal:8;
    uint16_t acal:5;
};

typedef struct rf_calib3_tag.conflict rf_calib3_tag.conflict, *Prf_calib3_tag.conflict;

struct rf_calib3_tag.conflict {
    uint32_t rosdac_i:6;
    uint32_t rosdac_q:6;
    uint32_t rx_iq_gain_comp:11;
    undefined field_0x3;
    uint32_t rx_iq_phase_comp:10;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct rf_calib2_tag.conflict rf_calib2_tag.conflict, *Prf_calib2_tag.conflict;

struct rf_calib2_tag.conflict {
    uint16_t fcal:8;
    uint16_t acal:5;
};

typedef struct anon_struct.conflict161 anon_struct.conflict161, *Panon_struct.conflict161;

struct anon_struct.conflict161 {
    uint32_t inited;
    struct rf_calib1_tag cal;
    struct rf_calib2_tag lo[21];
    undefined field_0x46;
    undefined field_0x47;
    struct rf_calib3_tag rxcal[4];
    struct rf_calib4_tag txcal[8];
};

typedef struct rf_calib_data_tag.conflict rf_calib_data_tag.conflict, *Prf_calib_data_tag.conflict;

struct rf_calib_data_tag.conflict {
    uint32_t inited;
    struct rf_calib1_tag.conflict4 cal;
    struct rf_calib2_tag.conflict5 lo[21];
    undefined field_0x46;
    undefined field_0x47;
    struct rf_calib3_tag.conflict5 rxcal[4];
    struct rf_calib4_tag.conflict5 txcal[8];
};

typedef struct bt_smp bt_smp, *Pbt_smp;

typedef struct bt_l2cap_le_chan bt_l2cap_le_chan, *Pbt_l2cap_le_chan;

typedef struct bt_le_oob_sc_data bt_le_oob_sc_data, *Pbt_le_oob_sc_data;

struct bt_le_oob_sc_data {
    u8_t r[16];
    u8_t c[16];
};

struct bt_l2cap_le_chan {
    struct bt_l2cap_chan chan;
    struct bt_l2cap_le_endpoint rx;
    struct bt_l2cap_le_endpoint tx;
    struct k_fifo tx_queue;
    struct net_buf * tx_buf;
    struct net_buf * _sdu;
    u16_t _sdu_len;
    undefined field_0x7e;
    undefined field_0x7f;
    struct k_work rx_work;
    struct k_fifo rx_queue;
};

struct bt_smp {
    struct bt_l2cap_le_chan chan;
    atomic_t allowed_cmds;
    atomic_t flags[1];
    u8_t method;
    u8_t preq[7];
    u8_t prsp[7];
    u8_t pcnf[16];
    u8_t prnd[16];
    u8_t rrnd[16];
    u8_t tk[16];
    u8_t pkey[64];
    u8_t dhkey[32];
    u8_t e[16];
    u8_t mackey[16];
    undefined field_0x16f;
    u32_t.conflict passkey;
    u8_t passkey_round;
    undefined field_0x175;
    undefined field_0x176;
    undefined field_0x177;
    struct bt_le_oob_sc_data * oobd_local;
    struct bt_le_oob_sc_data * oobd_remote;
    u8_t local_dist;
    u8_t remote_dist;
    undefined field_0x182;
    undefined field_0x183;
    struct k_delayed_work work;
};

typedef enum pairing_method {
    JUST_WORKS=0,
    LE_SC_OOB=5,
    PASSKEY_CONFIRM=3,
    PASSKEY_DISPLAY=2,
    PASSKEY_INPUT=1,
    PASSKEY_ROLE=4
} pairing_method;

typedef struct anon_struct.conflict85 anon_struct.conflict85, *Panon_struct.conflict85;

struct anon_struct.conflict85 {
    u8_t (* func)(struct bt_smp *, struct net_buf *);
    u8_t expect_len;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct anon_struct.conflict84 anon_struct.conflict84, *Panon_struct.conflict84;

struct anon_struct.conflict84 {
    u8_t (* func)(struct bt_smp *, struct net_buf *);
    u8_t expect_len;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct anon_struct.conflict83 anon_struct.conflict83, *Panon_struct.conflict83;

struct anon_struct.conflict83 {
    u8_t (* func)(struct bt_smp *, struct net_buf *);
    u8_t expect_len;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct anon_struct.conflict82 anon_struct.conflict82, *Panon_struct.conflict82;

struct anon_struct.conflict82 {
    u8_t (* func)(struct bt_smp *, struct net_buf *);
    u8_t expect_len;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct anon_struct_for_rand anon_struct_for_rand, *Panon_struct_for_rand;

struct anon_struct_for_rand {
    u8_t key[16];
    u8_t rand[8];
    u8_t ediv[2];
};

typedef struct anon_struct_0 anon_struct_0, *Panon_struct_0;

struct anon_struct_0 {
    u32_t.conflict __v;
};

typedef void * MessageBufferHandle_t;

typedef enum hostapd_state_tag {
    HOSTAPD_STATE_IDLE=0,
    HOSTAPD_STATE_MAX=1
} hostapd_state_tag;

typedef enum co_error {
    CO_ERROR_ACL_CON_EXISTS=11,
    CO_ERROR_AUTH_FAILURE=5,
    CO_ERROR_CCA_REJ_USE_CLOCK_DRAG=64,
    CO_ERROR_CHANNEL_CLASS_NOT_SUP=46,
    CO_ERROR_COMMAND_DISALLOWED=12,
    CO_ERROR_CONN_ACCEPT_TIMEOUT_EXCEED=16,
    CO_ERROR_CONN_FAILED_TO_BE_EST=62,
    CO_ERROR_CONN_REJ_LIMITED_RESOURCES=13,
    CO_ERROR_CONN_REJ_SECURITY_REASONS=14,
    CO_ERROR_CONN_REJ_UNACCEPTABLE_BDADDR=15,
    CO_ERROR_CONTROLLER_BUSY=58,
    CO_ERROR_CON_LIMIT_EXCEED=9,
    CO_ERROR_CON_TERM_BY_LOCAL_HOST=22,
    CO_ERROR_CON_TIMEOUT=8,
    CO_ERROR_DIFF_TRANSACTION_COLLISION=42,
    CO_ERROR_DIRECT_ADV_TO=60,
    CO_ERROR_EIR_TOO_LARGE=54,
    CO_ERROR_ENC_MODE_NOT_ACCEPT=37,
    CO_ERROR_HARDWARE_FAILURE=3,
    CO_ERROR_HOST_BUSY_PAIRING=56,
    CO_ERROR_HW_MEM_ALLOC_FAIL=1,
    CO_ERROR_HW_UART_OUT_OF_SYNC=0,
    CO_ERROR_INSTANT_PASSED=40,
    CO_ERROR_INSUFFICIENT_SECURITY=47,
    CO_ERROR_INVALID_HCI_PARAM=18,
    CO_ERROR_INVALID_LMP_PARAM=30,
    CO_ERROR_LIMIT_REACHED=67,
    CO_ERROR_LINK_KEY_CANT_CHANGE=38,
    CO_ERROR_LMP_COLLISION=35,
    CO_ERROR_LMP_PDU_NOT_ALLOWED=36,
    CO_ERROR_LMP_RSP_TIMEOUT=34,
    CO_ERROR_MEMORY_CAPA_EXCEED=7,
    CO_ERROR_NO_ERROR=0,
    CO_ERROR_OP_CANCELL_BY_HOST=68,
    CO_ERROR_PAGE_TIMEOUT=4,
    CO_ERROR_PAIRING_NOT_ALLOWED=24,
    CO_ERROR_PAIRING_WITH_UNIT_KEY_NOT_SUP=41,
    CO_ERROR_PARAM_OUT_OF_MAND_RANGE=48,
    CO_ERROR_PIN_MISSING=6,
    CO_ERROR_QOS_NOT_SUPPORTED=39,
    CO_ERROR_QOS_REJECTED=45,
    CO_ERROR_QOS_UNACCEPTABLE_PARAM=44,
    CO_ERROR_REMOTE_DEV_POWER_OFF=21,
    CO_ERROR_REMOTE_DEV_TERM_LOW_RESOURCES=20,
    CO_ERROR_REMOTE_USER_TERM_CON=19,
    CO_ERROR_REPEATED_ATTEMPTS=23,
    CO_ERROR_RESERVED_SLOT_VIOLATION=52,
    CO_ERROR_ROLE_CHANGE_NOT_ALLOWED=33,
    CO_ERROR_ROLE_SWITCH_FAIL=53,
    CO_ERROR_ROLE_SWITCH_PEND=50,
    CO_ERROR_SCO_AIR_MODE_REJECTED=29,
    CO_ERROR_SCO_INTERVAL_REJECTED=28,
    CO_ERROR_SCO_OFFSET_REJECTED=27,
    CO_ERROR_SP_NOT_SUPPORTED_HOST=55,
    CO_ERROR_SYNC_CON_LIMIT_DEV_EXCEED=10,
    CO_ERROR_TERMINATED_MIC_FAILURE=61,
    CO_ERROR_UNACCEPTABLE_CONN_INT=59,
    CO_ERROR_UNDEFINED=-1,
    CO_ERROR_UNKNOWN_CONNECTION_ID=2,
    CO_ERROR_UNKNOWN_HCI_COMMAND=1,
    CO_ERROR_UNKNOWN_LMP_PDU=25,
    CO_ERROR_UNKNOW_ADV_ID=66,
    CO_ERROR_UNSPECIFIED_ERROR=31,
    CO_ERROR_UNSUPPORTED=17,
    CO_ERROR_UNSUPPORTED_LMP_PARAM_VALUE=32,
    CO_ERROR_UNSUPPORTED_REMOTE_FEATURE=26
} co_error;

typedef struct bt_smp_pairing_random bt_smp_pairing_random, *Pbt_smp_pairing_random;

struct bt_smp_pairing_random {
    u8_t val[16];
};

typedef struct bt_smp_pairing bt_smp_pairing, *Pbt_smp_pairing;

struct bt_smp_pairing {
    u8_t io_capability;
    u8_t oob_flag;
    u8_t auth_req;
    u8_t max_key_size;
    u8_t init_key_dist;
    u8_t resp_key_dist;
};

typedef struct bt_smp_signing_info bt_smp_signing_info, *Pbt_smp_signing_info;

struct bt_smp_signing_info {
    u8_t csrk[16];
};

typedef struct bt_smp_public_key bt_smp_public_key, *Pbt_smp_public_key;

struct bt_smp_public_key {
    u8_t x[32];
    u8_t y[32];
};

typedef struct bt_smp_ident_info bt_smp_ident_info, *Pbt_smp_ident_info;

struct bt_smp_ident_info {
    u8_t irk[16];
};

typedef struct bt_smp_master_ident bt_smp_master_ident, *Pbt_smp_master_ident;

struct bt_smp_master_ident {
    u8_t ediv[2];
    u8_t rand[8];
};

typedef struct bt_smp_ident_addr_info bt_smp_ident_addr_info, *Pbt_smp_ident_addr_info;

struct bt_smp_ident_addr_info {
    struct bt_addr_le_t addr;
};

typedef struct bt_smp_pairing_fail bt_smp_pairing_fail, *Pbt_smp_pairing_fail;

struct bt_smp_pairing_fail {
    u8_t reason;
};

typedef struct bt_smp_dhkey_check bt_smp_dhkey_check, *Pbt_smp_dhkey_check;

struct bt_smp_dhkey_check {
    u8_t e[16];
};

typedef struct bt_smp_security_request bt_smp_security_request, *Pbt_smp_security_request;

struct bt_smp_security_request {
    u8_t auth_req;
};

typedef struct bt_smp_hdr bt_smp_hdr, *Pbt_smp_hdr;

struct bt_smp_hdr {
    u8_t code;
};

typedef struct bt_smp_pairing_confirm bt_smp_pairing_confirm, *Pbt_smp_pairing_confirm;

struct bt_smp_pairing_confirm {
    u8_t val[16];
};

typedef struct bt_smp_encrypt_info bt_smp_encrypt_info, *Pbt_smp_encrypt_info;

struct bt_smp_encrypt_info {
    u8_t ltk[16];
};

typedef struct ip4_addr_packed ip4_addr_packed, *Pip4_addr_packed;

struct ip4_addr_packed {
    u32_t addr;
};

typedef struct ip_hdr ip_hdr, *Pip_hdr;

typedef struct ip4_addr_packed ip4_addr_p_t;

struct ip_hdr {
    u8_t _v_hl;
    u8_t _tos;
    u16_t _len;
    u16_t _id;
    u16_t _offset;
    u8_t _ttl;
    u8_t _proto;
    u16_t _chksum;
    ip4_addr_p_t src;
    ip4_addr_p_t dest;
};

typedef void (* tcpip_init_done_fn)(void *);

typedef void (* tcpip_callback_fn)(void *);

typedef struct cfg_element_entry cfg_element_entry, *Pcfg_element_entry;

typedef enum CFG_ELEMENT_TYPE_OPS {
    CFG_ELEMENT_TYPE_OPS_DUMP_DEBUG=3,
    CFG_ELEMENT_TYPE_OPS_GET=1,
    CFG_ELEMENT_TYPE_OPS_RESET=2,
    CFG_ELEMENT_TYPE_OPS_SET=0,
    CFG_ELEMENT_TYPE_OPS_UNKNOWN=4
} CFG_ELEMENT_TYPE_OPS;

struct cfg_element_entry {
    uint32_t task;
    uint16_t element;
    uint16_t type;
    char * name;
    void * val;
    int (* set)(struct cfg_element_entry *, void *, void *);
    int (* get)(struct cfg_element_entry *, void *, void *);
    int (* notify)(struct cfg_element_entry *, void *, void *, enum CFG_ELEMENT_TYPE_OPS);
};

typedef struct tc_hmac_state_struct tc_hmac_state_struct, *Ptc_hmac_state_struct;

typedef struct tc_sha256_state_struct tc_sha256_state_struct, *Ptc_sha256_state_struct;

struct tc_sha256_state_struct {
    uint iv[8];
    uint64_t bits_hashed;
    uint8_t leftover[64];
    size_t leftover_offset;
    undefined field_0x6c;
    undefined field_0x6d;
    undefined field_0x6e;
    undefined field_0x6f;
};

struct tc_hmac_state_struct {
    struct tc_sha256_state_struct hash_state;
    uint8_t key[128];
};

typedef struct bl_txhdr bl_txhdr, *Pbl_txhdr;

typedef union bl_hw_txstatus bl_hw_txstatus, *Pbl_hw_txstatus;

typedef struct anon_struct.conflict59 anon_struct.conflict59, *Panon_struct.conflict59;

struct anon_struct.conflict59 {
    u32 tx_done:1;
    u32 retry_required:1;
    u32 sw_retry_required:1;
    u32 reserved:29;
};

union bl_hw_txstatus {
    struct anon_struct.conflict59 field_0;
    u32 value;
};

struct bl_txhdr {
    struct utils_list_hdr item;
    union bl_hw_txstatus status;
    uint32_t * p;
    struct hostdesc host;
};

typedef struct scanu_start_req.conflict1 scanu_start_req.conflict1, *Pscanu_start_req.conflict1;

typedef struct mac_addr.conflict43 mac_addr.conflict43, *Pmac_addr.conflict43;

struct mac_addr.conflict43 {
    uint16_t array[3];
};

struct scanu_start_req.conflict1 {
    struct scan_chan_tag chan[42];
    struct mac_ssid ssid[2];
    struct mac_addr.conflict43 bssid;
    undefined field_0x146;
    undefined field_0x147;
    uint32_t add_ies;
    uint16_t add_ie_len;
    uint8_t vif_idx;
    uint8_t chan_cnt;
    uint8_t ssid_cnt;
    _Bool no_cck;
    undefined field_0x152;
    undefined field_0x153;
};

typedef struct scanu_start_req.conflict3 scanu_start_req.conflict3, *Pscanu_start_req.conflict3;

struct scanu_start_req.conflict3 {
    struct scan_chan_tag chan[42];
    struct mac_ssid ssid[2];
    struct mac_addr.conflict bssid;
    undefined field_0x146;
    undefined field_0x147;
    uint32_t add_ies;
    uint16_t add_ie_len;
    uint8_t vif_idx;
    uint8_t chan_cnt;
    uint8_t ssid_cnt;
    _Bool no_cck;
    undefined field_0x152;
    undefined field_0x153;
};

typedef struct scanu_start_req.conflict2 scanu_start_req.conflict2, *Pscanu_start_req.conflict2;

struct scanu_start_req.conflict2 {
    struct scan_chan_tag chan[42];
    struct mac_ssid ssid[2];
    struct mac_addr.conflict bssid;
    undefined field_0x146;
    undefined field_0x147;
    uint32_t add_ies;
    uint16_t add_ie_len;
    uint8_t vif_idx;
    uint8_t chan_cnt;
    uint8_t ssid_cnt;
    _Bool no_cck;
    undefined field_0x152;
    undefined field_0x153;
};

typedef struct scanu_start_req.conflict5 scanu_start_req.conflict5, *Pscanu_start_req.conflict5;

typedef struct mac_addr.conflict61 mac_addr.conflict61, *Pmac_addr.conflict61;

struct mac_addr.conflict61 {
    uint16_t array[3];
};

struct scanu_start_req.conflict5 {
    struct scan_chan_tag chan[42];
    struct mac_ssid ssid[2];
    struct mac_addr.conflict61 bssid;
    undefined field_0x146;
    undefined field_0x147;
    uint32_t add_ies;
    uint16_t add_ie_len;
    uint8_t vif_idx;
    uint8_t chan_cnt;
    uint8_t ssid_cnt;
    _Bool no_cck;
    undefined field_0x152;
    undefined field_0x153;
};

typedef struct scanu_start_req.conflict4 scanu_start_req.conflict4, *Pscanu_start_req.conflict4;

typedef struct mac_addr.conflict60 mac_addr.conflict60, *Pmac_addr.conflict60;

struct mac_addr.conflict60 {
    uint16_t array[3];
};

struct scanu_start_req.conflict4 {
    struct scan_chan_tag chan[42];
    struct mac_ssid ssid[2];
    struct mac_addr.conflict60 bssid;
    undefined field_0x146;
    undefined field_0x147;
    uint32_t add_ies;
    uint16_t add_ie_len;
    uint8_t vif_idx;
    uint8_t chan_cnt;
    uint8_t ssid_cnt;
    _Bool no_cck;
    undefined field_0x152;
    undefined field_0x153;
};

typedef struct scanu_start_cfm scanu_start_cfm, *Pscanu_start_cfm;

struct scanu_start_cfm {
    uint8_t status;
};

typedef struct scanu_start_req.conflict7 scanu_start_req.conflict7, *Pscanu_start_req.conflict7;

struct scanu_start_req.conflict7 {
    struct scan_chan_tag chan[42];
    struct mac_ssid ssid[2];
    struct mac_addr.conflict171 bssid;
    undefined field_0x146;
    undefined field_0x147;
    uint32_t add_ies;
    uint16_t add_ie_len;
    uint8_t vif_idx;
    uint8_t chan_cnt;
    uint8_t ssid_cnt;
    _Bool no_cck;
    undefined field_0x152;
    undefined field_0x153;
};

typedef struct scanu_start_req.conflict6 scanu_start_req.conflict6, *Pscanu_start_req.conflict6;

struct scanu_start_req.conflict6 {
    struct scan_chan_tag chan[42];
    struct mac_ssid ssid[2];
    struct mac_addr.conflict171 bssid;
    undefined field_0x146;
    undefined field_0x147;
    uint32_t add_ies;
    uint16_t add_ie_len;
    uint8_t vif_idx;
    uint8_t chan_cnt;
    uint8_t ssid_cnt;
    _Bool no_cck;
    undefined field_0x152;
    undefined field_0x153;
};

typedef struct scanu_start_req.conflict9 scanu_start_req.conflict9, *Pscanu_start_req.conflict9;

struct scanu_start_req.conflict9 {
    struct scan_chan_tag chan[42];
    struct mac_ssid ssid[2];
    struct mac_addr.conflict171 bssid;
    undefined field_0x146;
    undefined field_0x147;
    uint32_t add_ies;
    uint16_t add_ie_len;
    uint8_t vif_idx;
    uint8_t chan_cnt;
    uint8_t ssid_cnt;
    _Bool no_cck;
    undefined field_0x152;
    undefined field_0x153;
};

typedef struct scanu_start_req.conflict8 scanu_start_req.conflict8, *Pscanu_start_req.conflict8;

struct scanu_start_req.conflict8 {
    struct scan_chan_tag chan[42];
    struct mac_ssid ssid[2];
    struct mac_addr.conflict171 bssid;
    undefined field_0x146;
    undefined field_0x147;
    uint32_t add_ies;
    uint16_t add_ie_len;
    uint8_t vif_idx;
    uint8_t chan_cnt;
    uint8_t ssid_cnt;
    _Bool no_cck;
    undefined field_0x152;
    undefined field_0x153;
};

typedef struct scanu_start_req.conflict scanu_start_req.conflict, *Pscanu_start_req.conflict;

typedef struct mac_addr.conflict42 mac_addr.conflict42, *Pmac_addr.conflict42;

struct mac_addr.conflict42 {
    uint16_t array[3];
};

struct scanu_start_req.conflict {
    struct scan_chan_tag chan[42];
    struct mac_ssid ssid[2];
    struct mac_addr.conflict42 bssid;
    undefined field_0x146;
    undefined field_0x147;
    uint32_t add_ies;
    uint16_t add_ie_len;
    uint8_t vif_idx;
    uint8_t chan_cnt;
    uint8_t ssid_cnt;
    _Bool no_cck;
    undefined field_0x152;
    undefined field_0x153;
};

typedef struct Bl_SHA1_CTX Bl_SHA1_CTX, *PBl_SHA1_CTX;

struct Bl_SHA1_CTX {
    UINT32 Intermediate_Hash[5];
    UINT32 Length_Low;
    UINT32 Length_High;
    UINT32 Scratch[16];
    UINT8 Message_Block[64];
    SINT16 Message_Block_Index;
    UINT8 Computed;
    UINT8 Corrupted;
};

typedef struct tcp_pcb_listen tcp_pcb_listen, *Ptcp_pcb_listen;

typedef struct tcp_pcb tcp_pcb, *Ptcp_pcb;

typedef err_t (* tcp_accept_fn)(void *, struct tcp_pcb *, err_t);

typedef u16_t tcpflags_t;

typedef struct tcp_seg tcp_seg, *Ptcp_seg;

typedef err_t (* tcp_connected_fn)(void *, struct tcp_pcb *, err_t);

typedef struct tcp_hdr tcp_hdr, *Ptcp_hdr;

struct tcp_hdr {
    u16_t src;
    u16_t dest;
    u32_t seqno;
    u32_t ackno;
    u16_t _hdrlen_rsvd_flags;
    u16_t wnd;
    u16_t chksum;
    u16_t urgp;
};

struct tcp_pcb_listen {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb_listen * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    tcp_accept_fn accept;
};

struct tcp_pcb {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

struct tcp_seg {
    struct tcp_seg * next;
    struct pbuf * p;
    u16_t len;
    u16_t chksum;
    u8_t chksum_swapped;
    u8_t flags;
    undefined field_0xe;
    undefined field_0xf;
    struct tcp_hdr * tcphdr;
};

typedef struct tcpip_callback_msg tcpip_callback_msg, *Ptcpip_callback_msg;

struct tcpip_callback_msg {
};

typedef struct k_delayed_work.conflict11 k_delayed_work.conflict11, *Pk_delayed_work.conflict11;

typedef struct k_timer.conflict18 k_timer.conflict18, *Pk_timer.conflict18;

typedef struct k_timer.conflict18 k_timer_t.conflict15;

struct k_timer.conflict18 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

struct k_delayed_work.conflict11 {
    struct k_work work;
    struct k_work_q * work_q;
    k_timer_t.conflict15 timer;
};

typedef struct k_delayed_work.conflict12 k_delayed_work.conflict12, *Pk_delayed_work.conflict12;

typedef struct k_timer.conflict19 k_timer.conflict19, *Pk_timer.conflict19;

typedef struct k_timer.conflict19 k_timer_t.conflict16;

struct k_timer.conflict19 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

struct k_delayed_work.conflict12 {
    struct k_work work;
    struct k_work_q * work_q;
    k_timer_t.conflict16 timer;
};

typedef struct k_delayed_work.conflict10 k_delayed_work.conflict10, *Pk_delayed_work.conflict10;

typedef struct k_timer.conflict17 k_timer.conflict17, *Pk_timer.conflict17;

typedef struct k_timer.conflict17 k_timer_t.conflict14;

struct k_timer.conflict17 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

struct k_delayed_work.conflict10 {
    struct k_work work;
    struct k_work_q * work_q;
    k_timer_t.conflict14 timer;
};

typedef struct k_delayed_work.conflict8 k_delayed_work.conflict8, *Pk_delayed_work.conflict8;

typedef struct k_timer.conflict15 k_timer.conflict15, *Pk_timer.conflict15;

typedef struct k_timer.conflict15 k_timer_t.conflict12;

struct k_timer.conflict15 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

struct k_delayed_work.conflict8 {
    struct k_work work;
    struct k_work_q * work_q;
    k_timer_t.conflict12 timer;
};

typedef struct k_delayed_work.conflict9 k_delayed_work.conflict9, *Pk_delayed_work.conflict9;

typedef struct k_timer.conflict16 k_timer.conflict16, *Pk_timer.conflict16;

typedef struct k_timer.conflict16 k_timer_t.conflict13;

struct k_timer.conflict16 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

struct k_delayed_work.conflict9 {
    struct k_work work;
    struct k_work_q * work_q;
    k_timer_t.conflict13 timer;
};

typedef struct k_delayed_work.conflict7 k_delayed_work.conflict7, *Pk_delayed_work.conflict7;

typedef struct k_timer.conflict14 k_timer.conflict14, *Pk_timer.conflict14;

typedef struct k_timer.conflict14 k_timer_t.conflict11;

struct k_timer.conflict14 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

struct k_delayed_work.conflict7 {
    struct k_work work;
    struct k_work_q * work_q;
    k_timer_t.conflict11 timer;
};

typedef struct mac_addr.conflict101 mac_addr.conflict101, *Pmac_addr.conflict101;

struct mac_addr.conflict101 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict58 anon_struct.conflict58, *Panon_struct.conflict58;

struct anon_struct.conflict58 {
    u8 category;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    undefined field_0x4;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    undefined field_0x8;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    undefined field_0xc;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    undefined field_0x10;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
    undefined field_0x14;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
    undefined field_0x18;
    undefined field_0x19;
};

typedef struct anon_struct.conflict57 anon_struct.conflict57, *Panon_struct.conflict57;

struct anon_struct.conflict57 {
    u8 category;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    undefined field_0x4;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    undefined field_0x8;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    undefined field_0xc;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    undefined field_0x10;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
    undefined field_0x14;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
    undefined field_0x18;
    undefined field_0x19;
};

typedef struct anon_struct.conflict56 anon_struct.conflict56, *Panon_struct.conflict56;

struct anon_struct.conflict56 {
    u8 category;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    undefined field_0x4;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    undefined field_0x8;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    undefined field_0xc;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    undefined field_0x10;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
    undefined field_0x14;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
    undefined field_0x18;
    undefined field_0x19;
};

typedef struct mac_addr.conflict138 mac_addr.conflict138, *Pmac_addr.conflict138;

struct mac_addr.conflict138 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict132 mac_addr.conflict132, *Pmac_addr.conflict132;

struct mac_addr.conflict132 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict134 mac_addr.conflict134, *Pmac_addr.conflict134;

struct mac_addr.conflict134 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict128 mac_addr.conflict128, *Pmac_addr.conflict128;

struct mac_addr.conflict128 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict124 mac_addr.conflict124, *Pmac_addr.conflict124;

struct mac_addr.conflict124 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict126 mac_addr.conflict126, *Pmac_addr.conflict126;

struct mac_addr.conflict126 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict140 mac_addr.conflict140, *Pmac_addr.conflict140;

struct mac_addr.conflict140 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict146 mac_addr.conflict146, *Pmac_addr.conflict146;

struct mac_addr.conflict146 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict148 mac_addr.conflict148, *Pmac_addr.conflict148;

struct mac_addr.conflict148 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict142 mac_addr.conflict142, *Pmac_addr.conflict142;

struct mac_addr.conflict142 {
    uint16_t array[3];
};

typedef struct txl_buffer_tag txl_buffer_tag, *Ptxl_buffer_tag;

typedef struct txdesc txdesc, *Ptxdesc;

typedef struct umacdesc umacdesc, *Pumacdesc;

typedef struct lmacdesc lmacdesc, *Plmacdesc;

typedef struct tx_hw_desc tx_hw_desc, *Ptx_hw_desc;

typedef struct tx_cfm_tag tx_cfm_tag, *Ptx_cfm_tag;

typedef struct tx_agg_desc tx_agg_desc, *Ptx_agg_desc;

struct txl_buffer_tag {
    uint32_t length;
    uint32_t lenheader;
    uint32_t lenpad;
    uint32_t flags;
    struct txl_buffer_tag * next;
    struct txdesc * txdesc;
    struct dma_desc dma_desc[1];
    struct dma_desc dma_desc_pat;
    struct tx_pbd tbd;
    struct tx_pbd tbd_body[8];
    uint8_t user_idx;
    undefined field_0xed;
    undefined field_0xee;
    undefined field_0xef;
    struct txl_buffer_control buffer_control;
    struct tx_pbd tkip_mic_icv_pbd;
    uint8_t tkip_mic_icv[12];
    uint32_t[0] payload;
};

struct umacdesc {
    struct txl_buffer_control * buf_control;
    uint32_t buff_offset;
    uint16_t payl_len;
    uint8_t head_len;
    uint8_t hdr_len_802_2;
    uint8_t tail_len;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
};

struct lmacdesc {
    struct tx_agg_desc * agg_desc;
    struct txl_buffer_tag * buffer;
    struct tx_hw_desc * hw_desc;
};

struct tx_cfm_tag {
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    int8_t credits;
    uint8_t ampdu_size;
    uint8_t pad[2];
    uint32_t status;
};

struct tx_hw_desc {
    struct tx_cfm_tag * cfm_ptr;
    struct tx_hd thd;
};

struct txdesc {
    struct co_list_hdr list_hdr;
    struct hostdesc.conflict host;
    struct umacdesc umac;
    struct lmacdesc lmac;
    struct tx_hw_desc hw_desc;
    struct tx_cfm_tag hw_cfm;
    uint32_t buf[128];
};

struct tx_agg_desc {
    uint8_t reserved;
};

typedef struct mblock_free mblock_free, *Pmblock_free;

struct mblock_free {
    uint16_t corrupt_check;
    uint16_t free_size;
    struct mblock_free * next;
    struct mblock_free * previous;
};

typedef struct inode_t inode_t, *Pinode_t;

typedef union inode_ops_t inode_ops_t, *Pinode_ops_t;

typedef struct file_ops file_ops, *Pfile_ops;

typedef struct file_t file_t, *Pfile_t;

typedef struct file_ops file_ops_t;

typedef struct fs_ops fs_ops, *Pfs_ops;


// WARNING! conflicting data type names: /DWARF/stat.h/stat - /stat.h/stat

typedef struct fs_ops fs_ops_t;

struct file_ops {
    int (* open)(struct inode_t *, struct file_t *);
    int (* close)(struct file_t *);
    ssize_t (* read)(struct file_t *, void *, size_t);
    ssize_t (* write)(struct file_t *, void *, size_t);
    int (* ioctl)(struct file_t *, int, ulong);
    int (* poll)(struct file_t *, _Bool, void (* )(struct pollfd *, void *), struct pollfd *, void *);
    int (* sync)(struct file_t *);
};

union inode_ops_t {
    file_ops_t * i_ops;
    fs_ops_t * i_fops;
};

struct inode_t {
    union inode_ops_t ops;
    void * i_arg;
    char * i_name;
    int i_flags;
    uint8_t type;
    uint8_t refs;
    undefined field_0x12;
    undefined field_0x13;
};

struct fs_ops {
    int (* open)(struct file_t *, char *, int);
    int (* close)(struct file_t *);
    ssize_t (* read)(struct file_t *, char *, size_t);
    ssize_t (* write)(struct file_t *, char *, size_t);
    off_t (* lseek)(struct file_t *, off_t, int);
    int (* sync)(struct file_t *);
    int (* stat)(struct file_t *, char *, struct stat *);
    int (* unlink)(struct file_t *, char *);
    int (* rename)(struct file_t *, char *, char *);
    aos_dir_t * (* opendir)(struct file_t *, char *);
    aos_dirent_t * (* readdir)(struct file_t *, struct aos_dir_t *);
    int (* closedir)(struct file_t *, struct aos_dir_t *);
    int (* mkdir)(struct file_t *, char *);
    int (* rmdir)(struct file_t *, char *);
    void (* rewinddir)(struct file_t *, struct aos_dir_t *);
    long (* telldir)(struct file_t *, struct aos_dir_t *);
    void (* seekdir)(struct file_t *, struct aos_dir_t *, long);
    int (* ioctl)(struct file_t *, int, ulong);
    int (* statfs)(struct file_t *, char *, struct statfs *);
    int (* access)(struct file_t *, char *, int);
};

struct file_t {
    struct inode_t * node;
    void * f_arg;
    size_t offset;
};

typedef struct lwip_cyclic_timer.conflict lwip_cyclic_timer.conflict, *Plwip_cyclic_timer.conflict;

struct lwip_cyclic_timer.conflict {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct mac_addr.conflict179 mac_addr.conflict179, *Pmac_addr.conflict179;

struct mac_addr.conflict179 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict177 mac_addr.conflict177, *Pmac_addr.conflict177;

struct mac_addr.conflict177 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict161 mac_addr.conflict161, *Pmac_addr.conflict161;

struct mac_addr.conflict161 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict163 mac_addr.conflict163, *Pmac_addr.conflict163;

struct mac_addr.conflict163 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict169 mac_addr.conflict169, *Pmac_addr.conflict169;

struct mac_addr.conflict169 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict165 mac_addr.conflict165, *Pmac_addr.conflict165;

struct mac_addr.conflict165 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict196 mac_addr.conflict196, *Pmac_addr.conflict196;

struct mac_addr.conflict196 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict191 mac_addr.conflict191, *Pmac_addr.conflict191;

struct mac_addr.conflict191 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict198 mac_addr.conflict198, *Pmac_addr.conflict198;

struct mac_addr.conflict198 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict185 mac_addr.conflict185, *Pmac_addr.conflict185;

struct mac_addr.conflict185 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict181 mac_addr.conflict181, *Pmac_addr.conflict181;

struct mac_addr.conflict181 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict187 mac_addr.conflict187, *Pmac_addr.conflict187;

struct mac_addr.conflict187 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict217 mac_addr.conflict217, *Pmac_addr.conflict217;

struct mac_addr.conflict217 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict211 mac_addr.conflict211, *Pmac_addr.conflict211;

struct mac_addr.conflict211 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict206 mac_addr.conflict206, *Pmac_addr.conflict206;

struct mac_addr.conflict206 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict204 mac_addr.conflict204, *Pmac_addr.conflict204;

struct mac_addr.conflict204 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict200 mac_addr.conflict200, *Pmac_addr.conflict200;

struct mac_addr.conflict200 {
    uint16_t array[3];
};

typedef struct lwip_cyclic_timer.conflict3 lwip_cyclic_timer.conflict3, *Plwip_cyclic_timer.conflict3;

struct lwip_cyclic_timer.conflict3 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct mac_addr.conflict238 mac_addr.conflict238, *Pmac_addr.conflict238;

struct mac_addr.conflict238 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict233 mac_addr.conflict233, *Pmac_addr.conflict233;

struct mac_addr.conflict233 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict227 mac_addr.conflict227, *Pmac_addr.conflict227;

struct mac_addr.conflict227 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict251 mac_addr.conflict251, *Pmac_addr.conflict251;

struct mac_addr.conflict251 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict257 mac_addr.conflict257, *Pmac_addr.conflict257;

struct mac_addr.conflict257 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict255 mac_addr.conflict255, *Pmac_addr.conflict255;

struct mac_addr.conflict255 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict249 mac_addr.conflict249, *Pmac_addr.conflict249;

struct mac_addr.conflict249 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict247 mac_addr.conflict247, *Pmac_addr.conflict247;

struct mac_addr.conflict247 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict242 mac_addr.conflict242, *Pmac_addr.conflict242;

struct mac_addr.conflict242 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict151 anon_struct.conflict151, *Panon_struct.conflict151;

struct anon_struct.conflict151 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct anon_struct.conflict194 anon_struct.conflict194, *Panon_struct.conflict194;

struct anon_struct.conflict194 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct mac_addr.conflict21 mac_addr.conflict21, *Pmac_addr.conflict21;

struct mac_addr.conflict21 {
    uint16_t array[3];
};

typedef uint16_t ke_state_t.conflict;

typedef struct mac_addr.conflict16 mac_addr.conflict16, *Pmac_addr.conflict16;

struct mac_addr.conflict16 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict31 mac_addr.conflict31, *Pmac_addr.conflict31;

struct mac_addr.conflict31 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict26 mac_addr.conflict26, *Pmac_addr.conflict26;

struct mac_addr.conflict26 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict36 mac_addr.conflict36, *Pmac_addr.conflict36;

struct mac_addr.conflict36 {
    uint16_t array[3];
};

typedef struct ke_state_handler ke_state_handler, *Pke_state_handler;

typedef struct ke_msg_handler ke_msg_handler, *Pke_msg_handler;

typedef uint16_t ke_msg_id_t;

struct ke_state_handler {
    struct ke_msg_handler * msg_table;
    uint16_t msg_cnt;
    undefined field_0x6;
    undefined field_0x7;
};

struct ke_msg_handler {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct mac_addr.conflict97 mac_addr.conflict97, *Pmac_addr.conflict97;

struct mac_addr.conflict97 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict93 mac_addr.conflict93, *Pmac_addr.conflict93;

struct mac_addr.conflict93 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict91 mac_addr.conflict91, *Pmac_addr.conflict91;

struct mac_addr.conflict91 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict46 mac_addr.conflict46, *Pmac_addr.conflict46;

struct mac_addr.conflict46 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict64 mac_addr.conflict64, *Pmac_addr.conflict64;

struct mac_addr.conflict64 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict56 mac_addr.conflict56, *Pmac_addr.conflict56;

struct mac_addr.conflict56 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict71 mac_addr.conflict71, *Pmac_addr.conflict71;

struct mac_addr.conflict71 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict87 mac_addr.conflict87, *Pmac_addr.conflict87;

struct mac_addr.conflict87 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict85 mac_addr.conflict85, *Pmac_addr.conflict85;

struct mac_addr.conflict85 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict83 mac_addr.conflict83, *Pmac_addr.conflict83;

struct mac_addr.conflict83 {
    uint16_t array[3];
};

typedef enum anon_enum_8_for_oob_config.conflict {
    AC_BE=1,
    AC_BK=0,
    AC_MAX=4,
    AC_VI=2,
    AC_VO=3,
    ADDR_END=4,
    ADDR_MASK=1,
    ADDR_PUBLIC=0,
    ADDR_RAND=1,
    ADDR_RPA_MASK=2,
    ADDR_RPA_OR_PUBLIC=2,
    ADDR_RPA_OR_RAND=3,
    ADV_CONN_DIR=1,
    ADV_CONN_DIR_LDC=4,
    ADV_CONN_UNDIR=0,
    ADV_DIS=0,
    ADV_DISC_UNDIR=2,
    ADV_EN=1,
    ADV_END=5,
    ADV_EN_END=2,
    ADV_NONCONN_UNDIR=3,
    API_AC_BE=1,
    API_AC_BK=0,
    API_AC_MAX=4,
    API_AC_VI=2,
    API_AC_VO=3,
    BLE_IRQn=72,
    BMX_ERR_IRQn=16,
    BMX_TO_IRQn=17,
    BOR_IRQn=69,
    BT_CONN_AUTO_CONNECT=0,
    BT_CONN_AUTO_FEATURE_EXCH=13,
    BT_CONN_AUTO_PHY_COMPLETE=12,
    BT_CONN_AUTO_PHY_UPDATE=7,
    BT_CONN_AUTO_VERSION_INFO=14,
    BT_CONN_BR_LEGACY_SECURE=1,
    BT_CONN_BR_NOBOND=4,
    BT_CONN_BR_PAIRING=3,
    BT_CONN_BR_PAIRING_INITIATOR=5,
    BT_CONN_CLEANUP=6,
    BT_CONN_FORCE_PAIR=11,
    BT_CONN_NUM_FLAGS=15,
    BT_CONN_OOB_BOTH_PEERS=2,
    BT_CONN_OOB_LE_LEGACY=0,
    BT_CONN_OOB_LE_SC=1,
    BT_CONN_OOB_LOCAL_ONLY=0,
    BT_CONN_OOB_NO_DATA=3,
    BT_CONN_OOB_REMOTE_ONLY=1,
    BT_CONN_ROLE_MASTER=0,
    BT_CONN_ROLE_SLAVE=1,
    BT_CONN_SLAVE_PARAM_L2CAP=10,
    BT_CONN_SLAVE_PARAM_SET=9,
    BT_CONN_SLAVE_PARAM_UPDATE=8,
    BT_CONN_TYPE_ALL=7,
    BT_CONN_TYPE_BR=2,
    BT_CONN_TYPE_LE=1,
    BT_CONN_TYPE_SCO=4,
    BT_CONN_USER=2,
    BT_DEV_ACTIVE_SCAN=12,
    BT_DEV_ADVERTISING=6,
    BT_DEV_ADVERTISING_CONNECTABLE=8,
    BT_DEV_ADVERTISING_NAME=7,
    BT_DEV_AUTO_CONN=15,
    BT_DEV_ENABLE=0,
    BT_DEV_EXPLICIT_SCAN=11,
    BT_DEV_HAS_PUB_KEY=4,
    BT_DEV_ID_PENDING=17,
    BT_DEV_KEEP_ADVERTISING=9,
    BT_DEV_NUM_FLAGS=18,
    BT_DEV_PRESET_ID=2,
    BT_DEV_PUB_KEY_BUSY=5,
    BT_DEV_READY=1,
    BT_DEV_RPA_VALID=16,
    BT_DEV_SCANNING=10,
    BT_DEV_SCAN_FILTER_DUP=13,
    BT_DEV_SCAN_WL=14,
    BT_DEV_USER_ID_ADDR=3,
    BT_EVENT_CMD_TX=0,
    BT_EVENT_CONN_TX_QUEUE=1,
    BT_GATT_SUBSCRIBE_FLAG_VOLATILE=0,
    BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING=1,
    BT_GATT_SUBSCRIBE_NUM_FLAGS=2,
    BT_KEYS_ALL=63,
    BT_KEYS_AUTHENTICATED=1,
    BT_KEYS_DEBUG=2,
    BT_KEYS_ID_PENDING_ADD=4,
    BT_KEYS_ID_PENDING_DEL=8,
    BT_KEYS_IRK=2,
    BT_KEYS_LOCAL_CSRK=8,
    BT_KEYS_LTK=4,
    BT_KEYS_LTK_P256=32,
    BT_KEYS_REMOTE_CSRK=16,
    BT_KEYS_SC=16,
    BT_KEYS_SLAVE_LTK=1,
    BT_LE_ADV_OPT_CONNECTABLE=1,
    BT_LE_ADV_OPT_DIR_ADDR_RPA=32,
    BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY=16,
    BT_LE_ADV_OPT_FILTER_CONN=-128,
    BT_LE_ADV_OPT_FILTER_SCAN_REQ=64,
    BT_LE_ADV_OPT_NONE=0,
    BT_LE_ADV_OPT_ONE_TIME=2,
    BT_LE_ADV_OPT_USE_IDENTITY=4,
    BT_LE_ADV_OPT_USE_NAME=8,
    BT_LE_SCAN_FILTER_DUPLICATE=1,
    BT_LE_SCAN_FILTER_EXTENDED=4,
    BT_LE_SCAN_FILTER_WHITELIST=2,
    BT_QUIRK_NO_RESET=1,
    BZ_PHY_IRQn=71,
    CLIC_SOFT_PEND_IRQn=12,
    CNTLR_BB_OGF=3,
    CONTROL_PORT_HOST=1,
    CONTROL_PORT_NO_ENC=2,
    CO_BAD_PARAM=4,
    CO_BUSY=8,
    CO_EMPTY=2,
    CO_FAIL=1,
    CO_FULL=3,
    CO_NOT_FOUND=5,
    CO_NO_ELT_IN_USE=7,
    CO_NO_MORE_ELT_AVAILABLE=6,
    CO_OK=0,
    CO_OP_IN_PROGRESS=9,
    DISABLE_HT=4,
    DMA_ALL_IRQn=31,
    DMA_BMX_ERR_IRQn=24,
    EFUSE_IRQn=42,
    ERR_ABRT=-13,
    ERR_ALREADY=-9,
    ERR_ARG=-16,
    ERR_BUF=-2,
    ERR_CLSD=-15,
    ERR_CONN=-11,
    ERR_IF=-12,
    ERR_INPROGRESS=-5,
    ERR_ISCONN=-10,
    ERR_MEM=-1,
    ERR_OK=0,
    ERR_RST=-14,
    ERR_RTE=-4,
    ERR_TIMEOUT=-3,
    ERR_USE=-8,
    ERR_VAL=-6,
    ERR_WOULDBLOCK=-7,
    GLB_PLL_XTAL_24M=1,
    GLB_PLL_XTAL_26M=5,
    GLB_PLL_XTAL_32M=2,
    GLB_PLL_XTAL_38P4M=3,
    GLB_PLL_XTAL_40M=4,
    GLB_PLL_XTAL_NONE=0,
    GLB_PLL_XTAL_RC32M=6,
    GLB_SYS_CLK_PLL120M=3,
    GLB_SYS_CLK_PLL160M=4,
    GLB_SYS_CLK_PLL192M=5,
    GLB_SYS_CLK_PLL48M=2,
    GLB_SYS_CLK_RC32M=0,
    GLB_SYS_CLK_XTAL=1,
    GPADC_DMA_IRQn=41,
    GPIO_INT0_IRQn=60,
    HBN_32K_DIG=3,
    HBN_32K_RC=0,
    HBN_32K_XTAL=1,
    HBN_OUT0_IRQn=67,
    HBN_OUT1_IRQn=68,
    HBN_ROOT_CLK_PLL=2,
    HBN_ROOT_CLK_RC32M=0,
    HBN_ROOT_CLK_XTAL=1,
    HBN_UART_CLK_160M=1,
    HBN_UART_CLK_FCLK=0,
    I2C_IRQn=48,
    INFO_PAR_OGF=4,
    INIT_FILT_END=2,
    INIT_FILT_IGNORE_WLST=0,
    INIT_FILT_USE_WLST=1,
    IRQn_LAST=80,
    IRRX_IRQn=36,
    IRTX_IRQn=35,
    KE_EVT_IDLE=0,
    KE_EVT_RUNNING=1,
    KE_MEM_BLOCK_EM=1,
    KE_MEM_BLOCK_MAX=2,
    KE_MEM_BLOCK_RAM=0,
    KE_MEM_ENV=0,
    KE_MEM_KE_MSG=0,
    KE_MEM_NON_RETENTION=0,
    L1C_BMX_ERR_IRQn=18,
    L1C_BMX_TO_IRQn=19,
    LE_CNTLR_OGF=8,
    LINK_TYPE_END=2,
    LIR_TYPE_A=1,
    LIR_TYPE_B=2,
    LIR_TYPE_C=3,
    LIR_TYPE_D=4,
    LIR_TYPE_E=5,
    LIR_TYPE_F=6,
    LIR_TYPE_G=7,
    LIR_TYPE_H=8,
    LIR_TYPE_I=9,
    LIR_TYPE_J=10,
    LK_CNTL_OGF=1,
    LK_POL_OGF=2,
    LLID_CNTL=3,
    LLID_CONTINUE=1,
    LLID_END=4,
    LLID_RFU=0,
    LLID_START=2,
    LLM_LE_ADV_DUMMY_IDX=1,
    LLM_LE_ADV_IDX=5,
    LLM_LE_COEXT_SCAN_IDX=3,
    LLM_LE_SCAN_CON_REQ_ADV_DIR_IDX=2,
    LLM_LE_SCAN_RSP_IDX=4,
    LL_ADV_CONN_DIR=1,
    LL_ADV_CONN_UNDIR=0,
    LL_ADV_DISC_UNDIR=6,
    LL_ADV_END=8,
    LL_ADV_NONCONN_UNDIR=2,
    LL_CONNECT_REQ=5,
    LL_EXT_ADV=7,
    LL_SCAN_REQ=3,
    LL_SCAN_RSP=4,
    MAC_GEN_IRQn=77,
    MAC_PORT_TRG_IRQn=78,
    MAC_RX_TRG_IRQn=75,
    MAC_TXRX_MISC_IRQn=74,
    MAC_TXRX_TIMER_IRQn=73,
    MAC_TX_TRG_IRQn=76,
    MAX_OGF=64,
    MEMP_ALTCP_PCB=5,
    MEMP_IGMP_GROUP=10,
    MEMP_MAX=15,
    MEMP_NETBUF=6,
    MEMP_NETCONN=7,
    MEMP_NETDB=12,
    MEMP_PBUF=13,
    MEMP_PBUF_POOL=14,
    MEMP_RAW_PCB=0,
    MEMP_SYS_TIMEOUT=11,
    MEMP_TCPIP_MSG_API=8,
    MEMP_TCPIP_MSG_INPKT=9,
    MEMP_TCP_PCB=2,
    MEMP_TCP_PCB_LISTEN=3,
    MEMP_TCP_SEG=4,
    MEMP_UDP_PCB=1,
    MEXT_IRQn=11,
    MFP_IN_USE=16,
    MM_AP=2,
    MM_IBSS=1,
    MM_MESH_POINT=3,
    MM_STA=0,
    MSOFT_IRQn=3,
    MTIME_IRQn=7,
    OP_CFLIRI_BUFFER=54,
    OP_CFLIR_BUFFER=56,
    OP_CFLIR_PLD=57,
    OP_CLIR=53,
    OP_CTLIRI_PLD=55,
    OP_LADD=24,
    OP_LCMP=25,
    OP_LDIV=20,
    OP_LDIV2N=18,
    OP_LMUL=22,
    OP_LMUL2N=19,
    OP_LSQR=21,
    OP_LSUB=23,
    OP_MADD=40,
    OP_MDIV2=33,
    OP_MEXP=35,
    OP_MINV=34,
    OP_MMUL=37,
    OP_MOD2N=17,
    OP_MOVDAT=50,
    OP_MREM=38,
    OP_MSQR=36,
    OP_MSUB=39,
    OP_NLIR=51,
    OP_PPSEL=0,
    OP_RESIZE=49,
    OP_SLIR=52,
    PAYL_00001111=6,
    PAYL_01010101=7,
    PAYL_10101010=2,
    PAYL_11110000=1,
    PAYL_ALL_0=5,
    PAYL_ALL_1=4,
    PAYL_END=8,
    PAYL_PSEUDO_RAND_15=3,
    PAYL_PSEUDO_RAND_9=0,
    PBUF_IP=-94,
    PBUF_LINK=-114,
    PBUF_RAW=0,
    PBUF_RAW_TX=-128,
    PBUF_TRANSPORT=-74,
    PDS_WAKEUP_IRQn=66,
    PHY_BAND_2G4=0,
    PHY_BAND_5G=1,
    PHY_BAND_MAX=2,
    PHY_CHNL_BW_160=3,
    PHY_CHNL_BW_20=0,
    PHY_CHNL_BW_40=1,
    PHY_CHNL_BW_80=2,
    PHY_CHNL_BW_80P80=4,
    PHY_CHNL_BW_OTHER=5,
    POOL_LINKED_LIST=0,
    PS_MODE_OFF=0,
    PS_MODE_ON=1,
    PS_MODE_ON_DYN=2,
    PT_ENTRY_FW_CPU0=0,
    PT_ENTRY_FW_CPU1=1,
    PT_ENTRY_MAX=16,
    PWM_IRQn=50,
    RESERVED0=32,
    RESERVED1=33,
    RESERVED10=55,
    RESERVED11=56,
    RESERVED12=57,
    RESERVED13=58,
    RESERVED14=59,
    RESERVED16=61,
    RESERVED17=62,
    RESERVED18=63,
    RESERVED19=64,
    RESERVED2=34,
    RESERVED20=65,
    RESERVED3=37,
    RESERVED4=38,
    RESERVED5=40,
    RESERVED6=44,
    RESERVED7=47,
    RESERVED8=49,
    RESERVED9=51,
    RF_TOP_INT0_IRQn=21,
    RF_TOP_INT1_IRQn=22,
    RING_LINKED_LIST=1,
    ROLE_END=2,
    ROLE_MASTER=0,
    ROLE_SLAVE=1,
    SCAN_ACTIVE=1,
    SCAN_DIS=0,
    SCAN_EN=1,
    SCAN_END=2,
    SCAN_EN_END=2,
    SCAN_PASSIVE=0,
    SCA_100PPM=3,
    SCA_150PPM=2,
    SCA_20PPM=7,
    SCA_250PPM=1,
    SCA_30PPM=6,
    SCA_500PPM=0,
    SCA_50PPM=5,
    SCA_75PPM=4,
    SDIO_IRQn=23,
    SEC_AES_IRQn=29,
    SEC_BMX_ERR_IRQn=20,
    SEC_CDET_IRQn=26,
    SEC_GMAC_IRQn=25,
    SEC_PKA_IRQn=27,
    SEC_SHA_IRQn=30,
    SEC_TRNG_IRQn=28,
    SF_CTRL_IRQn=39,
    SPI_IRQn=43,
    STAT_PAR_OGF=5,
    TASK_API=13,
    TASK_APM=7,
    TASK_BAM=8,
    TASK_CFG=12,
    TASK_DBG=1,
    TASK_HOSTAPD_U=10,
    TASK_LAST_EMB=12,
    TASK_MAX=14,
    TASK_ME=5,
    TASK_MESH=9,
    TASK_MM=0,
    TASK_NONE=-1,
    TASK_RXU=11,
    TASK_SCAN=2,
    TASK_SCANU=4,
    TASK_SM=6,
    TASK_TDLS=3,
    TEST_END=3,
    TEST_OGF=6,
    TEST_RX=1,
    TEST_RXTX=2,
    TEST_TX=0,
    TIMER_CH0_IRQn=52,
    TIMER_CH1_IRQn=53,
    TIMER_WDT_IRQn=54,
    TX_LVL_CURRENT=0,
    TX_LVL_LEN=2,
    TX_LVL_MAX=1,
    UART0_IRQn=45,
    UART1_IRQn=46,
    VFS_TYPE_BLOCK_DEV=2,
    VFS_TYPE_CHAR_DEV=1,
    VFS_TYPE_FS_DEV=3,
    VFS_TYPE_NOT_INIT=0,
    VS_OGF=63,
    WIFI_IPC_PUBLIC_IRQn=79,
    WIFI_IRQn=70,
    WPA_WPA2_IN_USE=8,
    eIncrement=2,
    eNoAction=0,
    eSetBits=1,
    eSetValueWithOverwrite=3,
    eSetValueWithoutOverwrite=4
} anon_enum_8_for_oob_config.conflict;

typedef enum anon_enum_8_for_oob_config {
    AC_BE=1,
    AC_BK=0,
    AC_MAX=4,
    AC_VI=2,
    AC_VO=3,
    ADDR_END=4,
    ADDR_MASK=1,
    ADDR_PUBLIC=0,
    ADDR_RAND=1,
    ADDR_RPA_MASK=2,
    ADDR_RPA_OR_PUBLIC=2,
    ADDR_RPA_OR_RAND=3,
    ADV_CONN_DIR=1,
    ADV_CONN_DIR_LDC=4,
    ADV_CONN_UNDIR=0,
    ADV_DIS=0,
    ADV_DISC_UNDIR=2,
    ADV_EN=1,
    ADV_END=5,
    ADV_EN_END=2,
    ADV_NONCONN_UNDIR=3,
    API_AC_BE=1,
    API_AC_BK=0,
    API_AC_MAX=4,
    API_AC_VI=2,
    API_AC_VO=3,
    BLE_IRQn=72,
    BMX_ERR_IRQn=16,
    BMX_TO_IRQn=17,
    BOR_IRQn=69,
    BT_CONN_OOB_BOTH_PEERS=2,
    BT_CONN_OOB_LE_LEGACY=0,
    BT_CONN_OOB_LE_SC=1,
    BT_CONN_OOB_LOCAL_ONLY=0,
    BT_CONN_OOB_NO_DATA=3,
    BT_CONN_OOB_REMOTE_ONLY=1,
    BT_CONN_ROLE_MASTER=0,
    BT_CONN_ROLE_SLAVE=1,
    BT_CONN_TYPE_ALL=7,
    BT_CONN_TYPE_BR=2,
    BT_CONN_TYPE_LE=1,
    BT_CONN_TYPE_SCO=4,
    BT_LE_ADV_OPT_CONNECTABLE=1,
    BT_LE_ADV_OPT_DIR_ADDR_RPA=32,
    BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY=16,
    BT_LE_ADV_OPT_FILTER_CONN=-128,
    BT_LE_ADV_OPT_FILTER_SCAN_REQ=64,
    BT_LE_ADV_OPT_NONE=0,
    BT_LE_ADV_OPT_ONE_TIME=2,
    BT_LE_ADV_OPT_USE_IDENTITY=4,
    BT_LE_ADV_OPT_USE_NAME=8,
    BT_LE_SCAN_FILTER_DUPLICATE=1,
    BT_LE_SCAN_FILTER_EXTENDED=4,
    BT_LE_SCAN_FILTER_WHITELIST=2,
    BZ_PHY_IRQn=71,
    CLIC_SOFT_PEND_IRQn=12,
    CNTLR_BB_OGF=3,
    CONTROL_PORT_HOST=1,
    CONTROL_PORT_NO_ENC=2,
    CO_BAD_PARAM=4,
    CO_BUSY=8,
    CO_EMPTY=2,
    CO_FAIL=1,
    CO_FULL=3,
    CO_NOT_FOUND=5,
    CO_NO_ELT_IN_USE=7,
    CO_NO_MORE_ELT_AVAILABLE=6,
    CO_OK=0,
    CO_OP_IN_PROGRESS=9,
    DISABLE_HT=4,
    DMA_ALL_IRQn=31,
    DMA_BMX_ERR_IRQn=24,
    EFUSE_IRQn=42,
    ERR_ABRT=-13,
    ERR_ALREADY=-9,
    ERR_ARG=-16,
    ERR_BUF=-2,
    ERR_CLSD=-15,
    ERR_CONN=-11,
    ERR_IF=-12,
    ERR_INPROGRESS=-5,
    ERR_ISCONN=-10,
    ERR_MEM=-1,
    ERR_OK=0,
    ERR_RST=-14,
    ERR_RTE=-4,
    ERR_TIMEOUT=-3,
    ERR_USE=-8,
    ERR_VAL=-6,
    ERR_WOULDBLOCK=-7,
    GLB_PLL_XTAL_24M=1,
    GLB_PLL_XTAL_26M=5,
    GLB_PLL_XTAL_32M=2,
    GLB_PLL_XTAL_38P4M=3,
    GLB_PLL_XTAL_40M=4,
    GLB_PLL_XTAL_NONE=0,
    GLB_PLL_XTAL_RC32M=6,
    GLB_SYS_CLK_PLL120M=3,
    GLB_SYS_CLK_PLL160M=4,
    GLB_SYS_CLK_PLL192M=5,
    GLB_SYS_CLK_PLL48M=2,
    GLB_SYS_CLK_RC32M=0,
    GLB_SYS_CLK_XTAL=1,
    GPADC_DMA_IRQn=41,
    GPIO_INT0_IRQn=60,
    HBN_32K_DIG=3,
    HBN_32K_RC=0,
    HBN_32K_XTAL=1,
    HBN_OUT0_IRQn=67,
    HBN_OUT1_IRQn=68,
    HBN_ROOT_CLK_PLL=2,
    HBN_ROOT_CLK_RC32M=0,
    HBN_ROOT_CLK_XTAL=1,
    HBN_UART_CLK_160M=1,
    HBN_UART_CLK_FCLK=0,
    I2C_IRQn=48,
    INFO_PAR_OGF=4,
    INIT_FILT_END=2,
    INIT_FILT_IGNORE_WLST=0,
    INIT_FILT_USE_WLST=1,
    IRQn_LAST=80,
    IRRX_IRQn=36,
    IRTX_IRQn=35,
    KE_EVT_IDLE=0,
    KE_EVT_RUNNING=1,
    KE_MEM_BLOCK_EM=1,
    KE_MEM_BLOCK_MAX=2,
    KE_MEM_BLOCK_RAM=0,
    KE_MEM_ENV=0,
    KE_MEM_KE_MSG=0,
    KE_MEM_NON_RETENTION=0,
    L1C_BMX_ERR_IRQn=18,
    L1C_BMX_TO_IRQn=19,
    LE_CNTLR_OGF=8,
    LINK_TYPE_END=2,
    LIR_TYPE_A=1,
    LIR_TYPE_B=2,
    LIR_TYPE_C=3,
    LIR_TYPE_D=4,
    LIR_TYPE_E=5,
    LIR_TYPE_F=6,
    LIR_TYPE_G=7,
    LIR_TYPE_H=8,
    LIR_TYPE_I=9,
    LIR_TYPE_J=10,
    LK_CNTL_OGF=1,
    LK_POL_OGF=2,
    LLID_CNTL=3,
    LLID_CONTINUE=1,
    LLID_END=4,
    LLID_RFU=0,
    LLID_START=2,
    LLM_LE_ADV_DUMMY_IDX=1,
    LLM_LE_ADV_IDX=5,
    LLM_LE_COEXT_SCAN_IDX=3,
    LLM_LE_SCAN_CON_REQ_ADV_DIR_IDX=2,
    LLM_LE_SCAN_RSP_IDX=4,
    LL_ADV_CONN_DIR=1,
    LL_ADV_CONN_UNDIR=0,
    LL_ADV_DISC_UNDIR=6,
    LL_ADV_END=8,
    LL_ADV_NONCONN_UNDIR=2,
    LL_CONNECT_REQ=5,
    LL_EXT_ADV=7,
    LL_SCAN_REQ=3,
    LL_SCAN_RSP=4,
    MAC_GEN_IRQn=77,
    MAC_PORT_TRG_IRQn=78,
    MAC_RX_TRG_IRQn=75,
    MAC_TXRX_MISC_IRQn=74,
    MAC_TXRX_TIMER_IRQn=73,
    MAC_TX_TRG_IRQn=76,
    MAX_OGF=64,
    MEMP_ALTCP_PCB=5,
    MEMP_IGMP_GROUP=10,
    MEMP_MAX=15,
    MEMP_NETBUF=6,
    MEMP_NETCONN=7,
    MEMP_NETDB=12,
    MEMP_PBUF=13,
    MEMP_PBUF_POOL=14,
    MEMP_RAW_PCB=0,
    MEMP_SYS_TIMEOUT=11,
    MEMP_TCPIP_MSG_API=8,
    MEMP_TCPIP_MSG_INPKT=9,
    MEMP_TCP_PCB=2,
    MEMP_TCP_PCB_LISTEN=3,
    MEMP_TCP_SEG=4,
    MEMP_UDP_PCB=1,
    MEXT_IRQn=11,
    MFP_IN_USE=16,
    MM_AP=2,
    MM_IBSS=1,
    MM_MESH_POINT=3,
    MM_STA=0,
    MSOFT_IRQn=3,
    MTIME_IRQn=7,
    OP_CFLIRI_BUFFER=54,
    OP_CFLIR_BUFFER=56,
    OP_CFLIR_PLD=57,
    OP_CLIR=53,
    OP_CTLIRI_PLD=55,
    OP_LADD=24,
    OP_LCMP=25,
    OP_LDIV=20,
    OP_LDIV2N=18,
    OP_LMUL=22,
    OP_LMUL2N=19,
    OP_LSQR=21,
    OP_LSUB=23,
    OP_MADD=40,
    OP_MDIV2=33,
    OP_MEXP=35,
    OP_MINV=34,
    OP_MMUL=37,
    OP_MOD2N=17,
    OP_MOVDAT=50,
    OP_MREM=38,
    OP_MSQR=36,
    OP_MSUB=39,
    OP_NLIR=51,
    OP_PPSEL=0,
    OP_RESIZE=49,
    OP_SLIR=52,
    PAYL_00001111=6,
    PAYL_01010101=7,
    PAYL_10101010=2,
    PAYL_11110000=1,
    PAYL_ALL_0=5,
    PAYL_ALL_1=4,
    PAYL_END=8,
    PAYL_PSEUDO_RAND_15=3,
    PAYL_PSEUDO_RAND_9=0,
    PBUF_IP=-94,
    PBUF_LINK=-114,
    PBUF_RAW=0,
    PBUF_RAW_TX=-128,
    PBUF_TRANSPORT=-74,
    PDS_WAKEUP_IRQn=66,
    PHY_BAND_2G4=0,
    PHY_BAND_5G=1,
    PHY_BAND_MAX=2,
    PHY_CHNL_BW_160=3,
    PHY_CHNL_BW_20=0,
    PHY_CHNL_BW_40=1,
    PHY_CHNL_BW_80=2,
    PHY_CHNL_BW_80P80=4,
    PHY_CHNL_BW_OTHER=5,
    POOL_LINKED_LIST=0,
    PS_MODE_OFF=0,
    PS_MODE_ON=1,
    PS_MODE_ON_DYN=2,
    PT_ENTRY_FW_CPU0=0,
    PT_ENTRY_FW_CPU1=1,
    PT_ENTRY_MAX=16,
    PWM_IRQn=50,
    RESERVED0=32,
    RESERVED1=33,
    RESERVED10=55,
    RESERVED11=56,
    RESERVED12=57,
    RESERVED13=58,
    RESERVED14=59,
    RESERVED16=61,
    RESERVED17=62,
    RESERVED18=63,
    RESERVED19=64,
    RESERVED2=34,
    RESERVED20=65,
    RESERVED3=37,
    RESERVED4=38,
    RESERVED5=40,
    RESERVED6=44,
    RESERVED7=47,
    RESERVED8=49,
    RESERVED9=51,
    RF_TOP_INT0_IRQn=21,
    RF_TOP_INT1_IRQn=22,
    RING_LINKED_LIST=1,
    ROLE_END=2,
    ROLE_MASTER=0,
    ROLE_SLAVE=1,
    SCAN_ACTIVE=1,
    SCAN_DIS=0,
    SCAN_EN=1,
    SCAN_END=2,
    SCAN_EN_END=2,
    SCAN_PASSIVE=0,
    SCA_100PPM=3,
    SCA_150PPM=2,
    SCA_20PPM=7,
    SCA_250PPM=1,
    SCA_30PPM=6,
    SCA_500PPM=0,
    SCA_50PPM=5,
    SCA_75PPM=4,
    SDIO_IRQn=23,
    SEC_AES_IRQn=29,
    SEC_BMX_ERR_IRQn=20,
    SEC_CDET_IRQn=26,
    SEC_GMAC_IRQn=25,
    SEC_PKA_IRQn=27,
    SEC_SHA_IRQn=30,
    SEC_TRNG_IRQn=28,
    SF_CTRL_IRQn=39,
    SPI_IRQn=43,
    STAT_PAR_OGF=5,
    TASK_API=13,
    TASK_APM=7,
    TASK_BAM=8,
    TASK_CFG=12,
    TASK_DBG=1,
    TASK_HOSTAPD_U=10,
    TASK_LAST_EMB=12,
    TASK_MAX=14,
    TASK_ME=5,
    TASK_MESH=9,
    TASK_MM=0,
    TASK_NONE=-1,
    TASK_RXU=11,
    TASK_SCAN=2,
    TASK_SCANU=4,
    TASK_SM=6,
    TASK_TDLS=3,
    TEST_END=3,
    TEST_OGF=6,
    TEST_RX=1,
    TEST_RXTX=2,
    TEST_TX=0,
    TIMER_CH0_IRQn=52,
    TIMER_CH1_IRQn=53,
    TIMER_WDT_IRQn=54,
    TX_LVL_CURRENT=0,
    TX_LVL_LEN=2,
    TX_LVL_MAX=1,
    UART0_IRQn=45,
    UART1_IRQn=46,
    VFS_TYPE_BLOCK_DEV=2,
    VFS_TYPE_CHAR_DEV=1,
    VFS_TYPE_FS_DEV=3,
    VFS_TYPE_NOT_INIT=0,
    VS_OGF=63,
    WIFI_IPC_PUBLIC_IRQn=79,
    WIFI_IRQn=70,
    WPA_WPA2_IN_USE=8,
    eIncrement=2,
    eNoAction=0,
    eSetBits=1,
    eSetValueWithOverwrite=3,
    eSetValueWithoutOverwrite=4
} anon_enum_8_for_oob_config;

typedef union anon_union_for_u.conflict anon_union_for_u.conflict, *Panon_union_for_u.conflict;

typedef struct anon_struct.conflict50 anon_struct.conflict50, *Panon_struct.conflict50;

typedef struct anon_struct.conflict51 anon_struct.conflict51, *Panon_struct.conflict51;

typedef struct anon_struct.conflict52 anon_struct.conflict52, *Panon_struct.conflict52;

typedef struct anon_struct.conflict53 anon_struct.conflict53, *Panon_struct.conflict53;

typedef struct anon_struct.conflict54 anon_struct.conflict54, *Panon_struct.conflict54;

struct anon_struct.conflict54 {
    u8 action_code;
    u8 dialog_token;
    u8 tpc_elem_id;
    u8 tpc_elem_length;
};

struct anon_struct.conflict53 {
    u8 action_code;
    u8 membership[8];
    u8 position[16];
};

struct anon_struct.conflict52 {
    u8 action_code;
    u8 operating_mode;
};

struct anon_struct.conflict51 {
    u8 action_code;
    u8 dialog_token;
    __le16 capability;
    u8[0] variable;
};

struct anon_struct.conflict50 {
    u8 action_code;
    u8 chanwidth;
};

union anon_union_for_u.conflict {
    struct anon_struct.conflict57 wme_action;
    struct anon_struct.conflict57 chan_switch;
    struct anon_struct.conflict57 ext_chan_switch;
    struct anon_struct.conflict57 measurement;
    struct anon_struct.conflict57 addba_req;
    struct anon_struct.conflict57 addba_resp;
    struct anon_struct.conflict57 delba;
    struct anon_struct.conflict57 self_prot;
    struct anon_struct.conflict57 mesh_action;
    struct anon_struct.conflict57 sa_query;
    struct anon_struct.conflict57 ht_smps;
    struct anon_struct.conflict50 ht_notify_cw;
    struct anon_struct.conflict51 tdls_discover_resp;
    struct anon_struct.conflict52 vht_opmode_notif;
    struct anon_struct.conflict53 vht_group_notif;
    struct anon_struct.conflict54 tpc_report;
    struct anon_struct.conflict57 ftm;
};


// WARNING! conflicting data type names: /DWARF/_UNCATEGORIZED_/anon_struct/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u

typedef union anon_union_for_u.conflict2 anon_union_for_u.conflict2, *Panon_union_for_u.conflict2;

typedef struct anon_struct.conflict42 anon_struct.conflict42, *Panon_struct.conflict42;

typedef struct anon_struct.conflict43 anon_struct.conflict43, *Panon_struct.conflict43;

typedef struct anon_struct.conflict44 anon_struct.conflict44, *Panon_struct.conflict44;

typedef struct anon_struct.conflict45 anon_struct.conflict45, *Panon_struct.conflict45;

typedef struct anon_struct.conflict46 anon_struct.conflict46, *Panon_struct.conflict46;

typedef struct anon_struct.conflict47 anon_struct.conflict47, *Panon_struct.conflict47;

typedef struct anon_struct.conflict48 anon_struct.conflict48, *Panon_struct.conflict48;

typedef struct anon_struct.conflict49 anon_struct.conflict49, *Panon_struct.conflict49;

typedef struct anon_struct.conflict55 anon_struct.conflict55, *Panon_struct.conflict55;

struct anon_struct.conflict55 {
    u8 action_code;
    u8 dialog_token;
    u8 follow_up;
    u8 tod[6];
    u8 toa[6];
    __le16 tod_error;
    __le16 toa_error;
    u8[0] variable;
};

struct anon_struct.conflict43 {
    u8 action_code;
    u8[0] variable;
};

struct anon_struct.conflict42 {
    u8 action_code;
    u8 dialog_token;
    u8 status_code;
    u8[0] variable;
};

struct anon_struct.conflict49 {
    u8 action;
    u8 smps_control;
};

struct anon_struct.conflict48 {
    u8 action;
    u8 trans_id[2];
};

struct anon_struct.conflict47 {
    u8 action_code;
    __le16 params;
    __le16 reason_code;
};

struct anon_struct.conflict46 {
    u8 action_code;
    u8 dialog_token;
    __le16 status;
    __le16 capab;
    __le16 timeout;
};

struct anon_struct.conflict45 {
    u8 action_code;
    u8 dialog_token;
    __le16 capab;
    __le16 timeout;
    __le16 start_seq_num;
};

struct anon_struct.conflict44 {
    u8 action_code;
    u8 dialog_token;
    u8 element_id;
    u8 length;
};

union anon_union_for_u.conflict2 {
    struct anon_struct.conflict42 wme_action;
    struct anon_struct.conflict43 chan_switch;
    struct anon_struct.conflict43 ext_chan_switch;
    struct anon_struct.conflict44 measurement;
    struct anon_struct.conflict45 addba_req;
    struct anon_struct.conflict46 addba_resp;
    struct anon_struct.conflict47 delba;
    struct anon_struct.conflict43 self_prot;
    struct anon_struct.conflict43 mesh_action;
    struct anon_struct.conflict48 sa_query;
    struct anon_struct.conflict49 ht_smps;
    struct anon_struct.conflict50 ht_notify_cw;
    struct anon_struct.conflict51 tdls_discover_resp;
    struct anon_struct.conflict52 vht_opmode_notif;
    struct anon_struct.conflict53 vht_group_notif;
    struct anon_struct.conflict54 tpc_report;
    struct anon_struct.conflict55 ftm;
};

typedef union anon_union_for_u.conflict1 anon_union_for_u.conflict1, *Panon_union_for_u.conflict1;

union anon_union_for_u.conflict1 {
    struct anon_struct.conflict58 wme_action;
    struct anon_struct.conflict58 chan_switch;
    struct anon_struct.conflict58 ext_chan_switch;
    struct anon_struct.conflict58 measurement;
    struct anon_struct.conflict58 addba_req;
    struct anon_struct.conflict58 addba_resp;
    struct anon_struct.conflict58 delba;
    struct anon_struct.conflict58 self_prot;
    struct anon_struct.conflict58 mesh_action;
    struct anon_struct.conflict58 sa_query;
    struct anon_struct.conflict58 ht_smps;
    struct anon_struct.conflict50 ht_notify_cw;
    struct anon_struct.conflict51 tdls_discover_resp;
    struct anon_struct.conflict52 vht_opmode_notif;
    struct anon_struct.conflict53 vht_group_notif;
    struct anon_struct.conflict54 tpc_report;
    struct anon_struct.conflict58 ftm;
};

typedef enum anon_enum_8_for_oob_config.conflict3 {
    AC_BE=1,
    AC_BK=0,
    AC_MAX=4,
    AC_VI=2,
    AC_VO=3,
    ADDR_END=4,
    ADDR_MASK=1,
    ADDR_PUBLIC=0,
    ADDR_RAND=1,
    ADDR_RPA_MASK=2,
    ADDR_RPA_OR_PUBLIC=2,
    ADDR_RPA_OR_RAND=3,
    ADV_CONN_DIR=1,
    ADV_CONN_DIR_LDC=4,
    ADV_CONN_UNDIR=0,
    ADV_DIS=0,
    ADV_DISC_UNDIR=2,
    ADV_EN=1,
    ADV_END=5,
    ADV_EN_END=2,
    ADV_NONCONN_UNDIR=3,
    API_AC_BE=1,
    API_AC_BK=0,
    API_AC_MAX=4,
    API_AC_VI=2,
    API_AC_VO=3,
    BLE_IRQn=72,
    BMX_ERR_IRQn=16,
    BMX_TO_IRQn=17,
    BOR_IRQn=69,
    BT_CONN_AUTO_CONNECT=0,
    BT_CONN_AUTO_FEATURE_EXCH=13,
    BT_CONN_AUTO_PHY_COMPLETE=12,
    BT_CONN_AUTO_PHY_UPDATE=7,
    BT_CONN_AUTO_VERSION_INFO=14,
    BT_CONN_BR_LEGACY_SECURE=1,
    BT_CONN_BR_NOBOND=4,
    BT_CONN_BR_PAIRING=3,
    BT_CONN_BR_PAIRING_INITIATOR=5,
    BT_CONN_CLEANUP=6,
    BT_CONN_FORCE_PAIR=11,
    BT_CONN_NUM_FLAGS=15,
    BT_CONN_OOB_BOTH_PEERS=2,
    BT_CONN_OOB_LE_LEGACY=0,
    BT_CONN_OOB_LE_SC=1,
    BT_CONN_OOB_LOCAL_ONLY=0,
    BT_CONN_OOB_NO_DATA=3,
    BT_CONN_OOB_REMOTE_ONLY=1,
    BT_CONN_ROLE_MASTER=0,
    BT_CONN_ROLE_SLAVE=1,
    BT_CONN_SLAVE_PARAM_L2CAP=10,
    BT_CONN_SLAVE_PARAM_SET=9,
    BT_CONN_SLAVE_PARAM_UPDATE=8,
    BT_CONN_TYPE_ALL=7,
    BT_CONN_TYPE_BR=2,
    BT_CONN_TYPE_LE=1,
    BT_CONN_TYPE_SCO=4,
    BT_CONN_USER=2,
    BT_DEV_ACTIVE_SCAN=12,
    BT_DEV_ADVERTISING=6,
    BT_DEV_ADVERTISING_CONNECTABLE=8,
    BT_DEV_ADVERTISING_NAME=7,
    BT_DEV_AUTO_CONN=15,
    BT_DEV_ENABLE=0,
    BT_DEV_EXPLICIT_SCAN=11,
    BT_DEV_HAS_PUB_KEY=4,
    BT_DEV_ID_PENDING=17,
    BT_DEV_KEEP_ADVERTISING=9,
    BT_DEV_NUM_FLAGS=18,
    BT_DEV_PRESET_ID=2,
    BT_DEV_PUB_KEY_BUSY=5,
    BT_DEV_READY=1,
    BT_DEV_RPA_VALID=16,
    BT_DEV_SCANNING=10,
    BT_DEV_SCAN_FILTER_DUP=13,
    BT_DEV_SCAN_WL=14,
    BT_DEV_USER_ID_ADDR=3,
    BT_EVENT_CMD_TX=0,
    BT_EVENT_CONN_TX_QUEUE=1,
    BT_GATT_DISCOVER_ATTRIBUTE=5,
    BT_GATT_DISCOVER_CHARACTERISTIC=3,
    BT_GATT_DISCOVER_DESCRIPTOR=4,
    BT_GATT_DISCOVER_INCLUDE=2,
    BT_GATT_DISCOVER_PRIMARY=0,
    BT_GATT_DISCOVER_SECONDARY=1,
    BT_GATT_ITER_CONTINUE=1,
    BT_GATT_ITER_STOP=0,
    BT_GATT_PERM_NONE=0,
    BT_GATT_PERM_PREPARE_WRITE=64,
    BT_GATT_PERM_READ=1,
    BT_GATT_PERM_READ_AUTHEN=16,
    BT_GATT_PERM_READ_ENCRYPT=4,
    BT_GATT_PERM_WRITE=2,
    BT_GATT_PERM_WRITE_AUTHEN=32,
    BT_GATT_PERM_WRITE_ENCRYPT=8,
    BT_GATT_SUBSCRIBE_FLAG_VOLATILE=0,
    BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING=1,
    BT_GATT_SUBSCRIBE_NUM_FLAGS=2,
    BT_HCI_ACL_DATA=1,
    BT_HCI_CMD=0,
    BT_HCI_CMD_CMP_EVT=2,
    BT_HCI_CMD_STAT_EVT=3,
    BT_HCI_EVT=5,
    BT_HCI_LE_EVT=4,
    BT_KEYS_ALL=63,
    BT_KEYS_AUTHENTICATED=1,
    BT_KEYS_DEBUG=2,
    BT_KEYS_ID_PENDING_ADD=4,
    BT_KEYS_ID_PENDING_DEL=8,
    BT_KEYS_IRK=2,
    BT_KEYS_LOCAL_CSRK=8,
    BT_KEYS_LTK=4,
    BT_KEYS_LTK_P256=32,
    BT_KEYS_REMOTE_CSRK=16,
    BT_KEYS_SC=16,
    BT_KEYS_SLAVE_LTK=1,
    BT_LE_ADV_OPT_CONNECTABLE=1,
    BT_LE_ADV_OPT_DIR_ADDR_RPA=32,
    BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY=16,
    BT_LE_ADV_OPT_FILTER_CONN=-128,
    BT_LE_ADV_OPT_FILTER_SCAN_REQ=64,
    BT_LE_ADV_OPT_NONE=0,
    BT_LE_ADV_OPT_ONE_TIME=2,
    BT_LE_ADV_OPT_USE_IDENTITY=4,
    BT_LE_ADV_OPT_USE_NAME=8,
    BT_LE_SCAN_FILTER_DUPLICATE=1,
    BT_LE_SCAN_FILTER_EXTENDED=4,
    BT_LE_SCAN_FILTER_WHITELIST=2,
    BT_QUIRK_NO_RESET=1,
    BT_UUID_TYPE_128=2,
    BT_UUID_TYPE_16=0,
    BT_UUID_TYPE_32=1,
    BZ_PHY_IRQn=71,
    CLIC_SOFT_PEND_IRQn=12,
    CNTLR_BB_OGF=3,
    CONTROL_PORT_HOST=1,
    CONTROL_PORT_NO_ENC=2,
    CO_BAD_PARAM=4,
    CO_BUSY=8,
    CO_EMPTY=2,
    CO_FAIL=1,
    CO_FULL=3,
    CO_NOT_FOUND=5,
    CO_NO_ELT_IN_USE=7,
    CO_NO_MORE_ELT_AVAILABLE=6,
    CO_OK=0,
    CO_OP_IN_PROGRESS=9,
    DISABLE_HT=4,
    DMA_ALL_IRQn=31,
    DMA_BMX_ERR_IRQn=24,
    EFUSE_IRQn=42,
    ERR_ABRT=-13,
    ERR_ALREADY=-9,
    ERR_ARG=-16,
    ERR_BUF=-2,
    ERR_CLSD=-15,
    ERR_CONN=-11,
    ERR_IF=-12,
    ERR_INPROGRESS=-5,
    ERR_ISCONN=-10,
    ERR_MEM=-1,
    ERR_OK=0,
    ERR_RST=-14,
    ERR_RTE=-4,
    ERR_TIMEOUT=-3,
    ERR_USE=-8,
    ERR_VAL=-6,
    ERR_WOULDBLOCK=-7,
    GLB_PLL_XTAL_24M=1,
    GLB_PLL_XTAL_26M=5,
    GLB_PLL_XTAL_32M=2,
    GLB_PLL_XTAL_38P4M=3,
    GLB_PLL_XTAL_40M=4,
    GLB_PLL_XTAL_NONE=0,
    GLB_PLL_XTAL_RC32M=6,
    GLB_SYS_CLK_PLL120M=3,
    GLB_SYS_CLK_PLL160M=4,
    GLB_SYS_CLK_PLL192M=5,
    GLB_SYS_CLK_PLL48M=2,
    GLB_SYS_CLK_RC32M=0,
    GLB_SYS_CLK_XTAL=1,
    GPADC_DMA_IRQn=41,
    GPIO_INT0_IRQn=60,
    HBN_32K_DIG=3,
    HBN_32K_RC=0,
    HBN_32K_XTAL=1,
    HBN_OUT0_IRQn=67,
    HBN_OUT1_IRQn=68,
    HBN_ROOT_CLK_PLL=2,
    HBN_ROOT_CLK_RC32M=0,
    HBN_ROOT_CLK_XTAL=1,
    HBN_UART_CLK_160M=1,
    HBN_UART_CLK_FCLK=0,
    I2C_IRQn=48,
    INFO_PAR_OGF=4,
    INIT_FILT_END=2,
    INIT_FILT_IGNORE_WLST=0,
    INIT_FILT_USE_WLST=1,
    IRQn_LAST=80,
    IRRX_IRQn=36,
    IRTX_IRQn=35,
    KE_EVT_IDLE=0,
    KE_EVT_RUNNING=1,
    KE_MEM_BLOCK_EM=1,
    KE_MEM_BLOCK_MAX=2,
    KE_MEM_BLOCK_RAM=0,
    KE_MEM_ENV=0,
    KE_MEM_KE_MSG=0,
    KE_MEM_NON_RETENTION=0,
    K_WORK_STATE_PENDING=0,
    L1C_BMX_ERR_IRQn=18,
    L1C_BMX_TO_IRQn=19,
    LE_CNTLR_OGF=8,
    LINK_TYPE_END=2,
    LIR_TYPE_A=1,
    LIR_TYPE_B=2,
    LIR_TYPE_C=3,
    LIR_TYPE_D=4,
    LIR_TYPE_E=5,
    LIR_TYPE_F=6,
    LIR_TYPE_G=7,
    LIR_TYPE_H=8,
    LIR_TYPE_I=9,
    LIR_TYPE_J=10,
    LK_CNTL_OGF=1,
    LK_POL_OGF=2,
    LLID_CNTL=3,
    LLID_CONTINUE=1,
    LLID_END=4,
    LLID_RFU=0,
    LLID_START=2,
    LLM_LE_ADV_DUMMY_IDX=1,
    LLM_LE_ADV_IDX=5,
    LLM_LE_COEXT_SCAN_IDX=3,
    LLM_LE_SCAN_CON_REQ_ADV_DIR_IDX=2,
    LLM_LE_SCAN_RSP_IDX=4,
    LL_ADV_CONN_DIR=1,
    LL_ADV_CONN_UNDIR=0,
    LL_ADV_DISC_UNDIR=6,
    LL_ADV_END=8,
    LL_ADV_NONCONN_UNDIR=2,
    LL_CONNECT_REQ=5,
    LL_EXT_ADV=7,
    LL_SCAN_REQ=3,
    LL_SCAN_RSP=4,
    MAC_GEN_IRQn=77,
    MAC_PORT_TRG_IRQn=78,
    MAC_RX_TRG_IRQn=75,
    MAC_TXRX_MISC_IRQn=74,
    MAC_TXRX_TIMER_IRQn=73,
    MAC_TX_TRG_IRQn=76,
    MAX_OGF=64,
    MEMP_ALTCP_PCB=5,
    MEMP_IGMP_GROUP=10,
    MEMP_MAX=15,
    MEMP_NETBUF=6,
    MEMP_NETCONN=7,
    MEMP_NETDB=12,
    MEMP_PBUF=13,
    MEMP_PBUF_POOL=14,
    MEMP_RAW_PCB=0,
    MEMP_SYS_TIMEOUT=11,
    MEMP_TCPIP_MSG_API=8,
    MEMP_TCPIP_MSG_INPKT=9,
    MEMP_TCP_PCB=2,
    MEMP_TCP_PCB_LISTEN=3,
    MEMP_TCP_SEG=4,
    MEMP_UDP_PCB=1,
    MEXT_IRQn=11,
    MFP_IN_USE=16,
    MM_AP=2,
    MM_IBSS=1,
    MM_MESH_POINT=3,
    MM_STA=0,
    MSOFT_IRQn=3,
    MTIME_IRQn=7,
    OP_CFLIRI_BUFFER=54,
    OP_CFLIR_BUFFER=56,
    OP_CFLIR_PLD=57,
    OP_CLIR=53,
    OP_CTLIRI_PLD=55,
    OP_LADD=24,
    OP_LCMP=25,
    OP_LDIV=20,
    OP_LDIV2N=18,
    OP_LMUL=22,
    OP_LMUL2N=19,
    OP_LSQR=21,
    OP_LSUB=23,
    OP_MADD=40,
    OP_MDIV2=33,
    OP_MEXP=35,
    OP_MINV=34,
    OP_MMUL=37,
    OP_MOD2N=17,
    OP_MOVDAT=50,
    OP_MREM=38,
    OP_MSQR=36,
    OP_MSUB=39,
    OP_NLIR=51,
    OP_PPSEL=0,
    OP_RESIZE=49,
    OP_SLIR=52,
    PAYL_00001111=6,
    PAYL_01010101=7,
    PAYL_10101010=2,
    PAYL_11110000=1,
    PAYL_ALL_0=5,
    PAYL_ALL_1=4,
    PAYL_END=8,
    PAYL_PSEUDO_RAND_15=3,
    PAYL_PSEUDO_RAND_9=0,
    PBUF_IP=-94,
    PBUF_LINK=-114,
    PBUF_RAW=0,
    PBUF_RAW_TX=-128,
    PBUF_TRANSPORT=-74,
    PDS_WAKEUP_IRQn=66,
    PHY_BAND_2G4=0,
    PHY_BAND_5G=1,
    PHY_BAND_MAX=2,
    PHY_CHNL_BW_160=3,
    PHY_CHNL_BW_20=0,
    PHY_CHNL_BW_40=1,
    PHY_CHNL_BW_80=2,
    PHY_CHNL_BW_80P80=4,
    PHY_CHNL_BW_OTHER=5,
    POOL_LINKED_LIST=0,
    PS_MODE_OFF=0,
    PS_MODE_ON=1,
    PS_MODE_ON_DYN=2,
    PT_ENTRY_FW_CPU0=0,
    PT_ENTRY_FW_CPU1=1,
    PT_ENTRY_MAX=16,
    PWM_IRQn=50,
    RESERVED0=32,
    RESERVED1=33,
    RESERVED10=55,
    RESERVED11=56,
    RESERVED12=57,
    RESERVED13=58,
    RESERVED14=59,
    RESERVED16=61,
    RESERVED17=62,
    RESERVED18=63,
    RESERVED19=64,
    RESERVED2=34,
    RESERVED20=65,
    RESERVED3=37,
    RESERVED4=38,
    RESERVED5=40,
    RESERVED6=44,
    RESERVED7=47,
    RESERVED8=49,
    RESERVED9=51,
    RF_TOP_INT0_IRQn=21,
    RF_TOP_INT1_IRQn=22,
    RING_LINKED_LIST=1,
    ROLE_END=2,
    ROLE_MASTER=0,
    ROLE_SLAVE=1,
    SCAN_ACTIVE=1,
    SCAN_DIS=0,
    SCAN_EN=1,
    SCAN_END=2,
    SCAN_EN_END=2,
    SCAN_PASSIVE=0,
    SCA_100PPM=3,
    SCA_150PPM=2,
    SCA_20PPM=7,
    SCA_250PPM=1,
    SCA_30PPM=6,
    SCA_500PPM=0,
    SCA_50PPM=5,
    SCA_75PPM=4,
    SC_INDICATE_PENDING=1,
    SC_NUM_FLAGS=2,
    SC_RANGE_CHANGED=0,
    SDIO_IRQn=23,
    SEC_AES_IRQn=29,
    SEC_BMX_ERR_IRQn=20,
    SEC_CDET_IRQn=26,
    SEC_GMAC_IRQn=25,
    SEC_PKA_IRQn=27,
    SEC_SHA_IRQn=30,
    SEC_TRNG_IRQn=28,
    SF_CTRL_IRQn=39,
    SMP_FLAG_BOND=12,
    SMP_FLAG_BR_CONNECTED=17,
    SMP_FLAG_BR_PAIR=18,
    SMP_FLAG_CFM_DELAYED=0,
    SMP_FLAG_CT2=19,
    SMP_FLAG_DERIVE_LK=16,
    SMP_FLAG_DHCHECK_WAIT=15,
    SMP_FLAG_DHKEY_PENDING=7,
    SMP_FLAG_DHKEY_SEND=8,
    SMP_FLAG_DISPLAY=10,
    SMP_FLAG_ENC_PENDING=1,
    SMP_FLAG_KEYS_DISTR=2,
    SMP_FLAG_OOB_PENDING=11,
    SMP_FLAG_PAIRING=3,
    SMP_FLAG_PKEY_SEND=6,
    SMP_FLAG_SC=5,
    SMP_FLAG_SC_DEBUG_KEY=13,
    SMP_FLAG_SEC_REQ=14,
    SMP_FLAG_TIMEOUT=4,
    SMP_FLAG_USER=9,
    SMP_NUM_FLAGS=20,
    SPI_IRQn=43,
    STAT_PAR_OGF=5,
    TASK_API=13,
    TASK_APM=7,
    TASK_BAM=8,
    TASK_CFG=12,
    TASK_DBG=1,
    TASK_HOSTAPD_U=10,
    TASK_LAST_EMB=12,
    TASK_MAX=14,
    TASK_ME=5,
    TASK_MESH=9,
    TASK_MM=0,
    TASK_NONE=-1,
    TASK_RXU=11,
    TASK_SCAN=2,
    TASK_SCANU=4,
    TASK_SM=6,
    TASK_TDLS=3,
    TEST_END=3,
    TEST_OGF=6,
    TEST_RX=1,
    TEST_RXTX=2,
    TEST_TX=0,
    TIMER_CH0_IRQn=52,
    TIMER_CH1_IRQn=53,
    TIMER_WDT_IRQn=54,
    TX_LVL_CURRENT=0,
    TX_LVL_LEN=2,
    TX_LVL_MAX=1,
    UART0_IRQn=45,
    UART1_IRQn=46,
    VFS_TYPE_BLOCK_DEV=2,
    VFS_TYPE_CHAR_DEV=1,
    VFS_TYPE_FS_DEV=3,
    VFS_TYPE_NOT_INIT=0,
    VS_OGF=63,
    WIFI_IPC_PUBLIC_IRQn=79,
    WIFI_IRQn=70,
    WPA_WPA2_IN_USE=8,
    eIncrement=2,
    eNoAction=0,
    eSetBits=1,
    eSetValueWithOverwrite=3,
    eSetValueWithoutOverwrite=4
} anon_enum_8_for_oob_config.conflict3;

typedef enum anon_enum_8_for_oob_config.conflict4 {
    AC_BE=1,
    AC_BK=0,
    AC_MAX=4,
    AC_VI=2,
    AC_VO=3,
    ADDR_END=4,
    ADDR_MASK=1,
    ADDR_PUBLIC=0,
    ADDR_RAND=1,
    ADDR_RPA_MASK=2,
    ADDR_RPA_OR_PUBLIC=2,
    ADDR_RPA_OR_RAND=3,
    ADV_CONN_DIR=1,
    ADV_CONN_DIR_LDC=4,
    ADV_CONN_UNDIR=0,
    ADV_DIS=0,
    ADV_DISC_UNDIR=2,
    ADV_EN=1,
    ADV_END=5,
    ADV_EN_END=2,
    ADV_NONCONN_UNDIR=3,
    API_AC_BE=1,
    API_AC_BK=0,
    API_AC_MAX=4,
    API_AC_VI=2,
    API_AC_VO=3,
    ATT_DISCONNECTED=2,
    ATT_NUM_FLAGS=3,
    ATT_PENDING_CFM=1,
    ATT_PENDING_RSP=0,
    BLE_IRQn=72,
    BMX_ERR_IRQn=16,
    BMX_TO_IRQn=17,
    BOR_IRQn=69,
    BT_CONN_AUTO_CONNECT=0,
    BT_CONN_AUTO_FEATURE_EXCH=13,
    BT_CONN_AUTO_PHY_COMPLETE=12,
    BT_CONN_AUTO_PHY_UPDATE=7,
    BT_CONN_AUTO_VERSION_INFO=14,
    BT_CONN_BR_LEGACY_SECURE=1,
    BT_CONN_BR_NOBOND=4,
    BT_CONN_BR_PAIRING=3,
    BT_CONN_BR_PAIRING_INITIATOR=5,
    BT_CONN_CLEANUP=6,
    BT_CONN_FORCE_PAIR=11,
    BT_CONN_NUM_FLAGS=15,
    BT_CONN_OOB_BOTH_PEERS=2,
    BT_CONN_OOB_LE_LEGACY=0,
    BT_CONN_OOB_LE_SC=1,
    BT_CONN_OOB_LOCAL_ONLY=0,
    BT_CONN_OOB_NO_DATA=3,
    BT_CONN_OOB_REMOTE_ONLY=1,
    BT_CONN_ROLE_MASTER=0,
    BT_CONN_ROLE_SLAVE=1,
    BT_CONN_SLAVE_PARAM_L2CAP=10,
    BT_CONN_SLAVE_PARAM_SET=9,
    BT_CONN_SLAVE_PARAM_UPDATE=8,
    BT_CONN_TYPE_ALL=7,
    BT_CONN_TYPE_BR=2,
    BT_CONN_TYPE_LE=1,
    BT_CONN_TYPE_SCO=4,
    BT_CONN_USER=2,
    BT_DEV_ACTIVE_SCAN=12,
    BT_DEV_ADVERTISING=6,
    BT_DEV_ADVERTISING_CONNECTABLE=8,
    BT_DEV_ADVERTISING_NAME=7,
    BT_DEV_AUTO_CONN=15,
    BT_DEV_ENABLE=0,
    BT_DEV_EXPLICIT_SCAN=11,
    BT_DEV_HAS_PUB_KEY=4,
    BT_DEV_ID_PENDING=17,
    BT_DEV_KEEP_ADVERTISING=9,
    BT_DEV_NUM_FLAGS=18,
    BT_DEV_PRESET_ID=2,
    BT_DEV_PUB_KEY_BUSY=5,
    BT_DEV_READY=1,
    BT_DEV_RPA_VALID=16,
    BT_DEV_SCANNING=10,
    BT_DEV_SCAN_FILTER_DUP=13,
    BT_DEV_SCAN_WL=14,
    BT_DEV_USER_ID_ADDR=3,
    BT_EVENT_CMD_TX=0,
    BT_EVENT_CONN_TX_QUEUE=1,
    BT_GATT_DISCOVER_ATTRIBUTE=5,
    BT_GATT_DISCOVER_CHARACTERISTIC=3,
    BT_GATT_DISCOVER_DESCRIPTOR=4,
    BT_GATT_DISCOVER_INCLUDE=2,
    BT_GATT_DISCOVER_PRIMARY=0,
    BT_GATT_DISCOVER_SECONDARY=1,
    BT_GATT_ITER_CONTINUE=1,
    BT_GATT_ITER_STOP=0,
    BT_GATT_PERM_NONE=0,
    BT_GATT_PERM_PREPARE_WRITE=64,
    BT_GATT_PERM_READ=1,
    BT_GATT_PERM_READ_AUTHEN=16,
    BT_GATT_PERM_READ_ENCRYPT=4,
    BT_GATT_PERM_WRITE=2,
    BT_GATT_PERM_WRITE_AUTHEN=32,
    BT_GATT_PERM_WRITE_ENCRYPT=8,
    BT_GATT_SUBSCRIBE_FLAG_VOLATILE=0,
    BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING=1,
    BT_GATT_SUBSCRIBE_NUM_FLAGS=2,
    BT_GATT_WRITE_FLAG_CMD=2,
    BT_GATT_WRITE_FLAG_PREPARE=1,
    BT_HCI_ACL_DATA=1,
    BT_HCI_CMD=0,
    BT_HCI_CMD_CMP_EVT=2,
    BT_HCI_CMD_STAT_EVT=3,
    BT_HCI_EVT=5,
    BT_HCI_LE_EVT=4,
    BT_KEYS_ALL=63,
    BT_KEYS_AUTHENTICATED=1,
    BT_KEYS_DEBUG=2,
    BT_KEYS_ID_PENDING_ADD=4,
    BT_KEYS_ID_PENDING_DEL=8,
    BT_KEYS_IRK=2,
    BT_KEYS_LOCAL_CSRK=8,
    BT_KEYS_LTK=4,
    BT_KEYS_LTK_P256=32,
    BT_KEYS_REMOTE_CSRK=16,
    BT_KEYS_SC=16,
    BT_KEYS_SLAVE_LTK=1,
    BT_LE_ADV_OPT_CONNECTABLE=1,
    BT_LE_ADV_OPT_DIR_ADDR_RPA=32,
    BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY=16,
    BT_LE_ADV_OPT_FILTER_CONN=-128,
    BT_LE_ADV_OPT_FILTER_SCAN_REQ=64,
    BT_LE_ADV_OPT_NONE=0,
    BT_LE_ADV_OPT_ONE_TIME=2,
    BT_LE_ADV_OPT_USE_IDENTITY=4,
    BT_LE_ADV_OPT_USE_NAME=8,
    BT_LE_SCAN_FILTER_DUPLICATE=1,
    BT_LE_SCAN_FILTER_EXTENDED=4,
    BT_LE_SCAN_FILTER_WHITELIST=2,
    BT_QUIRK_NO_RESET=1,
    BT_UUID_TYPE_128=2,
    BT_UUID_TYPE_16=0,
    BT_UUID_TYPE_32=1,
    BZ_PHY_IRQn=71,
    CLIC_SOFT_PEND_IRQn=12,
    CNTLR_BB_OGF=3,
    CONTROL_PORT_HOST=1,
    CONTROL_PORT_NO_ENC=2,
    CO_BAD_PARAM=4,
    CO_BUSY=8,
    CO_EMPTY=2,
    CO_FAIL=1,
    CO_FULL=3,
    CO_NOT_FOUND=5,
    CO_NO_ELT_IN_USE=7,
    CO_NO_MORE_ELT_AVAILABLE=6,
    CO_OK=0,
    CO_OP_IN_PROGRESS=9,
    DISABLE_HT=4,
    DMA_ALL_IRQn=31,
    DMA_BMX_ERR_IRQn=24,
    EFUSE_IRQn=42,
    ERR_ABRT=-13,
    ERR_ALREADY=-9,
    ERR_ARG=-16,
    ERR_BUF=-2,
    ERR_CLSD=-15,
    ERR_CONN=-11,
    ERR_IF=-12,
    ERR_INPROGRESS=-5,
    ERR_ISCONN=-10,
    ERR_MEM=-1,
    ERR_OK=0,
    ERR_RST=-14,
    ERR_RTE=-4,
    ERR_TIMEOUT=-3,
    ERR_USE=-8,
    ERR_VAL=-6,
    ERR_WOULDBLOCK=-7,
    GLB_PLL_XTAL_24M=1,
    GLB_PLL_XTAL_26M=5,
    GLB_PLL_XTAL_32M=2,
    GLB_PLL_XTAL_38P4M=3,
    GLB_PLL_XTAL_40M=4,
    GLB_PLL_XTAL_NONE=0,
    GLB_PLL_XTAL_RC32M=6,
    GLB_SYS_CLK_PLL120M=3,
    GLB_SYS_CLK_PLL160M=4,
    GLB_SYS_CLK_PLL192M=5,
    GLB_SYS_CLK_PLL48M=2,
    GLB_SYS_CLK_RC32M=0,
    GLB_SYS_CLK_XTAL=1,
    GPADC_DMA_IRQn=41,
    GPIO_INT0_IRQn=60,
    HBN_32K_DIG=3,
    HBN_32K_RC=0,
    HBN_32K_XTAL=1,
    HBN_OUT0_IRQn=67,
    HBN_OUT1_IRQn=68,
    HBN_ROOT_CLK_PLL=2,
    HBN_ROOT_CLK_RC32M=0,
    HBN_ROOT_CLK_XTAL=1,
    HBN_UART_CLK_160M=1,
    HBN_UART_CLK_FCLK=0,
    I2C_IRQn=48,
    INFO_PAR_OGF=4,
    INIT_FILT_END=2,
    INIT_FILT_IGNORE_WLST=0,
    INIT_FILT_USE_WLST=1,
    IRQn_LAST=80,
    IRRX_IRQn=36,
    IRTX_IRQn=35,
    KE_EVT_IDLE=0,
    KE_EVT_RUNNING=1,
    KE_MEM_BLOCK_EM=1,
    KE_MEM_BLOCK_MAX=2,
    KE_MEM_BLOCK_RAM=0,
    KE_MEM_ENV=0,
    KE_MEM_KE_MSG=0,
    KE_MEM_NON_RETENTION=0,
    K_WORK_STATE_PENDING=0,
    L1C_BMX_ERR_IRQn=18,
    L1C_BMX_TO_IRQn=19,
    LE_CNTLR_OGF=8,
    LINK_TYPE_END=2,
    LIR_TYPE_A=1,
    LIR_TYPE_B=2,
    LIR_TYPE_C=3,
    LIR_TYPE_D=4,
    LIR_TYPE_E=5,
    LIR_TYPE_F=6,
    LIR_TYPE_G=7,
    LIR_TYPE_H=8,
    LIR_TYPE_I=9,
    LIR_TYPE_J=10,
    LK_CNTL_OGF=1,
    LK_POL_OGF=2,
    LLID_CNTL=3,
    LLID_CONTINUE=1,
    LLID_END=4,
    LLID_RFU=0,
    LLID_START=2,
    LLM_LE_ADV_DUMMY_IDX=1,
    LLM_LE_ADV_IDX=5,
    LLM_LE_COEXT_SCAN_IDX=3,
    LLM_LE_SCAN_CON_REQ_ADV_DIR_IDX=2,
    LLM_LE_SCAN_RSP_IDX=4,
    LL_ADV_CONN_DIR=1,
    LL_ADV_CONN_UNDIR=0,
    LL_ADV_DISC_UNDIR=6,
    LL_ADV_END=8,
    LL_ADV_NONCONN_UNDIR=2,
    LL_CONNECT_REQ=5,
    LL_EXT_ADV=7,
    LL_SCAN_REQ=3,
    LL_SCAN_RSP=4,
    MAC_GEN_IRQn=77,
    MAC_PORT_TRG_IRQn=78,
    MAC_RX_TRG_IRQn=75,
    MAC_TXRX_MISC_IRQn=74,
    MAC_TXRX_TIMER_IRQn=73,
    MAC_TX_TRG_IRQn=76,
    MAX_OGF=64,
    MEMP_ALTCP_PCB=5,
    MEMP_IGMP_GROUP=10,
    MEMP_MAX=15,
    MEMP_NETBUF=6,
    MEMP_NETCONN=7,
    MEMP_NETDB=12,
    MEMP_PBUF=13,
    MEMP_PBUF_POOL=14,
    MEMP_RAW_PCB=0,
    MEMP_SYS_TIMEOUT=11,
    MEMP_TCPIP_MSG_API=8,
    MEMP_TCPIP_MSG_INPKT=9,
    MEMP_TCP_PCB=2,
    MEMP_TCP_PCB_LISTEN=3,
    MEMP_TCP_SEG=4,
    MEMP_UDP_PCB=1,
    MEXT_IRQn=11,
    MFP_IN_USE=16,
    MM_AP=2,
    MM_IBSS=1,
    MM_MESH_POINT=3,
    MM_STA=0,
    MSOFT_IRQn=3,
    MTIME_IRQn=7,
    OP_CFLIRI_BUFFER=54,
    OP_CFLIR_BUFFER=56,
    OP_CFLIR_PLD=57,
    OP_CLIR=53,
    OP_CTLIRI_PLD=55,
    OP_LADD=24,
    OP_LCMP=25,
    OP_LDIV=20,
    OP_LDIV2N=18,
    OP_LMUL=22,
    OP_LMUL2N=19,
    OP_LSQR=21,
    OP_LSUB=23,
    OP_MADD=40,
    OP_MDIV2=33,
    OP_MEXP=35,
    OP_MINV=34,
    OP_MMUL=37,
    OP_MOD2N=17,
    OP_MOVDAT=50,
    OP_MREM=38,
    OP_MSQR=36,
    OP_MSUB=39,
    OP_NLIR=51,
    OP_PPSEL=0,
    OP_RESIZE=49,
    OP_SLIR=52,
    PAYL_00001111=6,
    PAYL_01010101=7,
    PAYL_10101010=2,
    PAYL_11110000=1,
    PAYL_ALL_0=5,
    PAYL_ALL_1=4,
    PAYL_END=8,
    PAYL_PSEUDO_RAND_15=3,
    PAYL_PSEUDO_RAND_9=0,
    PBUF_IP=-94,
    PBUF_LINK=-114,
    PBUF_RAW=0,
    PBUF_RAW_TX=-128,
    PBUF_TRANSPORT=-74,
    PDS_WAKEUP_IRQn=66,
    PHY_BAND_2G4=0,
    PHY_BAND_5G=1,
    PHY_BAND_MAX=2,
    PHY_CHNL_BW_160=3,
    PHY_CHNL_BW_20=0,
    PHY_CHNL_BW_40=1,
    PHY_CHNL_BW_80=2,
    PHY_CHNL_BW_80P80=4,
    PHY_CHNL_BW_OTHER=5,
    POOL_LINKED_LIST=0,
    PS_MODE_OFF=0,
    PS_MODE_ON=1,
    PS_MODE_ON_DYN=2,
    PT_ENTRY_FW_CPU0=0,
    PT_ENTRY_FW_CPU1=1,
    PT_ENTRY_MAX=16,
    PWM_IRQn=50,
    RESERVED0=32,
    RESERVED1=33,
    RESERVED10=55,
    RESERVED11=56,
    RESERVED12=57,
    RESERVED13=58,
    RESERVED14=59,
    RESERVED16=61,
    RESERVED17=62,
    RESERVED18=63,
    RESERVED19=64,
    RESERVED2=34,
    RESERVED20=65,
    RESERVED3=37,
    RESERVED4=38,
    RESERVED5=40,
    RESERVED6=44,
    RESERVED7=47,
    RESERVED8=49,
    RESERVED9=51,
    RF_TOP_INT0_IRQn=21,
    RF_TOP_INT1_IRQn=22,
    RING_LINKED_LIST=1,
    ROLE_END=2,
    ROLE_MASTER=0,
    ROLE_SLAVE=1,
    SCAN_ACTIVE=1,
    SCAN_DIS=0,
    SCAN_EN=1,
    SCAN_END=2,
    SCAN_EN_END=2,
    SCAN_PASSIVE=0,
    SCA_100PPM=3,
    SCA_150PPM=2,
    SCA_20PPM=7,
    SCA_250PPM=1,
    SCA_30PPM=6,
    SCA_500PPM=0,
    SCA_50PPM=5,
    SCA_75PPM=4,
    SC_INDICATE_PENDING=1,
    SC_NUM_FLAGS=2,
    SC_RANGE_CHANGED=0,
    SDIO_IRQn=23,
    SEC_AES_IRQn=29,
    SEC_BMX_ERR_IRQn=20,
    SEC_CDET_IRQn=26,
    SEC_GMAC_IRQn=25,
    SEC_PKA_IRQn=27,
    SEC_SHA_IRQn=30,
    SEC_TRNG_IRQn=28,
    SF_CTRL_IRQn=39,
    SMP_FLAG_BOND=12,
    SMP_FLAG_BR_CONNECTED=17,
    SMP_FLAG_BR_PAIR=18,
    SMP_FLAG_CFM_DELAYED=0,
    SMP_FLAG_CT2=19,
    SMP_FLAG_DERIVE_LK=16,
    SMP_FLAG_DHCHECK_WAIT=15,
    SMP_FLAG_DHKEY_PENDING=7,
    SMP_FLAG_DHKEY_SEND=8,
    SMP_FLAG_DISPLAY=10,
    SMP_FLAG_ENC_PENDING=1,
    SMP_FLAG_KEYS_DISTR=2,
    SMP_FLAG_OOB_PENDING=11,
    SMP_FLAG_PAIRING=3,
    SMP_FLAG_PKEY_SEND=6,
    SMP_FLAG_SC=5,
    SMP_FLAG_SC_DEBUG_KEY=13,
    SMP_FLAG_SEC_REQ=14,
    SMP_FLAG_TIMEOUT=4,
    SMP_FLAG_USER=9,
    SMP_NUM_FLAGS=20,
    SPI_IRQn=43,
    STAT_PAR_OGF=5,
    TASK_API=13,
    TASK_APM=7,
    TASK_BAM=8,
    TASK_CFG=12,
    TASK_DBG=1,
    TASK_HOSTAPD_U=10,
    TASK_LAST_EMB=12,
    TASK_MAX=14,
    TASK_ME=5,
    TASK_MESH=9,
    TASK_MM=0,
    TASK_NONE=-1,
    TASK_RXU=11,
    TASK_SCAN=2,
    TASK_SCANU=4,
    TASK_SM=6,
    TASK_TDLS=3,
    TEST_END=3,
    TEST_OGF=6,
    TEST_RX=1,
    TEST_RXTX=2,
    TEST_TX=0,
    TIMER_CH0_IRQn=52,
    TIMER_CH1_IRQn=53,
    TIMER_WDT_IRQn=54,
    TX_LVL_CURRENT=0,
    TX_LVL_LEN=2,
    TX_LVL_MAX=1,
    UART0_IRQn=45,
    UART1_IRQn=46,
    VFS_TYPE_BLOCK_DEV=2,
    VFS_TYPE_CHAR_DEV=1,
    VFS_TYPE_FS_DEV=3,
    VFS_TYPE_NOT_INIT=0,
    VS_OGF=63,
    WIFI_IPC_PUBLIC_IRQn=79,
    WIFI_IRQn=70,
    WPA_WPA2_IN_USE=8,
    eIncrement=2,
    eNoAction=0,
    eSetBits=1,
    eSetValueWithOverwrite=3,
    eSetValueWithoutOverwrite=4
} anon_enum_8_for_oob_config.conflict4;

typedef enum anon_enum_8_for_oob_config.conflict1 {
    AC_BE=1,
    AC_BK=0,
    AC_MAX=4,
    AC_VI=2,
    AC_VO=3,
    ADDR_END=4,
    ADDR_MASK=1,
    ADDR_PUBLIC=0,
    ADDR_RAND=1,
    ADDR_RPA_MASK=2,
    ADDR_RPA_OR_PUBLIC=2,
    ADDR_RPA_OR_RAND=3,
    ADV_CONN_DIR=1,
    ADV_CONN_DIR_LDC=4,
    ADV_CONN_UNDIR=0,
    ADV_DIS=0,
    ADV_DISC_UNDIR=2,
    ADV_EN=1,
    ADV_END=5,
    ADV_EN_END=2,
    ADV_NONCONN_UNDIR=3,
    API_AC_BE=1,
    API_AC_BK=0,
    API_AC_MAX=4,
    API_AC_VI=2,
    API_AC_VO=3,
    BLE_IRQn=72,
    BMX_ERR_IRQn=16,
    BMX_TO_IRQn=17,
    BOR_IRQn=69,
    BT_CONN_AUTO_CONNECT=0,
    BT_CONN_AUTO_FEATURE_EXCH=13,
    BT_CONN_AUTO_PHY_COMPLETE=12,
    BT_CONN_AUTO_PHY_UPDATE=7,
    BT_CONN_AUTO_VERSION_INFO=14,
    BT_CONN_BR_LEGACY_SECURE=1,
    BT_CONN_BR_NOBOND=4,
    BT_CONN_BR_PAIRING=3,
    BT_CONN_BR_PAIRING_INITIATOR=5,
    BT_CONN_CLEANUP=6,
    BT_CONN_FORCE_PAIR=11,
    BT_CONN_NUM_FLAGS=15,
    BT_CONN_OOB_BOTH_PEERS=2,
    BT_CONN_OOB_LE_LEGACY=0,
    BT_CONN_OOB_LE_SC=1,
    BT_CONN_OOB_LOCAL_ONLY=0,
    BT_CONN_OOB_NO_DATA=3,
    BT_CONN_OOB_REMOTE_ONLY=1,
    BT_CONN_ROLE_MASTER=0,
    BT_CONN_ROLE_SLAVE=1,
    BT_CONN_SLAVE_PARAM_L2CAP=10,
    BT_CONN_SLAVE_PARAM_SET=9,
    BT_CONN_SLAVE_PARAM_UPDATE=8,
    BT_CONN_TYPE_ALL=7,
    BT_CONN_TYPE_BR=2,
    BT_CONN_TYPE_LE=1,
    BT_CONN_TYPE_SCO=4,
    BT_CONN_USER=2,
    BT_DEV_ACTIVE_SCAN=12,
    BT_DEV_ADVERTISING=6,
    BT_DEV_ADVERTISING_CONNECTABLE=8,
    BT_DEV_ADVERTISING_NAME=7,
    BT_DEV_AUTO_CONN=15,
    BT_DEV_ENABLE=0,
    BT_DEV_EXPLICIT_SCAN=11,
    BT_DEV_HAS_PUB_KEY=4,
    BT_DEV_ID_PENDING=17,
    BT_DEV_KEEP_ADVERTISING=9,
    BT_DEV_NUM_FLAGS=18,
    BT_DEV_PRESET_ID=2,
    BT_DEV_PUB_KEY_BUSY=5,
    BT_DEV_READY=1,
    BT_DEV_RPA_VALID=16,
    BT_DEV_SCANNING=10,
    BT_DEV_SCAN_FILTER_DUP=13,
    BT_DEV_SCAN_WL=14,
    BT_DEV_USER_ID_ADDR=3,
    BT_EVENT_CMD_TX=0,
    BT_EVENT_CONN_TX_QUEUE=1,
    BT_GATT_SUBSCRIBE_FLAG_VOLATILE=0,
    BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING=1,
    BT_GATT_SUBSCRIBE_NUM_FLAGS=2,
    BT_KEYS_ALL=63,
    BT_KEYS_AUTHENTICATED=1,
    BT_KEYS_DEBUG=2,
    BT_KEYS_ID_PENDING_ADD=4,
    BT_KEYS_ID_PENDING_DEL=8,
    BT_KEYS_IRK=2,
    BT_KEYS_LOCAL_CSRK=8,
    BT_KEYS_LTK=4,
    BT_KEYS_LTK_P256=32,
    BT_KEYS_REMOTE_CSRK=16,
    BT_KEYS_SC=16,
    BT_KEYS_SLAVE_LTK=1,
    BT_LE_ADV_OPT_CONNECTABLE=1,
    BT_LE_ADV_OPT_DIR_ADDR_RPA=32,
    BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY=16,
    BT_LE_ADV_OPT_FILTER_CONN=-128,
    BT_LE_ADV_OPT_FILTER_SCAN_REQ=64,
    BT_LE_ADV_OPT_NONE=0,
    BT_LE_ADV_OPT_ONE_TIME=2,
    BT_LE_ADV_OPT_USE_IDENTITY=4,
    BT_LE_ADV_OPT_USE_NAME=8,
    BT_LE_SCAN_FILTER_DUPLICATE=1,
    BT_LE_SCAN_FILTER_EXTENDED=4,
    BT_LE_SCAN_FILTER_WHITELIST=2,
    BT_QUIRK_NO_RESET=1,
    BZ_PHY_IRQn=71,
    CLIC_SOFT_PEND_IRQn=12,
    CNTLR_BB_OGF=3,
    CONTROL_PORT_HOST=1,
    CONTROL_PORT_NO_ENC=2,
    CO_BAD_PARAM=4,
    CO_BUSY=8,
    CO_EMPTY=2,
    CO_FAIL=1,
    CO_FULL=3,
    CO_NOT_FOUND=5,
    CO_NO_ELT_IN_USE=7,
    CO_NO_MORE_ELT_AVAILABLE=6,
    CO_OK=0,
    CO_OP_IN_PROGRESS=9,
    DISABLE_HT=4,
    DMA_ALL_IRQn=31,
    DMA_BMX_ERR_IRQn=24,
    EFUSE_IRQn=42,
    ERR_ABRT=-13,
    ERR_ALREADY=-9,
    ERR_ARG=-16,
    ERR_BUF=-2,
    ERR_CLSD=-15,
    ERR_CONN=-11,
    ERR_IF=-12,
    ERR_INPROGRESS=-5,
    ERR_ISCONN=-10,
    ERR_MEM=-1,
    ERR_OK=0,
    ERR_RST=-14,
    ERR_RTE=-4,
    ERR_TIMEOUT=-3,
    ERR_USE=-8,
    ERR_VAL=-6,
    ERR_WOULDBLOCK=-7,
    GLB_PLL_XTAL_24M=1,
    GLB_PLL_XTAL_26M=5,
    GLB_PLL_XTAL_32M=2,
    GLB_PLL_XTAL_38P4M=3,
    GLB_PLL_XTAL_40M=4,
    GLB_PLL_XTAL_NONE=0,
    GLB_PLL_XTAL_RC32M=6,
    GLB_SYS_CLK_PLL120M=3,
    GLB_SYS_CLK_PLL160M=4,
    GLB_SYS_CLK_PLL192M=5,
    GLB_SYS_CLK_PLL48M=2,
    GLB_SYS_CLK_RC32M=0,
    GLB_SYS_CLK_XTAL=1,
    GPADC_DMA_IRQn=41,
    GPIO_INT0_IRQn=60,
    HBN_32K_DIG=3,
    HBN_32K_RC=0,
    HBN_32K_XTAL=1,
    HBN_OUT0_IRQn=67,
    HBN_OUT1_IRQn=68,
    HBN_ROOT_CLK_PLL=2,
    HBN_ROOT_CLK_RC32M=0,
    HBN_ROOT_CLK_XTAL=1,
    HBN_UART_CLK_160M=1,
    HBN_UART_CLK_FCLK=0,
    I2C_IRQn=48,
    INFO_PAR_OGF=4,
    INIT_FILT_END=2,
    INIT_FILT_IGNORE_WLST=0,
    INIT_FILT_USE_WLST=1,
    IRQn_LAST=80,
    IRRX_IRQn=36,
    IRTX_IRQn=35,
    KE_EVT_IDLE=0,
    KE_EVT_RUNNING=1,
    KE_MEM_BLOCK_EM=1,
    KE_MEM_BLOCK_MAX=2,
    KE_MEM_BLOCK_RAM=0,
    KE_MEM_ENV=0,
    KE_MEM_KE_MSG=0,
    KE_MEM_NON_RETENTION=0,
    L1C_BMX_ERR_IRQn=18,
    L1C_BMX_TO_IRQn=19,
    LE_CNTLR_OGF=8,
    LINK_TYPE_END=2,
    LIR_TYPE_A=1,
    LIR_TYPE_B=2,
    LIR_TYPE_C=3,
    LIR_TYPE_D=4,
    LIR_TYPE_E=5,
    LIR_TYPE_F=6,
    LIR_TYPE_G=7,
    LIR_TYPE_H=8,
    LIR_TYPE_I=9,
    LIR_TYPE_J=10,
    LK_CNTL_OGF=1,
    LK_POL_OGF=2,
    LLID_CNTL=3,
    LLID_CONTINUE=1,
    LLID_END=4,
    LLID_RFU=0,
    LLID_START=2,
    LLM_LE_ADV_DUMMY_IDX=1,
    LLM_LE_ADV_IDX=5,
    LLM_LE_COEXT_SCAN_IDX=3,
    LLM_LE_SCAN_CON_REQ_ADV_DIR_IDX=2,
    LLM_LE_SCAN_RSP_IDX=4,
    LL_ADV_CONN_DIR=1,
    LL_ADV_CONN_UNDIR=0,
    LL_ADV_DISC_UNDIR=6,
    LL_ADV_END=8,
    LL_ADV_NONCONN_UNDIR=2,
    LL_CONNECT_REQ=5,
    LL_EXT_ADV=7,
    LL_SCAN_REQ=3,
    LL_SCAN_RSP=4,
    MAC_GEN_IRQn=77,
    MAC_PORT_TRG_IRQn=78,
    MAC_RX_TRG_IRQn=75,
    MAC_TXRX_MISC_IRQn=74,
    MAC_TXRX_TIMER_IRQn=73,
    MAC_TX_TRG_IRQn=76,
    MAX_OGF=64,
    MEMP_ALTCP_PCB=5,
    MEMP_IGMP_GROUP=10,
    MEMP_MAX=15,
    MEMP_NETBUF=6,
    MEMP_NETCONN=7,
    MEMP_NETDB=12,
    MEMP_PBUF=13,
    MEMP_PBUF_POOL=14,
    MEMP_RAW_PCB=0,
    MEMP_SYS_TIMEOUT=11,
    MEMP_TCPIP_MSG_API=8,
    MEMP_TCPIP_MSG_INPKT=9,
    MEMP_TCP_PCB=2,
    MEMP_TCP_PCB_LISTEN=3,
    MEMP_TCP_SEG=4,
    MEMP_UDP_PCB=1,
    MEXT_IRQn=11,
    MFP_IN_USE=16,
    MM_AP=2,
    MM_IBSS=1,
    MM_MESH_POINT=3,
    MM_STA=0,
    MSOFT_IRQn=3,
    MTIME_IRQn=7,
    OP_CFLIRI_BUFFER=54,
    OP_CFLIR_BUFFER=56,
    OP_CFLIR_PLD=57,
    OP_CLIR=53,
    OP_CTLIRI_PLD=55,
    OP_LADD=24,
    OP_LCMP=25,
    OP_LDIV=20,
    OP_LDIV2N=18,
    OP_LMUL=22,
    OP_LMUL2N=19,
    OP_LSQR=21,
    OP_LSUB=23,
    OP_MADD=40,
    OP_MDIV2=33,
    OP_MEXP=35,
    OP_MINV=34,
    OP_MMUL=37,
    OP_MOD2N=17,
    OP_MOVDAT=50,
    OP_MREM=38,
    OP_MSQR=36,
    OP_MSUB=39,
    OP_NLIR=51,
    OP_PPSEL=0,
    OP_RESIZE=49,
    OP_SLIR=52,
    PAYL_00001111=6,
    PAYL_01010101=7,
    PAYL_10101010=2,
    PAYL_11110000=1,
    PAYL_ALL_0=5,
    PAYL_ALL_1=4,
    PAYL_END=8,
    PAYL_PSEUDO_RAND_15=3,
    PAYL_PSEUDO_RAND_9=0,
    PBUF_IP=-94,
    PBUF_LINK=-114,
    PBUF_RAW=0,
    PBUF_RAW_TX=-128,
    PBUF_TRANSPORT=-74,
    PDS_WAKEUP_IRQn=66,
    PHY_BAND_2G4=0,
    PHY_BAND_5G=1,
    PHY_BAND_MAX=2,
    PHY_CHNL_BW_160=3,
    PHY_CHNL_BW_20=0,
    PHY_CHNL_BW_40=1,
    PHY_CHNL_BW_80=2,
    PHY_CHNL_BW_80P80=4,
    PHY_CHNL_BW_OTHER=5,
    POOL_LINKED_LIST=0,
    PS_MODE_OFF=0,
    PS_MODE_ON=1,
    PS_MODE_ON_DYN=2,
    PT_ENTRY_FW_CPU0=0,
    PT_ENTRY_FW_CPU1=1,
    PT_ENTRY_MAX=16,
    PWM_IRQn=50,
    RESERVED0=32,
    RESERVED1=33,
    RESERVED10=55,
    RESERVED11=56,
    RESERVED12=57,
    RESERVED13=58,
    RESERVED14=59,
    RESERVED16=61,
    RESERVED17=62,
    RESERVED18=63,
    RESERVED19=64,
    RESERVED2=34,
    RESERVED20=65,
    RESERVED3=37,
    RESERVED4=38,
    RESERVED5=40,
    RESERVED6=44,
    RESERVED7=47,
    RESERVED8=49,
    RESERVED9=51,
    RF_TOP_INT0_IRQn=21,
    RF_TOP_INT1_IRQn=22,
    RING_LINKED_LIST=1,
    ROLE_END=2,
    ROLE_MASTER=0,
    ROLE_SLAVE=1,
    SCAN_ACTIVE=1,
    SCAN_DIS=0,
    SCAN_EN=1,
    SCAN_END=2,
    SCAN_EN_END=2,
    SCAN_PASSIVE=0,
    SCA_100PPM=3,
    SCA_150PPM=2,
    SCA_20PPM=7,
    SCA_250PPM=1,
    SCA_30PPM=6,
    SCA_500PPM=0,
    SCA_50PPM=5,
    SCA_75PPM=4,
    SDIO_IRQn=23,
    SEC_AES_IRQn=29,
    SEC_BMX_ERR_IRQn=20,
    SEC_CDET_IRQn=26,
    SEC_GMAC_IRQn=25,
    SEC_PKA_IRQn=27,
    SEC_SHA_IRQn=30,
    SEC_TRNG_IRQn=28,
    SF_CTRL_IRQn=39,
    SMP_FLAG_BOND=12,
    SMP_FLAG_BR_CONNECTED=17,
    SMP_FLAG_BR_PAIR=18,
    SMP_FLAG_CFM_DELAYED=0,
    SMP_FLAG_CT2=19,
    SMP_FLAG_DERIVE_LK=16,
    SMP_FLAG_DHCHECK_WAIT=15,
    SMP_FLAG_DHKEY_PENDING=7,
    SMP_FLAG_DHKEY_SEND=8,
    SMP_FLAG_DISPLAY=10,
    SMP_FLAG_ENC_PENDING=1,
    SMP_FLAG_KEYS_DISTR=2,
    SMP_FLAG_OOB_PENDING=11,
    SMP_FLAG_PAIRING=3,
    SMP_FLAG_PKEY_SEND=6,
    SMP_FLAG_SC=5,
    SMP_FLAG_SC_DEBUG_KEY=13,
    SMP_FLAG_SEC_REQ=14,
    SMP_FLAG_TIMEOUT=4,
    SMP_FLAG_USER=9,
    SMP_NUM_FLAGS=20,
    SPI_IRQn=43,
    STAT_PAR_OGF=5,
    TASK_API=13,
    TASK_APM=7,
    TASK_BAM=8,
    TASK_CFG=12,
    TASK_DBG=1,
    TASK_HOSTAPD_U=10,
    TASK_LAST_EMB=12,
    TASK_MAX=14,
    TASK_ME=5,
    TASK_MESH=9,
    TASK_MM=0,
    TASK_NONE=-1,
    TASK_RXU=11,
    TASK_SCAN=2,
    TASK_SCANU=4,
    TASK_SM=6,
    TASK_TDLS=3,
    TEST_END=3,
    TEST_OGF=6,
    TEST_RX=1,
    TEST_RXTX=2,
    TEST_TX=0,
    TIMER_CH0_IRQn=52,
    TIMER_CH1_IRQn=53,
    TIMER_WDT_IRQn=54,
    TX_LVL_CURRENT=0,
    TX_LVL_LEN=2,
    TX_LVL_MAX=1,
    UART0_IRQn=45,
    UART1_IRQn=46,
    VFS_TYPE_BLOCK_DEV=2,
    VFS_TYPE_CHAR_DEV=1,
    VFS_TYPE_FS_DEV=3,
    VFS_TYPE_NOT_INIT=0,
    VS_OGF=63,
    WIFI_IPC_PUBLIC_IRQn=79,
    WIFI_IRQn=70,
    WPA_WPA2_IN_USE=8,
    eIncrement=2,
    eNoAction=0,
    eSetBits=1,
    eSetValueWithOverwrite=3,
    eSetValueWithoutOverwrite=4
} anon_enum_8_for_oob_config.conflict1;

typedef enum anon_enum_8_for_oob_config.conflict2 {
    AC_BE=1,
    AC_BK=0,
    AC_MAX=4,
    AC_VI=2,
    AC_VO=3,
    ADDR_END=4,
    ADDR_MASK=1,
    ADDR_PUBLIC=0,
    ADDR_RAND=1,
    ADDR_RPA_MASK=2,
    ADDR_RPA_OR_PUBLIC=2,
    ADDR_RPA_OR_RAND=3,
    ADV_CONN_DIR=1,
    ADV_CONN_DIR_LDC=4,
    ADV_CONN_UNDIR=0,
    ADV_DIS=0,
    ADV_DISC_UNDIR=2,
    ADV_EN=1,
    ADV_END=5,
    ADV_EN_END=2,
    ADV_NONCONN_UNDIR=3,
    API_AC_BE=1,
    API_AC_BK=0,
    API_AC_MAX=4,
    API_AC_VI=2,
    API_AC_VO=3,
    BLE_IRQn=72,
    BMX_ERR_IRQn=16,
    BMX_TO_IRQn=17,
    BOR_IRQn=69,
    BT_CONN_AUTO_CONNECT=0,
    BT_CONN_AUTO_FEATURE_EXCH=13,
    BT_CONN_AUTO_PHY_COMPLETE=12,
    BT_CONN_AUTO_PHY_UPDATE=7,
    BT_CONN_AUTO_VERSION_INFO=14,
    BT_CONN_BR_LEGACY_SECURE=1,
    BT_CONN_BR_NOBOND=4,
    BT_CONN_BR_PAIRING=3,
    BT_CONN_BR_PAIRING_INITIATOR=5,
    BT_CONN_CLEANUP=6,
    BT_CONN_FORCE_PAIR=11,
    BT_CONN_NUM_FLAGS=15,
    BT_CONN_OOB_BOTH_PEERS=2,
    BT_CONN_OOB_LE_LEGACY=0,
    BT_CONN_OOB_LE_SC=1,
    BT_CONN_OOB_LOCAL_ONLY=0,
    BT_CONN_OOB_NO_DATA=3,
    BT_CONN_OOB_REMOTE_ONLY=1,
    BT_CONN_ROLE_MASTER=0,
    BT_CONN_ROLE_SLAVE=1,
    BT_CONN_SLAVE_PARAM_L2CAP=10,
    BT_CONN_SLAVE_PARAM_SET=9,
    BT_CONN_SLAVE_PARAM_UPDATE=8,
    BT_CONN_TYPE_ALL=7,
    BT_CONN_TYPE_BR=2,
    BT_CONN_TYPE_LE=1,
    BT_CONN_TYPE_SCO=4,
    BT_CONN_USER=2,
    BT_DEV_ACTIVE_SCAN=12,
    BT_DEV_ADVERTISING=6,
    BT_DEV_ADVERTISING_CONNECTABLE=8,
    BT_DEV_ADVERTISING_NAME=7,
    BT_DEV_AUTO_CONN=15,
    BT_DEV_ENABLE=0,
    BT_DEV_EXPLICIT_SCAN=11,
    BT_DEV_HAS_PUB_KEY=4,
    BT_DEV_ID_PENDING=17,
    BT_DEV_KEEP_ADVERTISING=9,
    BT_DEV_NUM_FLAGS=18,
    BT_DEV_PRESET_ID=2,
    BT_DEV_PUB_KEY_BUSY=5,
    BT_DEV_READY=1,
    BT_DEV_RPA_VALID=16,
    BT_DEV_SCANNING=10,
    BT_DEV_SCAN_FILTER_DUP=13,
    BT_DEV_SCAN_WL=14,
    BT_DEV_USER_ID_ADDR=3,
    BT_EVENT_CMD_TX=0,
    BT_EVENT_CONN_TX_QUEUE=1,
    BT_GATT_DISCOVER_ATTRIBUTE=5,
    BT_GATT_DISCOVER_CHARACTERISTIC=3,
    BT_GATT_DISCOVER_DESCRIPTOR=4,
    BT_GATT_DISCOVER_INCLUDE=2,
    BT_GATT_DISCOVER_PRIMARY=0,
    BT_GATT_DISCOVER_SECONDARY=1,
    BT_GATT_ITER_CONTINUE=1,
    BT_GATT_ITER_STOP=0,
    BT_GATT_SUBSCRIBE_FLAG_VOLATILE=0,
    BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING=1,
    BT_GATT_SUBSCRIBE_NUM_FLAGS=2,
    BT_HCI_ACL_DATA=1,
    BT_HCI_CMD=0,
    BT_HCI_CMD_CMP_EVT=2,
    BT_HCI_CMD_STAT_EVT=3,
    BT_HCI_EVT=5,
    BT_HCI_LE_EVT=4,
    BT_KEYS_ALL=63,
    BT_KEYS_AUTHENTICATED=1,
    BT_KEYS_DEBUG=2,
    BT_KEYS_ID_PENDING_ADD=4,
    BT_KEYS_ID_PENDING_DEL=8,
    BT_KEYS_IRK=2,
    BT_KEYS_LOCAL_CSRK=8,
    BT_KEYS_LTK=4,
    BT_KEYS_LTK_P256=32,
    BT_KEYS_REMOTE_CSRK=16,
    BT_KEYS_SC=16,
    BT_KEYS_SLAVE_LTK=1,
    BT_LE_ADV_OPT_CONNECTABLE=1,
    BT_LE_ADV_OPT_DIR_ADDR_RPA=32,
    BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY=16,
    BT_LE_ADV_OPT_FILTER_CONN=-128,
    BT_LE_ADV_OPT_FILTER_SCAN_REQ=64,
    BT_LE_ADV_OPT_NONE=0,
    BT_LE_ADV_OPT_ONE_TIME=2,
    BT_LE_ADV_OPT_USE_IDENTITY=4,
    BT_LE_ADV_OPT_USE_NAME=8,
    BT_LE_SCAN_FILTER_DUPLICATE=1,
    BT_LE_SCAN_FILTER_EXTENDED=4,
    BT_LE_SCAN_FILTER_WHITELIST=2,
    BT_QUIRK_NO_RESET=1,
    BT_UUID_TYPE_128=2,
    BT_UUID_TYPE_16=0,
    BT_UUID_TYPE_32=1,
    BZ_PHY_IRQn=71,
    CLIC_SOFT_PEND_IRQn=12,
    CNTLR_BB_OGF=3,
    CONTROL_PORT_HOST=1,
    CONTROL_PORT_NO_ENC=2,
    CO_BAD_PARAM=4,
    CO_BUSY=8,
    CO_EMPTY=2,
    CO_FAIL=1,
    CO_FULL=3,
    CO_NOT_FOUND=5,
    CO_NO_ELT_IN_USE=7,
    CO_NO_MORE_ELT_AVAILABLE=6,
    CO_OK=0,
    CO_OP_IN_PROGRESS=9,
    DISABLE_HT=4,
    DMA_ALL_IRQn=31,
    DMA_BMX_ERR_IRQn=24,
    EFUSE_IRQn=42,
    ERR_ABRT=-13,
    ERR_ALREADY=-9,
    ERR_ARG=-16,
    ERR_BUF=-2,
    ERR_CLSD=-15,
    ERR_CONN=-11,
    ERR_IF=-12,
    ERR_INPROGRESS=-5,
    ERR_ISCONN=-10,
    ERR_MEM=-1,
    ERR_OK=0,
    ERR_RST=-14,
    ERR_RTE=-4,
    ERR_TIMEOUT=-3,
    ERR_USE=-8,
    ERR_VAL=-6,
    ERR_WOULDBLOCK=-7,
    GLB_PLL_XTAL_24M=1,
    GLB_PLL_XTAL_26M=5,
    GLB_PLL_XTAL_32M=2,
    GLB_PLL_XTAL_38P4M=3,
    GLB_PLL_XTAL_40M=4,
    GLB_PLL_XTAL_NONE=0,
    GLB_PLL_XTAL_RC32M=6,
    GLB_SYS_CLK_PLL120M=3,
    GLB_SYS_CLK_PLL160M=4,
    GLB_SYS_CLK_PLL192M=5,
    GLB_SYS_CLK_PLL48M=2,
    GLB_SYS_CLK_RC32M=0,
    GLB_SYS_CLK_XTAL=1,
    GPADC_DMA_IRQn=41,
    GPIO_INT0_IRQn=60,
    HBN_32K_DIG=3,
    HBN_32K_RC=0,
    HBN_32K_XTAL=1,
    HBN_OUT0_IRQn=67,
    HBN_OUT1_IRQn=68,
    HBN_ROOT_CLK_PLL=2,
    HBN_ROOT_CLK_RC32M=0,
    HBN_ROOT_CLK_XTAL=1,
    HBN_UART_CLK_160M=1,
    HBN_UART_CLK_FCLK=0,
    I2C_IRQn=48,
    INFO_PAR_OGF=4,
    INIT_FILT_END=2,
    INIT_FILT_IGNORE_WLST=0,
    INIT_FILT_USE_WLST=1,
    IRQn_LAST=80,
    IRRX_IRQn=36,
    IRTX_IRQn=35,
    KE_EVT_IDLE=0,
    KE_EVT_RUNNING=1,
    KE_MEM_BLOCK_EM=1,
    KE_MEM_BLOCK_MAX=2,
    KE_MEM_BLOCK_RAM=0,
    KE_MEM_ENV=0,
    KE_MEM_KE_MSG=0,
    KE_MEM_NON_RETENTION=0,
    K_WORK_STATE_PENDING=0,
    L1C_BMX_ERR_IRQn=18,
    L1C_BMX_TO_IRQn=19,
    LE_CNTLR_OGF=8,
    LINK_TYPE_END=2,
    LIR_TYPE_A=1,
    LIR_TYPE_B=2,
    LIR_TYPE_C=3,
    LIR_TYPE_D=4,
    LIR_TYPE_E=5,
    LIR_TYPE_F=6,
    LIR_TYPE_G=7,
    LIR_TYPE_H=8,
    LIR_TYPE_I=9,
    LIR_TYPE_J=10,
    LK_CNTL_OGF=1,
    LK_POL_OGF=2,
    LLID_CNTL=3,
    LLID_CONTINUE=1,
    LLID_END=4,
    LLID_RFU=0,
    LLID_START=2,
    LLM_LE_ADV_DUMMY_IDX=1,
    LLM_LE_ADV_IDX=5,
    LLM_LE_COEXT_SCAN_IDX=3,
    LLM_LE_SCAN_CON_REQ_ADV_DIR_IDX=2,
    LLM_LE_SCAN_RSP_IDX=4,
    LL_ADV_CONN_DIR=1,
    LL_ADV_CONN_UNDIR=0,
    LL_ADV_DISC_UNDIR=6,
    LL_ADV_END=8,
    LL_ADV_NONCONN_UNDIR=2,
    LL_CONNECT_REQ=5,
    LL_EXT_ADV=7,
    LL_SCAN_REQ=3,
    LL_SCAN_RSP=4,
    MAC_GEN_IRQn=77,
    MAC_PORT_TRG_IRQn=78,
    MAC_RX_TRG_IRQn=75,
    MAC_TXRX_MISC_IRQn=74,
    MAC_TXRX_TIMER_IRQn=73,
    MAC_TX_TRG_IRQn=76,
    MAX_OGF=64,
    MEMP_ALTCP_PCB=5,
    MEMP_IGMP_GROUP=10,
    MEMP_MAX=15,
    MEMP_NETBUF=6,
    MEMP_NETCONN=7,
    MEMP_NETDB=12,
    MEMP_PBUF=13,
    MEMP_PBUF_POOL=14,
    MEMP_RAW_PCB=0,
    MEMP_SYS_TIMEOUT=11,
    MEMP_TCPIP_MSG_API=8,
    MEMP_TCPIP_MSG_INPKT=9,
    MEMP_TCP_PCB=2,
    MEMP_TCP_PCB_LISTEN=3,
    MEMP_TCP_SEG=4,
    MEMP_UDP_PCB=1,
    MEXT_IRQn=11,
    MFP_IN_USE=16,
    MM_AP=2,
    MM_IBSS=1,
    MM_MESH_POINT=3,
    MM_STA=0,
    MSOFT_IRQn=3,
    MTIME_IRQn=7,
    OP_CFLIRI_BUFFER=54,
    OP_CFLIR_BUFFER=56,
    OP_CFLIR_PLD=57,
    OP_CLIR=53,
    OP_CTLIRI_PLD=55,
    OP_LADD=24,
    OP_LCMP=25,
    OP_LDIV=20,
    OP_LDIV2N=18,
    OP_LMUL=22,
    OP_LMUL2N=19,
    OP_LSQR=21,
    OP_LSUB=23,
    OP_MADD=40,
    OP_MDIV2=33,
    OP_MEXP=35,
    OP_MINV=34,
    OP_MMUL=37,
    OP_MOD2N=17,
    OP_MOVDAT=50,
    OP_MREM=38,
    OP_MSQR=36,
    OP_MSUB=39,
    OP_NLIR=51,
    OP_PPSEL=0,
    OP_RESIZE=49,
    OP_SLIR=52,
    PAYL_00001111=6,
    PAYL_01010101=7,
    PAYL_10101010=2,
    PAYL_11110000=1,
    PAYL_ALL_0=5,
    PAYL_ALL_1=4,
    PAYL_END=8,
    PAYL_PSEUDO_RAND_15=3,
    PAYL_PSEUDO_RAND_9=0,
    PBUF_IP=-94,
    PBUF_LINK=-114,
    PBUF_RAW=0,
    PBUF_RAW_TX=-128,
    PBUF_TRANSPORT=-74,
    PDS_WAKEUP_IRQn=66,
    PHY_BAND_2G4=0,
    PHY_BAND_5G=1,
    PHY_BAND_MAX=2,
    PHY_CHNL_BW_160=3,
    PHY_CHNL_BW_20=0,
    PHY_CHNL_BW_40=1,
    PHY_CHNL_BW_80=2,
    PHY_CHNL_BW_80P80=4,
    PHY_CHNL_BW_OTHER=5,
    POOL_LINKED_LIST=0,
    PS_MODE_OFF=0,
    PS_MODE_ON=1,
    PS_MODE_ON_DYN=2,
    PT_ENTRY_FW_CPU0=0,
    PT_ENTRY_FW_CPU1=1,
    PT_ENTRY_MAX=16,
    PWM_IRQn=50,
    RESERVED0=32,
    RESERVED1=33,
    RESERVED10=55,
    RESERVED11=56,
    RESERVED12=57,
    RESERVED13=58,
    RESERVED14=59,
    RESERVED16=61,
    RESERVED17=62,
    RESERVED18=63,
    RESERVED19=64,
    RESERVED2=34,
    RESERVED20=65,
    RESERVED3=37,
    RESERVED4=38,
    RESERVED5=40,
    RESERVED6=44,
    RESERVED7=47,
    RESERVED8=49,
    RESERVED9=51,
    RF_TOP_INT0_IRQn=21,
    RF_TOP_INT1_IRQn=22,
    RING_LINKED_LIST=1,
    ROLE_END=2,
    ROLE_MASTER=0,
    ROLE_SLAVE=1,
    SCAN_ACTIVE=1,
    SCAN_DIS=0,
    SCAN_EN=1,
    SCAN_END=2,
    SCAN_EN_END=2,
    SCAN_PASSIVE=0,
    SCA_100PPM=3,
    SCA_150PPM=2,
    SCA_20PPM=7,
    SCA_250PPM=1,
    SCA_30PPM=6,
    SCA_500PPM=0,
    SCA_50PPM=5,
    SCA_75PPM=4,
    SDIO_IRQn=23,
    SEC_AES_IRQn=29,
    SEC_BMX_ERR_IRQn=20,
    SEC_CDET_IRQn=26,
    SEC_GMAC_IRQn=25,
    SEC_PKA_IRQn=27,
    SEC_SHA_IRQn=30,
    SEC_TRNG_IRQn=28,
    SF_CTRL_IRQn=39,
    SMP_FLAG_BOND=12,
    SMP_FLAG_BR_CONNECTED=17,
    SMP_FLAG_BR_PAIR=18,
    SMP_FLAG_CFM_DELAYED=0,
    SMP_FLAG_CT2=19,
    SMP_FLAG_DERIVE_LK=16,
    SMP_FLAG_DHCHECK_WAIT=15,
    SMP_FLAG_DHKEY_PENDING=7,
    SMP_FLAG_DHKEY_SEND=8,
    SMP_FLAG_DISPLAY=10,
    SMP_FLAG_ENC_PENDING=1,
    SMP_FLAG_KEYS_DISTR=2,
    SMP_FLAG_OOB_PENDING=11,
    SMP_FLAG_PAIRING=3,
    SMP_FLAG_PKEY_SEND=6,
    SMP_FLAG_SC=5,
    SMP_FLAG_SC_DEBUG_KEY=13,
    SMP_FLAG_SEC_REQ=14,
    SMP_FLAG_TIMEOUT=4,
    SMP_FLAG_USER=9,
    SMP_NUM_FLAGS=20,
    SPI_IRQn=43,
    STAT_PAR_OGF=5,
    TASK_API=13,
    TASK_APM=7,
    TASK_BAM=8,
    TASK_CFG=12,
    TASK_DBG=1,
    TASK_HOSTAPD_U=10,
    TASK_LAST_EMB=12,
    TASK_MAX=14,
    TASK_ME=5,
    TASK_MESH=9,
    TASK_MM=0,
    TASK_NONE=-1,
    TASK_RXU=11,
    TASK_SCAN=2,
    TASK_SCANU=4,
    TASK_SM=6,
    TASK_TDLS=3,
    TEST_END=3,
    TEST_OGF=6,
    TEST_RX=1,
    TEST_RXTX=2,
    TEST_TX=0,
    TIMER_CH0_IRQn=52,
    TIMER_CH1_IRQn=53,
    TIMER_WDT_IRQn=54,
    TX_LVL_CURRENT=0,
    TX_LVL_LEN=2,
    TX_LVL_MAX=1,
    UART0_IRQn=45,
    UART1_IRQn=46,
    VFS_TYPE_BLOCK_DEV=2,
    VFS_TYPE_CHAR_DEV=1,
    VFS_TYPE_FS_DEV=3,
    VFS_TYPE_NOT_INIT=0,
    VS_OGF=63,
    WIFI_IPC_PUBLIC_IRQn=79,
    WIFI_IRQn=70,
    WPA_WPA2_IN_USE=8,
    eIncrement=2,
    eNoAction=0,
    eSetBits=1,
    eSetValueWithOverwrite=3,
    eSetValueWithoutOverwrite=4
} anon_enum_8_for_oob_config.conflict2;

typedef union anon_union_for_field_1.conflict anon_union_for_field_1.conflict, *Panon_union_for_field_1.conflict;

typedef struct anon_struct.conflict80 anon_struct.conflict80, *Panon_struct.conflict80;

struct anon_struct.conflict80 {
    enum anon_enum_8_for_oob_config.conflict oob_config;
};

union anon_union_for_field_1.conflict {
    struct anon_struct.conflict80 lesc;
};

typedef enum anon_enum_8_for_type.conflict {
    AC_BE=1,
    AC_BK=0,
    AC_MAX=4,
    AC_VI=2,
    AC_VO=3,
    ADDR_END=4,
    ADDR_MASK=1,
    ADDR_PUBLIC=0,
    ADDR_RAND=1,
    ADDR_RPA_MASK=2,
    ADDR_RPA_OR_PUBLIC=2,
    ADDR_RPA_OR_RAND=3,
    ADV_CONN_DIR=1,
    ADV_CONN_DIR_LDC=4,
    ADV_CONN_UNDIR=0,
    ADV_DIS=0,
    ADV_DISC_UNDIR=2,
    ADV_EN=1,
    ADV_END=5,
    ADV_EN_END=2,
    ADV_NONCONN_UNDIR=3,
    API_AC_BE=1,
    API_AC_BK=0,
    API_AC_MAX=4,
    API_AC_VI=2,
    API_AC_VO=3,
    BLE_IRQn=72,
    BMX_ERR_IRQn=16,
    BMX_TO_IRQn=17,
    BOR_IRQn=69,
    BT_CONN_AUTO_CONNECT=0,
    BT_CONN_AUTO_FEATURE_EXCH=13,
    BT_CONN_AUTO_PHY_COMPLETE=12,
    BT_CONN_AUTO_PHY_UPDATE=7,
    BT_CONN_AUTO_VERSION_INFO=14,
    BT_CONN_BR_LEGACY_SECURE=1,
    BT_CONN_BR_NOBOND=4,
    BT_CONN_BR_PAIRING=3,
    BT_CONN_BR_PAIRING_INITIATOR=5,
    BT_CONN_CLEANUP=6,
    BT_CONN_FORCE_PAIR=11,
    BT_CONN_NUM_FLAGS=15,
    BT_CONN_OOB_BOTH_PEERS=2,
    BT_CONN_OOB_LE_LEGACY=0,
    BT_CONN_OOB_LE_SC=1,
    BT_CONN_OOB_LOCAL_ONLY=0,
    BT_CONN_OOB_NO_DATA=3,
    BT_CONN_OOB_REMOTE_ONLY=1,
    BT_CONN_ROLE_MASTER=0,
    BT_CONN_ROLE_SLAVE=1,
    BT_CONN_SLAVE_PARAM_L2CAP=10,
    BT_CONN_SLAVE_PARAM_SET=9,
    BT_CONN_SLAVE_PARAM_UPDATE=8,
    BT_CONN_TYPE_ALL=7,
    BT_CONN_TYPE_BR=2,
    BT_CONN_TYPE_LE=1,
    BT_CONN_TYPE_SCO=4,
    BT_CONN_USER=2,
    BT_DEV_ACTIVE_SCAN=12,
    BT_DEV_ADVERTISING=6,
    BT_DEV_ADVERTISING_CONNECTABLE=8,
    BT_DEV_ADVERTISING_NAME=7,
    BT_DEV_AUTO_CONN=15,
    BT_DEV_ENABLE=0,
    BT_DEV_EXPLICIT_SCAN=11,
    BT_DEV_HAS_PUB_KEY=4,
    BT_DEV_ID_PENDING=17,
    BT_DEV_KEEP_ADVERTISING=9,
    BT_DEV_NUM_FLAGS=18,
    BT_DEV_PRESET_ID=2,
    BT_DEV_PUB_KEY_BUSY=5,
    BT_DEV_READY=1,
    BT_DEV_RPA_VALID=16,
    BT_DEV_SCANNING=10,
    BT_DEV_SCAN_FILTER_DUP=13,
    BT_DEV_SCAN_WL=14,
    BT_DEV_USER_ID_ADDR=3,
    BT_EVENT_CMD_TX=0,
    BT_EVENT_CONN_TX_QUEUE=1,
    BT_GATT_SUBSCRIBE_FLAG_VOLATILE=0,
    BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING=1,
    BT_GATT_SUBSCRIBE_NUM_FLAGS=2,
    BT_KEYS_ALL=63,
    BT_KEYS_AUTHENTICATED=1,
    BT_KEYS_DEBUG=2,
    BT_KEYS_ID_PENDING_ADD=4,
    BT_KEYS_ID_PENDING_DEL=8,
    BT_KEYS_IRK=2,
    BT_KEYS_LOCAL_CSRK=8,
    BT_KEYS_LTK=4,
    BT_KEYS_LTK_P256=32,
    BT_KEYS_REMOTE_CSRK=16,
    BT_KEYS_SC=16,
    BT_KEYS_SLAVE_LTK=1,
    BT_LE_ADV_OPT_CONNECTABLE=1,
    BT_LE_ADV_OPT_DIR_ADDR_RPA=32,
    BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY=16,
    BT_LE_ADV_OPT_FILTER_CONN=-128,
    BT_LE_ADV_OPT_FILTER_SCAN_REQ=64,
    BT_LE_ADV_OPT_NONE=0,
    BT_LE_ADV_OPT_ONE_TIME=2,
    BT_LE_ADV_OPT_USE_IDENTITY=4,
    BT_LE_ADV_OPT_USE_NAME=8,
    BT_LE_SCAN_FILTER_DUPLICATE=1,
    BT_LE_SCAN_FILTER_EXTENDED=4,
    BT_LE_SCAN_FILTER_WHITELIST=2,
    BT_QUIRK_NO_RESET=1,
    BZ_PHY_IRQn=71,
    CLIC_SOFT_PEND_IRQn=12,
    CNTLR_BB_OGF=3,
    CONTROL_PORT_HOST=1,
    CONTROL_PORT_NO_ENC=2,
    CO_BAD_PARAM=4,
    CO_BUSY=8,
    CO_EMPTY=2,
    CO_FAIL=1,
    CO_FULL=3,
    CO_NOT_FOUND=5,
    CO_NO_ELT_IN_USE=7,
    CO_NO_MORE_ELT_AVAILABLE=6,
    CO_OK=0,
    CO_OP_IN_PROGRESS=9,
    DISABLE_HT=4,
    DMA_ALL_IRQn=31,
    DMA_BMX_ERR_IRQn=24,
    EFUSE_IRQn=42,
    ERR_ABRT=-13,
    ERR_ALREADY=-9,
    ERR_ARG=-16,
    ERR_BUF=-2,
    ERR_CLSD=-15,
    ERR_CONN=-11,
    ERR_IF=-12,
    ERR_INPROGRESS=-5,
    ERR_ISCONN=-10,
    ERR_MEM=-1,
    ERR_OK=0,
    ERR_RST=-14,
    ERR_RTE=-4,
    ERR_TIMEOUT=-3,
    ERR_USE=-8,
    ERR_VAL=-6,
    ERR_WOULDBLOCK=-7,
    GLB_PLL_XTAL_24M=1,
    GLB_PLL_XTAL_26M=5,
    GLB_PLL_XTAL_32M=2,
    GLB_PLL_XTAL_38P4M=3,
    GLB_PLL_XTAL_40M=4,
    GLB_PLL_XTAL_NONE=0,
    GLB_PLL_XTAL_RC32M=6,
    GLB_SYS_CLK_PLL120M=3,
    GLB_SYS_CLK_PLL160M=4,
    GLB_SYS_CLK_PLL192M=5,
    GLB_SYS_CLK_PLL48M=2,
    GLB_SYS_CLK_RC32M=0,
    GLB_SYS_CLK_XTAL=1,
    GPADC_DMA_IRQn=41,
    GPIO_INT0_IRQn=60,
    HBN_32K_DIG=3,
    HBN_32K_RC=0,
    HBN_32K_XTAL=1,
    HBN_OUT0_IRQn=67,
    HBN_OUT1_IRQn=68,
    HBN_ROOT_CLK_PLL=2,
    HBN_ROOT_CLK_RC32M=0,
    HBN_ROOT_CLK_XTAL=1,
    HBN_UART_CLK_160M=1,
    HBN_UART_CLK_FCLK=0,
    I2C_IRQn=48,
    INFO_PAR_OGF=4,
    INIT_FILT_END=2,
    INIT_FILT_IGNORE_WLST=0,
    INIT_FILT_USE_WLST=1,
    IRQn_LAST=80,
    IRRX_IRQn=36,
    IRTX_IRQn=35,
    KE_EVT_IDLE=0,
    KE_EVT_RUNNING=1,
    KE_MEM_BLOCK_EM=1,
    KE_MEM_BLOCK_MAX=2,
    KE_MEM_BLOCK_RAM=0,
    KE_MEM_ENV=0,
    KE_MEM_KE_MSG=0,
    KE_MEM_NON_RETENTION=0,
    L1C_BMX_ERR_IRQn=18,
    L1C_BMX_TO_IRQn=19,
    LE_CNTLR_OGF=8,
    LINK_TYPE_END=2,
    LIR_TYPE_A=1,
    LIR_TYPE_B=2,
    LIR_TYPE_C=3,
    LIR_TYPE_D=4,
    LIR_TYPE_E=5,
    LIR_TYPE_F=6,
    LIR_TYPE_G=7,
    LIR_TYPE_H=8,
    LIR_TYPE_I=9,
    LIR_TYPE_J=10,
    LK_CNTL_OGF=1,
    LK_POL_OGF=2,
    LLID_CNTL=3,
    LLID_CONTINUE=1,
    LLID_END=4,
    LLID_RFU=0,
    LLID_START=2,
    LLM_LE_ADV_DUMMY_IDX=1,
    LLM_LE_ADV_IDX=5,
    LLM_LE_COEXT_SCAN_IDX=3,
    LLM_LE_SCAN_CON_REQ_ADV_DIR_IDX=2,
    LLM_LE_SCAN_RSP_IDX=4,
    LL_ADV_CONN_DIR=1,
    LL_ADV_CONN_UNDIR=0,
    LL_ADV_DISC_UNDIR=6,
    LL_ADV_END=8,
    LL_ADV_NONCONN_UNDIR=2,
    LL_CONNECT_REQ=5,
    LL_EXT_ADV=7,
    LL_SCAN_REQ=3,
    LL_SCAN_RSP=4,
    MAC_GEN_IRQn=77,
    MAC_PORT_TRG_IRQn=78,
    MAC_RX_TRG_IRQn=75,
    MAC_TXRX_MISC_IRQn=74,
    MAC_TXRX_TIMER_IRQn=73,
    MAC_TX_TRG_IRQn=76,
    MAX_OGF=64,
    MEMP_ALTCP_PCB=5,
    MEMP_IGMP_GROUP=10,
    MEMP_MAX=15,
    MEMP_NETBUF=6,
    MEMP_NETCONN=7,
    MEMP_NETDB=12,
    MEMP_PBUF=13,
    MEMP_PBUF_POOL=14,
    MEMP_RAW_PCB=0,
    MEMP_SYS_TIMEOUT=11,
    MEMP_TCPIP_MSG_API=8,
    MEMP_TCPIP_MSG_INPKT=9,
    MEMP_TCP_PCB=2,
    MEMP_TCP_PCB_LISTEN=3,
    MEMP_TCP_SEG=4,
    MEMP_UDP_PCB=1,
    MEXT_IRQn=11,
    MFP_IN_USE=16,
    MM_AP=2,
    MM_IBSS=1,
    MM_MESH_POINT=3,
    MM_STA=0,
    MSOFT_IRQn=3,
    MTIME_IRQn=7,
    OP_CFLIRI_BUFFER=54,
    OP_CFLIR_BUFFER=56,
    OP_CFLIR_PLD=57,
    OP_CLIR=53,
    OP_CTLIRI_PLD=55,
    OP_LADD=24,
    OP_LCMP=25,
    OP_LDIV=20,
    OP_LDIV2N=18,
    OP_LMUL=22,
    OP_LMUL2N=19,
    OP_LSQR=21,
    OP_LSUB=23,
    OP_MADD=40,
    OP_MDIV2=33,
    OP_MEXP=35,
    OP_MINV=34,
    OP_MMUL=37,
    OP_MOD2N=17,
    OP_MOVDAT=50,
    OP_MREM=38,
    OP_MSQR=36,
    OP_MSUB=39,
    OP_NLIR=51,
    OP_PPSEL=0,
    OP_RESIZE=49,
    OP_SLIR=52,
    PAYL_00001111=6,
    PAYL_01010101=7,
    PAYL_10101010=2,
    PAYL_11110000=1,
    PAYL_ALL_0=5,
    PAYL_ALL_1=4,
    PAYL_END=8,
    PAYL_PSEUDO_RAND_15=3,
    PAYL_PSEUDO_RAND_9=0,
    PBUF_IP=-94,
    PBUF_LINK=-114,
    PBUF_RAW=0,
    PBUF_RAW_TX=-128,
    PBUF_TRANSPORT=-74,
    PDS_WAKEUP_IRQn=66,
    PHY_BAND_2G4=0,
    PHY_BAND_5G=1,
    PHY_BAND_MAX=2,
    PHY_CHNL_BW_160=3,
    PHY_CHNL_BW_20=0,
    PHY_CHNL_BW_40=1,
    PHY_CHNL_BW_80=2,
    PHY_CHNL_BW_80P80=4,
    PHY_CHNL_BW_OTHER=5,
    POOL_LINKED_LIST=0,
    PS_MODE_OFF=0,
    PS_MODE_ON=1,
    PS_MODE_ON_DYN=2,
    PT_ENTRY_FW_CPU0=0,
    PT_ENTRY_FW_CPU1=1,
    PT_ENTRY_MAX=16,
    PWM_IRQn=50,
    RESERVED0=32,
    RESERVED1=33,
    RESERVED10=55,
    RESERVED11=56,
    RESERVED12=57,
    RESERVED13=58,
    RESERVED14=59,
    RESERVED16=61,
    RESERVED17=62,
    RESERVED18=63,
    RESERVED19=64,
    RESERVED2=34,
    RESERVED20=65,
    RESERVED3=37,
    RESERVED4=38,
    RESERVED5=40,
    RESERVED6=44,
    RESERVED7=47,
    RESERVED8=49,
    RESERVED9=51,
    RF_TOP_INT0_IRQn=21,
    RF_TOP_INT1_IRQn=22,
    RING_LINKED_LIST=1,
    ROLE_END=2,
    ROLE_MASTER=0,
    ROLE_SLAVE=1,
    SCAN_ACTIVE=1,
    SCAN_DIS=0,
    SCAN_EN=1,
    SCAN_END=2,
    SCAN_EN_END=2,
    SCAN_PASSIVE=0,
    SCA_100PPM=3,
    SCA_150PPM=2,
    SCA_20PPM=7,
    SCA_250PPM=1,
    SCA_30PPM=6,
    SCA_500PPM=0,
    SCA_50PPM=5,
    SCA_75PPM=4,
    SDIO_IRQn=23,
    SEC_AES_IRQn=29,
    SEC_BMX_ERR_IRQn=20,
    SEC_CDET_IRQn=26,
    SEC_GMAC_IRQn=25,
    SEC_PKA_IRQn=27,
    SEC_SHA_IRQn=30,
    SEC_TRNG_IRQn=28,
    SF_CTRL_IRQn=39,
    SPI_IRQn=43,
    STAT_PAR_OGF=5,
    TASK_API=13,
    TASK_APM=7,
    TASK_BAM=8,
    TASK_CFG=12,
    TASK_DBG=1,
    TASK_HOSTAPD_U=10,
    TASK_LAST_EMB=12,
    TASK_MAX=14,
    TASK_ME=5,
    TASK_MESH=9,
    TASK_MM=0,
    TASK_NONE=-1,
    TASK_RXU=11,
    TASK_SCAN=2,
    TASK_SCANU=4,
    TASK_SM=6,
    TASK_TDLS=3,
    TEST_END=3,
    TEST_OGF=6,
    TEST_RX=1,
    TEST_RXTX=2,
    TEST_TX=0,
    TIMER_CH0_IRQn=52,
    TIMER_CH1_IRQn=53,
    TIMER_WDT_IRQn=54,
    TX_LVL_CURRENT=0,
    TX_LVL_LEN=2,
    TX_LVL_MAX=1,
    UART0_IRQn=45,
    UART1_IRQn=46,
    VFS_TYPE_BLOCK_DEV=2,
    VFS_TYPE_CHAR_DEV=1,
    VFS_TYPE_FS_DEV=3,
    VFS_TYPE_NOT_INIT=0,
    VS_OGF=63,
    WIFI_IPC_PUBLIC_IRQn=79,
    WIFI_IRQn=70,
    WPA_WPA2_IN_USE=8,
    eIncrement=2,
    eNoAction=0,
    eSetBits=1,
    eSetValueWithOverwrite=3,
    eSetValueWithoutOverwrite=4
} anon_enum_8_for_type.conflict;

typedef union anon_union_for_field_1.conflict2 anon_union_for_field_1.conflict2, *Panon_union_for_field_1.conflict2;

typedef struct anon_struct.conflict102 anon_struct.conflict102, *Panon_struct.conflict102;

struct anon_struct.conflict102 {
    enum anon_enum_8_for_oob_config.conflict2 oob_config;
};

union anon_union_for_field_1.conflict2 {
    struct anon_struct.conflict102 lesc;
};

typedef enum anon_enum_8_for_type.conflict1 {
    AC_BE=1,
    AC_BK=0,
    AC_MAX=4,
    AC_VI=2,
    AC_VO=3,
    ADDR_END=4,
    ADDR_MASK=1,
    ADDR_PUBLIC=0,
    ADDR_RAND=1,
    ADDR_RPA_MASK=2,
    ADDR_RPA_OR_PUBLIC=2,
    ADDR_RPA_OR_RAND=3,
    ADV_CONN_DIR=1,
    ADV_CONN_DIR_LDC=4,
    ADV_CONN_UNDIR=0,
    ADV_DIS=0,
    ADV_DISC_UNDIR=2,
    ADV_EN=1,
    ADV_END=5,
    ADV_EN_END=2,
    ADV_NONCONN_UNDIR=3,
    API_AC_BE=1,
    API_AC_BK=0,
    API_AC_MAX=4,
    API_AC_VI=2,
    API_AC_VO=3,
    BLE_IRQn=72,
    BMX_ERR_IRQn=16,
    BMX_TO_IRQn=17,
    BOR_IRQn=69,
    BT_CONN_AUTO_CONNECT=0,
    BT_CONN_AUTO_FEATURE_EXCH=13,
    BT_CONN_AUTO_PHY_COMPLETE=12,
    BT_CONN_AUTO_PHY_UPDATE=7,
    BT_CONN_AUTO_VERSION_INFO=14,
    BT_CONN_BR_LEGACY_SECURE=1,
    BT_CONN_BR_NOBOND=4,
    BT_CONN_BR_PAIRING=3,
    BT_CONN_BR_PAIRING_INITIATOR=5,
    BT_CONN_CLEANUP=6,
    BT_CONN_FORCE_PAIR=11,
    BT_CONN_NUM_FLAGS=15,
    BT_CONN_OOB_BOTH_PEERS=2,
    BT_CONN_OOB_LE_LEGACY=0,
    BT_CONN_OOB_LE_SC=1,
    BT_CONN_OOB_LOCAL_ONLY=0,
    BT_CONN_OOB_NO_DATA=3,
    BT_CONN_OOB_REMOTE_ONLY=1,
    BT_CONN_ROLE_MASTER=0,
    BT_CONN_ROLE_SLAVE=1,
    BT_CONN_SLAVE_PARAM_L2CAP=10,
    BT_CONN_SLAVE_PARAM_SET=9,
    BT_CONN_SLAVE_PARAM_UPDATE=8,
    BT_CONN_TYPE_ALL=7,
    BT_CONN_TYPE_BR=2,
    BT_CONN_TYPE_LE=1,
    BT_CONN_TYPE_SCO=4,
    BT_CONN_USER=2,
    BT_DEV_ACTIVE_SCAN=12,
    BT_DEV_ADVERTISING=6,
    BT_DEV_ADVERTISING_CONNECTABLE=8,
    BT_DEV_ADVERTISING_NAME=7,
    BT_DEV_AUTO_CONN=15,
    BT_DEV_ENABLE=0,
    BT_DEV_EXPLICIT_SCAN=11,
    BT_DEV_HAS_PUB_KEY=4,
    BT_DEV_ID_PENDING=17,
    BT_DEV_KEEP_ADVERTISING=9,
    BT_DEV_NUM_FLAGS=18,
    BT_DEV_PRESET_ID=2,
    BT_DEV_PUB_KEY_BUSY=5,
    BT_DEV_READY=1,
    BT_DEV_RPA_VALID=16,
    BT_DEV_SCANNING=10,
    BT_DEV_SCAN_FILTER_DUP=13,
    BT_DEV_SCAN_WL=14,
    BT_DEV_USER_ID_ADDR=3,
    BT_EVENT_CMD_TX=0,
    BT_EVENT_CONN_TX_QUEUE=1,
    BT_GATT_SUBSCRIBE_FLAG_VOLATILE=0,
    BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING=1,
    BT_GATT_SUBSCRIBE_NUM_FLAGS=2,
    BT_KEYS_ALL=63,
    BT_KEYS_AUTHENTICATED=1,
    BT_KEYS_DEBUG=2,
    BT_KEYS_ID_PENDING_ADD=4,
    BT_KEYS_ID_PENDING_DEL=8,
    BT_KEYS_IRK=2,
    BT_KEYS_LOCAL_CSRK=8,
    BT_KEYS_LTK=4,
    BT_KEYS_LTK_P256=32,
    BT_KEYS_REMOTE_CSRK=16,
    BT_KEYS_SC=16,
    BT_KEYS_SLAVE_LTK=1,
    BT_LE_ADV_OPT_CONNECTABLE=1,
    BT_LE_ADV_OPT_DIR_ADDR_RPA=32,
    BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY=16,
    BT_LE_ADV_OPT_FILTER_CONN=-128,
    BT_LE_ADV_OPT_FILTER_SCAN_REQ=64,
    BT_LE_ADV_OPT_NONE=0,
    BT_LE_ADV_OPT_ONE_TIME=2,
    BT_LE_ADV_OPT_USE_IDENTITY=4,
    BT_LE_ADV_OPT_USE_NAME=8,
    BT_LE_SCAN_FILTER_DUPLICATE=1,
    BT_LE_SCAN_FILTER_EXTENDED=4,
    BT_LE_SCAN_FILTER_WHITELIST=2,
    BT_QUIRK_NO_RESET=1,
    BZ_PHY_IRQn=71,
    CLIC_SOFT_PEND_IRQn=12,
    CNTLR_BB_OGF=3,
    CONTROL_PORT_HOST=1,
    CONTROL_PORT_NO_ENC=2,
    CO_BAD_PARAM=4,
    CO_BUSY=8,
    CO_EMPTY=2,
    CO_FAIL=1,
    CO_FULL=3,
    CO_NOT_FOUND=5,
    CO_NO_ELT_IN_USE=7,
    CO_NO_MORE_ELT_AVAILABLE=6,
    CO_OK=0,
    CO_OP_IN_PROGRESS=9,
    DISABLE_HT=4,
    DMA_ALL_IRQn=31,
    DMA_BMX_ERR_IRQn=24,
    EFUSE_IRQn=42,
    ERR_ABRT=-13,
    ERR_ALREADY=-9,
    ERR_ARG=-16,
    ERR_BUF=-2,
    ERR_CLSD=-15,
    ERR_CONN=-11,
    ERR_IF=-12,
    ERR_INPROGRESS=-5,
    ERR_ISCONN=-10,
    ERR_MEM=-1,
    ERR_OK=0,
    ERR_RST=-14,
    ERR_RTE=-4,
    ERR_TIMEOUT=-3,
    ERR_USE=-8,
    ERR_VAL=-6,
    ERR_WOULDBLOCK=-7,
    GLB_PLL_XTAL_24M=1,
    GLB_PLL_XTAL_26M=5,
    GLB_PLL_XTAL_32M=2,
    GLB_PLL_XTAL_38P4M=3,
    GLB_PLL_XTAL_40M=4,
    GLB_PLL_XTAL_NONE=0,
    GLB_PLL_XTAL_RC32M=6,
    GLB_SYS_CLK_PLL120M=3,
    GLB_SYS_CLK_PLL160M=4,
    GLB_SYS_CLK_PLL192M=5,
    GLB_SYS_CLK_PLL48M=2,
    GLB_SYS_CLK_RC32M=0,
    GLB_SYS_CLK_XTAL=1,
    GPADC_DMA_IRQn=41,
    GPIO_INT0_IRQn=60,
    HBN_32K_DIG=3,
    HBN_32K_RC=0,
    HBN_32K_XTAL=1,
    HBN_OUT0_IRQn=67,
    HBN_OUT1_IRQn=68,
    HBN_ROOT_CLK_PLL=2,
    HBN_ROOT_CLK_RC32M=0,
    HBN_ROOT_CLK_XTAL=1,
    HBN_UART_CLK_160M=1,
    HBN_UART_CLK_FCLK=0,
    I2C_IRQn=48,
    INFO_PAR_OGF=4,
    INIT_FILT_END=2,
    INIT_FILT_IGNORE_WLST=0,
    INIT_FILT_USE_WLST=1,
    IRQn_LAST=80,
    IRRX_IRQn=36,
    IRTX_IRQn=35,
    KE_EVT_IDLE=0,
    KE_EVT_RUNNING=1,
    KE_MEM_BLOCK_EM=1,
    KE_MEM_BLOCK_MAX=2,
    KE_MEM_BLOCK_RAM=0,
    KE_MEM_ENV=0,
    KE_MEM_KE_MSG=0,
    KE_MEM_NON_RETENTION=0,
    L1C_BMX_ERR_IRQn=18,
    L1C_BMX_TO_IRQn=19,
    LE_CNTLR_OGF=8,
    LINK_TYPE_END=2,
    LIR_TYPE_A=1,
    LIR_TYPE_B=2,
    LIR_TYPE_C=3,
    LIR_TYPE_D=4,
    LIR_TYPE_E=5,
    LIR_TYPE_F=6,
    LIR_TYPE_G=7,
    LIR_TYPE_H=8,
    LIR_TYPE_I=9,
    LIR_TYPE_J=10,
    LK_CNTL_OGF=1,
    LK_POL_OGF=2,
    LLID_CNTL=3,
    LLID_CONTINUE=1,
    LLID_END=4,
    LLID_RFU=0,
    LLID_START=2,
    LLM_LE_ADV_DUMMY_IDX=1,
    LLM_LE_ADV_IDX=5,
    LLM_LE_COEXT_SCAN_IDX=3,
    LLM_LE_SCAN_CON_REQ_ADV_DIR_IDX=2,
    LLM_LE_SCAN_RSP_IDX=4,
    LL_ADV_CONN_DIR=1,
    LL_ADV_CONN_UNDIR=0,
    LL_ADV_DISC_UNDIR=6,
    LL_ADV_END=8,
    LL_ADV_NONCONN_UNDIR=2,
    LL_CONNECT_REQ=5,
    LL_EXT_ADV=7,
    LL_SCAN_REQ=3,
    LL_SCAN_RSP=4,
    MAC_GEN_IRQn=77,
    MAC_PORT_TRG_IRQn=78,
    MAC_RX_TRG_IRQn=75,
    MAC_TXRX_MISC_IRQn=74,
    MAC_TXRX_TIMER_IRQn=73,
    MAC_TX_TRG_IRQn=76,
    MAX_OGF=64,
    MEMP_ALTCP_PCB=5,
    MEMP_IGMP_GROUP=10,
    MEMP_MAX=15,
    MEMP_NETBUF=6,
    MEMP_NETCONN=7,
    MEMP_NETDB=12,
    MEMP_PBUF=13,
    MEMP_PBUF_POOL=14,
    MEMP_RAW_PCB=0,
    MEMP_SYS_TIMEOUT=11,
    MEMP_TCPIP_MSG_API=8,
    MEMP_TCPIP_MSG_INPKT=9,
    MEMP_TCP_PCB=2,
    MEMP_TCP_PCB_LISTEN=3,
    MEMP_TCP_SEG=4,
    MEMP_UDP_PCB=1,
    MEXT_IRQn=11,
    MFP_IN_USE=16,
    MM_AP=2,
    MM_IBSS=1,
    MM_MESH_POINT=3,
    MM_STA=0,
    MSOFT_IRQn=3,
    MTIME_IRQn=7,
    OP_CFLIRI_BUFFER=54,
    OP_CFLIR_BUFFER=56,
    OP_CFLIR_PLD=57,
    OP_CLIR=53,
    OP_CTLIRI_PLD=55,
    OP_LADD=24,
    OP_LCMP=25,
    OP_LDIV=20,
    OP_LDIV2N=18,
    OP_LMUL=22,
    OP_LMUL2N=19,
    OP_LSQR=21,
    OP_LSUB=23,
    OP_MADD=40,
    OP_MDIV2=33,
    OP_MEXP=35,
    OP_MINV=34,
    OP_MMUL=37,
    OP_MOD2N=17,
    OP_MOVDAT=50,
    OP_MREM=38,
    OP_MSQR=36,
    OP_MSUB=39,
    OP_NLIR=51,
    OP_PPSEL=0,
    OP_RESIZE=49,
    OP_SLIR=52,
    PAYL_00001111=6,
    PAYL_01010101=7,
    PAYL_10101010=2,
    PAYL_11110000=1,
    PAYL_ALL_0=5,
    PAYL_ALL_1=4,
    PAYL_END=8,
    PAYL_PSEUDO_RAND_15=3,
    PAYL_PSEUDO_RAND_9=0,
    PBUF_IP=-94,
    PBUF_LINK=-114,
    PBUF_RAW=0,
    PBUF_RAW_TX=-128,
    PBUF_TRANSPORT=-74,
    PDS_WAKEUP_IRQn=66,
    PHY_BAND_2G4=0,
    PHY_BAND_5G=1,
    PHY_BAND_MAX=2,
    PHY_CHNL_BW_160=3,
    PHY_CHNL_BW_20=0,
    PHY_CHNL_BW_40=1,
    PHY_CHNL_BW_80=2,
    PHY_CHNL_BW_80P80=4,
    PHY_CHNL_BW_OTHER=5,
    POOL_LINKED_LIST=0,
    PS_MODE_OFF=0,
    PS_MODE_ON=1,
    PS_MODE_ON_DYN=2,
    PT_ENTRY_FW_CPU0=0,
    PT_ENTRY_FW_CPU1=1,
    PT_ENTRY_MAX=16,
    PWM_IRQn=50,
    RESERVED0=32,
    RESERVED1=33,
    RESERVED10=55,
    RESERVED11=56,
    RESERVED12=57,
    RESERVED13=58,
    RESERVED14=59,
    RESERVED16=61,
    RESERVED17=62,
    RESERVED18=63,
    RESERVED19=64,
    RESERVED2=34,
    RESERVED20=65,
    RESERVED3=37,
    RESERVED4=38,
    RESERVED5=40,
    RESERVED6=44,
    RESERVED7=47,
    RESERVED8=49,
    RESERVED9=51,
    RF_TOP_INT0_IRQn=21,
    RF_TOP_INT1_IRQn=22,
    RING_LINKED_LIST=1,
    ROLE_END=2,
    ROLE_MASTER=0,
    ROLE_SLAVE=1,
    SCAN_ACTIVE=1,
    SCAN_DIS=0,
    SCAN_EN=1,
    SCAN_END=2,
    SCAN_EN_END=2,
    SCAN_PASSIVE=0,
    SCA_100PPM=3,
    SCA_150PPM=2,
    SCA_20PPM=7,
    SCA_250PPM=1,
    SCA_30PPM=6,
    SCA_500PPM=0,
    SCA_50PPM=5,
    SCA_75PPM=4,
    SDIO_IRQn=23,
    SEC_AES_IRQn=29,
    SEC_BMX_ERR_IRQn=20,
    SEC_CDET_IRQn=26,
    SEC_GMAC_IRQn=25,
    SEC_PKA_IRQn=27,
    SEC_SHA_IRQn=30,
    SEC_TRNG_IRQn=28,
    SF_CTRL_IRQn=39,
    SMP_FLAG_BOND=12,
    SMP_FLAG_BR_CONNECTED=17,
    SMP_FLAG_BR_PAIR=18,
    SMP_FLAG_CFM_DELAYED=0,
    SMP_FLAG_CT2=19,
    SMP_FLAG_DERIVE_LK=16,
    SMP_FLAG_DHCHECK_WAIT=15,
    SMP_FLAG_DHKEY_PENDING=7,
    SMP_FLAG_DHKEY_SEND=8,
    SMP_FLAG_DISPLAY=10,
    SMP_FLAG_ENC_PENDING=1,
    SMP_FLAG_KEYS_DISTR=2,
    SMP_FLAG_OOB_PENDING=11,
    SMP_FLAG_PAIRING=3,
    SMP_FLAG_PKEY_SEND=6,
    SMP_FLAG_SC=5,
    SMP_FLAG_SC_DEBUG_KEY=13,
    SMP_FLAG_SEC_REQ=14,
    SMP_FLAG_TIMEOUT=4,
    SMP_FLAG_USER=9,
    SMP_NUM_FLAGS=20,
    SPI_IRQn=43,
    STAT_PAR_OGF=5,
    TASK_API=13,
    TASK_APM=7,
    TASK_BAM=8,
    TASK_CFG=12,
    TASK_DBG=1,
    TASK_HOSTAPD_U=10,
    TASK_LAST_EMB=12,
    TASK_MAX=14,
    TASK_ME=5,
    TASK_MESH=9,
    TASK_MM=0,
    TASK_NONE=-1,
    TASK_RXU=11,
    TASK_SCAN=2,
    TASK_SCANU=4,
    TASK_SM=6,
    TASK_TDLS=3,
    TEST_END=3,
    TEST_OGF=6,
    TEST_RX=1,
    TEST_RXTX=2,
    TEST_TX=0,
    TIMER_CH0_IRQn=52,
    TIMER_CH1_IRQn=53,
    TIMER_WDT_IRQn=54,
    TX_LVL_CURRENT=0,
    TX_LVL_LEN=2,
    TX_LVL_MAX=1,
    UART0_IRQn=45,
    UART1_IRQn=46,
    VFS_TYPE_BLOCK_DEV=2,
    VFS_TYPE_CHAR_DEV=1,
    VFS_TYPE_FS_DEV=3,
    VFS_TYPE_NOT_INIT=0,
    VS_OGF=63,
    WIFI_IPC_PUBLIC_IRQn=79,
    WIFI_IRQn=70,
    WPA_WPA2_IN_USE=8,
    eIncrement=2,
    eNoAction=0,
    eSetBits=1,
    eSetValueWithOverwrite=3,
    eSetValueWithoutOverwrite=4
} anon_enum_8_for_type.conflict1;

typedef union anon_union_for_field_1.conflict1 anon_union_for_field_1.conflict1, *Panon_union_for_field_1.conflict1;

typedef struct anon_struct.conflict87 anon_struct.conflict87, *Panon_struct.conflict87;

struct anon_struct.conflict87 {
    enum anon_enum_8_for_oob_config.conflict1 oob_config;
};

union anon_union_for_field_1.conflict1 {
    struct anon_struct.conflict87 lesc;
};

typedef union anon_union_for_field_1.conflict4 anon_union_for_field_1.conflict4, *Panon_union_for_field_1.conflict4;

typedef struct anon_struct.conflict113 anon_struct.conflict113, *Panon_struct.conflict113;

struct anon_struct.conflict113 {
    enum anon_enum_8_for_oob_config.conflict4 oob_config;
};

union anon_union_for_field_1.conflict4 {
    struct anon_struct.conflict113 lesc;
};

typedef union anon_union_for_field_1.conflict3 anon_union_for_field_1.conflict3, *Panon_union_for_field_1.conflict3;

typedef struct anon_struct.conflict110 anon_struct.conflict110, *Panon_struct.conflict110;

struct anon_struct.conflict110 {
    enum anon_enum_8_for_oob_config.conflict3 oob_config;
};

union anon_union_for_field_1.conflict3 {
    struct anon_struct.conflict110 lesc;
};

typedef enum anon_enum_8_for_type.conflict4 {
    AC_BE=1,
    AC_BK=0,
    AC_MAX=4,
    AC_VI=2,
    AC_VO=3,
    ADDR_END=4,
    ADDR_MASK=1,
    ADDR_PUBLIC=0,
    ADDR_RAND=1,
    ADDR_RPA_MASK=2,
    ADDR_RPA_OR_PUBLIC=2,
    ADDR_RPA_OR_RAND=3,
    ADV_CONN_DIR=1,
    ADV_CONN_DIR_LDC=4,
    ADV_CONN_UNDIR=0,
    ADV_DIS=0,
    ADV_DISC_UNDIR=2,
    ADV_EN=1,
    ADV_END=5,
    ADV_EN_END=2,
    ADV_NONCONN_UNDIR=3,
    API_AC_BE=1,
    API_AC_BK=0,
    API_AC_MAX=4,
    API_AC_VI=2,
    API_AC_VO=3,
    ATT_DISCONNECTED=2,
    ATT_NUM_FLAGS=3,
    ATT_PENDING_CFM=1,
    ATT_PENDING_RSP=0,
    BLE_IRQn=72,
    BMX_ERR_IRQn=16,
    BMX_TO_IRQn=17,
    BOR_IRQn=69,
    BT_CONN_AUTO_CONNECT=0,
    BT_CONN_AUTO_FEATURE_EXCH=13,
    BT_CONN_AUTO_PHY_COMPLETE=12,
    BT_CONN_AUTO_PHY_UPDATE=7,
    BT_CONN_AUTO_VERSION_INFO=14,
    BT_CONN_BR_LEGACY_SECURE=1,
    BT_CONN_BR_NOBOND=4,
    BT_CONN_BR_PAIRING=3,
    BT_CONN_BR_PAIRING_INITIATOR=5,
    BT_CONN_CLEANUP=6,
    BT_CONN_FORCE_PAIR=11,
    BT_CONN_NUM_FLAGS=15,
    BT_CONN_OOB_BOTH_PEERS=2,
    BT_CONN_OOB_LE_LEGACY=0,
    BT_CONN_OOB_LE_SC=1,
    BT_CONN_OOB_LOCAL_ONLY=0,
    BT_CONN_OOB_NO_DATA=3,
    BT_CONN_OOB_REMOTE_ONLY=1,
    BT_CONN_ROLE_MASTER=0,
    BT_CONN_ROLE_SLAVE=1,
    BT_CONN_SLAVE_PARAM_L2CAP=10,
    BT_CONN_SLAVE_PARAM_SET=9,
    BT_CONN_SLAVE_PARAM_UPDATE=8,
    BT_CONN_TYPE_ALL=7,
    BT_CONN_TYPE_BR=2,
    BT_CONN_TYPE_LE=1,
    BT_CONN_TYPE_SCO=4,
    BT_CONN_USER=2,
    BT_DEV_ACTIVE_SCAN=12,
    BT_DEV_ADVERTISING=6,
    BT_DEV_ADVERTISING_CONNECTABLE=8,
    BT_DEV_ADVERTISING_NAME=7,
    BT_DEV_AUTO_CONN=15,
    BT_DEV_ENABLE=0,
    BT_DEV_EXPLICIT_SCAN=11,
    BT_DEV_HAS_PUB_KEY=4,
    BT_DEV_ID_PENDING=17,
    BT_DEV_KEEP_ADVERTISING=9,
    BT_DEV_NUM_FLAGS=18,
    BT_DEV_PRESET_ID=2,
    BT_DEV_PUB_KEY_BUSY=5,
    BT_DEV_READY=1,
    BT_DEV_RPA_VALID=16,
    BT_DEV_SCANNING=10,
    BT_DEV_SCAN_FILTER_DUP=13,
    BT_DEV_SCAN_WL=14,
    BT_DEV_USER_ID_ADDR=3,
    BT_EVENT_CMD_TX=0,
    BT_EVENT_CONN_TX_QUEUE=1,
    BT_GATT_DISCOVER_ATTRIBUTE=5,
    BT_GATT_DISCOVER_CHARACTERISTIC=3,
    BT_GATT_DISCOVER_DESCRIPTOR=4,
    BT_GATT_DISCOVER_INCLUDE=2,
    BT_GATT_DISCOVER_PRIMARY=0,
    BT_GATT_DISCOVER_SECONDARY=1,
    BT_GATT_ITER_CONTINUE=1,
    BT_GATT_ITER_STOP=0,
    BT_GATT_PERM_NONE=0,
    BT_GATT_PERM_PREPARE_WRITE=64,
    BT_GATT_PERM_READ=1,
    BT_GATT_PERM_READ_AUTHEN=16,
    BT_GATT_PERM_READ_ENCRYPT=4,
    BT_GATT_PERM_WRITE=2,
    BT_GATT_PERM_WRITE_AUTHEN=32,
    BT_GATT_PERM_WRITE_ENCRYPT=8,
    BT_GATT_SUBSCRIBE_FLAG_VOLATILE=0,
    BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING=1,
    BT_GATT_SUBSCRIBE_NUM_FLAGS=2,
    BT_GATT_WRITE_FLAG_CMD=2,
    BT_GATT_WRITE_FLAG_PREPARE=1,
    BT_HCI_ACL_DATA=1,
    BT_HCI_CMD=0,
    BT_HCI_CMD_CMP_EVT=2,
    BT_HCI_CMD_STAT_EVT=3,
    BT_HCI_EVT=5,
    BT_HCI_LE_EVT=4,
    BT_KEYS_ALL=63,
    BT_KEYS_AUTHENTICATED=1,
    BT_KEYS_DEBUG=2,
    BT_KEYS_ID_PENDING_ADD=4,
    BT_KEYS_ID_PENDING_DEL=8,
    BT_KEYS_IRK=2,
    BT_KEYS_LOCAL_CSRK=8,
    BT_KEYS_LTK=4,
    BT_KEYS_LTK_P256=32,
    BT_KEYS_REMOTE_CSRK=16,
    BT_KEYS_SC=16,
    BT_KEYS_SLAVE_LTK=1,
    BT_LE_ADV_OPT_CONNECTABLE=1,
    BT_LE_ADV_OPT_DIR_ADDR_RPA=32,
    BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY=16,
    BT_LE_ADV_OPT_FILTER_CONN=-128,
    BT_LE_ADV_OPT_FILTER_SCAN_REQ=64,
    BT_LE_ADV_OPT_NONE=0,
    BT_LE_ADV_OPT_ONE_TIME=2,
    BT_LE_ADV_OPT_USE_IDENTITY=4,
    BT_LE_ADV_OPT_USE_NAME=8,
    BT_LE_SCAN_FILTER_DUPLICATE=1,
    BT_LE_SCAN_FILTER_EXTENDED=4,
    BT_LE_SCAN_FILTER_WHITELIST=2,
    BT_QUIRK_NO_RESET=1,
    BT_UUID_TYPE_128=2,
    BT_UUID_TYPE_16=0,
    BT_UUID_TYPE_32=1,
    BZ_PHY_IRQn=71,
    CLIC_SOFT_PEND_IRQn=12,
    CNTLR_BB_OGF=3,
    CONTROL_PORT_HOST=1,
    CONTROL_PORT_NO_ENC=2,
    CO_BAD_PARAM=4,
    CO_BUSY=8,
    CO_EMPTY=2,
    CO_FAIL=1,
    CO_FULL=3,
    CO_NOT_FOUND=5,
    CO_NO_ELT_IN_USE=7,
    CO_NO_MORE_ELT_AVAILABLE=6,
    CO_OK=0,
    CO_OP_IN_PROGRESS=9,
    DISABLE_HT=4,
    DMA_ALL_IRQn=31,
    DMA_BMX_ERR_IRQn=24,
    EFUSE_IRQn=42,
    ERR_ABRT=-13,
    ERR_ALREADY=-9,
    ERR_ARG=-16,
    ERR_BUF=-2,
    ERR_CLSD=-15,
    ERR_CONN=-11,
    ERR_IF=-12,
    ERR_INPROGRESS=-5,
    ERR_ISCONN=-10,
    ERR_MEM=-1,
    ERR_OK=0,
    ERR_RST=-14,
    ERR_RTE=-4,
    ERR_TIMEOUT=-3,
    ERR_USE=-8,
    ERR_VAL=-6,
    ERR_WOULDBLOCK=-7,
    GLB_PLL_XTAL_24M=1,
    GLB_PLL_XTAL_26M=5,
    GLB_PLL_XTAL_32M=2,
    GLB_PLL_XTAL_38P4M=3,
    GLB_PLL_XTAL_40M=4,
    GLB_PLL_XTAL_NONE=0,
    GLB_PLL_XTAL_RC32M=6,
    GLB_SYS_CLK_PLL120M=3,
    GLB_SYS_CLK_PLL160M=4,
    GLB_SYS_CLK_PLL192M=5,
    GLB_SYS_CLK_PLL48M=2,
    GLB_SYS_CLK_RC32M=0,
    GLB_SYS_CLK_XTAL=1,
    GPADC_DMA_IRQn=41,
    GPIO_INT0_IRQn=60,
    HBN_32K_DIG=3,
    HBN_32K_RC=0,
    HBN_32K_XTAL=1,
    HBN_OUT0_IRQn=67,
    HBN_OUT1_IRQn=68,
    HBN_ROOT_CLK_PLL=2,
    HBN_ROOT_CLK_RC32M=0,
    HBN_ROOT_CLK_XTAL=1,
    HBN_UART_CLK_160M=1,
    HBN_UART_CLK_FCLK=0,
    I2C_IRQn=48,
    INFO_PAR_OGF=4,
    INIT_FILT_END=2,
    INIT_FILT_IGNORE_WLST=0,
    INIT_FILT_USE_WLST=1,
    IRQn_LAST=80,
    IRRX_IRQn=36,
    IRTX_IRQn=35,
    KE_EVT_IDLE=0,
    KE_EVT_RUNNING=1,
    KE_MEM_BLOCK_EM=1,
    KE_MEM_BLOCK_MAX=2,
    KE_MEM_BLOCK_RAM=0,
    KE_MEM_ENV=0,
    KE_MEM_KE_MSG=0,
    KE_MEM_NON_RETENTION=0,
    K_WORK_STATE_PENDING=0,
    L1C_BMX_ERR_IRQn=18,
    L1C_BMX_TO_IRQn=19,
    LE_CNTLR_OGF=8,
    LINK_TYPE_END=2,
    LIR_TYPE_A=1,
    LIR_TYPE_B=2,
    LIR_TYPE_C=3,
    LIR_TYPE_D=4,
    LIR_TYPE_E=5,
    LIR_TYPE_F=6,
    LIR_TYPE_G=7,
    LIR_TYPE_H=8,
    LIR_TYPE_I=9,
    LIR_TYPE_J=10,
    LK_CNTL_OGF=1,
    LK_POL_OGF=2,
    LLID_CNTL=3,
    LLID_CONTINUE=1,
    LLID_END=4,
    LLID_RFU=0,
    LLID_START=2,
    LLM_LE_ADV_DUMMY_IDX=1,
    LLM_LE_ADV_IDX=5,
    LLM_LE_COEXT_SCAN_IDX=3,
    LLM_LE_SCAN_CON_REQ_ADV_DIR_IDX=2,
    LLM_LE_SCAN_RSP_IDX=4,
    LL_ADV_CONN_DIR=1,
    LL_ADV_CONN_UNDIR=0,
    LL_ADV_DISC_UNDIR=6,
    LL_ADV_END=8,
    LL_ADV_NONCONN_UNDIR=2,
    LL_CONNECT_REQ=5,
    LL_EXT_ADV=7,
    LL_SCAN_REQ=3,
    LL_SCAN_RSP=4,
    MAC_GEN_IRQn=77,
    MAC_PORT_TRG_IRQn=78,
    MAC_RX_TRG_IRQn=75,
    MAC_TXRX_MISC_IRQn=74,
    MAC_TXRX_TIMER_IRQn=73,
    MAC_TX_TRG_IRQn=76,
    MAX_OGF=64,
    MEMP_ALTCP_PCB=5,
    MEMP_IGMP_GROUP=10,
    MEMP_MAX=15,
    MEMP_NETBUF=6,
    MEMP_NETCONN=7,
    MEMP_NETDB=12,
    MEMP_PBUF=13,
    MEMP_PBUF_POOL=14,
    MEMP_RAW_PCB=0,
    MEMP_SYS_TIMEOUT=11,
    MEMP_TCPIP_MSG_API=8,
    MEMP_TCPIP_MSG_INPKT=9,
    MEMP_TCP_PCB=2,
    MEMP_TCP_PCB_LISTEN=3,
    MEMP_TCP_SEG=4,
    MEMP_UDP_PCB=1,
    MEXT_IRQn=11,
    MFP_IN_USE=16,
    MM_AP=2,
    MM_IBSS=1,
    MM_MESH_POINT=3,
    MM_STA=0,
    MSOFT_IRQn=3,
    MTIME_IRQn=7,
    OP_CFLIRI_BUFFER=54,
    OP_CFLIR_BUFFER=56,
    OP_CFLIR_PLD=57,
    OP_CLIR=53,
    OP_CTLIRI_PLD=55,
    OP_LADD=24,
    OP_LCMP=25,
    OP_LDIV=20,
    OP_LDIV2N=18,
    OP_LMUL=22,
    OP_LMUL2N=19,
    OP_LSQR=21,
    OP_LSUB=23,
    OP_MADD=40,
    OP_MDIV2=33,
    OP_MEXP=35,
    OP_MINV=34,
    OP_MMUL=37,
    OP_MOD2N=17,
    OP_MOVDAT=50,
    OP_MREM=38,
    OP_MSQR=36,
    OP_MSUB=39,
    OP_NLIR=51,
    OP_PPSEL=0,
    OP_RESIZE=49,
    OP_SLIR=52,
    PAYL_00001111=6,
    PAYL_01010101=7,
    PAYL_10101010=2,
    PAYL_11110000=1,
    PAYL_ALL_0=5,
    PAYL_ALL_1=4,
    PAYL_END=8,
    PAYL_PSEUDO_RAND_15=3,
    PAYL_PSEUDO_RAND_9=0,
    PBUF_IP=-94,
    PBUF_LINK=-114,
    PBUF_RAW=0,
    PBUF_RAW_TX=-128,
    PBUF_TRANSPORT=-74,
    PDS_WAKEUP_IRQn=66,
    PHY_BAND_2G4=0,
    PHY_BAND_5G=1,
    PHY_BAND_MAX=2,
    PHY_CHNL_BW_160=3,
    PHY_CHNL_BW_20=0,
    PHY_CHNL_BW_40=1,
    PHY_CHNL_BW_80=2,
    PHY_CHNL_BW_80P80=4,
    PHY_CHNL_BW_OTHER=5,
    POOL_LINKED_LIST=0,
    PS_MODE_OFF=0,
    PS_MODE_ON=1,
    PS_MODE_ON_DYN=2,
    PT_ENTRY_FW_CPU0=0,
    PT_ENTRY_FW_CPU1=1,
    PT_ENTRY_MAX=16,
    PWM_IRQn=50,
    RESERVED0=32,
    RESERVED1=33,
    RESERVED10=55,
    RESERVED11=56,
    RESERVED12=57,
    RESERVED13=58,
    RESERVED14=59,
    RESERVED16=61,
    RESERVED17=62,
    RESERVED18=63,
    RESERVED19=64,
    RESERVED2=34,
    RESERVED20=65,
    RESERVED3=37,
    RESERVED4=38,
    RESERVED5=40,
    RESERVED6=44,
    RESERVED7=47,
    RESERVED8=49,
    RESERVED9=51,
    RF_TOP_INT0_IRQn=21,
    RF_TOP_INT1_IRQn=22,
    RING_LINKED_LIST=1,
    ROLE_END=2,
    ROLE_MASTER=0,
    ROLE_SLAVE=1,
    SCAN_ACTIVE=1,
    SCAN_DIS=0,
    SCAN_EN=1,
    SCAN_END=2,
    SCAN_EN_END=2,
    SCAN_PASSIVE=0,
    SCA_100PPM=3,
    SCA_150PPM=2,
    SCA_20PPM=7,
    SCA_250PPM=1,
    SCA_30PPM=6,
    SCA_500PPM=0,
    SCA_50PPM=5,
    SCA_75PPM=4,
    SC_INDICATE_PENDING=1,
    SC_NUM_FLAGS=2,
    SC_RANGE_CHANGED=0,
    SDIO_IRQn=23,
    SEC_AES_IRQn=29,
    SEC_BMX_ERR_IRQn=20,
    SEC_CDET_IRQn=26,
    SEC_GMAC_IRQn=25,
    SEC_PKA_IRQn=27,
    SEC_SHA_IRQn=30,
    SEC_TRNG_IRQn=28,
    SF_CTRL_IRQn=39,
    SMP_FLAG_BOND=12,
    SMP_FLAG_BR_CONNECTED=17,
    SMP_FLAG_BR_PAIR=18,
    SMP_FLAG_CFM_DELAYED=0,
    SMP_FLAG_CT2=19,
    SMP_FLAG_DERIVE_LK=16,
    SMP_FLAG_DHCHECK_WAIT=15,
    SMP_FLAG_DHKEY_PENDING=7,
    SMP_FLAG_DHKEY_SEND=8,
    SMP_FLAG_DISPLAY=10,
    SMP_FLAG_ENC_PENDING=1,
    SMP_FLAG_KEYS_DISTR=2,
    SMP_FLAG_OOB_PENDING=11,
    SMP_FLAG_PAIRING=3,
    SMP_FLAG_PKEY_SEND=6,
    SMP_FLAG_SC=5,
    SMP_FLAG_SC_DEBUG_KEY=13,
    SMP_FLAG_SEC_REQ=14,
    SMP_FLAG_TIMEOUT=4,
    SMP_FLAG_USER=9,
    SMP_NUM_FLAGS=20,
    SPI_IRQn=43,
    STAT_PAR_OGF=5,
    TASK_API=13,
    TASK_APM=7,
    TASK_BAM=8,
    TASK_CFG=12,
    TASK_DBG=1,
    TASK_HOSTAPD_U=10,
    TASK_LAST_EMB=12,
    TASK_MAX=14,
    TASK_ME=5,
    TASK_MESH=9,
    TASK_MM=0,
    TASK_NONE=-1,
    TASK_RXU=11,
    TASK_SCAN=2,
    TASK_SCANU=4,
    TASK_SM=6,
    TASK_TDLS=3,
    TEST_END=3,
    TEST_OGF=6,
    TEST_RX=1,
    TEST_RXTX=2,
    TEST_TX=0,
    TIMER_CH0_IRQn=52,
    TIMER_CH1_IRQn=53,
    TIMER_WDT_IRQn=54,
    TX_LVL_CURRENT=0,
    TX_LVL_LEN=2,
    TX_LVL_MAX=1,
    UART0_IRQn=45,
    UART1_IRQn=46,
    VFS_TYPE_BLOCK_DEV=2,
    VFS_TYPE_CHAR_DEV=1,
    VFS_TYPE_FS_DEV=3,
    VFS_TYPE_NOT_INIT=0,
    VS_OGF=63,
    WIFI_IPC_PUBLIC_IRQn=79,
    WIFI_IRQn=70,
    WPA_WPA2_IN_USE=8,
    eIncrement=2,
    eNoAction=0,
    eSetBits=1,
    eSetValueWithOverwrite=3,
    eSetValueWithoutOverwrite=4
} anon_enum_8_for_type.conflict4;

typedef enum anon_enum_8_for_type.conflict3 {
    AC_BE=1,
    AC_BK=0,
    AC_MAX=4,
    AC_VI=2,
    AC_VO=3,
    ADDR_END=4,
    ADDR_MASK=1,
    ADDR_PUBLIC=0,
    ADDR_RAND=1,
    ADDR_RPA_MASK=2,
    ADDR_RPA_OR_PUBLIC=2,
    ADDR_RPA_OR_RAND=3,
    ADV_CONN_DIR=1,
    ADV_CONN_DIR_LDC=4,
    ADV_CONN_UNDIR=0,
    ADV_DIS=0,
    ADV_DISC_UNDIR=2,
    ADV_EN=1,
    ADV_END=5,
    ADV_EN_END=2,
    ADV_NONCONN_UNDIR=3,
    API_AC_BE=1,
    API_AC_BK=0,
    API_AC_MAX=4,
    API_AC_VI=2,
    API_AC_VO=3,
    BLE_IRQn=72,
    BMX_ERR_IRQn=16,
    BMX_TO_IRQn=17,
    BOR_IRQn=69,
    BT_CONN_AUTO_CONNECT=0,
    BT_CONN_AUTO_FEATURE_EXCH=13,
    BT_CONN_AUTO_PHY_COMPLETE=12,
    BT_CONN_AUTO_PHY_UPDATE=7,
    BT_CONN_AUTO_VERSION_INFO=14,
    BT_CONN_BR_LEGACY_SECURE=1,
    BT_CONN_BR_NOBOND=4,
    BT_CONN_BR_PAIRING=3,
    BT_CONN_BR_PAIRING_INITIATOR=5,
    BT_CONN_CLEANUP=6,
    BT_CONN_FORCE_PAIR=11,
    BT_CONN_NUM_FLAGS=15,
    BT_CONN_OOB_BOTH_PEERS=2,
    BT_CONN_OOB_LE_LEGACY=0,
    BT_CONN_OOB_LE_SC=1,
    BT_CONN_OOB_LOCAL_ONLY=0,
    BT_CONN_OOB_NO_DATA=3,
    BT_CONN_OOB_REMOTE_ONLY=1,
    BT_CONN_ROLE_MASTER=0,
    BT_CONN_ROLE_SLAVE=1,
    BT_CONN_SLAVE_PARAM_L2CAP=10,
    BT_CONN_SLAVE_PARAM_SET=9,
    BT_CONN_SLAVE_PARAM_UPDATE=8,
    BT_CONN_TYPE_ALL=7,
    BT_CONN_TYPE_BR=2,
    BT_CONN_TYPE_LE=1,
    BT_CONN_TYPE_SCO=4,
    BT_CONN_USER=2,
    BT_DEV_ACTIVE_SCAN=12,
    BT_DEV_ADVERTISING=6,
    BT_DEV_ADVERTISING_CONNECTABLE=8,
    BT_DEV_ADVERTISING_NAME=7,
    BT_DEV_AUTO_CONN=15,
    BT_DEV_ENABLE=0,
    BT_DEV_EXPLICIT_SCAN=11,
    BT_DEV_HAS_PUB_KEY=4,
    BT_DEV_ID_PENDING=17,
    BT_DEV_KEEP_ADVERTISING=9,
    BT_DEV_NUM_FLAGS=18,
    BT_DEV_PRESET_ID=2,
    BT_DEV_PUB_KEY_BUSY=5,
    BT_DEV_READY=1,
    BT_DEV_RPA_VALID=16,
    BT_DEV_SCANNING=10,
    BT_DEV_SCAN_FILTER_DUP=13,
    BT_DEV_SCAN_WL=14,
    BT_DEV_USER_ID_ADDR=3,
    BT_EVENT_CMD_TX=0,
    BT_EVENT_CONN_TX_QUEUE=1,
    BT_GATT_DISCOVER_ATTRIBUTE=5,
    BT_GATT_DISCOVER_CHARACTERISTIC=3,
    BT_GATT_DISCOVER_DESCRIPTOR=4,
    BT_GATT_DISCOVER_INCLUDE=2,
    BT_GATT_DISCOVER_PRIMARY=0,
    BT_GATT_DISCOVER_SECONDARY=1,
    BT_GATT_ITER_CONTINUE=1,
    BT_GATT_ITER_STOP=0,
    BT_GATT_PERM_NONE=0,
    BT_GATT_PERM_PREPARE_WRITE=64,
    BT_GATT_PERM_READ=1,
    BT_GATT_PERM_READ_AUTHEN=16,
    BT_GATT_PERM_READ_ENCRYPT=4,
    BT_GATT_PERM_WRITE=2,
    BT_GATT_PERM_WRITE_AUTHEN=32,
    BT_GATT_PERM_WRITE_ENCRYPT=8,
    BT_GATT_SUBSCRIBE_FLAG_VOLATILE=0,
    BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING=1,
    BT_GATT_SUBSCRIBE_NUM_FLAGS=2,
    BT_HCI_ACL_DATA=1,
    BT_HCI_CMD=0,
    BT_HCI_CMD_CMP_EVT=2,
    BT_HCI_CMD_STAT_EVT=3,
    BT_HCI_EVT=5,
    BT_HCI_LE_EVT=4,
    BT_KEYS_ALL=63,
    BT_KEYS_AUTHENTICATED=1,
    BT_KEYS_DEBUG=2,
    BT_KEYS_ID_PENDING_ADD=4,
    BT_KEYS_ID_PENDING_DEL=8,
    BT_KEYS_IRK=2,
    BT_KEYS_LOCAL_CSRK=8,
    BT_KEYS_LTK=4,
    BT_KEYS_LTK_P256=32,
    BT_KEYS_REMOTE_CSRK=16,
    BT_KEYS_SC=16,
    BT_KEYS_SLAVE_LTK=1,
    BT_LE_ADV_OPT_CONNECTABLE=1,
    BT_LE_ADV_OPT_DIR_ADDR_RPA=32,
    BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY=16,
    BT_LE_ADV_OPT_FILTER_CONN=-128,
    BT_LE_ADV_OPT_FILTER_SCAN_REQ=64,
    BT_LE_ADV_OPT_NONE=0,
    BT_LE_ADV_OPT_ONE_TIME=2,
    BT_LE_ADV_OPT_USE_IDENTITY=4,
    BT_LE_ADV_OPT_USE_NAME=8,
    BT_LE_SCAN_FILTER_DUPLICATE=1,
    BT_LE_SCAN_FILTER_EXTENDED=4,
    BT_LE_SCAN_FILTER_WHITELIST=2,
    BT_QUIRK_NO_RESET=1,
    BT_UUID_TYPE_128=2,
    BT_UUID_TYPE_16=0,
    BT_UUID_TYPE_32=1,
    BZ_PHY_IRQn=71,
    CLIC_SOFT_PEND_IRQn=12,
    CNTLR_BB_OGF=3,
    CONTROL_PORT_HOST=1,
    CONTROL_PORT_NO_ENC=2,
    CO_BAD_PARAM=4,
    CO_BUSY=8,
    CO_EMPTY=2,
    CO_FAIL=1,
    CO_FULL=3,
    CO_NOT_FOUND=5,
    CO_NO_ELT_IN_USE=7,
    CO_NO_MORE_ELT_AVAILABLE=6,
    CO_OK=0,
    CO_OP_IN_PROGRESS=9,
    DISABLE_HT=4,
    DMA_ALL_IRQn=31,
    DMA_BMX_ERR_IRQn=24,
    EFUSE_IRQn=42,
    ERR_ABRT=-13,
    ERR_ALREADY=-9,
    ERR_ARG=-16,
    ERR_BUF=-2,
    ERR_CLSD=-15,
    ERR_CONN=-11,
    ERR_IF=-12,
    ERR_INPROGRESS=-5,
    ERR_ISCONN=-10,
    ERR_MEM=-1,
    ERR_OK=0,
    ERR_RST=-14,
    ERR_RTE=-4,
    ERR_TIMEOUT=-3,
    ERR_USE=-8,
    ERR_VAL=-6,
    ERR_WOULDBLOCK=-7,
    GLB_PLL_XTAL_24M=1,
    GLB_PLL_XTAL_26M=5,
    GLB_PLL_XTAL_32M=2,
    GLB_PLL_XTAL_38P4M=3,
    GLB_PLL_XTAL_40M=4,
    GLB_PLL_XTAL_NONE=0,
    GLB_PLL_XTAL_RC32M=6,
    GLB_SYS_CLK_PLL120M=3,
    GLB_SYS_CLK_PLL160M=4,
    GLB_SYS_CLK_PLL192M=5,
    GLB_SYS_CLK_PLL48M=2,
    GLB_SYS_CLK_RC32M=0,
    GLB_SYS_CLK_XTAL=1,
    GPADC_DMA_IRQn=41,
    GPIO_INT0_IRQn=60,
    HBN_32K_DIG=3,
    HBN_32K_RC=0,
    HBN_32K_XTAL=1,
    HBN_OUT0_IRQn=67,
    HBN_OUT1_IRQn=68,
    HBN_ROOT_CLK_PLL=2,
    HBN_ROOT_CLK_RC32M=0,
    HBN_ROOT_CLK_XTAL=1,
    HBN_UART_CLK_160M=1,
    HBN_UART_CLK_FCLK=0,
    I2C_IRQn=48,
    INFO_PAR_OGF=4,
    INIT_FILT_END=2,
    INIT_FILT_IGNORE_WLST=0,
    INIT_FILT_USE_WLST=1,
    IRQn_LAST=80,
    IRRX_IRQn=36,
    IRTX_IRQn=35,
    KE_EVT_IDLE=0,
    KE_EVT_RUNNING=1,
    KE_MEM_BLOCK_EM=1,
    KE_MEM_BLOCK_MAX=2,
    KE_MEM_BLOCK_RAM=0,
    KE_MEM_ENV=0,
    KE_MEM_KE_MSG=0,
    KE_MEM_NON_RETENTION=0,
    K_WORK_STATE_PENDING=0,
    L1C_BMX_ERR_IRQn=18,
    L1C_BMX_TO_IRQn=19,
    LE_CNTLR_OGF=8,
    LINK_TYPE_END=2,
    LIR_TYPE_A=1,
    LIR_TYPE_B=2,
    LIR_TYPE_C=3,
    LIR_TYPE_D=4,
    LIR_TYPE_E=5,
    LIR_TYPE_F=6,
    LIR_TYPE_G=7,
    LIR_TYPE_H=8,
    LIR_TYPE_I=9,
    LIR_TYPE_J=10,
    LK_CNTL_OGF=1,
    LK_POL_OGF=2,
    LLID_CNTL=3,
    LLID_CONTINUE=1,
    LLID_END=4,
    LLID_RFU=0,
    LLID_START=2,
    LLM_LE_ADV_DUMMY_IDX=1,
    LLM_LE_ADV_IDX=5,
    LLM_LE_COEXT_SCAN_IDX=3,
    LLM_LE_SCAN_CON_REQ_ADV_DIR_IDX=2,
    LLM_LE_SCAN_RSP_IDX=4,
    LL_ADV_CONN_DIR=1,
    LL_ADV_CONN_UNDIR=0,
    LL_ADV_DISC_UNDIR=6,
    LL_ADV_END=8,
    LL_ADV_NONCONN_UNDIR=2,
    LL_CONNECT_REQ=5,
    LL_EXT_ADV=7,
    LL_SCAN_REQ=3,
    LL_SCAN_RSP=4,
    MAC_GEN_IRQn=77,
    MAC_PORT_TRG_IRQn=78,
    MAC_RX_TRG_IRQn=75,
    MAC_TXRX_MISC_IRQn=74,
    MAC_TXRX_TIMER_IRQn=73,
    MAC_TX_TRG_IRQn=76,
    MAX_OGF=64,
    MEMP_ALTCP_PCB=5,
    MEMP_IGMP_GROUP=10,
    MEMP_MAX=15,
    MEMP_NETBUF=6,
    MEMP_NETCONN=7,
    MEMP_NETDB=12,
    MEMP_PBUF=13,
    MEMP_PBUF_POOL=14,
    MEMP_RAW_PCB=0,
    MEMP_SYS_TIMEOUT=11,
    MEMP_TCPIP_MSG_API=8,
    MEMP_TCPIP_MSG_INPKT=9,
    MEMP_TCP_PCB=2,
    MEMP_TCP_PCB_LISTEN=3,
    MEMP_TCP_SEG=4,
    MEMP_UDP_PCB=1,
    MEXT_IRQn=11,
    MFP_IN_USE=16,
    MM_AP=2,
    MM_IBSS=1,
    MM_MESH_POINT=3,
    MM_STA=0,
    MSOFT_IRQn=3,
    MTIME_IRQn=7,
    OP_CFLIRI_BUFFER=54,
    OP_CFLIR_BUFFER=56,
    OP_CFLIR_PLD=57,
    OP_CLIR=53,
    OP_CTLIRI_PLD=55,
    OP_LADD=24,
    OP_LCMP=25,
    OP_LDIV=20,
    OP_LDIV2N=18,
    OP_LMUL=22,
    OP_LMUL2N=19,
    OP_LSQR=21,
    OP_LSUB=23,
    OP_MADD=40,
    OP_MDIV2=33,
    OP_MEXP=35,
    OP_MINV=34,
    OP_MMUL=37,
    OP_MOD2N=17,
    OP_MOVDAT=50,
    OP_MREM=38,
    OP_MSQR=36,
    OP_MSUB=39,
    OP_NLIR=51,
    OP_PPSEL=0,
    OP_RESIZE=49,
    OP_SLIR=52,
    PAYL_00001111=6,
    PAYL_01010101=7,
    PAYL_10101010=2,
    PAYL_11110000=1,
    PAYL_ALL_0=5,
    PAYL_ALL_1=4,
    PAYL_END=8,
    PAYL_PSEUDO_RAND_15=3,
    PAYL_PSEUDO_RAND_9=0,
    PBUF_IP=-94,
    PBUF_LINK=-114,
    PBUF_RAW=0,
    PBUF_RAW_TX=-128,
    PBUF_TRANSPORT=-74,
    PDS_WAKEUP_IRQn=66,
    PHY_BAND_2G4=0,
    PHY_BAND_5G=1,
    PHY_BAND_MAX=2,
    PHY_CHNL_BW_160=3,
    PHY_CHNL_BW_20=0,
    PHY_CHNL_BW_40=1,
    PHY_CHNL_BW_80=2,
    PHY_CHNL_BW_80P80=4,
    PHY_CHNL_BW_OTHER=5,
    POOL_LINKED_LIST=0,
    PS_MODE_OFF=0,
    PS_MODE_ON=1,
    PS_MODE_ON_DYN=2,
    PT_ENTRY_FW_CPU0=0,
    PT_ENTRY_FW_CPU1=1,
    PT_ENTRY_MAX=16,
    PWM_IRQn=50,
    RESERVED0=32,
    RESERVED1=33,
    RESERVED10=55,
    RESERVED11=56,
    RESERVED12=57,
    RESERVED13=58,
    RESERVED14=59,
    RESERVED16=61,
    RESERVED17=62,
    RESERVED18=63,
    RESERVED19=64,
    RESERVED2=34,
    RESERVED20=65,
    RESERVED3=37,
    RESERVED4=38,
    RESERVED5=40,
    RESERVED6=44,
    RESERVED7=47,
    RESERVED8=49,
    RESERVED9=51,
    RF_TOP_INT0_IRQn=21,
    RF_TOP_INT1_IRQn=22,
    RING_LINKED_LIST=1,
    ROLE_END=2,
    ROLE_MASTER=0,
    ROLE_SLAVE=1,
    SCAN_ACTIVE=1,
    SCAN_DIS=0,
    SCAN_EN=1,
    SCAN_END=2,
    SCAN_EN_END=2,
    SCAN_PASSIVE=0,
    SCA_100PPM=3,
    SCA_150PPM=2,
    SCA_20PPM=7,
    SCA_250PPM=1,
    SCA_30PPM=6,
    SCA_500PPM=0,
    SCA_50PPM=5,
    SCA_75PPM=4,
    SC_INDICATE_PENDING=1,
    SC_NUM_FLAGS=2,
    SC_RANGE_CHANGED=0,
    SDIO_IRQn=23,
    SEC_AES_IRQn=29,
    SEC_BMX_ERR_IRQn=20,
    SEC_CDET_IRQn=26,
    SEC_GMAC_IRQn=25,
    SEC_PKA_IRQn=27,
    SEC_SHA_IRQn=30,
    SEC_TRNG_IRQn=28,
    SF_CTRL_IRQn=39,
    SMP_FLAG_BOND=12,
    SMP_FLAG_BR_CONNECTED=17,
    SMP_FLAG_BR_PAIR=18,
    SMP_FLAG_CFM_DELAYED=0,
    SMP_FLAG_CT2=19,
    SMP_FLAG_DERIVE_LK=16,
    SMP_FLAG_DHCHECK_WAIT=15,
    SMP_FLAG_DHKEY_PENDING=7,
    SMP_FLAG_DHKEY_SEND=8,
    SMP_FLAG_DISPLAY=10,
    SMP_FLAG_ENC_PENDING=1,
    SMP_FLAG_KEYS_DISTR=2,
    SMP_FLAG_OOB_PENDING=11,
    SMP_FLAG_PAIRING=3,
    SMP_FLAG_PKEY_SEND=6,
    SMP_FLAG_SC=5,
    SMP_FLAG_SC_DEBUG_KEY=13,
    SMP_FLAG_SEC_REQ=14,
    SMP_FLAG_TIMEOUT=4,
    SMP_FLAG_USER=9,
    SMP_NUM_FLAGS=20,
    SPI_IRQn=43,
    STAT_PAR_OGF=5,
    TASK_API=13,
    TASK_APM=7,
    TASK_BAM=8,
    TASK_CFG=12,
    TASK_DBG=1,
    TASK_HOSTAPD_U=10,
    TASK_LAST_EMB=12,
    TASK_MAX=14,
    TASK_ME=5,
    TASK_MESH=9,
    TASK_MM=0,
    TASK_NONE=-1,
    TASK_RXU=11,
    TASK_SCAN=2,
    TASK_SCANU=4,
    TASK_SM=6,
    TASK_TDLS=3,
    TEST_END=3,
    TEST_OGF=6,
    TEST_RX=1,
    TEST_RXTX=2,
    TEST_TX=0,
    TIMER_CH0_IRQn=52,
    TIMER_CH1_IRQn=53,
    TIMER_WDT_IRQn=54,
    TX_LVL_CURRENT=0,
    TX_LVL_LEN=2,
    TX_LVL_MAX=1,
    UART0_IRQn=45,
    UART1_IRQn=46,
    VFS_TYPE_BLOCK_DEV=2,
    VFS_TYPE_CHAR_DEV=1,
    VFS_TYPE_FS_DEV=3,
    VFS_TYPE_NOT_INIT=0,
    VS_OGF=63,
    WIFI_IPC_PUBLIC_IRQn=79,
    WIFI_IRQn=70,
    WPA_WPA2_IN_USE=8,
    eIncrement=2,
    eNoAction=0,
    eSetBits=1,
    eSetValueWithOverwrite=3,
    eSetValueWithoutOverwrite=4
} anon_enum_8_for_type.conflict3;

typedef enum anon_enum_8_for_type.conflict2 {
    AC_BE=1,
    AC_BK=0,
    AC_MAX=4,
    AC_VI=2,
    AC_VO=3,
    ADDR_END=4,
    ADDR_MASK=1,
    ADDR_PUBLIC=0,
    ADDR_RAND=1,
    ADDR_RPA_MASK=2,
    ADDR_RPA_OR_PUBLIC=2,
    ADDR_RPA_OR_RAND=3,
    ADV_CONN_DIR=1,
    ADV_CONN_DIR_LDC=4,
    ADV_CONN_UNDIR=0,
    ADV_DIS=0,
    ADV_DISC_UNDIR=2,
    ADV_EN=1,
    ADV_END=5,
    ADV_EN_END=2,
    ADV_NONCONN_UNDIR=3,
    API_AC_BE=1,
    API_AC_BK=0,
    API_AC_MAX=4,
    API_AC_VI=2,
    API_AC_VO=3,
    BLE_IRQn=72,
    BMX_ERR_IRQn=16,
    BMX_TO_IRQn=17,
    BOR_IRQn=69,
    BT_CONN_AUTO_CONNECT=0,
    BT_CONN_AUTO_FEATURE_EXCH=13,
    BT_CONN_AUTO_PHY_COMPLETE=12,
    BT_CONN_AUTO_PHY_UPDATE=7,
    BT_CONN_AUTO_VERSION_INFO=14,
    BT_CONN_BR_LEGACY_SECURE=1,
    BT_CONN_BR_NOBOND=4,
    BT_CONN_BR_PAIRING=3,
    BT_CONN_BR_PAIRING_INITIATOR=5,
    BT_CONN_CLEANUP=6,
    BT_CONN_FORCE_PAIR=11,
    BT_CONN_NUM_FLAGS=15,
    BT_CONN_OOB_BOTH_PEERS=2,
    BT_CONN_OOB_LE_LEGACY=0,
    BT_CONN_OOB_LE_SC=1,
    BT_CONN_OOB_LOCAL_ONLY=0,
    BT_CONN_OOB_NO_DATA=3,
    BT_CONN_OOB_REMOTE_ONLY=1,
    BT_CONN_ROLE_MASTER=0,
    BT_CONN_ROLE_SLAVE=1,
    BT_CONN_SLAVE_PARAM_L2CAP=10,
    BT_CONN_SLAVE_PARAM_SET=9,
    BT_CONN_SLAVE_PARAM_UPDATE=8,
    BT_CONN_TYPE_ALL=7,
    BT_CONN_TYPE_BR=2,
    BT_CONN_TYPE_LE=1,
    BT_CONN_TYPE_SCO=4,
    BT_CONN_USER=2,
    BT_DEV_ACTIVE_SCAN=12,
    BT_DEV_ADVERTISING=6,
    BT_DEV_ADVERTISING_CONNECTABLE=8,
    BT_DEV_ADVERTISING_NAME=7,
    BT_DEV_AUTO_CONN=15,
    BT_DEV_ENABLE=0,
    BT_DEV_EXPLICIT_SCAN=11,
    BT_DEV_HAS_PUB_KEY=4,
    BT_DEV_ID_PENDING=17,
    BT_DEV_KEEP_ADVERTISING=9,
    BT_DEV_NUM_FLAGS=18,
    BT_DEV_PRESET_ID=2,
    BT_DEV_PUB_KEY_BUSY=5,
    BT_DEV_READY=1,
    BT_DEV_RPA_VALID=16,
    BT_DEV_SCANNING=10,
    BT_DEV_SCAN_FILTER_DUP=13,
    BT_DEV_SCAN_WL=14,
    BT_DEV_USER_ID_ADDR=3,
    BT_EVENT_CMD_TX=0,
    BT_EVENT_CONN_TX_QUEUE=1,
    BT_GATT_DISCOVER_ATTRIBUTE=5,
    BT_GATT_DISCOVER_CHARACTERISTIC=3,
    BT_GATT_DISCOVER_DESCRIPTOR=4,
    BT_GATT_DISCOVER_INCLUDE=2,
    BT_GATT_DISCOVER_PRIMARY=0,
    BT_GATT_DISCOVER_SECONDARY=1,
    BT_GATT_ITER_CONTINUE=1,
    BT_GATT_ITER_STOP=0,
    BT_GATT_SUBSCRIBE_FLAG_VOLATILE=0,
    BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING=1,
    BT_GATT_SUBSCRIBE_NUM_FLAGS=2,
    BT_HCI_ACL_DATA=1,
    BT_HCI_CMD=0,
    BT_HCI_CMD_CMP_EVT=2,
    BT_HCI_CMD_STAT_EVT=3,
    BT_HCI_EVT=5,
    BT_HCI_LE_EVT=4,
    BT_KEYS_ALL=63,
    BT_KEYS_AUTHENTICATED=1,
    BT_KEYS_DEBUG=2,
    BT_KEYS_ID_PENDING_ADD=4,
    BT_KEYS_ID_PENDING_DEL=8,
    BT_KEYS_IRK=2,
    BT_KEYS_LOCAL_CSRK=8,
    BT_KEYS_LTK=4,
    BT_KEYS_LTK_P256=32,
    BT_KEYS_REMOTE_CSRK=16,
    BT_KEYS_SC=16,
    BT_KEYS_SLAVE_LTK=1,
    BT_LE_ADV_OPT_CONNECTABLE=1,
    BT_LE_ADV_OPT_DIR_ADDR_RPA=32,
    BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY=16,
    BT_LE_ADV_OPT_FILTER_CONN=-128,
    BT_LE_ADV_OPT_FILTER_SCAN_REQ=64,
    BT_LE_ADV_OPT_NONE=0,
    BT_LE_ADV_OPT_ONE_TIME=2,
    BT_LE_ADV_OPT_USE_IDENTITY=4,
    BT_LE_ADV_OPT_USE_NAME=8,
    BT_LE_SCAN_FILTER_DUPLICATE=1,
    BT_LE_SCAN_FILTER_EXTENDED=4,
    BT_LE_SCAN_FILTER_WHITELIST=2,
    BT_QUIRK_NO_RESET=1,
    BT_UUID_TYPE_128=2,
    BT_UUID_TYPE_16=0,
    BT_UUID_TYPE_32=1,
    BZ_PHY_IRQn=71,
    CLIC_SOFT_PEND_IRQn=12,
    CNTLR_BB_OGF=3,
    CONTROL_PORT_HOST=1,
    CONTROL_PORT_NO_ENC=2,
    CO_BAD_PARAM=4,
    CO_BUSY=8,
    CO_EMPTY=2,
    CO_FAIL=1,
    CO_FULL=3,
    CO_NOT_FOUND=5,
    CO_NO_ELT_IN_USE=7,
    CO_NO_MORE_ELT_AVAILABLE=6,
    CO_OK=0,
    CO_OP_IN_PROGRESS=9,
    DISABLE_HT=4,
    DMA_ALL_IRQn=31,
    DMA_BMX_ERR_IRQn=24,
    EFUSE_IRQn=42,
    ERR_ABRT=-13,
    ERR_ALREADY=-9,
    ERR_ARG=-16,
    ERR_BUF=-2,
    ERR_CLSD=-15,
    ERR_CONN=-11,
    ERR_IF=-12,
    ERR_INPROGRESS=-5,
    ERR_ISCONN=-10,
    ERR_MEM=-1,
    ERR_OK=0,
    ERR_RST=-14,
    ERR_RTE=-4,
    ERR_TIMEOUT=-3,
    ERR_USE=-8,
    ERR_VAL=-6,
    ERR_WOULDBLOCK=-7,
    GLB_PLL_XTAL_24M=1,
    GLB_PLL_XTAL_26M=5,
    GLB_PLL_XTAL_32M=2,
    GLB_PLL_XTAL_38P4M=3,
    GLB_PLL_XTAL_40M=4,
    GLB_PLL_XTAL_NONE=0,
    GLB_PLL_XTAL_RC32M=6,
    GLB_SYS_CLK_PLL120M=3,
    GLB_SYS_CLK_PLL160M=4,
    GLB_SYS_CLK_PLL192M=5,
    GLB_SYS_CLK_PLL48M=2,
    GLB_SYS_CLK_RC32M=0,
    GLB_SYS_CLK_XTAL=1,
    GPADC_DMA_IRQn=41,
    GPIO_INT0_IRQn=60,
    HBN_32K_DIG=3,
    HBN_32K_RC=0,
    HBN_32K_XTAL=1,
    HBN_OUT0_IRQn=67,
    HBN_OUT1_IRQn=68,
    HBN_ROOT_CLK_PLL=2,
    HBN_ROOT_CLK_RC32M=0,
    HBN_ROOT_CLK_XTAL=1,
    HBN_UART_CLK_160M=1,
    HBN_UART_CLK_FCLK=0,
    I2C_IRQn=48,
    INFO_PAR_OGF=4,
    INIT_FILT_END=2,
    INIT_FILT_IGNORE_WLST=0,
    INIT_FILT_USE_WLST=1,
    IRQn_LAST=80,
    IRRX_IRQn=36,
    IRTX_IRQn=35,
    KE_EVT_IDLE=0,
    KE_EVT_RUNNING=1,
    KE_MEM_BLOCK_EM=1,
    KE_MEM_BLOCK_MAX=2,
    KE_MEM_BLOCK_RAM=0,
    KE_MEM_ENV=0,
    KE_MEM_KE_MSG=0,
    KE_MEM_NON_RETENTION=0,
    K_WORK_STATE_PENDING=0,
    L1C_BMX_ERR_IRQn=18,
    L1C_BMX_TO_IRQn=19,
    LE_CNTLR_OGF=8,
    LINK_TYPE_END=2,
    LIR_TYPE_A=1,
    LIR_TYPE_B=2,
    LIR_TYPE_C=3,
    LIR_TYPE_D=4,
    LIR_TYPE_E=5,
    LIR_TYPE_F=6,
    LIR_TYPE_G=7,
    LIR_TYPE_H=8,
    LIR_TYPE_I=9,
    LIR_TYPE_J=10,
    LK_CNTL_OGF=1,
    LK_POL_OGF=2,
    LLID_CNTL=3,
    LLID_CONTINUE=1,
    LLID_END=4,
    LLID_RFU=0,
    LLID_START=2,
    LLM_LE_ADV_DUMMY_IDX=1,
    LLM_LE_ADV_IDX=5,
    LLM_LE_COEXT_SCAN_IDX=3,
    LLM_LE_SCAN_CON_REQ_ADV_DIR_IDX=2,
    LLM_LE_SCAN_RSP_IDX=4,
    LL_ADV_CONN_DIR=1,
    LL_ADV_CONN_UNDIR=0,
    LL_ADV_DISC_UNDIR=6,
    LL_ADV_END=8,
    LL_ADV_NONCONN_UNDIR=2,
    LL_CONNECT_REQ=5,
    LL_EXT_ADV=7,
    LL_SCAN_REQ=3,
    LL_SCAN_RSP=4,
    MAC_GEN_IRQn=77,
    MAC_PORT_TRG_IRQn=78,
    MAC_RX_TRG_IRQn=75,
    MAC_TXRX_MISC_IRQn=74,
    MAC_TXRX_TIMER_IRQn=73,
    MAC_TX_TRG_IRQn=76,
    MAX_OGF=64,
    MEMP_ALTCP_PCB=5,
    MEMP_IGMP_GROUP=10,
    MEMP_MAX=15,
    MEMP_NETBUF=6,
    MEMP_NETCONN=7,
    MEMP_NETDB=12,
    MEMP_PBUF=13,
    MEMP_PBUF_POOL=14,
    MEMP_RAW_PCB=0,
    MEMP_SYS_TIMEOUT=11,
    MEMP_TCPIP_MSG_API=8,
    MEMP_TCPIP_MSG_INPKT=9,
    MEMP_TCP_PCB=2,
    MEMP_TCP_PCB_LISTEN=3,
    MEMP_TCP_SEG=4,
    MEMP_UDP_PCB=1,
    MEXT_IRQn=11,
    MFP_IN_USE=16,
    MM_AP=2,
    MM_IBSS=1,
    MM_MESH_POINT=3,
    MM_STA=0,
    MSOFT_IRQn=3,
    MTIME_IRQn=7,
    OP_CFLIRI_BUFFER=54,
    OP_CFLIR_BUFFER=56,
    OP_CFLIR_PLD=57,
    OP_CLIR=53,
    OP_CTLIRI_PLD=55,
    OP_LADD=24,
    OP_LCMP=25,
    OP_LDIV=20,
    OP_LDIV2N=18,
    OP_LMUL=22,
    OP_LMUL2N=19,
    OP_LSQR=21,
    OP_LSUB=23,
    OP_MADD=40,
    OP_MDIV2=33,
    OP_MEXP=35,
    OP_MINV=34,
    OP_MMUL=37,
    OP_MOD2N=17,
    OP_MOVDAT=50,
    OP_MREM=38,
    OP_MSQR=36,
    OP_MSUB=39,
    OP_NLIR=51,
    OP_PPSEL=0,
    OP_RESIZE=49,
    OP_SLIR=52,
    PAYL_00001111=6,
    PAYL_01010101=7,
    PAYL_10101010=2,
    PAYL_11110000=1,
    PAYL_ALL_0=5,
    PAYL_ALL_1=4,
    PAYL_END=8,
    PAYL_PSEUDO_RAND_15=3,
    PAYL_PSEUDO_RAND_9=0,
    PBUF_IP=-94,
    PBUF_LINK=-114,
    PBUF_RAW=0,
    PBUF_RAW_TX=-128,
    PBUF_TRANSPORT=-74,
    PDS_WAKEUP_IRQn=66,
    PHY_BAND_2G4=0,
    PHY_BAND_5G=1,
    PHY_BAND_MAX=2,
    PHY_CHNL_BW_160=3,
    PHY_CHNL_BW_20=0,
    PHY_CHNL_BW_40=1,
    PHY_CHNL_BW_80=2,
    PHY_CHNL_BW_80P80=4,
    PHY_CHNL_BW_OTHER=5,
    POOL_LINKED_LIST=0,
    PS_MODE_OFF=0,
    PS_MODE_ON=1,
    PS_MODE_ON_DYN=2,
    PT_ENTRY_FW_CPU0=0,
    PT_ENTRY_FW_CPU1=1,
    PT_ENTRY_MAX=16,
    PWM_IRQn=50,
    RESERVED0=32,
    RESERVED1=33,
    RESERVED10=55,
    RESERVED11=56,
    RESERVED12=57,
    RESERVED13=58,
    RESERVED14=59,
    RESERVED16=61,
    RESERVED17=62,
    RESERVED18=63,
    RESERVED19=64,
    RESERVED2=34,
    RESERVED20=65,
    RESERVED3=37,
    RESERVED4=38,
    RESERVED5=40,
    RESERVED6=44,
    RESERVED7=47,
    RESERVED8=49,
    RESERVED9=51,
    RF_TOP_INT0_IRQn=21,
    RF_TOP_INT1_IRQn=22,
    RING_LINKED_LIST=1,
    ROLE_END=2,
    ROLE_MASTER=0,
    ROLE_SLAVE=1,
    SCAN_ACTIVE=1,
    SCAN_DIS=0,
    SCAN_EN=1,
    SCAN_END=2,
    SCAN_EN_END=2,
    SCAN_PASSIVE=0,
    SCA_100PPM=3,
    SCA_150PPM=2,
    SCA_20PPM=7,
    SCA_250PPM=1,
    SCA_30PPM=6,
    SCA_500PPM=0,
    SCA_50PPM=5,
    SCA_75PPM=4,
    SDIO_IRQn=23,
    SEC_AES_IRQn=29,
    SEC_BMX_ERR_IRQn=20,
    SEC_CDET_IRQn=26,
    SEC_GMAC_IRQn=25,
    SEC_PKA_IRQn=27,
    SEC_SHA_IRQn=30,
    SEC_TRNG_IRQn=28,
    SF_CTRL_IRQn=39,
    SMP_FLAG_BOND=12,
    SMP_FLAG_BR_CONNECTED=17,
    SMP_FLAG_BR_PAIR=18,
    SMP_FLAG_CFM_DELAYED=0,
    SMP_FLAG_CT2=19,
    SMP_FLAG_DERIVE_LK=16,
    SMP_FLAG_DHCHECK_WAIT=15,
    SMP_FLAG_DHKEY_PENDING=7,
    SMP_FLAG_DHKEY_SEND=8,
    SMP_FLAG_DISPLAY=10,
    SMP_FLAG_ENC_PENDING=1,
    SMP_FLAG_KEYS_DISTR=2,
    SMP_FLAG_OOB_PENDING=11,
    SMP_FLAG_PAIRING=3,
    SMP_FLAG_PKEY_SEND=6,
    SMP_FLAG_SC=5,
    SMP_FLAG_SC_DEBUG_KEY=13,
    SMP_FLAG_SEC_REQ=14,
    SMP_FLAG_TIMEOUT=4,
    SMP_FLAG_USER=9,
    SMP_NUM_FLAGS=20,
    SPI_IRQn=43,
    STAT_PAR_OGF=5,
    TASK_API=13,
    TASK_APM=7,
    TASK_BAM=8,
    TASK_CFG=12,
    TASK_DBG=1,
    TASK_HOSTAPD_U=10,
    TASK_LAST_EMB=12,
    TASK_MAX=14,
    TASK_ME=5,
    TASK_MESH=9,
    TASK_MM=0,
    TASK_NONE=-1,
    TASK_RXU=11,
    TASK_SCAN=2,
    TASK_SCANU=4,
    TASK_SM=6,
    TASK_TDLS=3,
    TEST_END=3,
    TEST_OGF=6,
    TEST_RX=1,
    TEST_RXTX=2,
    TEST_TX=0,
    TIMER_CH0_IRQn=52,
    TIMER_CH1_IRQn=53,
    TIMER_WDT_IRQn=54,
    TX_LVL_CURRENT=0,
    TX_LVL_LEN=2,
    TX_LVL_MAX=1,
    UART0_IRQn=45,
    UART1_IRQn=46,
    VFS_TYPE_BLOCK_DEV=2,
    VFS_TYPE_CHAR_DEV=1,
    VFS_TYPE_FS_DEV=3,
    VFS_TYPE_NOT_INIT=0,
    VS_OGF=63,
    WIFI_IPC_PUBLIC_IRQn=79,
    WIFI_IRQn=70,
    WPA_WPA2_IN_USE=8,
    eIncrement=2,
    eNoAction=0,
    eSetBits=1,
    eSetValueWithOverwrite=3,
    eSetValueWithoutOverwrite=4
} anon_enum_8_for_type.conflict2;


// WARNING! conflicting data type names: /DWARF/_UNCATEGORIZED_/ieee80211_mgmt/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u

typedef TimerHandle_t timer_cb_arg_t;

typedef struct mm_env_tag mm_env_tag, *Pmm_env_tag;

struct mm_env_tag {
    uint32_t rx_filter_umac;
    uint32_t rx_filter_lmac_enable;
    uint16_t ampdu_max_dur[5];
    uint8_t prev_mm_state;
    uint8_t prev_hw_state;
    uint32_t basic_rates[2];
    uint32_t uapsd_timeout;
    uint16_t lp_clk_accuracy;
    uint8_t host_idle;
    _Bool keep_alive_status_enabled;
    uint32_t keep_alive_packet_counter;
    uint32_t keep_alive_time_last_received;
};

typedef enum mm_features {
    MM_FEAT_AMPDU_BIT=9,
    MM_FEAT_AMSDU_BIT=10,
    MM_FEAT_AUTOBCN_BIT=1,
    MM_FEAT_BCN_BIT=0,
    MM_FEAT_BFMEE_BIT=17,
    MM_FEAT_BFMER_BIT=18,
    MM_FEAT_CHNL_CTXT_BIT=11,
    MM_FEAT_CMON_BIT=3,
    MM_FEAT_DPSM_BIT=8,
    MM_FEAT_HWSCAN_BIT=2,
    MM_FEAT_MESH_BIT=23,
    MM_FEAT_MFP_BIT=20,
    MM_FEAT_MROLE_BIT=4,
    MM_FEAT_MU_MIMO_RX_BIT=21,
    MM_FEAT_MU_MIMO_TX_BIT=22,
    MM_FEAT_P2P_BIT=13,
    MM_FEAT_P2P_GO_BIT=14,
    MM_FEAT_PS_BIT=6,
    MM_FEAT_RADAR_BIT=5,
    MM_FEAT_REORD_BIT=12,
    MM_FEAT_TDLS_BIT=24,
    MM_FEAT_UAPSD_BIT=7,
    MM_FEAT_UMAC_BIT=15,
    MM_FEAT_VHT_BIT=16,
    MM_FEAT_WAPI_BIT=19
} mm_features;

typedef enum ea_elt_asap_type {
    EA_FLAG_ASAP_LIMIT=2,
    EA_FLAG_ASAP_NO_LIMIT=1,
    EA_FLAG_MAX=3,
    EA_FLAG_NO_ASAP=0
} ea_elt_asap_type;

typedef enum ea_param_req_action {
    EA_PARAM_REQ_CHECK=1,
    EA_PARAM_REQ_GET=0
} ea_param_req_action;

typedef struct ea_param_input ea_param_input, *Pea_param_input;

struct ea_param_input {
    uint16_t interval_min;
    uint16_t interval_max;
    uint32_t duration_min;
    uint16_t duration_max;
    uint8_t pref_period;
    undefined field_0xb;
    uint16_t offset;
    uint8_t action;
    undefined field_0xf;
    uint16_t conhdl;
    uint16_t role;
    _Bool odd_offset;
    undefined field_0x15;
    uint16_t linkid;
};

typedef struct ea_param_output ea_param_output, *Pea_param_output;

struct ea_param_output {
    uint16_t interval;
    undefined field_0x2;
    undefined field_0x3;
    uint32_t duration;
    uint16_t offset;
    undefined field_0xa;
    undefined field_0xb;
};

typedef struct ea_interval_tag ea_interval_tag, *Pea_interval_tag;

struct ea_interval_tag {
    struct co_list_hdr hdr;
    uint16_t interval_used;
    uint16_t offset_used;
    uint16_t bandwidth_used;
    uint16_t conhdl_used;
    uint16_t role_used;
    uint16_t linkid;
};

typedef enum ea_error {
    EA_ERROR_BW_FULL=3,
    EA_ERROR_NOT_FOUND=2,
    EA_ERROR_OK=0,
    EA_ERROR_REJECTED=1
} ea_error;

typedef enum ea_elt_asap_parity {
    EA_EVEN_SLOT=0,
    EA_NO_PARITY=2,
    EA_ODD_SLOT=1
} ea_elt_asap_parity;

typedef struct ea_env_tag ea_env_tag, *Pea_env_tag;

struct ea_env_tag {
    struct co_list elt_wait;
    struct ea_elt_tag * elt_prog;
    struct co_list elt_canceled;
    struct co_list interval_list;
    uint32_t finetarget_time;
};

typedef enum ea_conflict {
    START_AFTER_END_AFTER=5,
    START_BEFORE_END_AFTER=2,
    START_BEFORE_END_BEFORE=0,
    START_BEFORE_END_DURING=1,
    START_DURING_END_AFTER=4,
    START_DURING_END_DURING=3
} ea_conflict;

typedef enum rwip_prio_dft {
    RWIP_PRIO_ADV_DFT=5,
    RWIP_PRIO_ADV_HDC_DFT=10,
    RWIP_PRIO_INIT_DFT=5,
    RWIP_PRIO_LE_CON_ACT_DFT=15,
    RWIP_PRIO_LE_CON_IDLE_DFT=10,
    RWIP_PRIO_LE_ESTAB_DFT=20,
    RWIP_PRIO_MAX=31,
    RWIP_PRIO_SCAN_DFT=5
} rwip_prio_dft;

typedef enum rwip_coex_config_idx {
    RWIP_COEX_ADV_IDX=2,
    RWIP_COEX_CFG_MAX=5,
    RWIP_COEX_CON_DATA_IDX=1,
    RWIP_COEX_CON_IDX=0,
    RWIP_COEX_INIT_IDX=4,
    RWIP_COEX_SCAN_IDX=3
} rwip_coex_config_idx;

typedef enum rwip_incr_dft {
    RWIP_INCR_ADV_DFT=1,
    RWIP_INCR_ADV_HDC_PRIO_DFT=1,
    RWIP_INCR_INIT_DFT=1,
    RWIP_INCR_LE_CON_ACT_DFT=11,
    RWIP_INCR_LE_CON_IDLE_DFT=1,
    RWIP_INCR_LE_ESTAB_DFT=1,
    RWIP_INCR_SCAN_DFT=1
} rwip_incr_dft;

typedef enum KE_EVENT_TYPE {
    KE_EVENT_BLE_CRYPT=1,
    KE_EVENT_BLE_EVT_DEFER=8,
    KE_EVENT_BLE_EVT_DELETE=9,
    KE_EVENT_BT_PSCAN_PROC=7,
    KE_EVENT_ECC_MULTIPLICATION=0,
    KE_EVENT_H4TL_CMD_HDR_RX=5,
    KE_EVENT_H4TL_CMD_PLD_RX=6,
    KE_EVENT_H4TL_TX=4,
    KE_EVENT_KE_MESSAGE=2,
    KE_EVENT_KE_TIMER=3,
    KE_EVENT_MAX=10
} KE_EVENT_TYPE;

typedef enum rwip_prio_idx {
    RWIP_PRIO_ADV_HDC_IDX=6,
    RWIP_PRIO_ADV_IDX=5,
    RWIP_PRIO_IDX_MAX=7,
    RWIP_PRIO_INIT_IDX=1,
    RWIP_PRIO_LE_CON_ACT_IDX=4,
    RWIP_PRIO_LE_CON_IDLE_IDX=3,
    RWIP_PRIO_LE_ESTAB_IDX=2,
    RWIP_PRIO_SCAN_IDX=0
} rwip_prio_idx;

typedef enum KE_TASK_TYPE {
    TASK_DBG=3,
    TASK_HCI_ONCHIP=4,
    TASK_LLC=1,
    TASK_LLD=2,
    TASK_LLM=0,
    TASK_MAX=5,
    TASK_NONE=-1
} KE_TASK_TYPE;

typedef TickType_t EventBits_t;

typedef struct EventGroupDef_t EventGroupDef_t, *PEventGroupDef_t;

typedef struct EventGroupDef_t * EventGroupHandle_t;

struct EventGroupDef_t {
    EventBits_t uxEventBits;
    List_t xTasksWaitingForBits;
    UBaseType_t uxEventGroupNumber;
    uint8_t ucStaticallyAllocated;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
};

typedef ulonglong uintmax_t;

typedef longlong intmax_t;

typedef longlong int64_t;

typedef struct bt_l2cap_le_chan.conflict1 bt_l2cap_le_chan.conflict1, *Pbt_l2cap_le_chan.conflict1;

typedef struct bt_l2cap_chan.conflict2 bt_l2cap_chan.conflict2, *Pbt_l2cap_chan.conflict2;

struct bt_l2cap_chan.conflict2 {
    struct bt_conn * conn;
    struct bt_l2cap_chan_ops * ops;
    sys_snode_t node;
    void (* destroy)(struct bt_l2cap_chan *);
    struct k_delayed_work.conflict9 rtx_work;
    atomic_t status[1];
    bt_l2cap_chan_state_t state;
    undefined field_0x39;
    u16_t psm;
    u8_t ident;
    enum bt_security_t required_sec_level;
    undefined field_0x3e;
    undefined field_0x3f;
};

struct bt_l2cap_le_chan.conflict1 {
    struct bt_l2cap_chan.conflict2 chan;
    struct bt_l2cap_le_endpoint rx;
    struct bt_l2cap_le_endpoint tx;
    struct k_fifo tx_queue;
    struct net_buf * tx_buf;
    struct net_buf * _sdu;
    u16_t _sdu_len;
    undefined field_0x7e;
    undefined field_0x7f;
    struct k_work rx_work;
    struct k_fifo rx_queue;
};

typedef struct bt_l2cap_le_chan.conflict2 bt_l2cap_le_chan.conflict2, *Pbt_l2cap_le_chan.conflict2;

typedef struct bt_l2cap_chan.conflict3 bt_l2cap_chan.conflict3, *Pbt_l2cap_chan.conflict3;

struct bt_l2cap_chan.conflict3 {
    struct bt_conn * conn;
    struct bt_l2cap_chan_ops * ops;
    sys_snode_t node;
    void (* destroy)(struct bt_l2cap_chan *);
    struct k_delayed_work.conflict11 rtx_work;
    atomic_t status[1];
    bt_l2cap_chan_state_t state;
    undefined field_0x39;
    u16_t psm;
    u8_t ident;
    enum bt_security_t required_sec_level;
    undefined field_0x3e;
    undefined field_0x3f;
};

struct bt_l2cap_le_chan.conflict2 {
    struct bt_l2cap_chan.conflict3 chan;
    struct bt_l2cap_le_endpoint rx;
    struct bt_l2cap_le_endpoint tx;
    struct k_fifo tx_queue;
    struct net_buf * tx_buf;
    struct net_buf * _sdu;
    u16_t _sdu_len;
    undefined field_0x7e;
    undefined field_0x7f;
    struct k_work rx_work;
    struct k_fifo rx_queue;
};

typedef enum bt_l2cap_chan_status {
    BT_L2CAP_NUM_STATUS=1,
    BT_L2CAP_STATUS_OUT=0
} bt_l2cap_chan_status;

typedef struct bt_l2cap_chan.conflict bt_l2cap_chan.conflict, *Pbt_l2cap_chan.conflict;

struct bt_l2cap_chan.conflict {
    struct bt_conn * conn;
    struct bt_l2cap_chan_ops * ops;
    sys_snode_t node;
    void (* destroy)(struct bt_l2cap_chan *);
    struct k_delayed_work.conflict7 rtx_work;
    atomic_t status[1];
    bt_l2cap_chan_state_t state;
    undefined field_0x39;
    u16_t psm;
    u8_t ident;
    enum bt_security_t required_sec_level;
    undefined field_0x3e;
    undefined field_0x3f;
};

typedef struct bt_l2cap_chan.conflict1 bt_l2cap_chan.conflict1, *Pbt_l2cap_chan.conflict1;

struct bt_l2cap_chan.conflict1 {
    struct bt_conn * conn;
    struct bt_l2cap_chan_ops * ops;
    sys_snode_t node;
    void (* destroy)(struct bt_l2cap_chan *);
    struct k_delayed_work.conflict8 rtx_work;
    atomic_t status[1];
    bt_l2cap_chan_state_t state;
    undefined field_0x39;
    u16_t psm;
    u8_t ident;
    enum bt_security_t required_sec_level;
    undefined field_0x3e;
    undefined field_0x3f;
};

typedef struct bt_l2cap_le_chan.conflict bt_l2cap_le_chan.conflict, *Pbt_l2cap_le_chan.conflict;

struct bt_l2cap_le_chan.conflict {
    struct bt_l2cap_chan.conflict1 chan;
    struct bt_l2cap_le_endpoint rx;
    struct bt_l2cap_le_endpoint tx;
    struct k_fifo tx_queue;
    struct net_buf * tx_buf;
    struct net_buf * _sdu;
    u16_t _sdu_len;
    undefined field_0x7e;
    undefined field_0x7f;
    struct k_work rx_work;
    struct k_fifo rx_queue;
};

typedef struct bt_l2cap_server bt_l2cap_server, *Pbt_l2cap_server;

struct bt_l2cap_server {
    u16_t psm;
    enum bt_security_t sec_level;
    undefined field_0x3;
    int (* accept)(struct bt_conn *, struct bt_l2cap_chan * *);
    sys_snode_t node;
};

typedef struct bt_l2cap bt_l2cap, *Pbt_l2cap;

struct bt_l2cap {
    struct bt_l2cap_le_chan chan;
};

typedef struct EventGroupDef_t EventGroup_t;

typedef struct Ring_Buffer_Type Ring_Buffer_Type, *PRing_Buffer_Type;

struct Ring_Buffer_Type {
    uint8_t * pointer;
    uint8_t readMirror;
    undefined field_0x5;
    uint16_t readIndex;
    uint8_t writeMirror;
    undefined field_0x9;
    uint16_t writeIndex;
    uint16_t size;
    undefined field_0xe;
    undefined field_0xf;
    void (* lock)(void);
    void (* unlock)(void);
};

typedef struct udp_hdr udp_hdr, *Pudp_hdr;

struct udp_hdr {
    u16_t src;
    u16_t dest;
    u16_t len;
    u16_t chksum;
};

typedef struct rx_pbd rx_pbd, *Prx_pbd;

struct rx_pbd {
    uint32_t upattern;
    uint32_t next;
    uint32_t datastartptr;
    uint32_t dataendptr;
    uint16_t bufstatinfo;
    uint16_t reserved;
};

typedef struct rx_payloaddesc rx_payloaddesc, *Prx_payloaddesc;

struct rx_payloaddesc {
    struct rx_pbd pbd;
    uint32_t pd_status;
    uint32_t * buffer_rx;
    void * pbuf_holder[6];
};

typedef struct tx_compressed_policy_tbl tx_compressed_policy_tbl, *Ptx_compressed_policy_tbl;

struct tx_compressed_policy_tbl {
    uint32_t upatterntx;
    uint32_t sec_user_control;
};

typedef struct rx_dmadesc rx_dmadesc, *Prx_dmadesc;

typedef struct rx_hd rx_hd, *Prx_hd;

typedef struct phy_channel_info phy_channel_info, *Pphy_channel_info;

typedef struct rx_swdesc rx_swdesc, *Prx_swdesc;

struct rx_hd {
    uint32_t upatternrx;
    uint32_t next;
    uint32_t first_pbd_ptr;
    struct rx_swdesc * swdesc;
    uint32_t datastartptr;
    uint32_t dataendptr;
    uint32_t headerctrlinfo;
    uint16_t frmlen;
    uint16_t ampdu_stat_info;
    uint32_t tsflo;
    uint32_t tsfhi;
    uint32_t recvec1a;
    uint32_t recvec1b;
    uint32_t recvec1c;
    uint32_t recvec1d;
    uint32_t recvec2a;
    uint32_t recvec2b;
    uint32_t statinfo;
};

struct phy_channel_info {
    uint32_t info1;
    uint32_t info2;
};

struct rx_dmadesc {
    struct rx_hd hd;
    struct phy_channel_info phy_info;
    uint32_t flags;
    uint32_t pattern;
    uint32_t payl_offset;
    uint32_t reserved_pad[2];
    uint32_t use_in_tcpip;
};

struct rx_swdesc {
    struct co_list_hdr list_hdr;
    struct rx_dmadesc * dma_hdrdesc;
    struct rx_payloaddesc * pd;
    struct rx_pbd * last_pbd;
    struct rx_pbd * spare_pbd;
    uint32_t host_id;
    uint32_t frame_len;
    uint8_t status;
    uint8_t pbd_count;
    uint8_t use_in_tcpip;
    undefined field_0x1f;
};

typedef struct tx_policy_tbl tx_policy_tbl, *Ptx_policy_tbl;

struct tx_policy_tbl {
    uint32_t upatterntx;
    uint32_t phycntrlinfo1;
    uint32_t phycntrlinfo2;
    uint32_t maccntrlinfo1;
    uint32_t maccntrlinfo2;
    uint32_t ratecntrlinfo[4];
    uint32_t powercntrlinfo[4];
};

typedef struct PtTable_Entry_Config PtTable_Entry_Config, *PPtTable_Entry_Config;

struct PtTable_Entry_Config {
    uint8_t type;
    uint8_t device;
    uint8_t activeIndex;
    uint8_t name[9];
    uint32_t Address[2];
    uint32_t maxLen[2];
    uint32_t len;
    uint32_t age;
};

typedef struct PtTable_Stuff_Config PtTable_Stuff_Config, *PPtTable_Stuff_Config;

typedef struct PtTable_Config PtTable_Config, *PPtTable_Config;

struct PtTable_Config {
    uint32_t magicCode;
    uint16_t version;
    uint16_t entryCnt;
    uint32_t age;
    uint32_t crc32;
};

struct PtTable_Stuff_Config {
    struct PtTable_Config ptTable;
    struct PtTable_Entry_Config ptEntries[16];
    uint32_t crc32;
};


// WARNING! conflicting data type names: /DWARF/bl_boot2.h/anon_enum_8 - /DWARF/debug.c/vsnprintf/anon_enum_8

typedef enum _blog_leve {
    BLOG_LEVEL_ALL=0,
    BLOG_LEVEL_ASSERT=5,
    BLOG_LEVEL_DEBUG=1,
    BLOG_LEVEL_ERROR=4,
    BLOG_LEVEL_INFO=2,
    BLOG_LEVEL_NEVER=6,
    BLOG_LEVEL_WARN=3
} _blog_leve;

typedef enum _blog_leve blog_level_t;

typedef struct _blog_info _blog_info, *P_blog_info;

typedef struct _blog_info blog_info_t;

struct _blog_info {
    blog_level_t * level;
    char * name;
};

typedef enum lld_ch_asses_ponderation {
    LLD_CH_ASSES_CRC_ERR=-3,
    LLD_CH_ASSES_SYNC_ERR_HIGH_RSSI=-3,
    LLD_CH_ASSES_SYNC_ERR_LOW_RSSI_LATENCY=0,
    LLD_CH_ASSES_SYNC_ERR_LOW_RSSI_NO_LATENCY=-1,
    LLD_CH_ASSES_SYNC_FOUND_NO_CRC_ERR=3
} lld_ch_asses_ponderation;

typedef enum HCI_TX_STATE {
    HCI_STATE_TX_IDLE=1,
    HCI_STATE_TX_ONGOING=0
} HCI_TX_STATE;

typedef struct hci_tl_env_tag hci_tl_env_tag, *Phci_tl_env_tag;

typedef struct ke_msg ke_msg, *Pke_msg;

struct ke_msg {
    struct co_list_hdr hdr;
    ke_msg_id_t id;
    ke_task_id_t dest_id;
    ke_task_id_t src_id;
    uint16_t param_len;
    uint32_t param[1];
};

struct hci_tl_env_tag {
    struct co_list tx_queue;
    struct co_list acl_queue;
    struct ke_msg * curr_tx_msg;
    struct em_buf_node * txtag;
    uint8_t tx_state;
    int8_t nb_h2c_cmd_pkts;
    undefined field_0x1a;
    undefined field_0x1b;
};

typedef struct _bl_sha_SEC_Eng_SHA256_Ctx_t _bl_sha_SEC_Eng_SHA256_Ctx_t, *P_bl_sha_SEC_Eng_SHA256_Ctx_t;

struct _bl_sha_SEC_Eng_SHA256_Ctx_t {
    uint32_t total[2];
    uint32_t * shaBuf;
    uint32_t * shaPadding;
    uint8_t shaFeed;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
};

typedef enum bl_sha_type_t {
    BL_SHA1=2,
    BL_SHA224=1,
    BL_SHA256=0
} bl_sha_type_t;

typedef struct bl_sha_ctx bl_sha_ctx, *Pbl_sha_ctx;

struct bl_sha_ctx {
    struct _bl_sha_SEC_Eng_SHA256_Ctx_t sha_ctx;
    uint32_t tmp[16];
    uint32_t pad[16];
};

typedef struct bl_sha_ctx bl_sha_ctx_t;

typedef struct Efuse_TSEN_Refcode_Corner_Type.conflict Efuse_TSEN_Refcode_Corner_Type.conflict, *PEfuse_TSEN_Refcode_Corner_Type.conflict;

struct Efuse_TSEN_Refcode_Corner_Type.conflict {
    uint32_t tsenRefcodeCorner:12;
    uint32_t tsenRefcodeCornerParity:1;
    uint32_t tsenRefcodeCornerEn:1;
    uint32_t tsenRefcodeCornerVersion:1;
    uint32_t reserved:17;
};

typedef struct Efuse_Device_Info_Type.conflict1 Efuse_Device_Info_Type.conflict1, *PEfuse_Device_Info_Type.conflict1;

struct Efuse_Device_Info_Type.conflict1 {
    uint32_t rsvd:22;
    uint32_t customerID:2;
    uint32_t rsvd_info:3;
    uint32_t memoryInfo:2;
    uint32_t coreInfo:1;
    uint32_t mcuInfo:1;
    uint32_t pinInfo:1;
};

typedef struct Efuse_Ana_RC32M_Trim_Type.conflict Efuse_Ana_RC32M_Trim_Type.conflict, *PEfuse_Ana_RC32M_Trim_Type.conflict;

struct Efuse_Ana_RC32M_Trim_Type.conflict {
    uint32_t trimRc32mCodeFrExt:8;
    uint32_t trimRc32mCodeFrExtParity:1;
    uint32_t trimRc32mExtCodeEn:1;
    uint32_t reserved:22;
};

typedef struct Efuse_Device_Info_Type.conflict Efuse_Device_Info_Type.conflict, *PEfuse_Device_Info_Type.conflict;

struct Efuse_Device_Info_Type.conflict {
    uint32_t rsvd:22;
    uint32_t customerID:2;
    uint32_t rsvd_info:3;
    uint32_t memoryInfo:2;
    uint32_t coreInfo:1;
    uint32_t mcuInfo:1;
    uint32_t pinInfo:1;
};

typedef struct Efuse_Ana_RC32M_Trim_Type.conflict4 Efuse_Ana_RC32M_Trim_Type.conflict4, *PEfuse_Ana_RC32M_Trim_Type.conflict4;

struct Efuse_Ana_RC32M_Trim_Type.conflict4 {
    uint32_t trimRc32mCodeFrExt:8;
    uint32_t trimRc32mCodeFrExtParity:1;
    uint32_t trimRc32mExtCodeEn:1;
    uint32_t reserved:22;
};

typedef struct Efuse_ADC_Gain_Coeff_Type.conflict Efuse_ADC_Gain_Coeff_Type.conflict, *PEfuse_ADC_Gain_Coeff_Type.conflict;

struct Efuse_ADC_Gain_Coeff_Type.conflict {
    uint32_t adcGainCoeff:12;
    uint32_t adcGainCoeffParity:1;
    uint32_t adcGainCoeffEn:1;
    uint32_t reserved:18;
};

typedef struct Efuse_Capcode_Info_Type.conflict1 Efuse_Capcode_Info_Type.conflict1, *PEfuse_Capcode_Info_Type.conflict1;

struct Efuse_Capcode_Info_Type.conflict1 {
    uint32_t capCode:6;
    uint32_t parity:1;
    uint32_t en:1;
    uint32_t rsvd:24;
};

typedef struct Efuse_Capcode_Info_Type Efuse_Capcode_Info_Type, *PEfuse_Capcode_Info_Type;

struct Efuse_Capcode_Info_Type {
    uint32_t capCode:6;
    uint32_t parity:1;
    uint32_t en:1;
    uint32_t rsvd:24;
};

typedef enum EF_Ctrl_Sign_Type {
    EF_CTRL_SIGN_ECC=2,
    EF_CTRL_SIGN_NONE=0,
    EF_CTRL_SIGN_RSA=1
} EF_Ctrl_Sign_Type;

typedef struct Efuse_TSEN_Refcode_Corner_Type Efuse_TSEN_Refcode_Corner_Type, *PEfuse_TSEN_Refcode_Corner_Type;

struct Efuse_TSEN_Refcode_Corner_Type {
    uint32_t tsenRefcodeCorner:12;
    uint32_t tsenRefcodeCornerParity:1;
    uint32_t tsenRefcodeCornerEn:1;
    uint32_t tsenRefcodeCornerVersion:1;
    uint32_t reserved:17;
};

typedef struct Efuse_ADC_Gain_Coeff_Type Efuse_ADC_Gain_Coeff_Type, *PEfuse_ADC_Gain_Coeff_Type;

struct Efuse_ADC_Gain_Coeff_Type {
    uint32_t adcGainCoeff:12;
    uint32_t adcGainCoeffParity:1;
    uint32_t adcGainCoeffEn:1;
    uint32_t reserved:18;
};

typedef struct EF_Ctrl_Sec_Param_Type EF_Ctrl_Sec_Param_Type, *PEF_Ctrl_Sec_Param_Type;

typedef enum EF_Ctrl_Dbg_Mode_Type {
    EF_CTRL_DBG_CLOSE=4,
    EF_CTRL_DBG_OPEN=0,
    EF_CTRL_DBG_PASSWORD=1
} EF_Ctrl_Dbg_Mode_Type;

struct EF_Ctrl_Sec_Param_Type {
    enum EF_Ctrl_Dbg_Mode_Type ef_dbg_mode;
    uint8_t ef_dbg_jtag_0_dis;
    uint8_t ef_sboot_en;
    uint8_t ef_no_hd_boot_en;
};

typedef struct Efuse_Capcode_Info_Type.conflict Efuse_Capcode_Info_Type.conflict, *PEfuse_Capcode_Info_Type.conflict;

struct Efuse_Capcode_Info_Type.conflict {
    uint32_t capCode:6;
    uint32_t parity:1;
    uint32_t en:1;
    uint32_t rsvd:24;
};

typedef struct Efuse_TSEN_Refcode_Corner_Type.conflict3 Efuse_TSEN_Refcode_Corner_Type.conflict3, *PEfuse_TSEN_Refcode_Corner_Type.conflict3;

struct Efuse_TSEN_Refcode_Corner_Type.conflict3 {
    uint32_t tsenRefcodeCorner:12;
    uint32_t tsenRefcodeCornerParity:1;
    uint32_t tsenRefcodeCornerEn:1;
    uint32_t tsenRefcodeCornerVersion:1;
    uint32_t reserved:17;
};

typedef struct Efuse_Ana_RC32K_Trim_Type.conflict3 Efuse_Ana_RC32K_Trim_Type.conflict3, *PEfuse_Ana_RC32K_Trim_Type.conflict3;

struct Efuse_Ana_RC32K_Trim_Type.conflict3 {
    uint32_t trimRc32kCodeFrExt:10;
    uint32_t trimRc32kCodeFrExtParity:1;
    uint32_t trimRc32kExtCodeEn:1;
    uint32_t reserved:20;
};

typedef struct Efuse_ADC_Gain_Coeff_Type.conflict3 Efuse_ADC_Gain_Coeff_Type.conflict3, *PEfuse_ADC_Gain_Coeff_Type.conflict3;

struct Efuse_ADC_Gain_Coeff_Type.conflict3 {
    uint32_t adcGainCoeff:12;
    uint32_t adcGainCoeffParity:1;
    uint32_t adcGainCoeffEn:1;
    uint32_t reserved:18;
};

typedef struct Efuse_Ana_RC32K_Trim_Type.conflict Efuse_Ana_RC32K_Trim_Type.conflict, *PEfuse_Ana_RC32K_Trim_Type.conflict;

struct Efuse_Ana_RC32K_Trim_Type.conflict {
    uint32_t trimRc32kCodeFrExt:10;
    uint32_t trimRc32kCodeFrExtParity:1;
    uint32_t trimRc32kExtCodeEn:1;
    uint32_t reserved:20;
};

typedef struct Efuse_Ana_RC32M_Trim_Type.conflict2 Efuse_Ana_RC32M_Trim_Type.conflict2, *PEfuse_Ana_RC32M_Trim_Type.conflict2;

struct Efuse_Ana_RC32M_Trim_Type.conflict2 {
    uint32_t trimRc32mCodeFrExt:8;
    uint32_t trimRc32mCodeFrExtParity:1;
    uint32_t trimRc32mExtCodeEn:1;
    uint32_t reserved:22;
};

typedef struct Efuse_Ana_RC32M_Trim_Type.conflict1 Efuse_Ana_RC32M_Trim_Type.conflict1, *PEfuse_Ana_RC32M_Trim_Type.conflict1;

struct Efuse_Ana_RC32M_Trim_Type.conflict1 {
    uint32_t trimRc32mCodeFrExt:8;
    uint32_t trimRc32mCodeFrExtParity:1;
    uint32_t trimRc32mExtCodeEn:1;
    uint32_t reserved:22;
};

typedef struct Efuse_Ana_RC32M_Trim_Type.conflict3 Efuse_Ana_RC32M_Trim_Type.conflict3, *PEfuse_Ana_RC32M_Trim_Type.conflict3;

struct Efuse_Ana_RC32M_Trim_Type.conflict3 {
    uint32_t trimRc32mCodeFrExt:8;
    uint32_t trimRc32mCodeFrExtParity:1;
    uint32_t trimRc32mExtCodeEn:1;
    uint32_t reserved:22;
};

typedef struct Efuse_Ana_RC32M_Trim_Type Efuse_Ana_RC32M_Trim_Type, *PEfuse_Ana_RC32M_Trim_Type;

struct Efuse_Ana_RC32M_Trim_Type {
    uint32_t trimRc32mCodeFrExt:8;
    uint32_t trimRc32mCodeFrExtParity:1;
    uint32_t trimRc32mExtCodeEn:1;
    uint32_t reserved:22;
};

typedef struct Efuse_TSEN_Refcode_Corner_Type.conflict1 Efuse_TSEN_Refcode_Corner_Type.conflict1, *PEfuse_TSEN_Refcode_Corner_Type.conflict1;

struct Efuse_TSEN_Refcode_Corner_Type.conflict1 {
    uint32_t tsenRefcodeCorner:12;
    uint32_t tsenRefcodeCornerParity:1;
    uint32_t tsenRefcodeCornerEn:1;
    uint32_t tsenRefcodeCornerVersion:1;
    uint32_t reserved:17;
};

typedef struct Efuse_TSEN_Refcode_Corner_Type.conflict2 Efuse_TSEN_Refcode_Corner_Type.conflict2, *PEfuse_TSEN_Refcode_Corner_Type.conflict2;

struct Efuse_TSEN_Refcode_Corner_Type.conflict2 {
    uint32_t tsenRefcodeCorner:12;
    uint32_t tsenRefcodeCornerParity:1;
    uint32_t tsenRefcodeCornerEn:1;
    uint32_t tsenRefcodeCornerVersion:1;
    uint32_t reserved:17;
};

typedef struct Efuse_Ana_RC32K_Trim_Type.conflict6 Efuse_Ana_RC32K_Trim_Type.conflict6, *PEfuse_Ana_RC32K_Trim_Type.conflict6;

struct Efuse_Ana_RC32K_Trim_Type.conflict6 {
    uint32_t trimRc32kCodeFrExt:10;
    uint32_t trimRc32kCodeFrExtParity:1;
    uint32_t trimRc32kExtCodeEn:1;
    uint32_t reserved:20;
};

typedef struct Efuse_Device_Info_Type Efuse_Device_Info_Type, *PEfuse_Device_Info_Type;

struct Efuse_Device_Info_Type {
    uint32_t rsvd:22;
    uint32_t customerID:2;
    uint32_t rsvd_info:3;
    uint32_t memoryInfo:2;
    uint32_t coreInfo:1;
    uint32_t mcuInfo:1;
    uint32_t pinInfo:1;
};

typedef enum EF_Ctrl_SF_AES_Type {
    EF_CTRL_SF_AES_128=1,
    EF_CTRL_SF_AES_192=2,
    EF_CTRL_SF_AES_256=3,
    EF_CTRL_SF_AES_NONE=0
} EF_Ctrl_SF_AES_Type;

typedef struct Efuse_Ana_RC32K_Trim_Type.conflict5 Efuse_Ana_RC32K_Trim_Type.conflict5, *PEfuse_Ana_RC32K_Trim_Type.conflict5;

struct Efuse_Ana_RC32K_Trim_Type.conflict5 {
    uint32_t trimRc32kCodeFrExt:10;
    uint32_t trimRc32kCodeFrExtParity:1;
    uint32_t trimRc32kExtCodeEn:1;
    uint32_t reserved:20;
};

typedef struct Efuse_Ana_RC32K_Trim_Type.conflict4 Efuse_Ana_RC32K_Trim_Type.conflict4, *PEfuse_Ana_RC32K_Trim_Type.conflict4;

struct Efuse_Ana_RC32K_Trim_Type.conflict4 {
    uint32_t trimRc32kCodeFrExt:10;
    uint32_t trimRc32kCodeFrExtParity:1;
    uint32_t trimRc32kExtCodeEn:1;
    uint32_t reserved:20;
};

typedef struct Efuse_Ana_RC32K_Trim_Type.conflict2 Efuse_Ana_RC32K_Trim_Type.conflict2, *PEfuse_Ana_RC32K_Trim_Type.conflict2;

struct Efuse_Ana_RC32K_Trim_Type.conflict2 {
    uint32_t trimRc32kCodeFrExt:10;
    uint32_t trimRc32kCodeFrExtParity:1;
    uint32_t trimRc32kExtCodeEn:1;
    uint32_t reserved:20;
};

typedef struct Efuse_Ana_RC32K_Trim_Type.conflict1 Efuse_Ana_RC32K_Trim_Type.conflict1, *PEfuse_Ana_RC32K_Trim_Type.conflict1;

struct Efuse_Ana_RC32K_Trim_Type.conflict1 {
    uint32_t trimRc32kCodeFrExt:10;
    uint32_t trimRc32kCodeFrExtParity:1;
    uint32_t trimRc32kExtCodeEn:1;
    uint32_t reserved:20;
};

typedef struct Efuse_ADC_Gain_Coeff_Type.conflict2 Efuse_ADC_Gain_Coeff_Type.conflict2, *PEfuse_ADC_Gain_Coeff_Type.conflict2;

struct Efuse_ADC_Gain_Coeff_Type.conflict2 {
    uint32_t adcGainCoeff:12;
    uint32_t adcGainCoeffParity:1;
    uint32_t adcGainCoeffEn:1;
    uint32_t reserved:18;
};

typedef struct Efuse_Ana_RC32K_Trim_Type Efuse_Ana_RC32K_Trim_Type, *PEfuse_Ana_RC32K_Trim_Type;

struct Efuse_Ana_RC32K_Trim_Type {
    uint32_t trimRc32kCodeFrExt:10;
    uint32_t trimRc32kCodeFrExtParity:1;
    uint32_t trimRc32kExtCodeEn:1;
    uint32_t reserved:20;
};

typedef struct Efuse_ADC_Gain_Coeff_Type.conflict1 Efuse_ADC_Gain_Coeff_Type.conflict1, *PEfuse_ADC_Gain_Coeff_Type.conflict1;

struct Efuse_ADC_Gain_Coeff_Type.conflict1 {
    uint32_t adcGainCoeff:12;
    uint32_t adcGainCoeffParity:1;
    uint32_t adcGainCoeffEn:1;
    uint32_t reserved:18;
};

typedef struct anon_struct.conflict5 anon_struct.conflict5, *Panon_struct.conflict5;

struct anon_struct.conflict5 {
    uint8_t priority;
    uint8_t id_dst;
    uint8_t id_msg;
    uint8_t id_src;
};

typedef struct anon_struct.conflict4 anon_struct.conflict4, *Panon_struct.conflict4;

struct anon_struct.conflict4 {
    uint8_t priority;
    uint8_t id_dst;
    uint8_t id_msg;
    uint8_t id_src;
};

typedef struct anon_struct.conflict3 anon_struct.conflict3, *Panon_struct.conflict3;

struct anon_struct.conflict3 {
    uint8_t priority;
    uint8_t id_dst;
    uint8_t id_msg;
    uint8_t id_src;
};

typedef struct anon_struct.conflict117 anon_struct.conflict117, *Panon_struct.conflict117;

struct anon_struct.conflict117 {
    uint8_t priority;
    uint8_t id_dst;
    uint8_t id_msg;
    uint8_t id_src;
};

typedef union anon_union.conflict2 anon_union.conflict2, *Panon_union.conflict2;

union anon_union.conflict2 {
    void * container;
    struct anon_struct.conflict4 header;
};

typedef struct xSTATIC_QUEUE xSTATIC_QUEUE, *PxSTATIC_QUEUE;


// WARNING! conflicting data type names: /DWARF/FreeRTOS.h/xSTATIC_QUEUE/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u

struct xSTATIC_QUEUE {
    void * pvDummy1[3];
    union anon_union_for_u u;
    StaticList_t xDummy3[2];
    UBaseType_t uxDummy4[3];
    uint8_t ucDummy5[2];
    uint8_t ucDummy6;
    undefined field_0x47;
    UBaseType_t uxDummy8;
    uint8_t ucDummy9;
    undefined field_0x4d;
    undefined field_0x4e;
    undefined field_0x4f;
};

typedef struct xSTATIC_QUEUE StaticQueue_t;

typedef StaticQueue_t StaticSemaphore_t;

typedef union anon_union.conflict5 anon_union.conflict5, *Panon_union.conflict5;

union anon_union.conflict5 {
    void * pvDummy2;
    UBaseType_t uxDummy2;
};

typedef union anon_union.conflict7 anon_union.conflict7, *Panon_union.conflict7;

union anon_union.conflict7 {
    void * pvDummy2;
    UBaseType_t uxDummy2;
};

typedef struct bt_l2cap_cmd_reject bt_l2cap_cmd_reject, *Pbt_l2cap_cmd_reject;

struct bt_l2cap_cmd_reject {
    u16_t reason;
    u8_t[0] data;
};

typedef struct bt_l2cap_disconn_rsp bt_l2cap_disconn_rsp, *Pbt_l2cap_disconn_rsp;

struct bt_l2cap_disconn_rsp {
    u16_t dcid;
    u16_t scid;
};

typedef struct bt_l2cap_disconn_req bt_l2cap_disconn_req, *Pbt_l2cap_disconn_req;

struct bt_l2cap_disconn_req {
    u16_t dcid;
    u16_t scid;
};

typedef struct bt_l2cap_cmd_reject_cid_data bt_l2cap_cmd_reject_cid_data, *Pbt_l2cap_cmd_reject_cid_data;

struct bt_l2cap_cmd_reject_cid_data {
    u16_t scid;
    u16_t dcid;
};

typedef struct bt_l2cap_sig_hdr bt_l2cap_sig_hdr, *Pbt_l2cap_sig_hdr;

struct bt_l2cap_sig_hdr {
    u8_t code;
    u8_t ident;
    u16_t len;
};

typedef struct bt_l2cap_fixed_chan bt_l2cap_fixed_chan, *Pbt_l2cap_fixed_chan;

struct bt_l2cap_fixed_chan {
    u16_t cid;
    undefined field_0x2;
    undefined field_0x3;
    int (* accept)(struct bt_conn *, struct bt_l2cap_chan * *);
    sys_snode_t node;
};

typedef struct bt_l2cap_conn_param_rsp bt_l2cap_conn_param_rsp, *Pbt_l2cap_conn_param_rsp;

struct bt_l2cap_conn_param_rsp {
    u16_t result;
};

typedef struct bt_l2cap_le_conn_req bt_l2cap_le_conn_req, *Pbt_l2cap_le_conn_req;

struct bt_l2cap_le_conn_req {
    u16_t psm;
    u16_t scid;
    u16_t mtu;
    u16_t mps;
    u16_t credits;
};

typedef struct bt_l2cap_conn_param_req bt_l2cap_conn_param_req, *Pbt_l2cap_conn_param_req;

struct bt_l2cap_conn_param_req {
    u16_t min_interval;
    u16_t max_interval;
    u16_t latency;
    u16_t timeout;
};

typedef struct bt_l2cap_le_credits bt_l2cap_le_credits, *Pbt_l2cap_le_credits;

struct bt_l2cap_le_credits {
    u16_t cid;
    u16_t credits;
};

typedef struct bt_l2cap_le_conn_rsp bt_l2cap_le_conn_rsp, *Pbt_l2cap_le_conn_rsp;

struct bt_l2cap_le_conn_rsp {
    u16_t dcid;
    u16_t mtu;
    u16_t mps;
    u16_t credits;
    u16_t result;
};

typedef struct bt_l2cap_hdr bt_l2cap_hdr, *Pbt_l2cap_hdr;

struct bt_l2cap_hdr {
    u16_t len;
    u16_t cid;
};

typedef struct aos_hdl_t aos_hdl_t, *Paos_hdl_t;

typedef struct aos_hdl_t aos_timer_t;

struct aos_hdl_t {
    void * hdl;
};

typedef struct aos_hdl_t aos_queue_t;

typedef uint aos_task_key_t;

typedef struct aos_hdl_t aos_sem_t;

typedef struct aos_hdl_t aos_task_t;

typedef struct aos_hdl_t aos_mutex_t;

typedef struct aos_hdl_t aos_work_t;

typedef struct aos_workqueue_t aos_workqueue_t, *Paos_workqueue_t;

struct aos_workqueue_t {
    void * hdl;
    void * stk;
};

typedef enum lld_evt_defer_type {
    LLD_DEFER_CON_UP_INSTANT=3,
    LLD_DEFER_END=1,
    LLD_DEFER_MAP_UP_INSTANT=4,
    LLD_DEFER_MAX=5,
    LLD_DEFER_RX=0,
    LLD_DEFER_TEST_END=2
} lld_evt_defer_type;

typedef struct ke_msg.conflict ke_msg.conflict, *Pke_msg.conflict;

struct ke_msg.conflict {
    struct co_list_hdr hdr;
    ke_msg_id_t id;
    ke_task_id_t dest_id;
    ke_task_id_t src_id;
    uint16_t param_len;
    uint32_t[0] param;
};

typedef uint16_t ke_state_t.conflict31;

typedef uint16_t ke_state_t.conflict25;

typedef uint16_t ke_state_t.conflict47;

typedef uint8_t ke_state_t;

typedef uint16_t ke_state_t.conflict19;

typedef uint16_t ke_state_t.conflict4;

typedef struct ke_msg.conflict8 ke_msg.conflict8, *Pke_msg.conflict8;

struct ke_msg.conflict8 {
    struct co_list_hdr hdr;
    ke_msg_id_t id;
    ke_task_id_t dest_id;
    ke_task_id_t src_id;
    uint16_t param_len;
    uint32_t[0] param;
};

typedef struct ke_msg.conflict9 ke_msg.conflict9, *Pke_msg.conflict9;

struct ke_msg.conflict9 {
    struct co_list_hdr hdr;
    ke_msg_id_t id;
    ke_task_id_t dest_id;
    ke_task_id_t src_id;
    uint16_t param_len;
    uint32_t[0] param;
};

typedef struct ke_msg.conflict4 ke_msg.conflict4, *Pke_msg.conflict4;

struct ke_msg.conflict4 {
    struct co_list_hdr hdr;
    ke_msg_id_t id;
    ke_task_id_t dest_id;
    ke_task_id_t src_id;
    uint16_t param_len;
    uint32_t[0] param;
};

typedef struct ke_msg.conflict5 ke_msg.conflict5, *Pke_msg.conflict5;

struct ke_msg.conflict5 {
    struct co_list_hdr hdr;
    ke_msg_id_t id;
    ke_task_id_t dest_id;
    ke_task_id_t src_id;
    uint16_t param_len;
    uint32_t[0] param;
};

typedef struct ke_msg.conflict6 ke_msg.conflict6, *Pke_msg.conflict6;

struct ke_msg.conflict6 {
    struct co_list_hdr hdr;
    ke_msg_id_t id;
    ke_task_id_t dest_id;
    ke_task_id_t src_id;
    uint16_t param_len;
    uint32_t[0] param;
};

typedef struct ke_msg.conflict7 ke_msg.conflict7, *Pke_msg.conflict7;

struct ke_msg.conflict7 {
    struct co_list_hdr hdr;
    ke_msg_id_t id;
    ke_task_id_t dest_id;
    ke_task_id_t src_id;
    uint16_t param_len;
    uint32_t[0] param;
};

typedef struct ke_msg.conflict1 ke_msg.conflict1, *Pke_msg.conflict1;

struct ke_msg.conflict1 {
    struct co_list_hdr hdr;
    ke_msg_id_t id;
    ke_task_id_t dest_id;
    ke_task_id_t src_id;
    uint16_t param_len;
    uint32_t[0] param;
};

typedef struct ke_msg.conflict2 ke_msg.conflict2, *Pke_msg.conflict2;

struct ke_msg.conflict2 {
    struct co_list_hdr hdr;
    ke_msg_id_t id;
    ke_task_id_t dest_id;
    ke_task_id_t src_id;
    uint16_t param_len;
    uint32_t[0] param;
};

typedef struct ke_msg.conflict3 ke_msg.conflict3, *Pke_msg.conflict3;

struct ke_msg.conflict3 {
    struct co_list_hdr hdr;
    ke_msg_id_t id;
    ke_task_id_t dest_id;
    ke_task_id_t src_id;
    uint16_t param_len;
    uint32_t[0] param;
};

typedef uint16_t ke_state_t.conflict21;

typedef uint16_t ke_state_t.conflict14;

typedef enum ke_msg_status_tag {
    KE_MSG_CONSUMED=0,
    KE_MSG_NO_FREE=1,
    KE_MSG_SAVED=2
} ke_msg_status_tag;

typedef uint16_t ke_state_t.conflict2;

typedef uint16_t ke_state_t.conflict1;

typedef uint16_t ke_state_t.conflict6;

typedef uint16_t ke_state_t.conflict5;

typedef uint16_t ke_state_t.conflict3;

typedef uint16_t ke_state_t.conflict9;

typedef uint16_t ke_state_t.conflict8;

typedef uint16_t ke_state_t.conflict7;

typedef uint16_t ke_state_t.conflict37;

typedef uint16_t ke_state_t.conflict43;

typedef struct ke_msg.conflict11 ke_msg.conflict11, *Pke_msg.conflict11;

struct ke_msg.conflict11 {
    struct co_list_hdr hdr;
    ke_msg_id_t id;
    ke_task_id_t dest_id;
    ke_task_id_t src_id;
    uint16_t param_len;
    uint32_t[0] param;
};

typedef struct ke_msg.conflict10 ke_msg.conflict10, *Pke_msg.conflict10;

struct ke_msg.conflict10 {
    struct co_list_hdr hdr;
    ke_msg_id_t id;
    ke_task_id_t dest_id;
    ke_task_id_t src_id;
    uint16_t param_len;
    uint32_t[0] param;
};

typedef uint16_t ke_state_t.conflict39;

typedef uint16_t ke_state_t.conflict45;

typedef uint16_t ke_state_t.conflict10;

typedef uint16_t ke_state_t.conflict46;

typedef uint16_t ke_state_t.conflict27;

typedef uint16_t ke_state_t.conflict16;

typedef uint16_t ke_state_t.conflict33;

typedef uint16_t ke_state_t.conflict20;

typedef uint16_t ke_state_t.conflict22;

typedef uint16_t ke_state_t.conflict17;

typedef uint16_t ke_state_t.conflict18;

typedef uint16_t ke_state_t.conflict13;

typedef uint16_t ke_state_t.conflict12;

typedef uint16_t ke_state_t.conflict15;

typedef uint16_t ke_state_t.conflict11;

typedef uint16_t ke_state_t.conflict29;

typedef uint16_t ke_state_t.conflict41;

typedef uint16_t ke_state_t.conflict35;

typedef uint16_t ke_state_t.conflict42;

typedef uint16_t ke_state_t.conflict44;

typedef uint16_t ke_state_t.conflict40;

typedef uint16_t ke_state_t.conflict38;

typedef uint16_t ke_state_t.conflict34;

typedef uint16_t ke_state_t.conflict36;

typedef uint16_t ke_state_t.conflict30;

typedef uint16_t ke_state_t.conflict32;

typedef uint16_t ke_state_t.conflict23;

typedef uint16_t ke_state_t.conflict28;

typedef uint16_t ke_state_t.conflict24;

typedef uint16_t ke_state_t.conflict26;

typedef enum CFG_ELEMENT_TYPE {
    CFG_ELEMENT_TYPE_BOOLEAN=1,
    CFG_ELEMENT_TYPE_SINT16=4,
    CFG_ELEMENT_TYPE_SINT32=6,
    CFG_ELEMENT_TYPE_SINT8=2,
    CFG_ELEMENT_TYPE_STRING=8,
    CFG_ELEMENT_TYPE_UINT16=5,
    CFG_ELEMENT_TYPE_UINT32=7,
    CFG_ELEMENT_TYPE_UINT8=3,
    CFG_ELEMENT_TYPE_UNKNOWN=0
} CFG_ELEMENT_TYPE;

typedef struct RSNConfig_t RSNConfig_t, *PRSNConfig_t;

typedef struct AkmSuite_t AkmSuite_t, *PAkmSuite_t;

typedef enum AkmType_e {
    AKM_1X=1,
    AKM_CCKM=99,
    AKM_FT_1X=3,
    AKM_FT_PSK=4,
    AKM_NONE=0,
    AKM_PSK=2,
    AKM_RSN_MAX=6,
    AKM_SHA256_1X=5,
    AKM_SHA256_PSK=6,
    AKM_SUITE_MAX=5,
    AKM_TDLS=7,
    AKM_WPA_MAX=2
} AkmType_e;

typedef enum AkmType_e AkmTypePacked_e;

struct AkmSuite_t {
    UINT8 akmOui[3];
    AkmTypePacked_e akmType;
};

struct RSNConfig_t {
    UINT8 RSNEnabled:1;
    UINT8 pmkidValid:1;
    UINT8 rsnCapValid:1;
    UINT8 grpMgmtCipherValid:1;
    UINT8 rsvd:4;
    struct SecurityMode_t wpaType;
    struct Cipher_t.conflict mcstCipher;
    struct Cipher_t.conflict ucstCipher;
    struct AkmSuite_t AKM;
    UINT8 PMKID[16];
    struct IEEEtypes_RSNCapability_t rsnCap;
    struct Cipher_t.conflict grpMgmtCipher;
};

typedef enum ADC_Data_Width_Type {
    ADC_DATA_WIDTH_12=0,
    ADC_DATA_WIDTH_14_WITH_16_AVERAGE=1,
    ADC_DATA_WIDTH_16_WITH_128_AVERAGE=3,
    ADC_DATA_WIDTH_16_WITH_256_AVERAGE=4,
    ADC_DATA_WIDTH_16_WITH_64_AVERAGE=2
} ADC_Data_Width_Type;

typedef enum ADC_Chan_Type {
    ADC_CHAN0=0,
    ADC_CHAN1=1,
    ADC_CHAN10=10,
    ADC_CHAN11=11,
    ADC_CHAN2=2,
    ADC_CHAN3=3,
    ADC_CHAN4=4,
    ADC_CHAN5=5,
    ADC_CHAN6=6,
    ADC_CHAN7=7,
    ADC_CHAN8=8,
    ADC_CHAN9=9,
    ADC_CHAN_DAC_OUTA=12,
    ADC_CHAN_DAC_OUTB=13,
    ADC_CHAN_DCTEST=17,
    ADC_CHAN_GND=23,
    ADC_CHAN_SENP0=22,
    ADC_CHAN_SENP1=21,
    ADC_CHAN_SENP2=20,
    ADC_CHAN_SENP3=19,
    ADC_CHAN_TSEN_N=15,
    ADC_CHAN_TSEN_P=14,
    ADC_CHAN_VABT_HALF=18,
    ADC_CHAN_VREF=16
} ADC_Chan_Type;

typedef enum ADC_INT_Type {
    ADC_INT_ADC_READY=4,
    ADC_INT_ALL=5,
    ADC_INT_FIFO_OVERRUN=3,
    ADC_INT_FIFO_UNDERRUN=2,
    ADC_INT_NEG_SATURATION=1,
    ADC_INT_POS_SATURATION=0
} ADC_INT_Type;

typedef struct ADC_Result_Type ADC_Result_Type, *PADC_Result_Type;

struct ADC_Result_Type {
    int8_t posChan;
    int8_t negChan;
    uint16_t value;
    float volt;
};

typedef enum ADC_V18_SEL_Type {
    ADC_V18_SEL_1P62V=0,
    ADC_V18_SEL_1P72V=1,
    ADC_V18_SEL_1P82V=2,
    ADC_V18_SEL_1P92V=3
} ADC_V18_SEL_Type;

typedef enum ADC_PGA_GAIN_Type {
    ADC_PGA_GAIN_1=1,
    ADC_PGA_GAIN_16=5,
    ADC_PGA_GAIN_2=2,
    ADC_PGA_GAIN_32=6,
    ADC_PGA_GAIN_4=3,
    ADC_PGA_GAIN_8=4,
    ADC_PGA_GAIN_NONE=0
} ADC_PGA_GAIN_Type;

typedef struct ADC_CFG_Type ADC_CFG_Type, *PADC_CFG_Type;

typedef enum ADC_V11_SEL_Type {
    ADC_V11_SEL_1P0V=0,
    ADC_V11_SEL_1P18V=2,
    ADC_V11_SEL_1P1V=1,
    ADC_V11_SEL_1P26V=3
} ADC_V11_SEL_Type;

typedef enum ADC_CLK_Type {
    ADC_CLK_DIV_1=0,
    ADC_CLK_DIV_12=3,
    ADC_CLK_DIV_16=4,
    ADC_CLK_DIV_20=5,
    ADC_CLK_DIV_24=6,
    ADC_CLK_DIV_32=7,
    ADC_CLK_DIV_4=1,
    ADC_CLK_DIV_8=2
} ADC_CLK_Type;

typedef enum ADC_CHOP_MOD_Type {
    ADC_CHOP_MOD_ALL_OFF=0,
    ADC_CHOP_MOD_AZ_ON=1,
    ADC_CHOP_MOD_AZ_PGA_ON=2,
    ADC_CHOP_MOD_AZ_PGA_RPC_ON=3
} ADC_CHOP_MOD_Type;

typedef enum ADC_BIAS_SEL_Type {
    ADC_BIAS_SEL_AON_BANDGAP=1,
    ADC_BIAS_SEL_MAIN_BANDGAP=0
} ADC_BIAS_SEL_Type;

typedef enum ADC_PGA_VCM_Type {
    ADC_PGA_VCM_1P2V=1,
    ADC_PGA_VCM_1P4V=2,
    ADC_PGA_VCM_1P6V=3,
    ADC_PGA_VCM_1V=0
} ADC_PGA_VCM_Type;

typedef enum ADC_VREF_Type {
    ADC_VREF_2V=1,
    ADC_VREF_3P2V=0
} ADC_VREF_Type;

typedef enum ADC_SIG_INPUT_Type {
    ADC_INPUT_DIFF=1,
    ADC_INPUT_SINGLE_END=0
} ADC_SIG_INPUT_Type;

struct ADC_CFG_Type {
    enum ADC_V18_SEL_Type v18Sel;
    enum ADC_V11_SEL_Type v11Sel;
    enum ADC_CLK_Type clkDiv;
    enum ADC_PGA_GAIN_Type gain1;
    enum ADC_PGA_GAIN_Type gain2;
    enum ADC_CHOP_MOD_Type chopMode;
    enum ADC_BIAS_SEL_Type biasSel;
    enum ADC_PGA_VCM_Type vcm;
    enum ADC_VREF_Type vref;
    enum ADC_SIG_INPUT_Type inputMode;
    enum ADC_Data_Width_Type resWidth;
    enum BL_Fun_Type offsetCalibEn;
    int16_t offsetCalibVal;
};

typedef struct ADC_MIC_Type ADC_MIC_Type, *PADC_MIC_Type;

typedef enum ADC_MICBOOST_DB_Type {
    ADC_MICBOOST_DB_16DB=0,
    ADC_MICBOOST_DB_32DB=1
} ADC_MICBOOST_DB_Type;

typedef enum ADC_PGA2_GAIN_Type {
    ADC_PGA2_GAIN_0DB=0,
    ADC_PGA2_GAIN_12DB=3,
    ADC_PGA2_GAIN_6DB=1,
    ADC_PGA2_GAIN_N6DB=2
} ADC_PGA2_GAIN_Type;

typedef enum ADC_MIC_MODE_Type {
    ADC_MIC_MODE_DIFF=1,
    ADC_MIC_MODE_SINGLE=0
} ADC_MIC_MODE_Type;

struct ADC_MIC_Type {
    enum ADC_MICBOOST_DB_Type micboostDb;
    enum ADC_PGA2_GAIN_Type micPga2Gain;
    enum ADC_MIC_MODE_Type mic1Mode;
    enum ADC_MIC_MODE_Type mic2Mode;
    enum BL_Fun_Type dwaEn;
    enum BL_Fun_Type micboostBypassEn;
    enum BL_Fun_Type micPgaEn;
    enum BL_Fun_Type micBiasEn;
};

typedef struct ADC_Gain_Coeff_Type ADC_Gain_Coeff_Type, *PADC_Gain_Coeff_Type;

struct ADC_Gain_Coeff_Type {
    enum BL_Fun_Type adcGainCoeffEnable;
    undefined field_0x1;
    uint16_t adcgainCoeffVal;
    float coe;
};

typedef enum ADC_TSEN_MOD_Type {
    ADC_TSEN_MOD_EXTERNAL_DIODE=1,
    ADC_TSEN_MOD_INTERNAL_DIODE=0
} ADC_TSEN_MOD_Type;

typedef struct ADC_FIFO_Cfg_Type ADC_FIFO_Cfg_Type, *PADC_FIFO_Cfg_Type;

typedef enum ADC_FIFO_Threshold_Type {
    ADC_FIFO_THRESHOLD_1=0,
    ADC_FIFO_THRESHOLD_16=3,
    ADC_FIFO_THRESHOLD_4=1,
    ADC_FIFO_THRESHOLD_8=2
} ADC_FIFO_Threshold_Type;

struct ADC_FIFO_Cfg_Type {
    enum ADC_FIFO_Threshold_Type fifoThreshold;
    enum BL_Fun_Type dmaEn;
};

typedef struct anon_struct.conflict218 anon_struct.conflict218, *Panon_struct.conflict218;

struct anon_struct.conflict218 {
    uint32_t index;
    int32_t dvga;
};

typedef struct anon_struct.conflict219 anon_struct.conflict219, *Panon_struct.conflict219;

struct anon_struct.conflict219 {
    uint32_t index;
    int32_t dvga;
};

typedef struct anon_struct.conflict220 anon_struct.conflict220, *Panon_struct.conflict220;

struct anon_struct.conflict220 {
    uint32_t notch_en;
    int32_t spur_freq;
};

typedef struct anon_struct.conflict221 anon_struct.conflict221, *Panon_struct.conflict221;

struct anon_struct.conflict221 {
    uint32_t notch_en;
    int32_t spur_freq;
};

typedef struct anon_struct.conflict222 anon_struct.conflict222, *Panon_struct.conflict222;

struct anon_struct.conflict222 {
    uint32_t vbcore;
    uint32_t iet;
    uint32_t vbcore_11n;
    uint32_t iet_11n;
    uint32_t vbcore_11g;
    uint32_t iet_11g;
    uint32_t vbcore_11b;
    uint32_t iet_11b;
    uint32_t lo_fbdv_halfstep_en;
    uint32_t lo_fbdv_halfstep_en_tx;
    uint32_t lo_fbdv_halfstep_en_rx;
    uint32_t clkpll_reset_postdiv;
    uint32_t clkpll_dither_sel;
};

typedef struct anon_struct.conflict223 anon_struct.conflict223, *Panon_struct.conflict223;

struct anon_struct.conflict223 {
    uint32_t vbcore;
    uint32_t iet;
    uint32_t vbcore_11n;
    uint32_t iet_11n;
    uint32_t vbcore_11g;
    uint32_t iet_11g;
    uint32_t vbcore_11b;
    uint32_t iet_11b;
    uint32_t lo_fbdv_halfstep_en;
    uint32_t lo_fbdv_halfstep_en_tx;
    uint32_t lo_fbdv_halfstep_en_rx;
    uint32_t clkpll_reset_postdiv;
    uint32_t clkpll_dither_sel;
};

typedef struct regs_to_opti regs_to_opti, *Pregs_to_opti;

struct regs_to_opti {
    uint32_t vbcore;
    uint32_t iet;
    uint32_t vbcore_11n;
    uint32_t iet_11n;
    uint32_t vbcore_11g;
    uint32_t iet_11g;
    uint32_t vbcore_11b;
    uint32_t iet_11b;
    uint32_t lo_fbdv_halfstep_en;
    uint32_t lo_fbdv_halfstep_en_tx;
    uint32_t lo_fbdv_halfstep_en_rx;
    uint32_t clkpll_reset_postdiv;
    uint32_t clkpll_dither_sel;
};

typedef struct notch_param notch_param, *Pnotch_param;

struct notch_param {
    uint32_t notch_en;
    int32_t spur_freq;
};

typedef struct anon_struct.conflict158 anon_struct.conflict158, *Panon_struct.conflict158;

struct anon_struct.conflict158 {
    uint32_t index;
    int32_t dvga;
};

typedef struct anon_struct.conflict159 anon_struct.conflict159, *Panon_struct.conflict159;

struct anon_struct.conflict159 {
    uint32_t notch_en;
    int32_t spur_freq;
};

typedef struct tx_pwr_index tx_pwr_index, *Ptx_pwr_index;

struct tx_pwr_index {
    uint32_t index;
    int32_t dvga;
};

typedef struct anon_struct.conflict160 anon_struct.conflict160, *Panon_struct.conflict160;

struct anon_struct.conflict160 {
    uint32_t vbcore;
    uint32_t iet;
    uint32_t vbcore_11n;
    uint32_t iet_11n;
    uint32_t vbcore_11g;
    uint32_t iet_11g;
    uint32_t vbcore_11b;
    uint32_t iet_11b;
    uint32_t lo_fbdv_halfstep_en;
    uint32_t lo_fbdv_halfstep_en_tx;
    uint32_t lo_fbdv_halfstep_en_rx;
    uint32_t clkpll_reset_postdiv;
    uint32_t clkpll_dither_sel;
};

typedef struct anon_struct.conflict204 anon_struct.conflict204, *Panon_struct.conflict204;

struct anon_struct.conflict204 {
    uint32_t index;
    int32_t dvga;
};

typedef struct anon_struct.conflict205 anon_struct.conflict205, *Panon_struct.conflict205;

struct anon_struct.conflict205 {
    uint32_t index;
    int32_t dvga;
};

typedef struct anon_struct.conflict206 anon_struct.conflict206, *Panon_struct.conflict206;

struct anon_struct.conflict206 {
    uint32_t notch_en;
    int32_t spur_freq;
};

typedef struct anon_struct.conflict207 anon_struct.conflict207, *Panon_struct.conflict207;

struct anon_struct.conflict207 {
    uint32_t notch_en;
    int32_t spur_freq;
};

typedef struct anon_struct.conflict208 anon_struct.conflict208, *Panon_struct.conflict208;

struct anon_struct.conflict208 {
    uint32_t vbcore;
    uint32_t iet;
    uint32_t vbcore_11n;
    uint32_t iet_11n;
    uint32_t vbcore_11g;
    uint32_t iet_11g;
    uint32_t vbcore_11b;
    uint32_t iet_11b;
    uint32_t lo_fbdv_halfstep_en;
    uint32_t lo_fbdv_halfstep_en_tx;
    uint32_t lo_fbdv_halfstep_en_rx;
    uint32_t clkpll_reset_postdiv;
    uint32_t clkpll_dither_sel;
};

typedef struct anon_struct.conflict209 anon_struct.conflict209, *Panon_struct.conflict209;

struct anon_struct.conflict209 {
    uint32_t vbcore;
    uint32_t iet;
    uint32_t vbcore_11n;
    uint32_t iet_11n;
    uint32_t vbcore_11g;
    uint32_t iet_11g;
    uint32_t vbcore_11b;
    uint32_t iet_11b;
    uint32_t lo_fbdv_halfstep_en;
    uint32_t lo_fbdv_halfstep_en_tx;
    uint32_t lo_fbdv_halfstep_en_rx;
    uint32_t clkpll_reset_postdiv;
    uint32_t clkpll_dither_sel;
};

typedef struct anon_struct.conflict213 anon_struct.conflict213, *Panon_struct.conflict213;

struct anon_struct.conflict213 {
    uint32_t notch_en;
    int32_t spur_freq;
};

typedef struct anon_struct.conflict214 anon_struct.conflict214, *Panon_struct.conflict214;

struct anon_struct.conflict214 {
    uint32_t vbcore;
    uint32_t iet;
    uint32_t vbcore_11n;
    uint32_t iet_11n;
    uint32_t vbcore_11g;
    uint32_t iet_11g;
    uint32_t vbcore_11b;
    uint32_t iet_11b;
    uint32_t lo_fbdv_halfstep_en;
    uint32_t lo_fbdv_halfstep_en_tx;
    uint32_t lo_fbdv_halfstep_en_rx;
    uint32_t clkpll_reset_postdiv;
    uint32_t clkpll_dither_sel;
};

typedef struct anon_struct.conflict215 anon_struct.conflict215, *Panon_struct.conflict215;

struct anon_struct.conflict215 {
    uint32_t vbcore;
    uint32_t iet;
    uint32_t vbcore_11n;
    uint32_t iet_11n;
    uint32_t vbcore_11g;
    uint32_t iet_11g;
    uint32_t vbcore_11b;
    uint32_t iet_11b;
    uint32_t lo_fbdv_halfstep_en;
    uint32_t lo_fbdv_halfstep_en_tx;
    uint32_t lo_fbdv_halfstep_en_rx;
    uint32_t clkpll_reset_postdiv;
    uint32_t clkpll_dither_sel;
};

typedef struct anon_struct.conflict210 anon_struct.conflict210, *Panon_struct.conflict210;

struct anon_struct.conflict210 {
    uint32_t index;
    int32_t dvga;
};

typedef struct anon_struct.conflict211 anon_struct.conflict211, *Panon_struct.conflict211;

struct anon_struct.conflict211 {
    uint32_t index;
    int32_t dvga;
};

typedef struct anon_struct.conflict212 anon_struct.conflict212, *Panon_struct.conflict212;

struct anon_struct.conflict212 {
    uint32_t notch_en;
    int32_t spur_freq;
};

typedef enum __fdlibm_version {
    __fdlibm_ieee=-1,
    __fdlibm_posix=0
} __fdlibm_version;

typedef struct HWStateMachineReg.conflict HWStateMachineReg.conflict, *PHWStateMachineReg.conflict;

struct HWStateMachineReg.conflict {
    uint32_t rxControl:6;
    uint32_t reserved_7_6:2;
    uint32_t txControl:9;
    uint32_t reserved_23_17:7;
    uint32_t macControl:8;
};

typedef struct HWStateMachineReg HWStateMachineReg, *PHWStateMachineReg;

struct HWStateMachineReg {
    uint32_t rxControl:6;
    uint32_t reserved_7_6:2;
    uint32_t txControl:9;
    uint32_t reserved_23_17:7;
    uint32_t macControl:8;
};

typedef struct dump_data_t dump_data_t, *Pdump_data_t;

struct dump_data_t {
    uint32_t time;
    char * func_name;
    uint32_t rc_state;
    uint32_t rf_state;
    uint32_t mac_debugRegHWSM1;
    uint32_t mac_debugRegHWSM2;
    uint16_t mac_debugPortCoex;
    uint16_t mac_debugPortBackoff;
    uint16_t mac_debugPortMacPhyIf;
    uint16_t mac_debugPortMacPhyIf2;
    uint16_t phy_debugPortMainFSM;
    uint16_t phy_debugPortTDTX;
    uint16_t phy_debugPortDSSSCCK1;
    uint16_t phy_debugPortDSSSCCKTx;
};

typedef struct bt_bond_info bt_bond_info, *Pbt_bond_info;

struct bt_bond_info {
    struct bt_addr_le_t addr;
};

typedef struct bt_le_adv_param bt_le_adv_param, *Pbt_le_adv_param;

struct bt_le_adv_param {
    u8_t id;
    u8_t options;
    u16_t interval_min;
    u16_t interval_max;
};

typedef struct bt_le_scan_param bt_le_scan_param, *Pbt_le_scan_param;

struct bt_le_scan_param {
    u8_t type;
    u8_t filter_dup;
    u16_t interval;
    u16_t window;
};

typedef struct bt_le_oob bt_le_oob, *Pbt_le_oob;

struct bt_le_oob {
    struct bt_addr_le_t addr;
    struct bt_le_oob_sc_data le_sc_data;
};

typedef enum PtTable_ID_Type {
    PT_TABLE_ID_0=0,
    PT_TABLE_ID_1=1,
    PT_TABLE_ID_INVALID=2
} PtTable_ID_Type;

typedef enum PtTable_Error_Type {
    PT_ERROR_CRC32=4,
    PT_ERROR_ENTRY_NOT_FOUND=2,
    PT_ERROR_ENTRY_UPDATE_FAIL=3,
    PT_ERROR_FALSH_ERASE=8,
    PT_ERROR_FALSH_READ=6,
    PT_ERROR_FALSH_WRITE=7,
    PT_ERROR_PARAMETER=5,
    PT_ERROR_SUCCESS=0,
    PT_ERROR_TABLE_NOT_VALID=1
} PtTable_Error_Type;

typedef struct mem mem, *Pmem;

struct mem {
    mem_size_t next;
    mem_size_t prev;
    u8_t used;
    undefined field_0x5;
};

typedef enum lwip_iana_hwtype {
    LWIP_IANA_HWTYPE_ETHERNET=1
} lwip_iana_hwtype;

typedef enum lwip_iana_port_number {
    LWIP_IANA_PORT_DHCP_CLIENT=68,
    LWIP_IANA_PORT_DHCP_SERVER=67,
    LWIP_IANA_PORT_HTTP=80,
    LWIP_IANA_PORT_HTTPS=443,
    LWIP_IANA_PORT_MDNS=5353,
    LWIP_IANA_PORT_MQTT=1883,
    LWIP_IANA_PORT_NETBIOS=-119,
    LWIP_IANA_PORT_SECURE_MQTT=8883,
    LWIP_IANA_PORT_SMTP=25,
    LWIP_IANA_PORT_SMTPS=465,
    LWIP_IANA_PORT_SNMP=-95,
    LWIP_IANA_PORT_SNMP_TRAP=-94,
    LWIP_IANA_PORT_SNTP=123,
    LWIP_IANA_PORT_TFTP=69
} lwip_iana_port_number;

typedef enum stateM_handleEventRetVals {
    stateM_errArg=-2,
    stateM_errorStateReached=-1,
    stateM_finalStateReached=3,
    stateM_noStateChange=2,
    stateM_stateChanged=0,
    stateM_stateLoopSelf=1
} stateM_handleEventRetVals;

typedef struct em_desc_node em_desc_node, *Pem_desc_node;

struct em_desc_node {
    struct co_list_hdr hdr;
    uint16_t idx;
    uint16_t buffer_idx;
    uint16_t buffer_ptr;
    uint8_t llid;
    uint8_t length;
};

typedef struct em_buf_tx_desc em_buf_tx_desc, *Pem_buf_tx_desc;

struct em_buf_tx_desc {
    uint16_t txptr;
    uint16_t txheader;
    uint16_t txdataptr;
    uint16_t txdle;
};

typedef struct em_buf_env_tag em_buf_env_tag, *Pem_buf_env_tag;

struct em_buf_env_tag {
    struct co_list tx_desc_free;
    struct co_list tx_buff_free;
    struct em_desc_node tx_desc_node[26];
    struct em_buf_node tx_buff_node[2];
    struct em_buf_tx_desc * tx_desc;
    uint8_t rx_current;
    undefined field_0x15d;
    undefined field_0x15e;
    undefined field_0x15f;
};

typedef struct encrypt encrypt, *Pencrypt;

typedef struct encrypt * enc_handle_t;

typedef struct payload payload, *Ppayload;

typedef struct payload * pyld_handle_t;

typedef struct pro_enc_func pro_enc_func, *Ppro_enc_func;

typedef struct pro_pyld_func pro_pyld_func, *Ppro_pyld_func;

struct payload {
    struct pro_pyld_func * pfnc;
    void * p_drv;
    uint8_t pyld_type;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
};

struct encrypt {
    pyld_handle_t pyld_handle;
    struct payload pyld;
    uint8_t is_head;
    undefined field_0x11;
    undefined field_0x12;
    undefined field_0x13;
    struct pro_enc_func * pfnc;
    void * p_drv;
};

struct pro_pyld_func {
    int (* pfn_pyld_read)(void *, uint8_t *, uint8_t *, uint8_t *, uint8_t *, uint8_t);
    int (* pfn_pyld_write)(void *, uint8_t *, uint8_t *, uint8_t, uint8_t *, uint8_t, int16_t);
};

struct pro_enc_func {
    int (* pfn_enc_read)(void *, uint8_t, uint8_t *, uint8_t *, uint8_t *, uint8_t *, size_t);
    int (* pfn_enc_write)(void *, uint8_t, uint8_t, uint8_t *, uint8_t *, uint8_t *, uint8_t, int16_t);
};

typedef enum netifapi_arp_entry {
    NETIFAPI_ARP_PERM=0
} netifapi_arp_entry;

typedef struct rxl_hwdesc_env_tag rxl_hwdesc_env_tag, *Prxl_hwdesc_env_tag;

struct rxl_hwdesc_env_tag {
    struct rx_pbd * last;
    struct rx_pbd * free;
};

typedef struct KDE_t KDE_t, *PKDE_t;

struct KDE_t {
    UINT8 type;
    UINT8 length;
    UINT8 OUI[3];
    UINT8 dataType;
    UINT8 data[1];
};

typedef struct Hdr_8021x_t Hdr_8021x_t, *PHdr_8021x_t;

struct Hdr_8021x_t {
    UINT8 protocol_ver;
    enum IEEEtypes_8021x_PacketType_e pckt_type;
    UINT16 pckt_body_len;
};

typedef struct EAPOL_KeyMsg_t EAPOL_KeyMsg_t, *PEAPOL_KeyMsg_t;

typedef struct key_info_t key_info_t, *Pkey_info_t;

struct key_info_t {
    UINT16 KeyMIC:1;
    UINT16 Secure:1;
    UINT16 Error:1;
    UINT16 Request:1;
    UINT16 EncryptedKeyData:1;
    UINT16 Reserved:3;
    UINT16 KeyDescriptorVersion:3;
    UINT16 KeyType:1;
    UINT16 KeyIndex:2;
    UINT16 Install:1;
    UINT16 KeyAck:1;
};

struct EAPOL_KeyMsg_t {
    struct Hdr_8021x_t hdr_8021x;
    UINT8 desc_type;
    struct key_info_t key_info;
    UINT16 key_length;
    UINT32 replay_cnt[2];
    UINT8 key_nonce[32];
    UINT8 EAPOL_key_IV[16];
    UINT8 key_RSC[8];
    UINT8 key_ID[8];
    UINT8 key_MIC[16];
    UINT16 key_material_len;
    UINT8 key_data[1];
};

typedef struct EAPOL_KeyMsg_Tx_t EAPOL_KeyMsg_Tx_t, *PEAPOL_KeyMsg_Tx_t;

struct EAPOL_KeyMsg_Tx_t {
    struct ether_hdr_t ethHdr;
    struct EAPOL_KeyMsg_t keyMsg;
};

typedef struct EAP_PacketMsg_t EAP_PacketMsg_t, *PEAP_PacketMsg_t;

struct EAP_PacketMsg_t {
    struct Hdr_8021x_t hdr_8021x;
    enum IEEEtypes_8021x_CodeType_e code;
    UINT8 identifier;
    UINT16 length;
    UINT8 data[1];
};

typedef struct GTK_KDE_t GTK_KDE_t, *PGTK_KDE_t;

struct GTK_KDE_t {
    UINT8 KeyID:2;
    UINT8 Tx:1;
    UINT8 rsvd:5;
    UINT8 rsvd1;
    UINT8 GTK[1];
};

typedef struct event_dev_t event_dev_t, *Pevent_dev_t;

struct event_dev_t {
    aos_mutex_t mutex;
    void (* poll_cb)(struct pollfd *, void *);
    struct pollfd * fd;
    void * poll_data;
    int counter;
    dlist_t bufs;
    int cache_count;
    dlist_t buf_cache;
};

typedef struct dev_event_t dev_event_t, *Pdev_event_t;

struct dev_event_t {
    dlist_t node;
    size_t len;
    char[0] buf;
};

typedef struct in6_addr in6_addr, *Pin6_addr;

typedef union anon_union_for_un anon_union_for_un, *Panon_union_for_un;

union anon_union_for_un {
    u32_t u32_addr[4];
    u8_t u8_addr[16];
};

struct in6_addr {
    union anon_union_for_un un;
};

typedef union anon_union.conflict1 anon_union.conflict1, *Panon_union.conflict1;

union anon_union.conflict1 {
    u32_t u32_addr[4];
    u8_t u8_addr[16];
};

typedef uint32_t fdt32_t;

typedef uint64_t fdt64_t;

typedef ulong fd_mask;

typedef struct _types_fd_set _types_fd_set, *P_types_fd_set;

struct _types_fd_set {
    fd_mask fds_bits[2];
};

typedef struct poll_arg poll_arg, *Ppoll_arg;

struct poll_arg {
    aos_sem_t sem;
};

typedef struct tc_hmac_prng_struct tc_hmac_prng_struct, *Ptc_hmac_prng_struct;

struct tc_hmac_prng_struct {
    struct tc_hmac_state_struct h;
    uint8_t key[32];
    uint8_t v[32];
    uint countdown;
    undefined field_0x134;
    undefined field_0x135;
    undefined field_0x136;
    undefined field_0x137;
};

typedef struct MIC_Error_t MIC_Error_t, *PMIC_Error_t;

typedef enum MIC_Fail_State_e {
    FIRST_MIC_FAIL_IN_60_SEC=1,
    NO_MIC_FAILURE=0,
    SECOND_MIC_FAIL_IN_60_SEC=2
} MIC_Fail_State_e;

struct MIC_Error_t {
    enum MIC_Fail_State_e status;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    BOOLEAN MICCounterMeasureEnabled;
    UINT32 disableStaAsso;
};

typedef struct TkipPtk_t TkipPtk_t, *PTkipPtk_t;

struct TkipPtk_t {
    UINT8 kck[16];
    UINT8 kek[16];
    UINT8 tk[16];
    UINT8 rxMicKey[8];
    UINT8 txMicKey[8];
};

typedef struct customMIB_RSNStats_t customMIB_RSNStats_t, *PcustomMIB_RSNStats_t;

struct customMIB_RSNStats_t {
    UINT8 TKIPICVErrors;
    UINT8 TKIPLocalMICFailures;
    UINT8 TKIPCounterMeasuresInvoked;
};

typedef struct keyMgmtInfoSta_t keyMgmtInfoSta_t, *PkeyMgmtInfoSta_t;

typedef struct cm_ConnectionInfo cm_ConnectionInfo, *Pcm_ConnectionInfo;

typedef struct supplicantData supplicantData, *PsupplicantData;

typedef union anon_union_for_specDat anon_union_for_specDat, *Panon_union_for_specDat;

typedef struct SecurityParams_t SecurityParams_t, *PSecurityParams_t;

typedef struct apSpecificData_t apSpecificData_t, *PapSpecificData_t;

typedef struct BufferDesc BufferDesc, *PBufferDesc;

typedef struct BufferDesc BufferDesc_t;

typedef union anon_union_for_intf anon_union_for_intf, *Panon_union_for_intf;

struct SecurityParams_t {
    struct SecurityMode_t wpaType;
    struct Cipher_t.conflict mcstCipher;
    struct Cipher_t.conflict ucstCipher;
};

struct apSpecificData_t {
    struct apInfo_t * apInfo;
    BufferDesc_t * apInfoBuffDesc;
    struct ChanBandInfo_t chanBandInfo;
    undefined field_0xa;
    undefined field_0xb;
    struct staData_t staData;
};

union anon_union_for_specDat {
    struct apSpecificData_t apData;
};

struct keyMgmtInfoSta_t {
    UINT8 ANonce[32];
    UINT8 SNonce[32];
    UINT8 EAPOL_MIC_Key[16];
    UINT8 EAPOL_Encr_Key[16];
    UINT32 apCounterLo;
    UINT32 apCounterHi;
    UINT32 apCounterZeroDone;
    UINT32 staCounterLo;
    UINT32 staCounterHi;
    BOOLEAN RSNDataTrafficEnabled;
    BOOLEAN RSNSecured;
    BOOLEAN pwkHandshakeComplete;
    struct cipher_key_t * pRxDecryptKey;
    struct KeyData_t PWKey;
    struct KeyData_t GRKey;
    struct KeyData_t newPWKey;
    struct MIC_Error_t sta_MIC_Error;
    struct mm_timer_tag rsnTimer;
    struct cm_ConnectionInfo * connPtr;
    struct KeyData_t IGtk;
};

struct supplicantData {
    BOOLEAN inUse;
    struct IEEEtypes_SsIdElement_t hashSsId;
    IEEEtypes_MacAddr_t localBssid;
    IEEEtypes_MacAddr_t localStaAddr;
    struct customMIB_RSNStats_t customMIB_RSNStats;
    struct RSNConfig_t customMIB_RSNConfig;
    undefined field_0x51;
    undefined field_0x52;
    undefined field_0x53;
    struct keyMgmtInfoSta_t keyMgmtInfoSta;
    struct SecurityParams_t currParams;
};

struct cm_ConnectionInfo {
    UINT8 conType;
    UINT8 staId;
    UINT8 instNbr;
    UINT8 gtkHwKeyId;
    UINT8 ptkHwKeyId;
    UINT8 mfpHwKeyId;
    undefined field_0x6;
    undefined field_0x7;
    struct supplicantData * suppData;
    struct CommonMlmeData_t comData;
    IEEEtypes_MacAddr_t peerMacAddr;
    IEEEtypes_MacAddr_t localMacAddr;
    union anon_union_for_specDat specDat;
    cipher_key_buf_t TxRxCipherKeyBuf;
};

union anon_union_for_intf {
    uint32 Interface;
    struct cm_ConnectionInfo * connPtr;
};

struct BufferDesc {
    union anon_union_for_intf intf;
    uint16 DataLen;
    undefined field_0x6;
    undefined field_0x7;
    void * Buffer;
};

typedef struct getopt_env getopt_env, *Pgetopt_env;

typedef struct getopt_env getopt_env_t;

struct getopt_env {
    char * optarg;
    int optind;
    int opterr;
    int optopt;
    int __optpos;
};

typedef struct apm apm, *Papm;

struct apm {
    struct apm_start_req * param;
    struct co_list bss_config;
    uint8_t aging_sta_idx;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint8_t * bcn_buf;
    _Bool apm_emb_enabled;
    uint8_t hidden_ssid;
    uint8_t assoc_sta_count;
    uint8_t max_sta_supported;
    struct anon_struct.conflict151 aid_list[10];
    undefined field_0x5e;
    undefined field_0x5f;
};

typedef struct anon_struct.conflict179 anon_struct.conflict179, *Panon_struct.conflict179;

struct anon_struct.conflict179 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct anon_struct.conflict195 anon_struct.conflict195, *Panon_struct.conflict195;

struct anon_struct.conflict195 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct anon_struct.conflict202 anon_struct.conflict202, *Panon_struct.conflict202;

struct anon_struct.conflict202 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct anon_struct.conflict201 anon_struct.conflict201, *Panon_struct.conflict201;

struct anon_struct.conflict201 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct anon_struct.conflict178 anon_struct.conflict178, *Panon_struct.conflict178;

struct anon_struct.conflict178 {
    uint8_t mac[6];
    uint8_t used;
};

typedef struct bt_conn_cb bt_conn_cb, *Pbt_conn_cb;

typedef struct bt_le_conn_param bt_le_conn_param, *Pbt_le_conn_param;

typedef enum bt_security_err {
    BT_SECURITY_ERR_AUTH_FAIL=1,
    BT_SECURITY_ERR_AUTH_REQUIREMENT=4,
    BT_SECURITY_ERR_INVALID_PARAM=7,
    BT_SECURITY_ERR_OOB_NOT_AVAILABLE=3,
    BT_SECURITY_ERR_PAIR_NOT_ALLOWED=6,
    BT_SECURITY_ERR_PAIR_NOT_SUPPORTED=5,
    BT_SECURITY_ERR_PIN_OR_KEY_MISSING=2,
    BT_SECURITY_ERR_SUCCESS=0,
    BT_SECURITY_ERR_UNSPECIFIED=8
} bt_security_err;

struct bt_conn_cb {
    void (* connected)(struct bt_conn *, u8_t);
    void (* disconnected)(struct bt_conn *, u8_t);
    _Bool (* le_param_req)(struct bt_conn *, struct bt_le_conn_param *);
    void (* le_param_updated)(struct bt_conn *, u16_t, u16_t, u16_t);
    void (* identity_resolved)(struct bt_conn *, struct bt_addr_le_t *, struct bt_addr_le_t *);
    void (* security_changed)(struct bt_conn *, enum bt_security_t, enum bt_security_err);
    struct bt_conn_cb * _next;
};

struct bt_le_conn_param {
    u16_t interval_min;
    u16_t interval_max;
    u16_t latency;
    u16_t timeout;
};

typedef struct bt_conn_le_info bt_conn_le_info, *Pbt_conn_le_info;

struct bt_conn_le_info {
    struct bt_addr_le_t * src;
    struct bt_addr_le_t * dst;
    struct bt_addr_le_t * local;
    struct bt_addr_le_t * remote;
    u16_t interval;
    u16_t latency;
    u16_t timeout;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct bt_conn_oob_info bt_conn_oob_info, *Pbt_conn_oob_info;

typedef enum anon_enum_8_for_type {
    AC_BE=1,
    AC_BK=0,
    AC_MAX=4,
    AC_VI=2,
    AC_VO=3,
    ADDR_END=4,
    ADDR_MASK=1,
    ADDR_PUBLIC=0,
    ADDR_RAND=1,
    ADDR_RPA_MASK=2,
    ADDR_RPA_OR_PUBLIC=2,
    ADDR_RPA_OR_RAND=3,
    ADV_CONN_DIR=1,
    ADV_CONN_DIR_LDC=4,
    ADV_CONN_UNDIR=0,
    ADV_DIS=0,
    ADV_DISC_UNDIR=2,
    ADV_EN=1,
    ADV_END=5,
    ADV_EN_END=2,
    ADV_NONCONN_UNDIR=3,
    API_AC_BE=1,
    API_AC_BK=0,
    API_AC_MAX=4,
    API_AC_VI=2,
    API_AC_VO=3,
    BLE_IRQn=72,
    BMX_ERR_IRQn=16,
    BMX_TO_IRQn=17,
    BOR_IRQn=69,
    BT_CONN_OOB_BOTH_PEERS=2,
    BT_CONN_OOB_LE_LEGACY=0,
    BT_CONN_OOB_LE_SC=1,
    BT_CONN_OOB_LOCAL_ONLY=0,
    BT_CONN_OOB_NO_DATA=3,
    BT_CONN_OOB_REMOTE_ONLY=1,
    BT_CONN_ROLE_MASTER=0,
    BT_CONN_ROLE_SLAVE=1,
    BT_CONN_TYPE_ALL=7,
    BT_CONN_TYPE_BR=2,
    BT_CONN_TYPE_LE=1,
    BT_CONN_TYPE_SCO=4,
    BT_LE_ADV_OPT_CONNECTABLE=1,
    BT_LE_ADV_OPT_DIR_ADDR_RPA=32,
    BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY=16,
    BT_LE_ADV_OPT_FILTER_CONN=-128,
    BT_LE_ADV_OPT_FILTER_SCAN_REQ=64,
    BT_LE_ADV_OPT_NONE=0,
    BT_LE_ADV_OPT_ONE_TIME=2,
    BT_LE_ADV_OPT_USE_IDENTITY=4,
    BT_LE_ADV_OPT_USE_NAME=8,
    BT_LE_SCAN_FILTER_DUPLICATE=1,
    BT_LE_SCAN_FILTER_EXTENDED=4,
    BT_LE_SCAN_FILTER_WHITELIST=2,
    BZ_PHY_IRQn=71,
    CLIC_SOFT_PEND_IRQn=12,
    CNTLR_BB_OGF=3,
    CONTROL_PORT_HOST=1,
    CONTROL_PORT_NO_ENC=2,
    CO_BAD_PARAM=4,
    CO_BUSY=8,
    CO_EMPTY=2,
    CO_FAIL=1,
    CO_FULL=3,
    CO_NOT_FOUND=5,
    CO_NO_ELT_IN_USE=7,
    CO_NO_MORE_ELT_AVAILABLE=6,
    CO_OK=0,
    CO_OP_IN_PROGRESS=9,
    DISABLE_HT=4,
    DMA_ALL_IRQn=31,
    DMA_BMX_ERR_IRQn=24,
    EFUSE_IRQn=42,
    ERR_ABRT=-13,
    ERR_ALREADY=-9,
    ERR_ARG=-16,
    ERR_BUF=-2,
    ERR_CLSD=-15,
    ERR_CONN=-11,
    ERR_IF=-12,
    ERR_INPROGRESS=-5,
    ERR_ISCONN=-10,
    ERR_MEM=-1,
    ERR_OK=0,
    ERR_RST=-14,
    ERR_RTE=-4,
    ERR_TIMEOUT=-3,
    ERR_USE=-8,
    ERR_VAL=-6,
    ERR_WOULDBLOCK=-7,
    GLB_PLL_XTAL_24M=1,
    GLB_PLL_XTAL_26M=5,
    GLB_PLL_XTAL_32M=2,
    GLB_PLL_XTAL_38P4M=3,
    GLB_PLL_XTAL_40M=4,
    GLB_PLL_XTAL_NONE=0,
    GLB_PLL_XTAL_RC32M=6,
    GLB_SYS_CLK_PLL120M=3,
    GLB_SYS_CLK_PLL160M=4,
    GLB_SYS_CLK_PLL192M=5,
    GLB_SYS_CLK_PLL48M=2,
    GLB_SYS_CLK_RC32M=0,
    GLB_SYS_CLK_XTAL=1,
    GPADC_DMA_IRQn=41,
    GPIO_INT0_IRQn=60,
    HBN_32K_DIG=3,
    HBN_32K_RC=0,
    HBN_32K_XTAL=1,
    HBN_OUT0_IRQn=67,
    HBN_OUT1_IRQn=68,
    HBN_ROOT_CLK_PLL=2,
    HBN_ROOT_CLK_RC32M=0,
    HBN_ROOT_CLK_XTAL=1,
    HBN_UART_CLK_160M=1,
    HBN_UART_CLK_FCLK=0,
    I2C_IRQn=48,
    INFO_PAR_OGF=4,
    INIT_FILT_END=2,
    INIT_FILT_IGNORE_WLST=0,
    INIT_FILT_USE_WLST=1,
    IRQn_LAST=80,
    IRRX_IRQn=36,
    IRTX_IRQn=35,
    KE_EVT_IDLE=0,
    KE_EVT_RUNNING=1,
    KE_MEM_BLOCK_EM=1,
    KE_MEM_BLOCK_MAX=2,
    KE_MEM_BLOCK_RAM=0,
    KE_MEM_ENV=0,
    KE_MEM_KE_MSG=0,
    KE_MEM_NON_RETENTION=0,
    L1C_BMX_ERR_IRQn=18,
    L1C_BMX_TO_IRQn=19,
    LE_CNTLR_OGF=8,
    LINK_TYPE_END=2,
    LIR_TYPE_A=1,
    LIR_TYPE_B=2,
    LIR_TYPE_C=3,
    LIR_TYPE_D=4,
    LIR_TYPE_E=5,
    LIR_TYPE_F=6,
    LIR_TYPE_G=7,
    LIR_TYPE_H=8,
    LIR_TYPE_I=9,
    LIR_TYPE_J=10,
    LK_CNTL_OGF=1,
    LK_POL_OGF=2,
    LLID_CNTL=3,
    LLID_CONTINUE=1,
    LLID_END=4,
    LLID_RFU=0,
    LLID_START=2,
    LLM_LE_ADV_DUMMY_IDX=1,
    LLM_LE_ADV_IDX=5,
    LLM_LE_COEXT_SCAN_IDX=3,
    LLM_LE_SCAN_CON_REQ_ADV_DIR_IDX=2,
    LLM_LE_SCAN_RSP_IDX=4,
    LL_ADV_CONN_DIR=1,
    LL_ADV_CONN_UNDIR=0,
    LL_ADV_DISC_UNDIR=6,
    LL_ADV_END=8,
    LL_ADV_NONCONN_UNDIR=2,
    LL_CONNECT_REQ=5,
    LL_EXT_ADV=7,
    LL_SCAN_REQ=3,
    LL_SCAN_RSP=4,
    MAC_GEN_IRQn=77,
    MAC_PORT_TRG_IRQn=78,
    MAC_RX_TRG_IRQn=75,
    MAC_TXRX_MISC_IRQn=74,
    MAC_TXRX_TIMER_IRQn=73,
    MAC_TX_TRG_IRQn=76,
    MAX_OGF=64,
    MEMP_ALTCP_PCB=5,
    MEMP_IGMP_GROUP=10,
    MEMP_MAX=15,
    MEMP_NETBUF=6,
    MEMP_NETCONN=7,
    MEMP_NETDB=12,
    MEMP_PBUF=13,
    MEMP_PBUF_POOL=14,
    MEMP_RAW_PCB=0,
    MEMP_SYS_TIMEOUT=11,
    MEMP_TCPIP_MSG_API=8,
    MEMP_TCPIP_MSG_INPKT=9,
    MEMP_TCP_PCB=2,
    MEMP_TCP_PCB_LISTEN=3,
    MEMP_TCP_SEG=4,
    MEMP_UDP_PCB=1,
    MEXT_IRQn=11,
    MFP_IN_USE=16,
    MM_AP=2,
    MM_IBSS=1,
    MM_MESH_POINT=3,
    MM_STA=0,
    MSOFT_IRQn=3,
    MTIME_IRQn=7,
    OP_CFLIRI_BUFFER=54,
    OP_CFLIR_BUFFER=56,
    OP_CFLIR_PLD=57,
    OP_CLIR=53,
    OP_CTLIRI_PLD=55,
    OP_LADD=24,
    OP_LCMP=25,
    OP_LDIV=20,
    OP_LDIV2N=18,
    OP_LMUL=22,
    OP_LMUL2N=19,
    OP_LSQR=21,
    OP_LSUB=23,
    OP_MADD=40,
    OP_MDIV2=33,
    OP_MEXP=35,
    OP_MINV=34,
    OP_MMUL=37,
    OP_MOD2N=17,
    OP_MOVDAT=50,
    OP_MREM=38,
    OP_MSQR=36,
    OP_MSUB=39,
    OP_NLIR=51,
    OP_PPSEL=0,
    OP_RESIZE=49,
    OP_SLIR=52,
    PAYL_00001111=6,
    PAYL_01010101=7,
    PAYL_10101010=2,
    PAYL_11110000=1,
    PAYL_ALL_0=5,
    PAYL_ALL_1=4,
    PAYL_END=8,
    PAYL_PSEUDO_RAND_15=3,
    PAYL_PSEUDO_RAND_9=0,
    PBUF_IP=-94,
    PBUF_LINK=-114,
    PBUF_RAW=0,
    PBUF_RAW_TX=-128,
    PBUF_TRANSPORT=-74,
    PDS_WAKEUP_IRQn=66,
    PHY_BAND_2G4=0,
    PHY_BAND_5G=1,
    PHY_BAND_MAX=2,
    PHY_CHNL_BW_160=3,
    PHY_CHNL_BW_20=0,
    PHY_CHNL_BW_40=1,
    PHY_CHNL_BW_80=2,
    PHY_CHNL_BW_80P80=4,
    PHY_CHNL_BW_OTHER=5,
    POOL_LINKED_LIST=0,
    PS_MODE_OFF=0,
    PS_MODE_ON=1,
    PS_MODE_ON_DYN=2,
    PT_ENTRY_FW_CPU0=0,
    PT_ENTRY_FW_CPU1=1,
    PT_ENTRY_MAX=16,
    PWM_IRQn=50,
    RESERVED0=32,
    RESERVED1=33,
    RESERVED10=55,
    RESERVED11=56,
    RESERVED12=57,
    RESERVED13=58,
    RESERVED14=59,
    RESERVED16=61,
    RESERVED17=62,
    RESERVED18=63,
    RESERVED19=64,
    RESERVED2=34,
    RESERVED20=65,
    RESERVED3=37,
    RESERVED4=38,
    RESERVED5=40,
    RESERVED6=44,
    RESERVED7=47,
    RESERVED8=49,
    RESERVED9=51,
    RF_TOP_INT0_IRQn=21,
    RF_TOP_INT1_IRQn=22,
    RING_LINKED_LIST=1,
    ROLE_END=2,
    ROLE_MASTER=0,
    ROLE_SLAVE=1,
    SCAN_ACTIVE=1,
    SCAN_DIS=0,
    SCAN_EN=1,
    SCAN_END=2,
    SCAN_EN_END=2,
    SCAN_PASSIVE=0,
    SCA_100PPM=3,
    SCA_150PPM=2,
    SCA_20PPM=7,
    SCA_250PPM=1,
    SCA_30PPM=6,
    SCA_500PPM=0,
    SCA_50PPM=5,
    SCA_75PPM=4,
    SDIO_IRQn=23,
    SEC_AES_IRQn=29,
    SEC_BMX_ERR_IRQn=20,
    SEC_CDET_IRQn=26,
    SEC_GMAC_IRQn=25,
    SEC_PKA_IRQn=27,
    SEC_SHA_IRQn=30,
    SEC_TRNG_IRQn=28,
    SF_CTRL_IRQn=39,
    SPI_IRQn=43,
    STAT_PAR_OGF=5,
    TASK_API=13,
    TASK_APM=7,
    TASK_BAM=8,
    TASK_CFG=12,
    TASK_DBG=1,
    TASK_HOSTAPD_U=10,
    TASK_LAST_EMB=12,
    TASK_MAX=14,
    TASK_ME=5,
    TASK_MESH=9,
    TASK_MM=0,
    TASK_NONE=-1,
    TASK_RXU=11,
    TASK_SCAN=2,
    TASK_SCANU=4,
    TASK_SM=6,
    TASK_TDLS=3,
    TEST_END=3,
    TEST_OGF=6,
    TEST_RX=1,
    TEST_RXTX=2,
    TEST_TX=0,
    TIMER_CH0_IRQn=52,
    TIMER_CH1_IRQn=53,
    TIMER_WDT_IRQn=54,
    TX_LVL_CURRENT=0,
    TX_LVL_LEN=2,
    TX_LVL_MAX=1,
    UART0_IRQn=45,
    UART1_IRQn=46,
    VFS_TYPE_BLOCK_DEV=2,
    VFS_TYPE_CHAR_DEV=1,
    VFS_TYPE_FS_DEV=3,
    VFS_TYPE_NOT_INIT=0,
    VS_OGF=63,
    WIFI_IPC_PUBLIC_IRQn=79,
    WIFI_IRQn=70,
    WPA_WPA2_IN_USE=8,
    eIncrement=2,
    eNoAction=0,
    eSetBits=1,
    eSetValueWithOverwrite=3,
    eSetValueWithoutOverwrite=4
} anon_enum_8_for_type;


// WARNING! conflicting data type names: /DWARF/conn.h/bt_conn_oob_info/anon_union_for_field_1 - /DWARF/dlist.h/_dnode/anon_union_for_field_1

struct bt_conn_oob_info {
    enum anon_enum_8_for_type type;
    union anon_union_for_field_1 field_1;
};

typedef struct bt_conn_auth_cb bt_conn_auth_cb, *Pbt_conn_auth_cb;

struct bt_conn_auth_cb {
    void (* passkey_display)(struct bt_conn *, uint);
    void (* passkey_entry)(struct bt_conn *);
    void (* passkey_confirm)(struct bt_conn *, uint);
    void (* oob_data_request)(struct bt_conn *, struct bt_conn_oob_info *);
    void (* cancel)(struct bt_conn *);
    void (* pairing_confirm)(struct bt_conn *);
    void (* pairing_complete)(struct bt_conn *, _Bool);
    void (* pairing_failed)(struct bt_conn *, enum bt_security_err);
};

typedef struct bt_conn_info bt_conn_info, *Pbt_conn_info;


// WARNING! conflicting data type names: /DWARF/conn.h/bt_conn_info/anon_union_for_field_3 - /DWARF/gatt.h/bt_gatt_discover_params/anon_union_for_field_3

struct bt_conn_info {
    u8_t type;
    u8_t role;
    u8_t id;
    undefined field_0x3;
    union anon_union_for_field_3 field_3;
};

typedef struct bt_conn_oob_info.conflict bt_conn_oob_info.conflict, *Pbt_conn_oob_info.conflict;

struct bt_conn_oob_info.conflict {
    enum anon_enum_8_for_type.conflict type;
    union anon_union_for_field_1.conflict field_1;
};

typedef struct anon_struct.conflict78 anon_struct.conflict78, *Panon_struct.conflict78;

struct anon_struct.conflict78 {
    enum anon_enum_8_for_oob_config oob_config;
};

typedef struct bt_conn_oob_info.conflict3 bt_conn_oob_info.conflict3, *Pbt_conn_oob_info.conflict3;

struct bt_conn_oob_info.conflict3 {
    enum anon_enum_8_for_type.conflict3 type;
    union anon_union_for_field_1.conflict3 field_1;
};

typedef struct bt_conn_oob_info.conflict4 bt_conn_oob_info.conflict4, *Pbt_conn_oob_info.conflict4;

struct bt_conn_oob_info.conflict4 {
    enum anon_enum_8_for_type.conflict4 type;
    union anon_union_for_field_1.conflict4 field_1;
};

typedef struct bt_conn_oob_info.conflict1 bt_conn_oob_info.conflict1, *Pbt_conn_oob_info.conflict1;

struct bt_conn_oob_info.conflict1 {
    enum anon_enum_8_for_type.conflict1 type;
    union anon_union_for_field_1.conflict1 field_1;
};

typedef struct bt_conn_oob_info.conflict2 bt_conn_oob_info.conflict2, *Pbt_conn_oob_info.conflict2;

struct bt_conn_oob_info.conflict2 {
    enum anon_enum_8_for_type.conflict2 type;
    union anon_union_for_field_1.conflict2 field_1;
};

typedef struct bt_conn_br_info bt_conn_br_info, *Pbt_conn_br_info;

struct bt_conn_br_info {
    struct bt_addr_t * dst;
};

typedef struct supplicantData supplicantData_t;

typedef struct tx_meta tx_meta, *Ptx_meta;

typedef struct bt_conn_tx bt_conn_tx, *Pbt_conn_tx;

struct tx_meta {
    struct bt_conn_tx * tx;
};

struct bt_conn_tx {
    sys_snode_t node;
    void (* cb)(struct bt_conn *, void *);
    void * user_data;
    u32_t.conflict pending_no_cb;
};

typedef struct wifi_event_data_ind_scan_done wifi_event_data_ind_scan_done, *Pwifi_event_data_ind_scan_done;

struct wifi_event_data_ind_scan_done {
    uint32_t nothing;
};

typedef struct wifi_event_sm_connect_ind wifi_event_sm_connect_ind, *Pwifi_event_sm_connect_ind;

struct wifi_event_sm_connect_ind {
    uint16_t status_code;
    uint8_t bssid[6];
    uint8_t vif_idx;
    uint8_t ap_idx;
    uint8_t ch_idx;
    undefined field_0xb;
    int qos;
    uint16_t aid;
    uint8_t band;
    undefined field_0x13;
    uint16_t center_freq;
    uint8_t width;
    undefined field_0x17;
    uint32_t center_freq1;
    uint32_t center_freq2;
};

typedef struct wifi_apm_sta_info wifi_apm_sta_info, *Pwifi_apm_sta_info;

struct wifi_apm_sta_info {
    uint8_t sta_idx;
    uint8_t is_used;
    uint8_t sta_mac[6];
    uint32_t tsfhi;
    uint32_t tsflo;
    int rssi;
    uint8_t data_rate;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct wifi_event_beacon_ind wifi_event_beacon_ind, *Pwifi_event_beacon_ind;

typedef struct wifi_cipher_t wifi_cipher_t, *Pwifi_cipher_t;

typedef struct wifi_secmode_t wifi_secmode_t, *Pwifi_secmode_t;

struct wifi_cipher_t {
    uint8_t wep40:1;
    uint8_t wep104:1;
    uint8_t tkip:1;
    uint8_t ccmp:1;
    uint8_t rsvd:4;
};

struct wifi_secmode_t {
    uint8_t noRsn:1;
    uint8_t wepStatic:1;
    uint8_t wepDynamic:1;
    uint8_t wpa:1;
    uint8_t wpaNone:1;
    uint8_t wpa2:1;
    uint8_t cckm:1;
    uint8_t wapi:1;
    uint8_t rsvd:8;
};

struct wifi_event_beacon_ind {
    uint8_t bssid[6];
    uint8_t ssid[33];
    int8_t rssi;
    int8_t ppm_abs;
    int8_t ppm_rel;
    uint8_t channel;
    uint8_t auth;
    uint8_t cipher;
    struct wifi_cipher_t wpa_mcstCipher;
    struct wifi_cipher_t wpa_ucstCipher;
    struct wifi_cipher_t rsn_mcstCipher;
    struct wifi_cipher_t rsn_ucstCipher;
    struct wifi_secmode_t sec_mode;
    undefined field_0x33;
    int ssid_len;
};

typedef struct wifi_event_sm_disconnect_ind wifi_event_sm_disconnect_ind, *Pwifi_event_sm_disconnect_ind;

struct wifi_event_sm_disconnect_ind {
    uint16_t reason_code;
    uint8_t vif_idx;
    undefined field_0x3;
    int ft_over_ds;
};

typedef struct wifi_event_data_ind_channel_switch wifi_event_data_ind_channel_switch, *Pwifi_event_data_ind_channel_switch;

struct wifi_event_data_ind_channel_switch {
    int channel;
};

typedef struct wifi_event wifi_event, *Pwifi_event;

struct wifi_event {
    uint32_t id;
    uint8_t[0] data;
};

typedef struct phyif_utils_recvtable_t phyif_utils_recvtable_t, *Pphyif_utils_recvtable_t;

struct phyif_utils_recvtable_t {
    uint32_t recvtable1;
    uint32_t recvtable2;
    uint32_t recvtable3;
    uint32_t recvtable4;
    uint32_t recvtable5;
    uint32_t recvtable6;
};

typedef struct dhcp_msg dhcp_msg, *Pdhcp_msg;

struct dhcp_msg {
    u8_t op;
    u8_t htype;
    u8_t hlen;
    u8_t hops;
    u32_t xid;
    u16_t secs;
    u16_t flags;
    ip4_addr_p_t ciaddr;
    ip4_addr_p_t yiaddr;
    ip4_addr_p_t siaddr;
    ip4_addr_p_t giaddr;
    u8_t chaddr[16];
    u8_t sname[64];
    u8_t file[128];
    u32_t cookie;
    u8_t options[68];
};

typedef struct dhcp dhcp, *Pdhcp;

struct dhcp {
    u32_t xid;
    u8_t pcb_allocated;
    u8_t state;
    u8_t tries;
    u8_t subnet_mask_given;
    u16_t request_timeout;
    u16_t t1_timeout;
    u16_t t2_timeout;
    u16_t t1_renew_time;
    u16_t t2_rebind_time;
    u16_t lease_used;
    u16_t t0_timeout;
    undefined field_0x16;
    undefined field_0x17;
    ip_addr_t server_ip_addr;
    ip4_addr_t offered_ip_addr;
    ip4_addr_t offered_sn_mask;
    ip4_addr_t offered_gw_addr;
    u32_t offered_t0_lease;
    u32_t offered_t1_renew;
    u32_t offered_t2_rebind;
};

typedef enum dhcp_option_idx {
    DHCP_OPTION_IDX_DNS_SERVER=8,
    DHCP_OPTION_IDX_DNS_SERVER_LAST=9,
    DHCP_OPTION_IDX_LEASE_TIME=3,
    DHCP_OPTION_IDX_MAX=10,
    DHCP_OPTION_IDX_MSG_TYPE=1,
    DHCP_OPTION_IDX_OVERLOAD=0,
    DHCP_OPTION_IDX_ROUTER=7,
    DHCP_OPTION_IDX_SERVER_ID=2,
    DHCP_OPTION_IDX_SUBNET_MASK=6,
    DHCP_OPTION_IDX_T1=4,
    DHCP_OPTION_IDX_T2=5
} dhcp_option_idx;

typedef struct phyif_utils_recvtable_priv_t phyif_utils_recvtable_priv_t, *Pphyif_utils_recvtable_priv_t;

struct phyif_utils_recvtable_priv_t {
    uint32_t leg_length:12;
    uint32_t leg_rate:4;
    uint32_t ht_length:16;
    uint32_t _ht_length:4;
    uint32_t short_gi:1;
    uint32_t stbc:2;
    uint32_t smoothing:1;
    uint32_t mcs:7;
    uint32_t pre_type:1;
    uint32_t format_mod:3;
    uint32_t ch_bw:2;
    uint32_t n_sts:3;
    uint32_t lsig_valid:1;
    uint32_t sounding:1;
    uint32_t num_extn_ss:2;
    uint32_t aggregation:1;
    uint32_t fec_coding:1;
    uint32_t dyn_bw:1;
    uint32_t doze_not_allowed:1;
    uint32_t antenna_set:8;
    uint32_t partial_aid:9;
    uint32_t group_id:6;
    uint32_t reserved_1c:1;
    int32_t rssi1:8;
    int32_t rssi2:8;
    int32_t rssi3:8;
    int32_t rssi4:8;
    uint32_t reserved_1d:8;
    uint32_t rcpi:8;
    uint32_t evm1:8;
    uint32_t evm2:8;
    uint32_t evm3:8;
    uint32_t evm4:8;
    uint32_t reserved2b_1:8;
    uint32_t reserved2b_2:8;
    uint32_t reserved2b_3:8;
};

typedef struct xTIME_OUT xTIME_OUT, *PxTIME_OUT;

typedef struct xTIME_OUT TimeOut_t;

struct xTIME_OUT {
    BaseType_t xOverflowCount;
    TickType_t xTimeOnEntering;
};

typedef struct xMEMORY_REGION xMEMORY_REGION, *PxMEMORY_REGION;

struct xMEMORY_REGION {
    void * pvBaseAddress;
    uint32_t ulLengthInBytes;
    uint32_t ulParameters;
};

typedef struct xTASK_STATUS xTASK_STATUS, *PxTASK_STATUS;

typedef struct xTASK_STATUS TaskStatus_t;

typedef enum eTaskState {
    eBlocked=2,
    eDeleted=4,
    eInvalid=5,
    eReady=1,
    eRunning=0,
    eSuspended=3
} eTaskState;

struct xTASK_STATUS {
    TaskHandle_t xHandle;
    char * pcTaskName;
    UBaseType_t xTaskNumber;
    enum eTaskState eCurrentState;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    UBaseType_t uxCurrentPriority;
    UBaseType_t uxBasePriority;
    uint32_t ulRunTimeCounter;
    StackType_t * pxStackBase;
    uint16_t usStackHighWaterMark;
    undefined field_0x22;
    undefined field_0x23;
};

typedef enum eNotifyAction {
    eIncrement=2,
    eNoAction=0,
    eSetBits=1,
    eSetValueWithOverwrite=3,
    eSetValueWithoutOverwrite=4
} eNotifyAction;

typedef struct xMEMORY_REGION MemoryRegion_t;

typedef struct ip_globals ip_globals, *Pip_globals;

struct ip_globals {
    struct netif * current_netif;
    struct netif * current_input_netif;
    struct ip_hdr * current_ip4_header;
    u16_t current_ip_header_tot_len;
    undefined field_0xe;
    undefined field_0xf;
    ip_addr_t current_iphdr_src;
    ip_addr_t current_iphdr_dest;
};

typedef uint32_t evt_field_t;

typedef struct ke_env_tag ke_env_tag, *Pke_env_tag;

struct ke_env_tag {
    evt_field_t evt_field;
    struct co_list queue_sent;
    struct co_list queue_saved;
    struct co_list queue_timer;
    struct mblock_free * mblock_first;
};

typedef struct ke_env_tag.conflict ke_env_tag.conflict, *Pke_env_tag.conflict;

struct ke_env_tag.conflict {
    evt_field_t evt_field;
    struct co_list queue_sent;
    struct co_list queue_saved;
    struct co_list queue_timer;
    struct mblock_free * mblock_first;
};

typedef struct ble_ke_env_tag ble_ke_env_tag, *Pble_ke_env_tag;

struct ble_ke_env_tag {
    struct co_list queue_sent;
    struct co_list queue_saved;
    struct co_list queue_timer;
    struct mblock_free * heap[2];
    uint16_t heap_size[2];
};

typedef atomic_t atomic_val_t;

typedef struct mblock_used mblock_used, *Pmblock_used;

struct mblock_used {
    uint16_t corrupt_check;
    uint16_t size;
};

typedef struct mblock_free.conflict mblock_free.conflict, *Pmblock_free.conflict;

struct mblock_free.conflict {
    struct mblock_free * next;
    uint32_t size;
};

typedef struct mblock_used.conflict mblock_used.conflict, *Pmblock_used.conflict;

struct mblock_used.conflict {
    uint32_t size;
};

typedef struct access_addr access_addr, *Paccess_addr;

struct access_addr {
    uint8_t addr[4];
};

typedef enum adv_filter_policy {
    ADV_ALLOW_SCAN_ANY_CON_ANY=0,
    ADV_ALLOW_SCAN_ANY_CON_WLST=2,
    ADV_ALLOW_SCAN_END=4,
    ADV_ALLOW_SCAN_WLST_CON_ANY=1,
    ADV_ALLOW_SCAN_WLST_CON_WLST=3
} adv_filter_policy;

typedef enum scan_filter_policy {
    SCAN_ALLOW_ADV_ALL=0,
    SCAN_ALLOW_ADV_ALL_AND_INIT_RPA=2,
    SCAN_ALLOW_ADV_END=4,
    SCAN_ALLOW_ADV_WLST=1,
    SCAN_ALLOW_ADV_WLST_AND_INIT_RPA=3
} scan_filter_policy;

typedef struct back_packet_info back_packet_info, *Pback_packet_info;

struct back_packet_info {
    uint8_t used;
    uint8_t advmode_headlen;
    uint8_t head_flags;
    struct bd_addr adva_addr;
    struct bd_addr targeta_addr;
    undefined field_0xf;
    uint16_t adi;
    uint8_t auxptr[3];
    uint8_t syncinfo[18];
    uint8_t txpwr;
    uint8_t datalen;
    uint8_t data[255];
};

typedef enum rnd_addr_type {
    RND_NON_RSLV_ADDR=0,
    RND_RSLV_ADDR=64,
    RND_STATIC_ADDR=-64
} rnd_addr_type;

typedef enum adv_channel_map {
    ADV_ALL_CHNLS_EN=7,
    ADV_CHNL_37_EN=1,
    ADV_CHNL_38_EN=2,
    ADV_CHNL_39_EN=4,
    ADV_CHNL_END=8
} adv_channel_map;

typedef struct crc_init crc_init, *Pcrc_init;

struct crc_init {
    uint8_t crc[3];
};

typedef enum scan_dup_filter_policy {
    SCAN_FILT_DUPLIC_DIS=0,
    SCAN_FILT_DUPLIC_EN=1,
    SCAN_FILT_DUPLIC_END=2
} scan_dup_filter_policy;

typedef enum le_evt_mask {
    LE_ADV_REP_EVT_BIT=1,
    LE_ADV_REP_EVT_MSK=2,
    LE_CH_SEL_ALGO_EVT_BIT=19,
    LE_CH_SEL_ALGO_EVT_MSK=524288,
    LE_CON_CMP_EVT_BIT=0,
    LE_CON_CMP_EVT_MSK=1,
    LE_CON_RD_REM_FEAT_EVT_BIT=3,
    LE_CON_RD_REM_FEAT_EVT_MSK=8,
    LE_CON_UPD_EVT_BIT=2,
    LE_CON_UPD_EVT_MSK=4,
    LE_DATA_LEN_CHG_EVT_BIT=6,
    LE_DATA_LEN_CHG_EVT_MSK=64,
    LE_DFT_EVT_MSK=31,
    LE_DIR_ADV_REP_EVT_BIT=10,
    LE_DIR_ADV_REP_EVT_MSK=1024,
    LE_ENH_CON_CMP_EVT_BIT=9,
    LE_ENH_CON_CMP_EVT_MSK=512,
    LE_EXT_ADV_REP_EVT_BIT=12,
    LE_EXT_ADV_REP_EVT_MSK=4096,
    LE_EXT_ADV_SET_TER_EVT_BIT=17,
    LE_EXT_ADV_SET_TER_EVT_MSK=131072,
    LE_EXT_SCAN_TO_EVT_BIT=16,
    LE_EXT_SCAN_TO_EVT_MSK=65536,
    LE_GEN_DHKEY_CMP_EVT_BIT=8,
    LE_GEN_DHKEY_CMP_EVT_MSK=256,
    LE_LG_TR_KEY_REQ_EVT_BIT=4,
    LE_LG_TR_KEY_REQ_EVT_MSK=16,
    LE_PER_ADV_REP_EVT_BIT=14,
    LE_PER_ADV_REP_EVT_MSK=16384,
    LE_PER_ADV_SYNC_EST_EVT_BIT=13,
    LE_PER_ADV_SYNC_EST_EVT_MSK=8192,
    LE_PER_ADV_SYNC_LOST_EVT_BIT=15,
    LE_PER_ADV_SYNC_LOST_EVT_MSK=-32768,
    LE_PHY_UPD_CMP_EVT_BIT=11,
    LE_PHY_UPD_CMP_EVT_MSK=2048,
    LE_RD_LOC_P256_PUB_KEY_CMP_EVT_BIT=7,
    LE_RD_LOC_P256_PUB_KEY_CMP_EVT_MSK=-128,
    LE_REM_CON_PARA_REQ_EVT_BIT=5,
    LE_REM_CON_PARA_REQ_EVT_MSK=32,
    LE_SCAN_REQ_REC_EVT_BIT=18,
    LE_SCAN_REQ_REC_EVT_MSK=262144
} le_evt_mask;

typedef enum bl_flag_wl {
    LLM_UTIL_BL_CLEAR_WL=1,
    LLM_UTIL_BL_NO_ACTION_WL=0,
    LLM_UTIL_BL_SET_WL=2
} bl_flag_wl;

typedef struct llm_util_cnx_bd_addr_tag llm_util_cnx_bd_addr_tag, *Pllm_util_cnx_bd_addr_tag;

struct llm_util_cnx_bd_addr_tag {
    struct co_list_hdr hdr;
    struct bd_addr dev_addr;
    uint16_t conhdl;
    uint8_t dev_addr_type;
    _Bool in_wl;
    undefined field_0xe;
    undefined field_0xf;
};

typedef struct sha256_link_item sha256_link_item, *Psha256_link_item;

struct sha256_link_item {
    struct SEC_Eng_SHA256_Link_Ctx ctx;
    struct SEC_Eng_SHA_Link_Config_Type linkCfg;
    uint32_t tmp[16];
    uint32_t pad[16];
};

typedef struct sha256_link_item sha256_link_item_t;

typedef struct bt_pub_key_cb bt_pub_key_cb, *Pbt_pub_key_cb;

struct bt_pub_key_cb {
    void (* func)(u8_t *);
    struct bt_pub_key_cb * _next;
};

typedef struct pbuf_rom pbuf_rom, *Ppbuf_rom;

struct pbuf_rom {
    struct pbuf * next;
    void * payload;
};

typedef enum pbuf_layer {
    PBUF_IP=-94,
    PBUF_LINK=-114,
    PBUF_RAW=0,
    PBUF_RAW_TX=-128,
    PBUF_TRANSPORT=-74
} pbuf_layer;

typedef enum pbuf_type {
    PBUF_POOL=386,
    PBUF_RAM=640,
    PBUF_REF=65,
    PBUF_ROM=1
} pbuf_type;

typedef enum SF_Ctrl_Sahb_Type {
    SF_CTRL_FLASH_CLOCK=1,
    SF_CTRL_SAHB_CLOCK=0
} SF_Ctrl_Sahb_Type;

typedef enum SF_Ctrl_Dmy_Mode_Type {
    SF_CTRL_DUMMY_1_LINE=0,
    SF_CTRL_DUMMY_2_LINES=1,
    SF_CTRL_DUMMY_4_LINES=2
} SF_Ctrl_Dmy_Mode_Type;

typedef enum SF_Ctrl_Mode_Type {
    SF_CTRL_QPI_MODE=1,
    SF_CTRL_SPI_MODE=0
} SF_Ctrl_Mode_Type;

typedef enum SF_Ctrl_IO_Type {
    SF_CTRL_DIO_MODE=3,
    SF_CTRL_DO_MODE=1,
    SF_CTRL_NIO_MODE=0,
    SF_CTRL_QIO_MODE=4,
    SF_CTRL_QO_MODE=2
} SF_Ctrl_IO_Type;

typedef enum SF_Ctrl_Data_Mode_Type {
    SF_CTRL_DATA_1_LINE=0,
    SF_CTRL_DATA_2_LINES=1,
    SF_CTRL_DATA_4_LINES=2
} SF_Ctrl_Data_Mode_Type;

typedef struct SF_Ctrl_Cmd_Cfg_Type SF_Ctrl_Cmd_Cfg_Type, *PSF_Ctrl_Cmd_Cfg_Type;

typedef enum SF_Ctrl_Cmd_Mode_Type {
    SF_CTRL_CMD_1_LINE=0,
    SF_CTRL_CMD_4_LINES=1
} SF_Ctrl_Cmd_Mode_Type;

typedef enum SF_Ctrl_Addr_Mode_Type {
    SF_CTRL_ADDR_1_LINE=0,
    SF_CTRL_ADDR_2_LINES=1,
    SF_CTRL_ADDR_4_LINES=2
} SF_Ctrl_Addr_Mode_Type;

struct SF_Ctrl_Cmd_Cfg_Type {
    uint8_t rwFlag;
    enum SF_Ctrl_Cmd_Mode_Type cmdMode;
    enum SF_Ctrl_Addr_Mode_Type addrMode;
    uint8_t addrSize;
    uint8_t dummyClks;
    enum SF_Ctrl_Dmy_Mode_Type dummyMode;
    enum SF_Ctrl_Data_Mode_Type dataMode;
    uint8_t rsv[1];
    uint32_t nbData;
    uint32_t cmdBuf[2];
};

typedef struct SF_Ctrl_Cfg_Type SF_Ctrl_Cfg_Type, *PSF_Ctrl_Cfg_Type;

typedef enum SF_Ctrl_Owner_Type {
    SF_CTRL_OWNER_IAHB=1,
    SF_CTRL_OWNER_SAHB=0
} SF_Ctrl_Owner_Type;

typedef enum SF_Ctrl_Ahb2sif_Type {
    HIGH_SPEED_MODE_CLOCK=0,
    REMOVE_CLOCK_CONSTRAIN=1
} SF_Ctrl_Ahb2sif_Type;

struct SF_Ctrl_Cfg_Type {
    enum SF_Ctrl_Owner_Type owner;
    enum SF_Ctrl_Sahb_Type sahbClock;
    enum SF_Ctrl_Ahb2sif_Type ahb2sifMode;
    uint8_t clkDelay;
    uint8_t clkInvert;
    uint8_t rxClkInvert;
    uint8_t doDelay;
    uint8_t diDelay;
    uint8_t oeDelay;
};

typedef enum SF_Ctrl_Pad_Sel {
    SF_CTRL_EMBEDDED_SEL=0,
    SF_CTRL_EXTERNAL_0TO2_20TO22_SEL=2,
    SF_CTRL_EXTERNAL_17TO22_SEL=1
} SF_Ctrl_Pad_Sel;

typedef enum SF_Ctrl_AES_Key_Type {
    SF_CTRL_AES_128BITS=0,
    SF_CTRL_AES_128BITS_DOUBLE_KEY=3,
    SF_CTRL_AES_192BITS=2,
    SF_CTRL_AES_256BITS=1
} SF_Ctrl_AES_Key_Type;

typedef struct mac_bss_info mac_bss_info, *Pmac_bss_info;

typedef struct mac_edca_param_set mac_edca_param_set, *Pmac_edca_param_set;

typedef struct mobility_domain mobility_domain, *Pmobility_domain;

struct mac_edca_param_set {
    uint8_t qos_info;
    uint8_t acm;
    undefined field_0x2;
    undefined field_0x3;
    uint32_t ac_param[4];
};

struct mobility_domain {
    uint16_t mdid;
    uint8_t ft_capability_policy;
    undefined field_0x3;
};

struct mac_bss_info {
    struct mac_htcapability ht_cap;
    struct mac_addr.conflict bssid;
    struct mac_ssid ssid;
    uint16_t bsstype;
    undefined field_0x4a;
    undefined field_0x4b;
    struct scan_chan_tag * chan;
    uint16_t center_freq1;
    uint16_t center_freq2;
    uint16_t beacon_period;
    uint16_t cap_info;
    struct mac_rateset rate_set;
    undefined field_0x65;
    undefined field_0x66;
    undefined field_0x67;
    struct mac_edca_param_set edca_param;
    int8_t rssi;
    int8_t ppm_rel;
    int8_t ppm_abs;
    uint8_t high_11b_rate;
    uint16_t prot_status;
    uint8_t bw;
    uint8_t phy_bw;
    uint8_t power_constraint;
    undefined field_0x85;
    undefined field_0x86;
    undefined field_0x87;
    uint32_t valid_flags;
    struct mobility_domain mde;
    _Bool is_supplicant_enabled;
    struct SecurityMode_t wpa_wpa2_wep;
    struct Cipher_t.conflict wpa_mcstCipher;
    struct Cipher_t.conflict wpa_ucstCipher;
    struct Cipher_t.conflict rsn_mcstCipher;
    struct Cipher_t.conflict rsn_ucstCipher;
    _Bool is_pmf_required;
    _Bool is_wpa2_prefered;
    uint8_t rsn_wpa_ie[32];
    uint8_t rsn_wpa_ie_len;
    uint16_t beacon_interval;
    uint16_t aid_bitmap;
    uint16_t max_listen_interval;
    uint8_t sec_type;
    undefined field_0xc1;
    undefined field_0xc2;
    undefined field_0xc3;
};

typedef struct me_env_tag me_env_tag, *Pme_env_tag;

struct me_env_tag {
    uint32_t active_vifs;
    uint32_t ps_disable_vifs;
    ke_task_id_t requester_id;
    undefined field_0xa;
    undefined field_0xb;
    struct mac_htcapability ht_cap;
    uint16_t tx_lft;
    _Bool ht_supported;
    undefined field_0x2f;
    struct me_chan_config_req chan;
    uint8_t stbc_nss;
    uint8_t phy_bw_max;
    _Bool ps_on;
    undefined field_0x131;
    undefined field_0x132;
    undefined field_0x133;
};

typedef union anon_union.conflict19 anon_union.conflict19, *Panon_union.conflict19;

union anon_union.conflict19 {
    struct anon_struct.conflict42 wme_action;
    struct anon_struct.conflict43 chan_switch;
    struct anon_struct.conflict43 ext_chan_switch;
    struct anon_struct.conflict44 measurement;
    struct anon_struct.conflict45 addba_req;
    struct anon_struct.conflict46 addba_resp;
    struct anon_struct.conflict47 delba;
    struct anon_struct.conflict43 self_prot;
    struct anon_struct.conflict43 mesh_action;
    struct anon_struct.conflict48 sa_query;
    struct anon_struct.conflict49 ht_smps;
    struct anon_struct.conflict50 ht_notify_cw;
    struct anon_struct.conflict51 tdls_discover_resp;
    struct anon_struct.conflict52 vht_opmode_notif;
    struct anon_struct.conflict53 vht_group_notif;
    struct anon_struct.conflict54 tpc_report;
    struct anon_struct.conflict55 ftm;
};

typedef struct anon_struct.conflict41 anon_struct.conflict41, *Panon_struct.conflict41;

struct anon_struct.conflict41 {
    __le64 timestamp;
    __le16 beacon_int;
    __le16 capab_info;
    u8[0] variable;
};

typedef struct anon_struct.conflict40 anon_struct.conflict40, *Panon_struct.conflict40;

struct anon_struct.conflict40 {
    __le16 capab_info;
    __le16 listen_interval;
    u8 current_ap[6];
    u8[0] variable;
};

typedef union anon_union.conflict20 anon_union.conflict20, *Panon_union.conflict20;

typedef struct anon_struct.conflict36 anon_struct.conflict36, *Panon_struct.conflict36;

typedef struct anon_struct.conflict37 anon_struct.conflict37, *Panon_struct.conflict37;

typedef struct anon_struct.conflict38 anon_struct.conflict38, *Panon_struct.conflict38;

typedef struct anon_struct.conflict39 anon_struct.conflict39, *Panon_struct.conflict39;

struct anon_struct.conflict39 {
    __le16 capab_info;
    __le16 status_code;
    __le16 aid;
    u8[0] variable;
};

struct anon_struct.conflict38 {
    __le16 capab_info;
    __le16 listen_interval;
    u8[0] variable;
};

struct anon_struct.conflict37 {
    __le16 reason_code;
};

struct anon_struct.conflict36 {
    __le16 auth_alg;
    __le16 auth_transaction;
    __le16 status_code;
    u8[0] variable;
};

union anon_union.conflict20 {
    struct anon_struct.conflict36 auth;
    struct anon_struct.conflict37 deauth;
    struct anon_struct.conflict38 assoc_req;
    struct anon_struct.conflict39 assoc_resp;
    struct anon_struct.conflict39 reassoc_resp;
    struct anon_struct.conflict40 reassoc_req;
    struct anon_struct.conflict37 disassoc;
    struct anon_struct.conflict41 beacon;
    struct anon_struct probe_req;
    struct anon_struct.conflict41 probe_resp;
};

typedef struct ieee80211_mgmt ieee80211_mgmt, *Pieee80211_mgmt;

struct ieee80211_mgmt {
    __le16 frame_control;
    __le16 duration;
    u8 da[6];
    u8 sa[6];
    u8 bssid[6];
    __le16 seq_ctrl;
    undefined field_0x18;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
    undefined field_0x1c;
    undefined field_0x1d;
    undefined field_0x1e;
    undefined field_0x1f;
    undefined field_0x20;
    undefined field_0x21;
    undefined field_0x22;
    undefined field_0x23;
    undefined field_0x24;
    undefined field_0x25;
    undefined field_0x26;
    undefined field_0x27;
    undefined field_0x28;
    undefined field_0x29;
    undefined field_0x2a;
    undefined field_0x2b;
    undefined field_0x2c;
    undefined field_0x2d;
    undefined field_0x2e;
    undefined field_0x2f;
    undefined field_0x30;
    undefined field_0x31;
};

typedef enum ieee80211_reasoncode {
    WLAN_REASON_4WAY_HANDSHAKE_TIMEOUT=15,
    WLAN_REASON_CIPHER_SUITE_REJECTED=24,
    WLAN_REASON_CLASS2_FRAME_FROM_NONAUTH_STA=6,
    WLAN_REASON_CLASS3_FRAME_FROM_NONASSOC_STA=7,
    WLAN_REASON_DEAUTH_LEAVING=3,
    WLAN_REASON_DISASSOC_AP_BUSY=5,
    WLAN_REASON_DISASSOC_BAD_POWER=10,
    WLAN_REASON_DISASSOC_BAD_SUPP_CHAN=11,
    WLAN_REASON_DISASSOC_DUE_TO_INACTIVITY=4,
    WLAN_REASON_DISASSOC_LOW_ACK=34,
    WLAN_REASON_DISASSOC_QAP_EXCEED_TXOP=35,
    WLAN_REASON_DISASSOC_QAP_NO_BANDWIDTH=33,
    WLAN_REASON_DISASSOC_STA_HAS_LEFT=8,
    WLAN_REASON_DISASSOC_UNSPECIFIED_QOS=32,
    WLAN_REASON_GROUP_KEY_HANDSHAKE_TIMEOUT=16,
    WLAN_REASON_IEEE8021X_FAILED=23,
    WLAN_REASON_IE_DIFFERENT=17,
    WLAN_REASON_INVALID_AKMP=20,
    WLAN_REASON_INVALID_GROUP_CIPHER=18,
    WLAN_REASON_INVALID_IE=13,
    WLAN_REASON_INVALID_PAIRWISE_CIPHER=19,
    WLAN_REASON_INVALID_RSN_IE_CAP=22,
    WLAN_REASON_MAC_EXISTS_IN_MBSS=64,
    WLAN_REASON_MESH_CHAN=66,
    WLAN_REASON_MESH_CHAN_REGULATORY=65,
    WLAN_REASON_MESH_CLOSE=55,
    WLAN_REASON_MESH_CONFIG=54,
    WLAN_REASON_MESH_CONFIRM_TIMEOUT=57,
    WLAN_REASON_MESH_INCONSISTENT_PARAM=59,
    WLAN_REASON_MESH_INVALID_GTK=58,
    WLAN_REASON_MESH_INVALID_SECURITY=60,
    WLAN_REASON_MESH_MAX_PEERS=53,
    WLAN_REASON_MESH_MAX_RETRIES=56,
    WLAN_REASON_MESH_PATH_DEST_UNREACHABLE=63,
    WLAN_REASON_MESH_PATH_ERROR=61,
    WLAN_REASON_MESH_PATH_NOFORWARD=62,
    WLAN_REASON_MESH_PEER_CANCELED=52,
    WLAN_REASON_MIC_FAILURE=14,
    WLAN_REASON_PREV_AUTH_NOT_VALID=2,
    WLAN_REASON_QSTA_CIPHER_NOT_SUPP=45,
    WLAN_REASON_QSTA_LEAVE_QBSS=36,
    WLAN_REASON_QSTA_NOT_USE=37,
    WLAN_REASON_QSTA_REQUIRE_SETUP=38,
    WLAN_REASON_QSTA_TIMEOUT=39,
    WLAN_REASON_STA_REQ_ASSOC_WITHOUT_AUTH=9,
    WLAN_REASON_TDLS_TEARDOWN_UNREACHABLE=25,
    WLAN_REASON_TDLS_TEARDOWN_UNSPECIFIED=26,
    WLAN_REASON_UNSPECIFIED=1,
    WLAN_REASON_UNSUPP_RSN_VERSION=21
} ieee80211_reasoncode;

typedef struct anon_struct.conflict60 anon_struct.conflict60, *Panon_struct.conflict60;

struct anon_struct.conflict60 {
    u8 category;
    union anon_union_for_u.conflict2 u;
};

typedef struct ke_msg_handler.conflict91 ke_msg_handler.conflict91, *Pke_msg_handler.conflict91;

struct ke_msg_handler.conflict91 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict2 ke_msg_handler.conflict2, *Pke_msg_handler.conflict2;

struct ke_msg_handler.conflict2 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict27 ke_msg_handler.conflict27, *Pke_msg_handler.conflict27;

struct ke_msg_handler.conflict27 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict86 ke_msg_handler.conflict86, *Pke_msg_handler.conflict86;

struct ke_msg_handler.conflict86 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_task_desc.conflict3 ke_task_desc.conflict3, *Pke_task_desc.conflict3;

struct ke_task_desc.conflict3 {
    struct ke_state_handler * state_handler;
    struct ke_state_handler * default_handler;
    ke_state_t * state;
    uint16_t state_max;
    uint16_t idx_max;
};

typedef struct ke_msg_handler.conflict38 ke_msg_handler.conflict38, *Pke_msg_handler.conflict38;

struct ke_msg_handler.conflict38 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict3 ke_msg_handler.conflict3, *Pke_msg_handler.conflict3;

struct ke_msg_handler.conflict3 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict158 ke_msg_handler.conflict158, *Pke_msg_handler.conflict158;

struct ke_msg_handler.conflict158 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict28 ke_msg_handler.conflict28, *Pke_msg_handler.conflict28;

struct ke_msg_handler.conflict28 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_task_desc.conflict1 ke_task_desc.conflict1, *Pke_task_desc.conflict1;

struct ke_task_desc.conflict1 {
    struct ke_state_handler * state_handler;
    struct ke_state_handler * default_handler;
    ke_state_t * state;
    uint16_t state_max;
    uint16_t idx_max;
};

typedef struct ke_task_desc.conflict2 ke_task_desc.conflict2, *Pke_task_desc.conflict2;

struct ke_task_desc.conflict2 {
    struct ke_state_handler * state_handler;
    struct ke_state_handler * default_handler;
    ke_state_t * state;
    uint16_t state_max;
    uint16_t idx_max;
};

typedef struct ke_msg_handler.conflict16 ke_msg_handler.conflict16, *Pke_msg_handler.conflict16;

struct ke_msg_handler.conflict16 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict39 ke_msg_handler.conflict39, *Pke_msg_handler.conflict39;

struct ke_msg_handler.conflict39 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict116 ke_msg_handler.conflict116, *Pke_msg_handler.conflict116;

struct ke_msg_handler.conflict116 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict9 ke_msg_handler.conflict9, *Pke_msg_handler.conflict9;

struct ke_msg_handler.conflict9 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict48 ke_msg_handler.conflict48, *Pke_msg_handler.conflict48;

struct ke_msg_handler.conflict48 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict6 ke_msg_handler.conflict6, *Pke_msg_handler.conflict6;

struct ke_msg_handler.conflict6 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict5 ke_msg_handler.conflict5, *Pke_msg_handler.conflict5;

struct ke_msg_handler.conflict5 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict8 ke_msg_handler.conflict8, *Pke_msg_handler.conflict8;

struct ke_msg_handler.conflict8 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict7 ke_msg_handler.conflict7, *Pke_msg_handler.conflict7;

struct ke_msg_handler.conflict7 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict13 ke_msg_handler.conflict13, *Pke_msg_handler.conflict13;

struct ke_msg_handler.conflict13 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict1 ke_msg_handler.conflict1, *Pke_msg_handler.conflict1;

struct ke_msg_handler.conflict1 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict4 ke_msg_handler.conflict4, *Pke_msg_handler.conflict4;

struct ke_msg_handler.conflict4 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict59 ke_msg_handler.conflict59, *Pke_msg_handler.conflict59;

struct ke_msg_handler.conflict59 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict49 ke_msg_handler.conflict49, *Pke_msg_handler.conflict49;

struct ke_msg_handler.conflict49 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict37 ke_msg_handler.conflict37, *Pke_msg_handler.conflict37;

struct ke_msg_handler.conflict37 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict117 ke_msg_handler.conflict117, *Pke_msg_handler.conflict117;

struct ke_msg_handler.conflict117 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict110 ke_msg_handler.conflict110, *Pke_msg_handler.conflict110;

struct ke_msg_handler.conflict110 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict95 ke_msg_handler.conflict95, *Pke_msg_handler.conflict95;

struct ke_msg_handler.conflict95 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict72 ke_msg_handler.conflict72, *Pke_msg_handler.conflict72;

struct ke_msg_handler.conflict72 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict101 ke_msg_handler.conflict101, *Pke_msg_handler.conflict101;

struct ke_msg_handler.conflict101 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict83 ke_msg_handler.conflict83, *Pke_msg_handler.conflict83;

struct ke_msg_handler.conflict83 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict113 ke_msg_handler.conflict113, *Pke_msg_handler.conflict113;

struct ke_msg_handler.conflict113 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict73 ke_msg_handler.conflict73, *Pke_msg_handler.conflict73;

struct ke_msg_handler.conflict73 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict102 ke_msg_handler.conflict102, *Pke_msg_handler.conflict102;

struct ke_msg_handler.conflict102 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict84 ke_msg_handler.conflict84, *Pke_msg_handler.conflict84;

struct ke_msg_handler.conflict84 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict171 ke_msg_handler.conflict171, *Pke_msg_handler.conflict171;

struct ke_msg_handler.conflict171 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict96 ke_msg_handler.conflict96, *Pke_msg_handler.conflict96;

struct ke_msg_handler.conflict96 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict114 ke_msg_handler.conflict114, *Pke_msg_handler.conflict114;

struct ke_msg_handler.conflict114 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_task_desc.conflict ke_task_desc.conflict, *Pke_task_desc.conflict;

struct ke_task_desc.conflict {
    struct ke_state_handler * state_handler;
    struct ke_state_handler * default_handler;
    ke_state_t * state;
    uint16_t state_max;
    uint16_t idx_max;
};

typedef struct ke_task_desc ke_task_desc, *Pke_task_desc;

struct ke_task_desc {
    struct ke_state_handler * state_handler;
    struct ke_state_handler * default_handler;
    ke_state_t * state;
    uint16_t state_max;
    uint16_t idx_max;
};

typedef struct ke_msg_handler.conflict170 ke_msg_handler.conflict170, *Pke_msg_handler.conflict170;

struct ke_msg_handler.conflict170 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict29 ke_msg_handler.conflict29, *Pke_msg_handler.conflict29;

struct ke_msg_handler.conflict29 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict85 ke_msg_handler.conflict85, *Pke_msg_handler.conflict85;

struct ke_msg_handler.conflict85 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict17 ke_msg_handler.conflict17, *Pke_msg_handler.conflict17;

struct ke_msg_handler.conflict17 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict94 ke_msg_handler.conflict94, *Pke_msg_handler.conflict94;

struct ke_msg_handler.conflict94 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict82 ke_msg_handler.conflict82, *Pke_msg_handler.conflict82;

struct ke_msg_handler.conflict82 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict98 ke_msg_handler.conflict98, *Pke_msg_handler.conflict98;

struct ke_msg_handler.conflict98 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict18 ke_msg_handler.conflict18, *Pke_msg_handler.conflict18;

struct ke_msg_handler.conflict18 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict89 ke_msg_handler.conflict89, *Pke_msg_handler.conflict89;

struct ke_msg_handler.conflict89 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict88 ke_msg_handler.conflict88, *Pke_msg_handler.conflict88;

struct ke_msg_handler.conflict88 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict87 ke_msg_handler.conflict87, *Pke_msg_handler.conflict87;

struct ke_msg_handler.conflict87 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict81 ke_msg_handler.conflict81, *Pke_msg_handler.conflict81;

struct ke_msg_handler.conflict81 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict174 ke_msg_handler.conflict174, *Pke_msg_handler.conflict174;

struct ke_msg_handler.conflict174 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict80 ke_msg_handler.conflict80, *Pke_msg_handler.conflict80;

struct ke_msg_handler.conflict80 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict42 ke_msg_handler.conflict42, *Pke_msg_handler.conflict42;

struct ke_msg_handler.conflict42 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict79 ke_msg_handler.conflict79, *Pke_msg_handler.conflict79;

struct ke_msg_handler.conflict79 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict78 ke_msg_handler.conflict78, *Pke_msg_handler.conflict78;

struct ke_msg_handler.conflict78 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict77 ke_msg_handler.conflict77, *Pke_msg_handler.conflict77;

struct ke_msg_handler.conflict77 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict76 ke_msg_handler.conflict76, *Pke_msg_handler.conflict76;

struct ke_msg_handler.conflict76 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict75 ke_msg_handler.conflict75, *Pke_msg_handler.conflict75;

struct ke_msg_handler.conflict75 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict74 ke_msg_handler.conflict74, *Pke_msg_handler.conflict74;

struct ke_msg_handler.conflict74 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict71 ke_msg_handler.conflict71, *Pke_msg_handler.conflict71;

struct ke_msg_handler.conflict71 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict70 ke_msg_handler.conflict70, *Pke_msg_handler.conflict70;

struct ke_msg_handler.conflict70 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict53 ke_msg_handler.conflict53, *Pke_msg_handler.conflict53;

struct ke_msg_handler.conflict53 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict69 ke_msg_handler.conflict69, *Pke_msg_handler.conflict69;

struct ke_msg_handler.conflict69 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict68 ke_msg_handler.conflict68, *Pke_msg_handler.conflict68;

struct ke_msg_handler.conflict68 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict67 ke_msg_handler.conflict67, *Pke_msg_handler.conflict67;

struct ke_msg_handler.conflict67 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict66 ke_msg_handler.conflict66, *Pke_msg_handler.conflict66;

struct ke_msg_handler.conflict66 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict65 ke_msg_handler.conflict65, *Pke_msg_handler.conflict65;

struct ke_msg_handler.conflict65 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict64 ke_msg_handler.conflict64, *Pke_msg_handler.conflict64;

struct ke_msg_handler.conflict64 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict63 ke_msg_handler.conflict63, *Pke_msg_handler.conflict63;

struct ke_msg_handler.conflict63 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict62 ke_msg_handler.conflict62, *Pke_msg_handler.conflict62;

struct ke_msg_handler.conflict62 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict152 ke_msg_handler.conflict152, *Pke_msg_handler.conflict152;

struct ke_msg_handler.conflict152 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict61 ke_msg_handler.conflict61, *Pke_msg_handler.conflict61;

struct ke_msg_handler.conflict61 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict60 ke_msg_handler.conflict60, *Pke_msg_handler.conflict60;

struct ke_msg_handler.conflict60 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict ke_msg_handler.conflict, *Pke_msg_handler.conflict;

struct ke_msg_handler.conflict {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict106 ke_msg_handler.conflict106, *Pke_msg_handler.conflict106;

struct ke_msg_handler.conflict106 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict97 ke_msg_handler.conflict97, *Pke_msg_handler.conflict97;

struct ke_msg_handler.conflict97 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict43 ke_msg_handler.conflict43, *Pke_msg_handler.conflict43;

struct ke_msg_handler.conflict43 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict58 ke_msg_handler.conflict58, *Pke_msg_handler.conflict58;

struct ke_msg_handler.conflict58 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict57 ke_msg_handler.conflict57, *Pke_msg_handler.conflict57;

struct ke_msg_handler.conflict57 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict56 ke_msg_handler.conflict56, *Pke_msg_handler.conflict56;

struct ke_msg_handler.conflict56 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict164 ke_msg_handler.conflict164, *Pke_msg_handler.conflict164;

struct ke_msg_handler.conflict164 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict55 ke_msg_handler.conflict55, *Pke_msg_handler.conflict55;

struct ke_msg_handler.conflict55 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict54 ke_msg_handler.conflict54, *Pke_msg_handler.conflict54;

struct ke_msg_handler.conflict54 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef enum KE_TASK_STATUS {
    KE_TASK_ALREADY_EXISTS=4,
    KE_TASK_CAPA_EXCEEDED=3,
    KE_TASK_FAIL=1,
    KE_TASK_OK=0,
    KE_TASK_UNKNOWN=2
} KE_TASK_STATUS;

typedef struct ke_msg_handler.conflict52 ke_msg_handler.conflict52, *Pke_msg_handler.conflict52;

struct ke_msg_handler.conflict52 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict51 ke_msg_handler.conflict51, *Pke_msg_handler.conflict51;

struct ke_msg_handler.conflict51 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict50 ke_msg_handler.conflict50, *Pke_msg_handler.conflict50;

struct ke_msg_handler.conflict50 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict139 ke_msg_handler.conflict139, *Pke_msg_handler.conflict139;

struct ke_msg_handler.conflict139 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict137 ke_msg_handler.conflict137, *Pke_msg_handler.conflict137;

struct ke_msg_handler.conflict137 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict138 ke_msg_handler.conflict138, *Pke_msg_handler.conflict138;

struct ke_msg_handler.conflict138 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict135 ke_msg_handler.conflict135, *Pke_msg_handler.conflict135;

struct ke_msg_handler.conflict135 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict136 ke_msg_handler.conflict136, *Pke_msg_handler.conflict136;

struct ke_msg_handler.conflict136 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict133 ke_msg_handler.conflict133, *Pke_msg_handler.conflict133;

struct ke_msg_handler.conflict133 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict134 ke_msg_handler.conflict134, *Pke_msg_handler.conflict134;

struct ke_msg_handler.conflict134 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict131 ke_msg_handler.conflict131, *Pke_msg_handler.conflict131;

struct ke_msg_handler.conflict131 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict132 ke_msg_handler.conflict132, *Pke_msg_handler.conflict132;

struct ke_msg_handler.conflict132 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict130 ke_msg_handler.conflict130, *Pke_msg_handler.conflict130;

struct ke_msg_handler.conflict130 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict103 ke_msg_handler.conflict103, *Pke_msg_handler.conflict103;

struct ke_msg_handler.conflict103 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict119 ke_msg_handler.conflict119, *Pke_msg_handler.conflict119;

struct ke_msg_handler.conflict119 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict128 ke_msg_handler.conflict128, *Pke_msg_handler.conflict128;

struct ke_msg_handler.conflict128 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict129 ke_msg_handler.conflict129, *Pke_msg_handler.conflict129;

struct ke_msg_handler.conflict129 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict126 ke_msg_handler.conflict126, *Pke_msg_handler.conflict126;

struct ke_msg_handler.conflict126 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict127 ke_msg_handler.conflict127, *Pke_msg_handler.conflict127;

struct ke_msg_handler.conflict127 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict124 ke_msg_handler.conflict124, *Pke_msg_handler.conflict124;

struct ke_msg_handler.conflict124 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict125 ke_msg_handler.conflict125, *Pke_msg_handler.conflict125;

struct ke_msg_handler.conflict125 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict122 ke_msg_handler.conflict122, *Pke_msg_handler.conflict122;

struct ke_msg_handler.conflict122 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict123 ke_msg_handler.conflict123, *Pke_msg_handler.conflict123;

struct ke_msg_handler.conflict123 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict120 ke_msg_handler.conflict120, *Pke_msg_handler.conflict120;

struct ke_msg_handler.conflict120 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict121 ke_msg_handler.conflict121, *Pke_msg_handler.conflict121;

struct ke_msg_handler.conflict121 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict115 ke_msg_handler.conflict115, *Pke_msg_handler.conflict115;

struct ke_msg_handler.conflict115 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict108 ke_msg_handler.conflict108, *Pke_msg_handler.conflict108;

struct ke_msg_handler.conflict108 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict109 ke_msg_handler.conflict109, *Pke_msg_handler.conflict109;

struct ke_msg_handler.conflict109 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict118 ke_msg_handler.conflict118, *Pke_msg_handler.conflict118;

struct ke_msg_handler.conflict118 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict111 ke_msg_handler.conflict111, *Pke_msg_handler.conflict111;

struct ke_msg_handler.conflict111 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict112 ke_msg_handler.conflict112, *Pke_msg_handler.conflict112;

struct ke_msg_handler.conflict112 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict99 ke_msg_handler.conflict99, *Pke_msg_handler.conflict99;

struct ke_msg_handler.conflict99 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict93 ke_msg_handler.conflict93, *Pke_msg_handler.conflict93;

struct ke_msg_handler.conflict93 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict92 ke_msg_handler.conflict92, *Pke_msg_handler.conflict92;

struct ke_msg_handler.conflict92 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict90 ke_msg_handler.conflict90, *Pke_msg_handler.conflict90;

struct ke_msg_handler.conflict90 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict107 ke_msg_handler.conflict107, *Pke_msg_handler.conflict107;

struct ke_msg_handler.conflict107 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict104 ke_msg_handler.conflict104, *Pke_msg_handler.conflict104;

struct ke_msg_handler.conflict104 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict105 ke_msg_handler.conflict105, *Pke_msg_handler.conflict105;

struct ke_msg_handler.conflict105 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict100 ke_msg_handler.conflict100, *Pke_msg_handler.conflict100;

struct ke_msg_handler.conflict100 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict23 ke_msg_handler.conflict23, *Pke_msg_handler.conflict23;

struct ke_msg_handler.conflict23 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict175 ke_msg_handler.conflict175, *Pke_msg_handler.conflict175;

struct ke_msg_handler.conflict175 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict173 ke_msg_handler.conflict173, *Pke_msg_handler.conflict173;

struct ke_msg_handler.conflict173 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict172 ke_msg_handler.conflict172, *Pke_msg_handler.conflict172;

struct ke_msg_handler.conflict172 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict34 ke_msg_handler.conflict34, *Pke_msg_handler.conflict34;

struct ke_msg_handler.conflict34 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict168 ke_msg_handler.conflict168, *Pke_msg_handler.conflict168;

struct ke_msg_handler.conflict168 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict169 ke_msg_handler.conflict169, *Pke_msg_handler.conflict169;

struct ke_msg_handler.conflict169 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict166 ke_msg_handler.conflict166, *Pke_msg_handler.conflict166;

struct ke_msg_handler.conflict166 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict167 ke_msg_handler.conflict167, *Pke_msg_handler.conflict167;

struct ke_msg_handler.conflict167 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict165 ke_msg_handler.conflict165, *Pke_msg_handler.conflict165;

struct ke_msg_handler.conflict165 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict162 ke_msg_handler.conflict162, *Pke_msg_handler.conflict162;

struct ke_msg_handler.conflict162 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict163 ke_msg_handler.conflict163, *Pke_msg_handler.conflict163;

struct ke_msg_handler.conflict163 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict160 ke_msg_handler.conflict160, *Pke_msg_handler.conflict160;

struct ke_msg_handler.conflict160 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict161 ke_msg_handler.conflict161, *Pke_msg_handler.conflict161;

struct ke_msg_handler.conflict161 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict159 ke_msg_handler.conflict159, *Pke_msg_handler.conflict159;

struct ke_msg_handler.conflict159 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict24 ke_msg_handler.conflict24, *Pke_msg_handler.conflict24;

struct ke_msg_handler.conflict24 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict157 ke_msg_handler.conflict157, *Pke_msg_handler.conflict157;

struct ke_msg_handler.conflict157 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict155 ke_msg_handler.conflict155, *Pke_msg_handler.conflict155;

struct ke_msg_handler.conflict155 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict156 ke_msg_handler.conflict156, *Pke_msg_handler.conflict156;

struct ke_msg_handler.conflict156 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict153 ke_msg_handler.conflict153, *Pke_msg_handler.conflict153;

struct ke_msg_handler.conflict153 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict154 ke_msg_handler.conflict154, *Pke_msg_handler.conflict154;

struct ke_msg_handler.conflict154 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict151 ke_msg_handler.conflict151, *Pke_msg_handler.conflict151;

struct ke_msg_handler.conflict151 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict150 ke_msg_handler.conflict150, *Pke_msg_handler.conflict150;

struct ke_msg_handler.conflict150 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict47 ke_msg_handler.conflict47, *Pke_msg_handler.conflict47;

struct ke_msg_handler.conflict47 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict148 ke_msg_handler.conflict148, *Pke_msg_handler.conflict148;

struct ke_msg_handler.conflict148 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict149 ke_msg_handler.conflict149, *Pke_msg_handler.conflict149;

struct ke_msg_handler.conflict149 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict146 ke_msg_handler.conflict146, *Pke_msg_handler.conflict146;

struct ke_msg_handler.conflict146 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict147 ke_msg_handler.conflict147, *Pke_msg_handler.conflict147;

struct ke_msg_handler.conflict147 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict144 ke_msg_handler.conflict144, *Pke_msg_handler.conflict144;

struct ke_msg_handler.conflict144 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict145 ke_msg_handler.conflict145, *Pke_msg_handler.conflict145;

struct ke_msg_handler.conflict145 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict142 ke_msg_handler.conflict142, *Pke_msg_handler.conflict142;

struct ke_msg_handler.conflict142 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict143 ke_msg_handler.conflict143, *Pke_msg_handler.conflict143;

struct ke_msg_handler.conflict143 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict140 ke_msg_handler.conflict140, *Pke_msg_handler.conflict140;

struct ke_msg_handler.conflict140 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict141 ke_msg_handler.conflict141, *Pke_msg_handler.conflict141;

struct ke_msg_handler.conflict141 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict46 ke_msg_handler.conflict46, *Pke_msg_handler.conflict46;

struct ke_msg_handler.conflict46 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict45 ke_msg_handler.conflict45, *Pke_msg_handler.conflict45;

struct ke_msg_handler.conflict45 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict44 ke_msg_handler.conflict44, *Pke_msg_handler.conflict44;

struct ke_msg_handler.conflict44 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict41 ke_msg_handler.conflict41, *Pke_msg_handler.conflict41;

struct ke_msg_handler.conflict41 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict40 ke_msg_handler.conflict40, *Pke_msg_handler.conflict40;

struct ke_msg_handler.conflict40 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict21 ke_msg_handler.conflict21, *Pke_msg_handler.conflict21;

struct ke_msg_handler.conflict21 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict36 ke_msg_handler.conflict36, *Pke_msg_handler.conflict36;

struct ke_msg_handler.conflict36 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict35 ke_msg_handler.conflict35, *Pke_msg_handler.conflict35;

struct ke_msg_handler.conflict35 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict33 ke_msg_handler.conflict33, *Pke_msg_handler.conflict33;

struct ke_msg_handler.conflict33 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict32 ke_msg_handler.conflict32, *Pke_msg_handler.conflict32;

struct ke_msg_handler.conflict32 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict31 ke_msg_handler.conflict31, *Pke_msg_handler.conflict31;

struct ke_msg_handler.conflict31 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict30 ke_msg_handler.conflict30, *Pke_msg_handler.conflict30;

struct ke_msg_handler.conflict30 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict26 ke_msg_handler.conflict26, *Pke_msg_handler.conflict26;

struct ke_msg_handler.conflict26 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict25 ke_msg_handler.conflict25, *Pke_msg_handler.conflict25;

struct ke_msg_handler.conflict25 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict22 ke_msg_handler.conflict22, *Pke_msg_handler.conflict22;

struct ke_msg_handler.conflict22 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict20 ke_msg_handler.conflict20, *Pke_msg_handler.conflict20;

struct ke_msg_handler.conflict20 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict19 ke_msg_handler.conflict19, *Pke_msg_handler.conflict19;

struct ke_msg_handler.conflict19 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict15 ke_msg_handler.conflict15, *Pke_msg_handler.conflict15;

struct ke_msg_handler.conflict15 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict14 ke_msg_handler.conflict14, *Pke_msg_handler.conflict14;

struct ke_msg_handler.conflict14 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict12 ke_msg_handler.conflict12, *Pke_msg_handler.conflict12;

struct ke_msg_handler.conflict12 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict11 ke_msg_handler.conflict11, *Pke_msg_handler.conflict11;

struct ke_msg_handler.conflict11 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct ke_msg_handler.conflict10 ke_msg_handler.conflict10, *Pke_msg_handler.conflict10;

struct ke_msg_handler.conflict10 {
    ke_msg_id_t id;
    undefined field_0x2;
    undefined field_0x3;
    int (* func)(ke_msg_id_t, void *, ke_task_id_t, ke_task_id_t);
};

typedef struct mac_addr.conflict231 mac_addr.conflict231, *Pmac_addr.conflict231;

struct mac_addr.conflict231 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict243 mac_addr.conflict243, *Pmac_addr.conflict243;

struct mac_addr.conflict243 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict37 mac_addr.conflict37, *Pmac_addr.conflict37;

struct mac_addr.conflict37 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict263 mac_addr.conflict263, *Pmac_addr.conflict263;

struct mac_addr.conflict263 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict172 mac_addr.conflict172, *Pmac_addr.conflict172;

struct mac_addr.conflict172 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict173 mac_addr.conflict173, *Pmac_addr.conflict173;

struct mac_addr.conflict173 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict174 mac_addr.conflict174, *Pmac_addr.conflict174;

struct mac_addr.conflict174 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict170 mac_addr.conflict170, *Pmac_addr.conflict170;

struct mac_addr.conflict170 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict44 mac_addr.conflict44, *Pmac_addr.conflict44;

struct mac_addr.conflict44 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict67 mac_addr.conflict67, *Pmac_addr.conflict67;

struct mac_addr.conflict67 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict175 mac_addr.conflict175, *Pmac_addr.conflict175;

struct mac_addr.conflict175 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict176 mac_addr.conflict176, *Pmac_addr.conflict176;

struct mac_addr.conflict176 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict178 mac_addr.conflict178, *Pmac_addr.conflict178;

struct mac_addr.conflict178 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict160 mac_addr.conflict160, *Pmac_addr.conflict160;

struct mac_addr.conflict160 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict281 mac_addr.conflict281, *Pmac_addr.conflict281;

struct mac_addr.conflict281 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict282 mac_addr.conflict282, *Pmac_addr.conflict282;

struct mac_addr.conflict282 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict162 mac_addr.conflict162, *Pmac_addr.conflict162;

struct mac_addr.conflict162 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict283 mac_addr.conflict283, *Pmac_addr.conflict283;

struct mac_addr.conflict283 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict284 mac_addr.conflict284, *Pmac_addr.conflict284;

struct mac_addr.conflict284 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict280 mac_addr.conflict280, *Pmac_addr.conflict280;

struct mac_addr.conflict280 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict236 mac_addr.conflict236, *Pmac_addr.conflict236;

struct mac_addr.conflict236 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict32 mac_addr.conflict32, *Pmac_addr.conflict32;

struct mac_addr.conflict32 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict168 mac_addr.conflict168, *Pmac_addr.conflict168;

struct mac_addr.conflict168 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict164 mac_addr.conflict164, *Pmac_addr.conflict164;

struct mac_addr.conflict164 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict285 mac_addr.conflict285, *Pmac_addr.conflict285;

struct mac_addr.conflict285 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict286 mac_addr.conflict286, *Pmac_addr.conflict286;

struct mac_addr.conflict286 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict287 mac_addr.conflict287, *Pmac_addr.conflict287;

struct mac_addr.conflict287 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict193 mac_addr.conflict193, *Pmac_addr.conflict193;

struct mac_addr.conflict193 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict194 mac_addr.conflict194, *Pmac_addr.conflict194;

struct mac_addr.conflict194 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict195 mac_addr.conflict195, *Pmac_addr.conflict195;

struct mac_addr.conflict195 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict190 mac_addr.conflict190, *Pmac_addr.conflict190;

struct mac_addr.conflict190 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict192 mac_addr.conflict192, *Pmac_addr.conflict192;

struct mac_addr.conflict192 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict22 mac_addr.conflict22, *Pmac_addr.conflict22;

struct mac_addr.conflict22 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict197 mac_addr.conflict197, *Pmac_addr.conflict197;

struct mac_addr.conflict197 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict199 mac_addr.conflict199, *Pmac_addr.conflict199;

struct mac_addr.conflict199 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict184 mac_addr.conflict184, *Pmac_addr.conflict184;

struct mac_addr.conflict184 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict180 mac_addr.conflict180, *Pmac_addr.conflict180;

struct mac_addr.conflict180 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict258 mac_addr.conflict258, *Pmac_addr.conflict258;

struct mac_addr.conflict258 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict223 mac_addr.conflict223, *Pmac_addr.conflict223;

struct mac_addr.conflict223 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict186 mac_addr.conflict186, *Pmac_addr.conflict186;

struct mac_addr.conflict186 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict188 mac_addr.conflict188, *Pmac_addr.conflict188;

struct mac_addr.conflict188 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict189 mac_addr.conflict189, *Pmac_addr.conflict189;

struct mac_addr.conflict189 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict66 mac_addr.conflict66, *Pmac_addr.conflict66;

struct mac_addr.conflict66 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict157 mac_addr.conflict157, *Pmac_addr.conflict157;

struct mac_addr.conflict157 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict217 anon_struct.conflict217, *Panon_struct.conflict217;

struct anon_struct.conflict217 {
    uint32_t key[4];
};

typedef struct mac_addr.conflict228 mac_addr.conflict228, *Pmac_addr.conflict228;

struct mac_addr.conflict228 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict216 mac_addr.conflict216, *Pmac_addr.conflict216;

struct mac_addr.conflict216 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict218 mac_addr.conflict218, *Pmac_addr.conflict218;

struct mac_addr.conflict218 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict219 mac_addr.conflict219, *Pmac_addr.conflict219;

struct mac_addr.conflict219 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict212 mac_addr.conflict212, *Pmac_addr.conflict212;

struct mac_addr.conflict212 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict213 mac_addr.conflict213, *Pmac_addr.conflict213;

struct mac_addr.conflict213 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict226 anon_struct.conflict226, *Panon_struct.conflict226;

struct anon_struct.conflict226 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct mac_addr.conflict214 mac_addr.conflict214, *Pmac_addr.conflict214;

struct mac_addr.conflict214 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict227 anon_struct.conflict227, *Panon_struct.conflict227;

struct anon_struct.conflict227 {
    uint32_t key[4];
};

typedef struct mac_addr.conflict215 mac_addr.conflict215, *Pmac_addr.conflict215;

struct mac_addr.conflict215 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict210 mac_addr.conflict210, *Pmac_addr.conflict210;

struct mac_addr.conflict210 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict20 mac_addr.conflict20, *Pmac_addr.conflict20;

struct mac_addr.conflict20 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict228 anon_struct.conflict228, *Panon_struct.conflict228;

struct anon_struct.conflict228 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict229 anon_struct.conflict229, *Panon_struct.conflict229;

struct anon_struct.conflict229 {
    uint32_t key[4];
};

typedef struct mac_addr.conflict209 mac_addr.conflict209, *Pmac_addr.conflict209;

struct mac_addr.conflict209 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict205 mac_addr.conflict205, *Pmac_addr.conflict205;

struct mac_addr.conflict205 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict207 mac_addr.conflict207, *Pmac_addr.conflict207;

struct mac_addr.conflict207 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict208 mac_addr.conflict208, *Pmac_addr.conflict208;

struct mac_addr.conflict208 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict18 mac_addr.conflict18, *Pmac_addr.conflict18;

struct mac_addr.conflict18 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict51 mac_addr.conflict51, *Pmac_addr.conflict51;

struct mac_addr.conflict51 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict19 mac_addr.conflict19, *Pmac_addr.conflict19;

struct mac_addr.conflict19 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict236 anon_struct.conflict236, *Panon_struct.conflict236;

struct anon_struct.conflict236 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict237 anon_struct.conflict237, *Panon_struct.conflict237;

struct anon_struct.conflict237 {
    uint32_t key[4];
};

typedef struct mac_addr.conflict203 mac_addr.conflict203, *Pmac_addr.conflict203;

struct mac_addr.conflict203 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict17 mac_addr.conflict17, *Pmac_addr.conflict17;

struct mac_addr.conflict17 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict15 mac_addr.conflict15, *Pmac_addr.conflict15;

struct mac_addr.conflict15 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict33 mac_addr.conflict33, *Pmac_addr.conflict33;

struct mac_addr.conflict33 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict30 mac_addr.conflict30, *Pmac_addr.conflict30;

struct mac_addr.conflict30 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict240 anon_struct.conflict240, *Panon_struct.conflict240;

struct anon_struct.conflict240 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict241 anon_struct.conflict241, *Panon_struct.conflict241;

struct anon_struct.conflict241 {
    uint32_t key[4];
};

typedef struct mac_addr.conflict117 mac_addr.conflict117, *Pmac_addr.conflict117;

struct mac_addr.conflict117 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict118 mac_addr.conflict118, *Pmac_addr.conflict118;

struct mac_addr.conflict118 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict239 mac_addr.conflict239, *Pmac_addr.conflict239;

struct mac_addr.conflict239 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict119 mac_addr.conflict119, *Pmac_addr.conflict119;

struct mac_addr.conflict119 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict29 mac_addr.conflict29, *Pmac_addr.conflict29;

struct mac_addr.conflict29 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict113 mac_addr.conflict113, *Pmac_addr.conflict113;

struct mac_addr.conflict113 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict234 mac_addr.conflict234, *Pmac_addr.conflict234;

struct mac_addr.conflict234 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict114 mac_addr.conflict114, *Pmac_addr.conflict114;

struct mac_addr.conflict114 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict235 mac_addr.conflict235, *Pmac_addr.conflict235;

struct mac_addr.conflict235 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict27 mac_addr.conflict27, *Pmac_addr.conflict27;

struct mac_addr.conflict27 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict115 mac_addr.conflict115, *Pmac_addr.conflict115;

struct mac_addr.conflict115 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict248 anon_struct.conflict248, *Panon_struct.conflict248;

struct anon_struct.conflict248 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct mac_addr.conflict28 mac_addr.conflict28, *Pmac_addr.conflict28;

struct mac_addr.conflict28 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict116 mac_addr.conflict116, *Pmac_addr.conflict116;

struct mac_addr.conflict116 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict249 anon_struct.conflict249, *Panon_struct.conflict249;

struct anon_struct.conflict249 {
    uint32_t key[4];
};

typedef struct mac_addr.conflict237 mac_addr.conflict237, *Pmac_addr.conflict237;

struct mac_addr.conflict237 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict25 mac_addr.conflict25, *Pmac_addr.conflict25;

struct mac_addr.conflict25 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict230 mac_addr.conflict230, *Pmac_addr.conflict230;

struct mac_addr.conflict230 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict110 mac_addr.conflict110, *Pmac_addr.conflict110;

struct mac_addr.conflict110 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict23 mac_addr.conflict23, *Pmac_addr.conflict23;

struct mac_addr.conflict23 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict111 mac_addr.conflict111, *Pmac_addr.conflict111;

struct mac_addr.conflict111 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict244 anon_struct.conflict244, *Panon_struct.conflict244;

struct anon_struct.conflict244 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct mac_addr.conflict232 mac_addr.conflict232, *Pmac_addr.conflict232;

struct mac_addr.conflict232 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict24 mac_addr.conflict24, *Pmac_addr.conflict24;

struct mac_addr.conflict24 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict112 mac_addr.conflict112, *Pmac_addr.conflict112;

struct mac_addr.conflict112 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict245 anon_struct.conflict245, *Panon_struct.conflict245;

struct anon_struct.conflict245 {
    uint32_t key[4];
};

typedef struct mac_addr.conflict40 mac_addr.conflict40, *Pmac_addr.conflict40;

struct mac_addr.conflict40 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict252 anon_struct.conflict252, *Panon_struct.conflict252;

struct anon_struct.conflict252 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct mac_addr.conflict106 mac_addr.conflict106, *Pmac_addr.conflict106;

struct mac_addr.conflict106 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict107 mac_addr.conflict107, *Pmac_addr.conflict107;

struct mac_addr.conflict107 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict108 mac_addr.conflict108, *Pmac_addr.conflict108;

struct mac_addr.conflict108 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict229 mac_addr.conflict229, *Pmac_addr.conflict229;

struct mac_addr.conflict229 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict109 mac_addr.conflict109, *Pmac_addr.conflict109;

struct mac_addr.conflict109 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict102 mac_addr.conflict102, *Pmac_addr.conflict102;

struct mac_addr.conflict102 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict103 mac_addr.conflict103, *Pmac_addr.conflict103;

struct mac_addr.conflict103 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict224 mac_addr.conflict224, *Pmac_addr.conflict224;

struct mac_addr.conflict224 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict75 mac_addr.conflict75, *Pmac_addr.conflict75;

struct mac_addr.conflict75 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict38 mac_addr.conflict38, *Pmac_addr.conflict38;

struct mac_addr.conflict38 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict104 mac_addr.conflict104, *Pmac_addr.conflict104;

struct mac_addr.conflict104 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict225 mac_addr.conflict225, *Pmac_addr.conflict225;

struct mac_addr.conflict225 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict139 anon_struct.conflict139, *Panon_struct.conflict139;

struct anon_struct.conflict139 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct mac_addr.conflict39 mac_addr.conflict39, *Pmac_addr.conflict39;

struct mac_addr.conflict39 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict105 mac_addr.conflict105, *Pmac_addr.conflict105;

struct mac_addr.conflict105 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict226 mac_addr.conflict226, *Pmac_addr.conflict226;

struct mac_addr.conflict226 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict253 anon_struct.conflict253, *Panon_struct.conflict253;

struct anon_struct.conflict253 {
    uint32_t key[4];
};

typedef struct mac_addr.conflict220 mac_addr.conflict220, *Pmac_addr.conflict220;

struct mac_addr.conflict220 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict34 mac_addr.conflict34, *Pmac_addr.conflict34;

struct mac_addr.conflict34 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict100 mac_addr.conflict100, *Pmac_addr.conflict100;

struct mac_addr.conflict100 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict221 mac_addr.conflict221, *Pmac_addr.conflict221;

struct mac_addr.conflict221 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict35 mac_addr.conflict35, *Pmac_addr.conflict35;

struct mac_addr.conflict35 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict222 mac_addr.conflict222, *Pmac_addr.conflict222;

struct mac_addr.conflict222 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict250 mac_addr.conflict250, *Pmac_addr.conflict250;

struct mac_addr.conflict250 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict139 mac_addr.conflict139, *Pmac_addr.conflict139;

struct mac_addr.conflict139 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict135 mac_addr.conflict135, *Pmac_addr.conflict135;

struct mac_addr.conflict135 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict256 mac_addr.conflict256, *Pmac_addr.conflict256;

struct mac_addr.conflict256 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict136 mac_addr.conflict136, *Pmac_addr.conflict136;

struct mac_addr.conflict136 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict137 mac_addr.conflict137, *Pmac_addr.conflict137;

struct mac_addr.conflict137 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict259 mac_addr.conflict259, *Pmac_addr.conflict259;

struct mac_addr.conflict259 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict131 mac_addr.conflict131, *Pmac_addr.conflict131;

struct mac_addr.conflict131 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict133 mac_addr.conflict133, *Pmac_addr.conflict133;

struct mac_addr.conflict133 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict254 mac_addr.conflict254, *Pmac_addr.conflict254;

struct mac_addr.conflict254 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict240 mac_addr.conflict240, *Pmac_addr.conflict240;

struct mac_addr.conflict240 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict245 mac_addr.conflict245, *Pmac_addr.conflict245;

struct mac_addr.conflict245 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict125 mac_addr.conflict125, *Pmac_addr.conflict125;

struct mac_addr.conflict125 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict246 mac_addr.conflict246, *Pmac_addr.conflict246;

struct mac_addr.conflict246 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict72 mac_addr.conflict72, *Pmac_addr.conflict72;

struct mac_addr.conflict72 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict127 mac_addr.conflict127, *Pmac_addr.conflict127;

struct mac_addr.conflict127 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict248 mac_addr.conflict248, *Pmac_addr.conflict248;

struct mac_addr.conflict248 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict120 mac_addr.conflict120, *Pmac_addr.conflict120;

struct mac_addr.conflict120 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict241 mac_addr.conflict241, *Pmac_addr.conflict241;

struct mac_addr.conflict241 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict121 mac_addr.conflict121, *Pmac_addr.conflict121;

struct mac_addr.conflict121 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict122 mac_addr.conflict122, *Pmac_addr.conflict122;

struct mac_addr.conflict122 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict123 mac_addr.conflict123, *Pmac_addr.conflict123;

struct mac_addr.conflict123 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict244 mac_addr.conflict244, *Pmac_addr.conflict244;

struct mac_addr.conflict244 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict270 mac_addr.conflict270, *Pmac_addr.conflict270;

struct mac_addr.conflict270 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict150 mac_addr.conflict150, *Pmac_addr.conflict150;

struct mac_addr.conflict150 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict271 mac_addr.conflict271, *Pmac_addr.conflict271;

struct mac_addr.conflict271 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict151 mac_addr.conflict151, *Pmac_addr.conflict151;

struct mac_addr.conflict151 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict272 mac_addr.conflict272, *Pmac_addr.conflict272;

struct mac_addr.conflict272 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict152 mac_addr.conflict152, *Pmac_addr.conflict152;

struct mac_addr.conflict152 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict273 mac_addr.conflict273, *Pmac_addr.conflict273;

struct mac_addr.conflict273 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict278 mac_addr.conflict278, *Pmac_addr.conflict278;

struct mac_addr.conflict278 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict62 mac_addr.conflict62, *Pmac_addr.conflict62;

struct mac_addr.conflict62 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict158 mac_addr.conflict158, *Pmac_addr.conflict158;

struct mac_addr.conflict158 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict279 mac_addr.conflict279, *Pmac_addr.conflict279;

struct mac_addr.conflict279 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict159 mac_addr.conflict159, *Pmac_addr.conflict159;

struct mac_addr.conflict159 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict153 mac_addr.conflict153, *Pmac_addr.conflict153;

struct mac_addr.conflict153 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict274 mac_addr.conflict274, *Pmac_addr.conflict274;

struct mac_addr.conflict274 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict154 mac_addr.conflict154, *Pmac_addr.conflict154;

struct mac_addr.conflict154 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict275 mac_addr.conflict275, *Pmac_addr.conflict275;

struct mac_addr.conflict275 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict155 mac_addr.conflict155, *Pmac_addr.conflict155;

struct mac_addr.conflict155 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict276 mac_addr.conflict276, *Pmac_addr.conflict276;

struct mac_addr.conflict276 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict156 mac_addr.conflict156, *Pmac_addr.conflict156;

struct mac_addr.conflict156 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict277 mac_addr.conflict277, *Pmac_addr.conflict277;

struct mac_addr.conflict277 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict260 mac_addr.conflict260, *Pmac_addr.conflict260;

struct mac_addr.conflict260 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict261 mac_addr.conflict261, *Pmac_addr.conflict261;

struct mac_addr.conflict261 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict141 mac_addr.conflict141, *Pmac_addr.conflict141;

struct mac_addr.conflict141 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict262 mac_addr.conflict262, *Pmac_addr.conflict262;

struct mac_addr.conflict262 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict267 mac_addr.conflict267, *Pmac_addr.conflict267;

struct mac_addr.conflict267 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict147 mac_addr.conflict147, *Pmac_addr.conflict147;

struct mac_addr.conflict147 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict268 mac_addr.conflict268, *Pmac_addr.conflict268;

struct mac_addr.conflict268 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict96 mac_addr.conflict96, *Pmac_addr.conflict96;

struct mac_addr.conflict96 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict269 mac_addr.conflict269, *Pmac_addr.conflict269;

struct mac_addr.conflict269 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict149 mac_addr.conflict149, *Pmac_addr.conflict149;

struct mac_addr.conflict149 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict216 anon_struct.conflict216, *Panon_struct.conflict216;

struct anon_struct.conflict216 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct mac_addr.conflict1 mac_addr.conflict1, *Pmac_addr.conflict1;

struct mac_addr.conflict1 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict2 mac_addr.conflict2, *Pmac_addr.conflict2;

struct mac_addr.conflict2 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict264 mac_addr.conflict264, *Pmac_addr.conflict264;

struct mac_addr.conflict264 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict265 mac_addr.conflict265, *Pmac_addr.conflict265;

struct mac_addr.conflict265 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict145 mac_addr.conflict145, *Pmac_addr.conflict145;

struct mac_addr.conflict145 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict266 mac_addr.conflict266, *Pmac_addr.conflict266;

struct mac_addr.conflict266 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict94 mac_addr.conflict94, *Pmac_addr.conflict94;

struct mac_addr.conflict94 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict95 mac_addr.conflict95, *Pmac_addr.conflict95;

struct mac_addr.conflict95 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict92 mac_addr.conflict92, *Pmac_addr.conflict92;

struct mac_addr.conflict92 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict90 mac_addr.conflict90, *Pmac_addr.conflict90;

struct mac_addr.conflict90 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict186 anon_struct.conflict186, *Panon_struct.conflict186;

struct anon_struct.conflict186 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict187 anon_struct.conflict187, *Panon_struct.conflict187;

struct anon_struct.conflict187 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict192 anon_struct.conflict192, *Panon_struct.conflict192;

struct anon_struct.conflict192 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict193 anon_struct.conflict193, *Panon_struct.conflict193;

struct anon_struct.conflict193 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict198 anon_struct.conflict198, *Panon_struct.conflict198;

struct anon_struct.conflict198 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict199 anon_struct.conflict199, *Panon_struct.conflict199;

struct anon_struct.conflict199 {
    uint32_t key[4];
};

typedef struct mac_addr.conflict54 mac_addr.conflict54, *Pmac_addr.conflict54;

struct mac_addr.conflict54 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict55 mac_addr.conflict55, *Pmac_addr.conflict55;

struct mac_addr.conflict55 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict52 mac_addr.conflict52, *Pmac_addr.conflict52;

struct mac_addr.conflict52 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict53 mac_addr.conflict53, *Pmac_addr.conflict53;

struct mac_addr.conflict53 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict50 mac_addr.conflict50, *Pmac_addr.conflict50;

struct mac_addr.conflict50 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict260 anon_struct.conflict260, *Panon_struct.conflict260;

struct anon_struct.conflict260 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict140 anon_struct.conflict140, *Panon_struct.conflict140;

struct anon_struct.conflict140 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict261 anon_struct.conflict261, *Panon_struct.conflict261;

struct anon_struct.conflict261 {
    uint32_t key[4];
};

typedef struct mac_addr.conflict49 mac_addr.conflict49, *Pmac_addr.conflict49;

struct mac_addr.conflict49 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict47 mac_addr.conflict47, *Pmac_addr.conflict47;

struct mac_addr.conflict47 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict145 anon_struct.conflict145, *Panon_struct.conflict145;

struct anon_struct.conflict145 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct mac_addr.conflict45 mac_addr.conflict45, *Pmac_addr.conflict45;

struct mac_addr.conflict45 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict266 anon_struct.conflict266, *Panon_struct.conflict266;

struct anon_struct.conflict266 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict146 anon_struct.conflict146, *Panon_struct.conflict146;

struct anon_struct.conflict146 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict267 anon_struct.conflict267, *Panon_struct.conflict267;

struct anon_struct.conflict267 {
    uint32_t key[4];
};

typedef struct mac_addr.conflict63 mac_addr.conflict63, *Pmac_addr.conflict63;

struct mac_addr.conflict63 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict276 anon_struct.conflict276, *Panon_struct.conflict276;

struct anon_struct.conflict276 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict277 anon_struct.conflict277, *Panon_struct.conflict277;

struct anon_struct.conflict277 {
    uint32_t key[4];
};

typedef struct mac_addr.conflict76 mac_addr.conflict76, *Pmac_addr.conflict76;

struct mac_addr.conflict76 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict77 mac_addr.conflict77, *Pmac_addr.conflict77;

struct mac_addr.conflict77 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict74 mac_addr.conflict74, *Pmac_addr.conflict74;

struct mac_addr.conflict74 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict70 mac_addr.conflict70, *Pmac_addr.conflict70;

struct mac_addr.conflict70 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict282 anon_struct.conflict282, *Panon_struct.conflict282;

struct anon_struct.conflict282 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict162 anon_struct.conflict162, *Panon_struct.conflict162;

struct anon_struct.conflict162 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict283 anon_struct.conflict283, *Panon_struct.conflict283;

struct anon_struct.conflict283 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict163 anon_struct.conflict163, *Panon_struct.conflict163;

struct anon_struct.conflict163 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict280 anon_struct.conflict280, *Panon_struct.conflict280;

struct anon_struct.conflict280 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict281 anon_struct.conflict281, *Panon_struct.conflict281;

struct anon_struct.conflict281 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict169 anon_struct.conflict169, *Panon_struct.conflict169;

struct anon_struct.conflict169 {
    uint32_t key[4];
};

typedef struct mac_addr.conflict69 mac_addr.conflict69, *Pmac_addr.conflict69;

struct mac_addr.conflict69 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict168 anon_struct.conflict168, *Panon_struct.conflict168;

struct anon_struct.conflict168 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct mac_addr.conflict68 mac_addr.conflict68, *Pmac_addr.conflict68;

struct mac_addr.conflict68 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict86 mac_addr.conflict86, *Pmac_addr.conflict86;

struct mac_addr.conflict86 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict84 mac_addr.conflict84, *Pmac_addr.conflict84;

struct mac_addr.conflict84 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict81 mac_addr.conflict81, *Pmac_addr.conflict81;

struct mac_addr.conflict81 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict82 mac_addr.conflict82, *Pmac_addr.conflict82;

struct mac_addr.conflict82 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict80 mac_addr.conflict80, *Pmac_addr.conflict80;

struct mac_addr.conflict80 {
    uint16_t array[3];
};

typedef struct anon_struct.conflict172 anon_struct.conflict172, *Panon_struct.conflict172;

struct anon_struct.conflict172 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict173 anon_struct.conflict173, *Panon_struct.conflict173;

struct anon_struct.conflict173 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict170 anon_struct.conflict170, *Panon_struct.conflict170;

struct anon_struct.conflict170 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict171 anon_struct.conflict171, *Panon_struct.conflict171;

struct anon_struct.conflict171 {
    uint32_t key[4];
};

typedef struct anon_struct.conflict176 anon_struct.conflict176, *Panon_struct.conflict176;

struct anon_struct.conflict176 {
    uint32_t tx_key[2];
    uint32_t rx_key[2];
};

typedef struct anon_struct.conflict177 anon_struct.conflict177, *Panon_struct.conflict177;

struct anon_struct.conflict177 {
    uint32_t key[4];
};

typedef struct mac_addr.conflict78 mac_addr.conflict78, *Pmac_addr.conflict78;

struct mac_addr.conflict78 {
    uint16_t array[3];
};

typedef struct mac_addr.conflict79 mac_addr.conflict79, *Pmac_addr.conflict79;

struct mac_addr.conflict79 {
    uint16_t array[3];
};

typedef struct _uart_ioctrl_wait_read _uart_ioctrl_wait_read, *P_uart_ioctrl_wait_read;

struct _uart_ioctrl_wait_read {
    char * buf;
    int read_size;
    uint32_t timeout;
};

typedef struct _uart_ioctrl_config _uart_ioctrl_config, *P_uart_ioctrl_config;

typedef struct _uart_ioctrl_config uart_ioc_config_t;

typedef enum ioc_uart_parity_t {
    IO_UART_PARITY_EVEN=2,
    IO_UART_PARITY_NONE=0,
    IO_UART_PARITY_ODD=1
} ioc_uart_parity_t;

struct _uart_ioctrl_config {
    uint32_t baud;
    enum ioc_uart_parity_t parity;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
};

typedef struct _uart_ioctrl_wait_read uart_ioc_waitread_t;

typedef struct anon_struct.conflict1 anon_struct.conflict1, *Panon_struct.conflict1;

struct anon_struct.conflict1 {
    uint8_t partition_active_idx;
    uint8_t pad[3];
    struct PtTable_Stuff_Config table;
};

typedef enum llc_util_enc_state {
    LLC_ENC_DISABLED=0,
    LLC_ENC_ENABLE=3,
    LLC_ENC_FLOW_OFF=12,
    LLC_ENC_PAUSE_PENDING=32,
    LLC_ENC_REFRESH_PENDING=16,
    LLC_ENC_RX=2,
    LLC_ENC_RX_FLOW_OFF=8,
    LLC_ENC_TX=1,
    LLC_ENC_TX_FLOW_OFF=4
} llc_util_enc_state;

typedef struct HALPartition_Entry_Config HALPartition_Entry_Config, *PHALPartition_Entry_Config;

struct HALPartition_Entry_Config {
    uint8_t type;
    uint8_t device;
    uint8_t activeIndex;
    uint8_t name[9];
    uint32_t Address[2];
    uint32_t maxLen[2];
    uint32_t len;
    uint32_t age;
};

typedef enum HAL_Err_Type {
    HAL_ERROR=1,
    HAL_SUCCESS=0
} HAL_Err_Type;

typedef struct NoHostSecurityParams_t NoHostSecurityParams_t, *PNoHostSecurityParams_t;

struct NoHostSecurityParams_t {
    UINT8 CipherType;
    UINT8 MulticastCipher;
    UINT8 UnicastCipher;
    char PSKPassPhrase[64];
};

typedef struct phy_hal_tag phy_hal_tag, *Pphy_hal_tag;

struct phy_hal_tag {
    int16_t temperature;
    uint8_t capcode;
    undefined field_0x3;
};

typedef struct anon_struct.conflict11 anon_struct.conflict11, *Panon_struct.conflict11;

struct anon_struct.conflict11 {
    void * handle;
    int fd;
};

typedef struct event_list_node_t event_list_node_t, *Pevent_list_node_t;

struct event_list_node_t {
    dlist_t node;
    void (* cb)(struct input_event_t *, void *);
    void * priv;
    uint16_t type_filter;
    undefined field_0x12;
    undefined field_0x13;
};

typedef struct Bl_MD5_CTX Bl_MD5_CTX, *PBl_MD5_CTX;

struct Bl_MD5_CTX {
    ulong state[4];
    ulong count[2];
    ulong scratch[16];
    uchar buffer[64];
};

typedef struct ke_task_elem ke_task_elem, *Pke_task_elem;

struct ke_task_elem {
    struct ke_task_desc * p_desc;
};

typedef struct ble_ke_task_env_tag ble_ke_task_env_tag, *Pble_ke_task_env_tag;

struct ble_ke_task_env_tag {
    struct ke_task_elem task_list[5];
};

typedef struct input_t input_t, *Pinput_t;

struct input_t {
    int8_t rssi;
    int8_t lna;
    undefined field_0x2;
    undefined field_0x3;
    float ppm;
    uint8_t new;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
};

typedef struct pa_state_t pa_state_t, *Ppa_state_t;

struct pa_state_t {
    uint8_t used;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    uint32_t vif_tag;
    struct input_t input_buffer[8];
    int8_t input_buffer_ptr;
    undefined field_0x69;
    undefined field_0x6a;
    undefined field_0x6b;
    uint32_t last_update;
    int8_t rss;
    int8_t rss_acq;
    int8_t rss_trk;
    int8_t rss_state;
    uint8_t rss_hit_count;
    undefined field_0x75;
    undefined field_0x76;
    undefined field_0x77;
    uint32_t rss_count;
    int8_t ris;
    undefined field_0x7d;
    undefined field_0x7e;
    undefined field_0x7f;
    float ce;
    int8_t ce_in;
    int8_t ce_acq;
    int8_t ce_trk;
    int8_t ce_state;
    int8_t ce_num_up_cmds;
    int8_t ce_num_dn_cmds;
    undefined field_0x8a;
    undefined field_0x8b;
};

typedef struct rvec_t rvec_t, *Prvec_t;

struct rvec_t {
    uint32_t leg_length:12;
    uint32_t leg_rate:4;
    uint32_t ht_length:16;
    uint32_t _ht_length:4;
    uint32_t short_gi:1;
    uint32_t stbc:2;
    uint32_t smoothing:1;
    uint32_t mcs:7;
    uint32_t pre_type:1;
    uint32_t format_mod:3;
    uint32_t ch_bw:2;
    uint32_t n_sts:3;
    uint32_t lsig_valid:1;
    uint32_t sounding:1;
    uint32_t num_extn_ss:2;
    uint32_t aggregation:1;
    uint32_t fec_coding:1;
    uint32_t dyn_bw:1;
    uint32_t doze_not_allowed:1;
    uint32_t antenna_set:8;
    uint32_t partial_aid:9;
    uint32_t group_id:6;
    uint32_t reserved_1c:1;
    int32_t rssi1:8;
    int32_t rssi2:8;
    int32_t agc_lna:4;
    int32_t agc_rbb1:5;
    int32_t agc_dg:7;
    uint32_t reserved_1d:8;
    uint32_t rcpi:8;
    uint32_t evm1:8;
    uint32_t evm2:8;
    uint32_t freqoff_lo:8;
    uint32_t freqoff_hi:8;
    uint32_t reserved2b_1:8;
    uint32_t reserved2b_2:8;
    uint32_t reserved2b_3:8;
};

typedef struct rvec_t.conflict1 rvec_t.conflict1, *Prvec_t.conflict1;

struct rvec_t.conflict1 {
    uint32_t leg_length:12;
    uint32_t leg_rate:4;
    uint32_t ht_length:16;
    uint32_t _ht_length:4;
    uint32_t short_gi:1;
    uint32_t stbc:2;
    uint32_t smoothing:1;
    uint32_t mcs:7;
    uint32_t pre_type:1;
    uint32_t format_mod:3;
    uint32_t ch_bw:2;
    uint32_t n_sts:3;
    uint32_t lsig_valid:1;
    uint32_t sounding:1;
    uint32_t num_extn_ss:2;
    uint32_t aggregation:1;
    uint32_t fec_coding:1;
    uint32_t dyn_bw:1;
    uint32_t doze_not_allowed:1;
    uint32_t antenna_set:8;
    uint32_t partial_aid:9;
    uint32_t group_id:6;
    uint32_t reserved_1c:1;
    int32_t rssi1:8;
    int32_t rssi2:8;
    int32_t agc_lna:4;
    int32_t agc_rbb1:5;
    int32_t agc_dg:7;
    uint32_t reserved_1d:8;
    uint32_t rcpi:8;
    uint32_t evm1:8;
    uint32_t evm2:8;
    uint32_t freqoff_lo:8;
    uint32_t freqoff_hi:8;
    uint32_t reserved2b_1:8;
    uint32_t reserved2b_2:8;
    uint32_t reserved2b_3:8;
};

typedef struct rvec_t.conflict rvec_t.conflict, *Prvec_t.conflict;

struct rvec_t.conflict {
    uint32_t leg_length:12;
    uint32_t leg_rate:4;
    uint32_t ht_length:16;
    uint32_t _ht_length:4;
    uint32_t short_gi:1;
    uint32_t stbc:2;
    uint32_t smoothing:1;
    uint32_t mcs:7;
    uint32_t pre_type:1;
    uint32_t format_mod:3;
    uint32_t ch_bw:2;
    uint32_t n_sts:3;
    uint32_t lsig_valid:1;
    uint32_t sounding:1;
    uint32_t num_extn_ss:2;
    uint32_t aggregation:1;
    uint32_t fec_coding:1;
    uint32_t dyn_bw:1;
    uint32_t doze_not_allowed:1;
    uint32_t antenna_set:8;
    uint32_t partial_aid:9;
    uint32_t group_id:6;
    uint32_t reserved_1c:1;
    int32_t rssi1:8;
    int32_t rssi2:8;
    int32_t agc_lna:4;
    int32_t agc_rbb1:5;
    int32_t agc_dg:7;
    uint32_t reserved_1d:8;
    uint32_t rcpi:8;
    uint32_t evm1:8;
    uint32_t evm2:8;
    uint32_t freqoff_lo:8;
    uint32_t freqoff_hi:8;
    uint32_t reserved2b_1:8;
    uint32_t reserved2b_2:8;
    uint32_t reserved2b_3:8;
};

typedef struct sm_env_tag sm_env_tag, *Psm_env_tag;

struct sm_env_tag {
    struct sm_connect_req * connect_param;
    struct sm_connect_ind * connect_ind;
    struct co_list bss_config;
    _Bool join_passive;
    _Bool ft_over_ds;
    undefined field_0x12;
    undefined field_0x13;
    int exist_ssid_idx;
    struct mac_addr.conflict47 ft_old_bssid;
    undefined field_0x1e;
    undefined field_0x1f;
};

typedef struct sm_env_tag.conflict1 sm_env_tag.conflict1, *Psm_env_tag.conflict1;

struct sm_env_tag.conflict1 {
    struct sm_connect_req * connect_param;
    struct sm_connect_ind * connect_ind;
    struct co_list bss_config;
    _Bool join_passive;
    _Bool ft_over_ds;
    undefined field_0x12;
    undefined field_0x13;
    int exist_ssid_idx;
    struct mac_addr.conflict97 ft_old_bssid;
    undefined field_0x1e;
    undefined field_0x1f;
};

typedef struct sm_env_tag.conflict sm_env_tag.conflict, *Psm_env_tag.conflict;

struct sm_env_tag.conflict {
    struct sm_connect_req * connect_param;
    struct sm_connect_ind * connect_ind;
    struct co_list bss_config;
    _Bool join_passive;
    _Bool ft_over_ds;
    undefined field_0x12;
    undefined field_0x13;
    int exist_ssid_idx;
    struct mac_addr.conflict56 ft_old_bssid;
    undefined field_0x1e;
    undefined field_0x1f;
};

typedef struct ke_timer ke_timer, *Pke_timer;

struct ke_timer {
    struct ke_timer * next;
    ke_msg_id_t id;
    ke_task_id_t task;
    uint32_t time;
};

typedef struct anon_struct.conflict2 anon_struct.conflict2, *Panon_struct.conflict2;

struct anon_struct.conflict2 {
    uint32_t magic;
    struct SPI_Flash_Cfg_Type flashCfg;
};

typedef struct igmp_group igmp_group, *Pigmp_group;

struct igmp_group {
    struct igmp_group * next;
    ip4_addr_t group_address;
    u8_t last_reporter_flag;
    u8_t group_state;
    u16_t timer;
    u8_t use;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
};

typedef struct igmp_msg igmp_msg, *Pigmp_msg;

struct igmp_msg {
    u8_t igmp_msgtype;
    u8_t igmp_maxresp;
    u16_t igmp_checksum;
    ip4_addr_p_t igmp_group_address;
};

typedef struct env_hdr_data env_hdr_data, *Penv_hdr_data;

typedef struct env_hdr_data * env_hdr_data_t;

struct env_hdr_data {
    uint8_t status_table[5];
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t magic;
    uint32_t len;
    uint32_t crc32;
    uint8_t name_len;
    undefined field_0x15;
    undefined field_0x16;
    undefined field_0x17;
    uint32_t value_len;
};

typedef struct anon_struct.conflict115 anon_struct.conflict115, *Panon_struct.conflict115;

struct anon_struct.conflict115 {
    uint8_t store[3];
    uint8_t dirty[3];
};

typedef struct anon_struct.conflict116 anon_struct.conflict116, *Panon_struct.conflict116;

typedef enum sector_store_status {
    SECTOR_STORE_EMPTY=1,
    SECTOR_STORE_FULL=3,
    SECTOR_STORE_STATUS_NUM=4,
    SECTOR_STORE_UNUSED=0,
    SECTOR_STORE_USING=2
} sector_store_status;

typedef enum sector_store_status sector_store_status_t;

typedef enum sector_dirty_status {
    SECTOR_DIRTY_FALSE=1,
    SECTOR_DIRTY_GC=3,
    SECTOR_DIRTY_STATUS_NUM=4,
    SECTOR_DIRTY_TRUE=2,
    SECTOR_DIRTY_UNUSED=0
} sector_dirty_status;

typedef enum sector_dirty_status sector_dirty_status_t;

struct anon_struct.conflict116 {
    sector_store_status_t store;
    sector_dirty_status_t dirty;
};

typedef struct sector_cache_node sector_cache_node, *Psector_cache_node;

struct sector_cache_node {
    uint32_t addr;
    uint32_t empty_addr;
};

typedef struct sector_meta_data sector_meta_data, *Psector_meta_data;

typedef struct sector_meta_data * sector_meta_data_t;

typedef struct anon_struct_for_status anon_struct_for_status, *Panon_struct_for_status;

struct anon_struct_for_status {
    sector_store_status_t store;
    sector_dirty_status_t dirty;
};

struct sector_meta_data {
    _Bool check_ok;
    struct anon_struct_for_status status;
    undefined field_0x3;
    uint32_t addr;
    uint32_t magic;
    uint32_t combined;
    size_t remain;
    uint32_t empty_env;
};

typedef struct env_cache_node env_cache_node, *Penv_cache_node;

struct env_cache_node {
    uint16_t name_crc;
    uint16_t active;
    uint32_t addr;
};

typedef struct sector_hdr_data sector_hdr_data, *Psector_hdr_data;

typedef struct anon_struct_for_status_table anon_struct_for_status_table, *Panon_struct_for_status_table;

struct anon_struct_for_status_table {
    uint8_t store[3];
    uint8_t dirty[3];
};

struct sector_hdr_data {
    struct anon_struct_for_status_table status_table;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t magic;
    uint32_t combined;
    uint32_t reserved;
};

typedef struct ecc_result_ind ecc_result_ind, *Pecc_result_ind;

struct ecc_result_ind {
    uint8_t key_res_x[32];
    uint8_t key_res_y[32];
};

typedef uint32_t u_int32;

typedef struct ecc_elt_tag ecc_elt_tag, *Pecc_elt_tag;

typedef struct ECC_Jacobian_Point256 ECC_Jacobian_Point256, *PECC_Jacobian_Point256;

typedef struct bigHex256 bigHex256, *PbigHex256;

struct bigHex256 {
    u_int32 num[8];
    u_int32 len;
    u_int32 sign;
};

struct ECC_Jacobian_Point256 {
    struct bigHex256 x;
    struct bigHex256 y;
    struct bigHex256 z;
};

struct ecc_elt_tag {
    struct co_list_hdr hdr;
    u_int32 Point_Mul_Word256;
    struct ECC_Jacobian_Point256 Jacobian_PointQ256;
    struct ECC_Jacobian_Point256 Jacobian_PointR256;
    struct bigHex256 Pk256;
    ke_msg_id_t msg_id;
    ke_task_id_t client_id;
    uint32_t current_val;
    uint32_t bit_cursor;
    uint8_t key_type;
    undefined field_0x12d;
    undefined field_0x12e;
    undefined field_0x12f;
    struct ECC_Jacobian_Point256 * win_4_table;
};

typedef uint8_t u_int8;

typedef struct ecc_env_tag ecc_env_tag, *Pecc_env_tag;

struct ecc_env_tag {
    struct co_list ongoing_mul;
};

typedef struct ECC_Point256 ECC_Point256, *PECC_Point256;

struct ECC_Point256 {
    struct bigHex256 x;
    struct bigHex256 y;
};

typedef ulonglong u64;

typedef struct txdesc_host.conflict19 txdesc_host.conflict19, *Ptxdesc_host.conflict19;

typedef struct hostdesc.conflict32 hostdesc.conflict32, *Phostdesc.conflict32;

struct hostdesc.conflict32 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict168 eth_dest_addr;
    struct mac_addr.conflict169 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict19 {
    uint32_t ready;
    struct hostdesc.conflict32 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict20 txdesc_host.conflict20, *Ptxdesc_host.conflict20;

typedef struct hostdesc.conflict33 hostdesc.conflict33, *Phostdesc.conflict33;

struct hostdesc.conflict33 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict170 eth_dest_addr;
    struct mac_addr.conflict171 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict20 {
    uint32_t ready;
    struct hostdesc.conflict33 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict5 txdesc_host.conflict5, *Ptxdesc_host.conflict5;

typedef struct hostdesc.conflict14 hostdesc.conflict14, *Phostdesc.conflict14;

struct hostdesc.conflict14 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict92 eth_dest_addr;
    struct mac_addr.conflict93 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict5 {
    uint32_t ready;
    struct hostdesc.conflict14 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict9 txdesc_host.conflict9, *Ptxdesc_host.conflict9;

typedef struct hostdesc.conflict20 hostdesc.conflict20, *Phostdesc.conflict20;

struct hostdesc.conflict20 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict131 eth_dest_addr;
    struct mac_addr.conflict132 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict9 {
    uint32_t ready;
    struct hostdesc.conflict20 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict6 txdesc_host.conflict6, *Ptxdesc_host.conflict6;

typedef struct hostdesc.conflict17 hostdesc.conflict17, *Phostdesc.conflict17;

struct hostdesc.conflict17 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict125 eth_dest_addr;
    struct mac_addr.conflict126 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict6 {
    uint32_t ready;
    struct hostdesc.conflict17 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict7 txdesc_host.conflict7, *Ptxdesc_host.conflict7;

typedef struct hostdesc.conflict18 hostdesc.conflict18, *Phostdesc.conflict18;

struct hostdesc.conflict18 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict127 eth_dest_addr;
    struct mac_addr.conflict128 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict7 {
    uint32_t ready;
    struct hostdesc.conflict18 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict4 txdesc_host.conflict4, *Ptxdesc_host.conflict4;

typedef struct hostdesc.conflict13 hostdesc.conflict13, *Phostdesc.conflict13;

struct hostdesc.conflict13 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict90 eth_dest_addr;
    struct mac_addr.conflict91 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict4 {
    uint32_t ready;
    struct hostdesc.conflict13 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict2 txdesc_host.conflict2, *Ptxdesc_host.conflict2;

typedef struct hostdesc.conflict11 hostdesc.conflict11, *Phostdesc.conflict11;

struct hostdesc.conflict11 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict86 eth_dest_addr;
    struct mac_addr.conflict87 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict2 {
    uint32_t ready;
    struct hostdesc.conflict11 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict14 txdesc_host.conflict14, *Ptxdesc_host.conflict14;

typedef struct hostdesc.conflict26 hostdesc.conflict26, *Phostdesc.conflict26;

struct hostdesc.conflict26 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict145 eth_dest_addr;
    struct mac_addr.conflict146 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict14 {
    uint32_t ready;
    struct hostdesc.conflict26 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict1 txdesc_host.conflict1, *Ptxdesc_host.conflict1;

typedef struct hostdesc.conflict10 hostdesc.conflict10, *Phostdesc.conflict10;

struct hostdesc.conflict10 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict84 eth_dest_addr;
    struct mac_addr.conflict85 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict1 {
    uint32_t ready;
    struct hostdesc.conflict10 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict25 txdesc_host.conflict25, *Ptxdesc_host.conflict25;

typedef struct hostdesc.conflict39 hostdesc.conflict39, *Phostdesc.conflict39;

struct hostdesc.conflict39 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict186 eth_dest_addr;
    struct mac_addr.conflict187 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict25 {
    uint32_t ready;
    struct hostdesc.conflict39 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict15 txdesc_host.conflict15, *Ptxdesc_host.conflict15;

typedef struct hostdesc.conflict27 hostdesc.conflict27, *Phostdesc.conflict27;

struct hostdesc.conflict27 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict147 eth_dest_addr;
    struct mac_addr.conflict148 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict15 {
    uint32_t ready;
    struct hostdesc.conflict27 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict9 hostdesc.conflict9, *Phostdesc.conflict9;

struct hostdesc.conflict9 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict82 eth_dest_addr;
    struct mac_addr.conflict83 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict8 hostdesc.conflict8, *Phostdesc.conflict8;

struct hostdesc.conflict8 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict70 eth_dest_addr;
    struct mac_addr.conflict71 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict7 hostdesc.conflict7, *Phostdesc.conflict7;

struct hostdesc.conflict7 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict63 eth_dest_addr;
    struct mac_addr.conflict64 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict10 txdesc_host.conflict10, *Ptxdesc_host.conflict10;

typedef struct hostdesc.conflict21 hostdesc.conflict21, *Phostdesc.conflict21;

struct hostdesc.conflict21 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict133 eth_dest_addr;
    struct mac_addr.conflict134 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict10 {
    uint32_t ready;
    struct hostdesc.conflict21 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict2 hostdesc.conflict2, *Phostdesc.conflict2;

struct hostdesc.conflict2 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict20 eth_dest_addr;
    struct mac_addr.conflict21 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict1 hostdesc.conflict1, *Phostdesc.conflict1;

struct hostdesc.conflict1 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict15 eth_dest_addr;
    struct mac_addr.conflict16 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict6 hostdesc.conflict6, *Phostdesc.conflict6;

struct hostdesc.conflict6 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict45 eth_dest_addr;
    struct mac_addr.conflict46 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict5 hostdesc.conflict5, *Phostdesc.conflict5;

struct hostdesc.conflict5 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict35 eth_dest_addr;
    struct mac_addr.conflict36 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict4 hostdesc.conflict4, *Phostdesc.conflict4;

struct hostdesc.conflict4 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict30 eth_dest_addr;
    struct mac_addr.conflict31 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict3 hostdesc.conflict3, *Phostdesc.conflict3;

struct hostdesc.conflict3 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict25 eth_dest_addr;
    struct mac_addr.conflict26 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict38 hostdesc.conflict38, *Phostdesc.conflict38;

struct hostdesc.conflict38 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict184 eth_dest_addr;
    struct mac_addr.conflict185 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict34 txdesc_host.conflict34, *Ptxdesc_host.conflict34;

typedef struct hostdesc.conflict57 hostdesc.conflict57, *Phostdesc.conflict57;

struct hostdesc.conflict57 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict254 eth_dest_addr;
    struct mac_addr.conflict255 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict34 {
    uint32_t ready;
    struct hostdesc.conflict57 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict36 hostdesc.conflict36, *Phostdesc.conflict36;

struct hostdesc.conflict36 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict180 eth_dest_addr;
    struct mac_addr.conflict181 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict34 hostdesc.conflict34, *Phostdesc.conflict34;

struct hostdesc.conflict34 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict176 eth_dest_addr;
    struct mac_addr.conflict177 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict35 hostdesc.conflict35, *Phostdesc.conflict35;

struct hostdesc.conflict35 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict178 eth_dest_addr;
    struct mac_addr.conflict179 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict30 hostdesc.conflict30, *Phostdesc.conflict30;

struct hostdesc.conflict30 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict164 eth_dest_addr;
    struct mac_addr.conflict165 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict49 hostdesc.conflict49, *Phostdesc.conflict49;

struct hostdesc.conflict49 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict226 eth_dest_addr;
    struct mac_addr.conflict227 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict30 txdesc_host.conflict30, *Ptxdesc_host.conflict30;

typedef struct hostdesc.conflict46 hostdesc.conflict46, *Phostdesc.conflict46;

struct hostdesc.conflict46 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict205 eth_dest_addr;
    struct mac_addr.conflict206 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict30 {
    uint32_t ready;
    struct hostdesc.conflict46 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict47 hostdesc.conflict47, *Phostdesc.conflict47;

struct hostdesc.conflict47 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict210 eth_dest_addr;
    struct mac_addr.conflict211 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict31 txdesc_host.conflict31, *Ptxdesc_host.conflict31;

typedef struct hostdesc.conflict54 hostdesc.conflict54, *Phostdesc.conflict54;

struct hostdesc.conflict54 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict248 eth_dest_addr;
    struct mac_addr.conflict249 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict31 {
    uint32_t ready;
    struct hostdesc.conflict54 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict48 hostdesc.conflict48, *Phostdesc.conflict48;

struct hostdesc.conflict48 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict216 eth_dest_addr;
    struct mac_addr.conflict217 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict32 txdesc_host.conflict32, *Ptxdesc_host.conflict32;

typedef struct hostdesc.conflict55 hostdesc.conflict55, *Phostdesc.conflict55;

struct hostdesc.conflict55 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict250 eth_dest_addr;
    struct mac_addr.conflict251 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict32 {
    uint32_t ready;
    struct hostdesc.conflict55 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict45 hostdesc.conflict45, *Phostdesc.conflict45;

struct hostdesc.conflict45 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict203 eth_dest_addr;
    struct mac_addr.conflict204 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict43 hostdesc.conflict43, *Phostdesc.conflict43;

struct hostdesc.conflict43 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict199 eth_dest_addr;
    struct mac_addr.conflict200 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict41 hostdesc.conflict41, *Phostdesc.conflict41;

struct hostdesc.conflict41 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict195 eth_dest_addr;
    struct mac_addr.conflict196 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict42 hostdesc.conflict42, *Phostdesc.conflict42;

struct hostdesc.conflict42 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict197 eth_dest_addr;
    struct mac_addr.conflict198 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict40 hostdesc.conflict40, *Phostdesc.conflict40;

struct hostdesc.conflict40 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict190 eth_dest_addr;
    struct mac_addr.conflict191 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict35 txdesc_host.conflict35, *Ptxdesc_host.conflict35;

typedef struct hostdesc.conflict58 hostdesc.conflict58, *Phostdesc.conflict58;

struct hostdesc.conflict58 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict256 eth_dest_addr;
    struct mac_addr.conflict257 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict35 {
    uint32_t ready;
    struct hostdesc.conflict58 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict52 hostdesc.conflict52, *Phostdesc.conflict52;

struct hostdesc.conflict52 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict241 eth_dest_addr;
    struct mac_addr.conflict242 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict53 hostdesc.conflict53, *Phostdesc.conflict53;

struct hostdesc.conflict53 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict246 eth_dest_addr;
    struct mac_addr.conflict247 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict50 hostdesc.conflict50, *Phostdesc.conflict50;

struct hostdesc.conflict50 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict232 eth_dest_addr;
    struct mac_addr.conflict233 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict51 hostdesc.conflict51, *Phostdesc.conflict51;

struct hostdesc.conflict51 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict237 eth_dest_addr;
    struct mac_addr.conflict238 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict24 txdesc_host.conflict24, *Ptxdesc_host.conflict24;

struct txdesc_host.conflict24 {
    uint32_t ready;
    struct hostdesc.conflict38 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict16 hostdesc.conflict16, *Phostdesc.conflict16;

struct hostdesc.conflict16 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict123 eth_dest_addr;
    struct mac_addr.conflict124 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict15 hostdesc.conflict15, *Phostdesc.conflict15;

struct hostdesc.conflict15 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict100 eth_dest_addr;
    struct mac_addr.conflict101 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict21 txdesc_host.conflict21, *Ptxdesc_host.conflict21;

struct txdesc_host.conflict21 {
    uint32_t ready;
    struct hostdesc.conflict35 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict22 txdesc_host.conflict22, *Ptxdesc_host.conflict22;

struct txdesc_host.conflict22 {
    uint32_t ready;
    struct hostdesc.conflict36 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict26 txdesc_host.conflict26, *Ptxdesc_host.conflict26;

struct txdesc_host.conflict26 {
    uint32_t ready;
    struct hostdesc.conflict42 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict27 txdesc_host.conflict27, *Ptxdesc_host.conflict27;

struct txdesc_host.conflict27 {
    uint32_t ready;
    struct hostdesc.conflict43 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict29 txdesc_host.conflict29, *Ptxdesc_host.conflict29;

struct txdesc_host.conflict29 {
    uint32_t ready;
    struct hostdesc.conflict45 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict29 hostdesc.conflict29, *Phostdesc.conflict29;

struct hostdesc.conflict29 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict162 eth_dest_addr;
    struct mac_addr.conflict163 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct hostdesc.conflict28 hostdesc.conflict28, *Phostdesc.conflict28;

struct hostdesc.conflict28 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict160 eth_dest_addr;
    struct mac_addr.conflict161 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict11 txdesc_host.conflict11, *Ptxdesc_host.conflict11;

typedef struct hostdesc.conflict23 hostdesc.conflict23, *Phostdesc.conflict23;

struct hostdesc.conflict23 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict139 eth_dest_addr;
    struct mac_addr.conflict140 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict11 {
    uint32_t ready;
    struct hostdesc.conflict23 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict12 txdesc_host.conflict12, *Ptxdesc_host.conflict12;

typedef struct hostdesc.conflict24 hostdesc.conflict24, *Phostdesc.conflict24;

struct hostdesc.conflict24 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict141 eth_dest_addr;
    struct mac_addr.conflict142 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

struct txdesc_host.conflict12 {
    uint32_t ready;
    struct hostdesc.conflict24 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct hostdesc.conflict22 hostdesc.conflict22, *Phostdesc.conflict22;

struct hostdesc.conflict22 {
    uint32_t pbuf_addr;
    uint32_t packet_addr;
    uint16_t packet_len;
    undefined field_0xa;
    undefined field_0xb;
    uint32_t status_addr;
    struct mac_addr.conflict137 eth_dest_addr;
    struct mac_addr.conflict138 eth_src_addr;
    uint16_t ethertype;
    uint16_t pn[4];
    uint16_t sn;
    uint16_t timestamp;
    uint8_t tid;
    uint8_t vif_idx;
    uint8_t staid;
    undefined field_0x2d;
    uint16_t flags;
    uint32_t pbuf_chained_ptr[4];
    uint32_t pbuf_chained_len[4];
};

typedef struct txdesc_host.conflict16 txdesc_host.conflict16, *Ptxdesc_host.conflict16;

struct txdesc_host.conflict16 {
    uint32_t ready;
    struct hostdesc.conflict29 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct txdesc_host.conflict17 txdesc_host.conflict17, *Ptxdesc_host.conflict17;

struct txdesc_host.conflict17 {
    uint32_t ready;
    struct hostdesc.conflict30 host;
    uint32_t pad_txdesc[55];
    uint32_t pad_buf[128];
};

typedef struct uart_priv_data uart_priv_data, *Puart_priv_data;

typedef struct uart_priv_data uart_priv_data_t;

struct uart_priv_data {
    aos_mutex_t mutex;
};

typedef struct _feature_pin _feature_pin, *P_feature_pin;

struct _feature_pin {
    char * featue_name;
    char * pin_name;
    uint8_t value;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
};

typedef struct bl_uart_notify bl_uart_notify, *Pbl_uart_notify;

struct bl_uart_notify {
    void (* rx_cb)(void *);
    void * rx_cb_arg;
    void (* tx_cb)(void *);
    void * tx_cb_arg;
};

typedef struct bl_uart_notify bl_uart_notify_t;

typedef struct apm_sta_add_ind.conflict apm_sta_add_ind.conflict, *Papm_sta_add_ind.conflict;

struct apm_sta_add_ind.conflict {
    uint32_t flags;
    struct mac_addr.conflict74 sta_addr;
    uint8_t vif_idx;
    uint8_t sta_idx;
    int8_t rssi;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t tsflo;
    uint32_t tsfhi;
    uint8_t data_rate;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
};

typedef enum apm_state_tag {
    APM_BCN_SETTING=2,
    APM_BSS_PARAM_SETTING=1,
    APM_IDLE=0,
    APM_STATE_MAX=3
} apm_state_tag;

typedef struct apm_start_cac_req apm_start_cac_req, *Papm_start_cac_req;

struct apm_start_cac_req {
    struct scan_chan_tag chan;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t center_freq1;
    uint32_t center_freq2;
    uint8_t ch_width;
    uint8_t vif_idx;
    undefined field_0x12;
    undefined field_0x13;
};

typedef struct apm_start_cac_cfm apm_start_cac_cfm, *Papm_start_cac_cfm;

struct apm_start_cac_cfm {
    uint8_t status;
    uint8_t ch_idx;
};

typedef struct apm_stop_cac_req apm_stop_cac_req, *Papm_stop_cac_req;

struct apm_stop_cac_req {
    uint8_t vif_idx;
};

typedef struct UART_CFG_Type UART_CFG_Type, *PUART_CFG_Type;

typedef enum UART_DataBits_Type {
    UART_DATABITS_5=0,
    UART_DATABITS_6=1,
    UART_DATABITS_7=2,
    UART_DATABITS_8=3
} UART_DataBits_Type;

typedef enum UART_StopBits_Type {
    UART_STOPBITS_1=0,
    UART_STOPBITS_1_5=1,
    UART_STOPBITS_2=2
} UART_StopBits_Type;

typedef enum UART_Parity_Type {
    UART_PARITY_EVEN=2,
    UART_PARITY_NONE=0,
    UART_PARITY_ODD=1
} UART_Parity_Type;

typedef enum UART_ByteBitInverse_Type {
    UART_LSB_FIRST=0,
    UART_MSB_FIRST=1
} UART_ByteBitInverse_Type;

struct UART_CFG_Type {
    uint32_t uartClk;
    uint32_t baudRate;
    enum UART_DataBits_Type dataBits;
    enum UART_StopBits_Type stopBits;
    enum UART_Parity_Type parity;
    enum BL_Fun_Type ctsFlowControl;
    enum BL_Fun_Type rxDeglitch;
    enum BL_Fun_Type rtsSoftwareControl;
    enum UART_ByteBitInverse_Type byteBitInverse;
    undefined field_0xf;
};

typedef struct UART_FifoCfg_Type UART_FifoCfg_Type, *PUART_FifoCfg_Type;

struct UART_FifoCfg_Type {
    uint8_t txFifoDmaThreshold;
    uint8_t rxFifoDmaThreshold;
    enum BL_Fun_Type txFifoDmaEnable;
    enum BL_Fun_Type rxFifoDmaEnable;
};

typedef enum UART_ID_Type {
    UART0_ID=0,
    UART1_ID=1,
    UART_ID_MAX=2
} UART_ID_Type;

typedef enum UART_AutoBaudDetection_Type {
    UART_AUTOBAUD_0X55=0,
    UART_AUTOBAUD_STARTBIT=1
} UART_AutoBaudDetection_Type;

typedef enum UART_Direction_Type {
    UART_RX=1,
    UART_TX=0,
    UART_TXRX=2
} UART_Direction_Type;

typedef enum UART_Overflow_Type {
    UART_RX_OVERFLOW=2,
    UART_RX_UNDERFLOW=3,
    UART_TX_OVERFLOW=0,
    UART_TX_UNDERFLOW=1
} UART_Overflow_Type;

typedef struct UART_IrCfg_Type UART_IrCfg_Type, *PUART_IrCfg_Type;

struct UART_IrCfg_Type {
    enum BL_Fun_Type txIrEnable;
    enum BL_Fun_Type rxIrEnable;
    enum BL_Fun_Type txIrInverse;
    enum BL_Fun_Type rxIrInverse;
    uint16_t txIrPulseStart;
    uint16_t txIrPulseStop;
    uint16_t rxIrPulseStart;
};

typedef enum UART_INT_Type {
    UART_INT_ALL=8,
    UART_INT_PCE=5,
    UART_INT_RTO=4,
    UART_INT_RX_END=1,
    UART_INT_RX_FER=7,
    UART_INT_RX_FIFO_REQ=3,
    UART_INT_TX_END=0,
    UART_INT_TX_FER=6,
    UART_INT_TX_FIFO_REQ=2
} UART_INT_Type;

typedef struct ethhdr ethhdr, *Pethhdr;

struct ethhdr {
    uchar h_dest[6];
    uchar h_source[6];
    __be16 h_proto;
};

typedef union anon_union.conflict14 anon_union.conflict14, *Panon_union.conflict14;

union anon_union.conflict14 {
    struct anon_struct.conflict25 sta;
    struct anon_struct.conflict26 ap;
    struct anon_struct.conflict27 ap_vlan;
};

typedef union anon_union.conflict15 anon_union.conflict15, *Panon_union.conflict15;

typedef struct anon_struct.conflict30 anon_struct.conflict30, *Panon_struct.conflict30;

struct anon_struct.conflict30 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

union anon_union.conflict15 {
    struct anon_struct.conflict25 sta;
    struct anon_struct.conflict30 ap;
    struct anon_struct.conflict27 ap_vlan;
};

typedef union anon_union.conflict18 anon_union.conflict18, *Panon_union.conflict18;

typedef struct anon_struct.conflict35 anon_struct.conflict35, *Panon_struct.conflict35;

struct anon_struct.conflict35 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

union anon_union.conflict18 {
    struct anon_struct.conflict25 sta;
    struct anon_struct.conflict35 ap;
    struct anon_struct.conflict27 ap_vlan;
};

typedef enum ieee80211_vht_mcs_support {
    IEEE80211_VHT_MCS_NOT_SUPPORTED=3,
    IEEE80211_VHT_MCS_SUPPORT_0_7=0,
    IEEE80211_VHT_MCS_SUPPORT_0_8=1,
    IEEE80211_VHT_MCS_SUPPORT_0_9=2
} ieee80211_vht_mcs_support;

typedef struct anon_struct.conflict34 anon_struct.conflict34, *Panon_struct.conflict34;

struct anon_struct.conflict34 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

typedef struct anon_struct.conflict63 anon_struct.conflict63, *Panon_struct.conflict63;

struct anon_struct.conflict63 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

typedef struct anon_struct.conflict29 anon_struct.conflict29, *Panon_struct.conflict29;

struct anon_struct.conflict29 {
    u16 flags;
    undefined field_0x2;
    undefined field_0x3;
    struct list_head sta_list;
    struct bl_bcn bcn;
    u8 bcmc_index;
    undefined field_0x31;
    undefined field_0x32;
    undefined field_0x33;
    struct list_head mpath_list;
    struct list_head proxy_list;
    _Bool create_path;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    int generation;
};

typedef struct txl_frame_desc_tag txl_frame_desc_tag, *Ptxl_frame_desc_tag;

typedef struct txl_frame_cfm_tag txl_frame_cfm_tag, *Ptxl_frame_cfm_tag;

struct txl_frame_cfm_tag {
    void (* cfm_func)(void *, uint32_t);
    void * env;
};

struct txl_frame_desc_tag {
    struct txdesc txdesc;
    struct txl_frame_cfm_tag cfm;
    uint8_t type;
    _Bool postponed;
    _Bool keep_desc;
    undefined field_0x2d7;
};

typedef struct txl_frame_env_tag txl_frame_env_tag, *Ptxl_frame_env_tag;

struct txl_frame_env_tag {
    struct co_list desc_free;
    struct co_list desc_done;
};

typedef enum icmp_dur_type {
    ICMP_DUR_FRAG=4,
    ICMP_DUR_HOST=1,
    ICMP_DUR_NET=0,
    ICMP_DUR_PORT=3,
    ICMP_DUR_PROTO=2,
    ICMP_DUR_SR=5
} icmp_dur_type;

typedef struct icmp_echo_hdr icmp_echo_hdr, *Picmp_echo_hdr;

struct icmp_echo_hdr {
    u8_t type;
    u8_t code;
    u16_t chksum;
    u16_t id;
    u16_t seqno;
};

typedef struct pro_dev pro_dev, *Ppro_dev;

typedef struct pro_dev * pro_handle_t;

typedef struct pro_event pro_event, *Ppro_event;

typedef struct pro_func pro_func, *Ppro_func;

typedef enum event_type_t {
    PROTOCOL_EVENT_CMD=0,
    PROTOCOL_EVENT_DATA=1
} event_type_t;

struct pro_event {
    enum event_type_t type;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    int event_id;
    void * p_buf;
    uint32_t length;
};

struct pro_dev {
    enc_handle_t enc_handle;
    struct encrypt enc;
    uint8_t old_seq;
    undefined field_0x21;
    undefined field_0x22;
    undefined field_0x23;
    uint8_t * pyld_buf;
    struct pro_event ev;
    uint16_t tol_len_now;
    uint16_t total_length;
    uint16_t mtu;
    uint16_t ack_len;
    uint8_t * ack_buf;
    undefined field_0x44;
    undefined field_0x45;
    undefined field_0x46;
    undefined field_0x47;
    longlong seq_start_ms;
    SemaphoreHandle_t xSemaphore;
    StaticSemaphore_t xSemaphoreBuffer;
    struct pro_func * p_func;
    void * p_drv;
    undefined field_0xac;
    undefined field_0xad;
    undefined field_0xae;
    undefined field_0xaf;
};

struct pro_func {
    int (* pfu_bytes_send)(void *, void *, size_t);
    int (* pfn_recv_event)(void *, struct pro_event *);
};

typedef struct general_head general_head, *Pgeneral_head;

struct general_head {
    uint8_t ctrl;
    uint8_t seq;
    uint16_t frag_ctrl;
};


// WARNING! conflicting data type names: /DWARF/buf.c/net_buf_simple_pull_le16/lexical_block_0/anon_struct_0 - /DWARF/smp.c/smp_sign_buf/lexical_block_0/anon_struct_0


// WARNING! conflicting data type names: /DWARF/buf.c/net_buf_simple_pull_be16/lexical_block_0/anon_struct_0 - /DWARF/smp.c/smp_sign_buf/lexical_block_0/anon_struct_0

typedef struct anon_struct.conflict10 anon_struct.conflict10, *Panon_struct.conflict10;

struct anon_struct.conflict10 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef struct anon_struct.conflict98 anon_struct.conflict98, *Panon_struct.conflict98;

struct anon_struct.conflict98 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef struct anon_struct.conflict97 anon_struct.conflict97, *Panon_struct.conflict97;

struct anon_struct.conflict97 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef struct anon_struct.conflict96 anon_struct.conflict96, *Panon_struct.conflict96;

struct anon_struct.conflict96 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef struct net_buf_pool net_buf_pool, *Pnet_buf_pool;

typedef struct k_lifo k_lifo, *Pk_lifo;

typedef struct net_buf_data_alloc net_buf_data_alloc, *Pnet_buf_data_alloc;

typedef struct net_buf_data_cb net_buf_data_cb, *Pnet_buf_data_cb;

struct k_lifo {
    struct k_queue _queue;
};

struct net_buf_pool {
    struct k_lifo free;
    u16_t buf_count;
    u16_t uninit_count;
    void (* destroy)(struct net_buf *);
    struct net_buf_data_alloc * alloc;
    struct net_buf * __bufs;
};

struct net_buf_data_cb {
    u8_t * (* alloc)(struct net_buf *, size_t *, s32_t);
    u8_t * (* ref)(struct net_buf *, u8_t *);
    void (* unref)(struct net_buf *, u8_t *);
};

struct net_buf_data_alloc {
    struct net_buf_data_cb * cb;
    void * alloc_data;
};

typedef struct anon_struct.conflict95 anon_struct.conflict95, *Panon_struct.conflict95;

struct anon_struct.conflict95 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef struct anon_struct.conflict99 anon_struct.conflict99, *Panon_struct.conflict99;

struct anon_struct.conflict99 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef struct anon_struct.conflict103 anon_struct.conflict103, *Panon_struct.conflict103;

struct anon_struct.conflict103 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef struct anon_struct.conflict104 anon_struct.conflict104, *Panon_struct.conflict104;

struct anon_struct.conflict104 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef struct anon_struct.conflict100 anon_struct.conflict100, *Panon_struct.conflict100;

struct anon_struct.conflict100 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef struct anon_struct.conflict101 anon_struct.conflict101, *Panon_struct.conflict101;

struct anon_struct.conflict101 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef union anon_union.conflict4 anon_union.conflict4, *Panon_union.conflict4;

typedef struct anon_struct.conflict8 anon_struct.conflict8, *Panon_struct.conflict8;

struct anon_struct.conflict8 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

union anon_union.conflict4 {
    struct anon_struct.conflict8 field_0;
    struct net_buf_simple b;
};

typedef struct anon_struct.conflict86 anon_struct.conflict86, *Panon_struct.conflict86;

struct anon_struct.conflict86 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef union anon_union.conflict6 anon_union.conflict6, *Panon_union.conflict6;

union anon_union.conflict6 {
    struct anon_struct.conflict10 field_0;
    struct net_buf_simple b;
};

typedef struct anon_struct.conflict81 anon_struct.conflict81, *Panon_struct.conflict81;

struct anon_struct.conflict81 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef struct anon_struct.conflict109 anon_struct.conflict109, *Panon_struct.conflict109;

struct anon_struct.conflict109 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef struct anon_struct.conflict88 anon_struct.conflict88, *Panon_struct.conflict88;

struct anon_struct.conflict88 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef struct anon_struct.conflict111 anon_struct.conflict111, *Panon_struct.conflict111;

struct anon_struct.conflict111 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef struct anon_struct.conflict112 anon_struct.conflict112, *Panon_struct.conflict112;

struct anon_struct.conflict112 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef union anon_union.conflict3 anon_union.conflict3, *Panon_union.conflict3;

union anon_union.conflict3 {
    sys_snode_t node;
    struct net_buf * frags;
};

typedef struct anon_struct.conflict76 anon_struct.conflict76, *Panon_struct.conflict76;

struct anon_struct.conflict76 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef struct anon_struct.conflict79 anon_struct.conflict79, *Panon_struct.conflict79;

struct anon_struct.conflict79 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef struct anon_struct.conflict77 anon_struct.conflict77, *Panon_struct.conflict77;

struct anon_struct.conflict77 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef struct anon_struct.conflict9 anon_struct.conflict9, *Panon_struct.conflict9;

struct anon_struct.conflict9 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef struct net_buf_pool_fixed net_buf_pool_fixed, *Pnet_buf_pool_fixed;

struct net_buf_pool_fixed {
    size_t data_size;
    u8_t * data_pool;
};

typedef struct anon_struct.conflict7 anon_struct.conflict7, *Panon_struct.conflict7;

struct anon_struct.conflict7 {
    u8_t * data;
    u16_t len;
    u16_t size;
    u8_t * __buf;
};

typedef enum bt_buf_type {
    BT_BUF_ACL_IN=3,
    BT_BUF_ACL_OUT=2,
    BT_BUF_CMD=0,
    BT_BUF_EVT=1
} bt_buf_type;

typedef struct fdt_property fdt_property, *Pfdt_property;

struct fdt_property {
    fdt32_t tag;
    fdt32_t len;
    fdt32_t nameoff;
    char[0] data;
};

typedef struct fdt_reserve_entry fdt_reserve_entry, *Pfdt_reserve_entry;

struct fdt_reserve_entry {
    fdt64_t address;
    fdt64_t size;
};

typedef struct fdt_node_header fdt_node_header, *Pfdt_node_header;

struct fdt_node_header {
    fdt32_t tag;
    char[0] name;
};

typedef struct fdt_header fdt_header, *Pfdt_header;

struct fdt_header {
    fdt32_t magic;
    fdt32_t totalsize;
    fdt32_t off_dt_struct;
    fdt32_t off_dt_strings;
    fdt32_t off_mem_rsvmap;
    fdt32_t version;
    fdt32_t last_comp_version;
    fdt32_t boot_cpuid_phys;
    fdt32_t size_dt_strings;
    fdt32_t size_dt_struct;
};

typedef struct cfg_start_cfm cfg_start_cfm, *Pcfg_start_cfm;

struct cfg_start_cfm {
    uint8_t status;
};

typedef enum cfg_state_tag {
    CFG_IDLE=0,
    CFG_STATE_MAX=1
} cfg_state_tag;

typedef struct anon_struct.conflict200 anon_struct.conflict200, *Panon_struct.conflict200;

struct anon_struct.conflict200 {
    uint32_t task;
    uint32_t element;
    uint32_t length;
    uint32_t[0] buf;
};

typedef union tcp_listen_pcbs_t tcp_listen_pcbs_t, *Ptcp_listen_pcbs_t;

union tcp_listen_pcbs_t {
    struct tcp_pcb_listen * listen_pcbs;
    struct tcp_pcb * pcbs;
};

typedef struct TIMER_CFG_Type TIMER_CFG_Type, *PTIMER_CFG_Type;

typedef enum TIMER_Chan_Type {
    TIMER_CH0=0,
    TIMER_CH1=1,
    TIMER_CH_MAX=2
} TIMER_Chan_Type;

typedef enum TIMER_ClkSrc_Type {
    TIMER_CLKSRC_1K=2,
    TIMER_CLKSRC_32K=1,
    TIMER_CLKSRC_FCLK=0,
    TIMER_CLKSRC_XTAL=3
} TIMER_ClkSrc_Type;

typedef enum TIMER_PreLoad_Trig_Type {
    TIMER_PRELOAD_TRIG_COMP0=1,
    TIMER_PRELOAD_TRIG_COMP1=2,
    TIMER_PRELOAD_TRIG_COMP2=3,
    TIMER_PRELOAD_TRIG_NONE=0
} TIMER_PreLoad_Trig_Type;

typedef enum TIMER_CountMode_Type {
    TIMER_COUNT_FREERUN=1,
    TIMER_COUNT_PRELOAD=0
} TIMER_CountMode_Type;

struct TIMER_CFG_Type {
    enum TIMER_Chan_Type timerCh;
    enum TIMER_ClkSrc_Type clkSrc;
    enum TIMER_PreLoad_Trig_Type plTrigSrc;
    enum TIMER_CountMode_Type countMode;
    uint8_t clockDivision;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t matchVal0;
    uint32_t matchVal1;
    uint32_t matchVal2;
    uint32_t preLoadVal;
};

typedef enum DMA_Trans_Dir_Type {
    DMA_TRNS_M2M=0,
    DMA_TRNS_M2P=1,
    DMA_TRNS_P2M=2,
    DMA_TRNS_P2P=3
} DMA_Trans_Dir_Type;

typedef enum DMA_Burst_Size_Type {
    DMA_BURST_SIZE_1=0,
    DMA_BURST_SIZE_16=3,
    DMA_BURST_SIZE_4=1,
    DMA_BURST_SIZE_8=2
} DMA_Burst_Size_Type;

typedef struct DMA_LLI_Ctrl_Type.conflict DMA_LLI_Ctrl_Type.conflict, *PDMA_LLI_Ctrl_Type.conflict;

typedef struct DMA_Control_Reg.conflict1 DMA_Control_Reg.conflict1, *PDMA_Control_Reg.conflict1;

struct DMA_Control_Reg.conflict1 {
    uint32_t TransferSize:12;
    uint32_t SBSize:3;
    uint32_t DBSize:3;
    uint32_t SWidth:3;
    uint32_t DWidth:3;
    uint32_t SLargerD:1;
    uint32_t reserved_25:1;
    uint32_t SI:1;
    uint32_t DI:1;
    uint32_t Prot:3;
    uint32_t I:1;
};

struct DMA_LLI_Ctrl_Type.conflict {
    uint32_t srcDmaAddr;
    uint32_t destDmaAddr;
    uint32_t nextLLI;
    struct DMA_Control_Reg.conflict1 dmaCtrl;
};

typedef struct DMA_LLI_PP_Struct.conflict1 DMA_LLI_PP_Struct.conflict1, *PDMA_LLI_PP_Struct.conflict1;

typedef struct DMA_Control_Reg.conflict6 DMA_Control_Reg.conflict6, *PDMA_Control_Reg.conflict6;

typedef struct DMA_LLI_Cfg_Type DMA_LLI_Cfg_Type, *PDMA_LLI_Cfg_Type;

typedef enum DMA_Periph_Req_Type {
    DMA_REQ_GPADC0=22,
    DMA_REQ_GPADC1=23,
    DMA_REQ_I2C_RX=6,
    DMA_REQ_I2C_TX=7,
    DMA_REQ_NONE=0,
    DMA_REQ_SPI_RX=10,
    DMA_REQ_SPI_TX=11,
    DMA_REQ_UART0_RX=0,
    DMA_REQ_UART0_TX=1,
    DMA_REQ_UART1_RX=2,
    DMA_REQ_UART1_TX=3
} DMA_Periph_Req_Type;

struct DMA_LLI_Cfg_Type {
    enum DMA_Trans_Dir_Type dir;
    enum DMA_Periph_Req_Type srcPeriph;
    enum DMA_Periph_Req_Type dstPeriph;
};

struct DMA_Control_Reg.conflict6 {
    uint32_t TransferSize:12;
    uint32_t SBSize:3;
    uint32_t DBSize:3;
    uint32_t SWidth:3;
    uint32_t DWidth:3;
    uint32_t SLargerD:1;
    uint32_t reserved_25:1;
    uint32_t SI:1;
    uint32_t DI:1;
    uint32_t Prot:3;
    uint32_t I:1;
};

struct DMA_LLI_PP_Struct.conflict1 {
    uint8_t trans_index;
    uint8_t dmaChan;
    undefined field_0x2;
    undefined field_0x3;
    struct DMA_Control_Reg.conflict6 dmaCtrlRegVal;
    struct DMA_LLI_Cfg_Type * DMA_LLI_Cfg;
    uint32_t operatePeriphAddr;
    uint32_t chache_buf_addr[2];
    enum BL_Fun_Type is_single_mode;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
};

typedef struct DMA_LLI_PP_Struct.conflict DMA_LLI_PP_Struct.conflict, *PDMA_LLI_PP_Struct.conflict;

typedef struct DMA_Control_Reg.conflict4 DMA_Control_Reg.conflict4, *PDMA_Control_Reg.conflict4;

struct DMA_Control_Reg.conflict4 {
    uint32_t TransferSize:12;
    uint32_t SBSize:3;
    uint32_t DBSize:3;
    uint32_t SWidth:3;
    uint32_t DWidth:3;
    uint32_t SLargerD:1;
    uint32_t reserved_25:1;
    uint32_t SI:1;
    uint32_t DI:1;
    uint32_t Prot:3;
    uint32_t I:1;
};

struct DMA_LLI_PP_Struct.conflict {
    uint8_t trans_index;
    uint8_t dmaChan;
    undefined field_0x2;
    undefined field_0x3;
    struct DMA_Control_Reg.conflict4 dmaCtrlRegVal;
    struct DMA_LLI_Cfg_Type * DMA_LLI_Cfg;
    uint32_t operatePeriphAddr;
    uint32_t chache_buf_addr[2];
    enum BL_Fun_Type is_single_mode;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
};

typedef struct DMA_LLI_Ctrl_Type.conflict2 DMA_LLI_Ctrl_Type.conflict2, *PDMA_LLI_Ctrl_Type.conflict2;

typedef struct DMA_Control_Reg.conflict5 DMA_Control_Reg.conflict5, *PDMA_Control_Reg.conflict5;

struct DMA_Control_Reg.conflict5 {
    uint32_t TransferSize:12;
    uint32_t SBSize:3;
    uint32_t DBSize:3;
    uint32_t SWidth:3;
    uint32_t DWidth:3;
    uint32_t SLargerD:1;
    uint32_t reserved_25:1;
    uint32_t SI:1;
    uint32_t DI:1;
    uint32_t Prot:3;
    uint32_t I:1;
};

struct DMA_LLI_Ctrl_Type.conflict2 {
    uint32_t srcDmaAddr;
    uint32_t destDmaAddr;
    uint32_t nextLLI;
    struct DMA_Control_Reg.conflict5 dmaCtrl;
};

typedef enum DMA_Chan_Type {
    DMA_CH0=0,
    DMA_CH1=1,
    DMA_CH2=2,
    DMA_CH3=3,
    DMA_CH_MAX=4
} DMA_Chan_Type;

typedef struct DMA_LLI_PP_Buf DMA_LLI_PP_Buf, *PDMA_LLI_PP_Buf;

typedef struct DMA_LLI_Ctrl_Type DMA_LLI_Ctrl_Type, *PDMA_LLI_Ctrl_Type;

typedef struct DMA_Control_Reg DMA_Control_Reg, *PDMA_Control_Reg;

struct DMA_Control_Reg {
    uint32_t TransferSize:12;
    uint32_t SBSize:3;
    uint32_t DBSize:3;
    uint32_t SWidth:3;
    uint32_t DWidth:3;
    uint32_t SLargerD:1;
    uint32_t reserved_25:1;
    uint32_t SI:1;
    uint32_t DI:1;
    uint32_t Prot:3;
    uint32_t I:1;
};

struct DMA_LLI_Ctrl_Type {
    uint32_t srcDmaAddr;
    uint32_t destDmaAddr;
    uint32_t nextLLI;
    struct DMA_Control_Reg dmaCtrl;
};

struct DMA_LLI_PP_Buf {
    uint8_t idleIndex;
    uint8_t dmaChan;
    undefined field_0x2;
    undefined field_0x3;
    struct DMA_LLI_Ctrl_Type * lliListHeader[2];
    void (* onTransCompleted)(struct DMA_LLI_Ctrl_Type *);
};

typedef enum DMA_INT_Type {
    DMA_INT_ALL=2,
    DMA_INT_ERR=1,
    DMA_INT_TCOMPLETED=0
} DMA_INT_Type;

typedef struct DMA_LLI_Ctrl_Type.conflict1 DMA_LLI_Ctrl_Type.conflict1, *PDMA_LLI_Ctrl_Type.conflict1;

typedef struct DMA_Control_Reg.conflict2 DMA_Control_Reg.conflict2, *PDMA_Control_Reg.conflict2;

struct DMA_Control_Reg.conflict2 {
    uint32_t TransferSize:12;
    uint32_t SBSize:3;
    uint32_t DBSize:3;
    uint32_t SWidth:3;
    uint32_t DWidth:3;
    uint32_t SLargerD:1;
    uint32_t reserved_25:1;
    uint32_t SI:1;
    uint32_t DI:1;
    uint32_t Prot:3;
    uint32_t I:1;
};

struct DMA_LLI_Ctrl_Type.conflict1 {
    uint32_t srcDmaAddr;
    uint32_t destDmaAddr;
    uint32_t nextLLI;
    struct DMA_Control_Reg.conflict2 dmaCtrl;
};

typedef struct DMA_Channel_Cfg_Type DMA_Channel_Cfg_Type, *PDMA_Channel_Cfg_Type;

typedef enum DMA_Trans_Width_Type {
    DMA_TRNS_WIDTH_16BITS=1,
    DMA_TRNS_WIDTH_32BITS=2,
    DMA_TRNS_WIDTH_8BITS=0
} DMA_Trans_Width_Type;

struct DMA_Channel_Cfg_Type {
    uint32_t srcDmaAddr;
    uint32_t destDmaAddr;
    uint32_t transfLength;
    enum DMA_Trans_Dir_Type dir;
    enum DMA_Chan_Type ch;
    enum DMA_Trans_Width_Type srcTransfWidth;
    enum DMA_Trans_Width_Type dstTransfWidth;
    enum DMA_Burst_Size_Type srcBurstSzie;
    enum DMA_Burst_Size_Type dstBurstSzie;
    uint8_t srcAddrInc;
    uint8_t destAddrInc;
    enum DMA_Periph_Req_Type srcPeriph;
    enum DMA_Periph_Req_Type dstPeriph;
    undefined field_0x16;
    undefined field_0x17;
};

typedef struct DMA_LLI_PP_Struct DMA_LLI_PP_Struct, *PDMA_LLI_PP_Struct;

typedef struct DMA_Control_Reg.conflict3 DMA_Control_Reg.conflict3, *PDMA_Control_Reg.conflict3;

struct DMA_Control_Reg.conflict3 {
    uint32_t TransferSize:12;
    uint32_t SBSize:3;
    uint32_t DBSize:3;
    uint32_t SWidth:3;
    uint32_t DWidth:3;
    uint32_t SLargerD:1;
    uint32_t reserved_25:1;
    uint32_t SI:1;
    uint32_t DI:1;
    uint32_t Prot:3;
    uint32_t I:1;
};

struct DMA_LLI_PP_Struct {
    uint8_t trans_index;
    uint8_t dmaChan;
    undefined field_0x2;
    undefined field_0x3;
    struct DMA_Control_Reg.conflict3 dmaCtrlRegVal;
    struct DMA_LLI_Cfg_Type * DMA_LLI_Cfg;
    uint32_t operatePeriphAddr;
    uint32_t chache_buf_addr[2];
    enum BL_Fun_Type is_single_mode;
    undefined field_0x19;
    undefined field_0x1a;
    undefined field_0x1b;
};

typedef struct anon_struct.conflict285 anon_struct.conflict285, *Panon_struct.conflict285;

struct anon_struct.conflict285 {
    uint frac:23;
    uint exp:8;
    uint sign:1;
};

typedef union _FP_UNION_S _FP_UNION_S, *P_FP_UNION_S;

typedef float SFtype;

union _FP_UNION_S {
    SFtype flt;
    struct anon_struct.conflict285 bits;
};

typedef SemaphoreHandle_t sys_mutex_t;

typedef QueueHandle_t sys_mbox_t;

typedef TaskHandle_t sys_thread_t;

typedef enum BL_Sts_Type {
    RESET=0,
    SET=1
} BL_Sts_Type;

typedef enum BL_Err_Type {
    ERROR=1,
    SUCCESS=0,
    TIMEOUT=2
} BL_Err_Type;

typedef enum BL_Mask_Type {
    MASK=1,
    UNMASK=0
} BL_Mask_Type;

typedef struct scan_cancel_cfm scan_cancel_cfm, *Pscan_cancel_cfm;

struct scan_cancel_cfm {
    uint8_t status;
};

typedef struct scan_start_cfm scan_start_cfm, *Pscan_start_cfm;

struct scan_start_cfm {
    uint8_t status;
};

typedef enum scan_state_tag {
    SCAN_IDLE=0,
    SCAN_STATE_MAX=4,
    SCAN_WAIT_BEACON_PROBE_RSP=3,
    SCAN_WAIT_CHANNEL=2,
    SCAN_WAIT_IE_DWNLD=1
} scan_state_tag;

typedef enum scan_msg_tag {
    SCAN_CANCEL_CFM=2052,
    SCAN_CANCEL_REQ=2051,
    SCAN_DONE_IND=2050,
    SCAN_MAX=2054,
    SCAN_START_CFM=2049,
    SCAN_START_REQ=2048,
    SCAN_TIMER=2053
} scan_msg_tag;

typedef struct pka0_bit_shift_op_cfg pka0_bit_shift_op_cfg, *Ppka0_bit_shift_op_cfg;


// WARNING! conflicting data type names: /DWARF/sec_eng.c/pka0_bit_shift_op_cfg/anon_union_for_value - /DWARF/bl602_sec_eng.c/pka0_pldi_cfg/anon_union_for_value

struct pka0_bit_shift_op_cfg {
    union anon_union_for_value value;
};

typedef struct pka0_common_op_first_cfg pka0_common_op_first_cfg, *Ppka0_common_op_first_cfg;


// WARNING! conflicting data type names: /DWARF/sec_eng.c/pka0_common_op_first_cfg/anon_union_for_value - /DWARF/bl602_sec_eng.c/pka0_pldi_cfg/anon_union_for_value

struct pka0_common_op_first_cfg {
    union anon_union_for_value value;
};

typedef struct anon_struct.conflict75 anon_struct.conflict75, *Panon_struct.conflict75;

struct anon_struct.conflict75 {
    uint32_t bit_shift:15;
    uint32_t reserved_24_31:17;
};

typedef struct pka0_pld_cfg pka0_pld_cfg, *Ppka0_pld_cfg;


// WARNING! conflicting data type names: /DWARF/sec_eng.c/pka0_pld_cfg/anon_union_for_value - /DWARF/bl602_sec_eng.c/pka0_pldi_cfg/anon_union_for_value

struct pka0_pld_cfg {
    union anon_union_for_value value;
};

typedef struct anon_struct.conflict74 anon_struct.conflict74, *Panon_struct.conflict74;

struct anon_struct.conflict74 {
    uint32_t bit_shift:15;
    uint32_t reserved_24_31:17;
};

typedef struct anon_struct.conflict73 anon_struct.conflict73, *Panon_struct.conflict73;

struct anon_struct.conflict73 {
    uint32_t s2_reg_idx:8;
    uint32_t s2_reg_type:4;
    uint32_t s1_reg_idx:8;
    uint32_t s1_reg_type:4;
    uint32_t reserved_24_31:8;
};

typedef struct anon_struct.conflict72 anon_struct.conflict72, *Panon_struct.conflict72;

struct anon_struct.conflict72 {
    uint32_t s2_reg_idx:8;
    uint32_t s2_reg_type:4;
    uint32_t s1_reg_idx:8;
    uint32_t s1_reg_type:4;
    uint32_t reserved_24_31:8;
};

typedef struct anon_struct.conflict71 anon_struct.conflict71, *Panon_struct.conflict71;

struct anon_struct.conflict71 {
    uint32_t s2_reg_idx:8;
    uint32_t s2_reg_type:4;
    uint32_t reserved_12_31:20;
};

typedef struct anon_struct.conflict70 anon_struct.conflict70, *Panon_struct.conflict70;

struct anon_struct.conflict70 {
    uint32_t s2_reg_idx:8;
    uint32_t s2_reg_type:4;
    uint32_t reserved_12_31:20;
};

typedef struct pka0_common_op_snd_cfg_S2_only pka0_common_op_snd_cfg_S2_only, *Ppka0_common_op_snd_cfg_S2_only;


// WARNING! conflicting data type names: /DWARF/sec_eng.c/pka0_common_op_snd_cfg_S2_only/anon_union_for_value - /DWARF/bl602_sec_eng.c/pka0_pldi_cfg/anon_union_for_value

struct pka0_common_op_snd_cfg_S2_only {
    union anon_union_for_value value;
};

typedef struct pka0_common_op_snd_cfg_S1_S2 pka0_common_op_snd_cfg_S1_S2, *Ppka0_common_op_snd_cfg_S1_S2;


// WARNING! conflicting data type names: /DWARF/sec_eng.c/pka0_common_op_snd_cfg_S1_S2/anon_union_for_value - /DWARF/bl602_sec_eng.c/pka0_pldi_cfg/anon_union_for_value

struct pka0_common_op_snd_cfg_S1_S2 {
    union anon_union_for_value value;
};

typedef struct pka0_common_op_snd_cfg_S1_only pka0_common_op_snd_cfg_S1_only, *Ppka0_common_op_snd_cfg_S1_only;


// WARNING! conflicting data type names: /DWARF/sec_eng.c/pka0_common_op_snd_cfg_S1_only/anon_union_for_value - /DWARF/bl602_sec_eng.c/pka0_pldi_cfg/anon_union_for_value

struct pka0_common_op_snd_cfg_S1_only {
    union anon_union_for_value value;
};

typedef struct anon_struct.conflict65 anon_struct.conflict65, *Panon_struct.conflict65;

struct anon_struct.conflict65 {
    uint32_t size:12;
    uint32_t d_reg_index:8;
    uint32_t d_reg_type:4;
    uint32_t op:7;
    uint32_t last_op:1;
};

typedef struct anon_struct.conflict64 anon_struct.conflict64, *Panon_struct.conflict64;

struct anon_struct.conflict64 {
    uint32_t size:12;
    uint32_t d_reg_index:8;
    uint32_t d_reg_type:4;
    uint32_t op:7;
    uint32_t last_op:1;
};

typedef struct anon_struct.conflict69 anon_struct.conflict69, *Panon_struct.conflict69;

struct anon_struct.conflict69 {
    uint32_t reserved_0_11:12;
    uint32_t s1_reg_idx:8;
    uint32_t s1_reg_type:4;
    uint32_t reserved_24_31:8;
};

typedef struct anon_struct.conflict68 anon_struct.conflict68, *Panon_struct.conflict68;

struct anon_struct.conflict68 {
    uint32_t reserved_0_11:12;
    uint32_t s1_reg_idx:8;
    uint32_t s1_reg_type:4;
    uint32_t reserved_24_31:8;
};

typedef struct anon_struct.conflict67 anon_struct.conflict67, *Panon_struct.conflict67;

struct anon_struct.conflict67 {
    uint32_t s0_reg_idx:8;
    uint32_t s0_reg_type:4;
    uint32_t d_reg_idx:8;
    uint32_t d_reg_type:4;
    uint32_t op:7;
    uint32_t last_op:1;
};

typedef struct anon_struct.conflict66 anon_struct.conflict66, *Panon_struct.conflict66;

struct anon_struct.conflict66 {
    uint32_t s0_reg_idx:8;
    uint32_t s0_reg_type:4;
    uint32_t d_reg_idx:8;
    uint32_t d_reg_type:4;
    uint32_t op:7;
    uint32_t last_op:1;
};

typedef enum task_mm_cfg {
    TASK_MM_CFG_KEEP_ALIVE_PACKET_COUNTER=2,
    TASK_MM_CFG_KEEP_ALIVE_STATUS_ENABLED=0,
    TASK_MM_CFG_KEEP_ALIVE_TIME_LAST_RECEIVED=1
} task_mm_cfg;

typedef int ptrdiff_t;

typedef struct mm_timer_env_tag mm_timer_env_tag, *Pmm_timer_env_tag;

struct mm_timer_env_tag {
    struct co_list prog;
};

typedef enum dbg_sev_tag {
    DBG_SEV_ALL=7,
    DBG_SEV_IDX_CRT=1,
    DBG_SEV_IDX_ERR=2,
    DBG_SEV_IDX_INF=4,
    DBG_SEV_IDX_MAX=6,
    DBG_SEV_IDX_NONE=0,
    DBG_SEV_IDX_VRB=5,
    DBG_SEV_IDX_WRN=3
} dbg_sev_tag;

typedef struct debug_env_tag debug_env_tag, *Pdebug_env_tag;

struct debug_env_tag {
    uint32_t filter_module;
    uint32_t filter_severity;
};

typedef enum dbg_mod_tag {
    DBG_MOD_IDX_DBG=1,
    DBG_MOD_IDX_DMA=3,
    DBG_MOD_IDX_IPC=2,
    DBG_MOD_IDX_KE=0,
    DBG_MOD_IDX_MAX=8,
    DBG_MOD_IDX_MM=4,
    DBG_MOD_IDX_PHY=7,
    DBG_MOD_IDX_RX=6,
    DBG_MOD_IDX_TX=5
} dbg_mod_tag;

typedef struct anon_struct.conflict183 anon_struct.conflict183, *Panon_struct.conflict183;

struct anon_struct.conflict183 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict184 anon_struct.conflict184, *Panon_struct.conflict184;

struct anon_struct.conflict184 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict185 anon_struct.conflict185, *Panon_struct.conflict185;

struct anon_struct.conflict185 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict180 anon_struct.conflict180, *Panon_struct.conflict180;

struct anon_struct.conflict180 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict181 anon_struct.conflict181, *Panon_struct.conflict181;

struct anon_struct.conflict181 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict182 anon_struct.conflict182, *Panon_struct.conflict182;

struct anon_struct.conflict182 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict188 anon_struct.conflict188, *Panon_struct.conflict188;

struct anon_struct.conflict188 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict189 anon_struct.conflict189, *Panon_struct.conflict189;

struct anon_struct.conflict189 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef enum VIF_AP_BCMC_STATUS {
    VIF_AP_BCMC_BUFFERED=1,
    VIF_AP_BCMC_MOREDATA=2
} VIF_AP_BCMC_STATUS;

typedef struct anon_struct.conflict196 anon_struct.conflict196, *Panon_struct.conflict196;

struct anon_struct.conflict196 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict197 anon_struct.conflict197, *Panon_struct.conflict197;

struct anon_struct.conflict197 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict230 anon_struct.conflict230, *Panon_struct.conflict230;

struct anon_struct.conflict230 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict190 anon_struct.conflict190, *Panon_struct.conflict190;

struct anon_struct.conflict190 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict191 anon_struct.conflict191, *Panon_struct.conflict191;

struct anon_struct.conflict191 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict235 anon_struct.conflict235, *Panon_struct.conflict235;

struct anon_struct.conflict235 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict238 anon_struct.conflict238, *Panon_struct.conflict238;

struct anon_struct.conflict238 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict231 anon_struct.conflict231, *Panon_struct.conflict231;

struct anon_struct.conflict231 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict232 anon_struct.conflict232, *Panon_struct.conflict232;

struct anon_struct.conflict232 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict233 anon_struct.conflict233, *Panon_struct.conflict233;

struct anon_struct.conflict233 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict234 anon_struct.conflict234, *Panon_struct.conflict234;

struct anon_struct.conflict234 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict239 anon_struct.conflict239, *Panon_struct.conflict239;

struct anon_struct.conflict239 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict246 anon_struct.conflict246, *Panon_struct.conflict246;

struct anon_struct.conflict246 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict247 anon_struct.conflict247, *Panon_struct.conflict247;

struct anon_struct.conflict247 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict242 anon_struct.conflict242, *Panon_struct.conflict242;

struct anon_struct.conflict242 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict243 anon_struct.conflict243, *Panon_struct.conflict243;

struct anon_struct.conflict243 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict250 anon_struct.conflict250, *Panon_struct.conflict250;

struct anon_struct.conflict250 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict251 anon_struct.conflict251, *Panon_struct.conflict251;

struct anon_struct.conflict251 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict257 anon_struct.conflict257, *Panon_struct.conflict257;

struct anon_struct.conflict257 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict258 anon_struct.conflict258, *Panon_struct.conflict258;

struct anon_struct.conflict258 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict259 anon_struct.conflict259, *Panon_struct.conflict259;

struct anon_struct.conflict259 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict254 anon_struct.conflict254, *Panon_struct.conflict254;

struct anon_struct.conflict254 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict255 anon_struct.conflict255, *Panon_struct.conflict255;

struct anon_struct.conflict255 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict256 anon_struct.conflict256, *Panon_struct.conflict256;

struct anon_struct.conflict256 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict141 anon_struct.conflict141, *Panon_struct.conflict141;

struct anon_struct.conflict141 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict262 anon_struct.conflict262, *Panon_struct.conflict262;

struct anon_struct.conflict262 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict142 anon_struct.conflict142, *Panon_struct.conflict142;

struct anon_struct.conflict142 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict263 anon_struct.conflict263, *Panon_struct.conflict263;

struct anon_struct.conflict263 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict147 anon_struct.conflict147, *Panon_struct.conflict147;

struct anon_struct.conflict147 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict268 anon_struct.conflict268, *Panon_struct.conflict268;

struct anon_struct.conflict268 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict148 anon_struct.conflict148, *Panon_struct.conflict148;

struct anon_struct.conflict148 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict269 anon_struct.conflict269, *Panon_struct.conflict269;

struct anon_struct.conflict269 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict149 anon_struct.conflict149, *Panon_struct.conflict149;

struct anon_struct.conflict149 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct vif_mgmt_env_tag vif_mgmt_env_tag, *Pvif_mgmt_env_tag;

struct vif_mgmt_env_tag {
    struct co_list free_list;
    struct co_list used_list;
    uint8_t vif_sta_cnt;
    uint8_t vif_ap_cnt;
    uint8_t low_bcn_int_idx;
    undefined field_0x13;
};

typedef struct anon_struct.conflict143 anon_struct.conflict143, *Panon_struct.conflict143;

struct anon_struct.conflict143 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict264 anon_struct.conflict264, *Panon_struct.conflict264;

struct anon_struct.conflict264 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict144 anon_struct.conflict144, *Panon_struct.conflict144;

struct anon_struct.conflict144 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict265 anon_struct.conflict265, *Panon_struct.conflict265;

struct anon_struct.conflict265 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct vif_info_tag vif_info_tag, *Pvif_info_tag;


// WARNING! conflicting data type names: /DWARF/vif_mgmt.h/vif_info_tag/anon_union_for_u - /DWARF/timers.c/tmrTimerQueueMessage/anon_union_for_u

struct vif_info_tag {
    struct co_list_hdr list_hdr;
    uint32_t prevent_sleep;
    uint32_t txq_params[4];
    struct mm_timer_tag tbtt_timer;
    struct mm_timer_tag tmr_bcn_to;
    struct mac_addr.conflict bssid;
    undefined field_0x3e;
    undefined field_0x3f;
    struct chan_ctxt_tag * chan_ctxt;
    struct chan_tbtt_tag tbtt_switch;
    struct mac_addr.conflict mac_addr;
    uint8_t type;
    uint8_t index;
    _Bool active;
    int8_t tx_power;
    int8_t user_tx_power;
    undefined field_0x5b;
    union anon_union_for_u u;
    struct co_list sta_list;
    struct mac_bss_info bss_info;
    undefined field_0x41c;
    undefined field_0x41d;
    undefined field_0x41e;
    undefined field_0x41f;
    struct key_info_tag key_info[4];
    struct key_info_tag * default_key;
    uint32_t flags;
    struct mm_chan_ctxt_add_req csa_channel;
    undefined field_0x5d2;
    undefined field_0x5d3;
    undefined field_0x5d4;
    undefined field_0x5d5;
    undefined field_0x5d6;
    undefined field_0x5d7;
};

typedef struct anon_struct.conflict150 anon_struct.conflict150, *Panon_struct.conflict150;

struct anon_struct.conflict150 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict271 anon_struct.conflict271, *Panon_struct.conflict271;

struct anon_struct.conflict271 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict272 anon_struct.conflict272, *Panon_struct.conflict272;

struct anon_struct.conflict272 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict152 anon_struct.conflict152, *Panon_struct.conflict152;

struct anon_struct.conflict152 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict273 anon_struct.conflict273, *Panon_struct.conflict273;

struct anon_struct.conflict273 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict153 anon_struct.conflict153, *Panon_struct.conflict153;

struct anon_struct.conflict153 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict274 anon_struct.conflict274, *Panon_struct.conflict274;

struct anon_struct.conflict274 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict270 anon_struct.conflict270, *Panon_struct.conflict270;

struct anon_struct.conflict270 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict279 anon_struct.conflict279, *Panon_struct.conflict279;

struct anon_struct.conflict279 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict154 anon_struct.conflict154, *Panon_struct.conflict154;

struct anon_struct.conflict154 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict275 anon_struct.conflict275, *Panon_struct.conflict275;

struct anon_struct.conflict275 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict155 anon_struct.conflict155, *Panon_struct.conflict155;

struct anon_struct.conflict155 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict156 anon_struct.conflict156, *Panon_struct.conflict156;

struct anon_struct.conflict156 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict157 anon_struct.conflict157, *Panon_struct.conflict157;

struct anon_struct.conflict157 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict278 anon_struct.conflict278, *Panon_struct.conflict278;

struct anon_struct.conflict278 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict164 anon_struct.conflict164, *Panon_struct.conflict164;

struct anon_struct.conflict164 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict165 anon_struct.conflict165, *Panon_struct.conflict165;

struct anon_struct.conflict165 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict166 anon_struct.conflict166, *Panon_struct.conflict166;

struct anon_struct.conflict166 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict167 anon_struct.conflict167, *Panon_struct.conflict167;

struct anon_struct.conflict167 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct anon_struct.conflict174 anon_struct.conflict174, *Panon_struct.conflict174;

struct anon_struct.conflict174 {
    uint16_t listen_interval;
    _Bool dont_wait_bcmc;
    uint8_t ps_retry;
    uint8_t ap_id;
    undefined field_0x5;
    undefined field_0x6;
    undefined field_0x7;
    uint32_t uapsd_last_rxtx;
    uint8_t uapsd_queues;
    undefined field_0xd;
    undefined field_0xe;
    undefined field_0xf;
    uint32_t mon_last_tx;
    uint32_t mon_last_crc;
    uint8_t beacon_loss_cnt;
    int8_t rssi;
    int8_t rssi_thold;
    uint8_t rssi_hyst;
    _Bool rssi_status;
    uint8_t csa_count;
    _Bool csa_occured;
    undefined field_0x1f;
};

typedef struct anon_struct.conflict175 anon_struct.conflict175, *Panon_struct.conflict175;

struct anon_struct.conflict175 {
    uint32_t dummy;
    struct txl_frame_desc_tag bcn_desc;
    uint16_t bcn_len;
    uint16_t tim_len;
    uint16_t tim_bitmap_set;
    uint16_t bcn_int;
    uint8_t bcn_tbtt_ratio;
    uint8_t bcn_tbtt_cnt;
    _Bool bcn_configured;
    uint8_t dtim_count;
    uint8_t tim_n1;
    uint8_t tim_n2;
    uint8_t bc_mc_status;
    uint8_t csa_count;
    uint8_t csa_oft[2];
    uint8_t ps_sta_cnt;
    undefined field_0x2ef;
    uint16_t ctrl_port_ethertype;
    undefined field_0x2f2;
    undefined field_0x2f3;
};

typedef struct _wifi_conn _wifi_conn, *P_wifi_conn;

struct _wifi_conn {
    char ssid[32];
    char ssid_tail[1];
    char pask[64];
};

typedef struct _wifi_item _wifi_item, *P_wifi_item;

struct _wifi_item {
    char ssid[32];
    uint32_t ssid_len;
    uint8_t bssid[6];
    uint8_t channel;
    uint8_t auth;
    int8_t rssi;
    undefined field_0x2d;
    undefined field_0x2e;
    undefined field_0x2f;
};

typedef struct _wifi_item _wifi_item_t;

typedef struct _wifi_state _wifi_state, *P_wifi_state;

struct _wifi_state {
    char ip[16];
    char gw[16];
    char mask[16];
    char ssid[32];
    char ssid_tail[1];
    uint8_t bssid[6];
    uint8_t state;
};

typedef struct wifi_state wifi_state, *Pwifi_state;

struct wifi_state {
    char ip[16];
    char gw[16];
    char mask[16];
    char ssid[32];
    char ssid_tail[1];
    uint8_t bssid[6];
    uint8_t state;
};

typedef struct blesync_wifi_item blesync_wifi_item, *Pblesync_wifi_item;

struct blesync_wifi_item {
    char ssid[32];
    uint32_t ssid_len;
    uint8_t bssid[6];
    uint8_t channel;
    uint8_t auth;
    int8_t rssi;
    undefined field_0x2d;
    undefined field_0x2e;
    undefined field_0x2f;
};

typedef struct bl_ble_sync bl_ble_sync, *Pbl_ble_sync;

typedef struct bl_ble_sync bl_ble_sync_t;

typedef struct queue_buf queue_buf, *Pqueue_buf;

typedef struct blesync_wifi_func blesync_wifi_func, *Pblesync_wifi_func;

typedef struct wifi_conn wifi_conn, *Pwifi_conn;

typedef struct blesync_wifi_item blesync_wifi_item_t;

struct queue_buf {
    uint8_t buf[256];
    uint32_t len;
};

struct blesync_wifi_func {
    void (* local_connect_remote_ap)(struct wifi_conn *);
    void (* local_disconnect_remote_ap)(void);
    void (* local_wifi_scan)(void (* )(void *));
    void (* local_wifi_state_get)(void (* )(void *));
};

struct wifi_conn {
    uint8_t ssid[32];
    uint8_t ssid_tail[1];
    uint8_t pask[64];
};

struct bl_ble_sync {
    SemaphoreHandle_t xSemaphore;
    StaticSemaphore_t xSemaphoreBuffer;
    struct wifi_state state;
    QueueHandle_t xQueue1;
    StaticQueue_t xQueueBuffer;
    struct queue_buf buf[2];
    struct queue_buf send_buf;
    pro_handle_t pro_handle;
    void (* complete_cb)(void *);
    void * p_arg;
    struct blesync_wifi_func * wifi_func;
    uint8_t attr_read_buf[256];
    uint8_t attr_write_buf[256];
    uint16_t rbuf_len;
    uint8_t task_runing;
    uint8_t scaning;
    uint8_t stop_flag;
    struct wifi_conn conn_info;
    undefined field_0x682;
    undefined field_0x683;
    struct bt_conn * p_cur_conn;
    StackType_t stack[512];
    StaticTask_t task;
    TaskHandle_t task_handle;
    undefined field_0xeec;
    undefined field_0xeed;
    undefined field_0xeee;
    undefined field_0xeef;
    struct pro_dev pro_dev;
    blesync_wifi_item_t ap_item[50];
    uint8_t w_ap_item;
    uint8_t r_ap_item;
    undefined field_0x1902;
    undefined field_0x1903;
    undefined field_0x1904;
    undefined field_0x1905;
    undefined field_0x1906;
    undefined field_0x1907;
};

typedef struct bl_ble_sync.conflict1 bl_ble_sync.conflict1, *Pbl_ble_sync.conflict1;

typedef void (* pfn_complete_cb_t.conflict)(void *);

struct bl_ble_sync.conflict1 {
    SemaphoreHandle_t xSemaphore;
    StaticSemaphore_t xSemaphoreBuffer;
    struct wifi_state state;
    QueueHandle_t xQueue1;
    StaticQueue_t xQueueBuffer;
    struct queue_buf buf[2];
    struct queue_buf send_buf;
    pro_handle_t pro_handle;
    pfn_complete_cb_t.conflict complete_cb;
    void * p_arg;
    struct blesync_wifi_func * wifi_func;
    uint8_t attr_read_buf[256];
    uint8_t attr_write_buf[256];
    uint16_t rbuf_len;
    uint8_t task_runing;
    uint8_t scaning;
    uint8_t stop_flag;
    struct wifi_conn conn_info;
    undefined field_0x682;
    undefined field_0x683;
    struct bt_conn * p_cur_conn;
    StackType_t stack[512];
    StaticTask_t task;
    TaskHandle_t task_handle;
    undefined field_0xeec;
    undefined field_0xeed;
    undefined field_0xeee;
    undefined field_0xeef;
    struct pro_dev pro_dev;
    blesync_wifi_item_t ap_item[50];
    uint8_t w_ap_item;
    uint8_t r_ap_item;
    undefined field_0x1902;
    undefined field_0x1903;
    undefined field_0x1904;
    undefined field_0x1905;
    undefined field_0x1906;
    undefined field_0x1907;
};

typedef struct bl_ble_sync.conflict1 bl_ble_sync_t.conflict;

typedef struct bl_ble_sync.conflict bl_ble_sync.conflict, *Pbl_ble_sync.conflict;

struct bl_ble_sync.conflict {
    SemaphoreHandle_t xSemaphore;
    StaticSemaphore_t xSemaphoreBuffer;
    struct wifi_state state;
    QueueHandle_t xQueue1;
    StaticQueue_t xQueueBuffer;
    struct queue_buf buf[2];
    struct queue_buf send_buf;
    pro_handle_t pro_handle;
    pfn_complete_cb_t.conflict complete_cb;
    void * p_arg;
    struct blesync_wifi_func * wifi_func;
    uint8_t attr_read_buf[256];
    uint8_t attr_write_buf[256];
    uint16_t rbuf_len;
    uint8_t task_runing;
    uint8_t scaning;
    uint8_t stop_flag;
    struct wifi_conn conn_info;
    undefined field_0x682;
    undefined field_0x683;
    struct bt_conn * p_cur_conn;
    StackType_t stack[512];
    StaticTask_t task;
    TaskHandle_t task_handle;
    undefined field_0xeec;
    undefined field_0xeed;
    undefined field_0xeee;
    undefined field_0xeef;
    struct pro_dev pro_dev;
    blesync_wifi_item_t ap_item[50];
    uint8_t w_ap_item;
    uint8_t r_ap_item;
    undefined field_0x1902;
    undefined field_0x1903;
    undefined field_0x1904;
    undefined field_0x1905;
    undefined field_0x1906;
    undefined field_0x1907;
};

typedef struct tcpip_msg tcpip_msg, *Ptcpip_msg;

typedef enum tcpip_msg_type {
    TCPIP_MSG_API=0,
    TCPIP_MSG_API_CALL=1,
    TCPIP_MSG_CALLBACK=3,
    TCPIP_MSG_CALLBACK_STATIC=4,
    TCPIP_MSG_INPKT=2
} tcpip_msg_type;


// WARNING! conflicting data type names: /DWARF/tcpip_priv.h/tcpip_msg/anon_union_for_msg - /DWARF/api_msg.h/netifapi_msg/anon_union_for_msg

struct tcpip_msg {
    enum tcpip_msg_type type;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    union anon_union_for_msg msg;
};

typedef struct anon_struct.conflict121 anon_struct.conflict121, *Panon_struct.conflict121;

struct anon_struct.conflict121 {
    tcpip_callback_fn function;
    void * msg;
};

typedef struct anon_struct.conflict122 anon_struct.conflict122, *Panon_struct.conflict122;

struct anon_struct.conflict122 {
    err_t (* function)(struct tcpip_api_call_data *);
    struct tcpip_api_call_data * arg;
    sys_sem_t * sem;
};

typedef struct anon_struct.conflict123 anon_struct.conflict123, *Panon_struct.conflict123;

struct anon_struct.conflict123 {
    struct pbuf * p;
    struct netif * netif;
    err_t (* input_fn)(struct pbuf *, struct netif *);
};

typedef struct anon_struct.conflict124 anon_struct.conflict124, *Panon_struct.conflict124;

struct anon_struct.conflict124 {
    tcpip_callback_fn function;
    void * ctx;
};

typedef struct DMA_Control_Reg.conflict DMA_Control_Reg.conflict, *PDMA_Control_Reg.conflict;

struct DMA_Control_Reg.conflict {
    uint32_t TransferSize:12;
    uint32_t SBSize:3;
    uint32_t DBSize:3;
    uint32_t SWidth:3;
    uint32_t DWidth:3;
    uint32_t SLargerD:1;
    uint32_t reserved_25:1;
    uint32_t SI:1;
    uint32_t DI:1;
    uint32_t Prot:3;
    uint32_t I:1;
};

typedef struct dhcp_server dhcp_server, *Pdhcp_server;

typedef struct dhcp_client_node dhcp_client_node, *Pdhcp_client_node;

struct dhcp_server {
    struct dhcp_server * next;
    struct netif * netif;
    struct udp_pcb * pcb;
    struct dhcp_client_node * node_list;
    ip4_addr_t start;
    ip4_addr_t end;
    ip4_addr_t current;
};

struct dhcp_client_node {
    struct dhcp_client_node * next;
    u8_t chaddr[6];
    undefined field_0xa;
    undefined field_0xb;
    ip4_addr_t ipaddr;
    u32_t lease_end;
};

typedef struct eth_hdr eth_hdr, *Peth_hdr;

struct eth_hdr {
    struct eth_addr dest;
    struct eth_addr src;
    u16_t type;
};

typedef struct tc_cmac_struct tc_cmac_struct, *Ptc_cmac_struct;

struct tc_cmac_struct {
    uint8_t iv[16];
    uint8_t K1[16];
    uint8_t K2[16];
    uint8_t leftover[16];
    uint keyid;
    uint leftover_offset;
    TCAesKeySched_t sched;
    undefined field_0x4c;
    undefined field_0x4d;
    undefined field_0x4e;
    undefined field_0x4f;
    uint64_t countdown;
};

typedef struct tc_cmac_struct * TCCmacState_t;

typedef enum ps_dpsm_state_bit_pos {
    PS_DPSM_STATE_ON=0,
    PS_DPSM_STATE_PAUSE=3,
    PS_DPSM_STATE_PAUSING=1,
    PS_DPSM_STATE_RESUMING=2,
    PS_DPSM_STATE_SET_MODE_REQ=4
} ps_dpsm_state_bit_pos;

typedef struct ps_env_tag ps_env_tag, *Pps_env_tag;

struct ps_env_tag {
    _Bool ps_on;
    undefined field_0x1;
    ke_task_id_t taskid;
    uint32_t prevent_sleep;
    uint8_t cfm_cnt;
    undefined field_0x9;
    undefined field_0xa;
    undefined field_0xb;
    struct mm_timer_tag uapsd_timer;
    _Bool uapsd_tmr_on;
    _Bool uapsd_on;
    undefined field_0x1e;
    undefined field_0x1f;
    uint32_t uapsd_timeout;
    uint8_t dpsm_state;
    uint8_t next_mode;
    undefined field_0x26;
    undefined field_0x27;
};

typedef struct tcp_pcb.conflict10 tcp_pcb.conflict10, *Ptcp_pcb.conflict10;

struct tcp_pcb.conflict10 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict tcp_pcb.conflict, *Ptcp_pcb.conflict;

struct tcp_pcb.conflict {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict9 tcp_pcb.conflict9, *Ptcp_pcb.conflict9;

struct tcp_pcb.conflict9 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict7 tcp_pcb.conflict7, *Ptcp_pcb.conflict7;

struct tcp_pcb.conflict7 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict8 tcp_pcb.conflict8, *Ptcp_pcb.conflict8;

struct tcp_pcb.conflict8 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict1 tcp_pcb.conflict1, *Ptcp_pcb.conflict1;

struct tcp_pcb.conflict1 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict2 tcp_pcb.conflict2, *Ptcp_pcb.conflict2;

struct tcp_pcb.conflict2 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict5 tcp_pcb.conflict5, *Ptcp_pcb.conflict5;

struct tcp_pcb.conflict5 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict6 tcp_pcb.conflict6, *Ptcp_pcb.conflict6;

struct tcp_pcb.conflict6 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict3 tcp_pcb.conflict3, *Ptcp_pcb.conflict3;

struct tcp_pcb.conflict3 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct tcp_pcb.conflict4 tcp_pcb.conflict4, *Ptcp_pcb.conflict4;

struct tcp_pcb.conflict4 {
    ip_addr_t local_ip;
    ip_addr_t remote_ip;
    u8_t netif_idx;
    u8_t so_options;
    u8_t tos;
    u8_t ttl;
    struct tcp_pcb * next;
    void * callback_arg;
    enum tcp_state state;
    u8_t prio;
    u16_t local_port;
    u16_t remote_port;
    tcpflags_t flags;
    u8_t polltmr;
    u8_t pollinterval;
    u8_t last_timer;
    undefined field_0x1f;
    u32_t tmr;
    u32_t rcv_nxt;
    tcpwnd_size_t rcv_wnd;
    tcpwnd_size_t rcv_ann_wnd;
    u32_t rcv_ann_right_edge;
    s16_t rtime;
    u16_t mss;
    u32_t rttest;
    u32_t rtseq;
    s16_t sa;
    s16_t sv;
    s16_t rto;
    u8_t nrtx;
    u8_t dupacks;
    u32_t lastack;
    tcpwnd_size_t cwnd;
    tcpwnd_size_t ssthresh;
    u32_t rto_end;
    u32_t snd_nxt;
    u32_t snd_wl1;
    u32_t snd_wl2;
    u32_t snd_lbb;
    tcpwnd_size_t snd_wnd;
    tcpwnd_size_t snd_wnd_max;
    tcpwnd_size_t snd_buf;
    u16_t snd_queuelen;
    u16_t unsent_oversize;
    tcpwnd_size_t bytes_acked;
    struct tcp_seg * unsent;
    struct tcp_seg * unacked;
    struct tcp_seg * ooseq;
    struct pbuf * refused_data;
    struct tcp_pcb_listen * listener;
    err_t (* sent)(void *, struct tcp_pcb *, u16_t);
    err_t (* recv)(void *, struct tcp_pcb *, struct pbuf *, err_t);
    tcp_connected_fn connected;
    err_t (* poll)(void *, struct tcp_pcb *);
    void (* errf)(void *, err_t);
    u32_t keep_idle;
    u32_t keep_intvl;
    u32_t keep_cnt;
    u8_t persist_cnt;
    u8_t persist_backoff;
    u8_t persist_probe;
    u8_t keep_cnt_sent;
};

typedef struct HeapRegion HeapRegion, *PHeapRegion;

struct HeapRegion {
    uint8_t * pucStartAddress;
    size_t xSizeInBytes;
};

typedef struct HeapRegion HeapRegion_t;

typedef struct _IEEEtypes_Rsn_t _IEEEtypes_Rsn_t, *P_IEEEtypes_Rsn_t;

typedef struct _IEEEtypes_Rsn_t IEEEtypes_Rsn_t;

typedef struct _wpa_suite_t _wpa_suite_t, *P_wpa_suite_t;

typedef struct _wpa_suite_t wpa_suite_mcast_t;

typedef struct anon_struct.conflict203 anon_struct.conflict203, *Panon_struct.conflict203;

typedef struct anon_struct.conflict203 wpa_suite_ucast_t;

typedef struct anon_struct.conflict203 wpa_suite_auth_key_mgmt_t;

typedef struct _wpa_suite_t wpa_suite;

struct _wpa_suite_t {
    uint8_t oui[3];
    uint8_t type;
};

struct anon_struct.conflict203 {
    uint16_t count;
    wpa_suite list[2];
};

struct _IEEEtypes_Rsn_t {
    uint8_t element_id;
    uint8_t len;
    uint16_t version;
    wpa_suite_mcast_t group_cipher;
    wpa_suite_ucast_t pairwise_cipher;
    wpa_suite_auth_key_mgmt_t auth_key_mgmt;
};

typedef struct _IEEEtypes_Wpa_t _IEEEtypes_Wpa_t, *P_IEEEtypes_Wpa_t;

typedef struct _IEEEtypes_Wpa_t IEEEtypes_Wpa_t;

struct _IEEEtypes_Wpa_t {
    uint8_t element_id;
    uint8_t len;
    uint8_t oui[4];
    uint16_t version;
    wpa_suite_mcast_t group_cipher;
    wpa_suite_ucast_t pairwise_cipher;
    wpa_suite_auth_key_mgmt_t auth_key_mgmt;
};

typedef struct cm_ConnectionInfo cm_ConnectionInfo_t;

typedef struct wifi_ap_data_rate wifi_ap_data_rate, *Pwifi_ap_data_rate;

struct wifi_ap_data_rate {
    uint8_t data_rate;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    char * val;
};

typedef struct rc4_key rc4_key, *Prc4_key;

struct rc4_key {
    uchar state[256];
    uchar x;
    uchar y;
};

typedef struct netif.conflict netif.conflict, *Pnetif.conflict;

typedef void (* netif_status_callback_fn.conflict)(struct netif *);

struct netif.conflict {
    struct netif * next;
    ip_addr_t ip_addr;
    ip_addr_t netmask;
    ip_addr_t gw;
    err_t (* input)(struct pbuf *, struct netif *);
    err_t (* output)(struct netif *, struct pbuf *, ip4_addr_t *);
    err_t (* linkoutput)(struct netif *, struct pbuf *);
    netif_status_callback_fn.conflict status_callback;
    netif_status_callback_fn.conflict link_callback;
    void * state;
    void * client_data[3];
    char * hostname;
    u16_t mtu;
    u8_t hwaddr[6];
    u8_t hwaddr_len;
    u8_t flags;
    char name[2];
    u8_t num;
    u8_t rs_count;
    undefined field_0x46;
    undefined field_0x47;
    err_t (* igmp_mac_filter)(struct netif *, ip4_addr_t *, enum netif_mac_filter_action);
};

typedef u8_t netif_addr_idx_t;

typedef enum lwip_internal_netif_client_data_index {
    LWIP_NETIF_CLIENT_DATA_INDEX_DHCP=0,
    LWIP_NETIF_CLIENT_DATA_INDEX_IGMP=1,
    LWIP_NETIF_CLIENT_DATA_INDEX_MAX=2
} lwip_internal_netif_client_data_index;

typedef enum co_llcp_opcode {
    LLCP_CHANNEL_MAP_IND_OPCODE=1,
    LLCP_CONNECTION_PARAM_REQ_OPCODE=15,
    LLCP_CONNECTION_PARAM_RSP_OPCODE=16,
    LLCP_CONNECTION_UPDATE_IND_OPCODE=0,
    LLCP_ENC_REQ_OPCODE=3,
    LLCP_ENC_RSP_OPCODE=4,
    LLCP_FEATURE_REQ_OPCODE=8,
    LLCP_FEATURE_RSP_OPCODE=9,
    LLCP_LENGTH_REQ_OPCODE=20,
    LLCP_LENGTH_RSP_OPCODE=21,
    LLCP_OPCODE_MAX_OPCODE=22,
    LLCP_PAUSE_ENC_REQ_OPCODE=10,
    LLCP_PAUSE_ENC_RSP_OPCODE=11,
    LLCP_PING_REQ_OPCODE=18,
    LLCP_PING_RSP_OPCODE=19,
    LLCP_REJECT_IND_EXT_OPCODE=17,
    LLCP_REJECT_IND_OPCODE=13,
    LLCP_SLAVE_FEATURE_REQ_OPCODE=14,
    LLCP_START_ENC_REQ_OPCODE=5,
    LLCP_START_ENC_RSP_OPCODE=6,
    LLCP_TERMINATE_IND_OPCODE=2,
    LLCP_UNKNOWN_RSP_OPCODE=7,
    LLCP_VERSION_IND_OPCODE=12
} co_llcp_opcode;

typedef enum co_llcp_length {
    LLCP_CH_MAP_REQ_LEN=8,
    LLCP_CON_PARAM_REQ_LEN=24,
    LLCP_CON_PARAM_RSP_LEN=24,
    LLCP_CON_REQ_LEN=34,
    LLCP_CON_UPD_IND_LEN=12,
    LLCP_ENC_REQ_LEN=23,
    LLCP_ENC_RSP_LEN=13,
    LLCP_FEAT_REQ_LEN=9,
    LLCP_FEAT_RSP_LEN=9,
    LLCP_LENGTH_REQ_LEN=9,
    LLCP_LENGTH_RSP_LEN=9,
    LLCP_PA_ENC_REQ_LEN=1,
    LLCP_PA_ENC_RSP_LEN=1,
    LLCP_PDU_LENGTH_MAX=34,
    LLCP_PING_REQ_LEN=1,
    LLCP_PING_RSP_LEN=1,
    LLCP_REJECT_IND_EXT_LEN=3,
    LLCP_REJ_IND_LEN=2,
    LLCP_SLAVE_FEATURE_REQ_LEN=9,
    LLCP_ST_ENC_REQ_LEN=1,
    LLCP_ST_ENC_RSP_LEN=1,
    LLCP_TERM_IND_LEN=2,
    LLCP_UNKN_RSP_LEN=2,
    LLCP_VERS_IND_LEN=6
} co_llcp_length;

typedef int __intptr_t;

typedef __intptr_t intptr_t;

typedef struct rxl_cntrl_env_tag rxl_cntrl_env_tag, *Prxl_cntrl_env_tag;

struct rxl_cntrl_env_tag {
    struct co_list ready;
    struct rx_dmadesc * first;
    struct rx_dmadesc * last;
    struct rx_dmadesc * free;
    uint32_t packet_stack_cnt;
};

typedef struct counter_fc counter_fc, *Pcounter_fc;

struct counter_fc {
    uint16_t acl_pkt_sent;
};

typedef struct host_set_fc host_set_fc, *Phost_set_fc;

struct host_set_fc {
    _Bool acl_flow_cntl_en;
    undefined field_0x1;
    uint16_t acl_pkt_len;
    uint16_t acl_pkt_nb;
    uint16_t curr_pkt_nb;
};

typedef struct hci_fc_tag hci_fc_tag, *Phci_fc_tag;

struct hci_fc_tag {
    struct host_set_fc host_set;
    struct counter_fc cntr;
};

typedef struct _gpio_ctx_desc _gpio_ctx_desc, *P_gpio_ctx_desc;

struct _gpio_ctx_desc {
    struct _gpio_ctx_desc * next;
    void (* gpio_handler)(void *);
    void * arg;
    uint8_t gpioPin;
    uint8_t intCtrlMod;
    uint8_t intTrgMod;
    undefined field_0xf;
};

typedef struct _gpio_ctx_desc gpio_ctx_t;

typedef struct gpio_feature_config gpio_feature_config, *Pgpio_feature_config;

struct gpio_feature_config {
    int pin;
    uint8_t valid;
    uint8_t feature;
    uint8_t active;
    uint8_t mode;
    uint time;
};

typedef struct GLB_GPIO_Cfg_Type GLB_GPIO_Cfg_Type, *PGLB_GPIO_Cfg_Type;

struct GLB_GPIO_Cfg_Type {
    uint8_t gpioPin;
    uint8_t gpioFun;
    uint8_t gpioMode;
    uint8_t pullType;
    uint8_t drive;
    uint8_t smtCtrl;
};

typedef enum GLB_GPIO_FUNC_Type {
    GPIO_FUN_ANALOG=10,
    GPIO_FUN_EXT_PA=9,
    GPIO_FUN_FLASH=2,
    GPIO_FUN_I2C=6,
    GPIO_FUN_JTAG=14,
    GPIO_FUN_PWM=8,
    GPIO_FUN_SDIO=1,
    GPIO_FUN_SPI=4,
    GPIO_FUN_SWGPIO=11,
    GPIO_FUN_UART=7
} GLB_GPIO_FUNC_Type;

typedef enum GLB_GPIO_Type {
    GLB_GPIO_PIN_0=0,
    GLB_GPIO_PIN_1=1,
    GLB_GPIO_PIN_10=10,
    GLB_GPIO_PIN_11=11,
    GLB_GPIO_PIN_12=12,
    GLB_GPIO_PIN_13=13,
    GLB_GPIO_PIN_14=14,
    GLB_GPIO_PIN_15=15,
    GLB_GPIO_PIN_16=16,
    GLB_GPIO_PIN_17=17,
    GLB_GPIO_PIN_18=18,
    GLB_GPIO_PIN_19=19,
    GLB_GPIO_PIN_2=2,
    GLB_GPIO_PIN_20=20,
    GLB_GPIO_PIN_21=21,
    GLB_GPIO_PIN_22=22,
    GLB_GPIO_PIN_3=3,
    GLB_GPIO_PIN_4=4,
    GLB_GPIO_PIN_5=5,
    GLB_GPIO_PIN_6=6,
    GLB_GPIO_PIN_7=7,
    GLB_GPIO_PIN_8=8,
    GLB_GPIO_PIN_9=9,
    GLB_GPIO_PIN_MAX=23
} GLB_GPIO_Type;

typedef struct txl_buffer_list_tag txl_buffer_list_tag, *Ptxl_buffer_list_tag;

struct txl_buffer_list_tag {
    struct txl_buffer_tag * first;
    struct txl_buffer_tag * last;
};

typedef struct txl_buffer_env_tag txl_buffer_env_tag, *Ptxl_buffer_env_tag;

typedef struct txl_buffer_idx_tag txl_buffer_idx_tag, *Ptxl_buffer_idx_tag;

typedef struct txl_buffer_hw_desc_tag txl_buffer_hw_desc_tag, *Ptxl_buffer_hw_desc_tag;

struct txl_buffer_idx_tag {
    uint32_t used_area;
    uint32_t free;
    uint32_t free_size;
    uint32_t last;
    uint32_t next_needed;
    uint32_t buf_size;
    uint32_t * pool;
    struct txl_buffer_hw_desc_tag * desc;
    uint8_t count;
    undefined field_0x21;
    undefined field_0x22;
    undefined field_0x23;
};

struct txl_buffer_env_tag {
    struct txl_buffer_idx_tag buf_idx[5][1];
    struct txl_buffer_list_tag list[5];
};

struct txl_buffer_hw_desc_tag {
    struct dma_desc dma_desc;
    struct tx_pbd pbd;
};

typedef enum riscv_abi_type {
    ABI_ILP32=0,
    ABI_ILP32D=3,
    ABI_ILP32E=1,
    ABI_ILP32F=2,
    ABI_LP64=4,
    ABI_LP64D=6,
    ABI_LP64F=5
} riscv_abi_type;

typedef enum riscv_microarchitecture_type {
    generic=0,
    sifive_7=1
} riscv_microarchitecture_type;

typedef enum riscv_code_model {
    CM_MEDANY=1,
    CM_MEDLOW=0,
    CM_PIC=2
} riscv_code_model;

typedef struct PDS_DEFAULT_LV_CFG_Type.conflict1 PDS_DEFAULT_LV_CFG_Type.conflict1, *PPDS_DEFAULT_LV_CFG_Type.conflict1;

typedef struct PDS_CTL_Type.conflict3 PDS_CTL_Type.conflict3, *PPDS_CTL_Type.conflict3;

typedef struct PDS_CTL2_Type.conflict3 PDS_CTL2_Type.conflict3, *PPDS_CTL2_Type.conflict3;

typedef struct PDS_CTL3_Type.conflict3 PDS_CTL3_Type.conflict3, *PPDS_CTL3_Type.conflict3;

typedef struct PDS_CTL4_Type.conflict3 PDS_CTL4_Type.conflict3, *PPDS_CTL4_Type.conflict3;

struct PDS_CTL4_Type.conflict3 {
    uint32_t cpuPwrOff:1;
    uint32_t cpuRst:1;
    uint32_t cpuMemStby:1;
    uint32_t cpuGateClk:1;
    uint32_t rsv4_11:8;
    uint32_t WbPwrOff:1;
    uint32_t WbRst:1;
    uint32_t WbMemStby:1;
    uint32_t WbGateClk:1;
    uint32_t rsv16_23:8;
    uint32_t MiscPwrOff:1;
    uint32_t MiscRst:1;
    uint32_t MiscMemStby:1;
    uint32_t MiscGateClk:1;
    uint32_t rsv28_31:4;
};

struct PDS_CTL_Type.conflict3 {
    uint32_t pdsStart:1;
    uint32_t sleepForever:1;
    uint32_t xtalForceOff:1;
    uint32_t saveWiFiState:1;
    uint32_t dcdc18Off:1;
    uint32_t bgSysOff:1;
    uint32_t rsv6_7:2;
    uint32_t clkOff:1;
    uint32_t memStby:1;
    uint32_t rsv10:1;
    uint32_t isolation:1;
    uint32_t waitXtalRdy:1;
    uint32_t pdsPwrOff:1;
    uint32_t xtalOff:1;
    uint32_t socEnbForceOn:1;
    uint32_t pdsRstSocEn:1;
    uint32_t pdsRC32mOn:1;
    uint32_t pdsLdoVselEn:1;
    uint32_t rsv19_20:2;
    uint32_t wfiMask:1;
    uint32_t ldo11Off:1;
    uint32_t rsv23:1;
    uint32_t pdsLdoVol:4;
    uint32_t pdsCtlRfSel:2;
    uint32_t pdsCtlPllSel:2;
};

struct PDS_CTL3_Type.conflict3 {
    uint32_t rsv0:1;
    uint32_t forceMiscPwrOff:1;
    uint32_t rsv2_3:2;
    uint32_t forceMiscIsoEn:1;
    uint32_t rsv5_6:2;
    uint32_t forceMiscPdsRst:1;
    uint32_t rsv8_9:2;
    uint32_t forceMiscMemStby:1;
    uint32_t rsv11_12:2;
    uint32_t forceMiscGateClk:1;
    uint32_t rsv14_23:10;
    uint32_t CpuIsoEn:1;
    uint32_t rsv25_26:2;
    uint32_t WbIsoEn:1;
    uint32_t rsv28_29:2;
    uint32_t MiscIsoEn:1;
    uint32_t rsv31:1;
};

struct PDS_CTL2_Type.conflict3 {
    uint32_t forceCpuPwrOff:1;
    uint32_t rsv1:1;
    uint32_t forceWbPwrOff:1;
    uint32_t rsv3:1;
    uint32_t forceCpuIsoPwrOff:1;
    uint32_t rsv5:1;
    uint32_t forceWbIsoPwrOff:1;
    uint32_t rsv7:1;
    uint32_t forceCpuPdsRst:1;
    uint32_t rsv9:1;
    uint32_t forceWbPdsRst:1;
    uint32_t rsv11:1;
    uint32_t forceCpuMemStby:1;
    uint32_t rsv13:1;
    uint32_t forceWbMemStby:1;
    uint32_t rsv15:1;
    uint32_t forceCpuGateClk:1;
    uint32_t rsv17:1;
    uint32_t forceWbGateClk:1;
    uint32_t rsv19_31:12;
};

struct PDS_DEFAULT_LV_CFG_Type.conflict1 {
    struct PDS_CTL_Type.conflict3 pdsCtl;
    struct PDS_CTL2_Type.conflict3 pdsCtl2;
    struct PDS_CTL3_Type.conflict3 pdsCtl3;
    struct PDS_CTL4_Type.conflict3 pdsCtl4;
};

typedef struct PDS_CTL2_Type.conflict PDS_CTL2_Type.conflict, *PPDS_CTL2_Type.conflict;

struct PDS_CTL2_Type.conflict {
    uint32_t forceCpuPwrOff:1;
    uint32_t rsv1:1;
    uint32_t forceWbPwrOff:1;
    uint32_t rsv3:1;
    uint32_t forceCpuIsoPwrOff:1;
    uint32_t rsv5:1;
    uint32_t forceWbIsoPwrOff:1;
    uint32_t rsv7:1;
    uint32_t forceCpuPdsRst:1;
    uint32_t rsv9:1;
    uint32_t forceWbPdsRst:1;
    uint32_t rsv11:1;
    uint32_t forceCpuMemStby:1;
    uint32_t rsv13:1;
    uint32_t forceWbMemStby:1;
    uint32_t rsv15:1;
    uint32_t forceCpuGateClk:1;
    uint32_t rsv17:1;
    uint32_t forceWbGateClk:1;
    uint32_t rsv19_31:12;
};

typedef struct PDS_CTL3_Type.conflict4 PDS_CTL3_Type.conflict4, *PPDS_CTL3_Type.conflict4;

struct PDS_CTL3_Type.conflict4 {
    uint32_t rsv0:1;
    uint32_t forceMiscPwrOff:1;
    uint32_t rsv2_3:2;
    uint32_t forceMiscIsoEn:1;
    uint32_t rsv5_6:2;
    uint32_t forceMiscPdsRst:1;
    uint32_t rsv8_9:2;
    uint32_t forceMiscMemStby:1;
    uint32_t rsv11_12:2;
    uint32_t forceMiscGateClk:1;
    uint32_t rsv14_23:10;
    uint32_t CpuIsoEn:1;
    uint32_t rsv25_26:2;
    uint32_t WbIsoEn:1;
    uint32_t rsv28_29:2;
    uint32_t MiscIsoEn:1;
    uint32_t rsv31:1;
};

typedef struct PDS_RAM_CFG_Type.conflict1 PDS_RAM_CFG_Type.conflict1, *PPDS_RAM_CFG_Type.conflict1;

struct PDS_RAM_CFG_Type.conflict1 {
    uint32_t PDS_RAM_CFG_0KB_16KB_CPU_RAM_RET:1;
    uint32_t PDS_RAM_CFG_16KB_32KB_CPU_RAM_RET:1;
    uint32_t PDS_RAM_CFG_32KB_48KB_CPU_RAM_RET:1;
    uint32_t PDS_RAM_CFG_48KB_64KB_CPU_RAM_RET:1;
    uint32_t PDS_RAM_CFG_0KB_16KB_CPU_RAM_SLP:1;
    uint32_t PDS_RAM_CFG_16KB_32KB_CPU_RAM_SLP:1;
    uint32_t PDS_RAM_CFG_32KB_48KB_CPU_RAM_SLP:1;
    uint32_t PDS_RAM_CFG_48KB_64KB_CPU_RAM_SLP:1;
    uint32_t PDS_RAM_CFG_RSV:24;
};

typedef struct PDS_CTL4_Type PDS_CTL4_Type, *PPDS_CTL4_Type;

struct PDS_CTL4_Type {
    uint32_t cpuPwrOff:1;
    uint32_t cpuRst:1;
    uint32_t cpuMemStby:1;
    uint32_t cpuGateClk:1;
    uint32_t rsv4_11:8;
    uint32_t WbPwrOff:1;
    uint32_t WbRst:1;
    uint32_t WbMemStby:1;
    uint32_t WbGateClk:1;
    uint32_t rsv16_23:8;
    uint32_t MiscPwrOff:1;
    uint32_t MiscRst:1;
    uint32_t MiscMemStby:1;
    uint32_t MiscGateClk:1;
    uint32_t rsv28_31:4;
};

typedef struct PDS_CTL3_Type.conflict1 PDS_CTL3_Type.conflict1, *PPDS_CTL3_Type.conflict1;

struct PDS_CTL3_Type.conflict1 {
    uint32_t rsv0:1;
    uint32_t forceMiscPwrOff:1;
    uint32_t rsv2_3:2;
    uint32_t forceMiscIsoEn:1;
    uint32_t rsv5_6:2;
    uint32_t forceMiscPdsRst:1;
    uint32_t rsv8_9:2;
    uint32_t forceMiscMemStby:1;
    uint32_t rsv11_12:2;
    uint32_t forceMiscGateClk:1;
    uint32_t rsv14_23:10;
    uint32_t CpuIsoEn:1;
    uint32_t rsv25_26:2;
    uint32_t WbIsoEn:1;
    uint32_t rsv28_29:2;
    uint32_t MiscIsoEn:1;
    uint32_t rsv31:1;
};

typedef struct PDS_CTL3_Type.conflict2 PDS_CTL3_Type.conflict2, *PPDS_CTL3_Type.conflict2;

struct PDS_CTL3_Type.conflict2 {
    uint32_t rsv0:1;
    uint32_t forceMiscPwrOff:1;
    uint32_t rsv2_3:2;
    uint32_t forceMiscIsoEn:1;
    uint32_t rsv5_6:2;
    uint32_t forceMiscPdsRst:1;
    uint32_t rsv8_9:2;
    uint32_t forceMiscMemStby:1;
    uint32_t rsv11_12:2;
    uint32_t forceMiscGateClk:1;
    uint32_t rsv14_23:10;
    uint32_t CpuIsoEn:1;
    uint32_t rsv25_26:2;
    uint32_t WbIsoEn:1;
    uint32_t rsv28_29:2;
    uint32_t MiscIsoEn:1;
    uint32_t rsv31:1;
};

typedef struct PDS_RAM_CFG_Type.conflict PDS_RAM_CFG_Type.conflict, *PPDS_RAM_CFG_Type.conflict;

struct PDS_RAM_CFG_Type.conflict {
    uint32_t PDS_RAM_CFG_0KB_16KB_CPU_RAM_RET:1;
    uint32_t PDS_RAM_CFG_16KB_32KB_CPU_RAM_RET:1;
    uint32_t PDS_RAM_CFG_32KB_48KB_CPU_RAM_RET:1;
    uint32_t PDS_RAM_CFG_48KB_64KB_CPU_RAM_RET:1;
    uint32_t PDS_RAM_CFG_0KB_16KB_CPU_RAM_SLP:1;
    uint32_t PDS_RAM_CFG_16KB_32KB_CPU_RAM_SLP:1;
    uint32_t PDS_RAM_CFG_32KB_48KB_CPU_RAM_SLP:1;
    uint32_t PDS_RAM_CFG_48KB_64KB_CPU_RAM_SLP:1;
    uint32_t PDS_RAM_CFG_RSV:24;
};

typedef struct PDS_DEFAULT_LV_CFG_Type PDS_DEFAULT_LV_CFG_Type, *PPDS_DEFAULT_LV_CFG_Type;

typedef struct PDS_CTL_Type.conflict1 PDS_CTL_Type.conflict1, *PPDS_CTL_Type.conflict1;

typedef struct PDS_CTL2_Type.conflict1 PDS_CTL2_Type.conflict1, *PPDS_CTL2_Type.conflict1;

typedef struct PDS_CTL4_Type.conflict1 PDS_CTL4_Type.conflict1, *PPDS_CTL4_Type.conflict1;

struct PDS_CTL2_Type.conflict1 {
    uint32_t forceCpuPwrOff:1;
    uint32_t rsv1:1;
    uint32_t forceWbPwrOff:1;
    uint32_t rsv3:1;
    uint32_t forceCpuIsoPwrOff:1;
    uint32_t rsv5:1;
    uint32_t forceWbIsoPwrOff:1;
    uint32_t rsv7:1;
    uint32_t forceCpuPdsRst:1;
    uint32_t rsv9:1;
    uint32_t forceWbPdsRst:1;
    uint32_t rsv11:1;
    uint32_t forceCpuMemStby:1;
    uint32_t rsv13:1;
    uint32_t forceWbMemStby:1;
    uint32_t rsv15:1;
    uint32_t forceCpuGateClk:1;
    uint32_t rsv17:1;
    uint32_t forceWbGateClk:1;
    uint32_t rsv19_31:12;
};

struct PDS_CTL4_Type.conflict1 {
    uint32_t cpuPwrOff:1;
    uint32_t cpuRst:1;
    uint32_t cpuMemStby:1;
    uint32_t cpuGateClk:1;
    uint32_t rsv4_11:8;
    uint32_t WbPwrOff:1;
    uint32_t WbRst:1;
    uint32_t WbMemStby:1;
    uint32_t WbGateClk:1;
    uint32_t rsv16_23:8;
    uint32_t MiscPwrOff:1;
    uint32_t MiscRst:1;
    uint32_t MiscMemStby:1;
    uint32_t MiscGateClk:1;
    uint32_t rsv28_31:4;
};

struct PDS_CTL_Type.conflict1 {
    uint32_t pdsStart:1;
    uint32_t sleepForever:1;
    uint32_t xtalForceOff:1;
    uint32_t saveWiFiState:1;
    uint32_t dcdc18Off:1;
    uint32_t bgSysOff:1;
    uint32_t rsv6_7:2;
    uint32_t clkOff:1;
    uint32_t memStby:1;
    uint32_t rsv10:1;
    uint32_t isolation:1;
    uint32_t waitXtalRdy:1;
    uint32_t pdsPwrOff:1;
    uint32_t xtalOff:1;
    uint32_t socEnbForceOn:1;
    uint32_t pdsRstSocEn:1;
    uint32_t pdsRC32mOn:1;
    uint32_t pdsLdoVselEn:1;
    uint32_t rsv19_20:2;
    uint32_t wfiMask:1;
    uint32_t ldo11Off:1;
    uint32_t rsv23:1;
    uint32_t pdsLdoVol:4;
    uint32_t pdsCtlRfSel:2;
    uint32_t pdsCtlPllSel:2;
};

struct PDS_DEFAULT_LV_CFG_Type {
    struct PDS_CTL_Type.conflict1 pdsCtl;
    struct PDS_CTL2_Type.conflict1 pdsCtl2;
    struct PDS_CTL3_Type.conflict1 pdsCtl3;
    struct PDS_CTL4_Type.conflict1 pdsCtl4;
};

typedef struct PDS_RAM_CFG_Type PDS_RAM_CFG_Type, *PPDS_RAM_CFG_Type;

struct PDS_RAM_CFG_Type {
    uint32_t PDS_RAM_CFG_0KB_16KB_CPU_RAM_RET:1;
    uint32_t PDS_RAM_CFG_16KB_32KB_CPU_RAM_RET:1;
    uint32_t PDS_RAM_CFG_32KB_48KB_CPU_RAM_RET:1;
    uint32_t PDS_RAM_CFG_48KB_64KB_CPU_RAM_RET:1;
    uint32_t PDS_RAM_CFG_0KB_16KB_CPU_RAM_SLP:1;
    uint32_t PDS_RAM_CFG_16KB_32KB_CPU_RAM_SLP:1;
    uint32_t PDS_RAM_CFG_32KB_48KB_CPU_RAM_SLP:1;
    uint32_t PDS_RAM_CFG_48KB_64KB_CPU_RAM_SLP:1;
    uint32_t PDS_RAM_CFG_RSV:24;
};

typedef struct PDS_CTL4_Type.conflict2 PDS_CTL4_Type.conflict2, *PPDS_CTL4_Type.conflict2;

struct PDS_CTL4_Type.conflict2 {
    uint32_t cpuPwrOff:1;
    uint32_t cpuRst:1;
    uint32_t cpuMemStby:1;
    uint32_t cpuGateClk:1;
    uint32_t rsv4_11:8;
    uint32_t WbPwrOff:1;
    uint32_t WbRst:1;
    uint32_t WbMemStby:1;
    uint32_t WbGateClk:1;
    uint32_t rsv16_23:8;
    uint32_t MiscPwrOff:1;
    uint32_t MiscRst:1;
    uint32_t MiscMemStby:1;
    uint32_t MiscGateClk:1;
    uint32_t rsv28_31:4;
};

typedef struct PDS_CTL2_Type PDS_CTL2_Type, *PPDS_CTL2_Type;

struct PDS_CTL2_Type {
    uint32_t forceCpuPwrOff:1;
    uint32_t rsv1:1;
    uint32_t forceWbPwrOff:1;
    uint32_t rsv3:1;
    uint32_t forceCpuIsoPwrOff:1;
    uint32_t rsv5:1;
    uint32_t forceWbIsoPwrOff:1;
    uint32_t rsv7:1;
    uint32_t forceCpuPdsRst:1;
    uint32_t rsv9:1;
    uint32_t forceWbPdsRst:1;
    uint32_t rsv11:1;
    uint32_t forceCpuMemStby:1;
    uint32_t rsv13:1;
    uint32_t forceWbMemStby:1;
    uint32_t rsv15:1;
    uint32_t forceCpuGateClk:1;
    uint32_t rsv17:1;
    uint32_t forceWbGateClk:1;
    uint32_t rsv19_31:12;
};

typedef enum PDS_PLL_CLK_Type {
    PDS_PLL_CLK_120M=4,
    PDS_PLL_CLK_160M=3,
    PDS_PLL_CLK_192M=2,
    PDS_PLL_CLK_240M=1,
    PDS_PLL_CLK_32M=8,
    PDS_PLL_CLK_480M=0,
    PDS_PLL_CLK_48M=7,
    PDS_PLL_CLK_80M=6,
    PDS_PLL_CLK_96M=5
} PDS_PLL_CLK_Type;

typedef struct PDS_CTL4_Type.conflict PDS_CTL4_Type.conflict, *PPDS_CTL4_Type.conflict;

struct PDS_CTL4_Type.conflict {
    uint32_t cpuPwrOff:1;
    uint32_t cpuRst:1;
    uint32_t cpuMemStby:1;
    uint32_t cpuGateClk:1;
    uint32_t rsv4_11:8;
    uint32_t WbPwrOff:1;
    uint32_t WbRst:1;
    uint32_t WbMemStby:1;
    uint32_t WbGateClk:1;
    uint32_t rsv16_23:8;
    uint32_t MiscPwrOff:1;
    uint32_t MiscRst:1;
    uint32_t MiscMemStby:1;
    uint32_t MiscGateClk:1;
    uint32_t rsv28_31:4;
};

typedef struct PDS_CTL3_Type.conflict PDS_CTL3_Type.conflict, *PPDS_CTL3_Type.conflict;

struct PDS_CTL3_Type.conflict {
    uint32_t rsv0:1;
    uint32_t forceMiscPwrOff:1;
    uint32_t rsv2_3:2;
    uint32_t forceMiscIsoEn:1;
    uint32_t rsv5_6:2;
    uint32_t forceMiscPdsRst:1;
    uint32_t rsv8_9:2;
    uint32_t forceMiscMemStby:1;
    uint32_t rsv11_12:2;
    uint32_t forceMiscGateClk:1;
    uint32_t rsv14_23:10;
    uint32_t CpuIsoEn:1;
    uint32_t rsv25_26:2;
    uint32_t WbIsoEn:1;
    uint32_t rsv28_29:2;
    uint32_t MiscIsoEn:1;
    uint32_t rsv31:1;
};

typedef struct PDS_CTL3_Type PDS_CTL3_Type, *PPDS_CTL3_Type;

struct PDS_CTL3_Type {
    uint32_t rsv0:1;
    uint32_t forceMiscPwrOff:1;
    uint32_t rsv2_3:2;
    uint32_t forceMiscIsoEn:1;
    uint32_t rsv5_6:2;
    uint32_t forceMiscPdsRst:1;
    uint32_t rsv8_9:2;
    uint32_t forceMiscMemStby:1;
    uint32_t rsv11_12:2;
    uint32_t forceMiscGateClk:1;
    uint32_t rsv14_23:10;
    uint32_t CpuIsoEn:1;
    uint32_t rsv25_26:2;
    uint32_t WbIsoEn:1;
    uint32_t rsv28_29:2;
    uint32_t MiscIsoEn:1;
    uint32_t rsv31:1;
};

typedef struct PDS_CTL2_Type.conflict4 PDS_CTL2_Type.conflict4, *PPDS_CTL2_Type.conflict4;

struct PDS_CTL2_Type.conflict4 {
    uint32_t forceCpuPwrOff:1;
    uint32_t rsv1:1;
    uint32_t forceWbPwrOff:1;
    uint32_t rsv3:1;
    uint32_t forceCpuIsoPwrOff:1;
    uint32_t rsv5:1;
    uint32_t forceWbIsoPwrOff:1;
    uint32_t rsv7:1;
    uint32_t forceCpuPdsRst:1;
    uint32_t rsv9:1;
    uint32_t forceWbPdsRst:1;
    uint32_t rsv11:1;
    uint32_t forceCpuMemStby:1;
    uint32_t rsv13:1;
    uint32_t forceWbMemStby:1;
    uint32_t rsv15:1;
    uint32_t forceCpuGateClk:1;
    uint32_t rsv17:1;
    uint32_t forceWbGateClk:1;
    uint32_t rsv19_31:12;
};

typedef struct PDS_CTL2_Type.conflict2 PDS_CTL2_Type.conflict2, *PPDS_CTL2_Type.conflict2;

struct PDS_CTL2_Type.conflict2 {
    uint32_t forceCpuPwrOff:1;
    uint32_t rsv1:1;
    uint32_t forceWbPwrOff:1;
    uint32_t rsv3:1;
    uint32_t forceCpuIsoPwrOff:1;
    uint32_t rsv5:1;
    uint32_t forceWbIsoPwrOff:1;
    uint32_t rsv7:1;
    uint32_t forceCpuPdsRst:1;
    uint32_t rsv9:1;
    uint32_t forceWbPdsRst:1;
    uint32_t rsv11:1;
    uint32_t forceCpuMemStby:1;
    uint32_t rsv13:1;
    uint32_t forceWbMemStby:1;
    uint32_t rsv15:1;
    uint32_t forceCpuGateClk:1;
    uint32_t rsv17:1;
    uint32_t forceWbGateClk:1;
    uint32_t rsv19_31:12;
};

typedef struct PDS_CTL_Type.conflict PDS_CTL_Type.conflict, *PPDS_CTL_Type.conflict;

struct PDS_CTL_Type.conflict {
    uint32_t pdsStart:1;
    uint32_t sleepForever:1;
    uint32_t xtalForceOff:1;
    uint32_t saveWiFiState:1;
    uint32_t dcdc18Off:1;
    uint32_t bgSysOff:1;
    uint32_t rsv6_7:2;
    uint32_t clkOff:1;
    uint32_t memStby:1;
    uint32_t rsv10:1;
    uint32_t isolation:1;
    uint32_t waitXtalRdy:1;
    uint32_t pdsPwrOff:1;
    uint32_t xtalOff:1;
    uint32_t socEnbForceOn:1;
    uint32_t pdsRstSocEn:1;
    uint32_t pdsRC32mOn:1;
    uint32_t pdsLdoVselEn:1;
    uint32_t rsv19_20:2;
    uint32_t wfiMask:1;
    uint32_t ldo11Off:1;
    uint32_t rsv23:1;
    uint32_t pdsLdoVol:4;
    uint32_t pdsCtlRfSel:2;
    uint32_t pdsCtlPllSel:2;
};

typedef struct PDS_CTL_Type.conflict2 PDS_CTL_Type.conflict2, *PPDS_CTL_Type.conflict2;

struct PDS_CTL_Type.conflict2 {
    uint32_t pdsStart:1;
    uint32_t sleepForever:1;
    uint32_t xtalForceOff:1;
    uint32_t saveWiFiState:1;
    uint32_t dcdc18Off:1;
    uint32_t bgSysOff:1;
    uint32_t rsv6_7:2;
    uint32_t clkOff:1;
    uint32_t memStby:1;
    uint32_t rsv10:1;
    uint32_t isolation:1;
    uint32_t waitXtalRdy:1;
    uint32_t pdsPwrOff:1;
    uint32_t xtalOff:1;
    uint32_t socEnbForceOn:1;
    uint32_t pdsRstSocEn:1;
    uint32_t pdsRC32mOn:1;
    uint32_t pdsLdoVselEn:1;
    uint32_t rsv19_20:2;
    uint32_t wfiMask:1;
    uint32_t ldo11Off:1;
    uint32_t rsv23:1;
    uint32_t pdsLdoVol:4;
    uint32_t pdsCtlRfSel:2;
    uint32_t pdsCtlPllSel:2;
};

typedef enum PDS_PLL_XTAL_Type {
    PDS_PLL_XTAL_24M=1,
    PDS_PLL_XTAL_26M=5,
    PDS_PLL_XTAL_32M=2,
    PDS_PLL_XTAL_38P4M=3,
    PDS_PLL_XTAL_40M=4,
    PDS_PLL_XTAL_NONE=0,
    PDS_PLL_XTAL_RC32M=6
} PDS_PLL_XTAL_Type;

typedef struct PDS_DEFAULT_LV_CFG_Type.conflict PDS_DEFAULT_LV_CFG_Type.conflict, *PPDS_DEFAULT_LV_CFG_Type.conflict;

struct PDS_DEFAULT_LV_CFG_Type.conflict {
    struct PDS_CTL_Type.conflict2 pdsCtl;
    struct PDS_CTL2_Type.conflict2 pdsCtl2;
    struct PDS_CTL3_Type.conflict2 pdsCtl3;
    struct PDS_CTL4_Type.conflict2 pdsCtl4;
};

typedef struct PDS_CTL_Type PDS_CTL_Type, *PPDS_CTL_Type;

struct PDS_CTL_Type {
    uint32_t pdsStart:1;
    uint32_t sleepForever:1;
    uint32_t xtalForceOff:1;
    uint32_t saveWiFiState:1;
    uint32_t dcdc18Off:1;
    uint32_t bgSysOff:1;
    uint32_t rsv6_7:2;
    uint32_t clkOff:1;
    uint32_t memStby:1;
    uint32_t rsv10:1;
    uint32_t isolation:1;
    uint32_t waitXtalRdy:1;
    uint32_t pdsPwrOff:1;
    uint32_t xtalOff:1;
    uint32_t socEnbForceOn:1;
    uint32_t pdsRstSocEn:1;
    uint32_t pdsRC32mOn:1;
    uint32_t pdsLdoVselEn:1;
    uint32_t rsv19_20:2;
    uint32_t wfiMask:1;
    uint32_t ldo11Off:1;
    uint32_t rsv23:1;
    uint32_t pdsLdoVol:4;
    uint32_t pdsCtlRfSel:2;
    uint32_t pdsCtlPllSel:2;
};

typedef enum anon_enum_16 {
    HAL_AC0_TIMER_BIT=1,
    HAL_AC1_TIMER_BIT=2,
    HAL_AC2_TIMER_BIT=4,
    HAL_AC3_TIMER_BIT=8,
    HAL_BCN_TIMER_BIT=16,
    HAL_IDLE_TIMER_BIT=32,
    HAL_KE_TIMER_BIT=256,
    HAL_MM_TIMER_BIT=-128,
    HAL_RX_TIMER_BIT=64,
    LLD_EXT_ADV_STOP_IND=513,
    LLD_STOP_IND=512,
    ME_CHAN_CONFIG_CFM=5123,
    ME_CHAN_CONFIG_REQ=5122,
    ME_CONFIG_CFM=5121,
    ME_CONFIG_REQ=5120,
    ME_MAX=5137,
    ME_RC_SET_RATE_REQ=5136,
    ME_RC_STATS_CFM=5135,
    ME_RC_STATS_REQ=5134,
    ME_SET_ACTIVE_CFM=5138,
    ME_SET_ACTIVE_REQ=5137,
    ME_SET_CONTROL_PORT_CFM=5125,
    ME_SET_CONTROL_PORT_REQ=5124,
    ME_SET_PS_DISABLE_CFM=5140,
    ME_SET_PS_DISABLE_REQ=5139,
    ME_STA_ADD_CFM=5128,
    ME_STA_ADD_REQ=5127,
    ME_STA_DEL_CFM=5130,
    ME_STA_DEL_REQ=5129,
    ME_TKIP_MIC_FAILURE_IND=5126,
    ME_TRAFFIC_IND_CFM=5133,
    ME_TRAFFIC_IND_REQ=5132,
    ME_TX_CREDITS_UPDATE_IND=5131,
    PBUF_POOL=386,
    PBUF_RAM=640,
    PBUF_REF=65,
    PBUF_ROM=1,
    ROM_API_INDEX_AON_Get_Xtal_CapCode=8,
    ROM_API_INDEX_AON_LowPower_Enter_PDS0=18,
    ROM_API_INDEX_AON_LowPower_Exit_PDS0=19,
    ROM_API_INDEX_AON_Power_Off_BG=11,
    ROM_API_INDEX_AON_Power_Off_LDO11_SOC=13,
    ROM_API_INDEX_AON_Power_Off_LDO15_RF=15,
    ROM_API_INDEX_AON_Power_Off_MBG=5,
    ROM_API_INDEX_AON_Power_Off_SFReg=17,
    ROM_API_INDEX_AON_Power_Off_XTAL=9,
    ROM_API_INDEX_AON_Power_On_BG=10,
    ROM_API_INDEX_AON_Power_On_LDO11_SOC=12,
    ROM_API_INDEX_AON_Power_On_LDO15_RF=14,
    ROM_API_INDEX_AON_Power_On_MBG=4,
    ROM_API_INDEX_AON_Power_On_SFReg=16,
    ROM_API_INDEX_AON_Power_On_XTAL=6,
    ROM_API_INDEX_AON_Set_Xtal_CapCode=7,
    ROM_API_INDEX_ASM_Delay_Us=20,
    ROM_API_INDEX_BFLB_Soft_CRC32=-81,
    ROM_API_INDEX_BL602_Delay_MS=22,
    ROM_API_INDEX_BL602_Delay_US=21,
    ROM_API_INDEX_BL602_MemCmp=28,
    ROM_API_INDEX_BL602_MemCpy=23,
    ROM_API_INDEX_BL602_MemCpy4=24,
    ROM_API_INDEX_BL602_MemCpy_Fast=25,
    ROM_API_INDEX_BL602_MemSet=26,
    ROM_API_INDEX_BL602_MemSet4=27,
    ROM_API_INDEX_EF_Ctrl_AutoLoad_Done=33,
    ROM_API_INDEX_EF_Ctrl_Busy=32,
    ROM_API_INDEX_EF_Ctrl_Clear=37,
    ROM_API_INDEX_EF_Ctrl_Get_Trim_Parity=34,
    ROM_API_INDEX_EF_Ctrl_Load_Efuse_R0=31,
    ROM_API_INDEX_EF_Ctrl_Program_Efuse_0=30,
    ROM_API_INDEX_EF_Ctrl_Read_RC32K_Trim=36,
    ROM_API_INDEX_EF_Ctrl_Read_RC32M_Trim=35,
    ROM_API_INDEX_EF_Ctrl_Sw_AHB_Clk_0=29,
    ROM_API_INDEX_FUNC_EMPTY_END=511,
    ROM_API_INDEX_FUNC_EMPTY_START=-80,
    ROM_API_INDEX_GLB_Deswap_Flash_Pin=52,
    ROM_API_INDEX_GLB_GPIO_Get_Fun=58,
    ROM_API_INDEX_GLB_GPIO_Init=54,
    ROM_API_INDEX_GLB_GPIO_OUTPUT_Disable=56,
    ROM_API_INDEX_GLB_GPIO_OUTPUT_Enable=55,
    ROM_API_INDEX_GLB_GPIO_Set_HZ=57,
    ROM_API_INDEX_GLB_Get_BCLK_Div=40,
    ROM_API_INDEX_GLB_Get_HCLK_Div=41,
    ROM_API_INDEX_GLB_Get_Root_CLK_Sel=38,
    ROM_API_INDEX_GLB_SW_CPU_Reset=48,
    ROM_API_INDEX_GLB_SW_POR_Reset=49,
    ROM_API_INDEX_GLB_SW_System_Reset=47,
    ROM_API_INDEX_GLB_Select_External_Flash=51,
    ROM_API_INDEX_GLB_Select_Internal_Flash=50,
    ROM_API_INDEX_GLB_Set_PKA_CLK_Sel=46,
    ROM_API_INDEX_GLB_Set_SF_CLK=45,
    ROM_API_INDEX_GLB_Set_System_CLK=43,
    ROM_API_INDEX_GLB_Set_System_CLK_Div=39,
    ROM_API_INDEX_GLB_Swap_Flash_Pin=53,
    ROM_API_INDEX_HBN_32K_Sel=66,
    ROM_API_INDEX_HBN_Enable=61,
    ROM_API_INDEX_HBN_GPIO7_Dbg_Pull_Cfg=75,
    ROM_API_INDEX_HBN_Hw_Pu_Pd_Cfg=73,
    ROM_API_INDEX_HBN_Mode_Enter=59,
    ROM_API_INDEX_HBN_Pin_WakeUp_Mask=74,
    ROM_API_INDEX_HBN_Power_Down_Flash=60,
    ROM_API_INDEX_HBN_Power_Off_RC32K=71,
    ROM_API_INDEX_HBN_Power_Off_Xtal_32K=69,
    ROM_API_INDEX_HBN_Power_On_RC32K=70,
    ROM_API_INDEX_HBN_Power_On_Xtal_32K=68,
    ROM_API_INDEX_HBN_Reset=62,
    ROM_API_INDEX_HBN_Set_Embedded_Flash_Pullup=76,
    ROM_API_INDEX_HBN_Set_Ldo11_Aon_Vout=63,
    ROM_API_INDEX_HBN_Set_Ldo11_Rt_Vout=64,
    ROM_API_INDEX_HBN_Set_Ldo11_Soc_Vout=65,
    ROM_API_INDEX_HBN_Set_ROOT_CLK_Sel=67,
    ROM_API_INDEX_HBN_Trim_RC32K=72,
    ROM_API_INDEX_L1C_IROM_2T_Access_Set=79,
    ROM_API_INDEX_L1C_Set_Way_Disable=78,
    ROM_API_INDEX_L1C_Set_Wrap=77,
    ROM_API_INDEX_PDS_Default_Level_Config=84,
    ROM_API_INDEX_PDS_Disable_PLL_All_Clks=90,
    ROM_API_INDEX_PDS_Disable_PLL_Clk=92,
    ROM_API_INDEX_PDS_Enable=81,
    ROM_API_INDEX_PDS_Enable_PLL_All_Clks=89,
    ROM_API_INDEX_PDS_Enable_PLL_Clk=91,
    ROM_API_INDEX_PDS_Force_Config=82,
    ROM_API_INDEX_PDS_Power_Off_PLL=93,
    ROM_API_INDEX_PDS_Power_On_PLL=88,
    ROM_API_INDEX_PDS_RAM_Config=83,
    ROM_API_INDEX_PDS_Reset=80,
    ROM_API_INDEX_PDS_Select_RC32M_As_PLL_Ref=86,
    ROM_API_INDEX_PDS_Select_XTAL_As_PLL_Ref=87,
    ROM_API_INDEX_PDS_Trim_RC32M=85,
    ROM_API_INDEX_RSVD_0=1,
    ROM_API_INDEX_RSVD_1=2,
    ROM_API_INDEX_RSVD_LAST=3,
    ROM_API_INDEX_SEC_Eng_Turn_Off_Sec_Ring=95,
    ROM_API_INDEX_SEC_Eng_Turn_On_Sec_Ring=94,
    ROM_API_INDEX_SF_Cfg_Deinit_Ext_Flash_Gpio=-123,
    ROM_API_INDEX_SF_Cfg_Flash_Identify=-119,
    ROM_API_INDEX_SF_Cfg_Get_Flash_Cfg_Need_Lock=-121,
    ROM_API_INDEX_SF_Cfg_Init_Ext_Flash_Gpio=-125,
    ROM_API_INDEX_SF_Cfg_Init_Flash_Gpio=-120,
    ROM_API_INDEX_SF_Cfg_Init_Internal_Flash_Gpio=-124,
    ROM_API_INDEX_SF_Cfg_Restore_GPIO17_Fun=-122,
    ROM_API_INDEX_SF_Ctrl_AES_Disable=-106,
    ROM_API_INDEX_SF_Ctrl_AES_Enable=-107,
    ROM_API_INDEX_SF_Ctrl_AES_Enable_BE=-114,
    ROM_API_INDEX_SF_Ctrl_AES_Enable_LE=-113,
    ROM_API_INDEX_SF_Ctrl_AES_Set_IV=-109,
    ROM_API_INDEX_SF_Ctrl_AES_Set_IV_BE=-108,
    ROM_API_INDEX_SF_Ctrl_AES_Set_Key=-111,
    ROM_API_INDEX_SF_Ctrl_AES_Set_Key_BE=-110,
    ROM_API_INDEX_SF_Ctrl_AES_Set_Region=-112,
    ROM_API_INDEX_SF_Ctrl_Disable=-115,
    ROM_API_INDEX_SF_Ctrl_Enable=-118,
    ROM_API_INDEX_SF_Ctrl_GetBusyState=-99,
    ROM_API_INDEX_SF_Ctrl_Get_Clock_Delay=-97,
    ROM_API_INDEX_SF_Ctrl_Get_Flash_Image_Offset=-104,
    ROM_API_INDEX_SF_Ctrl_Icache2_Set=-100,
    ROM_API_INDEX_SF_Ctrl_Icache_Set=-101,
    ROM_API_INDEX_SF_Ctrl_Is_AES_Enable=-98,
    ROM_API_INDEX_SF_Ctrl_Select_Clock=-103,
    ROM_API_INDEX_SF_Ctrl_Select_Pad=-117,
    ROM_API_INDEX_SF_Ctrl_SendCmd=-102,
    ROM_API_INDEX_SF_Ctrl_Set_Clock_Delay=-96,
    ROM_API_INDEX_SF_Ctrl_Set_Flash_Image_Offset=-105,
    ROM_API_INDEX_SF_Ctrl_Set_Owner=-116,
    ROM_API_INDEX_SFlash_Blk32_Erase=106,
    ROM_API_INDEX_SFlash_Blk64_Erase=107,
    ROM_API_INDEX_SFlash_Busy=100,
    ROM_API_INDEX_SFlash_Cache_Enable_Set=121,
    ROM_API_INDEX_SFlash_Cache_Flush=122,
    ROM_API_INDEX_SFlash_Cache_Hit_Count_Get=124,
    ROM_API_INDEX_SFlash_Cache_Miss_Count_Get=125,
    ROM_API_INDEX_SFlash_Cache_Read_Disable=126,
    ROM_API_INDEX_SFlash_Cache_Read_Enable=123,
    ROM_API_INDEX_SFlash_Chip_Erase=104,
    ROM_API_INDEX_SFlash_DisableBurstWrap=116,
    ROM_API_INDEX_SFlash_Erase=108,
    ROM_API_INDEX_SFlash_GetDeviceId=112,
    ROM_API_INDEX_SFlash_GetJedecId=111,
    ROM_API_INDEX_SFlash_GetUniqueId=110,
    ROM_API_INDEX_SFlash_IDbus_Read_Enable=120,
    ROM_API_INDEX_SFlash_Init=96,
    ROM_API_INDEX_SFlash_Powerdown=113,
    ROM_API_INDEX_SFlash_Program=109,
    ROM_API_INDEX_SFlash_Qspi_Enable=102,
    ROM_API_INDEX_SFlash_Read=127,
    ROM_API_INDEX_SFlash_Read_Reg=98,
    ROM_API_INDEX_SFlash_Read_Reg_With_Cmd=-128,
    ROM_API_INDEX_SFlash_Releae_Powerdown=114,
    ROM_API_INDEX_SFlash_Reset_Continue_Read=118,
    ROM_API_INDEX_SFlash_Restore_From_Powerdown=-126,
    ROM_API_INDEX_SFlash_Sector_Erase=105,
    ROM_API_INDEX_SFlash_SetBurstWrap=115,
    ROM_API_INDEX_SFlash_SetSPIMode=97,
    ROM_API_INDEX_SFlash_Set_IDbus_Cfg=119,
    ROM_API_INDEX_SFlash_Software_Reset=117,
    ROM_API_INDEX_SFlash_Volatile_Reg_Write_Enable=103,
    ROM_API_INDEX_SFlash_Write_Enable=101,
    ROM_API_INDEX_SFlash_Write_Reg=99,
    ROM_API_INDEX_SFlash_Write_Reg_With_Cmd=-127,
    ROM_API_INDEX_System_Core_Clock_Update_From_RC32M=44,
    ROM_API_INDEX_Update_SystemCoreClockWith_XTAL=42,
    ROM_API_INDEX_VERSION=0,
    ROM_API_INDEX_XIP_SFlash_Erase_Need_Lock=-93,
    ROM_API_INDEX_XIP_SFlash_Erase_With_Lock=-84,
    ROM_API_INDEX_XIP_SFlash_GetDeviceId_Need_Lock=-89,
    ROM_API_INDEX_XIP_SFlash_GetJedecId_Need_Lock=-90,
    ROM_API_INDEX_XIP_SFlash_GetUniqueId_Need_Lock=-88,
    ROM_API_INDEX_XIP_SFlash_Opt_Enter=-83,
    ROM_API_INDEX_XIP_SFlash_Opt_Exit=-82,
    ROM_API_INDEX_XIP_SFlash_Read_Need_Lock=-91,
    ROM_API_INDEX_XIP_SFlash_Read_Via_Cache_Need_Lock=-87,
    ROM_API_INDEX_XIP_SFlash_Read_With_Lock=-86,
    ROM_API_INDEX_XIP_SFlash_State_Restore=-94,
    ROM_API_INDEX_XIP_SFlash_State_Save=-95,
    ROM_API_INDEX_XIP_SFlash_Write_Need_Lock=-92,
    ROM_API_INDEX_XIP_SFlash_Write_With_Lock=-85,
    SCANU_JOIN_CFM=4099,
    SCANU_JOIN_REQ=4098,
    SCANU_MAX=4103,
    SCANU_RAW_SEND_CFM=4102,
    SCANU_RAW_SEND_REQ=4101,
    SCANU_RESULT_IND=4100,
    SCANU_START_CFM=4097,
    SCANU_START_REQ=4096
} anon_enum_16;

typedef uintptr_t insn_t;

typedef struct llm_pdu_adv llm_pdu_adv, *Pllm_pdu_adv;

struct llm_pdu_adv {
    struct bd_addr adva;
    undefined field_0x6;
    undefined field_0x7;
    uint8_t * adva_data;
};

typedef struct scanning_pdu_params scanning_pdu_params, *Pscanning_pdu_params;

struct scanning_pdu_params {
    struct em_buf_node * conn_req_desc_node;
    uint16_t interval;
    uint16_t window;
    uint8_t filterpolicy;
    uint8_t type;
    uint8_t filter_duplicate;
    uint8_t own_addr_type;
};

typedef struct llm_le_env_tag llm_le_env_tag, *Pllm_le_env_tag;

typedef struct advertising_pdu_params advertising_pdu_params, *Padvertising_pdu_params;

typedef struct data_len_ext data_len_ext, *Pdata_len_ext;

typedef struct channel_map_assess channel_map_assess, *Pchannel_map_assess;

typedef struct access_addr_gen access_addr_gen, *Paccess_addr_gen;

typedef struct llm_test_mode llm_test_mode, *Pllm_test_mode;

typedef struct t_public_key256 t_public_key256, *Pt_public_key256;

typedef enum t_key_multiplication_type {
    LLM_DHKEY_GENERATION=2,
    LLM_ECC_IDLE=0,
    LLM_PUBLIC_KEY_GENERATION=1
} t_key_multiplication_type;

typedef enum t_key_multiplication_type t_key_multi_type;

struct t_public_key256 {
    uint8_t x[32];
    uint8_t y[32];
};

struct llm_test_mode {
    _Bool end_of_tst;
    uint8_t directtesttype;
};

struct channel_map_assess {
    uint16_t assess_timer;
    int8_t lower_limit;
    int8_t upper_limit;
    int8_t rssi_noise_limit;
    uint8_t reassess_count;
    struct le_chnl_map ch_map;
    _Bool llm_le_set_host_ch_class_cmd_sto;
};

struct data_len_ext {
    uint16_t conn_initial_max_tx_octets;
    uint16_t conn_initial_max_tx_time;
    uint16_t suppted_max_tx_octets;
    uint16_t suppted_max_tx_time;
    uint16_t suppted_max_rx_octets;
    uint16_t suppted_max_rx_time;
};

struct access_addr_gen {
    uint8_t intrand;
    uint8_t ct1_idx;
    uint8_t ct2_idx;
};

struct llm_le_env_tag {
    struct co_list enc_req;
    struct co_list adv_list;
    struct scanning_pdu_params * scanning_params;
    struct advertising_pdu_params * advertising_params;
    struct co_list cnx_list;
    struct data_len_ext data_len_val;
    struct channel_map_assess ch_map_assess;
    struct evt_mask eventmask;
    struct access_addr_gen aa;
    undefined field_0x43;
    uint16_t conhdl_alloc;
    undefined field_0x46;
    undefined field_0x47;
    struct ea_elt_tag * elt;
    _Bool last_opcode;
    undefined field_0x4d;
    uint16_t opcode2;
    uint8_t state2;
    undefined field_0x51;
    undefined field_0x52;
    undefined field_0x53;
    struct ea_elt_tag * elt_coext_scan;
    _Bool enc_pend;
    struct llm_test_mode test_mode;
    struct bd_addr rand_add;
    struct bd_addr public_add;
    undefined field_0x67;
    uint16_t enh_priv_rpa_timeout;
    uint16_t p256_byte_process_timeout;
    uint16_t opcode;
    uint8_t state;
    uint8_t enh_priv_info;
    uint8_t curr_addr_type;
    uint8_t nb_dev_in_wl;
    uint8_t nb_dev_in_hw_wl;
    struct t_public_key256 public_key256;
    uint8_t secret_key256[32];
    t_key_multi_type cur_ecc_multiplication;
};

struct advertising_pdu_params {
    struct ke_msg * adv_data_req;
    struct ke_msg * scan_rsp_req;
    struct em_buf_node * adv_desc_node;
    struct em_buf_node * scan_rsp_desc_node;
    struct bd_addr peer_addr;
    uint16_t intervalmin;
    uint16_t intervalmax;
    uint8_t channelmap;
    uint8_t filterpolicy;
    uint8_t type;
    uint8_t datalen;
    uint8_t scanrsplen;
    uint8_t own_addr_type;
    uint8_t peer_addr_type;
    _Bool adv_ldc_flag;
    undefined field_0x22;
    undefined field_0x23;
};

typedef struct llm_pdu_con_req_tx llm_pdu_con_req_tx, *Pllm_pdu_con_req_tx;

struct llm_pdu_con_req_tx {
    struct access_addr aa;
    struct crc_init crcinit;
    uint8_t winsize;
    uint16_t winoffset;
    uint16_t interval;
    uint16_t latency;
    uint16_t timeout;
    struct le_chnl_map chm;
    uint8_t hop_sca;
};

typedef struct adv_device_list adv_device_list, *Padv_device_list;

struct adv_device_list {
    struct co_list_hdr hdr;
    uint8_t adv_type;
    struct bd_addr adv_addr;
    undefined field_0xb;
};

typedef enum llm_enh_priv {
    LLM_PRIV_ENABLE_LSB=0,
    LLM_PRIV_ENABLE_MASK=1,
    LLM_PRIV_RFU_LSB=2,
    LLM_PRIV_RFU_MASK=-116,
    LLM_RPA_RENEW_TIMER_EN_LSB=1,
    LLM_RPA_RENEW_TIMER_EN_MASK=2
} llm_enh_priv;

typedef struct llm_pdu_con_req_rx llm_pdu_con_req_rx, *Pllm_pdu_con_req_rx;

struct llm_pdu_con_req_rx {
    struct bd_addr inita;
    struct bd_addr adva;
    struct access_addr aa;
    struct crc_init crcinit;
    uint8_t winsize;
    uint16_t winoffset;
    uint16_t interval;
    uint16_t latency;
    uint16_t timeout;
    struct le_chnl_map chm;
    uint8_t hop_sca;
};

typedef struct bl_mtd_info_t bl_mtd_info_t, *Pbl_mtd_info_t;

struct bl_mtd_info_t {
    char name[16];
    uint offset;
    uint size;
    void * xip_addr;
};

typedef void * bl_mtd_handle_t;

typedef struct key_MgtMaterial_t key_MgtMaterial_t, *Pkey_MgtMaterial_t;

typedef union anon_union_for_keyEncypt anon_union_for_keyEncypt, *Panon_union_for_keyEncypt;

typedef struct key_Type_TKIP_t key_Type_TKIP_t, *Pkey_Type_TKIP_t;

typedef struct key_Type_AES_t key_Type_AES_t, *Pkey_Type_AES_t;

typedef struct key_Type_WEP_t key_Type_WEP_t, *Pkey_Type_WEP_t;

typedef struct key_Type_WAPI_t key_Type_WAPI_t, *Pkey_Type_WAPI_t;

typedef struct key_Type_AES_CMAC_t key_Type_AES_CMAC_t, *Pkey_Type_AES_CMAC_t;

struct key_Type_WEP_t {
    UINT8 keyIndex;
    UINT8 isDefaultTx;
    UINT8 key[13];
};

struct key_Type_WAPI_t {
    UINT8 keyIndex;
    UINT8 isDefKey;
    UINT8 key[16];
    UINT8 mickey[16];
    UINT8 rxPN[16];
};

struct key_Type_TKIP_t {
    UINT8 key[16];
    UINT8 txMicKey[8];
    UINT8 rxMicKey[8];
};

struct key_Type_AES_CMAC_t {
    UINT8 ipn[6];
    UINT8 reserved[2];
    UINT8 key[16];
};

struct key_Type_AES_t {
    UINT8 key[16];
};

union anon_union_for_keyEncypt {
    struct key_Type_TKIP_t TKIP;
    struct key_Type_AES_t AES1;
    struct key_Type_WEP_t WEP;
    struct key_Type_WAPI_t WAPI;
    struct key_Type_AES_CMAC_t iGTK;
};

struct key_MgtMaterial_t {
    UINT16 keyType;
    UINT16 keyInfo;
    UINT16 keyLen;
    union anon_union_for_keyEncypt keyEncypt;
};

typedef uint hashval_t;

typedef struct notifier_block notifier_block, *Pnotifier_block;

struct notifier_block {
    int (* cb)(struct notifier_block *, int, void *);
    struct notifier_block * next;
    int priority;
};

typedef struct rd_env_tag rd_env_tag, *Prd_env_tag;

struct rd_env_tag {
    struct co_list event_free_list;
};

typedef enum GLB_DIG_CLK_Type {
    GLB_DIG_CLK_PLL_32M=0,
    GLB_DIG_CLK_XCLK=1
} GLB_DIG_CLK_Type;

typedef enum BMX_BUS_ERR_Type {
    BMX_BUS_ERR_ADDR_DECODE=1,
    BMX_BUS_ERR_TRUSTZONE_DECODE=0
} BMX_BUS_ERR_Type;

typedef enum GLB_SPI_PAD_ACT_AS_Type {
    GLB_SPI_PAD_ACT_AS_MASTER=1,
    GLB_SPI_PAD_ACT_AS_SLAVE=0
} GLB_SPI_PAD_ACT_AS_Type;

typedef enum GLB_EM_Type {
    GLB_EM_0KB=0,
    GLB_EM_16KB=15,
    GLB_EM_8KB=3
} GLB_EM_Type;

typedef enum BMX_ERR_INT_Type {
    BMX_ERR_INT_ALL=1,
    BMX_ERR_INT_ERR=0
} BMX_ERR_INT_Type;

typedef struct BMX_Cfg_Type BMX_Cfg_Type, *PBMX_Cfg_Type;

typedef enum BMX_ARB_Type {
    BMX_ARB_FIX=0,
    BMX_ARB_RANDOM=2,
    BMX_ARB_ROUND_ROBIN=1
} BMX_ARB_Type;

struct BMX_Cfg_Type {
    uint8_t timeoutEn;
    enum BL_Fun_Type errEn;
    enum BMX_ARB_Type arbMod;
};

typedef enum GLB_PLL_XTAL_Type {
    GLB_PLL_XTAL_24M=1,
    GLB_PLL_XTAL_26M=5,
    GLB_PLL_XTAL_32M=2,
    GLB_PLL_XTAL_38P4M=3,
    GLB_PLL_XTAL_40M=4,
    GLB_PLL_XTAL_NONE=0,
    GLB_PLL_XTAL_RC32M=6
} GLB_PLL_XTAL_Type;

typedef enum GLB_SYS_CLK_Type {
    GLB_SYS_CLK_PLL120M=3,
    GLB_SYS_CLK_PLL160M=4,
    GLB_SYS_CLK_PLL192M=5,
    GLB_SYS_CLK_PLL48M=2,
    GLB_SYS_CLK_RC32M=0,
    GLB_SYS_CLK_XTAL=1
} GLB_SYS_CLK_Type;

typedef enum GLB_BT_BANDWIDTH_Type {
    GLB_BT_BANDWIDTH_1M=0,
    GLB_BT_BANDWIDTH_2M=1
} GLB_BT_BANDWIDTH_Type;

typedef enum GLB_GPIO_INT_TRIG_Type {
    GLB_GPIO_INT_TRIG_NEG_LEVEL=2,
    GLB_GPIO_INT_TRIG_NEG_PULSE=0,
    GLB_GPIO_INT_TRIG_POS_LEVEL=3,
    GLB_GPIO_INT_TRIG_POS_PULSE=1
} GLB_GPIO_INT_TRIG_Type;

typedef enum GLB_DMA_CLK_ID_Type {
    GLB_DMA_CLK_DMA0_CH0=0,
    GLB_DMA_CLK_DMA0_CH1=1,
    GLB_DMA_CLK_DMA0_CH2=2,
    GLB_DMA_CLK_DMA0_CH3=3
} GLB_DMA_CLK_ID_Type;

typedef enum GLB_UART_SIG_FUN_Type {
    GLB_UART_SIG_FUN_UART0_CTS=1,
    GLB_UART_SIG_FUN_UART0_RTS=0,
    GLB_UART_SIG_FUN_UART0_RXD=3,
    GLB_UART_SIG_FUN_UART0_TXD=2,
    GLB_UART_SIG_FUN_UART1_CTS=5,
    GLB_UART_SIG_FUN_UART1_RTS=4,
    GLB_UART_SIG_FUN_UART1_RXD=7,
    GLB_UART_SIG_FUN_UART1_TXD=6
} GLB_UART_SIG_FUN_Type;

typedef enum GLB_PLL_CLK_Type {
    GLB_PLL_CLK_120M=4,
    GLB_PLL_CLK_160M=3,
    GLB_PLL_CLK_192M=2,
    GLB_PLL_CLK_240M=1,
    GLB_PLL_CLK_32M=8,
    GLB_PLL_CLK_480M=0,
    GLB_PLL_CLK_48M=7,
    GLB_PLL_CLK_80M=6,
    GLB_PLL_CLK_96M=5
} GLB_PLL_CLK_Type;

typedef enum GLB_ROOT_CLK_Type {
    GLB_ROOT_CLK_PLL=2,
    GLB_ROOT_CLK_RC32M=0,
    GLB_ROOT_CLK_XTAL=1
} GLB_ROOT_CLK_Type;

typedef enum GLB_SFLASH_CLK_Type {
    GLB_SFLASH_CLK_120M=0,
    GLB_SFLASH_CLK_48M=2,
    GLB_SFLASH_CLK_80M=3,
    GLB_SFLASH_CLK_96M=5,
    GLB_SFLASH_CLK_BCLK=4,
    GLB_SFLASH_CLK_XTAL=1
} GLB_SFLASH_CLK_Type;

typedef enum BMX_TO_INT_Type {
    BMX_TO_INT_ALL=1,
    BMX_TO_INT_TIMEOUT=0
} BMX_TO_INT_Type;

typedef enum GLB_DAC_CLK_Type {
    GLB_DAC_CLK_32M=0,
    GLB_DAC_CLK_XCLK=1
} GLB_DAC_CLK_Type;

typedef enum GLB_IR_CLK_SRC_Type {
    GLB_IR_CLK_SRC_XCLK=0
} GLB_IR_CLK_SRC_Type;

typedef enum GLB_ADC_CLK_Type {
    GLB_ADC_CLK_96M=0,
    GLB_ADC_CLK_XCLK=1
} GLB_ADC_CLK_Type;

typedef enum GLB_GPIO_INT_CONTROL_Type {
    GLB_GPIO_INT_CONTROL_ASYNC=1,
    GLB_GPIO_INT_CONTROL_SYNC=0
} GLB_GPIO_INT_CONTROL_Type;

typedef enum GLB_MTIMER_CLK_Type {
    GLB_MTIMER_CLK_32K=1,
    GLB_MTIMER_CLK_BCLK=0
} GLB_MTIMER_CLK_Type;

typedef enum GLB_GPIO_REAL_MODE_Type {
    GLB_GPIO_REAL_MODE_CCI=15,
    GLB_GPIO_REAL_MODE_JTAG=14,
    GLB_GPIO_REAL_MODE_REG=0,
    GLB_GPIO_REAL_MODE_RF=12,
    GLB_GPIO_REAL_MODE_SDIO=1
} GLB_GPIO_REAL_MODE_Type;

typedef enum GLB_PKA_CLK_Type {
    GLB_PKA_CLK_HCLK=0,
    GLB_PKA_CLK_PLL120M=1
} GLB_PKA_CLK_Type;

typedef enum GLB_UART_SIG_Type {
    GLB_UART_SIG_0=0,
    GLB_UART_SIG_1=1,
    GLB_UART_SIG_2=2,
    GLB_UART_SIG_3=3,
    GLB_UART_SIG_4=4,
    GLB_UART_SIG_5=5,
    GLB_UART_SIG_6=6,
    GLB_UART_SIG_7=7
} GLB_UART_SIG_Type;

typedef struct phy_env_tag phy_env_tag, *Pphy_env_tag;

typedef struct phy_bl602_cfg_tag phy_bl602_cfg_tag, *Pphy_bl602_cfg_tag;

struct phy_bl602_cfg_tag {
    uint32_t reserved;
};

struct phy_env_tag {
    struct phy_bl602_cfg_tag cfg;
    uint16_t chnl_prim20_freq;
    uint16_t chnl_center1_freq;
    uint16_t chnl_center2_freq;
    uint8_t band;
    uint8_t chnl_type;
};

typedef struct lld_evt_env_tag lld_evt_env_tag, *Plld_evt_env_tag;

struct lld_evt_env_tag {
    struct co_list elt_prog;
    struct co_list elt_wait;
    struct co_list elt_deferred;
    struct co_list rx_pkt_deferred;
    struct co_list elt_to_be_deleted;
    uint8_t sca;
    _Bool renew;
    uint8_t hw_wa_sleep_compensation;
    undefined field_0x2b;
};

typedef struct lld_evt_wait_tag lld_evt_wait_tag, *Plld_evt_wait_tag;

struct lld_evt_wait_tag {
    struct co_list_hdr hdr;
    struct ea_elt_tag * elt_ptr;
};

typedef struct lld_conn lld_conn, *Plld_conn;

struct lld_conn {
    uint32_t sync_win_size;
    uint32_t sca_drift;
    uint16_t instant;
    uint16_t latency;
    uint16_t counter;
    uint16_t missed_cnt;
    uint16_t duration_dft;
    uint16_t update_offset;
    uint16_t eff_max_tx_time;
    uint16_t eff_max_tx_size;
    uint8_t update_size;
    uint8_t instant_action;
    uint8_t mst_sca;
    uint8_t last_md_rx;
    uint8_t tx_prog_pkt_cnt;
    _Bool wait_con_up_sync;
    undefined field_0x1e;
    undefined field_0x1f;
};

typedef struct lld_evt_delete_tag lld_evt_delete_tag, *Plld_evt_delete_tag;

struct lld_evt_delete_tag {
    struct co_list_hdr hdr;
    struct ea_elt_tag * elt_ptr;
    _Bool flush;
    _Bool send_ind;
    undefined field_0xa;
    undefined field_0xb;
};

typedef struct lld_evt_anchor lld_evt_anchor, *Plld_evt_anchor;

struct lld_evt_anchor {
    uint32_t basetime_cnt;
    uint16_t finetime_cnt;
    uint16_t evt_cnt;
};

typedef enum lld_evt_flag {
    LLD_EVT_FLAG_APFM=64,
    LLD_EVT_FLAG_LATENCY_ACTIVE=-128,
    LLD_EVT_FLAG_NO_RESTART=32,
    LLD_EVT_FLAG_WAITING_ACK=1,
    LLD_EVT_FLAG_WAITING_EOEVT_TO_DELETE=16,
    LLD_EVT_FLAG_WAITING_INSTANT=8,
    LLD_EVT_FLAG_WAITING_SYNC=2,
    LLD_EVT_FLAG_WAITING_TXPROG=4
} lld_evt_flag;

typedef struct lld_evt_deferred_tag lld_evt_deferred_tag, *Plld_evt_deferred_tag;

struct lld_evt_deferred_tag {
    struct co_list_hdr hdr;
    struct ea_elt_tag * elt_ptr;
    uint8_t type;
    uint8_t rx_desc_cnt;
    undefined field_0xa;
    undefined field_0xb;
};

typedef enum lld_evt_mode {
    LLD_EVT_ADV_MODE=0,
    LLD_EVT_EXT_ADV_MODE=5,
    LLD_EVT_EXT_SCAN_MODE=7,
    LLD_EVT_MODE_MAX=8,
    LLD_EVT_MST_MODE=3,
    LLD_EVT_PER_ADV_MODE=6,
    LLD_EVT_SCAN_MODE=1,
    LLD_EVT_SLV_MODE=4,
    LLD_EVT_TEST_MODE=2
} lld_evt_mode;

typedef struct lld_evt_tag lld_evt_tag, *Plld_evt_tag;

typedef union lld_evt_info lld_evt_info, *Plld_evt_info;

typedef struct lld_non_conn lld_non_conn, *Plld_non_conn;

struct lld_non_conn {
    uint32_t window;
    uint32_t anchor;
    uint32_t end_ts;
    _Bool initiate;
    _Bool connect_req_sent;
    undefined field_0xe;
    undefined field_0xf;
};

union lld_evt_info {
    struct lld_non_conn non_conn;
    struct lld_conn conn;
};

struct lld_evt_tag {
    struct lld_evt_anchor anchor_point;
    struct co_list tx_acl_rdy;
    struct co_list tx_acl_tofree;
    struct co_list tx_llcp_pdu_rdy;
    struct co_list tx_prog;
    struct ea_interval_tag * interval_elt;
    union lld_evt_info evt;
    uint16_t conhdl;
    uint16_t cs_ptr;
    uint16_t interval;
    uint8_t rx_cnt;
    uint8_t mode;
    uint8_t tx_pwr;
    uint8_t default_prio;
    uint8_t evt_flag;
    _Bool delete_ongoing;
};

typedef enum lld_evt_cs_format {
    LLD_ACTIVE_SCANNING=9,
    LLD_HD_ADVERTISER=5,
    LLD_INITIATING=15,
    LLD_LD_ADVERTISER=4,
    LLD_MASTER_CONNECTED=2,
    LLD_PASSIVE_SCANNING=8,
    LLD_RXTEST_MODE=29,
    LLD_SLAVE_CONNECTED=3,
    LLD_TXRXTEST_MODE=30,
    LLD_TXTEST_MODE=28
} lld_evt_cs_format;

typedef struct lld_evt_update_tag lld_evt_update_tag, *Plld_evt_update_tag;

struct lld_evt_update_tag {
    uint16_t win_offset;
    uint16_t instant;
    uint8_t win_size;
    undefined field_0x5;
};

typedef struct sys_timeo sys_timeo, *Psys_timeo;

struct sys_timeo {
    struct sys_timeo * next;
    u32_t time;
    void (* h)(void *);
    void * arg;
};

typedef struct lwip_cyclic_timer lwip_cyclic_timer, *Plwip_cyclic_timer;

typedef void (* lwip_cyclic_timer_handler)(void);

struct lwip_cyclic_timer {
    u32_t interval_ms;
    lwip_cyclic_timer_handler handler;
};

typedef struct lwip_cyclic_timer.conflict2 lwip_cyclic_timer.conflict2, *Plwip_cyclic_timer.conflict2;

struct lwip_cyclic_timer.conflict2 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict6 lwip_cyclic_timer.conflict6, *Plwip_cyclic_timer.conflict6;

struct lwip_cyclic_timer.conflict6 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict7 lwip_cyclic_timer.conflict7, *Plwip_cyclic_timer.conflict7;

struct lwip_cyclic_timer.conflict7 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict1 lwip_cyclic_timer.conflict1, *Plwip_cyclic_timer.conflict1;

struct lwip_cyclic_timer.conflict1 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict5 lwip_cyclic_timer.conflict5, *Plwip_cyclic_timer.conflict5;

struct lwip_cyclic_timer.conflict5 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef struct lwip_cyclic_timer.conflict4 lwip_cyclic_timer.conflict4, *Plwip_cyclic_timer.conflict4;

struct lwip_cyclic_timer.conflict4 {
    u32_t interval_ms;
    void (* handler)(void);
};

typedef enum raw_input_state {
    RAW_INPUT_DELIVERED=2,
    RAW_INPUT_EATEN=1,
    RAW_INPUT_NONE=0
} raw_input_state;

typedef enum raw_input_state raw_input_state_t;

typedef enum memp_t {
    MEMP_ALTCP_PCB=5,
    MEMP_IGMP_GROUP=10,
    MEMP_MAX=15,
    MEMP_NETBUF=6,
    MEMP_NETCONN=7,
    MEMP_NETDB=12,
    MEMP_PBUF=13,
    MEMP_PBUF_POOL=14,
    MEMP_RAW_PCB=0,
    MEMP_SYS_TIMEOUT=11,
    MEMP_TCPIP_MSG_API=8,
    MEMP_TCPIP_MSG_INPKT=9,
    MEMP_TCP_PCB=2,
    MEMP_TCP_PCB_LISTEN=3,
    MEMP_TCP_SEG=4,
    MEMP_UDP_PCB=1
} memp_t;

typedef struct bl_mtd_handle_priv bl_mtd_handle_priv, *Pbl_mtd_handle_priv;

struct bl_mtd_handle_priv {
    char name[16];
    int id;
    uint offset;
    uint size;
    void * xip_addr;
};

typedef struct bl_mtd_handle_priv * bl_mtd_handle_priv_t;

typedef enum LOG_BUF_OUT_DATA_TYPE {
    LOG_BUF_OUT_DATA_TYPE_HEX=0,
    LOG_BUF_OUT_DATA_TYPE_INT8=1,
    LOG_BUF_OUT_DATA_TYPE_UNT8=2
} LOG_BUF_OUT_DATA_TYPE;

typedef enum LOG_BUF_OUT_DATA_TYPE LOG_BUF_OUT_DATA_TYPE_T;

typedef int __gcc_CMPtype;

typedef struct k_thread k_thread, *Pk_thread;

typedef uint32_t _task_t;

struct k_thread {
    _task_t task;
};

typedef struct k_mutex k_mutex, *Pk_mutex;

typedef struct bl_hdl_t _mutex_t;

struct k_mutex {
    _mutex_t mutex;
    sys_dlist_t poll_events;
};

typedef struct k_timer.conflict11 k_timer.conflict11, *Pk_timer.conflict11;

struct k_timer.conflict11 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

typedef struct k_timer.conflict10 k_timer.conflict10, *Pk_timer.conflict10;

struct k_timer.conflict10 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

typedef struct k_timer.conflict k_timer.conflict, *Pk_timer.conflict;

struct k_timer.conflict {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

typedef struct k_timer.conflict1 k_timer.conflict1, *Pk_timer.conflict1;

typedef struct k_timer.conflict1 k_timer_t.conflict;

struct k_timer.conflict1 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

typedef void (* k_thread_entry_t)(void *);

typedef struct k_timer.conflict2 k_timer.conflict2, *Pk_timer.conflict2;

typedef struct k_timer.conflict2 k_timer_t.conflict1;

struct k_timer.conflict2 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

typedef struct k_timer.conflict11 k_timer_t.conflict8;

typedef struct k_timer.conflict4 k_timer.conflict4, *Pk_timer.conflict4;

typedef struct k_timer.conflict4 k_timer_t.conflict2;

struct k_timer.conflict4 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

typedef struct k_timer.conflict3 k_timer.conflict3, *Pk_timer.conflict3;

struct k_timer.conflict3 {
    bl_timer_t timer;
    k_timer_handler_t.conflict handler;
    void * args;
    uint32_t timeout;
    uint32_t start_ms;
};

typedef enum LLC_MSG {
    LLC_AUTH_PAYL_NEARLY_TO=259,
    LLC_AUTH_PAYL_REAL_TO=260,
    LLC_CHMAP_UPDATE_REQ_IND=264,
    LLC_CHNL_ASSESS_TO=261,
    LLC_CON_UPD_REQ_IND=265,
    LLC_DATA_IND=256,
    LLC_ENC_MGT_IND=262,
    LLC_LENGTH_REQ_IND=263,
    LLC_LE_LINK_SUP_TO=257,
    LLC_LLCP_RECV_IND=266,
    LLC_LLCP_RSP_TO=258
} LLC_MSG;

typedef struct llc_create_con_req_ind llc_create_con_req_ind, *Pllc_create_con_req_ind;

struct llc_create_con_req_ind {
    uint16_t con_int;
    uint16_t con_lat;
    uint16_t sup_to;
    uint16_t ral_ptr;
    struct bd_addr peer_addr;
    uint8_t peer_addr_type;
    uint8_t hop_inc;
    uint8_t sleep_clk_acc;
    uint8_t filter_policy;
};

typedef struct llc_data_ind llc_data_ind, *Pllc_data_ind;

struct llc_data_ind {
    uint16_t conhdl;
    uint8_t pb_bc_flag;
    undefined field_0x3;
    uint16_t length;
    uint8_t rx_hdl;
    undefined field_0x7;
};

typedef enum llc_loc_proc_state {
    LLC_LOC_IDLE=0,
    LLC_LOC_SEND_START_ENC_RSP=17,
    LLC_LOC_WAIT_CON_PARAM_RSP=7,
    LLC_LOC_WAIT_CON_UPD_INSTANT=9,
    LLC_LOC_WAIT_CON_UPD_REQ=8,
    LLC_LOC_WAIT_ENC_RSP=13,
    LLC_LOC_WAIT_FEAT_RSP=1,
    LLC_LOC_WAIT_LENGTH_RSP=4,
    LLC_LOC_WAIT_MAP_UPD_INSTANT=6,
    LLC_LOC_WAIT_PAUSE_ENC_RSP=11,
    LLC_LOC_WAIT_PAUSE_ENC_RSP_SENT=12,
    LLC_LOC_WAIT_PING_RSP=5,
    LLC_LOC_WAIT_RANDN_GEN_IND=19,
    LLC_LOC_WAIT_SK=15,
    LLC_LOC_WAIT_SK_AND_START_ENC_REQ=14,
    LLC_LOC_WAIT_START_ENC_REQ=16,
    LLC_LOC_WAIT_START_ENC_RSP=18,
    LLC_LOC_WAIT_TERM_ACK=3,
    LLC_LOC_WAIT_TRAFFIC_PAUSED=10,
    LLC_LOC_WAIT_VERS_IND=2
} llc_loc_proc_state;

typedef struct llc_con_upd_req_ind llc_con_upd_req_ind, *Pllc_con_upd_req_ind;

struct llc_con_upd_req_ind {
    uint8_t operation;
    undefined field_0x1;
    uint16_t con_intv_min;
    uint16_t con_intv_max;
    uint16_t con_latency;
    uint16_t superv_to;
    uint16_t ce_len_min;
    uint16_t ce_len_max;
    uint16_t interval_min;
    uint16_t interval_max;
    uint8_t pref_period;
    undefined field_0x13;
    uint16_t ref_con_event_count;
    uint16_t offset0;
    uint16_t offset1;
    uint16_t offset2;
    uint16_t offset3;
    uint16_t offset4;
    uint16_t offset5;
};

typedef enum llc_op_type {
    LLC_OP_DLE_UPD=3,
    LLC_OP_ENCRYPT=2,
    LLC_OP_LOC_PARAM_UPD=0,
    LLC_OP_MAX=4,
    LLC_OP_REM_PARAM_UPD=1
} llc_op_type;

typedef enum llc_con_up_op {
    LLC_CON_UP_FORCE=2,
    LLC_CON_UP_HCI_REQ=0,
    LLC_CON_UP_LOC_REQ=4,
    LLC_CON_UP_MOVE_ANCHOR=1,
    LLC_CON_UP_PEER_REQ=3
} llc_con_up_op;

typedef struct llc_llcp_recv_ind llc_llcp_recv_ind, *Pllc_llcp_recv_ind;

struct llc_llcp_recv_ind {
    uint8_t status;
    uint8_t dummy;
    union llcp_pdu pdu;
};

typedef enum llc_rem_proc_state {
    LLC_REM_IDLE=0,
    LLC_REM_WAIT_CON_PARAM_HOST_RSP=2,
    LLC_REM_WAIT_CON_UPD_INSTANT=4,
    LLC_REM_WAIT_CON_UPD_REQ=3,
    LLC_REM_WAIT_ENC_REJECT_ACK=13,
    LLC_REM_WAIT_ENC_REQ=7,
    LLC_REM_WAIT_LTK=9,
    LLC_REM_WAIT_MAP_UPD_INSTANT=1,
    LLC_REM_WAIT_PAUSE_ENC_RSP=6,
    LLC_REM_WAIT_RANDN_GEN_IND=14,
    LLC_REM_WAIT_SK=10,
    LLC_REM_WAIT_START_ENC_RSP=11,
    LLC_REM_WAIT_START_ENC_RSP_ACK=12,
    LLC_REM_WAIT_TP_FOR_ENC_REQ=8,
    LLC_REM_WAIT_TP_FOR_PAUSE_ENC_REQ=5
} llc_rem_proc_state;

typedef enum llc_state_id {
    LLC_CONNECTED=0,
    LLC_DISC_BUSY=15,
    LLC_FREE=127,
    LLC_LOC_PROC_BUSY=1,
    LLC_REM_PROC_BUSY=2,
    LLC_STATE_MAX=-128,
    LLC_TRAFFIC_PAUSED_BUSY=4
} llc_state_id;

typedef enum llc_proc_field {
    LLC_DISC=3,
    LLC_LOC_PROC=0,
    LLC_REM_PROC=1,
    LLC_TRAFFIC_PAUSED=2
} llc_proc_field;

typedef struct bt_conn.conflict2 bt_conn.conflict2, *Pbt_conn.conflict2;

struct bt_conn.conflict2 {
    u16_t handle;
    u8_t type;
    u8_t role;
    atomic_t flags[1];
    u8_t id;
    enum bt_security_t sec_level;
    enum bt_security_t required_sec_level;
    u8_t encrypt;
    u8_t err;
    enum bt_conn_state_t state;
    u16_t rx_len;
    struct net_buf * rx;
    sys_slist_t tx_pending;
    u32_t.conflict pending_no_cb;
    sys_slist_t tx_complete;
    struct k_work tx_complete_work;
    struct k_fifo tx_queue;
    sys_slist_t channels;
    atomic_t ref;
    struct k_delayed_work.conflict6 update_work;
    union anon_union_for_field_20 field_20;
};

typedef struct bt_conn.conflict1 bt_conn.conflict1, *Pbt_conn.conflict1;

struct bt_conn.conflict1 {
    u16_t handle;
    u8_t type;
    u8_t role;
    atomic_t flags[1];
    u8_t id;
    enum bt_security_t sec_level;
    enum bt_security_t required_sec_level;
    u8_t encrypt;
    u8_t err;
    enum bt_conn_state_t state;
    u16_t rx_len;
    struct net_buf * rx;
    sys_slist_t tx_pending;
    u32_t.conflict pending_no_cb;
    sys_slist_t tx_complete;
    struct k_work tx_complete_work;
    struct k_fifo tx_queue;
    sys_slist_t channels;
    atomic_t ref;
    struct k_delayed_work.conflict2 update_work;
    union anon_union_for_field_20 field_20;
};

typedef struct bt_conn.conflict bt_conn.conflict, *Pbt_conn.conflict;

struct bt_conn.conflict {
    u16_t handle;
    u8_t type;
    u8_t role;
    atomic_t flags[1];
    u8_t id;
    enum bt_security_t sec_level;
    enum bt_security_t required_sec_level;
    u8_t encrypt;
    u8_t err;
    enum bt_conn_state_t state;
    u16_t rx_len;
    struct net_buf * rx;
    sys_slist_t tx_pending;
    u32_t.conflict pending_no_cb;
    sys_slist_t tx_complete;
    struct k_work tx_complete_work;
    struct k_fifo tx_queue;
    sys_slist_t channels;
    atomic_t ref;
    struct k_delayed_work.conflict1 update_work;
    union anon_union_for_field_20 field_20;
};

typedef struct lld_pdu_pack_desc.conflict5 lld_pdu_pack_desc.conflict5, *Plld_pdu_pack_desc.conflict5;

struct lld_pdu_pack_desc.conflict5 {
    uint8_t pdu_len;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    void * pack_fmt;
    void (* unpack_func)(uint16_t, uint8_t, uint8_t *);
};

typedef struct lld_pdu_pack_desc lld_pdu_pack_desc, *Plld_pdu_pack_desc;

struct lld_pdu_pack_desc {
    uint8_t pdu_len;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    void * pack_fmt;
    void (* unpack_func)(uint16_t, uint8_t, uint8_t *);
};

typedef enum lld_pdu_pack_status {
    LLC_PDU_PACK_OK=0,
    LLC_PDU_PACK_UNKNOWN=2,
    LLC_PDU_PACK_WRONG_FORMAT=1
} lld_pdu_pack_status;

typedef struct lld_pdu_pack_desc.conflict4 lld_pdu_pack_desc.conflict4, *Plld_pdu_pack_desc.conflict4;

struct lld_pdu_pack_desc.conflict4 {
    uint8_t pdu_len;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    void * pack_fmt;
    void (* unpack_func)(uint16_t, uint8_t, uint8_t *);
};

typedef struct lld_pdu_pack_desc.conflict2 lld_pdu_pack_desc.conflict2, *Plld_pdu_pack_desc.conflict2;

struct lld_pdu_pack_desc.conflict2 {
    uint8_t pdu_len;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    void * pack_fmt;
    void (* unpack_func)(uint16_t, uint8_t, uint8_t *);
};

typedef struct lld_pdu_pack_desc.conflict3 lld_pdu_pack_desc.conflict3, *Plld_pdu_pack_desc.conflict3;

struct lld_pdu_pack_desc.conflict3 {
    uint8_t pdu_len;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    void * pack_fmt;
    void (* unpack_func)(uint16_t, uint8_t, uint8_t *);
};

typedef struct lld_pdu_pack_desc.conflict1 lld_pdu_pack_desc.conflict1, *Plld_pdu_pack_desc.conflict1;

struct lld_pdu_pack_desc.conflict1 {
    uint8_t pdu_len;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    void * pack_fmt;
    void (* unpack_func)(uint16_t, uint8_t, uint8_t *);
};

typedef struct lld_pdu_pack_desc.conflict lld_pdu_pack_desc.conflict, *Plld_pdu_pack_desc.conflict;

struct lld_pdu_pack_desc.conflict {
    uint8_t pdu_len;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    void * pack_fmt;
    void (* unpack_func)(uint16_t, uint8_t, uint8_t *);
};

typedef struct lld_pdu_rx_info lld_pdu_rx_info, *Plld_pdu_rx_info;

struct lld_pdu_rx_info {
    struct co_list_hdr hdr;
    uint8_t rx_hdl;
    _Bool free;
    uint16_t conhdl;
    uint16_t status;
    uint8_t length;
    uint8_t channel;
    uint8_t rssi;
    uint8_t audio;
    undefined field_0xe;
    undefined field_0xf;
};

typedef uint __uintptr_t;

typedef char __int8_t;

typedef longlong __int64_t;

typedef struct lld_pdu_data_tx_tag lld_pdu_data_tx_tag, *Plld_pdu_data_tx_tag;

struct lld_pdu_data_tx_tag {
    struct co_list_hdr hdr;
    uint16_t idx;
    uint16_t conhdl;
    uint16_t length;
    uint8_t pb_bc_flag;
    undefined field_0xb;
    struct em_buf_node * buf;
};

typedef struct bl_env_tag bl_env_tag, *Pbl_env_tag;

struct bl_env_tag {
    uint8_t prev_hw_state;
    undefined field_0x1;
    undefined field_0x2;
    undefined field_0x3;
    int hw_in_doze;
};


// WARNING! conflicting data type names: /stddef.h/size_t - /DWARF/stddef.h/size_t

typedef struct __locale_data __locale_data, *P__locale_data;

struct __locale_data {
};

typedef struct __locale_struct __locale_struct, *P__locale_struct;

struct __locale_struct {
    struct __locale_data * __locales[13];
    ushort * __ctype_b;
    int * __ctype_tolower;
    int * __ctype_toupper;
    char * __names[13];
};


// WARNING! conflicting data type names: /xlocale.h/__locale_t - /DWARF/_UNCATEGORIZED_/__locale_t

typedef enum Elf_ProgramHeaderType {
    PT_DYNAMIC=2,
    PT_GNU_EH_FRAME=1685382480,
    PT_GNU_RELRO=1685382482,
    PT_GNU_STACK=1685382481,
    PT_INTERP=3,
    PT_LOAD=1,
    PT_NOTE=4,
    PT_NULL=0,
    PT_PHDR=6,
    PT_SHLIB=5,
    PT_TLS=7
} Elf_ProgramHeaderType;

typedef struct Elf32_Shdr Elf32_Shdr, *PElf32_Shdr;

typedef enum Elf_SectionHeaderType {
    SHT_CHECKSUM=1879048184,
    SHT_DYNAMIC=6,
    SHT_DYNSYM=11,
    SHT_FINI_ARRAY=15,
    SHT_GNU_ATTRIBUTES=1879048181,
    SHT_GNU_HASH=1879048182,
    SHT_GNU_LIBLIST=1879048183,
    SHT_GNU_verdef=1879048189,
    SHT_GNU_verneed=1879048190,
    SHT_GNU_versym=1879048191,
    SHT_GROUP=17,
    SHT_HASH=5,
    SHT_INIT_ARRAY=14,
    SHT_NOBITS=8,
    SHT_NOTE=7,
    SHT_NULL=0,
    SHT_PREINIT_ARRAY=16,
    SHT_PROGBITS=1,
    SHT_REL=9,
    SHT_RELA=4,
    SHT_SHLIB=10,
    SHT_STRTAB=3,
    SHT_SUNW_COMDAT=1879048187,
    SHT_SUNW_move=1879048186,
    SHT_SUNW_syminfo=1879048188,
    SHT_SYMTAB=2,
    SHT_SYMTAB_SHNDX=18
} Elf_SectionHeaderType;

struct Elf32_Shdr {
    dword sh_name;
    enum Elf_SectionHeaderType sh_type;
    dword sh_flags;
    dword sh_addr;
    dword sh_offset;
    dword sh_size;
    dword sh_link;
    dword sh_info;
    dword sh_addralign;
    dword sh_entsize;
};

typedef struct Elf32_Sym Elf32_Sym, *PElf32_Sym;

struct Elf32_Sym {
    dword st_name;
    dword st_value;
    dword st_size;
    byte st_info;
    byte st_other;
    word st_shndx;
};

typedef struct Elf32_Phdr Elf32_Phdr, *PElf32_Phdr;

struct Elf32_Phdr {
    enum Elf_ProgramHeaderType p_type;
    dword p_offset;
    dword p_vaddr;
    dword p_paddr;
    dword p_filesz;
    dword p_memsz;
    dword p_flags;
    dword p_align;
};

typedef struct Elf32_Ehdr Elf32_Ehdr, *PElf32_Ehdr;

struct Elf32_Ehdr {
    byte e_ident_magic_num;
    char e_ident_magic_str[3];
    byte e_ident_class;
    byte e_ident_data;
    byte e_ident_version;
    byte e_ident_pad[9];
    word e_type;
    word e_machine;
    dword e_version;
    dword e_entry;
    dword e_phoff;
    dword e_shoff;
    dword e_flags;
    word e_ehsize;
    word e_phentsize;
    word e_phnum;
    word e_shentsize;
    word e_shnum;
    word e_shstrndx;
};




void bl602_start(void);
void _dump_partition(void);
uint32_t hal_boot2_get_flash_addr(void);
int hal_boot2_partition_bus_addr(char *name,uint32_t *addr0,uint32_t *addr1,uint32_t *size0,uint32_t *size1,int *active);
int hal_boot2_partition_bus_addr_active(char *name,uint32_t *addr,uint32_t *size);
int hal_boot2_partition_bus_addr_inactive(char *name,uint32_t *addr,uint32_t *size);
int hal_boot2_partition_addr(char *name,uint32_t *addr0,uint32_t *addr1,uint32_t *size0,uint32_t *size1,int *active);
int hal_boot2_partition_addr_active(char *name,uint32_t *addr,uint32_t *size);
int hal_boot2_partition_addr_inactive(char *name,uint32_t *addr,uint32_t *size);
int hal_boot2_init(void);
int bl_flash_erase(uint32_t addr,int len);
int bl_flash_write(uint32_t addr,uint8_t *src,int len);
int bl_flash_read(uint32_t addr,uint8_t *dst,int len);
undefined4 bl_flash_config_update(void);
void cmd_blsync_ble_stop(char *buf,int len,int argc,char **argv);
void stack_wifi(void);
void cmd_blsync_ble_start(char *buf,int len,int argc,char **argv);
void app_delayed_action_ble(void *arg);
void app_delayed_action_wifi(void *arg);
void app_delayed_action_bleadv(void *arg);
void scan_complete_cb(void *p_arg,void *param);
void scan_item_cb(wifi_mgmr_ap_item_t *env,uint32_t *param1,wifi_mgmr_ap_item_t *item);
void wifiprov_wifi_state_get(void *p_arg);
__uint8_t char_to_hex(char asccode);
void _connect_wifi(undefined4 param_1);
void event_cb_wifi_event(input_event_t *event,void *private_data);
void event_cb_cli(input_event_t *event,void *p_arg);
void aos_loop_proc(void *pvParameters);
void vApplicationStackOverflowHook(TaskHandle_t xTask,char *pcTaskName);
void vApplicationMallocFailedHook(void);
void vApplicationIdleHook(void);
void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,StackType_t **ppxIdleTaskStackBuffer,uint32_t *pulIdleTaskStackSize);
void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,StackType_t **ppxTimerTaskStackBuffer,uint32_t *pulTimerTaskStackSize);
void vAssertCalled(void);
void bfl_main(void);
void blesync_complete_cb(void *p_arg);
void wifiprov_api_state_get(anon_subr_void_void_ptr *state_get);
void wifiprov_wifi_scan(anon_subr_void_void_ptr *complete);
void wifiprov_disc_from_ap_ind(void);
void wifiprov_connect_ap_ind(wifi_conn *info);
void blsync_init(int err);
void blsync_ble_start(void);
void blsync_ble_stop(void);
int wifi_prov_api_event_trigger_connect(wifi_conn *info);
int wifi_prov_api_event_trigger_disconnect(void);
int wifi_prov_api_event_trigger_scan(anon_subr_void_void_ptr *complete);
int wifi_prov_api_event_state_get(anon_subr_void_void_ptr *state_get);
void bl_printk(char *format,...);
int log_buf_out(char *file,int line,void *inbuf,int len,LOG_BUF_OUT_DATA_TYPE_T type);
int vfs_init(void);
int aos_open(char *path,int flags);
int aos_close(int fd);
ssize_t aos_read(int fd,void *buf,size_t nbytes);
ssize_t aos_write(int fd,void *buf,size_t nbytes);
int aos_ioctl(int fd,int cmd,ulong arg);
int aos_stat(char *path,stat *st);
aos_dir_t * aos_opendir(char *path);
int aos_closedir(aos_dir_t *dir);
aos_dirent_t * aos_readdir(aos_dir_t *dir);
file_t * new_file(inode_t *node);
void del_file(file_t *file);
int get_fd(file_t *file);
file_t * get_file(int fd);
int inode_init(void);
int inode_alloc(void);
inode_t * inode_open(char *path);
int inode_forearch_name(anon_subr_int_void_ptr_inode_t_ptr *cb,void *arg);
void inode_ref(inode_t *node);
void inode_unref(inode_t *node);
int inode_reserve(char *path,inode_t **inode);
yloop_ctx_t * get_context(void);
void aos_loop_set_eventfd(int fd);
aos_loop_t aos_loop_init(void);
int aos_poll_read_fd(int sock,aos_poll_call_t *cb,void *private_data);
int aos_post_delayed_action(int ms,aos_call_t *action,void *param);
void aos_loop_run(yloop_sock_t *param_1);
void vfs_poll_notify(pollfd *fd,void *arg);
int aos_poll(pollfd *fds,int nfds,int timeout);
int aos_fcntl(int fd,int cmd,int val);
void dfl_entry(void *arg);
int aos_task_new(char *name,anon_subr_void_void_ptr *fn,void *arg,int stack_size);
void aos_task_exit(int code);
int aos_task_key_create(aos_task_key_t *key);
int aos_task_setspecific(aos_task_key_t key,void *vp);
void * aos_task_getspecific(aos_task_key_t key);
int aos_mutex_new(aos_mutex_t *mutex);
void aos_mutex_free(aos_mutex_t *mutex);
int aos_mutex_lock(aos_mutex_t *mutex,uint ms);
int aos_mutex_unlock(aos_mutex_t *mutex);
int aos_sem_new(aos_sem_t *sem,int count);
void aos_sem_free(aos_sem_t *sem);
int aos_sem_wait(aos_sem_t *sem,uint ms);
void aos_sem_signal(aos_sem_t *sem);
void * aos_malloc(size_t xWantedSize);
void free(void *pv);
void aos_free(void *pv);
void * malloc(size_t xWantedSize);
longlong aos_now_ms(void);
int event_poll(file_t *f,_Bool setup,poll_notify_t *notify,pollfd *fd,void *opa);
int event_open(inode_t *node,file_t *file);
ssize_t _event_write(void *buf,size_t len,_Bool urgent);
int event_ioctl(file_t *f,int cmd,ulong arg);
ssize_t event_write(file_t *f,void *buf,size_t len);
int event_close(file_t *file);
ssize_t event_read(file_t *f,void *buf,size_t len);
int vfs_device_init(void);
void event_read_cb(int fd,void *param);
int aos_event_service_init(void);
int aos_post_event(uint16_t type,uint16_t code,ulong value);
int aos_register_event_filter(uint16_t type,aos_event_cb *cb,void *priv);
size_t format_int(char *q,size_t n,uint flags,int base,int width,int prec);
char * cvt(int ndigits,int *decpt,int *sign,char *buf,int eflag);
char * ecvtbuf(int ndigits,int *decpt,int *sign,char *buf);
char * fcvtbuf(int ndigits,int *decpt,int *sign,char *buf);
char * flt(char *str,int size,int precision,char fmt,int flags);
int vsnprintf(char *buffer,size_t n,char *format,va_list ap);
int vsprintf(char *buffer,char *format,va_list ap);
void vprint(char *fmt,va_list argp);
int bl_putchar(int c);
int puts(char *s);
int printf(char *fmt,...);
int sprintf(char *buffer,char *format,...);
int snprintf(char *buffer,size_t n,char *format,...);
_Bool stateSnifferGuard(void *ch,event *event);
_Bool stateConnectedIPYesGuard_ip_update(void *ch,event *event);
void printErrMsg(void *stateData,event *event);
void stateSnifferExit(void *stateData,event *event);
void stateSnifferAction(void *oldStateData,event *event,void *newStateData);
void stateConnectedIPNoAction_ipgot(void *oldStateData,event *event,void *newStateData);
void stateGlobalEnter(void *stateData,event *event);
void stateGlobalAction(void *oldStateData,event *event,void *newStateData);
void stateConnectingEnter(void *stateData,event *event);
_Bool stateSnifferGuard_ChannelSet(void *ch,event *event);
_Bool stateIdleGuard_sniffer(void *ev,event *event);
void stateConnectedIPNoExit(void *stateData,event *event);
void stateDisconnect_action_idle(void *oldStateData,event *event,void *newStateData);
void stateDisconnect_action_reconnect(void *oldStateData,event *event,void *newStateData);
void ip_obtaining_timeout(timer_cb_arg_t data);
void stateConnectedIPNoEnter(void *stateData,event *event);
_Bool stateConnectedIPNoGuard_disconnect(void *ch,event *event);
_Bool stateConnectedIPYesGuard_disconnect(void *ch,event *event);
_Bool stateConnectedIPYesGuard_rcconfig(void *ch,event *event);
void stateIdleAction_connect(void *oldStateData,event *event,void *newStateData);
_Bool stateGlobal_cfg_req(void *ch,event *event);
_Bool stateGlobalGuard_fw_powersaving(void *ch,event *event);
_Bool stateGlobalGuard_conf_max_sta(void *ev,event *event);
_Bool stateGlobalGuard_AP(void *ev,event *event);
_Bool stateGlobalGuard_scan_beacon(void *ch,event *event);
void __reload_tsen(timer_cb_arg_t data);
void event_cb_wifi_event_mgmr(input_event_t *event,void *private_data);
void trigger_auto_denoise(void *arg);
void stateDisconnect_exit(void *stateData,event *event);
void disconnect_retry(timer_cb_arg_t data);
_Bool stateGlobalGuard_fw_disconnect(void *ch,event *event);
void stateConnectedIPYes_exit(void *stateData,event *event);
_Bool stateGlobalGuard_denoise(void *ev,event *event);
_Bool stateIdleGuard_connect(void *ev,event *event);
_Bool stateIfaceDownGuard_phyup(void *ev,event *event);
_Bool stateSnifferGuard_raw_send(void *ch,event *event);
_Bool stateGlobalGuard_stop(void *ev,event *event);
_Bool stateGlobalGuard_enable_autoreconnect(void *ch,event *event);
_Bool stateGlobalGuard_disable_autoreconnect(void *ch,event *event);
void stateDisconnect_enter(void *stateData,event *event);
_Bool stateGlobalGuard_fw_scan(void *ch,event *event);
uint stateDisconnect_guard(uint param_1,int param_2);
void stateGlobalExit(void);
void stateSnifferEnter(void);
uint stateConnectingGuard(uint param_1,int param_2);
void stateConnectingAction_connected(void);
void stateConnectingAction_disconnect(void);
void stateConnectingExit(void);
void stateIdleAction_sniffer(void);
void stateIdleEnter(void);
void stateIdleExit(void);
void stateIfaceDownAction_phyup(void);
void stateIfaceDownEnter(void);
void stateIfaceDownExit(void);
uint stateConnectedIPNoGuard(uint param_1,int param_2);
void stateConnectedIPNoAction_disconnect(void);
uint stateConnectedIPYesGuard(uint param_1,int param_2);
void stateConnectedIPYes_action(void);
void stateConnectedIPYes_enter(void *stateData,event *event);
char * wifi_mgmr_auth_to_str(uint8_t auth);
char * wifi_mgmr_cipher_to_str(uint8_t cipher);
int wifi_mgmr_event_notify(wifi_mgmr_msg_t *msg);
void wifi_mgmr_start(void);
void _wifi_mgmr_entry(void *pvParameters);
void wifi_mgmr_start_background(wifi_conf_t *conf);
int wifi_mgmr_init(void);
int wifi_mgmr_status_code_clean_internal(void);
int wifi_mgmr_state_get_internal(int *state);
void wifi_mgmr_set_connect_stat_info(wifi_event_sm_connect_ind *ind,uint8_t type_ind);
int wifi_mgmr_set_country_code_internal(char *country_code);
int wifi_mgmr_ap_sta_cnt_get_internal(uint8_t *sta_cnt);
int wifi_mgmr_ap_sta_info_get_internal(wifi_mgmr_sta_basic_info_t *sta_info_internal,uint8_t idx);
int wifi_mgmr_ap_sta_delete_internal(uint8_t sta_idx);
int wifi_mgmr_scan_complete_notify(void);
int wifi_mgmr_api_connect(char *ssid,char *psk,char *pmk,uint8_t *mac,uint8_t band,uint16_t freq);
int wifi_mgmr_api_cfg_req(uint32_t ops,uint32_t task,uint32_t element,uint32_t type,uint32_t length,uint32_t *buf);
int wifi_mgmr_api_ip_got(uint32_t ip,uint32_t mask,uint32_t gw,uint32_t dns1,uint32_t dns2);
int wifi_mgmr_api_ip_update(void);
int wifi_mgmr_api_reconnect(void);
int wifi_mgmr_api_disable_autoreconnect(void);
int wifi_mgmr_api_enable_autoreconnect(void);
int wifi_mgmr_api_disconnect(void);
int wifi_mgmr_api_rate_config(uint16_t config);
int wifi_mgmr_api_conf_max_sta(uint8_t max_sta_supported);
int wifi_mgmr_api_ifaceup(void);
int wifi_mgmr_api_sniffer_enable(void);
int wifi_mgmr_api_scan_item_beacon(uint8_t channel,int8_t rssi,uint8_t auth,uint8_t *mac,uint8_t *ssid,int len,int8_t ppm_abs,int8_t ppm_rel,uint8_t cipher);
int wifi_mgmr_api_fw_disconnect(void);
int wifi_mgmr_api_fw_tsen_reload(void);
int wifi_mgmr_api_fw_scan(void);
int wifi_mgmr_api_fw_powersaving(int mode);
int wifi_mgmr_api_ap_start(char *ssid,char *passwd,int channel,uint8_t hidden_ssid);
int wifi_mgmr_api_ap_stop(void);
int wifi_mgmr_api_idle(void);
int wifi_mgmr_api_denoise_enable(void);
int wifi_mgmr_api_denoise_disable(void);
int wifi_mgmr_api_raw_send(uint8_t *pkt,int len);
int wifi_mgmr_api_set_country_code(char *country_code);
void cmd_rf_dump(char *buf,int len,int argc,char **argv);
void cmd_dump_reset(char *buf,int len,int argc,char **argv);
void cmd_wifi_power_table_update(char *buf,int len,int argc,char **argv);
void cmd_wifi_state_get(char *buf,int len,int argc,char **argv);
void wifi_sta_get_state_cmd(char *buf,int len,int argc,char **argv);
void wifi_edca_dump_cmd(char *buf,int len,int argc,char **argv);
void wifi_ap_sta_list_get_cmd(char *buf,int len,int argc,char **argv);
void wifi_ap_sta_delete_cmd(char *buf,int len,int argc,char **argv);
void cmd_wifi_coex_pta_force_off(char *buf,int len,int argc,char **argv);
void cmd_wifi_coex_pta_force_on(char *buf,int len,int argc,char **argv);
void cmd_wifi_coex_pti_force_off(char *buf,int len,int argc,char **argv);
void cmd_wifi_coex_pti_force_on(char *buf,int len,int argc,char **argv);
void cmd_wifi_coex_rf_force_off(char *buf,int len,int argc,char **argv);
void cmd_wifi_coex_rf_force_on(char *buf,int len,int argc,char **argv);
void cmd_wifi_mib(char *buf,int len,int argc,char **argv);
void cmd_wifi_cfg(char *buf,int len,int argc,char **argv);
void cmd_wifi_ap_stop(char *buf,int len,int argc,char **argv);
void cmd_wifi_ap_start(char *buf,int len,int argc,char **argv);
void wifi_sniffer_off_cmd(char *buf,int len,int argc,char **argv);
void wifi_sniffer_on_cmd(char *buf,int len,int argc,char **argv);
int wifi_denoise_disable_cmd(void);
int wifi_denoise_enable_cmd(void);
void wifi_power_saving_off_cmd(char *buf,int len,int argc,char **argv);
void wifi_power_saving_on_cmd(char *buf,int len,int argc,char **argv);
void wifi_rc_fixed_disable(char *buf,int len,int argc,char **argv);
int wifi_disable_autoreconnect_cmd(void);
int wifi_enable_autoreconnect_cmd(void);
void wifi_disconnect_cmd(char *buf,int len,int argc,char **argv);
int wifi_sta_ip_unset_cmd(void);
void wifi_sta_ip_info(char *buf,int len,int argc,char **argv);
void cmd_wifi_raw_send(char *buf,int len,int argc,char **argv);
void wifi_scan_cmd(char *buf,int len,int argc,char **argv);
void sniffer_cb(void *env,uint8_t *pkt,int len);
void cmd_wifi_dump(char *buf,int len,int argc,char **argv);
void cmd_wifi_ap_conf_max_sta(char *buf,int len,int argc,char **argv);
void wifi_mon_cmd(char *buf,int len,int argc,char **argv);
void wifi_rc_fixed_enable(char *buf,int len,int argc,char **argv);
void wifi_connect_cmd(char *buf,int len,int argc,char **argv);
void wifi_sta_ip_set_cmd(char *buf,int len,int argc,char **argv);
void wifi_scan_filter_cmd(char *buf,int len,int argc,char **argv);
void wifi_capcode_cmd(char *buf,int len,int argc,char **argv);
int wifi_mgmr_cli_scanlist(void);
int wifi_mgmr_ext_dump_needed(void);
int wifi_mgmr_cli_init(void);
int mac_is_unvalid(uint8_t *mac);
int wifi_mgmr_psk_cal(char *password,char *ssid,int ssid_len,char *output);
int wifi_mgmr_drv_init(wifi_conf_t *conf);
wifi_interface_t wifi_mgmr_sta_enable(void);
int wifi_mgmr_sta_disable(wifi_interface_t *interface);
int wifi_mgmr_sta_ip_get(uint32_t *ip,uint32_t *gw,uint32_t *mask);
int wifi_mgmr_sta_dns_get(uint32_t *dns1,uint32_t *dns2);
int wifi_mgmr_sta_ip_set(uint32_t ip,uint32_t mask,uint32_t gw,uint32_t dns1,uint32_t dns2);
int wifi_mgmr_sta_ip_unset(void);
int wifi_mgmr_sta_disconnect(void);
int wifi_mgmr_sta_powersaving(int ps);
int wifi_mgmr_sta_autoconnect_enable(void);
int wifi_mgmr_sta_autoconnect_disable(void);
void wifi_mgmr_sta_connect_ind_stat_get(wifi_mgmr_sta_connect_ind_stat_info_t *wifi_mgmr_ind_stat);
void wifi_mgmr_sta_ssid_set(char *ssid);
void wifi_mgmr_sta_psk_set(char *psk);
int wifi_mgmr_sta_connect(wifi_interface_t *wifi_interface,char *ssid,char *psk,char *pmk,uint8_t *mac,uint8_t band,uint16_t freq);
wifi_interface_t wifi_mgmr_ap_enable(void);
int wifi_mgmr_ap_start(wifi_interface_t *interface,char *ssid,int hidden_ssid,char *passwd,int channel);
int wifi_mgmr_ap_stop(wifi_interface_t *interface);
int wifi_mgmr_ap_sta_cnt_get(uint8_t *sta_cnt);
int wifi_mgmr_ap_sta_info_get(wifi_sta_basic_info *sta_info,uint8_t idx);
int wifi_mgmr_ap_sta_delete(uint8_t sta_idx);
int wifi_mgmr_sniffer_register(void *env,sniffer_cb_t *cb);
int wifi_mgmr_sniffer_unregister(void *env);
int wifi_mgmr_sniffer_enable(void);
int wifi_mgmr_sniffer_disable(void);
int wifi_mgmr_rate_config(uint16_t config);
int wifi_mgmr_conf_max_sta(uint8_t max_sta_supported);
int wifi_mgmr_state_get(int *state);
int wifi_mgmr_rssi_get(int *rssi);
int wifi_mgmr_raw_80211_send(uint8_t *pkt,int len);
int wifi_mgmr_scan(void *data,scan_complete_cb_t *cb);
int wifi_mgmr_cfg_req(uint32_t ops,uint32_t task,uint32_t element,uint32_t type,uint32_t length,uint32_t *buf);
int wifi_mgmr_scan_filter_hidden_ssid(int filter);
int wifi_mgmr_scan_complete_callback(void);
int wifi_mgmr_scan_ap_all(wifi_mgmr_ap_item_t *env,uint32_t *param1,scan_item_cb_t *cb);
char * wifi_mgmr_status_code_str(uint16_t status_code);
int wifi_mgmr_profile_add(wifi_mgmr_t *mgmr,wifi_mgmr_profile_msg_t *profile_msg,int index);
int wifi_mgmr_profile_get(wifi_mgmr_t *mgmr,wifi_mgmr_profile_msg_t *profile_msg);
int wifi_mgmr_profile_autoreconnect_is_enabled(wifi_mgmr_t *mgmr,int index);
int wifi_mgmr_profile_autoreconnect_disable(wifi_mgmr_t *mgmr,int index);
int wifi_mgmr_profile_autoreconnect_enable(wifi_mgmr_t *mgmr,int index);
int wifi_netif_dhcp_start(netif *netif);
void cb_rssi_ind(void *env,int8_t rssi);
void cb_probe_resp_ind(void *env);
void cb_beacon_ind(void *env,wifi_event_beacon_ind *ind);
void cb_disconnect_ind(void *env,wifi_event_sm_disconnect_ind *ind);
void cb_connect_ind(void *env,wifi_event_sm_connect_ind *ind);
void cb_event_ind(void *env,wifi_event *event);
int wifi_mgmr_event_init(void);
int bl_main_disconnect(void);
int bl_main_powersaving(int mode);
int bl_main_denoise(int mode);
int bl_main_monitor(void);
int bl_main_phy_up(void);
int bl_main_monitor_channel_set(int channel,int use_40MHZ);
int bl_main_if_remove(uint8_t vif_index);
int bl_main_raw_send(uint8_t *pkt,int len);
int bl_main_rate_config(uint8_t sta_idx,uint16_t fixed_rate_cfg);
int bl_main_set_country_code(char *country_code);
int bl_main_get_channel_nums(void);
int bl_main_if_add(int is_sta,netif *netif,uint8_t *vif_index);
int bl_main_apm_start(char *ssid,char *password,int channel,uint8_t vif_index,uint8_t hidden_ssid);
int bl_main_apm_stop(uint8_t vif_index);
int bl_main_apm_sta_cnt_get(uint8_t *sta_cnt);
int bl_main_apm_sta_info_get(wifi_apm_sta_info *apm_sta_info,uint8_t idx);
int bl_main_apm_sta_delete(uint8_t sta_idx);
int bl_main_apm_remove_all_sta(void);
int bl_main_conf_max_sta(uint8_t max_sta_supported);
int bl_main_cfg_task_req(uint32_t ops,uint32_t task,uint32_t element,uint32_t type,void *arg1,void *arg2);
int bl_main_scan(void);
int bl_cfg80211_connect(bl_hw *bl_hw,cfg80211_connect_params *sme);
int bl_main_connect(uint8_t *ssid,int ssid_len,uint8_t *psk,int psk_len,uint8_t *pmk,int pmk_len,uint8_t *mac,uint8_t band,uint16_t freq);
void bl_main_event_handle(void);
void bl_main_lowlevel_init(void);
int bl_main_rtthread_start(bl_hw **bl_hw);
int bl_handle_dynparams(bl_hw *bl_hw);
int bl_send_msg(bl_hw *bl_hw,void *msg_params,int reqcfm,lmac_msg_id_t reqid,void *cfm);
void * bl_msg_zalloc(lmac_msg_id_t id,lmac_task_id_t dest_id,uint16_t param_len);
void bl_msg_update_channel_cfg(char *code);
int bl_msg_get_channel_nums(void);
int bl_send_reset(bl_hw *bl_hw);
int bl_send_monitor_enable(bl_hw *bl_hw,mm_monitor_cfm *cfm);
int bl_send_monitor_channel_set(bl_hw *bl_hw,mm_monitor_channel_cfm *cfm,int channel,int use_40Mhz);
int bl_send_version_req(bl_hw *bl_hw,mm_version_cfm *cfm);
int bl_send_me_config_req(bl_hw *bl_hw);
int bl_send_me_chan_config_req(bl_hw *bl_hw);
int bl_send_me_rate_config_req(bl_hw *bl_hw,uint8_t sta_idx,uint16_t fixed_rate_cfg);
int bl_send_start(bl_hw *bl_hw);
int bl_send_add_if(bl_hw *bl_hw,uchar *mac,nl80211_iftype iftype,_Bool p2p,mm_add_if_cfm *cfm);
int bl_send_remove_if(bl_hw *bl_hw,uint8_t inst_nbr);
int bl_send_scanu_req(bl_hw *bl_hw);
int bl_send_scanu_raw_send(bl_hw *bl_hw,uint8_t *pkt,int len);
int bl_send_sm_connect_req(bl_hw *bl_hw,cfg80211_connect_params *sme,sm_connect_cfm *cfm);
int bl_send_sm_disconnect_req(bl_hw *bl_hw,u16 reason);
int bl_send_mm_powersaving_req(bl_hw *bl_hw,int mode);
int bl_send_mm_denoise_req(bl_hw *bl_hw,int mode);
int bl_send_apm_start_req(bl_hw *bl_hw,apm_start_cfm *cfm,char *ssid,char *password,int channel,uint8_t vif_index,uint8_t hidden_ssid);
int bl_send_apm_stop_req(bl_hw *bl_hw,uint8_t vif_idx);
int bl_send_apm_sta_del_req(bl_hw *bl_hw,apm_sta_del_cfm *cfm,uint8_t sta_idx,uint8_t vif_idx);
int bl_send_apm_conf_max_sta_req(bl_hw *bl_hw,uint8_t max_sta_supported);
int bl_send_cfg_task_req(bl_hw *bl_hw,uint32_t ops,uint32_t task,uint32_t element,uint32_t type,void *arg1,void *arg2);
int bl_platform_on(bl_hw *bl_hw);
int bl_rx_chan_pre_switch_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
int bl_rx_rssi_status_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
int bl_rx_apm_sta_del_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
int bl_rx_apm_sta_add_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
void notify_event_scan_done(int join_scan);
int bl_rx_scanu_join_cfm(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
int bl_rx_scanu_start_cfm(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
int bl_rx_chan_switch_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
int bl_rx_sm_connect_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
int bl_rx_sm_disconnect_ind(bl_hw *bl_hw,bl_cmd *cmd,ipc_e2a_msg *msg);
undefined4 bl_rx_scanu_result_ind(int param_1,longlong param_2);
undefined4 bl_rx_mesh_path_update_ind(void);
undefined4 bl_rx_mesh_proxy_update_ind(void);
undefined4 bl_rx_remain_on_channel_exp_ind(void);
undefined4 bl_rx_ps_change_ind(void);
undefined4 bl_rx_traffic_req_ind(void);
undefined4 bl_rx_csa_counter_ind(void);
undefined4 bl_rx_csa_finish_ind(void);
undefined4 bl_rx_csa_traffic_ind(void);
undefined4 bl_rx_channel_survey_ind(void);
undefined4 bl_rx_dbg_error_ind(void);
undefined4 bl_rx_tdls_chan_switch_cfm(void);
undefined4 bl_rx_tdls_chan_switch_ind(void);
undefined4 bl_rx_tdls_chan_switch_base_ind(void);
undefined4 bl_rx_tdls_peer_ps_ind(void);
undefined4 bl_rx_me_tkip_mic_failure_ind(void);
undefined4 bl_rx_me_tx_credits_update_ind(void);
undefined4 bl_rx_mesh_path_create_cfm(void);
undefined4 bl_rx_mesh_peer_update_ind(void);
int bl_rx_sm_connect_ind_cb_register(void *env,wifi_event_sm_connect_ind_cb_t *cb);
int bl_rx_sm_disconnect_ind_cb_register(void *env,wifi_event_sm_disconnect_ind_cb_t *cb);
int bl_rx_beacon_ind_cb_register(void *env,wifi_event_beacon_ind_cb_t *cb);
int bl_rx_probe_resp_ind_cb_register(void *env,wifi_event_probe_resp_ind_cb_t *cb);
int bl_rx_pkt_cb_register(void *env,wifi_event_pkt_cb_t *cb);
int bl_rx_pkt_cb_unregister(void *env);
int bl_rx_rssi_cb_register(void *env,wifi_event_rssi_cb_t *cb);
int bl_rx_event_register(void *env,wifi_event_cb_t *cb);
void bl_rx_e2a_handler(void *arg);
void bl_rx_pkt_cb(uint8_t *pkt,int len);
void bl_tx_push(bl_hw *bl_hw,bl_txhdr *txhdr);
void bl_tx_resend(void);
void bl_tx_try_flush(void);
int bl_txdatacfm(void *pthis,void *host_id);
void bl_tx_notify(void);
err_t bl_output(bl_hw *bl_hw,netif *netif,pbuf *p,int is_sta);
u8 bl_radarind(void *pthis,void *hostid);
u8 bl_msgackind(void *pthis,void *hostid);
void bl_prim_tbtt_ind(void *pthis);
void my_pbuf_free_custom(pbuf *p);
undefined4 bl_dbgind(void);
void bl_sec_tbtt_ind(void);
void my_pbuf_free_custom_fake(void);
int tcpip_stack_input(void *swdesc,uint8_t status,void *hwhdr,uint msdu_offset,wifi_pkt *pkt);
int bl_utils_idx_lookup(bl_hw *bl_hw,uint8_t *mac);
int bl_ipc_init(bl_hw *bl_hw,ipc_shared_env_tag *ipc_shared_mem);
void bl_utils_dump(void);
void goToErrorState(stateMachine *fsm,event *event);
void stateM_init(stateMachine *fsm,state *initialState,state *errorState);
int stateM_handleEvent(stateMachine *fsm,event *event);
void netif_status_callback(netif *netif);
err_t wifi_tx(netif *netif,pbuf *p);
err_t bl606a0_wifi_netif_init(netif *netif);
int bl606a0_wifi_init(wifi_conf_t *conf);
u32 ipc_emb2app_rawstatus_get(void);
void ipc_host_init(ipc_host_env_tag *env,ipc_host_cb_tag *cb,ipc_shared_env_tag *shared_env_ptr,void *pthis);
int ipc_host_msg_push(ipc_host_env_tag *env,void *msg_buf,uint16_t len);
uint32_t ipc_host_get_rawstatus(ipc_host_env_tag *env);
txdesc_host * ipc_host_txdesc_get(ipc_host_env_tag *env);
void ipc_host_txdesc_push(ipc_host_env_tag *env,void *host_id);
void ipc_host_irq(ipc_host_env_tag *env,uint32_t status);
void ipc_host_enable_irq(ipc_host_env_tag *env,uint32_t value);
void ipc_host_disable_irq_e2a(void);
void cmd_mgr_print(bl_cmd_mgr *cmd_mgr);
void cmd_complete(bl_cmd *cmd);
int cmd_mgr_msgind(bl_cmd_mgr *cmd_mgr,ipc_e2a_msg *msg,msg_cb_fct *cb);
int cmd_mgr_llind(bl_cmd_mgr *cmd_mgr,bl_cmd *cmd);
undefined4 cmd_mgr_queue(char *param_1,char **param_2);
void cmd_mgr_drain(bl_cmd_mgr *cmd_mgr);
void bl_cmd_mgr_init(bl_cmd_mgr *cmd_mgr);
int bl_irqs_init(bl_hw *bl_hw);
void bl_irq_bottomhalf(bl_hw *bl_hw);
uint32_t BLE_ROM_patch(void *pRet,...);
void blecontroller_main(void *pvParameters);
void BLE_ROM_hook_init(void);
_Bool rw_main_task_post(void *msg,uint32_t timeout);
void rw_main_task_post_from_fw(void);
void bdaddr_init(void);
void ble_controller_init(uint8_t task_priority);
void ble_controller_deinit(void);
void rwble_init(void);
void rwble_isr_clear(void);
void rwble_isr(void);
uint8_t ea_conflict_check(ea_elt_tag *evt_a,ea_elt_tag *evt_b);
void ea_elt_cancel(ea_elt_tag *param_1);
void ea_init(_Bool reset);
ea_elt_tag * ea_elt_create(uint16_t size_of_env);
ea_interval_tag * ea_interval_create(void);
void ea_interval_insert(ea_interval_tag *interval_to_add);
void ea_interval_remove(ea_interval_tag *interval_to_remove);
void ea_sw_isr(void);
uint8_t ea_offset_req(ea_param_input *input_param,ea_param_output *output_param);
uint32_t ea_time_get_halfslot_rounded(void);
uint32_t ea_time_get_slot_rounded(void);
void ea_prog_timer(void);
void ea_finetimer_isr(void);
void ea_interval_duration_req(ea_param_input *input_param,ea_param_output *output_param);
void hci_send_2_host(void *param);
void hci_send_2_controller(int param_1);
uint8_t hci_evt_mask_set(evt_mask *evt_msk,uint8_t page);
void hci_init(void);
void hci_reset(void);
void rwip_init(uint32_t error);
void rwip_schedule(void);
void rwip_wakeup_delay_set(uint16_t wakeup_delay);
void rwip_wakeup(void);
void rwip_wakeup_end(void);
uint32_t rwip_sleep_lpcycles_2_us(uint32_t lpcycles);
uint32_t rwip_us_2_lpcycles(uint32_t us);
void ble_co_list_init(co_list *list);
void ble_co_list_push_back(int *param_1,undefined4 *param_2);
void ble_co_list_push_front(co_list *list,co_list_hdr *list_hdr);
co_list_hdr * ble_co_list_pop_front(co_list *list);
_Bool ble_co_list_extract(co_list *list,co_list_hdr *list_hdr,uint8_t nb_following);
void ble_co_list_extract_after(co_list *list,co_list_hdr *elt_ref_hdr,co_list_hdr *elt_to_rem_hdr);
_Bool ble_co_list_find(co_list *list,co_list_hdr *list_hdr);
void ble_co_list_merge(int *param_1,int *param_2);
void ble_co_list_insert_after(co_list *list,co_list_hdr *elt_ref_hdr,co_list_hdr *elt_to_add_hdr);
uint16_t ble_co_list_size(co_list *list);
void co_bdaddr_set(uint8_t *bdaddr);
_Bool co_bdaddr_compare(bd_addr *bd_address1,bd_addr *bd_address2);
void Mont2GF(uint8_t reg_idx);
void getFinalPoint(uint8_t reg_idx);
void pka_point_addition(uint8_t x1_idx,uint8_t x2_idx,uint8_t ret_idx);
void pka_read_result(ECC_Jacobian_Point256 *point,uint8_t idx);
void pka_cp_x2_to_x1(uint8_t x1_idx,uint8_t x2_idx);
void pka_point_inf_check(uint8_t x1_idx,uint8_t *p1_eq_inf);
void GF2Mont(u_int32 *numA,u_int32 *result);
void pka_point_double(uint8_t x_idx);
void pka_addition_win(ECC_Jacobian_Point256 *src1,ECC_Jacobian_Point256 *src2,ECC_Jacobian_Point256 *ret);
void ecc_multiplication_event_handler(uint8_t param_1);
void ecc_init(int param_1);
uint8_t ecc_generate_key256(u_int8 key_type,u_int8 *secret_key,u_int8 *public_key_x,u_int8 *public_key_y,ke_msg_id_t msg_id,ke_task_id_t task_id);
void ecc_gen_new_public_key(u_int8 *secret_key,ke_msg_id_t msg_id,ke_task_id_t task_id);
void ecc_gen_new_secret_key(uint8_t *secret_key256,_Bool forced);
void ble_ke_event_init(void);
uint8_t ble_ke_event_callback_set(uint8_t event_type,intCallback_Type *p_callback);
void ble_ke_event_flush(void);
void ble_ke_event_schedule(void);
_Bool ble_ke_mem_is_in_heap(uint8_t type,void *mem_ptr);
_Bool ble_ke_is_free(void *mem_ptr);
void * ble_ke_msg_alloc(ke_msg_id_t id,ke_task_id_t dest_id,ke_task_id_t src_id,uint16_t param_len);
void ble_ke_msg_send_basic(ke_msg_id_t id,ke_task_id_t dest_id,ke_task_id_t src_id);
void ble_ke_msg_free(ke_msg *msg);
_Bool ble_cmp_abs_time(co_list_hdr *timerA,co_list_hdr *timerB);
_Bool ble_cmp_timer_id(co_list_hdr *timer,uint32_t timer_task);
uint32_t ble_ke_time(void);
_Bool ble_ke_time_cmp(uint32_t newer,uint32_t older);
_Bool ble_ke_time_past(uint32_t time);
void ble_ke_timer_hw_set(ke_timer *timer);
void ble_ke_timer_schedule(void);
void ble_ke_timer_init(void);
void ble_ke_timer_set(ke_msg_id_t timer_id,ke_task_id_t task_id,uint32_t delay);
void ble_ke_timer_clear(ke_msg_id_t timer_id,ke_task_id_t task_id);
_Bool ble_ke_timer_active(ke_msg_id_t timer_id,ke_task_id_t task_id);
void ble_ke_init(void);
void ble_ke_flush(void);
void rf_force_agc_enable(_Bool en);
uint8_t rf_txpwr_dbm_get(uint8_t txpwr_idx,uint8_t modulation);
int8_t rf_rssi_convert(uint8_t rssi_reg);
uint32_t rf_reg_rd(uint16_t addr);
void rf_reg_wr(uint16_t addr,uint32_t value);
void rf_sleep(void);
_Bool rf_txpwr_dec(uint8_t dec);
_Bool rf_txpwr_inc(uint8_t inc);
void rf_txpwr_max_set(int8_t txpwr_dbm);
void rf_reset(void);
void ble_rf_set_pwr_offset(int8_t offset);
void ble_controller_set_tx_pwr(int ble_tx_power);
void ble_rf_init(rwip_rf_api.conflict5 *api);
void pka0_write_common_op_first_cfg(uint8_t s0_reg_index,uint8_t s0_reg_type,uint8_t d_reg_index,uint8_t d_reg_type,uint8_t op,_Bool last_op);
void pka0_write_common_op_snd_cfg_S1(uint8_t s1_reg_index,uint8_t s1_reg_type);
void pka0_write_common_op_snd_cfg_S1_S2(uint8_t s1_reg_index,uint8_t s1_reg_type,uint8_t s2_reg_index,uint8_t s2_reg_type);
void sec_eng_pka0_reset(void);
void sec_eng_pka0_clear_int(void);
void sec_eng_pka0_pld(uint16_t size,uint32_t *data,uint8_t reg_index,uint8_t reg_type,uint8_t op,_Bool last_op);
void sec_eng_pka0_wait_4_isr(void);
void sec_eng_pka0_read_data(uint8_t reg_ype,uint8_t reg_idx,uint32_t *result,uint8_t ret_size);
void sec_eng_pka0_clir(uint8_t last_op,uint8_t d_reg_type,uint8_t d_reg_idx,uint8_t size);
void sec_eng_pka0_movdat(uint8_t last_op,uint8_t d_reg_type,uint8_t d_reg_idx,uint8_t s0_reg_type,uint8_t s0_reg_idx);
void sec_eng_pka0_msub(uint8_t last_op,uint8_t d_reg_type,uint8_t d_reg_idx,uint8_t s0_reg_type,uint8_t s0_reg_idx,uint8_t s1_reg_type,uint8_t s1_reg_idx,uint8_t s2_reg_type,uint8_t s2_reg_idx);
void sec_eng_pka0_mrem(uint8_t last_op,uint8_t d_reg_type,uint8_t d_reg_idx,uint8_t s0_reg_type,uint8_t s0_reg_idx,uint8_t s2_reg_type,uint8_t s2_reg_idx);
void sec_eng_pka0_mmul(uint8_t last_op,uint8_t d_reg_type,uint8_t d_reg_idx,uint8_t s0_reg_type,uint8_t s0_reg_idx,uint8_t s1_reg_type,uint8_t s1_reg_idx,uint8_t s2_reg_type,uint8_t s2_reg_idx);
void sec_eng_pka0_mexp(uint8_t last_op,uint8_t d_reg_type,uint8_t d_reg_idx,uint8_t s0_reg_type,uint8_t s0_reg_idx,uint8_t s1_reg_type,uint8_t s1_reg_idx,uint8_t s2_reg_type,uint8_t s2_reg_idx);
void sec_eng_pka0_lcmp(uint8_t *cout,uint8_t s0_reg_type,uint8_t s0_reg_idx,uint8_t s1_reg_type,uint8_t s1_reg_idx);
void sec_eng_pka0_lsub(uint8_t last_op,uint8_t d_reg_type,uint8_t d_reg_idx,uint8_t s0_reg_type,uint8_t s0_reg_idx,uint8_t s1_reg_type,uint8_t s1_reg_idx);
void sec_eng_pka0_lmul(uint8_t last_op,uint8_t d_reg_type,uint8_t d_reg_idx,uint8_t s0_reg_type,uint8_t s0_reg_idx,uint8_t s1_reg_type,uint8_t s1_reg_idx);
void sec_eng_pka0_lmul2n(uint8_t last_op,uint8_t d_reg_type,uint8_t d_reg_idx,uint8_t s0_reg_type,uint8_t s0_reg_idx,uint16_t bit_shift);
void em_buf_init(void);
void em_buf_rx_free(uint8_t hdl);
uint8_t * em_buf_rx_buff_addr_get(uint16_t rx_hdl);
void llc_init(void);
void llc_stop(int param_1);
void llc_reset(void);
void llc_discon_event_complete_send(ke_task_id_t src_id,uint8_t status,uint8_t conhdl,uint8_t reason);
void llc_le_con_cmp_evt_send(uint8_t status,uint16_t conhdl,llc_create_con_req_ind *param);
void llc_le_ch_sel_algo_evt_send(uint8_t chSel,uint16_t conhdl,llc_create_con_req_ind *param);
void llc_start(llc_create_con_req_ind *param_1,ea_elt_tag *param_2);
void llc_con_update_complete_send(uint8_t status,uint16_t conhdl,lld_evt_tag *evt);
void llc_ltk_req_send(uint16_t conhdl,llcp_enc_req *param);
void llc_feats_rd_event_send(uint8_t status,uint16_t conhdl,le_features *feats);
void llc_version_rd_event_send(uint8_t status,uint16_t conhdl);
void llc_common_cmd_complete_send(uint16_t opcode,uint8_t status,uint16_t conhdl);
void llc_common_cmd_status_send(uint16_t opcode,uint8_t status,uint16_t conhdl);
void llc_common_flush_occurred_send(uint16_t conhdl);
void llc_common_enc_key_ref_comp_evt_send(uint16_t conhdl,uint8_t status);
void llc_common_enc_change_evt_send(uint16_t conhdl,uint8_t enc_status,uint8_t status);
void llc_common_nb_of_pkt_comp_evt_send(uint16_t conhdl,uint8_t nb_of_pkt);
void llc_con_update_ind(uint16_t conhdl,ea_elt_tag *elt_new);
void llc_lsto_con_update(uint16_t conhdl);
void llc_map_update_ind(uint16_t conhdl);
void llc_con_update_finished(int param_1);
void llc_map_update_finished(int param_1);
void lld_evt_winsize_change(lld_evt_tag *evt,_Bool instant);
void lld_evt_slave_time_compute(ea_elt_tag *elt,uint16_t slot_offset);
void lld_evt_prevent_stop(ea_elt_tag *elt);
void lld_evt_deferred_elt_push(ea_elt_tag *elt,uint8_t type,uint8_t rx_desc_cnt);
void lld_evt_elt_wait_insert(ea_elt_tag *elt);
uint32_t lld_evt_get_next_free_slot(void);
lld_evt_wait_tag * lld_evt_elt_wait_get(ea_elt_tag *elt);
void lld_evt_schedule(ea_elt_tag *elt);
void lld_evt_channel_next(uint16_t conhdl,int16_t nb_inc);
uint16_t lld_evt_drift_compute(uint16_t delay,uint8_t master_sca);
void lld_evt_rxwin_compute(ea_elt_tag *elt);
void lld_evt_canceled(ea_elt_tag *elt);
ea_elt_tag * lld_evt_scan_create(uint16_t handle,uint16_t latency);
ea_elt_tag *lld_evt_move_to_master(ea_elt_tag *elt_scan,uint16_t conhdl,llc_create_con_req_ind *pdu_tx,uint8_t rx_hdl);
ea_elt_tag *lld_evt_update_create(ea_elt_tag *elt_old,uint16_t ce_len,uint16_t mininterval,uint16_t maxinterval,uint16_t latency,uint8_t pref_period,lld_evt_update_tag *upd_par);
ea_elt_tag *lld_evt_move_to_slave(llc_create_con_req_ind *con_par,llm_pdu_con_req_rx *con_req_pdu,ea_elt_tag *elt_adv,uint16_t conhdl);
void lld_evt_slave_update(llcp_con_upd_ind *param_pdu,ea_elt_tag *elt_old);
ea_elt_tag *lld_evt_adv_create(uint16_t handle,uint16_t mininterval,uint16_t maxinterval,_Bool restart_pol);
void lld_evt_end(ea_elt_tag *elt);
void lld_evt_rx(ea_elt_tag *elt);
void lld_evt_rx_afs(ea_elt_tag *elt,uint8_t num);
void lld_evt_timer_isr(void);
void lld_evt_end_isr(_Bool apfm);
void lld_evt_rx_isr(void);
void lld_evt_afs_isr(uint8_t num);
void lld_pdu_llcp_con_param_req_unpk(uint16_t pdu_ptr,uint8_t parlen,uint8_t *param);
void lld_pdu_llcp_con_param_rsp_unpk(uint16_t pdu_ptr,uint8_t parlen,uint8_t *param);
void lld_pdu_llcp_length_req_unpk(uint16_t pdu_ptr,uint8_t parlen,uint8_t *param);
void lld_pdu_llcp_length_rsp_unpk(uint16_t pdu_ptr,uint8_t parlen,uint8_t *param);
uint8_t lld_pdu_pack(uint8_t *p_data,uint8_t *p_length,char *format);
void lld_pdu_cntl_aligned_unpk(uint16_t pdu_ptr,uint8_t parlen,uint8_t *param);
void lld_pdu_data_tx_push(lld_evt_tag *evt,em_desc_node *txnode,_Bool can_be_freed,_Bool encrypted);
void lld_pdu_tx_prog(lld_evt_tag *param_1);
uint8_t lld_pdu_adv_pack(uint8_t code,uint8_t *buf,uint8_t *p_len);
void lld_pdu_rx_handler(lld_evt_tag *evt,uint8_t nb_rx_desc);
void lld_sleep_init(void);
void lld_sleep_wakeup(void);
void lld_sleep_wakeup_end(void);
uint16_t lld_util_instant_get(void *event,uint8_t action);
void lld_util_set_bd_address(bd_addr *bd_addr,uint8_t type);
uint8_t lld_util_freq2chnl(uint8_t freq);
uint16_t lld_util_get_local_offset(uint16_t PeerOffset,uint16_t Interval,uint32_t AnchorPoint);
uint16_t lld_util_get_peer_offset(uint16_t LocalOffset,uint16_t Interval,uint32_t AnchorPoint);
void lld_util_connection_param_set(ea_elt_tag *elt,ea_param_output *param);
void lld_util_dle_set_cs_fields(uint16_t conhdl);
void lld_util_anchor_point_move(ea_elt_tag *elt_connect);
void lld_util_flush_list(co_list *list);
_Bool lld_util_instant_ongoing(ea_elt_tag *elt);
void lld_util_compute_ce_max(ea_elt_tag *elt,uint16_t tx_time,uint16_t rx_time);
void lld_util_priority_set(ea_elt_tag *elt,uint8_t priority_index);
uint8_t lld_util_get_tx_pkt_cnt(ea_elt_tag *elt);
void lld_util_eff_tx_time_set(ea_elt_tag *elt,uint16_t max_tx_time,uint16_t max_tx_size);
void lld_wlcoex_set(int param_1);
void lld_init(_Bool reset);
void lld_core_reset(void);
void lld_adv_stop(ea_elt_tag *elt);
void lld_scan_stop(ea_elt_tag *elt);
ea_elt_tag *lld_move_to_master(ea_elt_tag *elt,uint16_t conhdl,llc_create_con_req_ind *param,uint8_t rx_hdl);
void lld_con_update_req(ea_elt_tag *elt_old,llc_con_upd_req_ind *param,llcp_con_upd_ind *param_pdu);
uint8_t lld_con_update_after_param_req(uint16_t conhdl,ea_elt_tag *elt_old,llc_con_upd_req_ind *param,llcp_con_upd_ind *param_pdu,_Bool bypass_offchk);
uint8_t lld_con_param_rsp(uint16_t conhdl,ea_elt_tag *elt,llc_con_upd_req_ind *param);
void lld_con_param_req(uint16_t conhdl,ea_elt_tag *elt,llc_con_upd_req_ind *param);
void lld_con_stop(ea_elt_tag *elt);
uint8_t lld_get_mode(uint16_t conhdl);
ea_elt_tag *lld_move_to_slave(llc_create_con_req_ind *con_par,llm_pdu_con_req_rx *con_req_pdu,ea_elt_tag *elt_adv,uint16_t conhdl,uint8_t rx_hdl);
void lld_ch_map_ind(ea_elt_tag *elt,uint16_t instant);
void lld_con_update_ind(ea_elt_tag *elt_old,llcp_con_upd_ind *param_pdu);
void lld_crypt_isr(void);
ea_elt_tag * lld_test_mode_tx(em_desc_node *txdesc,uint8_t tx_freq,uint8_t tx_phy);
ea_elt_tag * lld_test_mode_rx(uint8_t rx_freq);
void lld_test_stop(ea_elt_tag *elt);
uint16_t llm_util_bd_addr_wl_position(bd_addr *bd_address,uint8_t bd_addr_type);
uint8_t llm_util_check_address_validity(bd_addr *bd_address,uint8_t addr_type);
uint8_t llm_util_check_map_validity(uint8_t *channel_map,uint8_t nb_octet);
void llm_util_apply_bd_addr(uint8_t addr_type);
_Bool llm_util_check_evt_mask(uint8_t event_id);
void llm_util_get_channel_map(le_chnl_map *map);
void llm_util_get_supp_features(le_features *feats);
void llm_util_adv_data_update(void);
uint8_t llm_util_bl_check(bd_addr *bd_addr_to_add,uint8_t bd_addr_type,uint16_t *conhdl,uint8_t wl_flag_action,_Bool *in_wl);
_Bool llm_util_bd_addr_in_wl(bd_addr *bd_address,uint8_t bd_addr_type,_Bool *in_black_list);
uint8_t llm_util_bl_add(bd_addr *bd_addr_to_add,uint8_t bd_addr_type,uint16_t conhdl);
uint8_t llm_util_bl_rem(uint16_t conhdl);
void llm_end_evt_defer(void);
_Bool llm_pdu_defer(uint16_t status,uint8_t rx_hdl,uint8_t tx_cnt);
void llm_wlpub_addr_set(uint16_t elem_index,bd_addr *bdaddr);
void llm_wlpriv_addr_set(uint16_t elem_index,bd_addr *bdaddr);
void llm_con_req_ind(uint8_t rx_hdl,uint16_t status);
void llm_le_adv_report_ind(uint8_t rx_hdl);
void llm_con_req_tx_cfm(uint8_t rx_hdl);
void llm_common_cmd_complete_send(uint16_t opcode,uint8_t status);
void llm_common_cmd_status_send(uint16_t opcode,uint8_t status);
uint8_t llm_test_mode_start_rx(hci_le_rx_test_cmd *param);
uint8_t llm_set_adv_param(hci_le_set_adv_param_cmd *param);
uint8_t llm_set_adv_en(hci_le_set_adv_en_cmd *param);
uint8_t llm_set_adv_data(hci_le_set_adv_data_cmd *param);
uint8_t llm_set_scan_rsp_data(hci_le_set_scan_rsp_data_cmd *param);
uint8_t llm_set_scan_param(hci_le_set_scan_param_cmd *param);
uint8_t llm_set_scan_en(hci_le_set_scan_en_cmd *param);
void llm_wl_clr(void);
void llm_init(_Bool reset);
void llm_wl_dev_add(bd_addr *bd_addr,uint8_t bd_addr_type);
void llm_wl_dev_rem(bd_addr *bd_addr,uint8_t bd_addr_type);
uint8_t llm_wl_dev_add_hdl(bd_addr *bd_addr,uint8_t bd_addr_type);
uint8_t llm_wl_dev_rem_hdl(bd_addr *bd_addr,uint8_t bd_addr_type);
uint8_t llm_create_con(hci_le_create_con_cmd *param);
void llm_encryption_start(llm_enc_req *param);
void llm_encryption_done(void);
void hci_fc_init(void);
uint8_t hci_fc_acl_buf_size_set(uint16_t acl_pkt_len,uint16_t nb_acl_pkts);
uint8_t hci_fc_acl_en(_Bool flow_enable);
void hci_fc_host_nb_acl_pkts_complete(uint16_t acl_pkt_nb);
uint8_t hci_pack_bytes(uint8_t **pp_in,uint8_t **pp_out,uint8_t *p_in_end,uint8_t *p_out_end,uint8_t len);
uint8_t hci_host_nb_cmp_pkts_cmd_pkupk(uint8_t *out,uint8_t *in,uint16_t *out_len,uint16_t in_len);
uint8_t hci_le_adv_report_evt_pkupk(uint8_t *out,uint8_t *in,uint16_t *out_len,uint16_t in_len);
uint8_t hci_le_dir_adv_report_evt_pkupk(uint8_t *out,uint8_t *in,uint16_t *out_len,uint16_t in_len);
hci_cmd_desc_tag * hci_look_for_cmd_desc(uint16_t opcode);
hci_evt_desc_tag * hci_look_for_evt_desc(uint8_t code);
hci_evt_desc_tag * hci_look_for_le_evt_desc(uint8_t subcode);
void hci_tl_init(_Bool reset);
uint16_t hci_util_read_array_size(char **fmt_cursor);
HCI_PACK_STATUS hci_util_pack(uint8_t *inout,uint16_t *inout_len,char *format);
HCI_PACK_STATUS hci_util_unpack(uint8_t *out,uint8_t *in,uint16_t *out_len,uint16_t in_len,char *format);
uint8_t * hci_build_cc_evt(ke_msg *msg,int8_t nb_h2c_cmd_pkts);
uint8_t * hci_build_evt(ke_msg *msg);
uint8_t * hci_build_le_evt(ke_msg *msg);
uint8_t * hci_build_acl_rx_data(ke_msg *msg);
co_list_hdr *ble_ke_queue_extract(co_list *queue,anon_subr__Bool_co_list_hdr_ptr_uint32_t.conflict *func,uint32_t arg);
void ble_ke_queue_insert(co_list *queue,co_list_hdr *element,anon_subr__Bool_co_list_hdr_ptr_co_list_hdr_ptr *cmp);
_Bool ble_cmp_dest_id(co_list_hdr *msg,uint32_t dest_id);
ke_msg_func_t * ble_ke_handler_search(ke_msg_id_t msg_id,ke_state_handler *state_handler);
ke_msg_func_t * ble_ke_task_handler_get(ke_msg_id_t msg_id,ke_task_id_t task_id);
void ble_ke_task_init(void);
void ble_ke_state_set(ke_task_id_t id,ke_state_t state_id);
undefined4 llcp_ping_rsp_handler(int param_1,ke_task_id_t param_2);
int llcp_terminate_ind_handler(uint16_t conhdl,ke_task_id_t dest_id,_Bool int_ctx,llcp_terminate_ind *param);
void llc_llcp_reject_ind(int param_1,ke_task_id_t param_2,int param_3,int param_4);
int llcp_reject_ind_ext_handler(uint16_t conhdl,ke_task_id_t dest_id,_Bool int_ctx,llcp_reject_ind_ext *param);
int llcp_reject_ind_handler(uint16_t conhdl,ke_task_id_t dest_id,_Bool int_ctx,llcp_reject_ind *param);
undefined4 llcp_start_enc_req_handler(int param_1,ke_task_id_t param_2);
undefined4 llcp_unknown_rsp_handler(int param_1,ke_task_id_t param_2,int param_3);
void llc_llcp_version_ind_pdu_send(uint16_t conhdl);
undefined4 llcp_vers_ind_handler(int param_1,ke_task_id_t param_2,int param_3);
void llc_llcp_ch_map_update_pdu_send(uint16_t conhdl);
void llc_llcp_pause_enc_req_pdu_send(uint16_t conhdl);
void llc_llcp_pause_enc_rsp_pdu_send(uint16_t conhdl);
void llc_llcp_enc_req_pdu_send(uint16_t conhdl,hci_le_start_enc_cmd *param);
void llc_llcp_enc_rsp_pdu_send(uint16_t conhdl,llcp_enc_req *param);
void llc_llcp_start_enc_rsp_pdu_send(uint16_t conhdl);
void llc_llcp_reject_ind_pdu_send(uint16_t conhdl,uint8_t rej_opcode,uint8_t reason);
int llcp_con_param_rsp_handler(uint16_t conhdl,ke_task_id_t dest_id,_Bool int_ctx,llcp_con_param_rsp *param);
undefined4 llcp_feats_rsp_handler(int param_1,ke_task_id_t param_2,uint8_t *param_3);
int llcp_channel_map_ind_handler(int param_1,ke_task_id_t param_2,int param_3,uint8_t *param_4);
int llcp_con_upd_ind_handler(int param_1,ke_task_id_t param_2,int param_3,llcp_con_upd_ind *param_4);
void llc_llcp_con_update_pdu_send(uint16_t conhdl,llcp_con_upd_ind *param);
void llc_llcp_con_param_req_pdu_send(uint16_t conhdl,llc_con_upd_req_ind *param);
void llc_llcp_con_param_rsp_pdu_send(uint16_t conhdl,llc_con_upd_req_ind *param);
undefined4 llcp_con_param_req_handler(int param_1,ke_task_id_t param_2,uint8_t *param_3);
void llc_llcp_feats_req_pdu_send(uint16_t conhdl);
void llc_llcp_feats_rsp_pdu_send(uint16_t conhdl);
void llc_llcp_start_enc_req_pdu_send(uint16_t conhdl);
void llc_llcp_terminate_ind_pdu_send(uint16_t conhdl,uint8_t err_code);
void llc_llcp_unknown_rsp_send_pdu(uint16_t conhdl,uint8_t unk_type);
int llc_llcp_unknown_ind_handler(uint16_t conhdl,uint8_t opcode);
int llcp_feats_req_handler(uint16_t conhdl,ke_task_id_t dest_id,_Bool int_ctx,llcp_feats_req *param);
int llcp_slave_feature_req_handler(uint16_t conhdl,ke_task_id_t dest_id,_Bool int_ctx,llcp_slave_feature_req *param);
void llc_llcp_ping_req_pdu_send(uint16_t conhdl);
void llc_llcp_ping_rsp_pdu_send(uint16_t conhdl);
int llcp_ping_req_handler(uint16_t conhdl,ke_task_id_t dest_id,_Bool int_ctx,void *param);
void llc_llcp_length_req_pdu_send(uint16_t conhdl);
void llc_llcp_length_rsp_pdu_send(uint16_t conhdl);
int llc_llcp_recv_handler(uint param_1,int param_2,byte *param_3,int param_4);
uint8_t llc_llcp_get_autorize(uint8_t opcode);
int llc_dft_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
undefined4 llm_enc_ind_handler(int param_1,uint param_2);
int llc_llcp_recv_ind_handler(ke_msg_id_t msgid,llc_llcp_recv_ind *ind,ke_task_id_t dest_id,ke_task_id_t src_id);
undefined4 llc_chmap_update_req_ind_handler(uint param_1);
undefined4 llc_auth_payl_real_to_ind_handler(uint param_1);
undefined4 llc_con_upd_req_ind_handler(llc_con_upd_req_ind *param_1,uint param_2);
undefined4 llc_length_req_ind_handler(uint param_1);
void llc_task_random_gen_request(ke_task_id_t dest_id);
undefined4 llc_enc_mgt_ind_handler(uint param_1);
undefined4 llc_chnl_assess_timer_handler(uint param_1);
int llc_llcp_rsp_to_ind_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
undefined4 llc_link_sup_to_ind_handler(uint param_1);
undefined4 llc_auth_payl_nearly_to_ind_handler(uint param_1);
undefined4 llc_data_ind_handler(void *param_1,uint param_2);
undefined4 lld_stop_ind_handler(uint param_1);
uint8_t llc_util_get_free_conhdl(uint16_t *conhdl);
uint8_t llc_util_get_nb_active_link(void);
void llc_util_update_channel_map(uint16_t conhdl,le_chnl_map *map);
void llc_util_set_auth_payl_to_margin(lld_evt_tag *evt);
void llc_util_clear_operation_ptr(int param_1,int param_2);
void llc_util_bw_mgt(uint16_t conhdl);
void llc_end_evt_defer(int param_1);
void llc_pdu_acl_tx_ack_defer(uint16_t conhdl,uint8_t tx_cnt);
void llc_pdu_defer(uint16_t conhdl,uint16_t status,uint8_t rssi,uint8_t channel,uint8_t length);
int llm_dft_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int llm_le_set_host_ch_class_cmd_sto_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int llm_ecc_result_ind_handler(ke_msg_id_t msgid,ecc_result_ind *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int llm_enc_req_handler(ke_msg_id_t msgid,llm_enc_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int lld_stop_ind_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
void llc_ch_assess_local(int param_1,uint param_2,int param_3,int param_4);
uint8_t llc_ch_assess_get_local_ch_map(uint16_t conhdl,le_chnl_map *map,le_chnl_map *hostmap);
le_chnl_map * llc_ch_assess_get_current_ch_map(uint16_t conhdl);
void llc_ch_assess_reass_ch(uint16_t conhdl,le_chnl_map *map,le_chnl_map *hostmap,uint8_t nb_chgood);
undefined4 hci_le_set_data_len_cmd_handler(ushort *param_1,ke_task_id_t param_2,uint16_t param_3);
undefined4 hci_le_rem_con_param_req_neg_reply_cmd_handler(ushort *param_1,ke_task_id_t param_2,uint16_t param_3);
undefined4 hci_le_rem_con_param_req_reply_cmd_handler(ushort *param_1,ke_task_id_t param_2,uint16_t param_3);
undefined4 hci_le_ltk_req_reply_cmd_handler(ushort *param_1,ke_task_id_t param_2,uint16_t param_3);
undefined4 hci_disconnect_cmd_handler(uint16_t *param_1,ke_task_id_t param_2,uint16_t param_3);
int hci_le_rd_rem_used_feats_cmd_handler(ke_msg_id_t msgid,hci_le_rd_rem_used_feats_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
undefined4 hci_le_rd_chnl_map_cmd_handler(ke_task_id_t *param_1,ke_task_id_t param_2);
undefined4 hci_rd_auth_payl_to_cmd_handler(ke_task_id_t *param_1,uint param_2);
undefined4 hci_rd_rssi_cmd_handler(ke_task_id_t *param_1,ke_task_id_t param_2);
undefined4 hci_rd_tx_pwr_lvl_cmd_handler(ke_task_id_t *param_1,ke_task_id_t param_2);
undefined4 hci_le_con_update_cmd_handler(ushort *param_1,ke_task_id_t param_2,uint16_t param_3);
undefined4 hci_wr_auth_payl_to_cmd_handler(ke_task_id_t *param_1,uint param_2);
int hci_flush_cmd_handler(ke_msg_id_t msgid,hci_basic_conhdl_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
undefined4 hci_rd_rem_ver_info_cmd_handler(uint16_t *param_1,uint param_2,uint16_t param_3);
int llc_hci_command_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_vsc_set_tx_pwr(ke_msg_id_t msgid,hci_vsc_set_tx_pwr_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_wr_rfpath_compensation_cmd_handler(ke_msg_id_t msgid,hci_le_wr_rfpath_cps_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_wr_le_host_supp_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_wr_suggted_dft_data_len_cmd_handler(ke_msg_id_t msgid,hci_le_wr_suggted_dft_data_len_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_set_evt_mask_cmd_handler(ke_msg_id_t msgid,hci_le_set_evt_mask_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_rd_rfpath_compensation_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_rd_trans_pwr_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_rd_buff_size_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_rd_local_supp_feats_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_rd_local_supp_cmds_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_rd_local_ver_info_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_rd_bd_addr_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_rd_max_data_len_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_rd_suggted_dft_data_len_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_rd_supp_states_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_rd_wl_size_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_rd_adv_ch_tx_pw_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_rd_local_supp_feats_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_rd_buff_size_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_generate_dhkey_cmd_handler(ke_msg_id_t msgid,hci_le_generate_dh_key_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_host_nb_cmp_pkts_cmd_handler(ke_msg_id_t msgid,hci_host_nb_cmp_pkts_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_host_buf_size_cmd_handler(ke_msg_id_t msgid,hci_host_buf_size_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_set_evt_mask_page_2_cmd_handler(ke_msg_id_t msgid,hci_set_evt_mask_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_set_evt_mask_cmd_handler(ke_msg_id_t msgid,hci_set_evt_mask_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_set_ctrl_to_host_flow_ctrl_cmd_handler(ke_msg_id_t msgid,hci_set_ctrl_to_host_flow_ctrl_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_reset_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_tx_test_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_rx_test_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_rand_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_enc_cmd_handler(ke_msg_id_t msgid,hci_le_enc_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_wl_mngt_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_set_host_ch_class_cmd_handler(ke_msg_id_t msgid,hci_le_set_host_ch_class_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_create_con_cmd_handler(ke_msg_id_t msgid,hci_le_create_con_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_set_scan_en_cmd_handler(ke_msg_id_t msgid,hci_le_set_scan_en_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_set_scan_param_cmd_handler(ke_msg_id_t msgid,hci_le_set_scan_param_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_set_adv_en_cmd_handler(ke_msg_id_t msgid,hci_le_set_adv_en_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_set_adv_param_cmd_handler(ke_msg_id_t msgid,hci_le_set_adv_param_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_set_rand_add_cmd_handler(ke_msg_id_t msgid,hci_le_set_rand_addr_cmd *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_rd_local_p256_public_key_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_test_end_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_le_create_con_cancel_cmd_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_command_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hci_driver_send(net_buf *buf);
int hci_driver_open(void);
void recv_thread(void *p1);
void hci_driver_enque_recvq(net_buf *buf);
int hci_driver_init(void);
void le_dhkey_complete(net_buf *buf);
void hci_data_buf_overflow(net_buf *buf);
int atomic_test_bit(atomic_t *target,int bit);
void bt_addr_le_copy(bt_addr_le_t *dst,bt_addr_le_t *src);
void le_pkey_complete(net_buf *buf);
void atomic_set_bit_to(atomic_t *target,int bit,_Bool val);
void slave_update_conn_param(bt_conn *conn);
void le_remote_feat_complete(net_buf *buf);
void le_conn_update_complete(net_buf *buf);
void hci_num_completed_packets(net_buf *buf);
void update_sec_level(bt_conn *conn);
void hci_encrypt_key_refresh_complete(net_buf *buf);
void hci_encrypt_change(net_buf *buf);
bt_conn * find_pending_connect(bt_addr_le_t *peer_addr);
void hci_vendor_event(net_buf *buf);
void handle_event(u8_t event,net_buf *buf,event_handler *handlers,size_t num_handlers);
void hci_le_meta_event(net_buf *buf);
void hci_cmd_done(u16_t opcode,u8_t status,net_buf *buf);
void hci_cmd_status(net_buf *buf);
void hci_cmd_complete(net_buf *buf);
int id_find(bt_addr_le_t *addr);
void sys_put_le64(u8_t *dst);
net_buf * bt_hci_cmd_create(u16_t opcode,u8_t param_len);
int bt_hci_cmd_send_sync(u16_t opcode,net_buf *buf,net_buf **rsp);
int set_le_scan_enable(u8_t enable);
int set_random_address(bt_addr_t *addr);
int le_set_private_addr(void);
int hci_id_add(bt_addr_le_t *addr,u8_t *val);
void keys_add_id(bt_keys *keys,void *data);
int addr_res_enable(u8_t enable);
int set_advertise_enable(_Bool enable);
void hci_disconn_complete(net_buf *buf);
int set_ad(u16_t hci_op,bt_ad *ad,size_t ad_len);
int le_adv_update(bt_data *ad,size_t ad_len,bt_data *sd,size_t sd_len,_Bool connectable,_Bool use_name);
bt_addr_le_t * bt_lookup_id_addr(u8_t id,bt_addr_le_t *addr);
_Bool bt_le_conn_params_valid(bt_le_conn_param *param);
int bt_unpair(u8_t id,bt_addr_le_t *addr);
void bt_id_add(bt_keys *keys);
void bt_id_del(bt_keys *keys);
void update_pending_id(bt_keys *keys,void *data);
void bt_data_parse(net_buf_simple *ad,anon_subr__Bool_bt_data_ptr_void_ptr *func,void *user_data);
int bt_addr_le_create_static(bt_addr_le_t *addr);
void id_create(u8_t id,bt_addr_le_t *addr);
int bt_send(net_buf *buf);
int bt_hci_cmd_send(u16_t opcode,net_buf *buf);
int bt_le_set_data_len(bt_conn *conn,u16_t tx_octets,u16_t tx_time);
int start_le_scan(u8_t scan_type,u16_t interval,u16_t window);
int bt_le_scan_update(_Bool fast_scan);
void le_adv_report(net_buf *buf);
void le_ltk_request(net_buf *buf);
void le_conn_param_neg_reply(u16_t handle,u8_t reason);
void le_conn_param_req(net_buf *buf);
void enh_conn_complete(bt_hci_evt_le_enh_conn_complete *evt);
void le_enh_conn_complete(net_buf *buf);
void le_legacy_conn_complete(net_buf *buf);
void hci_tx_thread(void *p1);
int bt_recv(net_buf *buf);
undefined4 bt_recv_prio(net_buf *param_1);
int bt_hci_driver_register(bt_hci_driver *drv);
void bt_finalize_init(void);
void bt_delete_queue(k_fifo *queue_to_del);
int bt_disable_action(void);
int bt_disable(void);
int bt_set_name(char *name);
int bt_enable(bt_ready_cb_t *cb);
char * bt_get_name(void);
int bt_id_create(bt_addr_le_t *addr,u8_t *irk);
int bt_setup_id_addr(void);
void init_work(k_work *work);
_Bool bt_addr_le_is_bonded(u8_t id,bt_addr_le_t *addr);
int bt_le_adv_start_internal(byte *param_1,bt_data *param_2,size_t param_3,bt_data *param_4,size_t param_5,bt_addr_le_t *param_6);
int set_adv_channel_map(u8_t channel);
int bt_get_local_public_address(bt_addr_le_t *adv_addr);
int bt_get_local_ramdon_address(bt_addr_le_t *adv_addr);
int bt_le_adv_start(bt_le_adv_param *param,bt_data *ad,size_t ad_len,bt_data *sd,size_t sd_len);
int bt_le_adv_stop(void);
int bt_le_scan_start(byte *param_1,bt_le_scan_cb_t.conflict1 *param_2);
int bt_le_scan_stop(void);
int bt_set_tx_pwr(int8_t power);
int bt_buf_get_rx_avail_cnt(void);
net_buf * bt_buf_get_rx(bt_buf_type type,s32_t timeout);
net_buf * bt_buf_get_cmd_complete(s32_t timeout);
int bt_pub_key_gen(bt_pub_key_cb *new_cb);
u8_t * bt_pub_key_get(void);
int bt_dh_key_gen(u8_t *remote_pk,bt_dh_key_cb_t *cb);
void sys_slist_remove(sys_slist_t *list,sys_snode_t *prev_node,sys_snode_t *node);
size_t net_buf_frags_len(net_buf *buf);
u8_t get_ident(void);
bt_l2cap_le_chan * __l2cap_lookup_ident(bt_conn *conn,u16_t ident,_Bool remove);
bt_l2cap_server * l2cap_server_lookup_psm(u16_t psm);
bt_l2cap_le_chan * l2cap_remove_rx_cid(bt_conn *conn,u16_t cid);
void l2cap_chan_sdu_sent(bt_conn *conn,void *user_data);
net_buf * l2cap_alloc_frag(s32_t timeout,void *user_data);
void l2cap_connected(bt_l2cap_chan *chan);
void l2cap_chan_destroy(bt_l2cap_chan *chan);
void l2cap_chan_tx_init(bt_l2cap_le_chan *chan);
void l2cap_chan_rx_init(bt_l2cap_le_chan *chan);
int l2cap_accept(bt_conn *conn,bt_l2cap_chan **chan);
net_buf * l2cap_create_le_sig_pdu(u8_t code,u8_t ident,u16_t len);
void l2cap_chan_tx_give_credits(bt_l2cap_le_chan *chan,u16_t credits);
void l2cap_disconnected(void);
void bt_l2cap_chan_remove(bt_conn *conn,bt_l2cap_chan *ch);
void bt_l2cap_chan_del(bt_l2cap_chan *chan);
void l2cap_rtx_timeout(k_work *work);
void bt_l2cap_disconnected(bt_conn *conn);
net_buf * bt_l2cap_create_pdu_timeout(net_buf_pool *pool,size_t reserve,s32_t timeout);
int bt_l2cap_send_cb(bt_conn *conn,u16_t cid,net_buf *buf,bt_conn_tx_cb_t *cb,void *user_data);
void bt_l2cap_send(bt_conn *conn,u16_t cid,net_buf *buf);
void l2cap_chan_send_credits(bt_l2cap_le_chan *chan,u16_t credits);
int l2cap_le_conn_req(bt_l2cap_le_chan *ch);
void bt_l2cap_encrypt_change(bt_conn *conn,u8_t hci_status);
void l2cap_send_reject(bt_conn *conn,u8_t ident,u16_t reason,void *data,u8_t data_len);
int l2cap_chan_le_send(bt_l2cap_le_chan *ch,net_buf *buf,u16_t sdu_hdr_len);
int l2cap_chan_le_send_sdu(bt_l2cap_le_chan *param_1,net_buf **param_2,ushort param_3);
bt_l2cap_chan * bt_l2cap_le_lookup_tx_cid(bt_conn *conn,u16_t cid);
bt_l2cap_chan * bt_l2cap_le_lookup_rx_cid(bt_conn *conn,u16_t cid);
_Bool l2cap_chan_add(bt_conn *conn,bt_l2cap_chan *chan,bt_l2cap_chan_destroy_t *destroy);
void bt_l2cap_connected(bt_conn *conn);
void bt_l2cap_recv(bt_conn *conn,net_buf *buf);
int bt_l2cap_update_conn_param(bt_conn *conn,bt_le_conn_param *param);
void bt_l2cap_init(void);
int bt_l2cap_chan_disconnect(bt_l2cap_chan *chan);
void l2cap_chan_le_recv_seg(bt_l2cap_le_chan *param_1,net_buf *param_2);
void l2cap_rx_process(k_work *work);
int l2cap_recv(bt_l2cap_chan *chan_1,net_buf *buf);
void sys_memcpy_swap(void *dst,void *src,size_t length);
void sys_mem_swap(void *buf,size_t length);
u8_t get_io_capa(void);
bt_smp * smp_chan_get(bt_conn *conn);
void atomic_set_bit(atomic_t *target,int bit);
int atomic_test_bit(atomic_t *target,int bit);
void smp_reset(bt_smp *smp);
void smp_pairing_complete(bt_smp *smp,u8_t status);
int bt_smp_aes_cmac(u8_t *key,u8_t *in,size_t len,u8_t *out);
int smp_sign_buf(u8_t *key,u8_t *msg,u16_t len);
int smp_f4(u8_t *u,u8_t *v,u8_t *x,u8_t z,u8_t *res);
u8_t sc_smp_check_confirm(bt_smp *smp);
int smp_f5(u8_t *w,u8_t *n1,u8_t *n2,bt_addr_le_t *a1,bt_addr_le_t *a2,u8_t *mackey,u8_t *ltk);
int smp_f6(u8_t *w,u8_t *n1,u8_t *n2,u8_t *r,u8_t *iocap,bt_addr_le_t *a1,bt_addr_le_t *a2,u8_t *check);
int smp_g2(u8_t *u,u8_t *v,u8_t *x,u8_t *y,u32_t.conflict *passkey);
int atomic_test_and_clear_bit(atomic_t *target,int bit);
u8_t display_passkey(bt_smp *smp);
_Bool update_keys_check(bt_smp *smp);
u8_t smp_pairing_failed(bt_smp *smp,net_buf *buf);
void smp_timeout(k_work *work);
u8_t smp_ident_info(bt_smp *smp,net_buf *buf);
u8_t smp_encrypt_info(bt_smp *smp,net_buf *buf);
u8_t legacy_request_tk(bt_smp *smp);
void bt_smp_disconnected(bt_l2cap_chan *chan);
void bt_smp_connected(bt_l2cap_chan *chan);
u8_t get_auth(u8_t auth);
_Bool sec_level_reachable(void);
int bt_smp_accept(bt_conn *conn,bt_l2cap_chan **chan);
_Bool smp_keys_check(bt_conn *conn);
u8_t get_pair_method(bt_smp *smp,u8_t remote_io);
net_buf * smp_create_pdu(bt_smp *smp,u8_t op);
void smp_send(bt_smp *smp,net_buf *buf,bt_conn_tx_cb_t *cb);
u8_t sc_smp_send_dhkey_check(bt_smp *smp,u8_t *e);
u8_t compute_and_send_master_dhcheck(bt_smp *smp);
u8_t compute_and_check_and_send_slave_dhcheck(bt_smp *smp);
u8_t smp_dhkey_check(bt_smp *smp,net_buf *buf);
u8_t smp_send_pairing_random(bt_smp *smp);
u8_t sc_send_public_key(bt_smp *smp);
u8_t send_pairing_rsp(bt_smp *smp);
u8_t bt_smp_distribute_keys(bt_smp *smp);
u8_t smp_signing_info(bt_smp *smp,net_buf *buf);
u8_t smp_master_ident(bt_smp *smp,net_buf *buf);
int smp_init(bt_smp *smp);
int smp_send_pairing_req(bt_conn *conn);
u8_t smp_security_request(bt_smp *smp,net_buf *buf);
u8_t smp_pairing_req(bt_smp *smp,net_buf *buf);
void smp_check_complete(bt_conn *conn,u8_t dist_complete);
void smp_sign_info_sent(bt_conn *conn,void *user_data);
void le_sc_oob_config_set.isra.3.constprop.19(int *param_1,char *param_2);
int smp_error(bt_smp *smp,u8_t reason);
void bt_smp_dhkey_ready(u8_t *dhkey);
int bt_smp_recv(bt_l2cap_chan *chan,net_buf *buf);
void bt_smp_encrypt_change(bt_l2cap_chan *chan,u8_t hci_status);
u8_t smp_send_pairing_confirm(bt_smp *smp);
void smp_ident_sent(bt_conn *conn,void *user_data);
int smp_c1(u8_t *k,u8_t *r,u8_t *preq,u8_t *pres,bt_addr_le_t *ia,bt_addr_le_t *ra,u8_t *enc_data);
u8_t legacy_send_pairing_confirm(bt_smp *smp);
u8_t legacy_pairing_confirm(bt_smp *smp);
u8_t smp_pairing_confirm(bt_smp *smp,net_buf *buf);
u8_t smp_pairing_rsp(bt_smp *smp,net_buf *buf);
u8_t smp_ident_addr_info(bt_smp *smp,net_buf *buf);
u8_t smp_public_key_slave(bt_smp *smp);
u8_t smp_public_key(bt_smp *smp,net_buf *buf);
void bt_smp_pkey_ready(u8_t *pkey);
u8_t smp_pairing_random(bt_smp *smp,net_buf *buf);
_Bool bt_smp_request_ltk(bt_conn *conn,u16_t ediv,u8_t *ltk);
int bt_smp_sign_verify(bt_conn *conn,net_buf *buf);
int bt_smp_sign(bt_conn *conn,net_buf *buf);
int bt_smp_auth_passkey_entry(bt_conn *conn,uint passkey);
int bt_smp_auth_passkey_confirm(bt_conn *conn);
int bt_smp_auth_cancel(bt_conn *conn);
int bt_smp_auth_pairing_confirm(bt_conn *conn);
int bt_smp_start_security(bt_conn *conn);
void bt_smp_update_keys(bt_conn *conn);
int bt_smp_init(void);
bt_keys * bt_keys_find_addr(u8_t id,bt_addr_le_t *addr);
bt_keys * bt_keys_find(int type,u8_t id,bt_addr_le_t *addr);
bt_keys * bt_keys_get_addr(u8_t id,bt_addr_le_t *addr);
void bt_keys_foreach(int type,anon_subr_void_bt_keys_ptr_void_ptr *func,void *data);
bt_keys * bt_keys_find(int type,u8_t id,bt_addr_le_t *addr);
bt_keys * bt_keys_get_type(int type,u8_t id,bt_addr_le_t *addr);
bt_keys * bt_keys_find_irk(u8_t id,bt_addr_le_t *addr);
bt_keys * bt_keys_find_addr(u8_t id,bt_addr_le_t *addr);
void bt_keys_add_type(bt_keys *keys,int type);
void bt_keys_clear(bt_keys *keys);
void keys_clear_id(bt_keys *keys,void *data);
void bt_keys_clear_all(u8_t id);
void bt_keys_update_usage(u8_t id,bt_addr_le_t *addr);
u8_t notify_func(bt_conn *conn,bt_gatt_subscribe_params *params,void *data,u16_t length);
void le_param_updated(bt_conn *conn,u16_t interval,u16_t latency,u16_t timeout);
void ble_set_tx_pwr(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_unsubscribe(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void write_func(bt_conn *conn,u8_t err,bt_gatt_write_params *params);
void ble_exchange_mtu(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void exchange_func(bt_conn *conn,u8_t err,bt_gatt_exchange_params *params);
void ble_auth_pairing_confirm(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_auth_passkey_confirm(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_auth_cancel(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_auth(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_security(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_select_conn(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_disconnect(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_connect(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_stop_advertise(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_get_device_name(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_start_advertise(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_set_adv_channel(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_stop_scan(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_disable(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
u8_t discover_func(bt_conn *conn,bt_gatt_attr *attr,bt_gatt_discover_params *params);
void ble_set_data_len(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_subscribe(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_write(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_read(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
u8_t read_func(bt_conn *conn,u8_t err,bt_gatt_read_params *params,void *data,u16_t length);
_Bool data_cb(bt_data *data,void *user_data);
void ble_discover(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_auth_passkey(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_conn_update(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_unpair(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_start_scan(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_set_device_name(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_init(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
int bt_addr_le_to_str(bt_addr_le_t *addr,char *str);
void device_found(bt_addr_le_t *addr,s8_t rssi,u8_t evtype,net_buf_simple *buf);
void ble_read_local_address(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void connected(bt_conn *conn,u8_t err);
void disconnected(bt_conn *conn,u8_t reason);
void security_changed(bt_conn *conn,bt_security_t level,bt_security_err err);
void auth_passkey_display(bt_conn *conn,uint passkey);
void auth_passkey_entry(bt_conn *conn);
void auth_passkey_confirm(bt_conn *conn,uint passkey);
void auth_cancel(bt_conn *conn);
void auth_pairing_confirm(bt_conn *conn);
void auth_pairing_complete(bt_conn *conn,_Bool bonded);
void auth_pairing_failed(bt_conn *conn,bt_security_err reason);
void identity_resolved(bt_conn *conn,bt_addr_le_t *rpa,bt_addr_le_t *identity);
void ble_get_all_conn_info(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
void ble_write_without_rsp(char *pcWriteBuffer,int xWriteBufferLen,int argc,char **argv);
int ble_cli_register(void);
void k_queue_init(k_queue *queue,int size);
void k_queue_insert(k_queue *queue,void *prev,void *data);
void k_queue_append(k_queue *queue,void *data);
void k_queue_free(k_queue *queue);
void k_queue_prepend(k_queue *queue,void *data);
void k_queue_append_list(k_queue *queue,void *head,void *tail);
void * k_queue_get(k_queue *queue,s32_t timeout);
int k_queue_is_empty(k_queue *queue);
int k_queue_get_cnt(k_queue *queue);
int k_sem_init(k_sem *sem,uint initial_count,uint limit);
int k_sem_take(k_sem *sem,uint32_t timeout);
int k_sem_give(k_sem *sem);
int k_sem_delete(k_sem *sem);
uint k_sem_count_get(k_sem *sem);
int k_thread_create(k_thread *new_thread,char *name,size_t stack_size,k_thread_entry_t entry,int prio);
void k_thread_delete(k_thread *new_thread);
int k_yield(void);
uint irq_lock(void);
void irq_unlock(void);
void k_timer_init(k_timer_t.conflict1 *timer,k_timer_handler_t.conflict handle,void *args);
void k_timer_stop(k_timer_t.conflict1 *timer);
void k_timer_delete(k_timer_t.conflict1 *timer);
longlong k_now_ms(void);
u32_t.conflict k_uptime_get_32(void);
void k_timer_start(k_timer_t.conflict1 *timer,uint32_t timeout);
void k_get_random_byte_array(uint8_t *buf,size_t len);
void * k_malloc(size_t xWantedSize);
void k_free(void *pv);
int atomic_cas(atomic_t *target,atomic_val_t old_value,atomic_val_t new_value);
atomic_val_t atomic_inc(atomic_t *target);
atomic_val_t atomic_dec(atomic_t *target);
atomic_val_t atomic_get(atomic_t *target);
atomic_val_t atomic_set(atomic_t *target,atomic_val_t value);
atomic_val_t atomic_clear(atomic_t *target);
atomic_val_t atomic_or(atomic_t *target,atomic_val_t value);
atomic_val_t atomic_and(atomic_t *target,atomic_val_t value);
void fixed_data_unref(net_buf *buf,u8_t *data);
net_buf_pool * net_buf_pool_get(int id);
int net_buf_id(net_buf *buf);
u8_t * fixed_data_alloc(net_buf *buf,size_t *size,s32_t timeout);
net_buf * net_buf_alloc_len(net_buf_pool *pool,size_t size,s32_t timeout);
net_buf * net_buf_alloc_fixed(net_buf_pool *pool,s32_t timeout);
net_buf * net_buf_get(k_fifo *fifo,s32_t timeout);
void net_buf_simple_reserve(net_buf_simple *buf,size_t reserve);
void net_buf_put(k_fifo *fifo,net_buf *buf);
void net_buf_unref(net_buf *buf);
net_buf * net_buf_ref(net_buf *buf);
void net_buf_frag_insert(net_buf *parent,net_buf *frag);
net_buf * net_buf_frag_add(net_buf *head,net_buf *frag);
net_buf * net_buf_frag_del(net_buf *parent,net_buf *frag);
void * net_buf_simple_add(net_buf_simple *buf,size_t len);
void * net_buf_simple_add_mem(net_buf_simple *buf,void *mem,size_t len);
u8_t * net_buf_simple_add_u8(net_buf_simple *buf,u8_t val);
void net_buf_simple_add_le16(net_buf_simple *buf,u16_t val);
void * net_buf_simple_push(net_buf_simple *buf,size_t len);
void net_buf_simple_push_le16(net_buf_simple *buf,u16_t val);
void * net_buf_simple_pull(net_buf_simple *buf,size_t len);
void * net_buf_simple_pull_mem(net_buf_simple *buf,size_t len);
u8_t net_buf_simple_pull_u8(net_buf_simple *buf);
u16_t net_buf_simple_pull_le16(net_buf_simple *buf);
size_t net_buf_simple_headroom(net_buf_simple *buf);
size_t net_buf_simple_tailroom(net_buf_simple *buf);
size_t net_buf_append_bytes(net_buf *buf,size_t len,void *value,s32_t timeout,net_buf_allocator_cb *allocate_cb,void *user_data);
char * bt_hex_real(void *buf,size_t len);
char * bt_addr_le_str_real(bt_addr_le_t *addr);
_Bool polling_events(k_poll_event *events,int num_events,s32_t timeout,int *last_registered);
void k_poll_event_init(k_poll_event *event,u32_t.conflict type,int mode,void *obj);
int k_poll(k_poll_event *events,int num_events,s32_t timeout);
int k_poll_signal_raise(k_poll_signal *signal,int result);
_Bool bt_rpa_irk_matches(u8_t *irk,bt_addr_t *addr);
void k_work_submit_to_queue(k_work_q *work_q,k_work *work);
void work_queue_main(void *p1);
int k_work_q_start(void);
int k_work_init(k_work *work,k_work_handler_t *handler);
void k_work_submit(k_work *work);
void k_delayed_work_init(k_delayed_work *work,k_work_handler_t *handler);
void k_delayed_work_del_timer(k_delayed_work *work);
int add_timer_record(k_delayed_work *delay_work);
int remv_timer_record(k_delayed_work *delay_work);
int k_delayed_work_cancel(k_delayed_work *work);
int k_delayed_work_submit(k_delayed_work *work,uint32_t delay);
timer_rec_d * get_timer_record(void *hdl);
void work_timeout(void *timer);
void reverse_bytearray(uint8_t *src,uint8_t *result,int array_size);
void gf_double(uint8_t *out,uint8_t *in);
int tc_cmac_erase(TCCmacState_t s);
int tc_cmac_init(TCCmacState_t s);
int tc_cmac_setup(TCCmacState_t s,uint8_t *key,TCAesKeySched_t sched);
int tc_cmac_update(TCCmacState_t s,uint8_t *data,size_t data_length);
int tc_cmac_final(uint8_t *tag,TCCmacState_t s);
uint _copy(uint8_t *to,uint to_len,uint8_t *from,uint from_len);
void * _set(void *__s,int __c,size_t __n);
uint8_t _double_byte(uint8_t a);
rx_msg_struct * bl_find_valid_queued_entry(void);
void bl_onchiphci_rx_packet_handler(uint8_t pkt_type,uint16_t src_id,uint8_t *param,uint8_t param_len,void *rx_buf);
void bl_handle_queued_msg(void);
void bl_onchiphci_interface_deinit(void);
uint8_t bl_onchiphci_interface_init(void);
int bl_onchiphci_send_2_controller(net_buf *buf);
int atomic_test_bit(atomic_t *target,int bit);
void tx_free(bt_conn_tx *tx);
int send_frag(ushort *param_1,net_buf *param_2,int param_3,int param_4);
void notify_connected(bt_conn *conn);
void bt_conn_reset_rx_state(bt_conn *conn);
void conn_cleanup(bt_conn *conn);
void tx_notify(bt_conn *conn);
void tx_complete_work(k_work *work);
k_sem * bt_conn_get_pkts(bt_conn *conn);
void notify_le_param_updated(bt_conn *conn);
_Bool le_param_req(bt_conn *conn,bt_le_conn_param *param);
_Bool le_check_valid_conn(void);
void bt_conn_identity_resolved(bt_conn *conn);
int bt_conn_le_start_encryption(bt_conn *conn,u8_t *rand,u8_t *ediv,u8_t *ltk,size_t len);
void bt_conn_security_changed(bt_conn *param_1,int param_2);
int bt_conn_set_security(bt_conn *conn,bt_security_t sec);
bt_security_t bt_conn_get_security(bt_conn *conn);
void bt_conn_cb_register(bt_conn_cb *cb);
void bt_conn_recv(bt_conn *conn,net_buf *buf,u8_t flags);
int bt_conn_send_cb(bt_conn *conn,net_buf *buf,bt_conn_tx_cb_t *cb,void *user_data);
int bt_conn_prepare_events(k_poll_event *events);
bt_conn * bt_conn_add_le(u8_t id,bt_addr_le_t *peer);
void bt_conn_set_state(bt_conn *conn,bt_conn_state_t state);
bt_conn * bt_conn_lookup_handle(u16_t handle);
int bt_conn_addr_le_cmp(bt_conn *conn,bt_addr_le_t *peer);
bt_conn * bt_conn_lookup_state_le(bt_addr_le_t *peer,bt_conn_state_t state);
bt_conn * bt_conn_lookup_addr_le(u8_t id,bt_addr_le_t *peer);
bt_conn * bt_conn_lookup_state_le(bt_addr_le_t *peer,bt_conn_state_t state);
void bt_conn_foreach(int type,anon_subr_void_bt_conn_ptr_void_ptr *func,void *data);
void bt_conn_disconnect_all(u8_t id);
void bt_conn_unref(bt_conn *conn);
bt_addr_le_t * bt_conn_get_dst(bt_conn *conn);
int bt_conn_get_info(bt_conn *conn,bt_conn_info *info);
int bt_conn_get_remote_dev_info(bt_conn_info *info);
int bt_conn_disconnect(bt_conn *conn,u8_t reason);
void disconnect_all(bt_conn *conn,void *data);
bt_conn * bt_conn_create_le(bt_addr_le_t *peer,bt_le_conn_param *param);
int bt_conn_le_conn_update(bt_conn *conn,bt_le_conn_param *param);
int send_conn_le_param_update(bt_conn *conn,bt_le_conn_param *param);
void conn_update_timeout(k_work *work);
int bt_conn_le_param_update(bt_conn *conn,bt_le_conn_param *param);
net_buf * bt_conn_create_pdu_timeout(net_buf_pool *pool,size_t reserve,s32_t timeout);
net_buf * create_frag(net_buf *buf);
void bt_conn_process_tx(bt_conn *param_1);
int bt_conn_auth_cb_register(bt_conn_auth_cb *cb);
int bt_conn_auth_passkey_entry(bt_conn *conn,uint passkey);
int bt_conn_auth_passkey_confirm(bt_conn *conn);
int bt_conn_auth_cancel(bt_conn *conn);
int bt_conn_auth_pairing_confirm(bt_conn *conn);
u8_t bt_conn_index(bt_conn *conn);
int bt_conn_init(void);
int bt_rand(void *buf,size_t len);
int bt_encrypt_le(u8_t *key,u8_t *plaintext,u8_t *enc_data);
void sys_slist_remove(sys_slist_t *list,sys_snode_t *prev_node,sys_snode_t *node);
u8_t found_attr(bt_gatt_attr *attr,void *user_data);
u16_t find_static_attr(bt_gatt_attr *attr);
void gatt_ccc_changed(bt_gatt_attr *attr,_bt_gatt_ccc.conflict2 *ccc);
void gatt_indicate_rsp(bt_conn *conn,u8_t err,void *pdu,u16_t length,void *user_data);
void sc_restore_rsp(bt_conn *conn,bt_gatt_attr *attr,u8_t err);
void gatt_subscription_remove(bt_conn *conn,sys_snode_t *prev,bt_gatt_subscribe_params *params);
void gatt_mtu_rsp(bt_conn *conn,u8_t err,void *pdu,u16_t length,void *user_data);
void gatt_write_rsp(bt_conn *conn,u8_t err,void *pdu,u16_t length,void *user_data);
bt_gatt_ccc_cfg * find_ccc_cfg(bt_conn *conn,_bt_gatt_ccc.conflict2 *ccc);
int gatt_notify(bt_conn *conn,u16_t handle,bt_gatt_notify_params.conflict1 *params);
void gatt_read_multiple_rsp(bt_conn *conn,u8_t err,void *pdu,u16_t length,void *user_data);
void gatt_write_ccc_rsp(bt_conn *conn,u8_t err,void *pdu,u16_t length,void *user_data);
int gatt_send(bt_conn *conn,net_buf *buf,bt_att_func_t *func,void *params);
int gatt_indicate(bt_conn *conn,u16_t handle,bt_gatt_indicate_params.conflict2 *params);
undefined4 match_uuid(undefined4 param_1,undefined4 *param_2);
void sc_indicate_rsp(bt_conn *conn,bt_gatt_attr *attr,u8_t err);
u8_t disconnected_cb(bt_gatt_attr *attr,void *user_data);
gatt_sc_cfg * find_sc_cfg(u8_t id,bt_addr_le_t *addr);
int gatt_write_ccc(bt_conn *conn,u16_t handle,u16_t value,bt_gatt_subscribe_params *params);
ssize_t read_appearance(bt_conn *conn,bt_gatt_attr *attr,void *buf,u16_t len,u16_t offset);
ssize_t read_ppcp(bt_conn *conn,bt_gatt_attr *attr,void *buf,u16_t len,u16_t offset);
ssize_t read_name(bt_conn *conn,bt_gatt_attr *attr,void *buf,u16_t len,u16_t offset);
ssize_t bt_gatt_attr_read_ccc(bt_conn *conn,bt_gatt_attr *attr,void *buf,u16_t len,u16_t offset);
ssize_t bt_gatt_attr_read_service(bt_conn *conn,bt_gatt_attr *attr,void *buf,u16_t len,u16_t offset);
void sc_save(u8_t id,bt_addr_le_t *peer,u16_t start,u16_t end);
_Bool sc_ccc_cfg_write(bt_conn *conn,bt_gatt_attr *attr,u16_t value);
u8_t notify_cb(bt_gatt_attr *attr,void *user_data);
void sc_indicate(u16_t start,u16_t end);
ssize_t bt_gatt_attr_write_ccc(bt_conn *conn,bt_gatt_attr *attr,void *buf,u16_t len,u16_t offset,u8_t flags);
void bt_gatt_init(void);
void bt_gatt_deinit(void);
undefined4 bt_gatt_service_unregister(int *param_1);
ssize_t bt_gatt_attr_read(bt_conn *conn,bt_gatt_attr *attr,void *buf,u16_t buf_len,u16_t offset,void *value,u16_t value_len);
uint16_t bt_gatt_attr_value_handle(bt_gatt_attr *attr);
uint lexical_block_0(bt_gatt_attr *param_1);
ssize_t bt_gatt_attr_read_chrc(bt_conn *conn,bt_gatt_attr *attr,void *buf,u16_t len,u16_t offset);
void bt_gatt_foreach_attr_type(u16_t start_handle,u16_t end_handle,bt_uuid *uuid,void *attr_data,uint16_t num_matches,bt_gatt_attr_func_t *func,void *user_data);
void bt_gatt_foreach_attr(u16_t start_handle,u16_t end_handle,bt_gatt_attr_func_t *func,void *user_data);
int bt_gatt_service_register(bt_uuid **param_1);
int bt_gatt_indicate(bt_conn *conn,bt_gatt_indicate_params.conflict2 *params);
void sc_process(k_work *work);
u16_t bt_gatt_get_mtu(bt_conn *conn);
u8_t bt_gatt_check_perm(bt_conn *conn,bt_gatt_attr *attr,u8_t mask);
u8_t update_ccc(bt_gatt_attr *attr,void *user_data);
int bt_gatt_exchange_mtu(bt_conn *conn,bt_gatt_exchange_params *params);
int bt_gatt_discover(bt_conn *conn,bt_gatt_discover_params *params);
void gatt_discover_next(bt_conn *conn,u16_t last_handle,bt_gatt_discover_params *params);
void gatt_find_type_rsp(bt_conn *conn,u8_t err,void *pdu,u16_t length,void *user_data);
void gatt_read_group_rsp(bt_conn *conn,u8_t err,void *pdu,u16_t length,void *user_data);
void gatt_read_type_rsp(bt_conn *conn,u8_t err,void *pdu,u16_t length,void *user_data);
void read_included_uuid_cb(bt_conn *conn,u8_t err,void *pdu,u16_t length,void *user_data);
void gatt_find_info_rsp(bt_conn *conn,u8_t err,void *pdu,u16_t length,void *user_data);
int bt_gatt_read(bt_conn *conn,bt_gatt_read_params *params);
void gatt_read_rsp(bt_conn *conn,u8_t err,void *pdu,u16_t length,void *user_data);
int bt_gatt_write_without_response_cb(bt_conn *conn,u16_t handle,void *data,u16_t length,_Bool sign,bt_gatt_complete_func_t *func,void *user_data);
int bt_gatt_write(bt_conn *conn,bt_gatt_write_params *params);
void gatt_prepare_write_rsp(bt_conn *conn,u8_t err,void *pdu,u16_t length,void *user_data);
int bt_gatt_subscribe(bt_conn *conn,bt_gatt_subscribe_params *params);
int bt_gatt_unsubscribe(bt_conn *conn,bt_gatt_subscribe_params *params);
void bt_gatt_notification(bt_conn *conn,u16_t handle,void *data,u16_t length);
void bt_gatt_connected(bt_conn *conn);
void bt_gatt_encrypt_change(bt_conn *conn);
_Bool bt_gatt_change_aware(bt_conn *conn,_Bool req);
void bt_gatt_disconnected(bt_conn *conn);
void uuid_to_uuid128(bt_uuid *src,bt_uuid_128 *dst);
int bt_uuid_cmp(bt_uuid *u1,bt_uuid *u2);
_Bool bt_uuid_create(bt_uuid *uuid,u8_t *data,u8_t data_len);
void bt_uuid_to_str(bt_uuid *uuid,char *str,size_t len);
void bt_settings_encode_key(char *path,size_t path_size,char *subsys,bt_addr_le_t *addr,char *key);
u8_t u8_to_dec(char *buf,u8_t buflen,u8_t value);
void add_round_key(uint8_t *s,uint *k);
void shift_rows(uint8_t *s);
void mult_row_column(uint8_t *out,uint8_t *in);
int tc_aes128_set_encrypt_key(TCAesKeySched_t s,uint8_t *k);
int tc_aes_encrypt(uint8_t *out,uint8_t *in,TCAesKeySched_t s);
u8_t att_prepare_write_req(bt_att *att,net_buf *buf);
att_type_t att_op_get_type(u8_t op);
void att_req_destroy(bt_att_req.conflict26 *req);
u8_t att_notify(bt_att *att,net_buf *buf);
void bt_gatt_foreach_attr(u16_t start_handle,u16_t end_handle,bt_gatt_attr_func_t *func,void *user_data);
u8_t read_group_cb(bt_gatt_attr *attr,void *user_data);
u8_t read_type_cb(bt_gatt_attr *attr,void *user_data);
u8_t find_type_cb(bt_gatt_attr *attr,void *user_data);
u8_t find_info_cb(bt_gatt_attr *attr,void *user_data);
void bt_att_connected(bt_l2cap_chan *chan);
bt_conn_tx_cb_t * att_cb(void);
int att_send(bt_conn *conn,net_buf *buf,bt_conn_tx_cb_t *cb,void *user_data);
int att_send_req(bt_att *att,bt_att_req.conflict26 *req);
u8_t att_handle_rsp(bt_att *att,void *pdu,u16_t len,u8_t err);
u8_t att_handle_find_info_rsp(bt_att *att,net_buf *buf);
u8_t att_handle_find_type_rsp(bt_att *att,net_buf *buf);
u8_t att_handle_read_type_rsp(bt_att *att,net_buf *buf);
u8_t att_handle_read_rsp(bt_att *att,net_buf *buf);
u8_t att_handle_read_blob_rsp(bt_att *att,net_buf *buf);
u8_t att_handle_read_mult_rsp(bt_att *att,net_buf *buf);
u8_t att_handle_read_group_rsp(bt_att *att,net_buf *buf);
u8_t att_handle_write_rsp(bt_att *att,net_buf *buf);
u8_t att_handle_prepare_write_rsp(bt_att *att,net_buf *buf);
u8_t att_handle_exec_write_rsp(bt_att *att,net_buf *buf);
u8_t att_confirm(bt_att *att,net_buf *buf);
u8_t att_error_rsp(bt_att *att,net_buf *buf);
int bt_att_accept(bt_conn *conn,bt_l2cap_chan **chan);
u8_t att_mtu_rsp(bt_att *att,net_buf *buf);
void att_reset(bt_att *att);
void bt_att_disconnected(bt_l2cap_chan *chan);
void att_timeout(k_work *work);
void bt_att_encrypt_change(bt_l2cap_chan *chan,u8_t hci_status);
undefined4 att_exec_write_req(void);
void att_pdu_sent(bt_conn *conn,void *user_data);
bt_att * att_chan_get(bt_conn *conn);
void att_req_sent(bt_conn *conn,void *user_data);
void att_cfm_sent(bt_conn *conn,void *user_data);
void att_rsp_sent(bt_conn *conn,void *user_data);
u8_t write_cb(bt_gatt_attr *attr,void *user_data);
u8_t read_cb(bt_gatt_attr *attr,void *user_data);
net_buf * bt_att_create_pdu(bt_conn *conn,u8_t op,size_t len);
u8_t att_indicate(bt_att *att,net_buf *buf);
u8_t att_mtu_req(bt_att *att,net_buf *buf);
void send_err_rsp(bt_conn *conn,u8_t req,u16_t handle,u8_t err);
int bt_att_recv(bt_l2cap_chan *chan,net_buf *buf);
u8_t att_read_group_req(bt_att *att,net_buf *buf);
u8_t att_read_mult_req(bt_att *att,net_buf *buf);
u8_t att_read_rsp(bt_att *att,u8_t op,u8_t rsp,u16_t handle,u16_t offset);
u8_t att_read_blob_req(bt_att *att,net_buf *buf);
u8_t att_read_req(bt_att *att,net_buf *buf);
u8_t att_read_type_req(bt_att *att,net_buf *buf);
u8_t att_find_type_req(bt_att *att,net_buf *buf);
u8_t att_find_info_req(bt_att *att,net_buf *buf);
u8_t att_write_rsp(bt_conn *conn,u8_t req,u8_t rsp,u16_t handle,void *value,u16_t len);
u8_t att_write_req(bt_att *att,net_buf *buf);
u8_t att_write_cmd(bt_att *att,net_buf *buf);
u8_t att_signed_write_cmd(bt_att *att,net_buf *buf);
void bt_att_init(void);
u16_t bt_att_get_mtu(bt_conn *conn);
int bt_att_send(bt_conn *conn,net_buf *buf,bt_conn_tx_cb_t *cb,void *user_data);
int bt_att_req_send(bt_conn *conn,bt_att_req.conflict26 *req);
void bt_att_req_cancel(bt_conn *param_1,sys_snode_t param_2);
uint32_t fdt32_ld(fdt32_t *p);
int nextprop_(void *fdt,int offset);
fdt_property * fdt_get_property_by_offset_(void *fdt,int offset,int *lenp);
char * fdt_get_string(void *fdt,int stroffset,int *lenp);
char * fdt_get_name(void *fdt,int nodeoffset,int *len);
int fdt_subnode_offset_namelen(void *fdt,int offset,char *name,int namelen);
int fdt_subnode_offset(void *fdt,int parentoffset,char *name);
int fdt_first_property_offset(void *fdt,int nodeoffset);
int fdt_next_property_offset(void *fdt,int offset);
fdt_property *fdt_get_property_namelen_(void *fdt,int offset,char *name,int namelen,int *lenp,int *poffset);
void * fdt_getprop_namelen(void *fdt,int nodeoffset,char *name,int namelen,int *lenp);
void * fdt_getprop(void *fdt,int nodeoffset,char *name,int *lenp);
int fdt_stringlist_count(void *fdt,int nodeoffset,char *property);
char * fdt_stringlist_get(void *fdt,int nodeoffset,char *property,int idx,int *lenp);
uint32_t fdt32_ld(fdt32_t *p);
int fdt_ro_probe_(void *fdt);
void * fdt_offset_ptr(void *fdt,int offset,uint len);
uint32_t fdt_next_tag(void *fdt,int startoffset,int *nextoffset);
int fdt_check_node_offset_(void *fdt,int offset);
int fdt_check_prop_offset_(void *fdt,int offset);
int fdt_next_node(void *fdt,int offset,int *depth);
void cmd_blog_info_dump(char *buf,int len,int argc,char **argv);
size_t blog_strcpy(size_t cur_len,char *dst,char *src);
void cmd_blog_set_level(char *buf,int len,int argc,char **argv);
void blog_port_output(char *log,size_t size);
void blog_hexdump_out(char *name,uint8_t width,uint8_t *buf,uint16_t size);
void blog_init(void);
void wifiprov_ccc_cfg_changed(bt_gatt_attr *attr,u16_t value);
void __bl_ble_sync_task(void *p_arg);
void scan_complete_cb(void *param);
int __recv_event(void *p_drv,pro_event *p_event);
void wifi_state_get_cb(void *p_arg);
size_t write_data(bt_conn *param_1,uint8_t *param_2,size_t param_3);
undefined4 __ble_bytes_send(uint8_t *param_1,uint param_2);
void blsync_disconnected(bt_conn *conn,u8_t reason);
void blsync_exchange_func(bt_conn *conn,u8_t err,bt_gatt_exchange_params *params);
ssize_t read_data(bt_conn *conn,bt_gatt_attr *attr,void *buf,u16_t len,u16_t offset);
void blsync_connected(bt_conn *conn,u8_t err);
int bl_ble_sync_start(bl_ble_sync_t *index,blesync_wifi_func *func,pfn_complete_cb_t *cb,void *cb_arg);
int bl_ble_sync_stop(bl_ble_sync_t *index);
void * __malloc(size_t size);
void __free(void *ptr);
void __clear_dev(pro_handle_t handle);
int __protocol_send(pro_handle_t handle,uint8_t seq,uint8_t ack,uint8_t type,void *p_data,uint16_t length);
int pro_trans_read(pro_handle_t handle,void *buf,size_t bytes,uint16_t mtu);
int pro_trans_ack(pro_handle_t handle);
int pro_trans_layer_ack_read(pro_handle_t handle,void *ack_buf,size_t bytes);
pro_handle_t pro_trans_init(pro_dev *p_dev,pro_func *p_func,void *p_drv);
void pro_trans_reset(pro_handle_t handle);
int __pack_encrypt_read(void *p_drv,uint8_t pack_type,uint8_t *dst_id,uint8_t *dst_buf,uint8_t *dst_len,uint8_t *src_buf,size_t src_lenght);
int __pack_encrypt_write(void *p_drv,uint8_t pack_type,uint8_t src_id,uint8_t *dst_buf,uint8_t *dst_len,uint8_t *src_buf,uint8_t src_len,int16_t remain_len);
enc_handle_t pro_encrypt_init(encrypt *p_enc,void *p_drv);
int __payload_write(void *p_arg,uint8_t *dst_buf,uint8_t *dst_len,uint8_t src_id,uint8_t *src_buf,uint8_t src_len,int16_t remain_len);
int __payload_read(void *p_arg,uint8_t *dst_buf,uint8_t *dst_type,uint8_t *dst_len,uint8_t *src_buf,uint8_t src_len);
pyld_handle_t pro_payload_init(payload *p_pyld,void *p_drv);
cJSON * cJSON_New_Item(void);
char * ensure(printbuffer *p,int needed);
char * cJSON_strdup(char *str);
int update(printbuffer *p);
char * print_number(cJSON *item,printbuffer *p);
char * print_string_ptr(char *str,printbuffer *p);
char * print_array(int depth,int fmt,printbuffer *p);
char * print_value(cJSON *item,int depth,int fmt,printbuffer *p);
char * print_object(int depth,int fmt,printbuffer *p);
void cJSON_InitHooks(cJSON_Hooks *hooks);
void cJSON_Delete(cJSON *c);
char * cJSON_Print(cJSON *item);
void cJSON_AddItemToArray(cJSON *array,cJSON *item);
void cJSON_AddItemToObject(cJSON *object,char *string,cJSON *item);
cJSON * cJSON_CreateNumber(void);
cJSON * cJSON_CreateString(char *string);
cJSON * cJSON_CreateObject(void);
cli_command * cli_command_get(int idx,int *is_static_cmd);
void exit_cmd(char *buf,int len,int argc,char **argv);
int cb_idnoe(void *arg,inode_t *node);
void ota_cmd(char *buf,int len,int argc,char **argv);
void tftp_ota_thread(void *arg);
void cat_cmd(char *buf,int len,int argc,char **argv);
void hexdump_cmd(char *buf,int len,int argc,char **argv);
int aos_cli_init(int use_thread);
void * aos_cli_event_cb_read_get(void);
int cli_putstr(char *msg);
void ps_cmd(char *buf,int len,int argc,char **argv);
int aos_cli_printf(char *msg,...);
int proc_onecmd(int argc,char **argv);
void ls_cmd(char *buf,int len,int argc,char **argv);
void uptime_cmd(char *buf,int len,int argc,char **argv);
void reset_cmd(char *buf,int len,int argc,char **argv);
void poweroff_cmd(char *buf,int len,int argc,char **argv);
void reboot_cmd(char *buf,int len,int argc,char **argv);
void version_cmd(char *buf,int len,int argc,char **argv);
void devname_cmd(char *buf,int len,int argc,char **argv);
void echo_cmd(char *buf,int len,int argc,char **argv);
void mmem_cmd(char *buf,int len,int argc,char **argv);
void pmem_cmd(char *buf,int len,int argc,char **argv);
void help_cmd(char *buf,int len,int argc,char **argv);
int cli_getchar(char *inbuf);
void cli_main_input(char *buffer,int count);
void console_cb_read(int fd,void *param);
void aos_cli_input_direct(char *buffer,int count);
void get_dns_request(void *arg,udp_pcb *upcb,pbuf *p,ip_addr_t *addr,u16_t port);
void dns_server_init(void);
EfErrCode easyflash_init(void);
size_t get_status(uint8_t *status_table,size_t status_num);
void update_sector_cache(uint32_t sec_addr,uint32_t empty_addr);
uint32_t get_next_sector_addr(sector_meta_data_t pre_sec);
_Bool gc_check_cb(sector_meta_data_t sector,void *arg1,void *arg2);
void update_env_cache(char *name,size_t name_len,uint32_t addr);
_Bool find_env_cb(env_node_obj_t env,void *arg1,void *arg2);
_Bool sector_statistics_cb(sector_meta_data_t sector,void *arg1,void *arg2);
_Bool alloc_env_cb(sector_meta_data_t sector,void *arg1,void *arg2);
EfErrCode write_status(uint32_t addr,uint8_t *status_table,size_t status_num,size_t status_index);
EfErrCode read_env(env_node_obj_t env);
EfErrCode update_sec_status(sector_meta_data_t sector,size_t new_env_len,_Bool *is_full);
EfErrCode format_sector(uint32_t addr);
_Bool check_sec_hdr_cb(sector_meta_data_t sector,void *arg1,void *arg2);
uint32_t get_next_env_addr(sector_meta_data_t sector,env_node_obj_t pre_env);
EfErrCode read_sector_meta_data(uint32_t addr,sector_meta_data_t sector,_Bool traversal);
void sector_iterator(sector_meta_data_t sector,sector_store_status_t status,void *arg1,void *arg2,anon_subr__Bool_sector_meta_data_t_void_ptr_void_ptr *callback,_Bool traversal_env);
uint32_t alloc_env(sector_meta_data_t sector,size_t env_size);
void gc_collect(void);
uint32_t new_env(sector_meta_data_t sector,size_t env_size);
_Bool check_and_recovery_gc_cb(sector_meta_data_t sector,void *arg1,void *arg2);
void env_iterator(env_node_obj_t env,void *arg1,void *arg2,anon_subr__Bool_env_node_obj_t_void_ptr_void_ptr *callback);
_Bool find_env(char *key,env_node_obj_t env);
EfErrCode del_env(char *key,env_node_obj_t old_env,_Bool complete_del);
EfErrCode move_env(env_node_obj_t env);
_Bool check_and_recovery_env_cb(env_node_obj_t env,void *arg1,void *arg2);
_Bool do_gc(sector_meta_data_t sector,void *arg1,void *arg2);
EfErrCode create_env_blob(sector_meta_data_t sector,char *key,void *value,size_t len);
size_t ef_get_env_blob(char *key,void *value_buf,size_t buf_len,size_t *saved_value_len);
EfErrCode ef_set_env_blob(char *key,void *value_buf,size_t buf_len);
EfErrCode ef_set_env(char *key,char *value);
EfErrCode ef_save_env(void);
EfErrCode ef_env_set_default(void);
EfErrCode ef_load_env(void);
EfErrCode ef_env_init(ef_env *default_env,size_t default_env_size);
EfErrCode ef_port_read(uint32_t addr,uint32_t *buf,size_t size);
EfErrCode ef_port_write(uint32_t addr,uint32_t *buf,size_t size);
void ef_port_env_lock(void);
void ef_port_env_unlock(void);
void ef_log_debug(char *file,long line,char *format,...);
EfErrCode ef_port_erase(uint32_t addr,size_t size);
void ef_log_info(char *format,...);
EfErrCode ef_port_init(ef_env **default_env,size_t *default_env_size);
uint32_t ef_calc_crc32(uint32_t crc,void *buf,size_t size);
EventGroupHandle_t xEventGroupCreateStatic(StaticEventGroup_t *pxEventGroupBuffer);
EventBits_t xEventGroupWaitBits(EventGroupHandle_t xEventGroup,EventBits_t uxBitsToWaitFor,BaseType_t xClearOnExit,BaseType_t xWaitForAllBits,TickType_t xTicksToWait);
EventBits_t xEventGroupSetBits(EventGroupHandle_t xEventGroup,EventBits_t uxBitsToSet);
void vEventGroupDelete(EventGroupHandle_t xEventGroup);
void vListInitialise(List_t *pxList);
void vListInitialiseItem(ListItem_t *pxItem);
void vListInsertEnd(List_t *pxList,ListItem_t *pxNewListItem);
void vListInsert(List_t *pxList,ListItem_t *pxNewListItem);
UBaseType_t uxListRemove(ListItem_t *pxItemToRemove);
BaseType_t prvCopyDataToQueue(Queue_t *pxQueue,void *pvItemToQueue,BaseType_t xPosition);
void prvCopyDataFromQueue(Queue_t *pxQueue,void *pvBuffer);
void prvUnlockQueue(Queue_t *pxQueue);
BaseType_t xQueueGenericReset(QueueHandle_t xQueue,BaseType_t xNewQueue);
QueueHandle_t xQueueGenericCreateStatic(UBaseType_t uxQueueLength,UBaseType_t uxItemSize,uint8_t *pucQueueStorage,StaticQueue_t *pxStaticQueue,uint8_t ucQueueType);
QueueHandle_t xQueueGenericCreate(UBaseType_t uxQueueLength,UBaseType_t uxItemSize,uint8_t ucQueueType);
QueueHandle_t xQueueCreateCountingSemaphore(UBaseType_t uxMaxCount,UBaseType_t uxInitialCount);
BaseType_t xQueueGenericSend(QueueHandle_t xQueue,void *pvItemToQueue,TickType_t xTicksToWait,BaseType_t xCopyPosition);
QueueHandle_t xQueueCreateMutexStatic(uint8_t ucQueueType,StaticQueue_t *pxStaticQueue);
QueueHandle_t xQueueCreateMutex(uint8_t ucQueueType);
BaseType_t xQueueGenericSendFromISR(QueueHandle_t xQueue,void *pvItemToQueue,BaseType_t *pxHigherPriorityTaskWoken,BaseType_t xCopyPosition);
BaseType_t xQueueGiveFromISR(QueueHandle_t xQueue,BaseType_t *pxHigherPriorityTaskWoken);
BaseType_t xQueueReceive(QueueHandle_t xQueue,void *pvBuffer,TickType_t xTicksToWait);
BaseType_t xQueueSemaphoreTake(QueueHandle_t xQueue,TickType_t xTicksToWait);
UBaseType_t uxQueueMessagesWaiting(QueueHandle_t xQueue);
void vQueueDelete(QueueHandle_t xQueue);
void vQueueAddToRegistry(QueueHandle_t xQueue,char *pcQueueName);
void vQueueWaitForMessageRestricted(QueueHandle_t xQueue,TickType_t xTicksToWait,BaseType_t xWaitIndefinitely);
void prvInitialiseNewStreamBuffer(StreamBuffer_t *pxStreamBuffer,uint8_t *pucBuffer,size_t xBufferSizeBytes,size_t xTriggerLevelBytes,uint8_t ucFlags);
size_t prvWriteBytesToBuffer(StreamBuffer_t *pxStreamBuffer,uint8_t *pucData,size_t xCount);
size_t prvReadBytesFromBuffer(StreamBuffer_t *pxStreamBuffer,uint8_t *pucData,size_t xMaxCount,size_t xBytesAvailable);
StreamBufferHandle_t xStreamBufferGenericCreate(size_t xBufferSizeBytes,size_t xTriggerLevelBytes,BaseType_t xIsMessageBuffer);
StreamBufferHandle_t xStreamBufferGenericCreateStatic(size_t xBufferSizeBytes,size_t xTriggerLevelBytes,BaseType_t xIsMessageBuffer,uint8_t *pucStreamBufferStorageArea,StaticStreamBuffer_t *pxStaticStreamBuffer);
void vStreamBufferDelete(StreamBufferHandle_t xStreamBuffer);
size_t xStreamBufferSpacesAvailable(StreamBufferHandle_t xStreamBuffer);
size_t xStreamBufferSend(StreamBufferHandle_t xStreamBuffer,void *pvTxData,size_t xDataLengthBytes,TickType_t xTicksToWait);
size_t xStreamBufferSendFromISR(StreamBufferHandle_t xStreamBuffer,void *pvTxData,size_t xDataLengthBytes,BaseType_t *pxHigherPriorityTaskWoken);
size_t xStreamBufferReceive(StreamBufferHandle_t xStreamBuffer,void *pvRxData,size_t xBufferLengthBytes,TickType_t xTicksToWait);
size_t xStreamBufferReceiveFromISR(StreamBufferHandle_t xStreamBuffer,void *pvRxData,size_t xBufferLengthBytes,BaseType_t *pxHigherPriorityTaskWoken);
BaseType_t xStreamBufferIsEmpty(StreamBufferHandle_t xStreamBuffer);
void prvResetNextTaskUnblockTime(void);
void prvInitialiseNewTask(TaskFunction_t *pxTaskCode,char *pcName,uint32_t ulStackDepth,void *pvParameters,UBaseType_t uxPriority,TaskHandle_t *pxCreatedTask,TCB_t *pxNewTCB);
void prvDeleteTCB(TCB_t *pxTCB);
void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait,BaseType_t xCanBlockIndefinitely);
void vTaskEnterCritical(void);
void vTaskExitCritical(void);
void prvAddNewTaskToReadyList(TCB_t *pxNewTCB);
TaskHandle_t xTaskCreateStatic(TaskFunction_t *pxTaskCode,char *pcName,uint32_t ulStackDepth,void *pvParameters,UBaseType_t uxPriority,StackType_t *puxStackBuffer,StaticTask_t *pxTaskBuffer);
BaseType_t xTaskCreate(TaskFunction_t *pxTaskCode,char *pcName,uint16_t usStackDepth,void *pvParameters,UBaseType_t uxPriority,TaskHandle_t *pxCreatedTask);
void vTaskDelete(TaskHandle_t xTaskToDelete);
void vTaskSuspendAll(void);
TickType_t xTaskGetTickCount(void);
BaseType_t xTaskGetTickCount2(TickType_t *ticks,BaseType_t *overflow);
TickType_t xTaskGetTickCountFromISR(void);
BaseType_t xTaskIncrementTick(void);
void vTaskDelay(TickType_t xTicksToDelay);
void vTaskSwitchContext(void);
void vTaskPlaceOnEventList(List_t *pxEventList,TickType_t xTicksToWait);
void vTaskPlaceOnUnorderedEventList(List_t *pxEventList,TickType_t xItemValue,TickType_t xTicksToWait);
void vTaskPlaceOnEventListRestricted(List_t *pxEventList,TickType_t xTicksToWait,BaseType_t xWaitIndefinitely);
BaseType_t xTaskRemoveFromEventList(List_t *pxEventList);
void vTaskRemoveFromUnorderedEventList(ListItem_t *pxEventListItem,TickType_t xItemValue);
void vTaskInternalSetTimeOutState(TimeOut_t *pxTimeOut);
void vTaskMissedYield(void);
void vTaskGetInfo(TaskHandle_t xTask,TaskStatus_t *pxTaskStatus,BaseType_t xGetFreeStackSpace,eTaskState eState);
UBaseType_t prvListTasksWithinSingleList(TaskStatus_t *pxTaskStatusArray,List_t *pxList,eTaskState eState);
UBaseType_t uxTaskGetSystemState(TaskStatus_t *pxTaskStatusArray,UBaseType_t uxArraySize,uint32_t *pulTotalRunTime);
TaskHandle_t xTaskGetCurrentTaskHandle(void);
BaseType_t xTaskGetSchedulerState(void);
BaseType_t xTaskPriorityInherit(TaskHandle_t pxMutexHolder);
BaseType_t xTaskPriorityDisinherit(TaskHandle_t pxMutexHolder);
void vTaskPriorityDisinheritAfterTimeout(TaskHandle_t pxMutexHolder,UBaseType_t uxHighestPriorityWaitingTask);
void vTaskEnterCritical(void);
void vTaskExitCritical(void);
void vTaskList(char *pcWriteBuffer);
TickType_t uxTaskResetEventItemValue(void);
TaskHandle_t pvTaskIncrementMutexHeldCount(void);
BaseType_t xTaskGenericNotifyFromISR(TaskHandle_t xTaskToNotify,uint32_t ulValue,eNotifyAction eAction,uint32_t *pulPreviousNotificationValue,BaseType_t *pxHigherPriorityTaskWoken);
void vTaskNotifyGiveFromISR(TaskHandle_t xTaskToNotify,BaseType_t *pxHigherPriorityTaskWoken);
BaseType_t xTaskNotifyStateClear(TaskHandle_t xTask);
void prvCheckForValidListAndQueue(void);
BaseType_t prvInsertTimerInActiveList(Timer_t *pxTimer,TickType_t xNextExpiryTime,TickType_t xTimeNow,TickType_t xCommandTime);
BaseType_t xTimerCreateTimerTask(void);
TimerHandle_t xTimerCreate(char *pcTimerName,TickType_t xTimerPeriodInTicks,UBaseType_t uxAutoReload,void *pvTimerID,TimerCallbackFunction_t *pxCallbackFunction);
TimerHandle_t xTimerCreateStatic(char *pcTimerName,TickType_t xTimerPeriodInTicks,UBaseType_t uxAutoReload,void *pvTimerID,TimerCallbackFunction_t *pxCallbackFunction,StaticTimer_t *pxTimerBuffer);
BaseType_t xTimerGenericCommand(TimerHandle_t xTimer,BaseType_t xCommandID,TickType_t xOptionalValue,BaseType_t *pxHigherPriorityTaskWoken,TickType_t xTicksToWait);
void prvSwitchTimerLists(void);
void prvTimerTask(void *pvParameters);
void * pvTimerGetTimerID(TimerHandle_t xTimer);
void vPortSetupTimerInterrupt(void);
void pxPortInitialiseStack(int param_1,undefined4 param_2,undefined4 param_3);
void prvInsertBlockIntoFreeList(BlockLink_t *pxBlockToInsert);
void * pvPortMalloc(size_t xWantedSize);
void vPortFree(void *pv);
size_t xPortGetFreeHeapSize(void);
void vPortDefineHeapRegions(HeapRegion_t *pxHeapRegions);
void uart_generic_notify_handler(uint8_t id);
void UART0_IRQHandler(void);
void UART1_IRQHandler(void);
int bl_uart_init(uint8_t id,uint8_t tx_pin,uint8_t rx_pin,uint8_t cts_pin,uint8_t rts_pin,uint32_t baudrate);
int bl_uart_data_send(uint8_t id,uint8_t data);
int bl_uart_data_recv(uint8_t id);
int bl_uart_int_rx_enable(uint8_t id);
int bl_uart_int_rx_disable(uint8_t id);
int bl_uart_int_tx_enable(uint8_t id);
int bl_uart_int_tx_disable(uint8_t id);
int bl_uart_flush(uint8_t id);
void bl_uart_getdefconfig(uint8_t id,uint8_t *parity);
void bl_uart_setconfig(uint8_t id,uint32_t baudrate,UART_Parity_Type parity);
void bl_uart_setbaud(uint8_t id,uint32_t baud);
int bl_uart_int_enable(uint8_t id);
int bl_uart_int_disable(uint8_t id);
int bl_uart_int_rx_notify_register(uint8_t id,cb_uart_notify_t *cb,void *arg);
int bl_uart_int_tx_notify_register(uint8_t id,cb_uart_notify_t *cb,void *arg);
int bl_chip_info(char *info);
int bl_chip_banner(char **banner);
int bl_chip_memory_ram(int *num,uint *addr,uint *size,char (*desc) [6]);
int bl_sys_reset_por(void);
void bl_sys_reset_system(void);
int bl_sys_isxipaddr(uint32_t addr);
int bl_sys_em_config(void);
int bl_sys_init(void);
void bl_dma_int_process(void);
int bl_dma_int_clear(int ch);
void bl_dma_IRQHandler(void);
int bl_dma_irq_register(int channel,void *tc_handler,void *interr_handler,void *ctx);
void bl_dma_init(void);
void _irq_num_check(int irqnum);
void bl_irq_enable(uint source);
void bl_irq_disable(uint source);
void bl_irq_pending_clear(uint source);
void bl_irq_register_with_ctx(int irqnum,void *handler,void *ctx);
void bl_irq_ctx_get(int irqnum,void **ctx);
void bl_irq_register(int irqnum,void *handler);
void bl_irq_unregister(int irqnum,void *handler);
void interrupt_entry(uint32_t mcause);
void exception_entry(uint32_t mcause,uint32_t mepc,uint32_t mtval,uintptr_t *regs);
void bl_irq_init(void);
void _trng_trigger(void);
void wait_trng4feed(void);
void sec_trng_IRQHandler(uint param_1,int param_2);
uint32_t bl_sec_get_random_word(void);
void bl_rand_stream(uint8_t *buf,int len);
int bl_rand(void);
int bl_sec_init(void);
int bl_sec_test(void);
int bl_efuse_read_mac(uint8_t *mac);
int bl_efuse_read_mac_factory(uint8_t *mac);
int bl_efuse_read_capcode(uint8_t *capcode);
int bl_efuse_read_pwroft(int8_t *poweroffset);
int bl_wifi_clock_enable(void);
int bl_wifi_enable_irq(void);
int bl_wifi_sta_mac_addr_set(uint8_t *mac);
int bl_wifi_ap_mac_addr_set(uint8_t *mac);
int bl_wifi_mac_addr_get(uint8_t *mac);
int bl_wifi_country_code_set(uint8_t country_code);
int bl_wifi_ap_info_set(uint8_t *ssid,uint8_t ssid_len,uint8_t *psk,uint8_t psk_len,uint8_t chan);
int bl_wifi_sta_info_set(uint8_t *ssid,uint8_t ssid_len,uint8_t *psk,uint8_t psk_len,int autoconnect);
uint32_t fdt32_to_cpu(fdt32_t x);
int dev_uart_init(uint8_t id,char *path,uint32_t rx_buf_size,uint32_t tx_buf_size);
int32_t hal_uart_send_trigger(uart_dev_t *uart);
int32_t hal_uart_send_trigger_off(uart_dev_t *uart);
int32_t hal_uart_init(uart_dev_t *uart);
int32_t hal_uart_recv_II(uart_dev_t *uart,void *data,uint32_t expect_size,uint32_t *recv_size,uint32_t timeout);
int32_t hal_uart_send(uart_dev_t *uart,void *data,uint32_t size,uint32_t timeout);
int32_t hal_uart_finalize(uart_dev_t *uart);
int32_t hal_uart_notify_register(uart_dev_t *uart,hal_uart_int_t type,anon_subr_void_void_ptr *cb);
undefined4 vfs_uart_init(void *param_1,int param_2);
int32_t hal_uart_send_flush(uart_dev_t *uart,uint32_t timeout);
void hal_uart_setbaud(uart_dev_t *uart,uint32_t baud);
void hal_uart_setconfig(uart_dev_t *uart,uint32_t baud,hal_uart_parity_t parity);
undefined4 hal_gpio_init_from_dts(void *param_1,int param_2);
int hal_reboot(void);
void hal_sys_reset(void);
void hal_poweroff(void);
void hal_sys_capcode_update(uint8_t capin,uint8_t capout);
uint8_t hal_sys_capcode_get(void);
uint32_t fdt32_to_cpu(fdt32_t x);
uint32_t hal_board_get_factory_addr(void);
undefined4 hal_board_cfg(void);
void bl_tsen_adc_get(void);
int hal_wifi_start_firmware_task(void);
int bl_gpio_enable_output(uint8_t pin,uint8_t pullup,uint8_t pulldown);
int bl_gpio_output_set(uint8_t pin,uint8_t value);
void proc_entry_looprt(void *pvParameters);
void looprt_evt_notify_async(uint task,uint32_t evt_map);
void looprt_evt_status_dump(void);
int looprt_start(StackType_t *proc_stack_looprt,int stack_count,StaticTask_t *proc_task_looprt);
int looprt_handler_register(loop_evt_handler *handler,int priority);
int looprt_timer_register(loop_timer *timer);
void _cb_led_trigger(loop_ctx *loop,loop_timer *timer,void *arg);
int _led_bloop_msg(loop_ctx *loop,loop_evt_handler *handler,loop_msg *msg);
int _led_bloop_evt(loop_ctx *loop,loop_evt_handler *handler,uint32_t *bitmap_evt,uint32_t *evt_type_map);
int loopset_led_hook_on_looprt(void);
void loopset_led_trigger(int pin,uint timeon_ms);
err_t netifapi_do_netif_add(tcpip_api_call_data *m);
err_t netifapi_do_netif_set_addr(tcpip_api_call_data *m);
err_t netifapi_do_netif_common(tcpip_api_call_data *m);
err_t netifapi_netif_add(netif *netif,ip4_addr_t *ipaddr,ip4_addr_t *netmask,ip4_addr_t *gw,void *state,netif_init_fn init,netif_input_fn *input);
err_t netifapi_netif_set_addr(netif *netif,ip4_addr_t *ipaddr,ip4_addr_t *netmask,ip4_addr_t *gw);
err_t netifapi_netif_common(netif *netif,netifapi_void_fn voidfunc,netifapi_errt_fn errtfunc);
void tcpip_thread(void *arg);
err_t tcpip_inpkt(pbuf *p,netif *inp,netif_input_fn *input_fn);
err_t tcpip_input(pbuf *p,netif *inp);
err_t tcpip_try_callback(tcpip_callback_fn function,void *ctx);
err_t tcpip_api_call(tcpip_api_call_fn *fn,tcpip_api_call_data *call);
void tcpip_init(tcpip_init_done_fn initfunc,void *arg);
u16_t lwip_htons(u16_t n);
u32_t lwip_htonl(u32_t n);
void dns_call_found(u8_t idx,ip_addr_t *addr);
err_t dns_send(u8_t idx);
void dns_check_entry(u8_t i);
void dns_recv(void *arg,udp_pcb *pcb,pbuf *p,ip_addr_t *addr,u16_t port);
void dns_init(void);
void dns_setserver(u8_t numdns,ip_addr_t *dnsserver);
ip_addr_t * dns_getserver(u8_t numdns);
void dns_tmr(void);
void lwip_init(void);
void dhcp_set_state(dhcp *dhcp,u8_t new_state);
u16_t dhcp_option_short(u16_t options_out_len,u8_t *options,u16_t value);
u16_t dhcp_option_long(u16_t options_out_len,u8_t *options,u32_t value);
pbuf * dhcp_create_msg(netif *netif,dhcp *dhcp,u8_t message_type,u16_t *options_out_len);
void dhcp_option_trailer(u16_t options_out_len,u8_t *options,pbuf *p_out);
err_t dhcp_discover(netif *netif);
void dhcp_check(netif *netif);
void dhcp_bind(netif *netif);
err_t dhcp_inc_pcb_refcount(void);
u16_t dhcp_option_hostname(u16_t options_out_len,u8_t *options);
err_t dhcp_reboot(netif *netif);
err_t dhcp_select(netif *netif);
void dhcp_dec_pcb_refcount(void);
void dhcp_handle_ack(dhcp_msg *msg_in);
void dhcp_recv(void *arg,udp_pcb *pcb,pbuf *p,ip_addr_t *addr,u16_t port);
void dhcp_network_changed(netif *netif);
void dhcp_arp_reply(netif *netif,ip4_addr_t *addr);
err_t dhcp_renew(netif *netif);
u8_t dhcp_supplied_address(netif *netif);
void dhcp_release_and_stop(netif *netif);
err_t dhcp_start(netif *netif);
void dhcp_coarse_tmr(void);
void dhcp_fine_tmr(void);
void dhcp_stop(netif *netif);
void etharp_free_entry(int i);
s16_t etharp_find_entry(ip4_addr_t *ipaddr,u8_t flags,netif *netif);
err_t etharp_raw(netif *netif,eth_addr *ethsrc_addr,eth_addr *ethdst_addr,eth_addr *hwsrc_addr,ip4_addr_t *ipsrc_addr,eth_addr *hwdst_addr,ip4_addr_t *ipdst_addr,u16_t opcode);
void etharp_cleanup_netif(netif *netif);
void etharp_input(pbuf *p,netif *netif);
err_t etharp_request(netif *netif,ip4_addr_t *ipaddr);
void etharp_tmr(void);
err_t etharp_output_to_arp_index(netif *netif,pbuf *q,netif_addr_idx_t arp_idx);
err_t etharp_query(netif *netif,ip4_addr_t *ipaddr,pbuf *q);
err_t etharp_output(netif *netif,pbuf *q,ip4_addr_t *ipaddr);
void igmp_send(netif *netif,igmp_group *group,u8_t type);
void igmp_delaying_member(igmp_group *group,u8_t maxresp);
void igmp_init(void);
err_t igmp_stop(netif *netif);
void igmp_report_groups(netif *netif);
igmp_group * igmp_lookfor_group(netif *ifp,ip4_addr_t *addr);
igmp_group * igmp_lookup_group(netif *ifp,ip4_addr_t *addr);
err_t igmp_start(netif *netif);
void igmp_input(pbuf *p,netif *inp,ip4_addr_t *dest);
void igmp_tmr(void);
int ip4_input_accept(netif *netif);
netif * ip4_route(ip4_addr_t *dest);
err_t ip4_input(pbuf *p,netif *inp);
err_t ip4_output_if_opt_src(pbuf *p,ip4_addr_t *src,ip4_addr_t *dest,u8_t ttl,u8_t tos,u8_t proto,netif *netif,void *ip_options,u16_t optlen);
err_t ip4_output_if_opt(pbuf *p,ip4_addr_t *src,ip4_addr_t *dest,u8_t ttl,u8_t tos,u8_t proto,netif *netif,void *ip_options,u16_t optlen);
err_t ip4_output_if(pbuf *p,ip4_addr_t *src,ip4_addr_t *dest,u8_t ttl,u8_t tos,u8_t proto,netif *netif);
err_t ip4_output_if_src(pbuf *p,ip4_addr_t *src,ip4_addr_t *dest,u8_t ttl,u8_t tos,u8_t proto,netif *netif);
u8_t ip4_addr_isbroadcast_u32(u32_t addr,netif *netif);
int ip4addr_aton(char *cp,ip4_addr_t *addr);
u32_t ipaddr_addr(char *cp);
char * ip4addr_ntoa_r(ip4_addr_t *addr,char *buf,int buflen);
char * ip4addr_ntoa(ip4_addr_t *addr);
void mem_init(void);
void mem_free(uint param_1);
mem * mem_trim(mem *param_1,uint param_2);
mem_size_t * mem_malloc(uint param_1);
void * do_memp_malloc_pool(memp_desc *desc);
void memp_init_pool(memp_desc *desc);
void memp_init(void);
void * memp_malloc(memp_t type);
void memp_free(memp_t type,void *mem);
err_t netif_null_output_ip4(netif *netif,pbuf *p,ip4_addr_t *ipaddr);
void netif_issue_reports(netif *netif,u8_t report_type);
int netif_do_set_ipaddr(netif *netif,ip4_addr_t *ipaddr,ip_addr_t *old_addr);
void netif_init(void);
void netif_set_ipaddr(netif *netif,ip4_addr_t *ipaddr);
void netif_set_netmask(netif *netif,ip4_addr_t *netmask);
void netif_set_gw(netif *netif,ip4_addr_t *gw);
void netif_set_addr(netif *netif,ip4_addr_t *ipaddr,ip4_addr_t *netmask,ip4_addr_t *gw);
netif * netif_add(netif *netif,ip4_addr_t *ipaddr,ip4_addr_t *netmask,ip4_addr_t *gw,void *state,netif_init_fn.conflict *init,netif_input_fn *input);
void netif_set_default(netif *netif);
void netif_set_up(netif *netif);
void netif_set_down(netif *netif);
void netif_remove(netif *netif);
void netif_set_status_callback(netif *netif,netif_status_callback_fn *status_callback);
void netif_set_link_up(netif *netif);
void netif_set_link_down(netif *netif);
netif * netif_get_by_index(u8_t idx);
pbuf * pbuf_skip_const(pbuf *in,u16_t in_offset,u16_t *out_offset);
void pbuf_free_ooseq_callback(void *arg);
u8_t pbuf_add_header_impl(pbuf *p,size_t header_size_increment,u8_t force);
pbuf * pbuf_alloc_reference(void *payload,u16_t length,pbuf_type type);
pbuf * pbuf_alloced_custom(pbuf_layer l,u16_t length,pbuf_type type,pbuf_custom *p,void *payload_mem,u16_t payload_mem_len);
u8_t pbuf_add_header(pbuf *p,size_t header_size_increment);
u8_t pbuf_remove_header(pbuf *p,size_t header_size_decrement);
u8_t pbuf_header(pbuf *p,s16_t header_size_increment);
u8_t pbuf_header_force(pbuf *p,s16_t header_size_increment);
u8_t pbuf_free(pbuf *p);
pbuf * pbuf_alloc(pbuf_layer layer,u16_t length,pbuf_type type);
void pbuf_realloc(pbuf *p,u16_t new_len);
u16_t pbuf_clen(pbuf *p);
void pbuf_ref(pbuf *p);
void pbuf_cat(pbuf *h,pbuf *t);
void pbuf_chain(pbuf *h,pbuf *t);
err_t pbuf_copy(pbuf *p_to,pbuf *p_from);
u16_t pbuf_copy_partial(pbuf *buf,void *dataptr,u16_t len,u16_t offset);
err_t pbuf_take(pbuf *buf,void *dataptr,u16_t len);
err_t pbuf_take_at(pbuf *buf,void *dataptr,u16_t len,u16_t offset);
pbuf * pbuf_clone(pbuf_layer layer,pbuf_type type,pbuf *p);
int pbuf_try_get_at(pbuf *p,u16_t offset);
void pbuf_put_at(pbuf *p,u16_t offset,u8_t data);
raw_input_state_t raw_input(pbuf *p,netif *inp);
void raw_netif_ip_addr_changed(ip_addr_t *old_addr,ip_addr_t *new_addr);
void stats_init(void);
err_t tcp_close_shutdown_fin(tcp_pcb *pcb);
void tcp_init(void);
void tcp_free(tcp_pcb *pcb);
u32_t tcp_update_rcv_ann_wnd(tcp_pcb *pcb);
void tcp_recved(tcp_pcb *pcb,u16_t len);
void tcp_seg_free(tcp_seg *seg);
void tcp_segs_free(tcp_seg *seg);
tcp_seg * tcp_seg_copy(tcp_seg *seg);
u32_t tcp_next_iss(tcp_pcb *pcb);
u16_t tcp_eff_send_mss_netif(u16_t sendmss,netif *outif,ip_addr_t *dest);
void tcp_free_ooseq(tcp_pcb *pcb);
void tcp_pcb_purge(tcp_pcb *pcb);
void tcp_pcb_remove(tcp_pcb **pcblist,tcp_pcb *pcb);
void tcp_abandon(tcp_pcb *pcb,int reset);
void tcp_abort(tcp_pcb *pcb);
void tcp_netif_ip_addr_changed_pcblist(tcp_pcb *pcb_list);
void tcp_netif_ip_addr_changed(ip_addr_t *old_addr,ip_addr_t *new_addr);
void tcp_kill_state(tcp_state state);
tcp_pcb * tcp_alloc(u8_t prio);
err_t tcp_close_shutdown(tcp_pcb *pcb,u8_t rst_on_unacked_data);
err_t tcp_close(tcp_pcb *pcb);
err_t tcp_recv_null(void *arg,tcp_pcb *pcb,pbuf *p,err_t err);
err_t tcp_process_refused_data(tcp_pcb *pcb);
void tcp_fasttmr(void);
void tcp_slowtmr(void);
void tcp_tmr(void);
u8_t tcp_get_next_optbyte(void);
void tcp_oos_insert_segment(tcp_seg *cseg,tcp_seg *next);
void tcp_parseopt(undefined2 *param_1);
int tcp_input_delayed_close(tcp_pcb *pcb);
tcp_seg * tcp_free_acked_segments(tcp_seg *seg_list);
void tcp_receive(tcp_pcb *pcb);
void tcp_input(pbuf *p,netif *inp);
void tcp_trigger_input_pcb_close(void);
void tcp_seg_add_chksum(u16_t chksum,u16_t len,u16_t *seg_chksum,u8_t *seg_chksum_swapped);
tcp_seg * tcp_create_segment(tcp_pcb *pcb,pbuf *p,u8_t hdrflags,u32_t seqno,u8_t optflags);
pbuf * tcp_output_alloc_header_common(u32_t ackno,u16_t datalen,u32_t seqno_be,u16_t src_port,u16_t dst_port,u8_t flags,u16_t wnd);
pbuf * tcp_output_alloc_header(tcp_pcb *pcb,u16_t datalen,u32_t seqno_be);
err_t tcp_output_control_segment(tcp_pcb *pcb,pbuf *p,ip_addr_t *src,ip_addr_t *dst);
err_t tcp_split_unsent_seg(tcp_pcb *pcb,u16_t split);
err_t tcp_enqueue_flags(tcp_pcb *pcb,u8_t flags);
err_t tcp_send_fin(tcp_pcb *pcb);
err_t tcp_rexmit_rto_prepare(tcp_pcb *pcb);
err_t tcp_rexmit(tcp_pcb *pcb);
void tcp_rexmit_fast(tcp_pcb *pcb);
void tcp_rst(tcp_pcb *pcb,u32_t seqno,u32_t ackno,ip_addr_t *param_4,ip_addr_t *remote_ip,u16_t param_6,u16_t remote_port);
err_t tcp_send_empty_ack(tcp_pcb *pcb);
err_t tcp_output(tcp_pcb *pcb);
void tcp_rexmit_rto_commit(tcp_pcb *pcb);
void tcp_rexmit_rto(tcp_pcb *pcb);
err_t tcp_keepalive(tcp_pcb *pcb);
err_t tcp_zero_window_probe(tcp_pcb *pcb);
void sys_timeout_abs(u32_t abs_time,sys_timeout_handler *handler,void *arg);
void lwip_cyclic_timer(void *arg);
void sys_timeout(u32_t msecs,sys_timeout_handler *handler,void *arg);
void tcp_timer_needed(void);
void tcpip_tcp_timer(void *arg);
void sys_timeouts_init(void);
void sys_check_timeouts(void);
u32_t sys_timeouts_sleeptime(void);
void udp_init(void);
void udp_input(pbuf *p,netif *inp);
err_t udp_bind(udp_pcb *pcb,ip_addr_t *ipaddr,u16_t port);
err_t udp_sendto_if_src_chksum(udp_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,u16_t dst_port,netif *netif,u8_t have_chksum,u16_t chksum,ip_addr_t *src_ip);
err_t udp_sendto_if_chksum(udp_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,u16_t dst_port,netif *netif,u8_t have_chksum,u16_t chksum);
err_t udp_sendto_chksum(udp_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,u16_t dst_port,u8_t have_chksum,u16_t chksum);
err_t udp_sendto(udp_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,u16_t dst_port);
err_t udp_sendto_if(udp_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,u16_t dst_port,netif *netif);
err_t udp_sendto_if_src(udp_pcb *pcb,pbuf *p,ip_addr_t *dst_ip,u16_t dst_port,netif *netif,ip_addr_t *src_ip);
err_t udp_connect(udp_pcb *pcb,ip_addr_t *ipaddr,u16_t port);
void udp_recv(udp_pcb *pcb,udp_recv_fn *recv,void *recv_arg);
void udp_remove(udp_pcb *pcb);
udp_pcb * udp_new(void);
udp_pcb * udp_new_ip_type(void);
void udp_netif_ip_addr_changed(ip_addr_t *old_addr,ip_addr_t *new_addr);
err_t ethernet_input(pbuf *p,netif *netif);
err_t ethernet_output(netif *netif,pbuf *p,eth_addr *src,eth_addr *dst,u16_t eth_type);
err_t sys_mbox_new(sys_mbox_t *mbox,int size);
void sys_mbox_post(sys_mbox_t *mbox,void *data);
err_t sys_mbox_trypost(sys_mbox_t *mbox,void *msg);
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox,void **msg,u32_t timeout);
uint sys_mbox_valid(int *param_1);
err_t sys_sem_new(sys_sem_t *sem,u8_t count);
u32_t sys_arch_sem_wait(sys_sem_t *sem,u32_t timeout);
void sys_sem_free(sys_sem_t *sem);
void sys_init(void);
err_t sys_mutex_new(sys_mutex_t *mutex);
void sys_mutex_lock(sys_mutex_t *mutex);
void sys_mutex_unlock(sys_mutex_t *mutex);
void sys_sem_signal(sys_mutex_t *mutex);
sys_thread_t sys_thread_new(char *name,lwip_thread_fn *thread,void *arg,int stacksize,int prio);
sys_prot_t sys_arch_protect(void);
void sys_arch_unprotect(void);
TickType_t sys_now(void);
u16_t lwip_standard_chksum(void *dataptr,int len);
u16_t inet_chksum_pseudo(pbuf *p,u8_t proto,u16_t proto_len,ip4_addr_t *src,ip4_addr_t *dest);
u16_t ip_chksum_pseudo(pbuf *p,u8_t proto,u16_t proto_len,ip4_addr_t *src,ip4_addr_t *dest);
u16_t inet_chksum_pseudo_partial(pbuf *p,u8_t proto,u16_t proto_len,u16_t chksum_len,ip4_addr_t *src,ip4_addr_t *dest);
u16_t ip_chksum_pseudo_partial(pbuf *p,u8_t proto,u16_t proto_len,u16_t chksum_len,ip4_addr_t *src,ip4_addr_t *dest);
u16_t inet_chksum(void *dataptr,u16_t len);
u16_t inet_chksum_pbuf(pbuf *p);
void icmp_input(pbuf *p,netif *inp);
void icmp_dest_unreach(pbuf *p,icmp_dur_type t);
u8_t * dhcp_server_option_find(u8_t *buf,u16_t len,u8_t option);
dhcp_client_node * dhcp_client_find_by_ip(uint8_t *ip);
void dhcp_server_recv(void *arg,udp_pcb *pcb,pbuf *p,ip_addr_t *recv_addr,u16_t port);
err_t dhcp_server_start(netif *netif,ip4_addr_t *start,ip4_addr_t *end);
err_t dhcp_server_stop(netif *netif);
void dhcpd_start(netif *netif);
int dirent_type(void *addr);
uint32_t dirent_hardfh(void *addr);
uint32_t dirent_childaddr(void *addr);
uint32_t dirent_size(void *addr);
int romfs_close(file_t *fp);
int romfs_ioctl(file_t *fp,int cmd,ulong arg);
ssize_t romfs_read(file_t *fp,char *buf,size_t length);
undefined4 file_info(char *param_1,char **param_2,char **param_3);
int romfs_closedir(file_t *fp,aos_dir_t *dir);
off_t romfs_lseek(file_t *fp,off_t off,int whence);
aos_dirent_t * romfs_readdir(file_t *fp,aos_dir_t *dir);
uint32_t dirent_file(char *path,void **p_addr_start_input,void **p_addr_end_input);
aos_dir_t * romfs_opendir(file_t *fp,char *path);
int romfs_stat(file_t *fp,char *path,stat *st);
int romfs_open(file_t *fp,char *path,int flags);
int romfs_register(void);
char * utils_bin2hex(char *dst,void *src,size_t count);
int utils_dns_domain_get(uint8_t *records,uint8_t *buf,int *len);
void utils_list_init(utils_list *list);
void utils_list_push_back(utils_list *list,utils_list_hdr *list_hdr);
utils_list_hdr * utils_list_pop_front(utils_list *list);
void utils_hexdump(void *mem,uint len);
int utils_getopt_init(getopt_env_t *env,int opterr);
int utils_getopt(getopt_env_t *env,int argc,char **argv,char *optstring);
int params_filter(uint32_t *r);
void get_bytearray_from_string(char **params,uint8_t *result,int array_size);
void get_uint8_from_string(char **params,uint8_t *result);
void get_uint16_from_string(char **params,uint16_t *result);
int utils_tlv_bl_pack_auto(uint32_t *buf,int buf_sz,uint16_t type,void *arg1);
int utils_tlv_bl_unpack_auto(uint32_t *buf,int buf_sz,uint16_t type,void *arg1);
int aos_register_driver(char *path,file_ops_t *ops,void *arg);
int aos_register_fs(char *path,fs_ops_t *ops,void *arg);
int vfs_uart_open(inode_t *inode,file_t *fp);
void __uart_rx_irq(void *p_arg);
void __uart_tx_irq(void *p_arg);
int vfs_uart_close(file_t *fp);
ssize_t vfs_uart_read(file_t *fp,void *buf,size_t nbytes);
ssize_t vfs_uart_write(file_t *fp,void *buf,size_t nbytes);
int vfs_uart_poll(file_t *fp,_Bool setup,poll_notify_t *notify,pollfd *fd,void *opa);
int vfs_uart_sync(file_t *fp);
int uart_ioctl_cmd_waimode(uart_dev_t *uart_dev,int cmd,ulong arg);
int uart_ioctl_cmd_setconfig(uart_dev_t *uart_dev,ulong arg);
int vfs_uart_ioctl(file_t *fp,int cmd,ulong arg);
BL_Err_Type UART_Init(UART_ID_Type uartId,UART_CFG_Type *uartCfg);
BL_Err_Type UART_FifoConfig(UART_ID_Type uartId,UART_FifoCfg_Type *fifoCfg);
BL_Err_Type UART_Enable(UART_ID_Type uartId,UART_Direction_Type direct);
BL_Err_Type UART_Disable(UART_ID_Type uartId,UART_Direction_Type direct);
BL_Err_Type UART_SetRxTimeoutValue(UART_ID_Type uartId,uint8_t time);
BL_Err_Type UART_TxFreeRun(UART_ID_Type uartId,BL_Fun_Type txFreeRun);
BL_Err_Type UART_IntMask(UART_ID_Type uartId,UART_INT_Type intType,BL_Mask_Type intMask);
uint8_t UART_GetTxFifoCount(UART_ID_Type uartId);
BL_Err_Type UART_SendData(UART_ID_Type uartId,uint8_t *data,uint32_t len);
uint8_t UART_GetRxFifoCount(UART_ID_Type uartId);
void ADC_Reset(void);
void ADC_Enable(void);
void ADC_Disable(void);
void ADC_Channel_Config(ADC_Chan_Type posCh,ADC_Chan_Type negCh,BL_Fun_Type contEn);
void ADC_Start(void);
void ADC_FIFO_Cfg(ADC_FIFO_Cfg_Type *fifoCfg);
uint8_t ADC_Get_FIFO_Count(void);
void ADC_Parse_Result(uint32_t *orgVal,uint32_t len,ADC_Result_Type *result);
void ADC_Tsen_Init(ADC_TSEN_MOD_Type tsenMod);
void ADC_SET_TSVBE_LOW(void);
void ADC_SET_TSVBE_HIGH(void);
uint32_t TSEN_Get_V_Error(void);
float TSEN_Get_Temp(uint32_t tsen_offset);
void ADC_Init(ADC_CFG_Type *cfg);
BL_Err_Type Sec_Eng_SHA256_Update(SEC_Eng_SHA256_Ctx *shaCtx,uint8_t *input,uint32_t len);
void Sec_Eng_SHA256_Init(SEC_Eng_SHA256_Ctx *shaCtx,SEC_ENG_SHA_ID_Type shaNo,SEC_ENG_SHA_Type shaType,uint32_t *shaTmpBuf,uint32_t *padding);
void Sec_Eng_SHA_Start(SEC_ENG_SHA_ID_Type shaNo);
BL_Err_Type Sec_Eng_SHA256_Update(SEC_Eng_SHA256_Ctx *shaCtx,SEC_ENG_SHA_ID_Type shaNo,uint8_t *input,uint32_t len);
BL_Err_Type Sec_Eng_SHA256_Finish(SEC_Eng_SHA256_Ctx *shaCtx,SEC_ENG_SHA_ID_Type shaNo,uint8_t *hash);
void DMA_Enable(void);
void DMA_Channel_Enable(uint8_t ch);
void DMA_LLI_Init(uint8_t ch,DMA_LLI_Cfg_Type *lliCfg);
void DMA_LLI_Update(uint8_t ch,uint32_t LLI);
void DMA_IntMask(uint8_t ch,DMA_INT_Type intType,BL_Mask_Type intMask);
void Default_Handler(void);
BL_Err_Type GLB_Set_UART_CLK(uint8_t enable,HBN_UART_CLK_Type clkSel,uint8_t div);
BL_Err_Type GLB_Set_EM_Sel(GLB_EM_Type emType);
BL_Err_Type GLB_Set_ADC_CLK(uint8_t enable,GLB_ADC_CLK_Type clkSel,uint8_t div);
BL_Err_Type GLB_UART_Fun_Sel(GLB_UART_SIG_Type sig,GLB_UART_SIG_FUN_Type fun);
BL_Err_Type GLB_GPIO_Write(GLB_GPIO_Type gpioPin,uint32_t val);
BL_Err_Type HBN_Set_UART_CLK_Sel(HBN_UART_CLK_Type clkSel);
BL_Err_Type HBN_Get_RTC_Timer_Val(uint32_t *valLow,uint32_t *valHigh);
BL_Err_Type HBN_Aon_Pad_IeSmt_Cfg(uint8_t padCfg);
uint32_t EF_Ctrl_Get_Byte_Zero_Cnt(uint8_t val);
BL_Err_Type EF_Ctrl_Read_MAC_Address(uint8_t *mac);
uint8_t EF_Ctrl_Is_MAC_Address_Slot_Empty(uint8_t slot,uint8_t reload);
BL_Err_Type EF_Ctrl_Read_MAC_Address_Opt(uint8_t slot,uint8_t *mac,uint8_t reload);
uint EF_Ctrl_Is_CapCode_Slot_Empty(int param_1,int param_2);
BL_Err_Type EF_Ctrl_Read_CapCode_Opt(uint8_t slot,uint8_t *code,uint8_t reload);
uint8_t EF_Ctrl_Is_PowerOffset_Slot_Empty(uint8_t slot,uint8_t reload);
BL_Err_Type EF_Ctrl_Read_PowerOffset_Opt(uint8_t slot,int8_t *pwrOffset,uint8_t reload);
int8_t mfg_media_read_xtal_capcode(uint8_t *capcode,uint8_t reload);
int8_t mfg_media_read_poweroffset(int8_t *pwrOffset,uint8_t reload);
int8_t mfg_media_read_macaddr(uint8_t *mac,uint8_t reload);
void bflb_platform_usart_dbg_send(uint8_t *data,uint32_t len);
void bflb_platform_printf(char *fmt,...);
void Default_Handler_Stub(void);
int8_t mfg_efuse_read_xtal_capcode(uint8_t *capcode,uint8_t reload);
int8_t mfg_efuse_read_poweroffset(int8_t *pwrOffset,uint8_t reload);
int8_t mfg_efuse_read_macaddr(uint8_t *mac,uint8_t reload);
int8_t mfg_flash_read_xtal_capcode(uint8_t *capcode,uint8_t reload);
int8_t mfg_flash_read_poweroffset(int8_t *pwrOffset,uint8_t reload);
int8_t mfg_flash_read_macaddr(uint8_t *mac,uint8_t reload);
void hal_mib_dump(void);
int mm_monitor_channel_req_handler(ke_msg_id_t msgid,mm_monitor_channel_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_monitor_enable_req_handler(ke_msg_id_t msgid,mm_monitor_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_cfg_rssi_req_handler(ke_msg_id_t msgid,mm_cfg_rssi_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_set_ps_options_req_handler(ke_msg_id_t msgid,mm_set_ps_options_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_tim_update_req_handler(ke_msg_id_t msgid,mm_tim_update_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_bcn_change_req_handler(ke_msg_id_t msgid,mm_bcn_change_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_remain_on_channel_req_handler(ke_msg_id_t msgid,mm_remain_on_channel_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_sta_del_req_handler(ke_msg_id_t msgid,mm_sta_del_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_sta_add_req_handler(ke_msg_id_t msgid,mm_sta_add_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_key_del_req_handler(ke_msg_id_t msgid,mm_key_del_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_key_add_req_handler(ke_msg_id_t msgid,mm_key_add_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_set_power_req_handler(ke_msg_id_t msgid,mm_set_power_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_set_idle_req_handler(ke_msg_id_t msgid,mm_set_idle_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_version_req_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_start_req_handler(ke_msg_id_t msgid,mm_start_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_set_ps_mode_req_handler(ke_msg_id_t msgid,mm_set_ps_mode_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_force_idle_req_handler(ke_msg_id_t msgid,mm_force_idle_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_hw_config_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int bl60x_edca_get(int ac,uint8_t *aifs,uint8_t *cwmin,uint8_t *cwmax,uint16_t *txop);
_Bool cmp_abs_time(co_list_hdr *timerA,co_list_hdr *timerB);
void mm_timer_init(void);
void mm_timer_set(mm_timer_tag *timer,uint32_t value);
void mm_timer_clear(mm_timer_tag *timer);
void mm_timer_schedule(int dummy);
void ps_uapsd_timer_handle(void *env);
void blmac_pwr_mgt_setf(uint8_t pwrmgt);
void ps_dpsm_update(_Bool pause);
uint8_t ps_send_pspoll(vif_info_tag *vif_entry);
void ps_init(void);
void ps_set_mode(uint8_t mode,ke_task_id_t taskid);
void ps_enable_cfm(void *env,uint32_t status);
void ps_disable_cfm(void *env,uint32_t status);
uint8_t ps_polling_frame(vif_info_tag *vif_entry);
void ps_check_beacon(int param_1,vif_info_tag *param_2);
void ps_check_frame(uint8_t *frame,uint32_t statinfo,vif_info_tag *vif_entry);
void ps_check_tx_frame(uint8_t staid,uint8_t tid);
void ps_uapsd_set(vif_info_tag *vif_entry,uint8_t hw_queue,_Bool uapsd);
void ps_traffic_status_update(uint8_t vif_index,uint8_t new_status);
void mm_ps_change_ind(uint8_t sta_idx,uint8_t ps_state);
void rxl_mpdu_transfer(rx_swdesc *swdesc);
void rxl_init(void);
void rxl_cntrl_dump(void);
void rxl_timer_int_handler(void);
void rxl_timeout_int_handler(void);
void rxl_dma_int_handler(void);
void rxl_dma_evt(int dummy);
void rxl_frame_release(rx_swdesc *swdesc);
void rxl_mpdu_free(rx_swdesc *swdesc);
void bl60x_firmwre_mpdu_free(void *swdesc_ptr);
void rxl_reset(void);
void rxl_hwdesc_dump(void);
void rxl_hwdesc_init(int init);
void rxl_hd_append(rx_dmadesc *desc);
void rxl_pd_append(rx_pbd *first,rx_pbd *last,rx_pbd *spare);
void sta_mgmt_entry_init(sta_info_tag *sta_entry);
void sta_mgmt_init(void);
uint8_t sta_mgmt_register(mm_sta_add_req *param,uint8_t *sta_idx);
void sta_mgmt_unregister(uint8_t sta_idx);
void sta_mgmt_add_key(mm_key_add_req *param,uint8_t hw_key_idx);
void sta_mgmt_del_key(sta_info_tag *sta);
int sta_mgmt_send_postponed_frame(vif_info_tag *p_vif_entry,sta_info_tag *p_sta_entry,int limit);
void td_timer_end(void *env);
void td_reset(uint8_t vif_index);
void td_init(void);
void td_start(uint8_t vif_index);
void td_pck_ind(uint8_t vif_index,uint8_t sta_index,_Bool rx);
void td_pck_ps_ind(uint8_t vif_index,_Bool rx);
void bl_tpc_update_power_table(int8_t *power_table);
void bl_tpc_power_table_get(int8_t *power_table_config);
void bl_tpc_update_power_rate_11b(int8_t *power_rate_table);
void bl_tpc_update_power_rate_11g(int8_t *power_rate_table);
void bl_tpc_update_power_rate_11n(int8_t *power_rate_table);
void tpc_update_tx_power(int8_t pwr);
void tpc_update_vif_tx_power(vif_info_tag *vif,int8_t *pwr,uint8_t *idx);
uint8_t tpc_get_vif_tx_power_vs_rate(uint32_t rate_config);
void tpc_update_frame_tx_power(vif_info_tag *vif,txl_frame_desc_tag *frame);
void txl_int_fake_transfer(txdesc *txdesc,uint8_t access_category);
void blmac_abs_timer_set(int reg_idx,uint32_t value);
void txl_machdr_format(uint32_t machdrptr);
void txl_cntrl_init(void);
_Bool txl_cntrl_tx_check(vif_info_tag *p_vif_entry);
void txl_cntrl_halt_ac(uint8_t access_category);
void txl_cntrl_flush_ac(uint8_t access_category,uint32_t status);
void txl_cntrl_inc_pck_cnt(void);
void txl_payload_handle(void);
void txl_payload_handle_backup(void);
void txl_transmit_trigger(void);
void txl_reset(void);
void txl_cntrl_env_dump(void);
void txl_frame_init_desc(txl_frame_desc_tag *frame,txl_buffer_tag *buffer,tx_hw_desc *hwdesc,txl_buffer_control *bufctrl);
void txl_frame_init(_Bool reset);
txl_frame_desc_tag * txl_frame_get(int type,int len);
_Bool txl_frame_push(txl_frame_desc_tag *frame,uint8_t ac);
_Bool txl_frame_push_force(txl_frame_desc_tag *frame,uint8_t ac);
void txl_frame_cfm(txdesc *txdesc);
void txl_frame_release(txdesc *txdesc,_Bool postponed);
uint8_t txl_frame_send_null_frame(uint8_t sta_idx,cfm_func_ptr *cfm,void *env);
uint8_t txl_frame_send_qosnull_frame(uint8_t sta_idx,uint16_t qos,cfm_func_ptr *cfm,void *env);
uint8_t txl_frame_send_eapol_frame(uint8_t sta_idx,cfm_func_ptr *cfm,void *cfm_env,uint8_t *pBuf,uint32_t pBuf_len);
void txl_frame_dump(void);
void txl_hwdesc_init(void);
void txl_hwdesc_reset(void);
void vif_mgmt_bcn_to_evt(void *env);
void vif_mgmt_init(void);
uint8_t vif_mgmt_register(mac_addr.conflict38 *mac_addr,uint8_t vif_type,_Bool p2p,uint8_t *vif_idx);
void vif_mgmt_unregister(uint8_t vif_idx);
void vif_mgmt_add_key(mm_key_add_req *param,uint8_t hw_key_idx);
void vif_mgmt_del_key(vif_info_tag *vif,uint8_t keyid);
void vif_mgmt_send_postponed_frame(vif_info_tag *p_vif_entry);
void vif_mgmt_reset(void);
void vif_mgmt_bcn_to_prog(vif_info_tag *p_vif_entry);
void vif_mgmt_bcn_recv(vif_info_tag *p_vif_entry);
void vif_mgmt_switch_channel(vif_info_tag *p_vif_entry);
vif_info_tag * vif_mgmt_get_first_ap_inf(void);
void me_init(void);
scan_chan_tag * me_freq_to_chan_ptr(uint8_t band,uint16_t freq);
void michael_block(mic_calc *mic_calc_ptr,uint32_t block);
void me_mic_init(mic_calc *mic_calc_ptr,uint32_t *mic_key_ptr,mac_addr.conflict51 *da,mac_addr.conflict51 *sa,uint8_t tid);
void me_mic_calc(mic_calc *mic_calc_ptr,uint32_t start_ptr,uint32_t data_len);
void me_mic_end(mic_calc *mic_calc_ptr);
uint8_t rxu_cntrl_machdr_len_get(uint16_t frame_cntl);
_Bool rxu_cntrl_protected_handle(uint8_t *frame,uint32_t statinfo);
undefined4 rxu_mgt_frame_check(rx_swdesc *param_1,uint param_2);
void rxu_cntrl_init(void);
void rxu_cntrl_monitor_pm(mac_addr.conflict *addr);
uint8_t rxu_cntrl_get_pm(void);
void rxu_cntrl_evt(int dummy);
void rxu_swdesc_upload_evt(int arg);
void scanu_confirm(uint8_t status);
void scanu_raw_send_cfm(uint8_t status,ke_task_id_t dst_id);
void scanu_init(void);
mac_scan_result * scanu_find_result(mac_addr.conflict *bssid_ptr,_Bool allocate);
undefined4 scanu_frame_handler(ushort *param_1);
mac_scan_result * scanu_search_by_bssid(mac_addr.conflict *bssid);
mac_scan_result * scanu_search_by_ssid(mac_ssid *ssid,int *idx);
void scanu_rm_exist_ssid(mac_ssid *ssid,int index);
void scanu_scan_next(void);
void scanu_dma_cb(void);
void scanu_start(void);
uint16_t txl_get_seq_ctrl(void);
void sm_delete_resources(vif_info_tag *vif);
void sm_frame_tx_cfm_handler(void *env,u32_l status);
void sm_init(void);
void sm_get_bss_params(mac_addr.conflict67 **bssid,scan_chan_tag **chan);
void sm_scan_bss(mac_addr.conflict67 *bssid,scan_chan_tag *chan_1);
void sm_join_bss(mac_addr.conflict67 *bssid,scan_chan_tag *chan,_Bool passive);
uint8_t sm_add_chan_ctx(uint8_t *p_chan_idx);
void sm_send_next_bss_param(void);
void sm_set_bss_param(void);
void sm_disconnect_process(vif_info_tag *vif,uint16_t reason);
void sm_deauth_cfm(void *env,u32_l status);
void sm_disconnect(uint8_t vif_index,uint16_t reason_code);
void sm_connect_ind(uint16_t status);
void sm_supplicant_deauth_cfm(void *env,u32_l status);
void sm_auth_send(uint16_t auth_seq,uint32_t *challenge);
void sm_assoc_req_send(void);
void sm_assoc_done(uint16_t aid);
void sm_auth_handler(rxu_mgt_ind *param);
void sm_assoc_rsp_handler(rxu_mgt_ind *param);
int sm_deauth_handler(rxu_mgt_ind *param);
void sm_handle_supplicant_result(uint8_t sta_id,uint16_t reason_code);
undefined2 * txu_cntrl_sec_hdr_append(int param_1,undefined2 *param_2,int param_3);
int txu_cntrl_sechdr_len_compute(txdesc *txdesc,int *tail_len);
void txu_cntrl_frame_build(txdesc *txdesc,uint32_t buf);
void txu_cntrl_tkip_mic_append(txdesc *txdesc,uint8_t ac);
void txu_cntrl_cfm(txdesc *txdesc);
void txu_cntrl_protect_mgmt_frame(txdesc *txdesc,uint32_t frame,uint16_t hdr_len);
int _aid_list_delete(uint8_t *mac);
void apm_sta_delete(u8_l sta_idx,uint8_t *mac);
void apm_tx_cfm_handler(uint8_t *param_1,int param_2);
void apm_init(void);
void apm_start_cfm(int param_1);
void apm_send_next_bss_param(void);
void apm_set_bss_param(void);
void apm_stop(vif_info_tag *vif);
_Bool apm_tx_int_ps_check(txdesc *txdesc);
void apm_tx_int_ps_postpone(txdesc *txdesc,sta_info_tag *sta);
txdesc * apm_tx_int_ps_get_postpone(vif_info_tag *vif,sta_info_tag *sta,int *stop);
void apm_tx_int_ps_clear(vif_info_tag *vif,u8_l sta_idx);
void apm_sta_fw_delete(u8_l sta_idx);
void apm_sta_add(u8_l sta_idx);
void apm_send_mlme(vif_info_tag *vif,uint16_t fctl,mac_addr.conflict75 *ra,cfm_func_ptr *cfm_func,void *env,uint16_t status_code);
_Bool apm_embedded_enabled(vif_info_tag *vif);
void apm_bcn_set(void);
void apm_probe_req_handler(ushort *param_1);
void apm_auth_handler(rxu_mgt_ind *param);
void apm_assoc_req_handler(ushort *param_1,int param_2);
void apm_deauth_handler(rxu_mgt_ind *param);
void apm_disassoc_handler(rxu_mgt_ind *param);
void apm_beacon_handler(rxu_mgt_ind *param);
void apm_sta_remove(u8_l vif_idx,u8_l sta_idx);
void co_list_init(co_list *list);
void co_list_push_back(co_list *list,co_list_hdr *list_hdr);
void co_list_push_front(co_list *list,co_list_hdr *list_hdr);
co_list_hdr * co_list_pop_front(co_list *list);
void co_list_extract(co_list *list,co_list_hdr *list_hdr);
uint32_t co_list_cnt(co_list *list);
void co_list_insert(co_list *list,co_list_hdr *element,anon_subr__Bool_co_list_hdr_ptr_co_list_hdr_ptr *cmp);
void co_list_insert_after(co_list *list,co_list_hdr *prev_element,co_list_hdr *element);
void co_list_remove(co_list *list,co_list_hdr *prev_element,co_list_hdr *element);
void bl_event_handle(int param);
void bl60x_fw_dump_statistic(int forced);
void ke_evt_schedule(void);
void ke_init(void);
void * ke_msg_alloc(ke_msg_id_t id,ke_task_id_t dest_id,ke_task_id_t src_id,uint16_t param_len);
void ke_msg_send(int param_1);
void ke_msg_send_basic(ke_msg_id_t id,ke_task_id_t dest_id,ke_task_id_t src_id);
void ke_msg_forward_and_change_id(void *param_ptr,ke_msg_id_t msg_id,ke_task_id_t dest_id,ke_task_id_t src_id);
_Bool cmp_dest_id(co_list_hdr *msg,u32_l dest_id);
_Bool ke_task_local(ke_task_id_t id);
ke_msg_func_t * ke_handler_search(ke_msg_id_t msg_id,ke_state_handler *state_handler);
ke_state_t ke_state_get(ke_task_id_t id);
int ke_msg_discard(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int ke_msg_save(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
_Bool cmp_abs_time(co_list_hdr *timerA,co_list_hdr *timerB);
_Bool cmp_timer_id(co_list_hdr *timer,uint32_t timer_task);
void ke_timer_set(ke_msg_id_t timer_id,ke_task_id_t task_id,uint32_t delay);
void ke_timer_clear(ke_msg_id_t timer_id,ke_task_id_t task_id);
void ke_timer_schedule(int dummy);
void bl60x_current_time_us(longlong *time_now);
byte * mac_ie_find(byte *param_1,int param_2,uint param_3);
char * mac_vsie_find(char *param_1,int param_2,int param_3,int param_4);
BufferDesc_t *GetTxEAPOLBuffer(cm_ConnectionInfo_t *connPtr,EAPOL_KeyMsg_Tx_t **ppTxEapol,BufferDesc_t *pBufDesc);
void UpdateEAPOLWcbLenAndTransmit(BufferDesc_t *pBufDesc,UINT16 frameLen);
BOOLEAN keyMgmtProcessMsgExt(keyMgmtInfoSta_t *pKeyMgmtInfoSta,EAPOL_KeyMsg_t *pKeyMsg);
void KeyMgmtInitSta(cm_ConnectionInfo_t *connPtr);
void keyMgmtSta_StartSession(cm_ConnectionInfo_t *connPtr,CHAR *pBssid,UINT8 *pStaAddr);
void init_customApp_mibs(supplicantData_t *suppData);
UINT8 supplicantIsEnabled(void *connectionPtr);
void supplicantInitSession(cm_ConnectionInfo_t *connPtr,CHAR *pSsid,UINT16 len,CHAR *pBssid,UINT8 *pStaAddr);
void supplicantDisable(cm_ConnectionInfo_t *connPtr);
void supplicantEnable(void *connectionPtr,int security_mode,void *mcstCipher,void *ucstCipher,_Bool is_pmf_required);
UINT16 keyMgmtFormatWpaRsnIe(cm_ConnectionInfo_t *connPtr,UINT8 *pos,IEEEtypes_MacAddr_t *pBssid,IEEEtypes_MacAddr_t *pStaAddr,UINT8 *pPmkid,BOOLEAN addPmkid);
Status_e GeneratePWKMsg2(BufferDesc_t *pEAPoLBufDesc,UINT8 *pSNonce,UINT8 *pEAPOLMICKey,UINT8 forceKeyDescVersion);
BOOLEAN KeyMgmtStaHsk_Recvd_PWKMsg1(BufferDesc_t *pEAPoLBufDesc,IEEEtypes_MacAddr_t *sa,IEEEtypes_MacAddr_t *da);
void supplicantInit(supplicantData_t *suppData);
void allocSupplicantData(void *connectionPtr);
UINT16 keyMgmtGetKeySize(cm_ConnectionInfo_t *connPtr,UINT8 isPairwise);
uint8_t add_key_to_mac(cm_ConnectionInfo_t *connPtr,UINT8 pairwise);
BufferReturnNotify_t * keyMgmtKeyGroupTxDone(void);
Status_e GenerateGrpMsg2(BufferDesc_t *pEAPoLBufDesc,keyMgmtInfoSta_t *pKeyMgmtInfoSta);
EAPOL_KeyMsg_t * KeyMgmtStaHsk_Recvd_GrpMsg1(BufferDesc_t *pEAPoLBufDesc);
uint8_t add_mfp_key_to_mac(cm_ConnectionInfo_t *connPtr,UINT8 pairwise);
void keyMgmtPlumbPairwiseKey(cm_ConnectionInfo_t *connPtr);
BufferReturnNotify_t * keyMgmtKeyPairwiseTxDone(void);
Status_e GeneratePWKMsg4(BufferDesc_t *pEAPoLBufDesc,keyMgmtInfoSta_t *pKeyMgmtInfoSta,BOOLEAN groupKeyReceived);
EAPOL_KeyMsg_t * KeyMgmtStaHsk_Recvd_PWKMsg3(BufferDesc_t *pEAPoLBufDesc);
void ProcessKeyMgmtDataSta(BufferDesc_t *pBufDesc,IEEEtypes_MacAddr_t *sa,IEEEtypes_MacAddr_t *da);
UINT8 ProcessEAPoLPkt(BufferDesc_t *bufDesc,IEEEtypes_MacAddr_t *sa,IEEEtypes_MacAddr_t *da);
uchar process_rsn_ie(uint8_t *rsn_ie,Cipher_t.conflict *mcstCipher,Cipher_t.conflict *ucstCipher,_Bool *is_pmf_required,SecurityMode_t *security_mode,_Bool wpa2_prefered);
uchar process_wpa_ie(uint8_t *wpa_ie,Cipher_t.conflict *mcstCipher,Cipher_t.conflict *ucstCipher);
void keyMgmtStaRsnSecuredTimeoutHandler(void *env);
void supplicantGenerateRand(UINT8 *dataOut,UINT32 length);
void ComputeEAPOL_MIC(EAPOL_KeyMsg_t *pKeyMsg,UINT16 data_length,UINT8 *MIC_Key,UINT8 MIC_Key_length,UINT8 micKeyDescVersion);
UINT16 keyMgmtGetKeySize_internal(RSNConfig_t *pRsnConfig,UINT8 isPairwise);
int isApReplayCounterFresh(keyMgmtInfoSta_t *pKeyMgmtInfoSta,UINT8 *pRxReplayCount);
void updateApReplayCounter(keyMgmtInfoSta_t *pKeyMgmtStaInfo,UINT8 *pRxReplayCount);
void formEAPOLEthHdr(EAPOL_KeyMsg_Tx_t *pTxEapol,IEEEtypes_MacAddr_t *da,IEEEtypes_MacAddr_t *sa);
BOOLEAN IsEAPOL_MICValid(EAPOL_KeyMsg_t *pKeyMsg,UINT8 *pMICKey);
UINT16 KeyMgmtSta_PopulateEAPOLLengthMic(EAPOL_KeyMsg_Tx_t *pTxEapol,UINT8 *pEAPOLMICKey,UINT8 eapolProtocolVersion,UINT8 forceKeyDescVersion);
KDE_t * parseKeyKDE(IEEEtypes_InfoElementHdr_t *pIe);
KDE_t * parseKeyKDE_DataType(UINT8 *pData,SINT32 dataLen,IEEEtypes_KDEDataType_e KDEDataType);
KDE_t * parseKeyDataGTK(UINT8 *pKey,UINT16 len,KeyData_t *pGRKey);
void KeyMgmtSta_ApplyKEK(EAPOL_KeyMsg_t *pKeyMsg,KeyData_t *pGRKey,UINT8 *EAPOL_Encr_Key);
BOOLEAN KeyMgmtSta_IsRxEAPOLValid(keyMgmtInfoSta_t *pKeyMgmtInfoSta,EAPOL_KeyMsg_t *pKeyMsg);
void KeyMgmtSta_PrepareEAPOLFrame(EAPOL_KeyMsg_Tx_t *pTxEapol,EAPOL_KeyMsg_t *pRxEapol,IEEEtypes_MacAddr_t *da,IEEEtypes_MacAddr_t *sa,UINT8 *pSNonce);
BOOLEAN supplicantAkmIsWpaWpa2(AkmSuite_t *pAkm);
BOOLEAN supplicantAkmIsWpa2(AkmSuite_t *pAkm);
BOOLEAN supplicantAkmIsWpaWpa2Psk(AkmSuite_t *pAkm);
BOOLEAN supplicantAkmUsesKdf(AkmSuite_t *pAkm);
void supplicantConstructContext(IEEEtypes_MacAddr_t *pAddr1,IEEEtypes_MacAddr_t *pAddr2,UINT8 *pNonce1,UINT8 *pNonce2,UINT8 *pContext);
void KeyMgmt_DerivePTK(IEEEtypes_MacAddr_t *pAddr1,IEEEtypes_MacAddr_t *pAddr2,UINT8 *pNonce1,UINT8 *pNonce2,UINT8 *pPTK,UINT8 *pPMK,BOOLEAN use_kdf);
void KeyMgmtSta_DeriveKeys(UINT8 *pPMK,IEEEtypes_MacAddr_t *da,IEEEtypes_MacAddr_t *sa,UINT8 *ANonce,UINT8 *SNonce,UINT8 *EAPOL_MIC_Key,UINT8 *EAPOL_Encr_Key,KeyData_t *newPWKey,BOOLEAN use_kdf);
void SetEAPOLKeyDescTypeVersion(EAPOL_KeyMsg_Tx_t *pTxEapol,BOOLEAN isWPA2,BOOLEAN isKDF,BOOLEAN nonTKIP);
EAPOL_KeyMsg_t *GetKeyMsgNonceFromEAPOL(BufferDesc_t *pEAPoLBufDesc,keyMgmtInfoSta_t *pKeyMgmtInfoSta);
EAPOL_KeyMsg_t *ProcessRxEAPOL_PwkMsg3(BufferDesc_t *pEAPoLBufDesc,keyMgmtInfoSta_t *pKeyMgmtInfoSta);
EAPOL_KeyMsg_t *ProcessRxEAPOL_GrpMsg1(BufferDesc_t *pEAPoLBufDesc,keyMgmtInfoSta_t *pKeyMgmtInfoSta);
void KeyMgmtResetCounter(keyMgmtInfoSta_t *pKeyMgmtInfo);
void keyMgmtSta_StartSession_internal(keyMgmtInfoSta_t *pKeyMgmtInfoSta,UINT32 expiry);
void KeyMgmtSta_InitSession(keyMgmtInfoSta_t *pKeyMgmtInfoSta);
void bl_sha256_crypto_kdf(UINT8 *pKey,UINT8 key_len,char *label,UINT8 label_len,UINT8 *pContext,UINT16 context_len,UINT8 *pOutput,UINT16 output_len);
void Bl_F(uchar *digest,uchar *digest1,char *password,uchar *ssid,int ssidlength,int iterations,int count,uchar *output);
int Bl_PasswordHash(char *password,uchar *ssid,int ssidlength,uchar *output);
int bl60x_fw_password_hash(char *password,uchar *ssid,int ssidlength,uchar *output);
UINT8 * pmkCacheFindPSK(UINT8 *pSsid,UINT8 ssidLen);
void pmkCacheSetPassphrase(UINT8 *pSsid,UINT8 ssidLen,UINT8 *pPassphrase,UINT8 PassphraseLen);
void pmkCacheInit(void);
void pmkCacheRomInit(void);
pmkElement_t * pmkCacheNewElement(void);
void pmkCacheUpdateReplacementRank(pmkElement_t *pPMKElement);
pmkElement_t * pmkCacheFindPSKElement(UINT8 *pSsid,UINT8 ssidLen);
void pmkCacheAddPSK(UINT8 *pSsid,UINT8 ssidLen,UINT8 *pPSK,UINT8 pPSKLen);
void pmkCacheDeletePSK(UINT8 *pSsid,UINT8 ssidLen);
UINT8 pmkCacheGetHexNibble(UINT8 nibble);
void pmkCacheGeneratePSK(UINT8 *pSsid,UINT8 ssidLen,UINT8 *pPassphrase,UINT8 PassphraseLen,UINT8 *pPSK);
void prepare_key(uchar *key_data_ptr,int key_data_len,rc4_key *key);
void rc4(uchar *buffer_ptr,int buffer_len,int skip,rc4_key *key);
void RC4_Encrypt(uchar *Encr_Key,uchar *IV,__uint16_t iv_length,uchar *Data,__uint16_t data_length,__uint16_t skipBytes);
int sha256_compress(sha256_state *md,UINT8 *msgBuf,UINT8 *pScratchMem);
void sha256_init(sha256_state *md);
void sha256_vector(size_t num_elem,UINT8 **addr,size_t *len,UINT8 *mac,UINT8 *pScratchMem);
void hmac_sha256_vector(UINT8 *key,size_t key_len,size_t num_elem,UINT8 **addr,size_t *len,UINT8 *mac);
void KeyMgmtInit(cm_ConnectionInfo_t *connPtr);
BufferDesc_t *PrepDefaultEapolMsg(cm_ConnectionInfo_t *connPtr,EAPOL_KeyMsg_Tx_t **pTxEapolPtr,BufferDesc_t *pBufDesc);
Status_e GeneratePWKMsg1(cm_ConnectionInfo_t *connPtr,BufferDesc_t *pBufDesc);
Status_e GeneratePWKMsg3(cm_ConnectionInfo_t *connPtr,BufferDesc_t *pBufDesc);
Status_e ProcessPWKMsg4(BufferDesc_t *pBufDesc);
Status_e GenerateApEapolMsg(cm_ConnectionInfo_t *connPtr,keyMgmtState_e msgState,BufferDesc_t *pBufDesc);
Status_e ProcessPWKMsg2(BufferDesc_t *pBufDesc);
BOOLEAN SendEAPOLMsgUsingBufDesc(cm_ConnectionInfo_t *connPtr,BufferDesc_t *pBufDesc);
Status_e ProcessKeyMgmtDataAp(BufferDesc_t *pBufDesc);
void InitStaKeyInfo(void *pConn,SecurityMode_t *secType,Cipher_t.conflict *pwCipher,UINT16 staRsnCap,UINT8 akmType);
void RemoveAPKeyInfo(void *pConn);
void InitGroupKey(cm_ConnectionInfo_t *connPtr);
void GenerateGTK_internal(KeyData_t *grpKeyData,UINT8 *nonce,IEEEtypes_Addr_t *StaMacAddr);
void PopulateKeyMsg(EAPOL_KeyMsg_Tx_t *tx_eapol_ptr,Cipher_t.conflict *Cipher,UINT16 Type,UINT32 *replay_cnt,UINT8 *Nonce);
void prepareKDE(EAPOL_KeyMsg_Tx_t *tx_eapol_ptr,KeyData_t *grKey,Cipher_t.conflict *cipher);
BOOLEAN Encrypt_keyData(EAPOL_KeyMsg_Tx_t *tx_eapol_ptr,UINT8 *EAPOL_Encr_Key,Cipher_t.conflict *cipher);
void KeyMgmtAp_DerivePTK(UINT8 *pPMK,IEEEtypes_MacAddr_t *da,IEEEtypes_MacAddr_t *sa,UINT8 *ANonce,UINT8 *SNonce,UINT8 *EAPOL_MIC_Key,UINT8 *EAPOL_Encr_Key,KeyData_t *newPWKey,BOOLEAN use_kdf);
BOOLEAN KeyData_CopyWPAWP2(EAPOL_KeyMsg_Tx_t *pTxEAPOL,void *pIe);
BOOLEAN KeyData_UpdateKeyMaterial(EAPOL_KeyMsg_Tx_t *pTxEAPOL,SecurityMode_t *pSecType,void *pWPA,void *pWPA2);
void ROM_InitGTK(KeyData_t *grpKeyData,UINT8 *nonce,IEEEtypes_Addr_t *StaMacAddr);
void InitKeyMgmtInfo(apKeyMgmtInfoStaRom_t *pKeyMgmtInfo,SecurityMode_t *secType,Cipher_t.conflict *pwCipher,UINT16 staRsnCap,UINT8 akmType);
apInfo_t * cm_GetApInfo(cm_ConnectionInfo_t *connPtr);
apSpecificData_t * cm_GetApData(cm_ConnectionInfo_t *connPtr);
Status_e cm_AllocAPResources(cm_ConnectionInfo_t *connPtr);
Status_e cm_AllocResources(cm_ConnectionInfo_t *connPtr);
cm_ConnectionInfo_t *cm_InitConnection(UINT8 conType,UINT8 bssType,UINT8 bssNum,IEEEtypes_MacAddr_t *bssId,IEEEtypes_MacAddr_t *peerMacAddr,UINT8 channel,unkbyte0 *hostMdev);
void cm_DeleteConnection(cm_ConnectionInfo_t *connPtr);
void cm_SetPeerAddr(cm_ConnectionInfo_t *connPtr,IEEEtypes_MacAddr_t *bssId,IEEEtypes_MacAddr_t *peerMacAddr);
void cm_SetComData(cm_ConnectionInfo_t *connPtr,char *ssid);
void assert_err(char *condition,char *file,int line);
void assert_warn(char *condition,char *file,int line);
void coex_wifi_rf_forece_enable(int enable);
void coex_wifi_pti_forece_enable(int enable);
void wifi_main(void);
void ipc_emb_notify(void);
void ipc_emb_wait(void);
void ipc_emb_init(void);
void ipc_emb_tx_irq(void);
void ipc_emb_tx_evt(int queue_idx);
void ipc_emb_cfmback_irq(void);
void ipc_emb_txcfm_ind(uint32_t queue_bits);
void ipc_emb_msg_irq(void);
void ipc_emb_msg_evt(void);
void ipc_emb_msg_dma_int_handler(void);
void ipc_emb_dbg_dma_int_handler(void);
void ipc_emb_dump(void);
void mdm_txcbwmax_setf(uint8_t txcbwmax);
void phy_config_rxgain(int offset);
void agc_config(void);
void mdm_reset(void);
void phy_powroffset_set(int8_t *power_offset);
void phy_hw_set_channel(uint8_t band,uint16_t freq,uint16_t freq1,uint8_t chantype);
void phy_get_channel(phy_channel_info *info,uint8_t index);
void phy_set_channel(uint8_t band,uint8_t type,uint16_t prim20_freq,uint16_t center1_freq,uint16_t center2_freq,uint8_t index);
void phy_get_version(uint32_t *version_1,uint32_t *version_2);
_Bool phy_vht_supported(void);
void phy_init(phy_cfg_tag *config);
uint8_t phy_get_nss(void);
uint8_t phy_get_ntx(void);
void phy_stop(void);
_Bool phy_ldpc_tx_supported(void);
uint8_t phy_get_mac_freq(void);
void phy_get_rf_gain_idx(int8_t *power,uint8_t *idx);
void phy_get_rf_gain_capab(int8_t *max,int8_t *min);
void bz_phy_reset(void);
void mpif_clk_init(void);
void phy_mdm_isr(void);
void phy_rc_isr(void);
void pa_init(void);
void pa_input(uint8_t id,rx_hd *rhd);
uint8_t hal_get_capcode(void);
void hal_set_capcode(uint32_t capcode);
_Bool hal_get_temperature(int16_t *temperature);
void hal_set_temperature(int16_t temperature);
void trpc_update_power(int8_t (*power_rate_table) [8]);
void trpc_power_get(int8_t *power_rate_table);
void trpc_update_power_11b(int8_t *power_rate_table);
void trpc_update_power_11g(int8_t *power_rate_table);
void trpc_update_power_11n(int8_t *power_rate_table);
void trpc_init(void);
int8_t trpc_get_rf_max_power(void);
int8_t trpc_get_rf_min_power(void);
uint8_t trpc_get_power_idx(uint8_t formatmod,uint8_t mcs,int8_t pwr_dbm);
uint8_t trpc_get_default_power_idx(uint8_t formatmod,uint8_t mcs);
void trpc_update_vs_channel(int8_t channel_MHz);
void trpc_update_vs_temperature(int8_t temperature);
void phy_tcal_reset(void);
void phy_tcal_start(void);
void phy_tcal_txpwr(int16_t curr_temperature);
void phy_tcal_callback(int16_t temperature);
int bl60x_check_mac_status(int *is_ok);
void helper_record_dump(void);
void helper_record_rc_rf_states(uint *param_1,uint *param_2);
void helper_record_all_states(char *func_name);
void rf_fsm_ctrl_en_setf(uint32_t x);
void rf_gc_tbb_setf(uint32_t x);
void rf_gc_tmx_setf(uint32_t x);
void rf_pa_ib_fix_setf(uint32_t x);
void rf_pa_vbcas_setf(uint32_t x);
void rf_pa_vbcore_setf(uint32_t x);
void rf_tmx_cs_setf(uint32_t x);
void rf_fsm_st_dbg_en_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc3_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc2_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc1_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc0_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc7_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc6_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc5_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc4_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc11_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc10_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc9_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc8_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc15_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc14_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc13_setf(uint32_t x);
void rf_tx_dvga_gain_qdb_gc12_setf(uint32_t x);
void wait_us(uint32_t us);
void rf_pa_etb_en_setf(void);
void rf_pa_half_on_setf(void);
void _print_channel_info(void);
void rfc_init(uint32_t xtalfreq_hz);
void rfc_rxdfe_set_notch0(uint8_t en,uint8_t alpha,int8_t nrmfc);
void rfc_config_channel(uint32_t channel_freq);
void rfc_coex_force_to(uint32_t force_enable,uint32_t bbmode);
_Bool rfc_config_power_ble(int32_t pwr_dbm);
uint32_t rfc_get_power_level(uint32_t formatmod,int32_t power);
void rfc_apply_tx_dvga(int8_t *dvga_qdb);
void rfc_apply_tx_power_offset(uint8_t channel,int8_t *power_offset);
void rf_pri_set_gain_table_regs(void);
void rf_pri_manu_pu(uint32_t mode);
void rf_pri_save_state_for_cal(void);
void rf_pri_restore_state_for_cal(void);
void rf_pri_singen_start(void);
uint32_t rf_pri_pm_pwr(void);
void rf_pri_start_txdfe(void);
int32_t rf_pri_pm_pwr_avg(uint32_t iq,uint32_t acc_len);
void rf_pri_txcal_config_hw(void);
uint16_t rf_pri_fcal_meas(uint32_t cw);
void rf_pri_rccal_config(uint32_t rbb_fc);
void rf_pri_rccal_config(uint32_t iq,uint32_t rbb_fc);
void rf_pri_txcal_config(uint32_t param_ind,int32_t val);
int32_t rf_pri_txcal_search_core(uint32_t param_ind,uint32_t center,uint32_t delta,uint32_t meas_freq);
void rf_pri_singen_config(uint32_t fcw);
uint32_t rf_pri_rccal_iq(uint32_t iq);
void rf_pri_config_channel(void);
uint32_t rf_pri_roscal_iq(uint32_t iq);
void rf_pri_chipv(uint8_t chipv);
void rf_pri_update_tx_power_offset(uint8_t channel,int8_t *power_offset);
void rf_pri_get_notch_param(uint32_t chanfreq_MHz,uint8_t *ncf_on,int32_t *ncf_freq_Hz);
void rf_pri_update_param(uint32_t chanfreq_MHz);
void rf_pri_xtalfreq(uint32_t xtalfreq);
uint32_t rf_pri_get_vco_freq_cw(uint32_t chanfreq_MHz);
uint32_t rf_pri_get_vco_idac_cw(uint32_t chanfreq_MHz);
int32_t rf_pri_get_txgain_max(void);
int32_t rf_pri_get_txgain_min(void);
uint32_t rf_pri_get_txgain_index(int32_t pwr,uint32_t mode);
void rf_pri_query_txgain_table(uint32_t index,uint32_t *rfg_index,uint32_t *dg);
void rf_pri_update_dvga_os(int8_t dvga_os);
void rf_pri_tx_gain_comp(int32_t Tsens);
void rf_pri_txcal(void);
void rf_pri_roscal(void);
void rf_pri_rccal(void);
void rf_pri_lo_acal(void);
void rf_pri_fcal(void);
void rf_pri_full_cal(void);
void rf_pri_restore_cal_reg(void);
void rf_pri_init(uint8_t reset,uint8_t chipv);
void rf_pri_update_power_offset(int32_t *power_offset);
int phyif_utils_decode(phyif_utils_recvtable_t *vec,int8_t *ppm);
void sysctrl_init(void);
void intc_spurious(void);
void intc_enable_irq(int index);
void intc_init(void);
void mac_irq(void);
void bl_irq_handler(void);
void blmac_pwr_mgt_setf(uint8_t pwrmgt);
chan_ctxt_tag * chan_get_next_chan(void);
void chan_conn_less_delay_prog(void);
void chan_upd_nb_rem_slots(uint32_t current_time);
_Bool chan_tbtt_detect_conflict(void);
void chan_tbtt_insert(chan_tbtt_tag *p_tbtt_entry);
void chan_upd_ctxt_status(chan_ctxt_tag *p_chan_entry,uint8_t next_status);
void chan_switch_start(chan_ctxt_tag *p_chan_entry);
void chan_conn_less_delay_evt(void *env);
void chan_tbtt_switch_evt(void *env);
void chan_tbtt_schedule(chan_tbtt_tag *p_tbtt_entry);
void chan_cde_evt(void *env);
void chan_goto_idle_cb(void);
void chan_tx_cfm(void *dummy,uint32_t status);
void chan_init(void);
void chan_scan_req(uint8_t band,uint16_t freq,int8_t pwr,uint32_t duration_us,uint8_t vif_index);
uint8_t chan_roc_req(mm_remain_on_channel_req *req,ke_task_id_t taskid);
uint8_t chan_ctxt_add(mm_chan_ctxt_add_req *p_add_req,uint8_t *idx);
void chan_ctxt_del(uint8_t chan_idx);
void chan_tbtt_switch_update(vif_info_tag *p_vif_entry,uint32_t tbtt_time);
void chan_bcn_to_evt(vif_info_tag *p_vif_entry);
void chan_bcn_detect_start(vif_info_tag *p_vif_entry);
_Bool chan_is_on_channel(vif_info_tag *p_vif_entry);
_Bool chan_is_tx_allowed(vif_info_tag *p_vif_entry);
_Bool chan_is_on_operational_channel(vif_info_tag *p_vif_entry);
void chan_update_tx_power(chan_ctxt_tag *p_chan_entry);
void chan_ctxt_link(uint8_t vif_idx,uint8_t chan_idx);
void chan_ctxt_unlink(uint8_t vif_idx);
void hal_dma_init(void);
u8_l blmac_soft_reset_getf(void);
void blmac_wt_2_crypt_clk_ratio_setf(u8_l wt2cryptclkratio);
void blmac_rx_flow_cntrl_en_setf(void);
void blmac_key_sto_ram_reset_setf(void);
void hal_machw_stop(void);
void hal_machw_init(void);
void hal_machw_disable_int(void);
void hal_machw_reset(void);
u8_l hal_machw_search_addr(mac_addr.conflict171 *addr);
void hal_machw_monitor_mode(void);
_Bool hal_machw_sleep_check(void);
void hal_machw_gen_handler(void);
void mm_rx_filter_set(void);
int element_notify_status_enabled(cfg_element_entry *entry,void *arg1,void *arg2,CFG_ELEMENT_TYPE_OPS ops);
void blmac_ap_setf(uint8_t ap);
uchar ascii_to_hex(char asccode);
undefined4 element_notify_time_last_received_set(void);
void blmac_encr_cntrl_pack(uint8_t newread,uint8_t newwrite,uint16_t keyindexram,uint8_t ctyperam,uint8_t vlanidram,uint8_t sppram,uint8_t usedefkeyram,uint8_t clenram);
undefined4 element_notify_keepalive_received(void);
uint32_t hal_machw_rx_duration(rx_hd *rhd,uint16_t len);
void mm_env_max_ampdu_duration_set(void);
void mm_env_init(void);
void mm_init(void);
void mm_active(void);
void mm_reset(void);
uint8_t mm_sec_machwaddr_wr(uint8_t sta_idx,uint8_t inst_nbr);
uint8_t mm_sec_machwkey_wr(mm_key_add_req *param);
void mm_sec_machwkey_del(uint8_t hw_key_idx);
void mm_sec_machwaddr_del(uint8_t sta_idx);
void mm_hw_idle_evt(int dummy);
void mm_hw_info_set(mac_addr.conflict171 *mac_addr);
void mm_hw_ap_info_set(void);
void mm_hw_ap_info_reset(void);
void mm_back_to_host_idle(void);
uint8_t mm_sta_add(mm_sta_add_req *param,uint8_t *sta_idx,uint8_t *hw_sta_idx);
void mm_sta_del(uint8_t sta_idx);
void mm_cfg_element_keepalive_timestamp_update(void);
void mm_send_connection_loss_ind(vif_info_tag *p_vif_entry);
void mm_ap_probe_cfm(void *env,uint32_t status);
void mm_check_rssi(vif_info_tag *vif_entry,int8_t rssi);
void mm_send_csa_traffic_ind(uint8_t vif_index,_Bool enable);
uint mm_check_beacon(rx_hd *param_1,vif_info_tag *param_2,int param_3,char **param_4);
void mm_sta_tbtt(void *env);
uint16_t mm_get_rsn_wpa_ie(uint8_t sta_id,uint8_t *wpa_ie);
void mm_tim_update_proceed(ushort *param_1);
void mm_bcn_init(void);
void mm_bcn_init_vif(vif_info_tag *vif_entry);
void mm_tim_update(mm_tim_update_req *param);
void mm_bcn_transmit(void);
void mm_bcn_updated(void *env,int dma_queue);
void mm_bcn_update(mm_bcn_change_req *param);
void mm_bcn_transmitted(vif_info_tag *param_1);
void mm_bcn_change(mm_bcn_change_req *param);
void bl_init(void);
int bl_sleep(void);
uint32_t bl_nap_calculate(void);
void rx_swdesc_init(void);
void scan_search_ds(void);
void scan_init(void);
void scan_set_channel_request(void);
void dma_cb(void *env,int dma_queue);
void scan_ie_download(scan_start_req *param);
void scan_probe_req_tx(void);
void scan_send_cancel_cfm(uint8_t status,ke_task_id_t dest_id);
int scan_cancel_req_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int scan_start_req_handler(ke_msg_id_t msgid,scan_start_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
undefined4 mm_scan_channel_end_ind_handler(void);
int mm_scan_channel_start_ind_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
void txl_buffer_reinit(void);
void txl_buffer_init(void);
void txl_buffer_reset(void);
txl_buffer_tag * txl_buffer_alloc(txdesc *txdesc,uint8_t access_category,uint8_t user_idx);
void txl_buffer_update_thd(txdesc *txdesc);
void txl_cfm_init(void);
void txl_cfm_push(txdesc *txdesc,u32_l status,u8_l access_category);
void txl_cfm_flush(u8_l access_category,co_list *list,u32_l status);
void txl_cfm_dma_int_handler(void);
void txl_cfm_dump(void);
void bam_init(void);
void bam_send_air_action_frame(int param_1,bam_env_tag *param_2,int param_3,uint8_t param_4,int param_5,uint16_t param_6,cfm_func_ptr *param_7);
undefined4 rxu_mgt_ind_handler(int param_1);
void co_pack8p(uint32_t dst,uint8_t *src,uint32_t len);
int phy_freq_to_channel(uint8_t band,uint16_t freq);
uint16_t phy_channel_to_freq(uint8_t band,int channel);
uint32_t me_add_ie_ssid(uint32_t *frame_addr,uint8_t ssid_len,uint8_t *p_ssid);
uint32_t me_add_ie_supp_rates(uint32_t *frame_addr,mac_rateset *p_rateset);
uint32_t me_add_ie_ext_supp_rates(uint32_t *frame_addr,mac_rateset *p_rateset);
uint32_t me_add_ie_ds(uint32_t *frame_addr,uint8_t channel);
uint32_t me_add_ie_erp(uint32_t *frame_addr,uint8_t erp_info);
uint32_t me_add_ie_rsn(uint32_t *frame_addr,uint8_t enc_type);
uint32_t me_add_ie_wpa(uint32_t *frame_addr,uint8_t enc_type);
uint32_t me_add_ie_tim(uint32_t *frame_addr,uint8_t dtim_period);
uint32_t me_add_ie_ht_capa(uint32_t *frame_addr);
uint32_t me_add_ie_ht_oper(uint32_t *frame_addr,vif_info_tag *p_vif_entry);
uint16_t me_build_authenticate(uint32_t frame,uint16_t algo_type,uint16_t seq_nbr,uint16_t status_code,uint32_t *challenge_array_ptr);
uint16_t me_build_deauthenticate(uint32_t frame,uint16_t reason_code);
uint16_t me_build_associate_req(uint32_t frame,mac_bss_info *bss,mac_addr.conflict171 *old_ap_addr_ptr,uint8_t vif_idx,uint32_t *ie_addr,uint16_t *ie_len,sm_connect_req *con_par);
uint16_t me_build_add_ba_req(uint32_t frame,bam_env_tag *bam_env);
uint16_t me_build_add_ba_rsp(uint32_t frame,bam_env_tag *bam_env,uint16_t param,uint8_t dialog_token,uint16_t status_code);
uint16_t me_build_del_ba(uint32_t frame,bam_env_tag *bam_env,uint16_t reason_code);
void me_extract_rate_set(uint32_t buffer,uint16_t buflen,mac_rateset *mac_rate_set_ptr);
void me_extract_power_constraint(uint32_t buffer,uint16_t buflen,mac_bss_info *bss);
void me_extract_country_reg(int param_1);
void me_extract_mobility_domain(uint32_t buffer,uint16_t buflen,mac_bss_info *bss);
uint me_extract_csa(undefined4 param_1,undefined4 param_2,undefined *param_3,int param_4);
uint16_t me_build_beacon(uint32_t frame,uint8_t vif_idx,uint16_t *tim_oft,uint8_t *tim_len,uint8_t hidden_ssid);
uint16_t me_build_probe_rsp(uint32_t frame,uint8_t vif_idx);
uint16_t me_build_associate_rsp(uint32_t frame,uint8_t vif_idx,uint16_t status_code,me_sta_add_req *req);
int me_rc_set_rate_req_handler(ke_msg_id_t msgid,me_rc_set_rate_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_rc_stats_req_handler(ke_msg_id_t msgid,me_rc_stats_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_traffic_ind_req_handler(ke_msg_id_t msgid,me_traffic_ind_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_sta_del_req_handler(ke_msg_id_t msgid,me_sta_del_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_set_control_port_req_handler(ke_msg_id_t msgid,me_set_control_port_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_chan_config_req_handler(ke_msg_id_t msgid,me_chan_config_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_set_ps_mode_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_set_idle_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_config_req_handler(ke_msg_id_t msgid,me_config_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_set_ps_disable_req_handler(ke_msg_id_t msgid,me_set_ps_disable_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_set_active_req_handler(ke_msg_id_t msgid,me_set_active_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_sta_add_req_handler(ke_msg_id_t msgid,me_sta_add_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
_Bool me_set_sta_ht_vht_param(sta_info_tag *sta,mac_bss_info *bss);
uint8_t me_11n_nss_max(uint8_t *mcs_set);
uint8_t me_legacy_ridx_min(uint16_t rate_map);
uint8_t me_legacy_ridx_max(uint16_t rate_map);
uint8_t me_rate_translate(uint8_t rate);
void me_get_basic_rates(mac_rateset *rateset,mac_rateset *basic_ratest);
uint16_t me_legacy_rate_bitfield_build(mac_rateset *rateset,_Bool basic_only);
uint16_t me_build_capability(uint8_t vif_idx);
void me_init_bcmc_rate(sta_info_tag *sta_entry);
void me_tx_cfm_singleton(txdesc *txdesc);
void me_check_rc(u8_l sta_idx,_Bool *tx_ampdu);
void me_init_rate(sta_info_tag *sta_entry);
void me_bw_check(int param_1,int param_2);
void me_beacon_check(uint8_t vif_idx,uint16_t length,uint32_t bcn_addr);
void me_sta_bw_nss_max_upd(uint8_t sta_idx,uint8_t bw,uint8_t nss);
uint8_t me_add_chan_ctx(uint8_t *p_chan_idx,scan_chan_tag *p_chan,uint32_t center_freq1,uint32_t center_freq2,uint8_t ch_width);
u8_l rc_get_nss(uint16_t rate_config);
u8_l rc_get_mcs_index(uint16_t rate_config);
uint16_t rc_set_previous_mcs_index(rc_sta_stats *rc_ss,uint16_t rate_config);
uint16_t rc_set_next_mcs_index(rc_sta_stats *rc_ss,uint16_t rate_config);
_Bool is_cck_group(uint16_t rate_config);
void rc_update_retry_chain(rc_sta_stats *rc_ss,uint32_t *cur_tp);
uint16_t rc_get_lowest_rate_config(rc_sta_stats *rc_ss);
void rc_sort_samples_tp(rc_sta_stats *rc_ss,uint32_t *cur_tp);
uint16_t rc_get_initial_rate_config(rc_sta_stats *rc_ss);
void rc_calc_prob_ewma(rc_rate_stats *rc_rs);
_Bool rc_check_valid_rate(rc_sta_stats *rc_ss,uint16_t rate_config);
uint16_t rc_new_random_rate(rc_sta_stats *rc_ss);
void rc_update_counters(u8_l sta_idx,u32_l attempts,u32_l failures,_Bool tx_ampdu,_Bool retry_required);
uint32_t rc_get_duration(uint param_1);
void rc_update_bw_nss_max(u8_l sta_idx,u8_l bw_max,u8_l nss_max);
void rc_init_bcmc_rate(sta_info_tag *sta_entry,u8_l basic_rate_idx);
_Bool rc_check_fixed_rate_config(rc_sta_stats *rc_ss,uint16_t fixed_rate_config);
u32_l rc_calc_tp(rc_sta_stats *rc_ss,u8_l sample_idx);
_Bool rc_update_stats(rc_sta_stats *rc_ss,_Bool init);
void rc_init(sta_info_tag *sta_entry);
void rc_check(u8_l sta_idx,_Bool *tx_ampdu);
void cfm_raw_send(void *env,uint32_t status);
int scanu_raw_send_req_handler(ke_msg_id_t msgid,scanu_raw_send_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int scanu_join_req_handler(ke_msg_id_t msgid,scanu_start_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int scanu_start_req_handler(ke_msg_id_t msgid,scanu_start_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int rxu_mgt_ind_handler(ke_msg_id_t msgid,rxu_mgt_ind *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int scan_done_ind_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int scan_start_cfm_handler(ke_msg_id_t msgid,scan_start_cfm *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_set_ps_disable_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_bss_param_setting_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int sm_rsp_timeout_ind_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int scanu_start_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_connection_loss_ind_handler(ke_msg_id_t msgid,mm_connection_loss_ind *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int scanu_join_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int sm_connect_req_handler(ke_msg_id_t msgid,sm_connect_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int rxu_mgt_ind_handler(ke_msg_id_t msgid,rxu_mgt_ind *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_set_vif_state_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_set_active_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_sta_add_cfm_handler(ke_msg_id_t msgid,mm_sta_add_cfm *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int sm_disconnect_req_handler(ke_msg_id_t msgid,sm_disconnect_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int apm_sta_connect_timeout_ind_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int rxu_mgt_ind_handler(ke_msg_id_t msgid,rxu_mgt_ind *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int apm_sta_add_cfm_handler(ke_msg_id_t msgid,me_sta_add_cfm *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int apm_sta_del_req_handler(ke_msg_id_t msgid,apm_sta_del_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int apm_conf_max_sta_req_handler(ke_msg_id_t msgid,apm_conf_max_sta_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_set_ps_disable_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_bss_param_setting_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int mm_bcn_change_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int apm_stop_req_handler(ke_msg_id_t msgid,apm_stop_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int apm_start_req_handler(ke_msg_id_t msgid,apm_start_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int me_set_active_cfm_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int hostapd_mgt_ind_handler(ke_msg_id_t msgid,rxu_mgt_ind *param,ke_task_id_t dest_id,ke_task_id_t src_id);
void dump_cfg_entries(void);
int cfg_start_req_handler(ke_msg_id_t msgid,cfg_start_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
char * cfg_api_element_dump(void *val,CFG_ELEMENT_TYPE type,char *strs);
int cfg_api_element_general_set(cfg_element_entry *entry,void *arg1,void *arg2);
int cfg_api_element_general_get(cfg_element_entry *entry,void *arg1,void *arg2);
int cfg_api_element_set(uint32_t task,uint32_t element,uint32_t type,void *arg1,void *arg2);
uint32_t co_crc32(uint32_t addr,uint32_t len,uint32_t crc);
void dbg_init(void);
void dbg_test_print(char *fmt,...);
int dbg_get_sys_stat_req_handler(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int dbg_mem_write_req_handler(ke_msg_id_t msgid,dbg_mem_write_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int dbg_mem_read_req_handler(ke_msg_id_t msgid,dbg_mem_read_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int dbg_set_sev_filter_req_handler(ke_msg_id_t msgid,dbg_set_sev_filter_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
int dbg_set_mod_filter_req_handler(ke_msg_id_t msgid,dbg_set_mod_filter_req *param,ke_task_id_t dest_id,ke_task_id_t src_id);
co_list_hdr *ke_queue_extract(co_list *queue,anon_subr__Bool_co_list_hdr_ptr_uint32_t.conflict2 *func,uint32_t arg);
void bl_aes_128(UINT8 *key,UINT8 *input,UINT8 *output);
void xor_128(UINT8 *a,UINT8 *b,UINT8 *out);
void leftshift_onebit(UINT8 *input,UINT8 *output);
void generate_subkey(UINT8 *key,UINT8 *K1,UINT8 *K2);
void padding(UINT8 *lastb,UINT8 *pad,int length);
void bl_aes_cmac(UINT8 *key,UINT8 *input,int length,UINT8 *mac);
int BL_AES_MEMCMP(UINT8 *dst,UINT8 *src,int len);
void BL_AES_MEMSET(UINT8 *dst,UINT8 val,int size);
void BL_AES_MEMCPY(UINT8 *dst,UINT8 *src,int size);
int BL_AesEncrypt(UINT8 *kek,UINT8 kekLen,UINT8 *data,UINT8 *ret);
int BL_AesWrap(UINT8 *kek,UINT8 kekLen,UINT32 n,UINT8 *plain,UINT8 *keyIv,UINT8 *cipher);
int BL_AesUnWrap(UINT8 *kek,UINT8 kekLen,UINT32 n,UINT8 *cipher,UINT8 *keyIv,UINT8 *plain);
void Bl_hmac_md5(UINT8 *text_data,int text_len,UINT8 *key,int key_len,void *digest);
void Bl_hmac_sha1(uchar **ppText,int *pTextLen,int textNum,uchar *key,int key_len,uchar *output,int outputLen);
void Bl_PRF(uchar *key,int key_len,uchar *prefix,int prefix_len,uchar *data,int data_len,uchar *output,int len);
void set_psk(char *pSsid,UINT8 ssidLen,char *phrase);
void remove_psk(char *pSsid,UINT8 ssidLen);
void wpa_MD5Transform(UINT32 *state,ulong *block);
void wpa_MD5Init(Bl_MD5_CTX *context);
void wpa_MD5Update(Bl_MD5_CTX *context,UINT8 *input,UINT32 inputLen);
void wpa_MD5Final(uchar *digest,Bl_MD5_CTX *context);
int rijndaelKeySetupEnc(u32.conflict *rk,u8 *cipherKey,int keyBits);
void rijndael_set_key(rijndael_ctx *ctx,u8 *key,int bits,int encrypt);
void rijndael_decrypt(rijndael_ctx *ctx,u8 *src,u8 *dst);
void rijndael_encrypt(rijndael_ctx *ctx,u8 *src,u8 *dst);
void Bl_SHA1ProcessMessageBlock(Bl_SHA1_CTX *context);
int Bl_SHA1Init(Bl_SHA1_CTX *context);
int Bl_SHA1Final(Bl_SHA1_CTX *context,UINT8 *Message_Digest);
int Bl_SHA1Update(Bl_SHA1_CTX *context,UINT8 *message_array,uint length);
Status_e supplicantRestoreDefaults(void);
void supplicantFuncInit(void);
void ap_setpsk(cm_ConnectionInfo_t *connPtr,CHAR *ssid,CHAR *passphrase);
void ap_resetConfiguration(cm_ConnectionInfo_t *connPtr);
void InitializeAp(cm_ConnectionInfo_t *connPtr);
void rf_set_channel(uint8_t bandwidth,uint16_t channel_freq);
void rf_dump_status(void);
int bt_hcionchip_recv(ke_msg_id_t msgid,void *param,ke_task_id_t dest_id,ke_task_id_t src_id);
uint8_t bt_onchiphci_interface_init(bt_hci_recv_cb *cb);
uint bt_onchiphci_hanlde_rx_acl(int param_1,void *param_2);
int bl_mtd_open(char *name,bl_mtd_handle_t *handle,uint flags);
int bl_mtd_info(bl_mtd_handle_t handle,bl_mtd_info_t *info);
int bl_mtd_erase(bl_mtd_handle_t handle,uint addr,uint size);
int bl_mtd_write(bl_mtd_handle_t handle,uint addr,uint size,uint8_t *data);
int bl_mtd_read(bl_mtd_handle_t handle,uint addr,uint size,uint8_t *data);
int bloop_init(loop_ctx *loop);
int bloop_handler_register(loop_ctx *loop,loop_evt_handler *handler,int priority);
void bloop_timer_init(loop_timer *timer,int use_auto_free);
void bloop_timer_configure(loop_timer *timer,uint delay_ms,anon_subr_void_loop_ctx_ptr_loop_timer_ptr_void_ptr *cb,void *arg,int idx_task,uint32_t evt_type_map);
void bloop_timer_repeat_enable(loop_timer *timer);
void bloop_timer_repeat_reconfigure(loop_timer *timer);
void bloop_timer_register(loop_ctx *loop,loop_timer *timer);
void bloop_wait_startup(loop_ctx *loop);
void bloop_evt_set_async(loop_ctx *loop,uint evt,uint32_t evt_map);
void bloop_evt_set_sync(loop_ctx *loop,uint evt,uint32_t evt_map);
void bloop_evt_unset_sync(loop_ctx *loop,uint evt);
void bloop_run(loop_ctx *param_1);
int bloop_status_dump(loop_ctx *loop);
int loop_evt_entity_sys_handler(loop_ctx *loop,loop_evt_handler *handler,loop_msg *msg);
int loop_evt_entity_sys_evt(loop_ctx *loop,loop_evt_handler *handler,uint32_t *bitmap_evt,uint32_t *evt_type_map);
int bl_sys_time_sync_state(uint32_t *xTicksToJump);
void get_f32_reg(void);
void put_f32_reg(void);
int backtrace_riscv(anon_subr_int_char_ptr *print_func,uintptr_t *regs);
uint32_t bl_timer_now_us(void);
uint64_t bl_rtc_get_counter(void);
uint64_t bl_rtc_get_timestamp_ms(void);
void set_if(netif *netif,char *ip_addr,char *gw_addr,char *nm_addr);
void Bl_F_fast(uchar *digest,uchar *digest1,char *password,uchar *ssid,int ssidlength,int count,uchar *output);
int utils_wifi_psk_cal_fast_bin(char *password,uchar *ssid,int ssidlength,uchar *output);
void utils_hmac_sha1_fast(uchar **ppText,int *pTextLen,int textNum,uchar *key,int key_len,uchar *output,int outputLen);
int bl_sha_mutex_take(void);
int bl_sha_mutex_give(void);
void bl_sha_init(bl_sha_ctx_t *ctx,bl_sha_type_t type);
int bl_sha_update(bl_sha_ctx_t *ctx,uint8_t *input,uint32_t len);
int bl_sha_finish(bl_sha_ctx_t *ctx,uint8_t *hash);
double fabs(double __x);
double floor(double __x);
double modf(double __x,double *__iptr);
DItype __lshrdi3(shift_count_type b);
int __clzsi2(USItype x);
DItype __divdi3(void);
DItype __moddi3(void);
UDItype __udivdi3(void);
UDItype __umoddi3(void);
__gcc_CMPtype __eqdf2(void);
__gcc_CMPtype __gedf2(void);
__gcc_CMPtype __ledf2(void);
SItype __fixdfsi(void);
USItype __fixunsdfsi(void);
DFtype __floatsidf(SItype i);
DFtype __floatunsidf(USItype i);
SFtype __truncdfsf2(void);
int atoi(char *__nptr);
void _atoi_r(void);
undefined * __errno(void);
void * memchr(void *__s,int __c,size_t __n);
int memcmp(void *__s1,void *__s2,size_t __n);
void * memcpy(void *__dest,void *__src,size_t __n);
void * memmove(void *__dest,void *__src,size_t __n);
void * memset(void *__s,int __c,size_t __n);
char * strchr(char *__s,int __c);
int strcmp(char *__s1,char *__s2);
char * strcpy(char *__dest,char *__src);
size_t strlen(char *__s);
int strncmp(char *__s1,char *__s2,size_t __n);
char * strncpy(char *__dest,char *__src,size_t __n);
size_t strnlen(char *__string,size_t __maxlen);
char * strrchr(char *__s,int __c);
byte * two_way_long_needle(int param_1,int param_2,byte *param_3,byte *param_4);
char * strstr(char *__haystack,char *__needle);
uint _strtol_l.isra.0(undefined4 *param_1,byte *param_2,byte **param_3,uint param_4);
uint _strtol_r(undefined4 *param_1,byte *param_2,byte **param_3,uint param_4);
long strtol_l(char *__nptr,char **__endptr,int __base,__locale_t __loc);
long strtol(char *__nptr,char **__endptr,int __base);
int stat(char *__file,stat *__buf);
void _stat_r(int *param_1,undefined4 param_2,undefined4 param_3);
int _stat(int param_1,undefined4 param_2);
void _conv_stat(undefined2 *param_1,undefined4 *param_2);
BL_Err_Type AON_Power_On_BG(void);
BL_Err_Type AON_Power_Off_BG(void);
BL_Err_Type AON_Power_On_LDO11_SOC(void);
BL_Err_Type AON_Power_Off_LDO11_SOC(void);
BL_Err_Type AON_Power_On_LDO15_RF(void);
BL_Err_Type AON_Power_Off_LDO15_RF(void);
BL_Err_Type AON_Power_On_SFReg(void);
BL_Err_Type AON_Power_Off_SFReg(void);
BL_Err_Type AON_LowPower_Enter_PDS0(void);
BL_Err_Type AON_LowPower_Exit_PDS0(void);
void ASM_Delay_Us(uint32_t core,uint32_t cnt);
void BL602_Delay_US(uint32_t cnt);
void BL602_Delay_MS(uint32_t cnt);
void * BL602_MemCpy(void *dst,void *src,uint32_t n);
uint32_t * BL602_MemCpy4(uint32_t *dst,uint32_t *src,uint32_t n);
void * BL602_MemCpy_Fast(void *pdst,void *psrc,uint32_t n);
void * BL602_MemSet(void *s,uint8_t c,uint32_t n);
uint32_t * BL602_MemSet4(uint32_t *dst,uint32_t val,uint32_t n);
int BL602_MemCmp(void *s1,void *s2,uint32_t n);
void EF_Ctrl_Sw_AHB_Clk_0(void);
void EF_Ctrl_Program_Efuse_0(void);
void EF_Ctrl_Load_Efuse_R0(void);
BL_Sts_Type EF_Ctrl_Busy(void);
BL_Sts_Type EF_Ctrl_AutoLoad_Done(void);
void EF_Ctrl_Clear(uint32_t index,uint32_t len);
BL_Err_Type GLB_SW_System_Reset(void);
BL_Err_Type GLB_SW_CPU_Reset(void);
BL_Err_Type GLB_SW_POR_Reset(void);
BL_Err_Type GLB_Select_Internal_Flash(void);
BL_Err_Type GLB_Select_External_Flash(void);
BL_Err_Type GLB_Deswap_Flash_Pin(void);
BL_Err_Type GLB_Swap_Flash_Pin(void);
BL_Err_Type GLB_GPIO_Init(GLB_GPIO_Cfg_Type *cfg);
BL_Err_Type GLB_GPIO_OUTPUT_Enable(GLB_GPIO_Type gpioPin);
BL_Err_Type GLB_GPIO_OUTPUT_Disable(GLB_GPIO_Type gpioPin);
BL_Err_Type GLB_GPIO_Set_HZ(GLB_GPIO_Type gpioPin);
uint8_t GLB_GPIO_Get_Fun(GLB_GPIO_Type gpioPin);
void HBN_Mode_Enter(HBN_APP_CFG_Type *cfg);
void HBN_Power_Down_Flash(SPI_Flash_Cfg_Type *flashCfg);
void HBN_Enable(uint8_t aGPIOIeCfg,HBN_LDO_LEVEL_Type ldoLevel,HBN_LEVEL_Type hbnLevel);
BL_Err_Type HBN_Reset(void);
BL_Err_Type HBN_Set_Ldo11_Aon_Vout(HBN_LDO_LEVEL_Type ldoLevel);
BL_Err_Type HBN_Set_Ldo11_Rt_Vout(HBN_LDO_LEVEL_Type ldoLevel);
BL_Err_Type HBN_Set_Ldo11_Soc_Vout(HBN_LDO_LEVEL_Type ldoLevel);
BL_Err_Type HBN_Hw_Pu_Pd_Cfg(uint8_t enable);
BL_Err_Type HBN_Pin_WakeUp_Mask(uint8_t maskVal);
BL_Err_Type HBN_GPIO7_Dbg_Pull_Cfg(BL_Fun_Type pupdEn,BL_Fun_Type iesmtEn,BL_Fun_Type dlyEn,uint8_t dlySec);
BL_Err_Type HBN_Set_Embedded_Flash_Pullup(uint8_t enable);
BL_Err_Type L1C_Set_Wrap(BL_Fun_Type wrap);
BL_Err_Type L1C_Set_Way_Disable(uint8_t disableVal);
BL_Err_Type L1C_IROM_2T_Access_Set(uint8_t enable);
BL_Err_Type PDS_Reset(void);
BL_Err_Type PDS_Force_Config(PDS_CTL2_Type.conflict4 *cfg2,PDS_CTL3_Type.conflict4 *cfg3);
BL_Err_Type PDS_RAM_Config(PDS_RAM_CFG_Type.conflict1 *ramCfg);
BL_Err_Type PDS_Default_Level_Config(PDS_DEFAULT_LV_CFG_Type.conflict1 *defaultLvCfg,PDS_RAM_CFG_Type.conflict1 *ramCfg,uint32_t pdsSleepCnt);
void SEC_Eng_Turn_On_Sec_Ring(void);
void SEC_Eng_Turn_Off_Sec_Ring(void);
void SFlash_Init(SF_Ctrl_Cfg_Type *pSfCtrlCfg);
BL_Err_Type SFlash_SetSPIMode(SF_Ctrl_Mode_Type mode);
BL_Err_Type SFlash_Read_Reg(SPI_Flash_Cfg_Type *flashCfg,uint8_t regIndex,uint8_t *regValue,uint8_t regLen);
BL_Err_Type SFlash_Write_Reg(SPI_Flash_Cfg_Type *flashCfg,uint8_t regIndex,uint8_t *regValue,uint8_t regLen);
BL_Sts_Type SFlash_Busy(SPI_Flash_Cfg_Type *flashCfg);
BL_Err_Type SFlash_Write_Enable(SPI_Flash_Cfg_Type *flashCfg);
BL_Err_Type SFlash_Qspi_Enable(SPI_Flash_Cfg_Type *flashCfg);
void SFlash_Volatile_Reg_Write_Enable(SPI_Flash_Cfg_Type *flashCfg);
BL_Err_Type SFlash_Chip_Erase(SPI_Flash_Cfg_Type *flashCfg);
BL_Err_Type SFlash_Sector_Erase(SPI_Flash_Cfg_Type *flashCfg,uint32_t secNum);
BL_Err_Type SFlash_Blk32_Erase(SPI_Flash_Cfg_Type *flashCfg,uint32_t blkNum);
BL_Err_Type SFlash_Blk64_Erase(SPI_Flash_Cfg_Type *flashCfg,uint32_t blkNum);
BL_Err_Type SFlash_Erase(SPI_Flash_Cfg_Type *flashCfg,uint32_t startaddr,uint32_t endaddr);
BL_Err_Type SFlash_Program(SPI_Flash_Cfg_Type *flashCfg,SF_Ctrl_IO_Type ioMode,uint32_t addr,uint8_t *data,uint32_t len);
void SFlash_GetUniqueId(uint8_t *data,uint8_t idLen);
void SFlash_GetJedecId(SPI_Flash_Cfg_Type *flashCfg,uint8_t *data);
void SFlash_GetDeviceId(uint8_t *data);
void SFlash_Powerdown(void);
void SFlash_Releae_Powerdown(SPI_Flash_Cfg_Type *flashCfg);
void SFlash_SetBurstWrap(SPI_Flash_Cfg_Type *flashCfg);
void SFlash_DisableBurstWrap(SPI_Flash_Cfg_Type *flashCfg);
BL_Err_Type SFlash_Software_Reset(SPI_Flash_Cfg_Type *flashCfg);
void SFlash_Reset_Continue_Read(SPI_Flash_Cfg_Type *flashCfg);
BL_Err_Type SFlash_Set_IDbus_Cfg(SPI_Flash_Cfg_Type *flashCfg,SF_Ctrl_IO_Type ioMode,uint8_t contRead,uint32_t addr,uint32_t len);
BL_Err_Type SFlash_IDbus_Read_Enable(SPI_Flash_Cfg_Type *flashCfg,SF_Ctrl_IO_Type ioMode,uint8_t contRead);
BL_Err_Type SFlash_Cache_Enable_Set(uint8_t wayDisable);
BL_Err_Type SFlash_Cache_Flush(void);
BL_Err_Type SFlash_Cache_Read_Enable(SPI_Flash_Cfg_Type *flashCfg,SF_Ctrl_IO_Type ioMode,uint8_t contRead,uint8_t wayDisable);
void SFlash_Cache_Hit_Count_Get(uint32_t *hitCountLow,uint32_t *hitCountHigh);
uint32_t SFlash_Cache_Miss_Count_Get(void);
void SFlash_Cache_Read_Disable(void);
BL_Err_Type SFlash_Read(SPI_Flash_Cfg_Type *flashCfg,SF_Ctrl_IO_Type ioMode,uint8_t contRead,uint32_t addr,uint8_t *data,uint32_t len);
BL_Err_Type SFlash_Read_Reg_With_Cmd(SPI_Flash_Cfg_Type *flashCfg,uint8_t readRegCmd,uint8_t *regValue,uint8_t regLen);
BL_Err_Type SFlash_Write_Reg_With_Cmd(SPI_Flash_Cfg_Type *flashCfg,uint8_t writeRegCmd,uint8_t *regValue,uint8_t regLen);
void SF_Cfg_Init_Ext_Flash_Gpio(uint8_t extFlashPin);
void SF_Cfg_Init_Internal_Flash_Gpio(void);
void SF_Cfg_Deinit_Ext_Flash_Gpio(uint8_t extFlashPin);
void SF_Cfg_Restore_GPIO17_Fun(uint8_t fun);
BL_Err_Type SF_Cfg_Get_Flash_Cfg_Need_Lock(uint32_t flashID,SPI_Flash_Cfg_Type *pFlashCfg);
void SF_Cfg_Init_Flash_Gpio(uint8_t flashPinCfg,uint8_t restoreDefault);
uint32_t SF_Cfg_Flash_Identify(uint8_t callFromFlash,uint32_t autoScan,uint32_t flashPinCfg,uint8_t restoreDefault,SPI_Flash_Cfg_Type *pFlashCfg);
void SF_Ctrl_Enable(SF_Ctrl_Cfg_Type *cfg);
void SF_Ctrl_Select_Pad(SF_Ctrl_Pad_Sel sel);
void SF_Ctrl_Set_Owner(SF_Ctrl_Owner_Type owner);
void SF_Ctrl_Disable(void);
void SF_Ctrl_AES_Enable_BE(void);
void SF_Ctrl_AES_Enable_LE(void);
void SF_Ctrl_AES_Set_Region(uint8_t region,uint8_t enable,uint8_t hwKey,uint32_t startAddr,uint32_t endAddr,uint8_t locked);
void SF_Ctrl_AES_Set_Key(uint8_t region,uint8_t *key,SF_Ctrl_AES_Key_Type keyType);
void SF_Ctrl_AES_Set_Key_BE(uint8_t region,uint8_t *key,SF_Ctrl_AES_Key_Type keyType);
void SF_Ctrl_AES_Set_IV(uint8_t region,uint8_t *iv,uint32_t addrOffset);
void SF_Ctrl_AES_Set_IV_BE(uint8_t region,uint8_t *iv,uint32_t addrOffset);
void SF_Ctrl_AES_Enable(void);
void SF_Ctrl_AES_Disable(void);
void SF_Ctrl_Set_Flash_Image_Offset(uint32_t addrOffset);
uint32_t SF_Ctrl_Get_Flash_Image_Offset(void);
void SF_Ctrl_Select_Clock(SF_Ctrl_Sahb_Type sahbType);
void SF_Ctrl_SendCmd(SF_Ctrl_Cmd_Cfg_Type *cfg);
void SF_Ctrl_Icache_Set(SF_Ctrl_Cmd_Cfg_Type *cfg,uint8_t cmdValid);
void SF_Ctrl_Icache2_Set(SF_Ctrl_Cmd_Cfg_Type *cfg,uint8_t cmdValid);
BL_Sts_Type SF_Ctrl_GetBusyState(void);
uint8_t SF_Ctrl_Is_AES_Enable(void);
uint8_t SF_Ctrl_Get_Clock_Delay(void);
void SF_Ctrl_Set_Clock_Delay(uint8_t delay);
BL_Err_Type XIP_SFlash_State_Save(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t *offset);
BL_Err_Type XIP_SFlash_State_Restore(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t offset);
BL_Err_Type XIP_SFlash_Erase_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t startaddr,uint32_t endaddr);
BL_Err_Type XIP_SFlash_Write_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t addr,uint8_t *data,uint32_t len);
BL_Err_Type XIP_SFlash_Read_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t addr,uint8_t *data,uint32_t len);
BL_Err_Type XIP_SFlash_GetJedecId_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint8_t *data);
BL_Err_Type XIP_SFlash_GetDeviceId_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint8_t *data);
BL_Err_Type XIP_SFlash_GetUniqueId_Need_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint8_t *data,uint8_t idLen);
BL_Err_Type XIP_SFlash_Read_Via_Cache_Need_Lock(uint32_t addr,uint8_t *data,uint32_t len);
int XIP_SFlash_Read_With_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t addr,uint8_t *dst,int len);
int XIP_SFlash_Write_With_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t addr,uint8_t *src,int len);
int XIP_SFlash_Erase_With_Lock(SPI_Flash_Cfg_Type *pFlashCfg,uint32_t addr,int len);
void XIP_SFlash_Opt_Enter(uint8_t *aesEnable);
void XIP_SFlash_Opt_Exit(uint8_t aesEnable);
uint32_t BFLB_Soft_CRC32(void *dataIn,uint32_t len);
BL_Err_Type ADC_Trim_TSEN(uint16_t *tsen_offset);
BL_Err_Type ADC_Gain_Trim(void);
uint8_t EF_Ctrl_Get_Trim_Parity(uint32_t val,uint8_t len);
void EF_Ctrl_Read_RC32M_Trim(Efuse_Ana_RC32M_Trim_Type.conflict1 *trim);
void EF_Ctrl_Read_RC32K_Trim(Efuse_Ana_RC32K_Trim_Type.conflict3 *trim);
void EF_Ctrl_Read_TSEN_Trim(Efuse_TSEN_Refcode_Corner_Type.conflict3 *trim);
void EF_Ctrl_Read_ADC_Gain_Trim(Efuse_ADC_Gain_Coeff_Type.conflict3 *trim);
BL_Err_Type AON_Power_On_MBG(void);
BL_Err_Type AON_Power_Off_MBG(void);
BL_Err_Type AON_Power_On_XTAL(void);
BL_Err_Type AON_Set_Xtal_CapCode(uint8_t capIn,uint8_t capOut);
uint8_t AON_Get_Xtal_CapCode(void);
BL_Err_Type AON_Power_Off_XTAL(void);
uint8_t EF_Ctrl_Get_Trim_Parity(uint32_t val,uint8_t len);
void EF_Ctrl_Read_RC32M_Trim(Efuse_Ana_RC32M_Trim_Type.conflict4 *trim);
void EF_Ctrl_Read_RC32K_Trim(Efuse_Ana_RC32K_Trim_Type.conflict6 *trim);
GLB_ROOT_CLK_Type GLB_Get_Root_CLK_Sel(void);
BL_Err_Type GLB_Set_System_CLK_Div(uint8_t hclkDiv,uint8_t bclkDiv);
uint8_t GLB_Get_BCLK_Div(void);
uint8_t GLB_Get_HCLK_Div(void);
BL_Err_Type Update_SystemCoreClockWith_XTAL(GLB_PLL_XTAL_Type xtalType);
BL_Err_Type GLB_Set_System_CLK(GLB_PLL_XTAL_Type xtalType,GLB_SYS_CLK_Type clkFreq);
BL_Err_Type System_Core_Clock_Update_From_RC32M(void);
BL_Err_Type GLB_Set_SF_CLK(uint8_t enable,GLB_SFLASH_CLK_Type clkSel,uint8_t div);
BL_Err_Type GLB_Set_PKA_CLK_Sel(GLB_PKA_CLK_Type clkSel);
BL_Err_Type HBN_32K_Sel(HBN_32K_CLK_Type clkType);
BL_Err_Type HBN_Set_ROOT_CLK_Sel(HBN_ROOT_CLK_Type rootClk);
BL_Err_Type HBN_Power_On_Xtal_32K(void);
BL_Err_Type HBN_Power_Off_Xtal_32K(void);
BL_Err_Type HBN_Power_On_RC32K(void);
BL_Err_Type HBN_Power_Off_RC32K(void);
BL_Err_Type HBN_Trim_RC32K(void);
BL_Err_Type PDS_Trim_RC32M(void);
BL_Err_Type PDS_Select_RC32M_As_PLL_Ref(void);
BL_Err_Type PDS_Select_XTAL_As_PLL_Ref(void);
BL_Err_Type PDS_Power_On_PLL(PDS_PLL_XTAL_Type xtalType);
BL_Err_Type PDS_Enable_PLL_All_Clks(void);
BL_Err_Type PDS_Disable_PLL_All_Clks(void);
BL_Err_Type PDS_Enable_PLL_Clk(PDS_PLL_CLK_Type pllClk);
BL_Err_Type PDS_Disable_PLL_Clk(PDS_PLL_CLK_Type pllClk);
BL_Err_Type PDS_Power_Off_PLL(void);

